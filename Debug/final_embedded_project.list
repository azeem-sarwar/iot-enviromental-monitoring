
final_embedded_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e030  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d4  0800e0f0  0800e0f0  0000f0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1c4  0800f1c4  000111d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f1c4  0800f1c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1cc  0800f1cc  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1cc  0800f1cc  000101cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f1d0  0800f1d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800f1d4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200001d4  0800f3a8  000111d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0800f3a8  00011594  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c39  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a7  00000000  00000000  00022e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000256e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afa  00000000  00000000  000264f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019db6  00000000  00000000  00026ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001332f  00000000  00000000  00040da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d4bf  00000000  00000000  000540d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1596  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000484c  00000000  00000000  000f15dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f5e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e0d4 	.word	0x0800e0d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800e0d4 	.word	0x0800e0d4

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f9a5 	bl	800279c <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f002 f8e9 	bl	8002634 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f997 	bl	800279c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f98d 	bl	800279c <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f002 f913 	bl	80026bc <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f002 f909 	bl	80026bc <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fd1d 	bl	8000f00 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fca5 	bl	8000e20 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fd0f 	bl	8000f00 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fd05 	bl	8000f00 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fcb3 	bl	8000e70 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fca9 	bl	8000e70 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f88c 	bl	8000678 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	@ 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffd0 	bl	8000518 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f001 f8c5 	bl	800170c <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	@ 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fe5b 	bl	8001244 <__aeabi_fsub>
 800058e:	f001 f8bd 	bl	800170c <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	@ 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff7d 	bl	80004a4 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f003 f851 	bl	8003658 <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f002 fc40 	bl	8002e44 <__aeabi_dsub>
 80005c4:	f003 f848 	bl	8003658 <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	@ 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__aeabi_d2lz>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	2200      	movs	r2, #0
 80005dc:	2300      	movs	r3, #0
 80005de:	0004      	movs	r4, r0
 80005e0:	000d      	movs	r5, r1
 80005e2:	f7ff ff41 	bl	8000468 <__aeabi_dcmplt>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	d108      	bne.n	80005fc <__aeabi_d2lz+0x24>
 80005ea:	0020      	movs	r0, r4
 80005ec:	0029      	movs	r1, r5
 80005ee:	f000 f80f 	bl	8000610 <__aeabi_d2ulz>
 80005f2:	0002      	movs	r2, r0
 80005f4:	000b      	movs	r3, r1
 80005f6:	0010      	movs	r0, r2
 80005f8:	0019      	movs	r1, r3
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	2380      	movs	r3, #128	@ 0x80
 80005fe:	061b      	lsls	r3, r3, #24
 8000600:	18e9      	adds	r1, r5, r3
 8000602:	0020      	movs	r0, r4
 8000604:	f000 f804 	bl	8000610 <__aeabi_d2ulz>
 8000608:	2300      	movs	r3, #0
 800060a:	4242      	negs	r2, r0
 800060c:	418b      	sbcs	r3, r1
 800060e:	e7f2      	b.n	80005f6 <__aeabi_d2lz+0x1e>

08000610 <__aeabi_d2ulz>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	2200      	movs	r2, #0
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <__aeabi_d2ulz+0x34>)
 8000616:	000d      	movs	r5, r1
 8000618:	0004      	movs	r4, r0
 800061a:	f002 f92d 	bl	8002878 <__aeabi_dmul>
 800061e:	f7ff ffbd 	bl	800059c <__aeabi_d2uiz>
 8000622:	0006      	movs	r6, r0
 8000624:	f003 f882 	bl	800372c <__aeabi_ui2d>
 8000628:	2200      	movs	r2, #0
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <__aeabi_d2ulz+0x38>)
 800062c:	f002 f924 	bl	8002878 <__aeabi_dmul>
 8000630:	0002      	movs	r2, r0
 8000632:	000b      	movs	r3, r1
 8000634:	0020      	movs	r0, r4
 8000636:	0029      	movs	r1, r5
 8000638:	f002 fc04 	bl	8002e44 <__aeabi_dsub>
 800063c:	f7ff ffae 	bl	800059c <__aeabi_d2uiz>
 8000640:	0031      	movs	r1, r6
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	3df00000 	.word	0x3df00000
 8000648:	41f00000 	.word	0x41f00000

0800064c <__aeabi_l2d>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	0006      	movs	r6, r0
 8000650:	0008      	movs	r0, r1
 8000652:	f003 f83d 	bl	80036d0 <__aeabi_i2d>
 8000656:	2200      	movs	r2, #0
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <__aeabi_l2d+0x28>)
 800065a:	f002 f90d 	bl	8002878 <__aeabi_dmul>
 800065e:	000d      	movs	r5, r1
 8000660:	0004      	movs	r4, r0
 8000662:	0030      	movs	r0, r6
 8000664:	f003 f862 	bl	800372c <__aeabi_ui2d>
 8000668:	002b      	movs	r3, r5
 800066a:	0022      	movs	r2, r4
 800066c:	f001 f904 	bl	8001878 <__aeabi_dadd>
 8000670:	bd70      	pop	{r4, r5, r6, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	41f00000 	.word	0x41f00000

08000678 <__udivmoddi4>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	4657      	mov	r7, sl
 800067c:	464e      	mov	r6, r9
 800067e:	4645      	mov	r5, r8
 8000680:	46de      	mov	lr, fp
 8000682:	b5e0      	push	{r5, r6, r7, lr}
 8000684:	0004      	movs	r4, r0
 8000686:	000d      	movs	r5, r1
 8000688:	4692      	mov	sl, r2
 800068a:	4699      	mov	r9, r3
 800068c:	b083      	sub	sp, #12
 800068e:	428b      	cmp	r3, r1
 8000690:	d830      	bhi.n	80006f4 <__udivmoddi4+0x7c>
 8000692:	d02d      	beq.n	80006f0 <__udivmoddi4+0x78>
 8000694:	4649      	mov	r1, r9
 8000696:	4650      	mov	r0, sl
 8000698:	f003 f954 	bl	8003944 <__clzdi2>
 800069c:	0029      	movs	r1, r5
 800069e:	0006      	movs	r6, r0
 80006a0:	0020      	movs	r0, r4
 80006a2:	f003 f94f 	bl	8003944 <__clzdi2>
 80006a6:	1a33      	subs	r3, r6, r0
 80006a8:	4698      	mov	r8, r3
 80006aa:	3b20      	subs	r3, #32
 80006ac:	d434      	bmi.n	8000718 <__udivmoddi4+0xa0>
 80006ae:	469b      	mov	fp, r3
 80006b0:	4653      	mov	r3, sl
 80006b2:	465a      	mov	r2, fp
 80006b4:	4093      	lsls	r3, r2
 80006b6:	4642      	mov	r2, r8
 80006b8:	001f      	movs	r7, r3
 80006ba:	4653      	mov	r3, sl
 80006bc:	4093      	lsls	r3, r2
 80006be:	001e      	movs	r6, r3
 80006c0:	42af      	cmp	r7, r5
 80006c2:	d83b      	bhi.n	800073c <__udivmoddi4+0xc4>
 80006c4:	42af      	cmp	r7, r5
 80006c6:	d100      	bne.n	80006ca <__udivmoddi4+0x52>
 80006c8:	e079      	b.n	80007be <__udivmoddi4+0x146>
 80006ca:	465b      	mov	r3, fp
 80006cc:	1ba4      	subs	r4, r4, r6
 80006ce:	41bd      	sbcs	r5, r7
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	da00      	bge.n	80006d6 <__udivmoddi4+0x5e>
 80006d4:	e076      	b.n	80007c4 <__udivmoddi4+0x14c>
 80006d6:	2200      	movs	r2, #0
 80006d8:	2300      	movs	r3, #0
 80006da:	9200      	str	r2, [sp, #0]
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	465a      	mov	r2, fp
 80006e2:	4093      	lsls	r3, r2
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2301      	movs	r3, #1
 80006e8:	4642      	mov	r2, r8
 80006ea:	4093      	lsls	r3, r2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	e029      	b.n	8000744 <__udivmoddi4+0xcc>
 80006f0:	4282      	cmp	r2, r0
 80006f2:	d9cf      	bls.n	8000694 <__udivmoddi4+0x1c>
 80006f4:	2200      	movs	r2, #0
 80006f6:	2300      	movs	r3, #0
 80006f8:	9200      	str	r2, [sp, #0]
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <__udivmoddi4+0x8e>
 8000702:	601c      	str	r4, [r3, #0]
 8000704:	605d      	str	r5, [r3, #4]
 8000706:	9800      	ldr	r0, [sp, #0]
 8000708:	9901      	ldr	r1, [sp, #4]
 800070a:	b003      	add	sp, #12
 800070c:	bcf0      	pop	{r4, r5, r6, r7}
 800070e:	46bb      	mov	fp, r7
 8000710:	46b2      	mov	sl, r6
 8000712:	46a9      	mov	r9, r5
 8000714:	46a0      	mov	r8, r4
 8000716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000718:	4642      	mov	r2, r8
 800071a:	469b      	mov	fp, r3
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	4652      	mov	r2, sl
 8000722:	40da      	lsrs	r2, r3
 8000724:	4641      	mov	r1, r8
 8000726:	0013      	movs	r3, r2
 8000728:	464a      	mov	r2, r9
 800072a:	408a      	lsls	r2, r1
 800072c:	0017      	movs	r7, r2
 800072e:	4642      	mov	r2, r8
 8000730:	431f      	orrs	r7, r3
 8000732:	4653      	mov	r3, sl
 8000734:	4093      	lsls	r3, r2
 8000736:	001e      	movs	r6, r3
 8000738:	42af      	cmp	r7, r5
 800073a:	d9c3      	bls.n	80006c4 <__udivmoddi4+0x4c>
 800073c:	2200      	movs	r2, #0
 800073e:	2300      	movs	r3, #0
 8000740:	9200      	str	r2, [sp, #0]
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	4643      	mov	r3, r8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0d8      	beq.n	80006fc <__udivmoddi4+0x84>
 800074a:	07fb      	lsls	r3, r7, #31
 800074c:	0872      	lsrs	r2, r6, #1
 800074e:	431a      	orrs	r2, r3
 8000750:	4646      	mov	r6, r8
 8000752:	087b      	lsrs	r3, r7, #1
 8000754:	e00e      	b.n	8000774 <__udivmoddi4+0xfc>
 8000756:	42ab      	cmp	r3, r5
 8000758:	d101      	bne.n	800075e <__udivmoddi4+0xe6>
 800075a:	42a2      	cmp	r2, r4
 800075c:	d80c      	bhi.n	8000778 <__udivmoddi4+0x100>
 800075e:	1aa4      	subs	r4, r4, r2
 8000760:	419d      	sbcs	r5, r3
 8000762:	2001      	movs	r0, #1
 8000764:	1924      	adds	r4, r4, r4
 8000766:	416d      	adcs	r5, r5
 8000768:	2100      	movs	r1, #0
 800076a:	3e01      	subs	r6, #1
 800076c:	1824      	adds	r4, r4, r0
 800076e:	414d      	adcs	r5, r1
 8000770:	2e00      	cmp	r6, #0
 8000772:	d006      	beq.n	8000782 <__udivmoddi4+0x10a>
 8000774:	42ab      	cmp	r3, r5
 8000776:	d9ee      	bls.n	8000756 <__udivmoddi4+0xde>
 8000778:	3e01      	subs	r6, #1
 800077a:	1924      	adds	r4, r4, r4
 800077c:	416d      	adcs	r5, r5
 800077e:	2e00      	cmp	r6, #0
 8000780:	d1f8      	bne.n	8000774 <__udivmoddi4+0xfc>
 8000782:	9800      	ldr	r0, [sp, #0]
 8000784:	9901      	ldr	r1, [sp, #4]
 8000786:	465b      	mov	r3, fp
 8000788:	1900      	adds	r0, r0, r4
 800078a:	4169      	adcs	r1, r5
 800078c:	2b00      	cmp	r3, #0
 800078e:	db24      	blt.n	80007da <__udivmoddi4+0x162>
 8000790:	002b      	movs	r3, r5
 8000792:	465a      	mov	r2, fp
 8000794:	4644      	mov	r4, r8
 8000796:	40d3      	lsrs	r3, r2
 8000798:	002a      	movs	r2, r5
 800079a:	40e2      	lsrs	r2, r4
 800079c:	001c      	movs	r4, r3
 800079e:	465b      	mov	r3, fp
 80007a0:	0015      	movs	r5, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	db2a      	blt.n	80007fc <__udivmoddi4+0x184>
 80007a6:	0026      	movs	r6, r4
 80007a8:	409e      	lsls	r6, r3
 80007aa:	0033      	movs	r3, r6
 80007ac:	0026      	movs	r6, r4
 80007ae:	4647      	mov	r7, r8
 80007b0:	40be      	lsls	r6, r7
 80007b2:	0032      	movs	r2, r6
 80007b4:	1a80      	subs	r0, r0, r2
 80007b6:	4199      	sbcs	r1, r3
 80007b8:	9000      	str	r0, [sp, #0]
 80007ba:	9101      	str	r1, [sp, #4]
 80007bc:	e79e      	b.n	80006fc <__udivmoddi4+0x84>
 80007be:	42a3      	cmp	r3, r4
 80007c0:	d8bc      	bhi.n	800073c <__udivmoddi4+0xc4>
 80007c2:	e782      	b.n	80006ca <__udivmoddi4+0x52>
 80007c4:	4642      	mov	r2, r8
 80007c6:	2320      	movs	r3, #32
 80007c8:	2100      	movs	r1, #0
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	9100      	str	r1, [sp, #0]
 80007d0:	9201      	str	r2, [sp, #4]
 80007d2:	2201      	movs	r2, #1
 80007d4:	40da      	lsrs	r2, r3
 80007d6:	9201      	str	r2, [sp, #4]
 80007d8:	e785      	b.n	80006e6 <__udivmoddi4+0x6e>
 80007da:	4642      	mov	r2, r8
 80007dc:	2320      	movs	r3, #32
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	002a      	movs	r2, r5
 80007e2:	4646      	mov	r6, r8
 80007e4:	409a      	lsls	r2, r3
 80007e6:	0023      	movs	r3, r4
 80007e8:	40f3      	lsrs	r3, r6
 80007ea:	4644      	mov	r4, r8
 80007ec:	4313      	orrs	r3, r2
 80007ee:	002a      	movs	r2, r5
 80007f0:	40e2      	lsrs	r2, r4
 80007f2:	001c      	movs	r4, r3
 80007f4:	465b      	mov	r3, fp
 80007f6:	0015      	movs	r5, r2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dad4      	bge.n	80007a6 <__udivmoddi4+0x12e>
 80007fc:	4642      	mov	r2, r8
 80007fe:	002f      	movs	r7, r5
 8000800:	2320      	movs	r3, #32
 8000802:	0026      	movs	r6, r4
 8000804:	4097      	lsls	r7, r2
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	40de      	lsrs	r6, r3
 800080a:	003b      	movs	r3, r7
 800080c:	4333      	orrs	r3, r6
 800080e:	e7cd      	b.n	80007ac <__udivmoddi4+0x134>

08000810 <__aeabi_fadd>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	024b      	lsls	r3, r1, #9
 8000814:	0a5a      	lsrs	r2, r3, #9
 8000816:	4694      	mov	ip, r2
 8000818:	004a      	lsls	r2, r1, #1
 800081a:	0fc9      	lsrs	r1, r1, #31
 800081c:	46ce      	mov	lr, r9
 800081e:	4647      	mov	r7, r8
 8000820:	4689      	mov	r9, r1
 8000822:	0045      	lsls	r5, r0, #1
 8000824:	0246      	lsls	r6, r0, #9
 8000826:	0e2d      	lsrs	r5, r5, #24
 8000828:	0e12      	lsrs	r2, r2, #24
 800082a:	b580      	push	{r7, lr}
 800082c:	0999      	lsrs	r1, r3, #6
 800082e:	0a77      	lsrs	r7, r6, #9
 8000830:	0fc4      	lsrs	r4, r0, #31
 8000832:	09b6      	lsrs	r6, r6, #6
 8000834:	1aab      	subs	r3, r5, r2
 8000836:	454c      	cmp	r4, r9
 8000838:	d020      	beq.n	800087c <__aeabi_fadd+0x6c>
 800083a:	2b00      	cmp	r3, #0
 800083c:	dd0c      	ble.n	8000858 <__aeabi_fadd+0x48>
 800083e:	2a00      	cmp	r2, #0
 8000840:	d134      	bne.n	80008ac <__aeabi_fadd+0x9c>
 8000842:	2900      	cmp	r1, #0
 8000844:	d02a      	beq.n	800089c <__aeabi_fadd+0x8c>
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	2b01      	cmp	r3, #1
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x3e>
 800084c:	e08f      	b.n	800096e <__aeabi_fadd+0x15e>
 800084e:	2bff      	cmp	r3, #255	@ 0xff
 8000850:	d100      	bne.n	8000854 <__aeabi_fadd+0x44>
 8000852:	e0cd      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 8000854:	0013      	movs	r3, r2
 8000856:	e02f      	b.n	80008b8 <__aeabi_fadd+0xa8>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d060      	beq.n	800091e <__aeabi_fadd+0x10e>
 800085c:	1b53      	subs	r3, r2, r5
 800085e:	2d00      	cmp	r5, #0
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x54>
 8000862:	e0ee      	b.n	8000a42 <__aeabi_fadd+0x232>
 8000864:	2e00      	cmp	r6, #0
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0x5a>
 8000868:	e13e      	b.n	8000ae8 <__aeabi_fadd+0x2d8>
 800086a:	1e5c      	subs	r4, r3, #1
 800086c:	2b01      	cmp	r3, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x62>
 8000870:	e16b      	b.n	8000b4a <__aeabi_fadd+0x33a>
 8000872:	2bff      	cmp	r3, #255	@ 0xff
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x68>
 8000876:	e0b9      	b.n	80009ec <__aeabi_fadd+0x1dc>
 8000878:	0023      	movs	r3, r4
 800087a:	e0e7      	b.n	8000a4c <__aeabi_fadd+0x23c>
 800087c:	2b00      	cmp	r3, #0
 800087e:	dc00      	bgt.n	8000882 <__aeabi_fadd+0x72>
 8000880:	e0a4      	b.n	80009cc <__aeabi_fadd+0x1bc>
 8000882:	2a00      	cmp	r2, #0
 8000884:	d069      	beq.n	800095a <__aeabi_fadd+0x14a>
 8000886:	2dff      	cmp	r5, #255	@ 0xff
 8000888:	d100      	bne.n	800088c <__aeabi_fadd+0x7c>
 800088a:	e0b1      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	04d2      	lsls	r2, r2, #19
 8000890:	4311      	orrs	r1, r2
 8000892:	2b1b      	cmp	r3, #27
 8000894:	dc00      	bgt.n	8000898 <__aeabi_fadd+0x88>
 8000896:	e0e9      	b.n	8000a6c <__aeabi_fadd+0x25c>
 8000898:	002b      	movs	r3, r5
 800089a:	3605      	adds	r6, #5
 800089c:	08f7      	lsrs	r7, r6, #3
 800089e:	2bff      	cmp	r3, #255	@ 0xff
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x94>
 80008a2:	e0a5      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 80008a4:	027a      	lsls	r2, r7, #9
 80008a6:	0a52      	lsrs	r2, r2, #9
 80008a8:	b2d8      	uxtb	r0, r3
 80008aa:	e030      	b.n	800090e <__aeabi_fadd+0xfe>
 80008ac:	2dff      	cmp	r5, #255	@ 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0xa2>
 80008b0:	e09e      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	04d2      	lsls	r2, r2, #19
 80008b6:	4311      	orrs	r1, r2
 80008b8:	2001      	movs	r0, #1
 80008ba:	2b1b      	cmp	r3, #27
 80008bc:	dc08      	bgt.n	80008d0 <__aeabi_fadd+0xc0>
 80008be:	0008      	movs	r0, r1
 80008c0:	2220      	movs	r2, #32
 80008c2:	40d8      	lsrs	r0, r3
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	4099      	lsls	r1, r3
 80008c8:	000b      	movs	r3, r1
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	4193      	sbcs	r3, r2
 80008ce:	4318      	orrs	r0, r3
 80008d0:	1a36      	subs	r6, r6, r0
 80008d2:	0173      	lsls	r3, r6, #5
 80008d4:	d400      	bmi.n	80008d8 <__aeabi_fadd+0xc8>
 80008d6:	e071      	b.n	80009bc <__aeabi_fadd+0x1ac>
 80008d8:	01b6      	lsls	r6, r6, #6
 80008da:	09b7      	lsrs	r7, r6, #6
 80008dc:	0038      	movs	r0, r7
 80008de:	f003 f813 	bl	8003908 <__clzsi2>
 80008e2:	003b      	movs	r3, r7
 80008e4:	3805      	subs	r0, #5
 80008e6:	4083      	lsls	r3, r0
 80008e8:	4285      	cmp	r5, r0
 80008ea:	dd4d      	ble.n	8000988 <__aeabi_fadd+0x178>
 80008ec:	4eb4      	ldr	r6, [pc, #720]	@ (8000bc0 <__aeabi_fadd+0x3b0>)
 80008ee:	1a2d      	subs	r5, r5, r0
 80008f0:	401e      	ands	r6, r3
 80008f2:	075a      	lsls	r2, r3, #29
 80008f4:	d068      	beq.n	80009c8 <__aeabi_fadd+0x1b8>
 80008f6:	220f      	movs	r2, #15
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d064      	beq.n	80009c8 <__aeabi_fadd+0x1b8>
 80008fe:	3604      	adds	r6, #4
 8000900:	0173      	lsls	r3, r6, #5
 8000902:	d561      	bpl.n	80009c8 <__aeabi_fadd+0x1b8>
 8000904:	1c68      	adds	r0, r5, #1
 8000906:	2dfe      	cmp	r5, #254	@ 0xfe
 8000908:	d154      	bne.n	80009b4 <__aeabi_fadd+0x1a4>
 800090a:	20ff      	movs	r0, #255	@ 0xff
 800090c:	2200      	movs	r2, #0
 800090e:	05c0      	lsls	r0, r0, #23
 8000910:	4310      	orrs	r0, r2
 8000912:	07e4      	lsls	r4, r4, #31
 8000914:	4320      	orrs	r0, r4
 8000916:	bcc0      	pop	{r6, r7}
 8000918:	46b9      	mov	r9, r7
 800091a:	46b0      	mov	r8, r6
 800091c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800091e:	22fe      	movs	r2, #254	@ 0xfe
 8000920:	4690      	mov	r8, r2
 8000922:	1c68      	adds	r0, r5, #1
 8000924:	0002      	movs	r2, r0
 8000926:	4640      	mov	r0, r8
 8000928:	4210      	tst	r0, r2
 800092a:	d16b      	bne.n	8000a04 <__aeabi_fadd+0x1f4>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_fadd+0x122>
 8000930:	e0dd      	b.n	8000aee <__aeabi_fadd+0x2de>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x128>
 8000936:	e102      	b.n	8000b3e <__aeabi_fadd+0x32e>
 8000938:	2900      	cmp	r1, #0
 800093a:	d0b3      	beq.n	80008a4 <__aeabi_fadd+0x94>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	1a77      	subs	r7, r6, r1
 8000940:	04d2      	lsls	r2, r2, #19
 8000942:	4217      	tst	r7, r2
 8000944:	d100      	bne.n	8000948 <__aeabi_fadd+0x138>
 8000946:	e136      	b.n	8000bb6 <__aeabi_fadd+0x3a6>
 8000948:	464c      	mov	r4, r9
 800094a:	1b8e      	subs	r6, r1, r6
 800094c:	d061      	beq.n	8000a12 <__aeabi_fadd+0x202>
 800094e:	2001      	movs	r0, #1
 8000950:	4216      	tst	r6, r2
 8000952:	d130      	bne.n	80009b6 <__aeabi_fadd+0x1a6>
 8000954:	2300      	movs	r3, #0
 8000956:	08f7      	lsrs	r7, r6, #3
 8000958:	e7a4      	b.n	80008a4 <__aeabi_fadd+0x94>
 800095a:	2900      	cmp	r1, #0
 800095c:	d09e      	beq.n	800089c <__aeabi_fadd+0x8c>
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	2b01      	cmp	r3, #1
 8000962:	d100      	bne.n	8000966 <__aeabi_fadd+0x156>
 8000964:	e0ca      	b.n	8000afc <__aeabi_fadd+0x2ec>
 8000966:	2bff      	cmp	r3, #255	@ 0xff
 8000968:	d042      	beq.n	80009f0 <__aeabi_fadd+0x1e0>
 800096a:	0013      	movs	r3, r2
 800096c:	e791      	b.n	8000892 <__aeabi_fadd+0x82>
 800096e:	1a71      	subs	r1, r6, r1
 8000970:	014b      	lsls	r3, r1, #5
 8000972:	d400      	bmi.n	8000976 <__aeabi_fadd+0x166>
 8000974:	e0d1      	b.n	8000b1a <__aeabi_fadd+0x30a>
 8000976:	018f      	lsls	r7, r1, #6
 8000978:	09bf      	lsrs	r7, r7, #6
 800097a:	0038      	movs	r0, r7
 800097c:	f002 ffc4 	bl	8003908 <__clzsi2>
 8000980:	003b      	movs	r3, r7
 8000982:	3805      	subs	r0, #5
 8000984:	4083      	lsls	r3, r0
 8000986:	2501      	movs	r5, #1
 8000988:	2220      	movs	r2, #32
 800098a:	1b40      	subs	r0, r0, r5
 800098c:	3001      	adds	r0, #1
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	001e      	movs	r6, r3
 8000992:	4093      	lsls	r3, r2
 8000994:	40c6      	lsrs	r6, r0
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	4193      	sbcs	r3, r2
 800099a:	431e      	orrs	r6, r3
 800099c:	d039      	beq.n	8000a12 <__aeabi_fadd+0x202>
 800099e:	0773      	lsls	r3, r6, #29
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fadd+0x194>
 80009a2:	e11b      	b.n	8000bdc <__aeabi_fadd+0x3cc>
 80009a4:	230f      	movs	r3, #15
 80009a6:	2500      	movs	r5, #0
 80009a8:	4033      	ands	r3, r6
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d1a7      	bne.n	80008fe <__aeabi_fadd+0xee>
 80009ae:	2001      	movs	r0, #1
 80009b0:	0172      	lsls	r2, r6, #5
 80009b2:	d57c      	bpl.n	8000aae <__aeabi_fadd+0x29e>
 80009b4:	b2c0      	uxtb	r0, r0
 80009b6:	01b2      	lsls	r2, r6, #6
 80009b8:	0a52      	lsrs	r2, r2, #9
 80009ba:	e7a8      	b.n	800090e <__aeabi_fadd+0xfe>
 80009bc:	0773      	lsls	r3, r6, #29
 80009be:	d003      	beq.n	80009c8 <__aeabi_fadd+0x1b8>
 80009c0:	230f      	movs	r3, #15
 80009c2:	4033      	ands	r3, r6
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d19a      	bne.n	80008fe <__aeabi_fadd+0xee>
 80009c8:	002b      	movs	r3, r5
 80009ca:	e767      	b.n	800089c <__aeabi_fadd+0x8c>
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d023      	beq.n	8000a18 <__aeabi_fadd+0x208>
 80009d0:	1b53      	subs	r3, r2, r5
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d17b      	bne.n	8000ace <__aeabi_fadd+0x2be>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_fadd+0x1cc>
 80009da:	e086      	b.n	8000aea <__aeabi_fadd+0x2da>
 80009dc:	1e5d      	subs	r5, r3, #1
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x1d4>
 80009e2:	e08b      	b.n	8000afc <__aeabi_fadd+0x2ec>
 80009e4:	2bff      	cmp	r3, #255	@ 0xff
 80009e6:	d002      	beq.n	80009ee <__aeabi_fadd+0x1de>
 80009e8:	002b      	movs	r3, r5
 80009ea:	e075      	b.n	8000ad8 <__aeabi_fadd+0x2c8>
 80009ec:	464c      	mov	r4, r9
 80009ee:	4667      	mov	r7, ip
 80009f0:	2f00      	cmp	r7, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fadd+0x1e6>
 80009f4:	e789      	b.n	800090a <__aeabi_fadd+0xfa>
 80009f6:	2280      	movs	r2, #128	@ 0x80
 80009f8:	03d2      	lsls	r2, r2, #15
 80009fa:	433a      	orrs	r2, r7
 80009fc:	0252      	lsls	r2, r2, #9
 80009fe:	20ff      	movs	r0, #255	@ 0xff
 8000a00:	0a52      	lsrs	r2, r2, #9
 8000a02:	e784      	b.n	800090e <__aeabi_fadd+0xfe>
 8000a04:	1a77      	subs	r7, r6, r1
 8000a06:	017b      	lsls	r3, r7, #5
 8000a08:	d46b      	bmi.n	8000ae2 <__aeabi_fadd+0x2d2>
 8000a0a:	2f00      	cmp	r7, #0
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fadd+0x200>
 8000a0e:	e765      	b.n	80008dc <__aeabi_fadd+0xcc>
 8000a10:	2400      	movs	r4, #0
 8000a12:	2000      	movs	r0, #0
 8000a14:	2200      	movs	r2, #0
 8000a16:	e77a      	b.n	800090e <__aeabi_fadd+0xfe>
 8000a18:	22fe      	movs	r2, #254	@ 0xfe
 8000a1a:	1c6b      	adds	r3, r5, #1
 8000a1c:	421a      	tst	r2, r3
 8000a1e:	d149      	bne.n	8000ab4 <__aeabi_fadd+0x2a4>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d000      	beq.n	8000a26 <__aeabi_fadd+0x216>
 8000a24:	e09f      	b.n	8000b66 <__aeabi_fadd+0x356>
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fadd+0x21c>
 8000a2a:	e0ba      	b.n	8000ba2 <__aeabi_fadd+0x392>
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_fadd+0x222>
 8000a30:	e0cf      	b.n	8000bd2 <__aeabi_fadd+0x3c2>
 8000a32:	1872      	adds	r2, r6, r1
 8000a34:	0153      	lsls	r3, r2, #5
 8000a36:	d400      	bmi.n	8000a3a <__aeabi_fadd+0x22a>
 8000a38:	e0cd      	b.n	8000bd6 <__aeabi_fadd+0x3c6>
 8000a3a:	0192      	lsls	r2, r2, #6
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	0a52      	lsrs	r2, r2, #9
 8000a40:	e765      	b.n	800090e <__aeabi_fadd+0xfe>
 8000a42:	2aff      	cmp	r2, #255	@ 0xff
 8000a44:	d0d2      	beq.n	80009ec <__aeabi_fadd+0x1dc>
 8000a46:	2080      	movs	r0, #128	@ 0x80
 8000a48:	04c0      	lsls	r0, r0, #19
 8000a4a:	4306      	orrs	r6, r0
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	2b1b      	cmp	r3, #27
 8000a50:	dc08      	bgt.n	8000a64 <__aeabi_fadd+0x254>
 8000a52:	0030      	movs	r0, r6
 8000a54:	2420      	movs	r4, #32
 8000a56:	40d8      	lsrs	r0, r3
 8000a58:	1ae3      	subs	r3, r4, r3
 8000a5a:	409e      	lsls	r6, r3
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	1e5c      	subs	r4, r3, #1
 8000a60:	41a3      	sbcs	r3, r4
 8000a62:	4318      	orrs	r0, r3
 8000a64:	464c      	mov	r4, r9
 8000a66:	0015      	movs	r5, r2
 8000a68:	1a0e      	subs	r6, r1, r0
 8000a6a:	e732      	b.n	80008d2 <__aeabi_fadd+0xc2>
 8000a6c:	0008      	movs	r0, r1
 8000a6e:	2220      	movs	r2, #32
 8000a70:	40d8      	lsrs	r0, r3
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	4099      	lsls	r1, r3
 8000a76:	000b      	movs	r3, r1
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	4193      	sbcs	r3, r2
 8000a7c:	4303      	orrs	r3, r0
 8000a7e:	18f6      	adds	r6, r6, r3
 8000a80:	0173      	lsls	r3, r6, #5
 8000a82:	d59b      	bpl.n	80009bc <__aeabi_fadd+0x1ac>
 8000a84:	3501      	adds	r5, #1
 8000a86:	2dff      	cmp	r5, #255	@ 0xff
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x27c>
 8000a8a:	e73e      	b.n	800090a <__aeabi_fadd+0xfa>
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	494d      	ldr	r1, [pc, #308]	@ (8000bc4 <__aeabi_fadd+0x3b4>)
 8000a90:	0872      	lsrs	r2, r6, #1
 8000a92:	4033      	ands	r3, r6
 8000a94:	400a      	ands	r2, r1
 8000a96:	431a      	orrs	r2, r3
 8000a98:	0016      	movs	r6, r2
 8000a9a:	0753      	lsls	r3, r2, #29
 8000a9c:	d004      	beq.n	8000aa8 <__aeabi_fadd+0x298>
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fadd+0x298>
 8000aa6:	e72a      	b.n	80008fe <__aeabi_fadd+0xee>
 8000aa8:	0173      	lsls	r3, r6, #5
 8000aaa:	d500      	bpl.n	8000aae <__aeabi_fadd+0x29e>
 8000aac:	e72a      	b.n	8000904 <__aeabi_fadd+0xf4>
 8000aae:	002b      	movs	r3, r5
 8000ab0:	08f7      	lsrs	r7, r6, #3
 8000ab2:	e6f7      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000ab4:	2bff      	cmp	r3, #255	@ 0xff
 8000ab6:	d100      	bne.n	8000aba <__aeabi_fadd+0x2aa>
 8000ab8:	e727      	b.n	800090a <__aeabi_fadd+0xfa>
 8000aba:	1871      	adds	r1, r6, r1
 8000abc:	0849      	lsrs	r1, r1, #1
 8000abe:	074a      	lsls	r2, r1, #29
 8000ac0:	d02f      	beq.n	8000b22 <__aeabi_fadd+0x312>
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	2a04      	cmp	r2, #4
 8000ac8:	d02b      	beq.n	8000b22 <__aeabi_fadd+0x312>
 8000aca:	1d0e      	adds	r6, r1, #4
 8000acc:	e6e6      	b.n	800089c <__aeabi_fadd+0x8c>
 8000ace:	2aff      	cmp	r2, #255	@ 0xff
 8000ad0:	d08d      	beq.n	80009ee <__aeabi_fadd+0x1de>
 8000ad2:	2080      	movs	r0, #128	@ 0x80
 8000ad4:	04c0      	lsls	r0, r0, #19
 8000ad6:	4306      	orrs	r6, r0
 8000ad8:	2b1b      	cmp	r3, #27
 8000ada:	dd24      	ble.n	8000b26 <__aeabi_fadd+0x316>
 8000adc:	0013      	movs	r3, r2
 8000ade:	1d4e      	adds	r6, r1, #5
 8000ae0:	e6dc      	b.n	800089c <__aeabi_fadd+0x8c>
 8000ae2:	464c      	mov	r4, r9
 8000ae4:	1b8f      	subs	r7, r1, r6
 8000ae6:	e6f9      	b.n	80008dc <__aeabi_fadd+0xcc>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	000e      	movs	r6, r1
 8000aec:	e6d6      	b.n	800089c <__aeabi_fadd+0x8c>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d149      	bne.n	8000b86 <__aeabi_fadd+0x376>
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d068      	beq.n	8000bc8 <__aeabi_fadd+0x3b8>
 8000af6:	4667      	mov	r7, ip
 8000af8:	464c      	mov	r4, r9
 8000afa:	e77c      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000afc:	1870      	adds	r0, r6, r1
 8000afe:	0143      	lsls	r3, r0, #5
 8000b00:	d574      	bpl.n	8000bec <__aeabi_fadd+0x3dc>
 8000b02:	4930      	ldr	r1, [pc, #192]	@ (8000bc4 <__aeabi_fadd+0x3b4>)
 8000b04:	0840      	lsrs	r0, r0, #1
 8000b06:	4001      	ands	r1, r0
 8000b08:	0743      	lsls	r3, r0, #29
 8000b0a:	d009      	beq.n	8000b20 <__aeabi_fadd+0x310>
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	4003      	ands	r3, r0
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d005      	beq.n	8000b20 <__aeabi_fadd+0x310>
 8000b14:	2302      	movs	r3, #2
 8000b16:	1d0e      	adds	r6, r1, #4
 8000b18:	e6c0      	b.n	800089c <__aeabi_fadd+0x8c>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	08cf      	lsrs	r7, r1, #3
 8000b1e:	e6c1      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000b20:	2302      	movs	r3, #2
 8000b22:	08cf      	lsrs	r7, r1, #3
 8000b24:	e6be      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000b26:	2520      	movs	r5, #32
 8000b28:	0030      	movs	r0, r6
 8000b2a:	40d8      	lsrs	r0, r3
 8000b2c:	1aeb      	subs	r3, r5, r3
 8000b2e:	409e      	lsls	r6, r3
 8000b30:	0033      	movs	r3, r6
 8000b32:	1e5d      	subs	r5, r3, #1
 8000b34:	41ab      	sbcs	r3, r5
 8000b36:	4303      	orrs	r3, r0
 8000b38:	0015      	movs	r5, r2
 8000b3a:	185e      	adds	r6, r3, r1
 8000b3c:	e7a0      	b.n	8000a80 <__aeabi_fadd+0x270>
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fadd+0x334>
 8000b42:	e765      	b.n	8000a10 <__aeabi_fadd+0x200>
 8000b44:	464c      	mov	r4, r9
 8000b46:	4667      	mov	r7, ip
 8000b48:	e6ac      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000b4a:	1b8f      	subs	r7, r1, r6
 8000b4c:	017b      	lsls	r3, r7, #5
 8000b4e:	d52e      	bpl.n	8000bae <__aeabi_fadd+0x39e>
 8000b50:	01bf      	lsls	r7, r7, #6
 8000b52:	09bf      	lsrs	r7, r7, #6
 8000b54:	0038      	movs	r0, r7
 8000b56:	f002 fed7 	bl	8003908 <__clzsi2>
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	3805      	subs	r0, #5
 8000b5e:	4083      	lsls	r3, r0
 8000b60:	464c      	mov	r4, r9
 8000b62:	3501      	adds	r5, #1
 8000b64:	e710      	b.n	8000988 <__aeabi_fadd+0x178>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fadd+0x35c>
 8000b6a:	e740      	b.n	80009ee <__aeabi_fadd+0x1de>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fadd+0x362>
 8000b70:	e741      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b72:	2380      	movs	r3, #128	@ 0x80
 8000b74:	03db      	lsls	r3, r3, #15
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d200      	bcs.n	8000b7c <__aeabi_fadd+0x36c>
 8000b7a:	e73c      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b7c:	459c      	cmp	ip, r3
 8000b7e:	d300      	bcc.n	8000b82 <__aeabi_fadd+0x372>
 8000b80:	e739      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b82:	4667      	mov	r7, ip
 8000b84:	e737      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b86:	2900      	cmp	r1, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fadd+0x37c>
 8000b8a:	e734      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b8c:	2380      	movs	r3, #128	@ 0x80
 8000b8e:	03db      	lsls	r3, r3, #15
 8000b90:	429f      	cmp	r7, r3
 8000b92:	d200      	bcs.n	8000b96 <__aeabi_fadd+0x386>
 8000b94:	e72f      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b96:	459c      	cmp	ip, r3
 8000b98:	d300      	bcc.n	8000b9c <__aeabi_fadd+0x38c>
 8000b9a:	e72c      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b9c:	464c      	mov	r4, r9
 8000b9e:	4667      	mov	r7, ip
 8000ba0:	e729      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fadd+0x398>
 8000ba6:	e734      	b.n	8000a12 <__aeabi_fadd+0x202>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	08cf      	lsrs	r7, r1, #3
 8000bac:	e67a      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bae:	464c      	mov	r4, r9
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	08ff      	lsrs	r7, r7, #3
 8000bb4:	e676      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fadd+0x3ac>
 8000bba:	e729      	b.n	8000a10 <__aeabi_fadd+0x200>
 8000bbc:	08ff      	lsrs	r7, r7, #3
 8000bbe:	e671      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bc0:	fbffffff 	.word	0xfbffffff
 8000bc4:	7dffffff 	.word	0x7dffffff
 8000bc8:	2280      	movs	r2, #128	@ 0x80
 8000bca:	2400      	movs	r4, #0
 8000bcc:	20ff      	movs	r0, #255	@ 0xff
 8000bce:	03d2      	lsls	r2, r2, #15
 8000bd0:	e69d      	b.n	800090e <__aeabi_fadd+0xfe>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e666      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	08d7      	lsrs	r7, r2, #3
 8000bda:	e663      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bdc:	2001      	movs	r0, #1
 8000bde:	0172      	lsls	r2, r6, #5
 8000be0:	d500      	bpl.n	8000be4 <__aeabi_fadd+0x3d4>
 8000be2:	e6e7      	b.n	80009b4 <__aeabi_fadd+0x1a4>
 8000be4:	0031      	movs	r1, r6
 8000be6:	2300      	movs	r3, #0
 8000be8:	08cf      	lsrs	r7, r1, #3
 8000bea:	e65b      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bec:	2301      	movs	r3, #1
 8000bee:	08c7      	lsrs	r7, r0, #3
 8000bf0:	e658      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bf2:	46c0      	nop			@ (mov r8, r8)

08000bf4 <__aeabi_fdiv>:
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	4646      	mov	r6, r8
 8000bf8:	464f      	mov	r7, r9
 8000bfa:	46d6      	mov	lr, sl
 8000bfc:	0245      	lsls	r5, r0, #9
 8000bfe:	b5c0      	push	{r6, r7, lr}
 8000c00:	0fc3      	lsrs	r3, r0, #31
 8000c02:	0047      	lsls	r7, r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	1c0e      	adds	r6, r1, #0
 8000c08:	0a6d      	lsrs	r5, r5, #9
 8000c0a:	0e3f      	lsrs	r7, r7, #24
 8000c0c:	d05b      	beq.n	8000cc6 <__aeabi_fdiv+0xd2>
 8000c0e:	2fff      	cmp	r7, #255	@ 0xff
 8000c10:	d021      	beq.n	8000c56 <__aeabi_fdiv+0x62>
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	00ed      	lsls	r5, r5, #3
 8000c16:	04db      	lsls	r3, r3, #19
 8000c18:	431d      	orrs	r5, r3
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3f7f      	subs	r7, #127	@ 0x7f
 8000c22:	0274      	lsls	r4, r6, #9
 8000c24:	0073      	lsls	r3, r6, #1
 8000c26:	0a64      	lsrs	r4, r4, #9
 8000c28:	0e1b      	lsrs	r3, r3, #24
 8000c2a:	0ff6      	lsrs	r6, r6, #31
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d020      	beq.n	8000c72 <__aeabi_fdiv+0x7e>
 8000c30:	2bff      	cmp	r3, #255	@ 0xff
 8000c32:	d043      	beq.n	8000cbc <__aeabi_fdiv+0xc8>
 8000c34:	2280      	movs	r2, #128	@ 0x80
 8000c36:	2000      	movs	r0, #0
 8000c38:	00e4      	lsls	r4, r4, #3
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	4314      	orrs	r4, r2
 8000c3e:	3b7f      	subs	r3, #127	@ 0x7f
 8000c40:	4642      	mov	r2, r8
 8000c42:	1aff      	subs	r7, r7, r3
 8000c44:	464b      	mov	r3, r9
 8000c46:	4072      	eors	r2, r6
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d900      	bls.n	8000c4e <__aeabi_fdiv+0x5a>
 8000c4c:	e09d      	b.n	8000d8a <__aeabi_fdiv+0x196>
 8000c4e:	4971      	ldr	r1, [pc, #452]	@ (8000e14 <__aeabi_fdiv+0x220>)
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	58cb      	ldr	r3, [r1, r3]
 8000c54:	469f      	mov	pc, r3
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d15a      	bne.n	8000d10 <__aeabi_fdiv+0x11c>
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	4699      	mov	r9, r3
 8000c5e:	3b06      	subs	r3, #6
 8000c60:	0274      	lsls	r4, r6, #9
 8000c62:	469a      	mov	sl, r3
 8000c64:	0073      	lsls	r3, r6, #1
 8000c66:	27ff      	movs	r7, #255	@ 0xff
 8000c68:	0a64      	lsrs	r4, r4, #9
 8000c6a:	0e1b      	lsrs	r3, r3, #24
 8000c6c:	0ff6      	lsrs	r6, r6, #31
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1de      	bne.n	8000c30 <__aeabi_fdiv+0x3c>
 8000c72:	2c00      	cmp	r4, #0
 8000c74:	d13b      	bne.n	8000cee <__aeabi_fdiv+0xfa>
 8000c76:	2301      	movs	r3, #1
 8000c78:	4642      	mov	r2, r8
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	4072      	eors	r2, r6
 8000c7e:	4319      	orrs	r1, r3
 8000c80:	290e      	cmp	r1, #14
 8000c82:	d818      	bhi.n	8000cb6 <__aeabi_fdiv+0xc2>
 8000c84:	4864      	ldr	r0, [pc, #400]	@ (8000e18 <__aeabi_fdiv+0x224>)
 8000c86:	0089      	lsls	r1, r1, #2
 8000c88:	5841      	ldr	r1, [r0, r1]
 8000c8a:	468f      	mov	pc, r1
 8000c8c:	4653      	mov	r3, sl
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fdiv+0xa0>
 8000c92:	e0b8      	b.n	8000e06 <__aeabi_fdiv+0x212>
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d06e      	beq.n	8000d76 <__aeabi_fdiv+0x182>
 8000c98:	4642      	mov	r2, r8
 8000c9a:	002c      	movs	r4, r5
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d140      	bne.n	8000d22 <__aeabi_fdiv+0x12e>
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	05c0      	lsls	r0, r0, #23
 8000ca6:	4320      	orrs	r0, r4
 8000ca8:	07d2      	lsls	r2, r2, #31
 8000caa:	4310      	orrs	r0, r2
 8000cac:	bce0      	pop	{r5, r6, r7}
 8000cae:	46ba      	mov	sl, r7
 8000cb0:	46b1      	mov	r9, r6
 8000cb2:	46a8      	mov	r8, r5
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb6:	20ff      	movs	r0, #255	@ 0xff
 8000cb8:	2400      	movs	r4, #0
 8000cba:	e7f3      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d120      	bne.n	8000d02 <__aeabi_fdiv+0x10e>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	3fff      	subs	r7, #255	@ 0xff
 8000cc4:	e7d8      	b.n	8000c78 <__aeabi_fdiv+0x84>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d105      	bne.n	8000cd6 <__aeabi_fdiv+0xe2>
 8000cca:	2304      	movs	r3, #4
 8000ccc:	4699      	mov	r9, r3
 8000cce:	3b03      	subs	r3, #3
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	e7a5      	b.n	8000c22 <__aeabi_fdiv+0x2e>
 8000cd6:	0028      	movs	r0, r5
 8000cd8:	f002 fe16 	bl	8003908 <__clzsi2>
 8000cdc:	2776      	movs	r7, #118	@ 0x76
 8000cde:	1f43      	subs	r3, r0, #5
 8000ce0:	409d      	lsls	r5, r3
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	427f      	negs	r7, r7
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	469a      	mov	sl, r3
 8000cea:	1a3f      	subs	r7, r7, r0
 8000cec:	e799      	b.n	8000c22 <__aeabi_fdiv+0x2e>
 8000cee:	0020      	movs	r0, r4
 8000cf0:	f002 fe0a 	bl	8003908 <__clzsi2>
 8000cf4:	1f43      	subs	r3, r0, #5
 8000cf6:	409c      	lsls	r4, r3
 8000cf8:	2376      	movs	r3, #118	@ 0x76
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	1a1b      	subs	r3, r3, r0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	e79e      	b.n	8000c40 <__aeabi_fdiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	464a      	mov	r2, r9
 8000d06:	431a      	orrs	r2, r3
 8000d08:	4691      	mov	r9, r2
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	33fc      	adds	r3, #252	@ 0xfc
 8000d0e:	e797      	b.n	8000c40 <__aeabi_fdiv+0x4c>
 8000d10:	230c      	movs	r3, #12
 8000d12:	4699      	mov	r9, r3
 8000d14:	3b09      	subs	r3, #9
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	469a      	mov	sl, r3
 8000d1a:	e782      	b.n	8000c22 <__aeabi_fdiv+0x2e>
 8000d1c:	2803      	cmp	r0, #3
 8000d1e:	d02c      	beq.n	8000d7a <__aeabi_fdiv+0x186>
 8000d20:	0032      	movs	r2, r6
 8000d22:	0038      	movs	r0, r7
 8000d24:	307f      	adds	r0, #127	@ 0x7f
 8000d26:	2800      	cmp	r0, #0
 8000d28:	dd47      	ble.n	8000dba <__aeabi_fdiv+0x1c6>
 8000d2a:	0763      	lsls	r3, r4, #29
 8000d2c:	d004      	beq.n	8000d38 <__aeabi_fdiv+0x144>
 8000d2e:	230f      	movs	r3, #15
 8000d30:	4023      	ands	r3, r4
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d000      	beq.n	8000d38 <__aeabi_fdiv+0x144>
 8000d36:	3404      	adds	r4, #4
 8000d38:	0123      	lsls	r3, r4, #4
 8000d3a:	d503      	bpl.n	8000d44 <__aeabi_fdiv+0x150>
 8000d3c:	0038      	movs	r0, r7
 8000d3e:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <__aeabi_fdiv+0x228>)
 8000d40:	3080      	adds	r0, #128	@ 0x80
 8000d42:	401c      	ands	r4, r3
 8000d44:	28fe      	cmp	r0, #254	@ 0xfe
 8000d46:	dcb6      	bgt.n	8000cb6 <__aeabi_fdiv+0xc2>
 8000d48:	01a4      	lsls	r4, r4, #6
 8000d4a:	0a64      	lsrs	r4, r4, #9
 8000d4c:	b2c0      	uxtb	r0, r0
 8000d4e:	e7a9      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d50:	2480      	movs	r4, #128	@ 0x80
 8000d52:	2200      	movs	r2, #0
 8000d54:	20ff      	movs	r0, #255	@ 0xff
 8000d56:	03e4      	lsls	r4, r4, #15
 8000d58:	e7a4      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d5a:	2380      	movs	r3, #128	@ 0x80
 8000d5c:	03db      	lsls	r3, r3, #15
 8000d5e:	421d      	tst	r5, r3
 8000d60:	d001      	beq.n	8000d66 <__aeabi_fdiv+0x172>
 8000d62:	421c      	tst	r4, r3
 8000d64:	d00b      	beq.n	8000d7e <__aeabi_fdiv+0x18a>
 8000d66:	2480      	movs	r4, #128	@ 0x80
 8000d68:	03e4      	lsls	r4, r4, #15
 8000d6a:	432c      	orrs	r4, r5
 8000d6c:	0264      	lsls	r4, r4, #9
 8000d6e:	4642      	mov	r2, r8
 8000d70:	20ff      	movs	r0, #255	@ 0xff
 8000d72:	0a64      	lsrs	r4, r4, #9
 8000d74:	e796      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d76:	4646      	mov	r6, r8
 8000d78:	002c      	movs	r4, r5
 8000d7a:	2380      	movs	r3, #128	@ 0x80
 8000d7c:	03db      	lsls	r3, r3, #15
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	0264      	lsls	r4, r4, #9
 8000d82:	0032      	movs	r2, r6
 8000d84:	20ff      	movs	r0, #255	@ 0xff
 8000d86:	0a64      	lsrs	r4, r4, #9
 8000d88:	e78c      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d8a:	016d      	lsls	r5, r5, #5
 8000d8c:	0160      	lsls	r0, r4, #5
 8000d8e:	4285      	cmp	r5, r0
 8000d90:	d22d      	bcs.n	8000dee <__aeabi_fdiv+0x1fa>
 8000d92:	231b      	movs	r3, #27
 8000d94:	2400      	movs	r4, #0
 8000d96:	3f01      	subs	r7, #1
 8000d98:	2601      	movs	r6, #1
 8000d9a:	0029      	movs	r1, r5
 8000d9c:	0064      	lsls	r4, r4, #1
 8000d9e:	006d      	lsls	r5, r5, #1
 8000da0:	2900      	cmp	r1, #0
 8000da2:	db01      	blt.n	8000da8 <__aeabi_fdiv+0x1b4>
 8000da4:	4285      	cmp	r5, r0
 8000da6:	d301      	bcc.n	8000dac <__aeabi_fdiv+0x1b8>
 8000da8:	1a2d      	subs	r5, r5, r0
 8000daa:	4334      	orrs	r4, r6
 8000dac:	3b01      	subs	r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f3      	bne.n	8000d9a <__aeabi_fdiv+0x1a6>
 8000db2:	1e6b      	subs	r3, r5, #1
 8000db4:	419d      	sbcs	r5, r3
 8000db6:	432c      	orrs	r4, r5
 8000db8:	e7b3      	b.n	8000d22 <__aeabi_fdiv+0x12e>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	1a1b      	subs	r3, r3, r0
 8000dbe:	2b1b      	cmp	r3, #27
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_fdiv+0x1d0>
 8000dc2:	e76d      	b.n	8000ca0 <__aeabi_fdiv+0xac>
 8000dc4:	0021      	movs	r1, r4
 8000dc6:	379e      	adds	r7, #158	@ 0x9e
 8000dc8:	40d9      	lsrs	r1, r3
 8000dca:	40bc      	lsls	r4, r7
 8000dcc:	000b      	movs	r3, r1
 8000dce:	1e61      	subs	r1, r4, #1
 8000dd0:	418c      	sbcs	r4, r1
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	0759      	lsls	r1, r3, #29
 8000dd6:	d004      	beq.n	8000de2 <__aeabi_fdiv+0x1ee>
 8000dd8:	210f      	movs	r1, #15
 8000dda:	4019      	ands	r1, r3
 8000ddc:	2904      	cmp	r1, #4
 8000dde:	d000      	beq.n	8000de2 <__aeabi_fdiv+0x1ee>
 8000de0:	3304      	adds	r3, #4
 8000de2:	0159      	lsls	r1, r3, #5
 8000de4:	d413      	bmi.n	8000e0e <__aeabi_fdiv+0x21a>
 8000de6:	019b      	lsls	r3, r3, #6
 8000de8:	2000      	movs	r0, #0
 8000dea:	0a5c      	lsrs	r4, r3, #9
 8000dec:	e75a      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000dee:	231a      	movs	r3, #26
 8000df0:	2401      	movs	r4, #1
 8000df2:	1a2d      	subs	r5, r5, r0
 8000df4:	e7d0      	b.n	8000d98 <__aeabi_fdiv+0x1a4>
 8000df6:	1e98      	subs	r0, r3, #2
 8000df8:	4243      	negs	r3, r0
 8000dfa:	4158      	adcs	r0, r3
 8000dfc:	4240      	negs	r0, r0
 8000dfe:	0032      	movs	r2, r6
 8000e00:	2400      	movs	r4, #0
 8000e02:	b2c0      	uxtb	r0, r0
 8000e04:	e74e      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000e06:	4642      	mov	r2, r8
 8000e08:	20ff      	movs	r0, #255	@ 0xff
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	e74a      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	2400      	movs	r4, #0
 8000e12:	e747      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000e14:	0800ec6c 	.word	0x0800ec6c
 8000e18:	0800ecac 	.word	0x0800ecac
 8000e1c:	f7ffffff 	.word	0xf7ffffff

08000e20 <__eqsf2>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	0042      	lsls	r2, r0, #1
 8000e24:	024e      	lsls	r6, r1, #9
 8000e26:	004c      	lsls	r4, r1, #1
 8000e28:	0245      	lsls	r5, r0, #9
 8000e2a:	0a6d      	lsrs	r5, r5, #9
 8000e2c:	0e12      	lsrs	r2, r2, #24
 8000e2e:	0fc3      	lsrs	r3, r0, #31
 8000e30:	0a76      	lsrs	r6, r6, #9
 8000e32:	0e24      	lsrs	r4, r4, #24
 8000e34:	0fc9      	lsrs	r1, r1, #31
 8000e36:	2aff      	cmp	r2, #255	@ 0xff
 8000e38:	d010      	beq.n	8000e5c <__eqsf2+0x3c>
 8000e3a:	2cff      	cmp	r4, #255	@ 0xff
 8000e3c:	d00c      	beq.n	8000e58 <__eqsf2+0x38>
 8000e3e:	2001      	movs	r0, #1
 8000e40:	42a2      	cmp	r2, r4
 8000e42:	d10a      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e44:	42b5      	cmp	r5, r6
 8000e46:	d108      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d00f      	beq.n	8000e6c <__eqsf2+0x4c>
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d104      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e50:	0028      	movs	r0, r5
 8000e52:	1e43      	subs	r3, r0, #1
 8000e54:	4198      	sbcs	r0, r3
 8000e56:	e000      	b.n	8000e5a <__eqsf2+0x3a>
 8000e58:	2001      	movs	r0, #1
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	2cff      	cmp	r4, #255	@ 0xff
 8000e60:	d1fb      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e62:	4335      	orrs	r5, r6
 8000e64:	d1f9      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e66:	404b      	eors	r3, r1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	e7f6      	b.n	8000e5a <__eqsf2+0x3a>
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e7f4      	b.n	8000e5a <__eqsf2+0x3a>

08000e70 <__gesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d018      	beq.n	8000ebc <__gesf2+0x4c>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00a      	beq.n	8000ea4 <__gesf2+0x34>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__gesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10a      	bne.n	8000eac <__gesf2+0x3c>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d029      	beq.n	8000eee <__gesf2+0x7e>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d12d      	bne.n	8000efa <__gesf2+0x8a>
 8000e9e:	0048      	lsls	r0, r1, #1
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	bd30      	pop	{r4, r5, pc}
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	d125      	bne.n	8000ef4 <__gesf2+0x84>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d101      	bne.n	8000eb0 <__gesf2+0x40>
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d0f6      	beq.n	8000e9e <__gesf2+0x2e>
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d019      	beq.n	8000ee8 <__gesf2+0x78>
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	4318      	orrs	r0, r3
 8000eba:	e7f2      	b.n	8000ea2 <__gesf2+0x32>
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	d119      	bne.n	8000ef4 <__gesf2+0x84>
 8000ec0:	28ff      	cmp	r0, #255	@ 0xff
 8000ec2:	d1f7      	bne.n	8000eb4 <__gesf2+0x44>
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d115      	bne.n	8000ef4 <__gesf2+0x84>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d1f2      	bne.n	8000eb4 <__gesf2+0x44>
 8000ece:	e7e8      	b.n	8000ea2 <__gesf2+0x32>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0ef      	beq.n	8000eb4 <__gesf2+0x44>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1ed      	bne.n	8000eb4 <__gesf2+0x44>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dceb      	bgt.n	8000eb4 <__gesf2+0x44>
 8000edc:	db04      	blt.n	8000ee8 <__gesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8e8      	bhi.n	8000eb4 <__gesf2+0x44>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2dc      	bcs.n	8000ea2 <__gesf2+0x32>
 8000ee8:	0058      	lsls	r0, r3, #1
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7d9      	b.n	8000ea2 <__gesf2+0x32>
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	d0d7      	beq.n	8000ea2 <__gesf2+0x32>
 8000ef2:	e7df      	b.n	8000eb4 <__gesf2+0x44>
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	4240      	negs	r0, r0
 8000ef8:	e7d3      	b.n	8000ea2 <__gesf2+0x32>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d1da      	bne.n	8000eb4 <__gesf2+0x44>
 8000efe:	e7ee      	b.n	8000ede <__gesf2+0x6e>

08000f00 <__lesf2>:
 8000f00:	b530      	push	{r4, r5, lr}
 8000f02:	0042      	lsls	r2, r0, #1
 8000f04:	0244      	lsls	r4, r0, #9
 8000f06:	024d      	lsls	r5, r1, #9
 8000f08:	0fc3      	lsrs	r3, r0, #31
 8000f0a:	0048      	lsls	r0, r1, #1
 8000f0c:	0a64      	lsrs	r4, r4, #9
 8000f0e:	0e12      	lsrs	r2, r2, #24
 8000f10:	0a6d      	lsrs	r5, r5, #9
 8000f12:	0e00      	lsrs	r0, r0, #24
 8000f14:	0fc9      	lsrs	r1, r1, #31
 8000f16:	2aff      	cmp	r2, #255	@ 0xff
 8000f18:	d017      	beq.n	8000f4a <__lesf2+0x4a>
 8000f1a:	28ff      	cmp	r0, #255	@ 0xff
 8000f1c:	d00a      	beq.n	8000f34 <__lesf2+0x34>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d11b      	bne.n	8000f5a <__lesf2+0x5a>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d10a      	bne.n	8000f3c <__lesf2+0x3c>
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d01d      	beq.n	8000f66 <__lesf2+0x66>
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	d12d      	bne.n	8000f8a <__lesf2+0x8a>
 8000f2e:	0048      	lsls	r0, r1, #1
 8000f30:	3801      	subs	r0, #1
 8000f32:	e011      	b.n	8000f58 <__lesf2+0x58>
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d10e      	bne.n	8000f56 <__lesf2+0x56>
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d101      	bne.n	8000f40 <__lesf2+0x40>
 8000f3c:	2c00      	cmp	r4, #0
 8000f3e:	d0f6      	beq.n	8000f2e <__lesf2+0x2e>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d10c      	bne.n	8000f5e <__lesf2+0x5e>
 8000f44:	0058      	lsls	r0, r3, #1
 8000f46:	3801      	subs	r0, #1
 8000f48:	e006      	b.n	8000f58 <__lesf2+0x58>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d103      	bne.n	8000f56 <__lesf2+0x56>
 8000f4e:	28ff      	cmp	r0, #255	@ 0xff
 8000f50:	d105      	bne.n	8000f5e <__lesf2+0x5e>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	d015      	beq.n	8000f82 <__lesf2+0x82>
 8000f56:	2002      	movs	r0, #2
 8000f58:	bd30      	pop	{r4, r5, pc}
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d106      	bne.n	8000f6c <__lesf2+0x6c>
 8000f5e:	2001      	movs	r0, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	4318      	orrs	r0, r3
 8000f64:	e7f8      	b.n	8000f58 <__lesf2+0x58>
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	d0f6      	beq.n	8000f58 <__lesf2+0x58>
 8000f6a:	e7f8      	b.n	8000f5e <__lesf2+0x5e>
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d1f6      	bne.n	8000f5e <__lesf2+0x5e>
 8000f70:	4282      	cmp	r2, r0
 8000f72:	dcf4      	bgt.n	8000f5e <__lesf2+0x5e>
 8000f74:	dbe6      	blt.n	8000f44 <__lesf2+0x44>
 8000f76:	42ac      	cmp	r4, r5
 8000f78:	d8f1      	bhi.n	8000f5e <__lesf2+0x5e>
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	42ac      	cmp	r4, r5
 8000f7e:	d2eb      	bcs.n	8000f58 <__lesf2+0x58>
 8000f80:	e7e0      	b.n	8000f44 <__lesf2+0x44>
 8000f82:	2000      	movs	r0, #0
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ea      	bne.n	8000f5e <__lesf2+0x5e>
 8000f88:	e7e6      	b.n	8000f58 <__lesf2+0x58>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1e7      	bne.n	8000f5e <__lesf2+0x5e>
 8000f8e:	e7f2      	b.n	8000f76 <__lesf2+0x76>

08000f90 <__aeabi_fmul>:
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	464f      	mov	r7, r9
 8000f94:	4646      	mov	r6, r8
 8000f96:	46d6      	mov	lr, sl
 8000f98:	0044      	lsls	r4, r0, #1
 8000f9a:	b5c0      	push	{r6, r7, lr}
 8000f9c:	0246      	lsls	r6, r0, #9
 8000f9e:	1c0f      	adds	r7, r1, #0
 8000fa0:	0a76      	lsrs	r6, r6, #9
 8000fa2:	0e24      	lsrs	r4, r4, #24
 8000fa4:	0fc5      	lsrs	r5, r0, #31
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fmul+0x1c>
 8000faa:	e0da      	b.n	8001162 <__aeabi_fmul+0x1d2>
 8000fac:	2cff      	cmp	r4, #255	@ 0xff
 8000fae:	d074      	beq.n	800109a <__aeabi_fmul+0x10a>
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	00f6      	lsls	r6, r6, #3
 8000fb4:	04db      	lsls	r3, r3, #19
 8000fb6:	431e      	orrs	r6, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4699      	mov	r9, r3
 8000fbc:	469a      	mov	sl, r3
 8000fbe:	3c7f      	subs	r4, #127	@ 0x7f
 8000fc0:	027b      	lsls	r3, r7, #9
 8000fc2:	0a5b      	lsrs	r3, r3, #9
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	007b      	lsls	r3, r7, #1
 8000fc8:	0e1b      	lsrs	r3, r3, #24
 8000fca:	0fff      	lsrs	r7, r7, #31
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d074      	beq.n	80010ba <__aeabi_fmul+0x12a>
 8000fd0:	2bff      	cmp	r3, #255	@ 0xff
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fmul+0x46>
 8000fd4:	e08e      	b.n	80010f4 <__aeabi_fmul+0x164>
 8000fd6:	4642      	mov	r2, r8
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	00d2      	lsls	r2, r2, #3
 8000fdc:	04c9      	lsls	r1, r1, #19
 8000fde:	4311      	orrs	r1, r2
 8000fe0:	3b7f      	subs	r3, #127	@ 0x7f
 8000fe2:	002a      	movs	r2, r5
 8000fe4:	18e4      	adds	r4, r4, r3
 8000fe6:	464b      	mov	r3, r9
 8000fe8:	407a      	eors	r2, r7
 8000fea:	4688      	mov	r8, r1
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	2b0a      	cmp	r3, #10
 8000ff0:	dc75      	bgt.n	80010de <__aeabi_fmul+0x14e>
 8000ff2:	464b      	mov	r3, r9
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	dd0f      	ble.n	800101a <__aeabi_fmul+0x8a>
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	408b      	lsls	r3, r1
 8001000:	21a6      	movs	r1, #166	@ 0xa6
 8001002:	00c9      	lsls	r1, r1, #3
 8001004:	420b      	tst	r3, r1
 8001006:	d169      	bne.n	80010dc <__aeabi_fmul+0x14c>
 8001008:	2190      	movs	r1, #144	@ 0x90
 800100a:	0089      	lsls	r1, r1, #2
 800100c:	420b      	tst	r3, r1
 800100e:	d000      	beq.n	8001012 <__aeabi_fmul+0x82>
 8001010:	e100      	b.n	8001214 <__aeabi_fmul+0x284>
 8001012:	2188      	movs	r1, #136	@ 0x88
 8001014:	4219      	tst	r1, r3
 8001016:	d000      	beq.n	800101a <__aeabi_fmul+0x8a>
 8001018:	e0f5      	b.n	8001206 <__aeabi_fmul+0x276>
 800101a:	4641      	mov	r1, r8
 800101c:	0409      	lsls	r1, r1, #16
 800101e:	0c09      	lsrs	r1, r1, #16
 8001020:	4643      	mov	r3, r8
 8001022:	0008      	movs	r0, r1
 8001024:	0c35      	lsrs	r5, r6, #16
 8001026:	0436      	lsls	r6, r6, #16
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	0c36      	lsrs	r6, r6, #16
 800102c:	4370      	muls	r0, r6
 800102e:	4369      	muls	r1, r5
 8001030:	435e      	muls	r6, r3
 8001032:	435d      	muls	r5, r3
 8001034:	1876      	adds	r6, r6, r1
 8001036:	0c03      	lsrs	r3, r0, #16
 8001038:	199b      	adds	r3, r3, r6
 800103a:	4299      	cmp	r1, r3
 800103c:	d903      	bls.n	8001046 <__aeabi_fmul+0xb6>
 800103e:	2180      	movs	r1, #128	@ 0x80
 8001040:	0249      	lsls	r1, r1, #9
 8001042:	468c      	mov	ip, r1
 8001044:	4465      	add	r5, ip
 8001046:	0400      	lsls	r0, r0, #16
 8001048:	0419      	lsls	r1, r3, #16
 800104a:	0c00      	lsrs	r0, r0, #16
 800104c:	1809      	adds	r1, r1, r0
 800104e:	018e      	lsls	r6, r1, #6
 8001050:	1e70      	subs	r0, r6, #1
 8001052:	4186      	sbcs	r6, r0
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	0e89      	lsrs	r1, r1, #26
 8001058:	195b      	adds	r3, r3, r5
 800105a:	430e      	orrs	r6, r1
 800105c:	019b      	lsls	r3, r3, #6
 800105e:	431e      	orrs	r6, r3
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	d46c      	bmi.n	800113e <__aeabi_fmul+0x1ae>
 8001064:	0023      	movs	r3, r4
 8001066:	337f      	adds	r3, #127	@ 0x7f
 8001068:	2b00      	cmp	r3, #0
 800106a:	dc00      	bgt.n	800106e <__aeabi_fmul+0xde>
 800106c:	e0b1      	b.n	80011d2 <__aeabi_fmul+0x242>
 800106e:	0015      	movs	r5, r2
 8001070:	0771      	lsls	r1, r6, #29
 8001072:	d00b      	beq.n	800108c <__aeabi_fmul+0xfc>
 8001074:	200f      	movs	r0, #15
 8001076:	0021      	movs	r1, r4
 8001078:	4030      	ands	r0, r6
 800107a:	2804      	cmp	r0, #4
 800107c:	d006      	beq.n	800108c <__aeabi_fmul+0xfc>
 800107e:	3604      	adds	r6, #4
 8001080:	0132      	lsls	r2, r6, #4
 8001082:	d503      	bpl.n	800108c <__aeabi_fmul+0xfc>
 8001084:	4b6e      	ldr	r3, [pc, #440]	@ (8001240 <__aeabi_fmul+0x2b0>)
 8001086:	401e      	ands	r6, r3
 8001088:	000b      	movs	r3, r1
 800108a:	3380      	adds	r3, #128	@ 0x80
 800108c:	2bfe      	cmp	r3, #254	@ 0xfe
 800108e:	dd00      	ble.n	8001092 <__aeabi_fmul+0x102>
 8001090:	e0bd      	b.n	800120e <__aeabi_fmul+0x27e>
 8001092:	01b2      	lsls	r2, r6, #6
 8001094:	0a52      	lsrs	r2, r2, #9
 8001096:	b2db      	uxtb	r3, r3
 8001098:	e048      	b.n	800112c <__aeabi_fmul+0x19c>
 800109a:	2e00      	cmp	r6, #0
 800109c:	d000      	beq.n	80010a0 <__aeabi_fmul+0x110>
 800109e:	e092      	b.n	80011c6 <__aeabi_fmul+0x236>
 80010a0:	2308      	movs	r3, #8
 80010a2:	4699      	mov	r9, r3
 80010a4:	3b06      	subs	r3, #6
 80010a6:	469a      	mov	sl, r3
 80010a8:	027b      	lsls	r3, r7, #9
 80010aa:	0a5b      	lsrs	r3, r3, #9
 80010ac:	4698      	mov	r8, r3
 80010ae:	007b      	lsls	r3, r7, #1
 80010b0:	24ff      	movs	r4, #255	@ 0xff
 80010b2:	0e1b      	lsrs	r3, r3, #24
 80010b4:	0fff      	lsrs	r7, r7, #31
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d18a      	bne.n	8000fd0 <__aeabi_fmul+0x40>
 80010ba:	4642      	mov	r2, r8
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d164      	bne.n	800118a <__aeabi_fmul+0x1fa>
 80010c0:	4649      	mov	r1, r9
 80010c2:	3201      	adds	r2, #1
 80010c4:	4311      	orrs	r1, r2
 80010c6:	4689      	mov	r9, r1
 80010c8:	290a      	cmp	r1, #10
 80010ca:	dc08      	bgt.n	80010de <__aeabi_fmul+0x14e>
 80010cc:	407d      	eors	r5, r7
 80010ce:	2001      	movs	r0, #1
 80010d0:	b2ea      	uxtb	r2, r5
 80010d2:	2902      	cmp	r1, #2
 80010d4:	dc91      	bgt.n	8000ffa <__aeabi_fmul+0x6a>
 80010d6:	0015      	movs	r5, r2
 80010d8:	2200      	movs	r2, #0
 80010da:	e027      	b.n	800112c <__aeabi_fmul+0x19c>
 80010dc:	0015      	movs	r5, r2
 80010de:	4653      	mov	r3, sl
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fmul+0x156>
 80010e4:	e093      	b.n	800120e <__aeabi_fmul+0x27e>
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d01a      	beq.n	8001120 <__aeabi_fmul+0x190>
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d12c      	bne.n	8001148 <__aeabi_fmul+0x1b8>
 80010ee:	2300      	movs	r3, #0
 80010f0:	2200      	movs	r2, #0
 80010f2:	e01b      	b.n	800112c <__aeabi_fmul+0x19c>
 80010f4:	4643      	mov	r3, r8
 80010f6:	34ff      	adds	r4, #255	@ 0xff
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d055      	beq.n	80011a8 <__aeabi_fmul+0x218>
 80010fc:	2103      	movs	r1, #3
 80010fe:	464b      	mov	r3, r9
 8001100:	430b      	orrs	r3, r1
 8001102:	0019      	movs	r1, r3
 8001104:	2b0a      	cmp	r3, #10
 8001106:	dc00      	bgt.n	800110a <__aeabi_fmul+0x17a>
 8001108:	e092      	b.n	8001230 <__aeabi_fmul+0x2a0>
 800110a:	2b0f      	cmp	r3, #15
 800110c:	d000      	beq.n	8001110 <__aeabi_fmul+0x180>
 800110e:	e08c      	b.n	800122a <__aeabi_fmul+0x29a>
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	03d2      	lsls	r2, r2, #15
 8001114:	4216      	tst	r6, r2
 8001116:	d003      	beq.n	8001120 <__aeabi_fmul+0x190>
 8001118:	4643      	mov	r3, r8
 800111a:	4213      	tst	r3, r2
 800111c:	d100      	bne.n	8001120 <__aeabi_fmul+0x190>
 800111e:	e07d      	b.n	800121c <__aeabi_fmul+0x28c>
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	03d2      	lsls	r2, r2, #15
 8001124:	4332      	orrs	r2, r6
 8001126:	0252      	lsls	r2, r2, #9
 8001128:	0a52      	lsrs	r2, r2, #9
 800112a:	23ff      	movs	r3, #255	@ 0xff
 800112c:	05d8      	lsls	r0, r3, #23
 800112e:	07ed      	lsls	r5, r5, #31
 8001130:	4310      	orrs	r0, r2
 8001132:	4328      	orrs	r0, r5
 8001134:	bce0      	pop	{r5, r6, r7}
 8001136:	46ba      	mov	sl, r7
 8001138:	46b1      	mov	r9, r6
 800113a:	46a8      	mov	r8, r5
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113e:	2301      	movs	r3, #1
 8001140:	0015      	movs	r5, r2
 8001142:	0871      	lsrs	r1, r6, #1
 8001144:	401e      	ands	r6, r3
 8001146:	430e      	orrs	r6, r1
 8001148:	0023      	movs	r3, r4
 800114a:	3380      	adds	r3, #128	@ 0x80
 800114c:	1c61      	adds	r1, r4, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	dd41      	ble.n	80011d6 <__aeabi_fmul+0x246>
 8001152:	0772      	lsls	r2, r6, #29
 8001154:	d094      	beq.n	8001080 <__aeabi_fmul+0xf0>
 8001156:	220f      	movs	r2, #15
 8001158:	4032      	ands	r2, r6
 800115a:	2a04      	cmp	r2, #4
 800115c:	d000      	beq.n	8001160 <__aeabi_fmul+0x1d0>
 800115e:	e78e      	b.n	800107e <__aeabi_fmul+0xee>
 8001160:	e78e      	b.n	8001080 <__aeabi_fmul+0xf0>
 8001162:	2e00      	cmp	r6, #0
 8001164:	d105      	bne.n	8001172 <__aeabi_fmul+0x1e2>
 8001166:	2304      	movs	r3, #4
 8001168:	4699      	mov	r9, r3
 800116a:	3b03      	subs	r3, #3
 800116c:	2400      	movs	r4, #0
 800116e:	469a      	mov	sl, r3
 8001170:	e726      	b.n	8000fc0 <__aeabi_fmul+0x30>
 8001172:	0030      	movs	r0, r6
 8001174:	f002 fbc8 	bl	8003908 <__clzsi2>
 8001178:	2476      	movs	r4, #118	@ 0x76
 800117a:	1f43      	subs	r3, r0, #5
 800117c:	409e      	lsls	r6, r3
 800117e:	2300      	movs	r3, #0
 8001180:	4264      	negs	r4, r4
 8001182:	4699      	mov	r9, r3
 8001184:	469a      	mov	sl, r3
 8001186:	1a24      	subs	r4, r4, r0
 8001188:	e71a      	b.n	8000fc0 <__aeabi_fmul+0x30>
 800118a:	4640      	mov	r0, r8
 800118c:	f002 fbbc 	bl	8003908 <__clzsi2>
 8001190:	464b      	mov	r3, r9
 8001192:	1a24      	subs	r4, r4, r0
 8001194:	3c76      	subs	r4, #118	@ 0x76
 8001196:	2b0a      	cmp	r3, #10
 8001198:	dca1      	bgt.n	80010de <__aeabi_fmul+0x14e>
 800119a:	4643      	mov	r3, r8
 800119c:	3805      	subs	r0, #5
 800119e:	4083      	lsls	r3, r0
 80011a0:	407d      	eors	r5, r7
 80011a2:	4698      	mov	r8, r3
 80011a4:	b2ea      	uxtb	r2, r5
 80011a6:	e724      	b.n	8000ff2 <__aeabi_fmul+0x62>
 80011a8:	464a      	mov	r2, r9
 80011aa:	3302      	adds	r3, #2
 80011ac:	4313      	orrs	r3, r2
 80011ae:	002a      	movs	r2, r5
 80011b0:	407a      	eors	r2, r7
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc92      	bgt.n	80010de <__aeabi_fmul+0x14e>
 80011b8:	4649      	mov	r1, r9
 80011ba:	0015      	movs	r5, r2
 80011bc:	2900      	cmp	r1, #0
 80011be:	d026      	beq.n	800120e <__aeabi_fmul+0x27e>
 80011c0:	4699      	mov	r9, r3
 80011c2:	2002      	movs	r0, #2
 80011c4:	e719      	b.n	8000ffa <__aeabi_fmul+0x6a>
 80011c6:	230c      	movs	r3, #12
 80011c8:	4699      	mov	r9, r3
 80011ca:	3b09      	subs	r3, #9
 80011cc:	24ff      	movs	r4, #255	@ 0xff
 80011ce:	469a      	mov	sl, r3
 80011d0:	e6f6      	b.n	8000fc0 <__aeabi_fmul+0x30>
 80011d2:	0015      	movs	r5, r2
 80011d4:	0021      	movs	r1, r4
 80011d6:	2201      	movs	r2, #1
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b1b      	cmp	r3, #27
 80011dc:	dd00      	ble.n	80011e0 <__aeabi_fmul+0x250>
 80011de:	e786      	b.n	80010ee <__aeabi_fmul+0x15e>
 80011e0:	319e      	adds	r1, #158	@ 0x9e
 80011e2:	0032      	movs	r2, r6
 80011e4:	408e      	lsls	r6, r1
 80011e6:	40da      	lsrs	r2, r3
 80011e8:	1e73      	subs	r3, r6, #1
 80011ea:	419e      	sbcs	r6, r3
 80011ec:	4332      	orrs	r2, r6
 80011ee:	0753      	lsls	r3, r2, #29
 80011f0:	d004      	beq.n	80011fc <__aeabi_fmul+0x26c>
 80011f2:	230f      	movs	r3, #15
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d000      	beq.n	80011fc <__aeabi_fmul+0x26c>
 80011fa:	3204      	adds	r2, #4
 80011fc:	0153      	lsls	r3, r2, #5
 80011fe:	d510      	bpl.n	8001222 <__aeabi_fmul+0x292>
 8001200:	2301      	movs	r3, #1
 8001202:	2200      	movs	r2, #0
 8001204:	e792      	b.n	800112c <__aeabi_fmul+0x19c>
 8001206:	003d      	movs	r5, r7
 8001208:	4646      	mov	r6, r8
 800120a:	4682      	mov	sl, r0
 800120c:	e767      	b.n	80010de <__aeabi_fmul+0x14e>
 800120e:	23ff      	movs	r3, #255	@ 0xff
 8001210:	2200      	movs	r2, #0
 8001212:	e78b      	b.n	800112c <__aeabi_fmul+0x19c>
 8001214:	2280      	movs	r2, #128	@ 0x80
 8001216:	2500      	movs	r5, #0
 8001218:	03d2      	lsls	r2, r2, #15
 800121a:	e786      	b.n	800112a <__aeabi_fmul+0x19a>
 800121c:	003d      	movs	r5, r7
 800121e:	431a      	orrs	r2, r3
 8001220:	e783      	b.n	800112a <__aeabi_fmul+0x19a>
 8001222:	0192      	lsls	r2, r2, #6
 8001224:	2300      	movs	r3, #0
 8001226:	0a52      	lsrs	r2, r2, #9
 8001228:	e780      	b.n	800112c <__aeabi_fmul+0x19c>
 800122a:	003d      	movs	r5, r7
 800122c:	4646      	mov	r6, r8
 800122e:	e777      	b.n	8001120 <__aeabi_fmul+0x190>
 8001230:	002a      	movs	r2, r5
 8001232:	2301      	movs	r3, #1
 8001234:	407a      	eors	r2, r7
 8001236:	408b      	lsls	r3, r1
 8001238:	2003      	movs	r0, #3
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	e6e9      	b.n	8001012 <__aeabi_fmul+0x82>
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	f7ffffff 	.word	0xf7ffffff

08001244 <__aeabi_fsub>:
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	4647      	mov	r7, r8
 8001248:	46ce      	mov	lr, r9
 800124a:	0243      	lsls	r3, r0, #9
 800124c:	b580      	push	{r7, lr}
 800124e:	0a5f      	lsrs	r7, r3, #9
 8001250:	099b      	lsrs	r3, r3, #6
 8001252:	0045      	lsls	r5, r0, #1
 8001254:	004a      	lsls	r2, r1, #1
 8001256:	469c      	mov	ip, r3
 8001258:	024b      	lsls	r3, r1, #9
 800125a:	0fc4      	lsrs	r4, r0, #31
 800125c:	0fce      	lsrs	r6, r1, #31
 800125e:	0e2d      	lsrs	r5, r5, #24
 8001260:	0a58      	lsrs	r0, r3, #9
 8001262:	0e12      	lsrs	r2, r2, #24
 8001264:	0999      	lsrs	r1, r3, #6
 8001266:	2aff      	cmp	r2, #255	@ 0xff
 8001268:	d06b      	beq.n	8001342 <__aeabi_fsub+0xfe>
 800126a:	2301      	movs	r3, #1
 800126c:	405e      	eors	r6, r3
 800126e:	1aab      	subs	r3, r5, r2
 8001270:	42b4      	cmp	r4, r6
 8001272:	d04b      	beq.n	800130c <__aeabi_fsub+0xc8>
 8001274:	2b00      	cmp	r3, #0
 8001276:	dc00      	bgt.n	800127a <__aeabi_fsub+0x36>
 8001278:	e0ff      	b.n	800147a <__aeabi_fsub+0x236>
 800127a:	2a00      	cmp	r2, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_fsub+0x3c>
 800127e:	e088      	b.n	8001392 <__aeabi_fsub+0x14e>
 8001280:	2dff      	cmp	r5, #255	@ 0xff
 8001282:	d100      	bne.n	8001286 <__aeabi_fsub+0x42>
 8001284:	e0ef      	b.n	8001466 <__aeabi_fsub+0x222>
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	04d2      	lsls	r2, r2, #19
 800128a:	4311      	orrs	r1, r2
 800128c:	2001      	movs	r0, #1
 800128e:	2b1b      	cmp	r3, #27
 8001290:	dc08      	bgt.n	80012a4 <__aeabi_fsub+0x60>
 8001292:	0008      	movs	r0, r1
 8001294:	2220      	movs	r2, #32
 8001296:	40d8      	lsrs	r0, r3
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	4099      	lsls	r1, r3
 800129c:	000b      	movs	r3, r1
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	4193      	sbcs	r3, r2
 80012a2:	4318      	orrs	r0, r3
 80012a4:	4663      	mov	r3, ip
 80012a6:	1a1b      	subs	r3, r3, r0
 80012a8:	469c      	mov	ip, r3
 80012aa:	4663      	mov	r3, ip
 80012ac:	015b      	lsls	r3, r3, #5
 80012ae:	d400      	bmi.n	80012b2 <__aeabi_fsub+0x6e>
 80012b0:	e0cd      	b.n	800144e <__aeabi_fsub+0x20a>
 80012b2:	4663      	mov	r3, ip
 80012b4:	019f      	lsls	r7, r3, #6
 80012b6:	09bf      	lsrs	r7, r7, #6
 80012b8:	0038      	movs	r0, r7
 80012ba:	f002 fb25 	bl	8003908 <__clzsi2>
 80012be:	003b      	movs	r3, r7
 80012c0:	3805      	subs	r0, #5
 80012c2:	4083      	lsls	r3, r0
 80012c4:	4285      	cmp	r5, r0
 80012c6:	dc00      	bgt.n	80012ca <__aeabi_fsub+0x86>
 80012c8:	e0a2      	b.n	8001410 <__aeabi_fsub+0x1cc>
 80012ca:	4ab7      	ldr	r2, [pc, #732]	@ (80015a8 <__aeabi_fsub+0x364>)
 80012cc:	1a2d      	subs	r5, r5, r0
 80012ce:	401a      	ands	r2, r3
 80012d0:	4694      	mov	ip, r2
 80012d2:	075a      	lsls	r2, r3, #29
 80012d4:	d100      	bne.n	80012d8 <__aeabi_fsub+0x94>
 80012d6:	e0c3      	b.n	8001460 <__aeabi_fsub+0x21c>
 80012d8:	220f      	movs	r2, #15
 80012da:	4013      	ands	r3, r2
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d100      	bne.n	80012e2 <__aeabi_fsub+0x9e>
 80012e0:	e0be      	b.n	8001460 <__aeabi_fsub+0x21c>
 80012e2:	2304      	movs	r3, #4
 80012e4:	4698      	mov	r8, r3
 80012e6:	44c4      	add	ip, r8
 80012e8:	4663      	mov	r3, ip
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	d400      	bmi.n	80012f0 <__aeabi_fsub+0xac>
 80012ee:	e0b7      	b.n	8001460 <__aeabi_fsub+0x21c>
 80012f0:	1c68      	adds	r0, r5, #1
 80012f2:	2dfe      	cmp	r5, #254	@ 0xfe
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0xb4>
 80012f6:	e0a5      	b.n	8001444 <__aeabi_fsub+0x200>
 80012f8:	20ff      	movs	r0, #255	@ 0xff
 80012fa:	2200      	movs	r2, #0
 80012fc:	05c0      	lsls	r0, r0, #23
 80012fe:	4310      	orrs	r0, r2
 8001300:	07e4      	lsls	r4, r4, #31
 8001302:	4320      	orrs	r0, r4
 8001304:	bcc0      	pop	{r6, r7}
 8001306:	46b9      	mov	r9, r7
 8001308:	46b0      	mov	r8, r6
 800130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130c:	2b00      	cmp	r3, #0
 800130e:	dc00      	bgt.n	8001312 <__aeabi_fsub+0xce>
 8001310:	e1eb      	b.n	80016ea <__aeabi_fsub+0x4a6>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d046      	beq.n	80013a4 <__aeabi_fsub+0x160>
 8001316:	2dff      	cmp	r5, #255	@ 0xff
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0xd8>
 800131a:	e0a4      	b.n	8001466 <__aeabi_fsub+0x222>
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	04d2      	lsls	r2, r2, #19
 8001320:	4311      	orrs	r1, r2
 8001322:	2b1b      	cmp	r3, #27
 8001324:	dc00      	bgt.n	8001328 <__aeabi_fsub+0xe4>
 8001326:	e0fb      	b.n	8001520 <__aeabi_fsub+0x2dc>
 8001328:	2305      	movs	r3, #5
 800132a:	4698      	mov	r8, r3
 800132c:	002b      	movs	r3, r5
 800132e:	44c4      	add	ip, r8
 8001330:	4662      	mov	r2, ip
 8001332:	08d7      	lsrs	r7, r2, #3
 8001334:	2bff      	cmp	r3, #255	@ 0xff
 8001336:	d100      	bne.n	800133a <__aeabi_fsub+0xf6>
 8001338:	e095      	b.n	8001466 <__aeabi_fsub+0x222>
 800133a:	027a      	lsls	r2, r7, #9
 800133c:	0a52      	lsrs	r2, r2, #9
 800133e:	b2d8      	uxtb	r0, r3
 8001340:	e7dc      	b.n	80012fc <__aeabi_fsub+0xb8>
 8001342:	002b      	movs	r3, r5
 8001344:	3bff      	subs	r3, #255	@ 0xff
 8001346:	4699      	mov	r9, r3
 8001348:	2900      	cmp	r1, #0
 800134a:	d118      	bne.n	800137e <__aeabi_fsub+0x13a>
 800134c:	2301      	movs	r3, #1
 800134e:	405e      	eors	r6, r3
 8001350:	42b4      	cmp	r4, r6
 8001352:	d100      	bne.n	8001356 <__aeabi_fsub+0x112>
 8001354:	e0ca      	b.n	80014ec <__aeabi_fsub+0x2a8>
 8001356:	464b      	mov	r3, r9
 8001358:	2b00      	cmp	r3, #0
 800135a:	d02d      	beq.n	80013b8 <__aeabi_fsub+0x174>
 800135c:	2d00      	cmp	r5, #0
 800135e:	d000      	beq.n	8001362 <__aeabi_fsub+0x11e>
 8001360:	e13c      	b.n	80015dc <__aeabi_fsub+0x398>
 8001362:	23ff      	movs	r3, #255	@ 0xff
 8001364:	4664      	mov	r4, ip
 8001366:	2c00      	cmp	r4, #0
 8001368:	d100      	bne.n	800136c <__aeabi_fsub+0x128>
 800136a:	e15f      	b.n	800162c <__aeabi_fsub+0x3e8>
 800136c:	1e5d      	subs	r5, r3, #1
 800136e:	2b01      	cmp	r3, #1
 8001370:	d100      	bne.n	8001374 <__aeabi_fsub+0x130>
 8001372:	e174      	b.n	800165e <__aeabi_fsub+0x41a>
 8001374:	0034      	movs	r4, r6
 8001376:	2bff      	cmp	r3, #255	@ 0xff
 8001378:	d074      	beq.n	8001464 <__aeabi_fsub+0x220>
 800137a:	002b      	movs	r3, r5
 800137c:	e103      	b.n	8001586 <__aeabi_fsub+0x342>
 800137e:	42b4      	cmp	r4, r6
 8001380:	d100      	bne.n	8001384 <__aeabi_fsub+0x140>
 8001382:	e09c      	b.n	80014be <__aeabi_fsub+0x27a>
 8001384:	2b00      	cmp	r3, #0
 8001386:	d017      	beq.n	80013b8 <__aeabi_fsub+0x174>
 8001388:	2d00      	cmp	r5, #0
 800138a:	d0ea      	beq.n	8001362 <__aeabi_fsub+0x11e>
 800138c:	0007      	movs	r7, r0
 800138e:	0034      	movs	r4, r6
 8001390:	e06c      	b.n	800146c <__aeabi_fsub+0x228>
 8001392:	2900      	cmp	r1, #0
 8001394:	d0cc      	beq.n	8001330 <__aeabi_fsub+0xec>
 8001396:	1e5a      	subs	r2, r3, #1
 8001398:	2b01      	cmp	r3, #1
 800139a:	d02b      	beq.n	80013f4 <__aeabi_fsub+0x1b0>
 800139c:	2bff      	cmp	r3, #255	@ 0xff
 800139e:	d062      	beq.n	8001466 <__aeabi_fsub+0x222>
 80013a0:	0013      	movs	r3, r2
 80013a2:	e773      	b.n	800128c <__aeabi_fsub+0x48>
 80013a4:	2900      	cmp	r1, #0
 80013a6:	d0c3      	beq.n	8001330 <__aeabi_fsub+0xec>
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d100      	bne.n	80013b0 <__aeabi_fsub+0x16c>
 80013ae:	e11e      	b.n	80015ee <__aeabi_fsub+0x3aa>
 80013b0:	2bff      	cmp	r3, #255	@ 0xff
 80013b2:	d058      	beq.n	8001466 <__aeabi_fsub+0x222>
 80013b4:	0013      	movs	r3, r2
 80013b6:	e7b4      	b.n	8001322 <__aeabi_fsub+0xde>
 80013b8:	22fe      	movs	r2, #254	@ 0xfe
 80013ba:	1c6b      	adds	r3, r5, #1
 80013bc:	421a      	tst	r2, r3
 80013be:	d10d      	bne.n	80013dc <__aeabi_fsub+0x198>
 80013c0:	2d00      	cmp	r5, #0
 80013c2:	d060      	beq.n	8001486 <__aeabi_fsub+0x242>
 80013c4:	4663      	mov	r3, ip
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d000      	beq.n	80013cc <__aeabi_fsub+0x188>
 80013ca:	e120      	b.n	800160e <__aeabi_fsub+0x3ca>
 80013cc:	2900      	cmp	r1, #0
 80013ce:	d000      	beq.n	80013d2 <__aeabi_fsub+0x18e>
 80013d0:	e128      	b.n	8001624 <__aeabi_fsub+0x3e0>
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	2400      	movs	r4, #0
 80013d6:	20ff      	movs	r0, #255	@ 0xff
 80013d8:	03d2      	lsls	r2, r2, #15
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xb8>
 80013dc:	4663      	mov	r3, ip
 80013de:	1a5f      	subs	r7, r3, r1
 80013e0:	017b      	lsls	r3, r7, #5
 80013e2:	d500      	bpl.n	80013e6 <__aeabi_fsub+0x1a2>
 80013e4:	e0fe      	b.n	80015e4 <__aeabi_fsub+0x3a0>
 80013e6:	2f00      	cmp	r7, #0
 80013e8:	d000      	beq.n	80013ec <__aeabi_fsub+0x1a8>
 80013ea:	e765      	b.n	80012b8 <__aeabi_fsub+0x74>
 80013ec:	2400      	movs	r4, #0
 80013ee:	2000      	movs	r0, #0
 80013f0:	2200      	movs	r2, #0
 80013f2:	e783      	b.n	80012fc <__aeabi_fsub+0xb8>
 80013f4:	4663      	mov	r3, ip
 80013f6:	1a59      	subs	r1, r3, r1
 80013f8:	014b      	lsls	r3, r1, #5
 80013fa:	d400      	bmi.n	80013fe <__aeabi_fsub+0x1ba>
 80013fc:	e119      	b.n	8001632 <__aeabi_fsub+0x3ee>
 80013fe:	018f      	lsls	r7, r1, #6
 8001400:	09bf      	lsrs	r7, r7, #6
 8001402:	0038      	movs	r0, r7
 8001404:	f002 fa80 	bl	8003908 <__clzsi2>
 8001408:	003b      	movs	r3, r7
 800140a:	3805      	subs	r0, #5
 800140c:	4083      	lsls	r3, r0
 800140e:	2501      	movs	r5, #1
 8001410:	2220      	movs	r2, #32
 8001412:	1b40      	subs	r0, r0, r5
 8001414:	3001      	adds	r0, #1
 8001416:	1a12      	subs	r2, r2, r0
 8001418:	0019      	movs	r1, r3
 800141a:	4093      	lsls	r3, r2
 800141c:	40c1      	lsrs	r1, r0
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	4193      	sbcs	r3, r2
 8001422:	4319      	orrs	r1, r3
 8001424:	468c      	mov	ip, r1
 8001426:	1e0b      	subs	r3, r1, #0
 8001428:	d0e1      	beq.n	80013ee <__aeabi_fsub+0x1aa>
 800142a:	075b      	lsls	r3, r3, #29
 800142c:	d100      	bne.n	8001430 <__aeabi_fsub+0x1ec>
 800142e:	e152      	b.n	80016d6 <__aeabi_fsub+0x492>
 8001430:	230f      	movs	r3, #15
 8001432:	2500      	movs	r5, #0
 8001434:	400b      	ands	r3, r1
 8001436:	2b04      	cmp	r3, #4
 8001438:	d000      	beq.n	800143c <__aeabi_fsub+0x1f8>
 800143a:	e752      	b.n	80012e2 <__aeabi_fsub+0x9e>
 800143c:	2001      	movs	r0, #1
 800143e:	014a      	lsls	r2, r1, #5
 8001440:	d400      	bmi.n	8001444 <__aeabi_fsub+0x200>
 8001442:	e092      	b.n	800156a <__aeabi_fsub+0x326>
 8001444:	b2c0      	uxtb	r0, r0
 8001446:	4663      	mov	r3, ip
 8001448:	019a      	lsls	r2, r3, #6
 800144a:	0a52      	lsrs	r2, r2, #9
 800144c:	e756      	b.n	80012fc <__aeabi_fsub+0xb8>
 800144e:	4663      	mov	r3, ip
 8001450:	075b      	lsls	r3, r3, #29
 8001452:	d005      	beq.n	8001460 <__aeabi_fsub+0x21c>
 8001454:	230f      	movs	r3, #15
 8001456:	4662      	mov	r2, ip
 8001458:	4013      	ands	r3, r2
 800145a:	2b04      	cmp	r3, #4
 800145c:	d000      	beq.n	8001460 <__aeabi_fsub+0x21c>
 800145e:	e740      	b.n	80012e2 <__aeabi_fsub+0x9e>
 8001460:	002b      	movs	r3, r5
 8001462:	e765      	b.n	8001330 <__aeabi_fsub+0xec>
 8001464:	0007      	movs	r7, r0
 8001466:	2f00      	cmp	r7, #0
 8001468:	d100      	bne.n	800146c <__aeabi_fsub+0x228>
 800146a:	e745      	b.n	80012f8 <__aeabi_fsub+0xb4>
 800146c:	2280      	movs	r2, #128	@ 0x80
 800146e:	03d2      	lsls	r2, r2, #15
 8001470:	433a      	orrs	r2, r7
 8001472:	0252      	lsls	r2, r2, #9
 8001474:	20ff      	movs	r0, #255	@ 0xff
 8001476:	0a52      	lsrs	r2, r2, #9
 8001478:	e740      	b.n	80012fc <__aeabi_fsub+0xb8>
 800147a:	2b00      	cmp	r3, #0
 800147c:	d179      	bne.n	8001572 <__aeabi_fsub+0x32e>
 800147e:	22fe      	movs	r2, #254	@ 0xfe
 8001480:	1c6b      	adds	r3, r5, #1
 8001482:	421a      	tst	r2, r3
 8001484:	d1aa      	bne.n	80013dc <__aeabi_fsub+0x198>
 8001486:	4663      	mov	r3, ip
 8001488:	2b00      	cmp	r3, #0
 800148a:	d100      	bne.n	800148e <__aeabi_fsub+0x24a>
 800148c:	e0f5      	b.n	800167a <__aeabi_fsub+0x436>
 800148e:	2900      	cmp	r1, #0
 8001490:	d100      	bne.n	8001494 <__aeabi_fsub+0x250>
 8001492:	e0d1      	b.n	8001638 <__aeabi_fsub+0x3f4>
 8001494:	1a5f      	subs	r7, r3, r1
 8001496:	2380      	movs	r3, #128	@ 0x80
 8001498:	04db      	lsls	r3, r3, #19
 800149a:	421f      	tst	r7, r3
 800149c:	d100      	bne.n	80014a0 <__aeabi_fsub+0x25c>
 800149e:	e10e      	b.n	80016be <__aeabi_fsub+0x47a>
 80014a0:	4662      	mov	r2, ip
 80014a2:	2401      	movs	r4, #1
 80014a4:	1a8a      	subs	r2, r1, r2
 80014a6:	4694      	mov	ip, r2
 80014a8:	2000      	movs	r0, #0
 80014aa:	4034      	ands	r4, r6
 80014ac:	2a00      	cmp	r2, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_fsub+0x26e>
 80014b0:	e724      	b.n	80012fc <__aeabi_fsub+0xb8>
 80014b2:	2001      	movs	r0, #1
 80014b4:	421a      	tst	r2, r3
 80014b6:	d1c6      	bne.n	8001446 <__aeabi_fsub+0x202>
 80014b8:	2300      	movs	r3, #0
 80014ba:	08d7      	lsrs	r7, r2, #3
 80014bc:	e73d      	b.n	800133a <__aeabi_fsub+0xf6>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d017      	beq.n	80014f2 <__aeabi_fsub+0x2ae>
 80014c2:	2d00      	cmp	r5, #0
 80014c4:	d000      	beq.n	80014c8 <__aeabi_fsub+0x284>
 80014c6:	e0af      	b.n	8001628 <__aeabi_fsub+0x3e4>
 80014c8:	23ff      	movs	r3, #255	@ 0xff
 80014ca:	4665      	mov	r5, ip
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	d100      	bne.n	80014d2 <__aeabi_fsub+0x28e>
 80014d0:	e0ad      	b.n	800162e <__aeabi_fsub+0x3ea>
 80014d2:	1e5e      	subs	r6, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d100      	bne.n	80014da <__aeabi_fsub+0x296>
 80014d8:	e089      	b.n	80015ee <__aeabi_fsub+0x3aa>
 80014da:	2bff      	cmp	r3, #255	@ 0xff
 80014dc:	d0c2      	beq.n	8001464 <__aeabi_fsub+0x220>
 80014de:	2e1b      	cmp	r6, #27
 80014e0:	dc00      	bgt.n	80014e4 <__aeabi_fsub+0x2a0>
 80014e2:	e0ab      	b.n	800163c <__aeabi_fsub+0x3f8>
 80014e4:	1d4b      	adds	r3, r1, #5
 80014e6:	469c      	mov	ip, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	e721      	b.n	8001330 <__aeabi_fsub+0xec>
 80014ec:	464b      	mov	r3, r9
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d170      	bne.n	80015d4 <__aeabi_fsub+0x390>
 80014f2:	22fe      	movs	r2, #254	@ 0xfe
 80014f4:	1c6b      	adds	r3, r5, #1
 80014f6:	421a      	tst	r2, r3
 80014f8:	d15e      	bne.n	80015b8 <__aeabi_fsub+0x374>
 80014fa:	2d00      	cmp	r5, #0
 80014fc:	d000      	beq.n	8001500 <__aeabi_fsub+0x2bc>
 80014fe:	e0c3      	b.n	8001688 <__aeabi_fsub+0x444>
 8001500:	4663      	mov	r3, ip
 8001502:	2b00      	cmp	r3, #0
 8001504:	d100      	bne.n	8001508 <__aeabi_fsub+0x2c4>
 8001506:	e0d0      	b.n	80016aa <__aeabi_fsub+0x466>
 8001508:	2900      	cmp	r1, #0
 800150a:	d100      	bne.n	800150e <__aeabi_fsub+0x2ca>
 800150c:	e094      	b.n	8001638 <__aeabi_fsub+0x3f4>
 800150e:	000a      	movs	r2, r1
 8001510:	4462      	add	r2, ip
 8001512:	0153      	lsls	r3, r2, #5
 8001514:	d400      	bmi.n	8001518 <__aeabi_fsub+0x2d4>
 8001516:	e0d8      	b.n	80016ca <__aeabi_fsub+0x486>
 8001518:	0192      	lsls	r2, r2, #6
 800151a:	2001      	movs	r0, #1
 800151c:	0a52      	lsrs	r2, r2, #9
 800151e:	e6ed      	b.n	80012fc <__aeabi_fsub+0xb8>
 8001520:	0008      	movs	r0, r1
 8001522:	2220      	movs	r2, #32
 8001524:	40d8      	lsrs	r0, r3
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	4099      	lsls	r1, r3
 800152a:	000b      	movs	r3, r1
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	4193      	sbcs	r3, r2
 8001530:	4303      	orrs	r3, r0
 8001532:	449c      	add	ip, r3
 8001534:	4663      	mov	r3, ip
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	d589      	bpl.n	800144e <__aeabi_fsub+0x20a>
 800153a:	3501      	adds	r5, #1
 800153c:	2dff      	cmp	r5, #255	@ 0xff
 800153e:	d100      	bne.n	8001542 <__aeabi_fsub+0x2fe>
 8001540:	e6da      	b.n	80012f8 <__aeabi_fsub+0xb4>
 8001542:	4662      	mov	r2, ip
 8001544:	2301      	movs	r3, #1
 8001546:	4919      	ldr	r1, [pc, #100]	@ (80015ac <__aeabi_fsub+0x368>)
 8001548:	4013      	ands	r3, r2
 800154a:	0852      	lsrs	r2, r2, #1
 800154c:	400a      	ands	r2, r1
 800154e:	431a      	orrs	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	4694      	mov	ip, r2
 8001554:	075b      	lsls	r3, r3, #29
 8001556:	d004      	beq.n	8001562 <__aeabi_fsub+0x31e>
 8001558:	230f      	movs	r3, #15
 800155a:	4013      	ands	r3, r2
 800155c:	2b04      	cmp	r3, #4
 800155e:	d000      	beq.n	8001562 <__aeabi_fsub+0x31e>
 8001560:	e6bf      	b.n	80012e2 <__aeabi_fsub+0x9e>
 8001562:	4663      	mov	r3, ip
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	d500      	bpl.n	800156a <__aeabi_fsub+0x326>
 8001568:	e6c2      	b.n	80012f0 <__aeabi_fsub+0xac>
 800156a:	4663      	mov	r3, ip
 800156c:	08df      	lsrs	r7, r3, #3
 800156e:	002b      	movs	r3, r5
 8001570:	e6e3      	b.n	800133a <__aeabi_fsub+0xf6>
 8001572:	1b53      	subs	r3, r2, r5
 8001574:	2d00      	cmp	r5, #0
 8001576:	d100      	bne.n	800157a <__aeabi_fsub+0x336>
 8001578:	e6f4      	b.n	8001364 <__aeabi_fsub+0x120>
 800157a:	2080      	movs	r0, #128	@ 0x80
 800157c:	4664      	mov	r4, ip
 800157e:	04c0      	lsls	r0, r0, #19
 8001580:	4304      	orrs	r4, r0
 8001582:	46a4      	mov	ip, r4
 8001584:	0034      	movs	r4, r6
 8001586:	2001      	movs	r0, #1
 8001588:	2b1b      	cmp	r3, #27
 800158a:	dc09      	bgt.n	80015a0 <__aeabi_fsub+0x35c>
 800158c:	2520      	movs	r5, #32
 800158e:	4660      	mov	r0, ip
 8001590:	40d8      	lsrs	r0, r3
 8001592:	1aeb      	subs	r3, r5, r3
 8001594:	4665      	mov	r5, ip
 8001596:	409d      	lsls	r5, r3
 8001598:	002b      	movs	r3, r5
 800159a:	1e5d      	subs	r5, r3, #1
 800159c:	41ab      	sbcs	r3, r5
 800159e:	4318      	orrs	r0, r3
 80015a0:	1a0b      	subs	r3, r1, r0
 80015a2:	469c      	mov	ip, r3
 80015a4:	0015      	movs	r5, r2
 80015a6:	e680      	b.n	80012aa <__aeabi_fsub+0x66>
 80015a8:	fbffffff 	.word	0xfbffffff
 80015ac:	7dffffff 	.word	0x7dffffff
 80015b0:	22fe      	movs	r2, #254	@ 0xfe
 80015b2:	1c6b      	adds	r3, r5, #1
 80015b4:	4213      	tst	r3, r2
 80015b6:	d0a3      	beq.n	8001500 <__aeabi_fsub+0x2bc>
 80015b8:	2bff      	cmp	r3, #255	@ 0xff
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x37a>
 80015bc:	e69c      	b.n	80012f8 <__aeabi_fsub+0xb4>
 80015be:	4461      	add	r1, ip
 80015c0:	0849      	lsrs	r1, r1, #1
 80015c2:	074a      	lsls	r2, r1, #29
 80015c4:	d049      	beq.n	800165a <__aeabi_fsub+0x416>
 80015c6:	220f      	movs	r2, #15
 80015c8:	400a      	ands	r2, r1
 80015ca:	2a04      	cmp	r2, #4
 80015cc:	d045      	beq.n	800165a <__aeabi_fsub+0x416>
 80015ce:	1d0a      	adds	r2, r1, #4
 80015d0:	4694      	mov	ip, r2
 80015d2:	e6ad      	b.n	8001330 <__aeabi_fsub+0xec>
 80015d4:	2d00      	cmp	r5, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_fsub+0x396>
 80015d8:	e776      	b.n	80014c8 <__aeabi_fsub+0x284>
 80015da:	e68d      	b.n	80012f8 <__aeabi_fsub+0xb4>
 80015dc:	0034      	movs	r4, r6
 80015de:	20ff      	movs	r0, #255	@ 0xff
 80015e0:	2200      	movs	r2, #0
 80015e2:	e68b      	b.n	80012fc <__aeabi_fsub+0xb8>
 80015e4:	4663      	mov	r3, ip
 80015e6:	2401      	movs	r4, #1
 80015e8:	1acf      	subs	r7, r1, r3
 80015ea:	4034      	ands	r4, r6
 80015ec:	e664      	b.n	80012b8 <__aeabi_fsub+0x74>
 80015ee:	4461      	add	r1, ip
 80015f0:	014b      	lsls	r3, r1, #5
 80015f2:	d56d      	bpl.n	80016d0 <__aeabi_fsub+0x48c>
 80015f4:	0848      	lsrs	r0, r1, #1
 80015f6:	4944      	ldr	r1, [pc, #272]	@ (8001708 <__aeabi_fsub+0x4c4>)
 80015f8:	4001      	ands	r1, r0
 80015fa:	0743      	lsls	r3, r0, #29
 80015fc:	d02c      	beq.n	8001658 <__aeabi_fsub+0x414>
 80015fe:	230f      	movs	r3, #15
 8001600:	4003      	ands	r3, r0
 8001602:	2b04      	cmp	r3, #4
 8001604:	d028      	beq.n	8001658 <__aeabi_fsub+0x414>
 8001606:	1d0b      	adds	r3, r1, #4
 8001608:	469c      	mov	ip, r3
 800160a:	2302      	movs	r3, #2
 800160c:	e690      	b.n	8001330 <__aeabi_fsub+0xec>
 800160e:	2900      	cmp	r1, #0
 8001610:	d100      	bne.n	8001614 <__aeabi_fsub+0x3d0>
 8001612:	e72b      	b.n	800146c <__aeabi_fsub+0x228>
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	03db      	lsls	r3, r3, #15
 8001618:	429f      	cmp	r7, r3
 800161a:	d200      	bcs.n	800161e <__aeabi_fsub+0x3da>
 800161c:	e726      	b.n	800146c <__aeabi_fsub+0x228>
 800161e:	4298      	cmp	r0, r3
 8001620:	d300      	bcc.n	8001624 <__aeabi_fsub+0x3e0>
 8001622:	e723      	b.n	800146c <__aeabi_fsub+0x228>
 8001624:	2401      	movs	r4, #1
 8001626:	4034      	ands	r4, r6
 8001628:	0007      	movs	r7, r0
 800162a:	e71f      	b.n	800146c <__aeabi_fsub+0x228>
 800162c:	0034      	movs	r4, r6
 800162e:	468c      	mov	ip, r1
 8001630:	e67e      	b.n	8001330 <__aeabi_fsub+0xec>
 8001632:	2301      	movs	r3, #1
 8001634:	08cf      	lsrs	r7, r1, #3
 8001636:	e680      	b.n	800133a <__aeabi_fsub+0xf6>
 8001638:	2300      	movs	r3, #0
 800163a:	e67e      	b.n	800133a <__aeabi_fsub+0xf6>
 800163c:	2020      	movs	r0, #32
 800163e:	4665      	mov	r5, ip
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	4085      	lsls	r5, r0
 8001644:	4663      	mov	r3, ip
 8001646:	0028      	movs	r0, r5
 8001648:	40f3      	lsrs	r3, r6
 800164a:	1e45      	subs	r5, r0, #1
 800164c:	41a8      	sbcs	r0, r5
 800164e:	4303      	orrs	r3, r0
 8001650:	469c      	mov	ip, r3
 8001652:	0015      	movs	r5, r2
 8001654:	448c      	add	ip, r1
 8001656:	e76d      	b.n	8001534 <__aeabi_fsub+0x2f0>
 8001658:	2302      	movs	r3, #2
 800165a:	08cf      	lsrs	r7, r1, #3
 800165c:	e66d      	b.n	800133a <__aeabi_fsub+0xf6>
 800165e:	1b0f      	subs	r7, r1, r4
 8001660:	017b      	lsls	r3, r7, #5
 8001662:	d528      	bpl.n	80016b6 <__aeabi_fsub+0x472>
 8001664:	01bf      	lsls	r7, r7, #6
 8001666:	09bf      	lsrs	r7, r7, #6
 8001668:	0038      	movs	r0, r7
 800166a:	f002 f94d 	bl	8003908 <__clzsi2>
 800166e:	003b      	movs	r3, r7
 8001670:	3805      	subs	r0, #5
 8001672:	4083      	lsls	r3, r0
 8001674:	0034      	movs	r4, r6
 8001676:	2501      	movs	r5, #1
 8001678:	e6ca      	b.n	8001410 <__aeabi_fsub+0x1cc>
 800167a:	2900      	cmp	r1, #0
 800167c:	d100      	bne.n	8001680 <__aeabi_fsub+0x43c>
 800167e:	e6b5      	b.n	80013ec <__aeabi_fsub+0x1a8>
 8001680:	2401      	movs	r4, #1
 8001682:	0007      	movs	r7, r0
 8001684:	4034      	ands	r4, r6
 8001686:	e658      	b.n	800133a <__aeabi_fsub+0xf6>
 8001688:	4663      	mov	r3, ip
 800168a:	2b00      	cmp	r3, #0
 800168c:	d100      	bne.n	8001690 <__aeabi_fsub+0x44c>
 800168e:	e6e9      	b.n	8001464 <__aeabi_fsub+0x220>
 8001690:	2900      	cmp	r1, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_fsub+0x452>
 8001694:	e6ea      	b.n	800146c <__aeabi_fsub+0x228>
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	03db      	lsls	r3, r3, #15
 800169a:	429f      	cmp	r7, r3
 800169c:	d200      	bcs.n	80016a0 <__aeabi_fsub+0x45c>
 800169e:	e6e5      	b.n	800146c <__aeabi_fsub+0x228>
 80016a0:	4298      	cmp	r0, r3
 80016a2:	d300      	bcc.n	80016a6 <__aeabi_fsub+0x462>
 80016a4:	e6e2      	b.n	800146c <__aeabi_fsub+0x228>
 80016a6:	0007      	movs	r7, r0
 80016a8:	e6e0      	b.n	800146c <__aeabi_fsub+0x228>
 80016aa:	2900      	cmp	r1, #0
 80016ac:	d100      	bne.n	80016b0 <__aeabi_fsub+0x46c>
 80016ae:	e69e      	b.n	80013ee <__aeabi_fsub+0x1aa>
 80016b0:	2300      	movs	r3, #0
 80016b2:	08cf      	lsrs	r7, r1, #3
 80016b4:	e641      	b.n	800133a <__aeabi_fsub+0xf6>
 80016b6:	0034      	movs	r4, r6
 80016b8:	2301      	movs	r3, #1
 80016ba:	08ff      	lsrs	r7, r7, #3
 80016bc:	e63d      	b.n	800133a <__aeabi_fsub+0xf6>
 80016be:	2f00      	cmp	r7, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x480>
 80016c2:	e693      	b.n	80013ec <__aeabi_fsub+0x1a8>
 80016c4:	2300      	movs	r3, #0
 80016c6:	08ff      	lsrs	r7, r7, #3
 80016c8:	e637      	b.n	800133a <__aeabi_fsub+0xf6>
 80016ca:	2300      	movs	r3, #0
 80016cc:	08d7      	lsrs	r7, r2, #3
 80016ce:	e634      	b.n	800133a <__aeabi_fsub+0xf6>
 80016d0:	2301      	movs	r3, #1
 80016d2:	08cf      	lsrs	r7, r1, #3
 80016d4:	e631      	b.n	800133a <__aeabi_fsub+0xf6>
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	000b      	movs	r3, r1
 80016da:	04d2      	lsls	r2, r2, #19
 80016dc:	2001      	movs	r0, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	4211      	tst	r1, r2
 80016e2:	d000      	beq.n	80016e6 <__aeabi_fsub+0x4a2>
 80016e4:	e6ae      	b.n	8001444 <__aeabi_fsub+0x200>
 80016e6:	08cf      	lsrs	r7, r1, #3
 80016e8:	e627      	b.n	800133a <__aeabi_fsub+0xf6>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <__aeabi_fsub+0x4ac>
 80016ee:	e75f      	b.n	80015b0 <__aeabi_fsub+0x36c>
 80016f0:	1b56      	subs	r6, r2, r5
 80016f2:	2d00      	cmp	r5, #0
 80016f4:	d101      	bne.n	80016fa <__aeabi_fsub+0x4b6>
 80016f6:	0033      	movs	r3, r6
 80016f8:	e6e7      	b.n	80014ca <__aeabi_fsub+0x286>
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	4660      	mov	r0, ip
 80016fe:	04db      	lsls	r3, r3, #19
 8001700:	4318      	orrs	r0, r3
 8001702:	4684      	mov	ip, r0
 8001704:	e6eb      	b.n	80014de <__aeabi_fsub+0x29a>
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	7dffffff 	.word	0x7dffffff

0800170c <__aeabi_f2iz>:
 800170c:	0241      	lsls	r1, r0, #9
 800170e:	0042      	lsls	r2, r0, #1
 8001710:	0fc3      	lsrs	r3, r0, #31
 8001712:	0a49      	lsrs	r1, r1, #9
 8001714:	2000      	movs	r0, #0
 8001716:	0e12      	lsrs	r2, r2, #24
 8001718:	2a7e      	cmp	r2, #126	@ 0x7e
 800171a:	dd03      	ble.n	8001724 <__aeabi_f2iz+0x18>
 800171c:	2a9d      	cmp	r2, #157	@ 0x9d
 800171e:	dd02      	ble.n	8001726 <__aeabi_f2iz+0x1a>
 8001720:	4a09      	ldr	r2, [pc, #36]	@ (8001748 <__aeabi_f2iz+0x3c>)
 8001722:	1898      	adds	r0, r3, r2
 8001724:	4770      	bx	lr
 8001726:	2080      	movs	r0, #128	@ 0x80
 8001728:	0400      	lsls	r0, r0, #16
 800172a:	4301      	orrs	r1, r0
 800172c:	2a95      	cmp	r2, #149	@ 0x95
 800172e:	dc07      	bgt.n	8001740 <__aeabi_f2iz+0x34>
 8001730:	2096      	movs	r0, #150	@ 0x96
 8001732:	1a82      	subs	r2, r0, r2
 8001734:	40d1      	lsrs	r1, r2
 8001736:	4248      	negs	r0, r1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f3      	bne.n	8001724 <__aeabi_f2iz+0x18>
 800173c:	0008      	movs	r0, r1
 800173e:	e7f1      	b.n	8001724 <__aeabi_f2iz+0x18>
 8001740:	3a96      	subs	r2, #150	@ 0x96
 8001742:	4091      	lsls	r1, r2
 8001744:	e7f7      	b.n	8001736 <__aeabi_f2iz+0x2a>
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	7fffffff 	.word	0x7fffffff

0800174c <__aeabi_i2f>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	2800      	cmp	r0, #0
 8001750:	d012      	beq.n	8001778 <__aeabi_i2f+0x2c>
 8001752:	17c3      	asrs	r3, r0, #31
 8001754:	18c5      	adds	r5, r0, r3
 8001756:	405d      	eors	r5, r3
 8001758:	0fc4      	lsrs	r4, r0, #31
 800175a:	0028      	movs	r0, r5
 800175c:	f002 f8d4 	bl	8003908 <__clzsi2>
 8001760:	239e      	movs	r3, #158	@ 0x9e
 8001762:	1a1b      	subs	r3, r3, r0
 8001764:	2b96      	cmp	r3, #150	@ 0x96
 8001766:	dc0f      	bgt.n	8001788 <__aeabi_i2f+0x3c>
 8001768:	2808      	cmp	r0, #8
 800176a:	d038      	beq.n	80017de <__aeabi_i2f+0x92>
 800176c:	3808      	subs	r0, #8
 800176e:	4085      	lsls	r5, r0
 8001770:	026d      	lsls	r5, r5, #9
 8001772:	0a6d      	lsrs	r5, r5, #9
 8001774:	b2d8      	uxtb	r0, r3
 8001776:	e002      	b.n	800177e <__aeabi_i2f+0x32>
 8001778:	2400      	movs	r4, #0
 800177a:	2000      	movs	r0, #0
 800177c:	2500      	movs	r5, #0
 800177e:	05c0      	lsls	r0, r0, #23
 8001780:	4328      	orrs	r0, r5
 8001782:	07e4      	lsls	r4, r4, #31
 8001784:	4320      	orrs	r0, r4
 8001786:	bd70      	pop	{r4, r5, r6, pc}
 8001788:	2b99      	cmp	r3, #153	@ 0x99
 800178a:	dc14      	bgt.n	80017b6 <__aeabi_i2f+0x6a>
 800178c:	1f42      	subs	r2, r0, #5
 800178e:	4095      	lsls	r5, r2
 8001790:	002a      	movs	r2, r5
 8001792:	4915      	ldr	r1, [pc, #84]	@ (80017e8 <__aeabi_i2f+0x9c>)
 8001794:	4011      	ands	r1, r2
 8001796:	0755      	lsls	r5, r2, #29
 8001798:	d01c      	beq.n	80017d4 <__aeabi_i2f+0x88>
 800179a:	250f      	movs	r5, #15
 800179c:	402a      	ands	r2, r5
 800179e:	2a04      	cmp	r2, #4
 80017a0:	d018      	beq.n	80017d4 <__aeabi_i2f+0x88>
 80017a2:	3104      	adds	r1, #4
 80017a4:	08ca      	lsrs	r2, r1, #3
 80017a6:	0149      	lsls	r1, r1, #5
 80017a8:	d515      	bpl.n	80017d6 <__aeabi_i2f+0x8a>
 80017aa:	239f      	movs	r3, #159	@ 0x9f
 80017ac:	0252      	lsls	r2, r2, #9
 80017ae:	1a18      	subs	r0, r3, r0
 80017b0:	0a55      	lsrs	r5, r2, #9
 80017b2:	b2c0      	uxtb	r0, r0
 80017b4:	e7e3      	b.n	800177e <__aeabi_i2f+0x32>
 80017b6:	2205      	movs	r2, #5
 80017b8:	0029      	movs	r1, r5
 80017ba:	1a12      	subs	r2, r2, r0
 80017bc:	40d1      	lsrs	r1, r2
 80017be:	0002      	movs	r2, r0
 80017c0:	321b      	adds	r2, #27
 80017c2:	4095      	lsls	r5, r2
 80017c4:	002a      	movs	r2, r5
 80017c6:	1e55      	subs	r5, r2, #1
 80017c8:	41aa      	sbcs	r2, r5
 80017ca:	430a      	orrs	r2, r1
 80017cc:	4906      	ldr	r1, [pc, #24]	@ (80017e8 <__aeabi_i2f+0x9c>)
 80017ce:	4011      	ands	r1, r2
 80017d0:	0755      	lsls	r5, r2, #29
 80017d2:	d1e2      	bne.n	800179a <__aeabi_i2f+0x4e>
 80017d4:	08ca      	lsrs	r2, r1, #3
 80017d6:	0252      	lsls	r2, r2, #9
 80017d8:	0a55      	lsrs	r5, r2, #9
 80017da:	b2d8      	uxtb	r0, r3
 80017dc:	e7cf      	b.n	800177e <__aeabi_i2f+0x32>
 80017de:	026d      	lsls	r5, r5, #9
 80017e0:	0a6d      	lsrs	r5, r5, #9
 80017e2:	308e      	adds	r0, #142	@ 0x8e
 80017e4:	e7cb      	b.n	800177e <__aeabi_i2f+0x32>
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	fbffffff 	.word	0xfbffffff

080017ec <__aeabi_ui2f>:
 80017ec:	b510      	push	{r4, lr}
 80017ee:	1e04      	subs	r4, r0, #0
 80017f0:	d00d      	beq.n	800180e <__aeabi_ui2f+0x22>
 80017f2:	f002 f889 	bl	8003908 <__clzsi2>
 80017f6:	239e      	movs	r3, #158	@ 0x9e
 80017f8:	1a1b      	subs	r3, r3, r0
 80017fa:	2b96      	cmp	r3, #150	@ 0x96
 80017fc:	dc0c      	bgt.n	8001818 <__aeabi_ui2f+0x2c>
 80017fe:	2808      	cmp	r0, #8
 8001800:	d034      	beq.n	800186c <__aeabi_ui2f+0x80>
 8001802:	3808      	subs	r0, #8
 8001804:	4084      	lsls	r4, r0
 8001806:	0264      	lsls	r4, r4, #9
 8001808:	0a64      	lsrs	r4, r4, #9
 800180a:	b2d8      	uxtb	r0, r3
 800180c:	e001      	b.n	8001812 <__aeabi_ui2f+0x26>
 800180e:	2000      	movs	r0, #0
 8001810:	2400      	movs	r4, #0
 8001812:	05c0      	lsls	r0, r0, #23
 8001814:	4320      	orrs	r0, r4
 8001816:	bd10      	pop	{r4, pc}
 8001818:	2b99      	cmp	r3, #153	@ 0x99
 800181a:	dc13      	bgt.n	8001844 <__aeabi_ui2f+0x58>
 800181c:	1f42      	subs	r2, r0, #5
 800181e:	4094      	lsls	r4, r2
 8001820:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <__aeabi_ui2f+0x88>)
 8001822:	4022      	ands	r2, r4
 8001824:	0761      	lsls	r1, r4, #29
 8001826:	d01c      	beq.n	8001862 <__aeabi_ui2f+0x76>
 8001828:	210f      	movs	r1, #15
 800182a:	4021      	ands	r1, r4
 800182c:	2904      	cmp	r1, #4
 800182e:	d018      	beq.n	8001862 <__aeabi_ui2f+0x76>
 8001830:	3204      	adds	r2, #4
 8001832:	08d4      	lsrs	r4, r2, #3
 8001834:	0152      	lsls	r2, r2, #5
 8001836:	d515      	bpl.n	8001864 <__aeabi_ui2f+0x78>
 8001838:	239f      	movs	r3, #159	@ 0x9f
 800183a:	0264      	lsls	r4, r4, #9
 800183c:	1a18      	subs	r0, r3, r0
 800183e:	0a64      	lsrs	r4, r4, #9
 8001840:	b2c0      	uxtb	r0, r0
 8001842:	e7e6      	b.n	8001812 <__aeabi_ui2f+0x26>
 8001844:	0002      	movs	r2, r0
 8001846:	0021      	movs	r1, r4
 8001848:	321b      	adds	r2, #27
 800184a:	4091      	lsls	r1, r2
 800184c:	000a      	movs	r2, r1
 800184e:	1e51      	subs	r1, r2, #1
 8001850:	418a      	sbcs	r2, r1
 8001852:	2105      	movs	r1, #5
 8001854:	1a09      	subs	r1, r1, r0
 8001856:	40cc      	lsrs	r4, r1
 8001858:	4314      	orrs	r4, r2
 800185a:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <__aeabi_ui2f+0x88>)
 800185c:	4022      	ands	r2, r4
 800185e:	0761      	lsls	r1, r4, #29
 8001860:	d1e2      	bne.n	8001828 <__aeabi_ui2f+0x3c>
 8001862:	08d4      	lsrs	r4, r2, #3
 8001864:	0264      	lsls	r4, r4, #9
 8001866:	0a64      	lsrs	r4, r4, #9
 8001868:	b2d8      	uxtb	r0, r3
 800186a:	e7d2      	b.n	8001812 <__aeabi_ui2f+0x26>
 800186c:	0264      	lsls	r4, r4, #9
 800186e:	0a64      	lsrs	r4, r4, #9
 8001870:	308e      	adds	r0, #142	@ 0x8e
 8001872:	e7ce      	b.n	8001812 <__aeabi_ui2f+0x26>
 8001874:	fbffffff 	.word	0xfbffffff

08001878 <__aeabi_dadd>:
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	464f      	mov	r7, r9
 800187c:	4646      	mov	r6, r8
 800187e:	46d6      	mov	lr, sl
 8001880:	b5c0      	push	{r6, r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	9000      	str	r0, [sp, #0]
 8001886:	9101      	str	r1, [sp, #4]
 8001888:	030e      	lsls	r6, r1, #12
 800188a:	004c      	lsls	r4, r1, #1
 800188c:	0fcd      	lsrs	r5, r1, #31
 800188e:	0a71      	lsrs	r1, r6, #9
 8001890:	9e00      	ldr	r6, [sp, #0]
 8001892:	005f      	lsls	r7, r3, #1
 8001894:	0f76      	lsrs	r6, r6, #29
 8001896:	430e      	orrs	r6, r1
 8001898:	9900      	ldr	r1, [sp, #0]
 800189a:	9200      	str	r2, [sp, #0]
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	00c9      	lsls	r1, r1, #3
 80018a0:	4689      	mov	r9, r1
 80018a2:	0319      	lsls	r1, r3, #12
 80018a4:	0d7b      	lsrs	r3, r7, #21
 80018a6:	4698      	mov	r8, r3
 80018a8:	9b01      	ldr	r3, [sp, #4]
 80018aa:	0a49      	lsrs	r1, r1, #9
 80018ac:	0fdb      	lsrs	r3, r3, #31
 80018ae:	469c      	mov	ip, r3
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	9a00      	ldr	r2, [sp, #0]
 80018b4:	0f5b      	lsrs	r3, r3, #29
 80018b6:	430b      	orrs	r3, r1
 80018b8:	4641      	mov	r1, r8
 80018ba:	0d64      	lsrs	r4, r4, #21
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	1a61      	subs	r1, r4, r1
 80018c0:	4565      	cmp	r5, ip
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x4e>
 80018c4:	e0a6      	b.n	8001a14 <__aeabi_dadd+0x19c>
 80018c6:	2900      	cmp	r1, #0
 80018c8:	dd72      	ble.n	80019b0 <__aeabi_dadd+0x138>
 80018ca:	4647      	mov	r7, r8
 80018cc:	2f00      	cmp	r7, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x5a>
 80018d0:	e0dd      	b.n	8001a8e <__aeabi_dadd+0x216>
 80018d2:	4fcc      	ldr	r7, [pc, #816]	@ (8001c04 <__aeabi_dadd+0x38c>)
 80018d4:	42bc      	cmp	r4, r7
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x62>
 80018d8:	e19a      	b.n	8001c10 <__aeabi_dadd+0x398>
 80018da:	2701      	movs	r7, #1
 80018dc:	2938      	cmp	r1, #56	@ 0x38
 80018de:	dc17      	bgt.n	8001910 <__aeabi_dadd+0x98>
 80018e0:	2780      	movs	r7, #128	@ 0x80
 80018e2:	043f      	lsls	r7, r7, #16
 80018e4:	433b      	orrs	r3, r7
 80018e6:	291f      	cmp	r1, #31
 80018e8:	dd00      	ble.n	80018ec <__aeabi_dadd+0x74>
 80018ea:	e1dd      	b.n	8001ca8 <__aeabi_dadd+0x430>
 80018ec:	2720      	movs	r7, #32
 80018ee:	1a78      	subs	r0, r7, r1
 80018f0:	001f      	movs	r7, r3
 80018f2:	4087      	lsls	r7, r0
 80018f4:	46ba      	mov	sl, r7
 80018f6:	0017      	movs	r7, r2
 80018f8:	40cf      	lsrs	r7, r1
 80018fa:	4684      	mov	ip, r0
 80018fc:	0038      	movs	r0, r7
 80018fe:	4657      	mov	r7, sl
 8001900:	4307      	orrs	r7, r0
 8001902:	4660      	mov	r0, ip
 8001904:	4082      	lsls	r2, r0
 8001906:	40cb      	lsrs	r3, r1
 8001908:	1e50      	subs	r0, r2, #1
 800190a:	4182      	sbcs	r2, r0
 800190c:	1af6      	subs	r6, r6, r3
 800190e:	4317      	orrs	r7, r2
 8001910:	464b      	mov	r3, r9
 8001912:	1bdf      	subs	r7, r3, r7
 8001914:	45b9      	cmp	r9, r7
 8001916:	4180      	sbcs	r0, r0
 8001918:	4240      	negs	r0, r0
 800191a:	1a36      	subs	r6, r6, r0
 800191c:	0233      	lsls	r3, r6, #8
 800191e:	d400      	bmi.n	8001922 <__aeabi_dadd+0xaa>
 8001920:	e0ff      	b.n	8001b22 <__aeabi_dadd+0x2aa>
 8001922:	0276      	lsls	r6, r6, #9
 8001924:	0a76      	lsrs	r6, r6, #9
 8001926:	2e00      	cmp	r6, #0
 8001928:	d100      	bne.n	800192c <__aeabi_dadd+0xb4>
 800192a:	e13c      	b.n	8001ba6 <__aeabi_dadd+0x32e>
 800192c:	0030      	movs	r0, r6
 800192e:	f001 ffeb 	bl	8003908 <__clzsi2>
 8001932:	0003      	movs	r3, r0
 8001934:	3b08      	subs	r3, #8
 8001936:	2120      	movs	r1, #32
 8001938:	0038      	movs	r0, r7
 800193a:	1aca      	subs	r2, r1, r3
 800193c:	40d0      	lsrs	r0, r2
 800193e:	409e      	lsls	r6, r3
 8001940:	0002      	movs	r2, r0
 8001942:	409f      	lsls	r7, r3
 8001944:	4332      	orrs	r2, r6
 8001946:	429c      	cmp	r4, r3
 8001948:	dd00      	ble.n	800194c <__aeabi_dadd+0xd4>
 800194a:	e1a6      	b.n	8001c9a <__aeabi_dadd+0x422>
 800194c:	1b18      	subs	r0, r3, r4
 800194e:	3001      	adds	r0, #1
 8001950:	1a09      	subs	r1, r1, r0
 8001952:	003e      	movs	r6, r7
 8001954:	408f      	lsls	r7, r1
 8001956:	40c6      	lsrs	r6, r0
 8001958:	1e7b      	subs	r3, r7, #1
 800195a:	419f      	sbcs	r7, r3
 800195c:	0013      	movs	r3, r2
 800195e:	408b      	lsls	r3, r1
 8001960:	4337      	orrs	r7, r6
 8001962:	431f      	orrs	r7, r3
 8001964:	40c2      	lsrs	r2, r0
 8001966:	003b      	movs	r3, r7
 8001968:	0016      	movs	r6, r2
 800196a:	2400      	movs	r4, #0
 800196c:	4313      	orrs	r3, r2
 800196e:	d100      	bne.n	8001972 <__aeabi_dadd+0xfa>
 8001970:	e1df      	b.n	8001d32 <__aeabi_dadd+0x4ba>
 8001972:	077b      	lsls	r3, r7, #29
 8001974:	d100      	bne.n	8001978 <__aeabi_dadd+0x100>
 8001976:	e332      	b.n	8001fde <__aeabi_dadd+0x766>
 8001978:	230f      	movs	r3, #15
 800197a:	003a      	movs	r2, r7
 800197c:	403b      	ands	r3, r7
 800197e:	2b04      	cmp	r3, #4
 8001980:	d004      	beq.n	800198c <__aeabi_dadd+0x114>
 8001982:	1d3a      	adds	r2, r7, #4
 8001984:	42ba      	cmp	r2, r7
 8001986:	41bf      	sbcs	r7, r7
 8001988:	427f      	negs	r7, r7
 800198a:	19f6      	adds	r6, r6, r7
 800198c:	0233      	lsls	r3, r6, #8
 800198e:	d400      	bmi.n	8001992 <__aeabi_dadd+0x11a>
 8001990:	e323      	b.n	8001fda <__aeabi_dadd+0x762>
 8001992:	4b9c      	ldr	r3, [pc, #624]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001994:	3401      	adds	r4, #1
 8001996:	429c      	cmp	r4, r3
 8001998:	d100      	bne.n	800199c <__aeabi_dadd+0x124>
 800199a:	e0b4      	b.n	8001b06 <__aeabi_dadd+0x28e>
 800199c:	4b9a      	ldr	r3, [pc, #616]	@ (8001c08 <__aeabi_dadd+0x390>)
 800199e:	0564      	lsls	r4, r4, #21
 80019a0:	401e      	ands	r6, r3
 80019a2:	0d64      	lsrs	r4, r4, #21
 80019a4:	0777      	lsls	r7, r6, #29
 80019a6:	08d2      	lsrs	r2, r2, #3
 80019a8:	0276      	lsls	r6, r6, #9
 80019aa:	4317      	orrs	r7, r2
 80019ac:	0b36      	lsrs	r6, r6, #12
 80019ae:	e0ac      	b.n	8001b0a <__aeabi_dadd+0x292>
 80019b0:	2900      	cmp	r1, #0
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x13e>
 80019b4:	e07e      	b.n	8001ab4 <__aeabi_dadd+0x23c>
 80019b6:	4641      	mov	r1, r8
 80019b8:	1b09      	subs	r1, r1, r4
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x148>
 80019be:	e160      	b.n	8001c82 <__aeabi_dadd+0x40a>
 80019c0:	0034      	movs	r4, r6
 80019c2:	4648      	mov	r0, r9
 80019c4:	4304      	orrs	r4, r0
 80019c6:	d100      	bne.n	80019ca <__aeabi_dadd+0x152>
 80019c8:	e1c9      	b.n	8001d5e <__aeabi_dadd+0x4e6>
 80019ca:	1e4c      	subs	r4, r1, #1
 80019cc:	2901      	cmp	r1, #1
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x15a>
 80019d0:	e22e      	b.n	8001e30 <__aeabi_dadd+0x5b8>
 80019d2:	4d8c      	ldr	r5, [pc, #560]	@ (8001c04 <__aeabi_dadd+0x38c>)
 80019d4:	42a9      	cmp	r1, r5
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x162>
 80019d8:	e224      	b.n	8001e24 <__aeabi_dadd+0x5ac>
 80019da:	2701      	movs	r7, #1
 80019dc:	2c38      	cmp	r4, #56	@ 0x38
 80019de:	dc11      	bgt.n	8001a04 <__aeabi_dadd+0x18c>
 80019e0:	0021      	movs	r1, r4
 80019e2:	291f      	cmp	r1, #31
 80019e4:	dd00      	ble.n	80019e8 <__aeabi_dadd+0x170>
 80019e6:	e20b      	b.n	8001e00 <__aeabi_dadd+0x588>
 80019e8:	2420      	movs	r4, #32
 80019ea:	0037      	movs	r7, r6
 80019ec:	4648      	mov	r0, r9
 80019ee:	1a64      	subs	r4, r4, r1
 80019f0:	40a7      	lsls	r7, r4
 80019f2:	40c8      	lsrs	r0, r1
 80019f4:	4307      	orrs	r7, r0
 80019f6:	4648      	mov	r0, r9
 80019f8:	40a0      	lsls	r0, r4
 80019fa:	40ce      	lsrs	r6, r1
 80019fc:	1e44      	subs	r4, r0, #1
 80019fe:	41a0      	sbcs	r0, r4
 8001a00:	1b9b      	subs	r3, r3, r6
 8001a02:	4307      	orrs	r7, r0
 8001a04:	1bd7      	subs	r7, r2, r7
 8001a06:	42ba      	cmp	r2, r7
 8001a08:	4192      	sbcs	r2, r2
 8001a0a:	4252      	negs	r2, r2
 8001a0c:	4665      	mov	r5, ip
 8001a0e:	4644      	mov	r4, r8
 8001a10:	1a9e      	subs	r6, r3, r2
 8001a12:	e783      	b.n	800191c <__aeabi_dadd+0xa4>
 8001a14:	2900      	cmp	r1, #0
 8001a16:	dc00      	bgt.n	8001a1a <__aeabi_dadd+0x1a2>
 8001a18:	e09c      	b.n	8001b54 <__aeabi_dadd+0x2dc>
 8001a1a:	4647      	mov	r7, r8
 8001a1c:	2f00      	cmp	r7, #0
 8001a1e:	d167      	bne.n	8001af0 <__aeabi_dadd+0x278>
 8001a20:	001f      	movs	r7, r3
 8001a22:	4317      	orrs	r7, r2
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dadd+0x1b0>
 8001a26:	e0e4      	b.n	8001bf2 <__aeabi_dadd+0x37a>
 8001a28:	1e48      	subs	r0, r1, #1
 8001a2a:	2901      	cmp	r1, #1
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dadd+0x1b8>
 8001a2e:	e19b      	b.n	8001d68 <__aeabi_dadd+0x4f0>
 8001a30:	4f74      	ldr	r7, [pc, #464]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001a32:	42b9      	cmp	r1, r7
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dadd+0x1c0>
 8001a36:	e0eb      	b.n	8001c10 <__aeabi_dadd+0x398>
 8001a38:	2701      	movs	r7, #1
 8001a3a:	0001      	movs	r1, r0
 8001a3c:	2838      	cmp	r0, #56	@ 0x38
 8001a3e:	dc11      	bgt.n	8001a64 <__aeabi_dadd+0x1ec>
 8001a40:	291f      	cmp	r1, #31
 8001a42:	dd00      	ble.n	8001a46 <__aeabi_dadd+0x1ce>
 8001a44:	e1c7      	b.n	8001dd6 <__aeabi_dadd+0x55e>
 8001a46:	2720      	movs	r7, #32
 8001a48:	1a78      	subs	r0, r7, r1
 8001a4a:	001f      	movs	r7, r3
 8001a4c:	4684      	mov	ip, r0
 8001a4e:	4087      	lsls	r7, r0
 8001a50:	0010      	movs	r0, r2
 8001a52:	40c8      	lsrs	r0, r1
 8001a54:	4307      	orrs	r7, r0
 8001a56:	4660      	mov	r0, ip
 8001a58:	4082      	lsls	r2, r0
 8001a5a:	40cb      	lsrs	r3, r1
 8001a5c:	1e50      	subs	r0, r2, #1
 8001a5e:	4182      	sbcs	r2, r0
 8001a60:	18f6      	adds	r6, r6, r3
 8001a62:	4317      	orrs	r7, r2
 8001a64:	444f      	add	r7, r9
 8001a66:	454f      	cmp	r7, r9
 8001a68:	4180      	sbcs	r0, r0
 8001a6a:	4240      	negs	r0, r0
 8001a6c:	1836      	adds	r6, r6, r0
 8001a6e:	0233      	lsls	r3, r6, #8
 8001a70:	d557      	bpl.n	8001b22 <__aeabi_dadd+0x2aa>
 8001a72:	4b64      	ldr	r3, [pc, #400]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001a74:	3401      	adds	r4, #1
 8001a76:	429c      	cmp	r4, r3
 8001a78:	d045      	beq.n	8001b06 <__aeabi_dadd+0x28e>
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4b62      	ldr	r3, [pc, #392]	@ (8001c08 <__aeabi_dadd+0x390>)
 8001a7e:	087a      	lsrs	r2, r7, #1
 8001a80:	401e      	ands	r6, r3
 8001a82:	4039      	ands	r1, r7
 8001a84:	430a      	orrs	r2, r1
 8001a86:	07f7      	lsls	r7, r6, #31
 8001a88:	4317      	orrs	r7, r2
 8001a8a:	0876      	lsrs	r6, r6, #1
 8001a8c:	e771      	b.n	8001972 <__aeabi_dadd+0xfa>
 8001a8e:	001f      	movs	r7, r3
 8001a90:	4317      	orrs	r7, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x21e>
 8001a94:	e0ad      	b.n	8001bf2 <__aeabi_dadd+0x37a>
 8001a96:	1e4f      	subs	r7, r1, #1
 8001a98:	46bc      	mov	ip, r7
 8001a9a:	2901      	cmp	r1, #1
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dadd+0x228>
 8001a9e:	e182      	b.n	8001da6 <__aeabi_dadd+0x52e>
 8001aa0:	4f58      	ldr	r7, [pc, #352]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001aa2:	42b9      	cmp	r1, r7
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dadd+0x230>
 8001aa6:	e190      	b.n	8001dca <__aeabi_dadd+0x552>
 8001aa8:	4661      	mov	r1, ip
 8001aaa:	2701      	movs	r7, #1
 8001aac:	2938      	cmp	r1, #56	@ 0x38
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dadd+0x23a>
 8001ab0:	e72e      	b.n	8001910 <__aeabi_dadd+0x98>
 8001ab2:	e718      	b.n	80018e6 <__aeabi_dadd+0x6e>
 8001ab4:	4f55      	ldr	r7, [pc, #340]	@ (8001c0c <__aeabi_dadd+0x394>)
 8001ab6:	1c61      	adds	r1, r4, #1
 8001ab8:	4239      	tst	r1, r7
 8001aba:	d000      	beq.n	8001abe <__aeabi_dadd+0x246>
 8001abc:	e0d0      	b.n	8001c60 <__aeabi_dadd+0x3e8>
 8001abe:	0031      	movs	r1, r6
 8001ac0:	4648      	mov	r0, r9
 8001ac2:	001f      	movs	r7, r3
 8001ac4:	4301      	orrs	r1, r0
 8001ac6:	4317      	orrs	r7, r2
 8001ac8:	2c00      	cmp	r4, #0
 8001aca:	d000      	beq.n	8001ace <__aeabi_dadd+0x256>
 8001acc:	e13d      	b.n	8001d4a <__aeabi_dadd+0x4d2>
 8001ace:	2900      	cmp	r1, #0
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x25c>
 8001ad2:	e1bc      	b.n	8001e4e <__aeabi_dadd+0x5d6>
 8001ad4:	2f00      	cmp	r7, #0
 8001ad6:	d000      	beq.n	8001ada <__aeabi_dadd+0x262>
 8001ad8:	e1bf      	b.n	8001e5a <__aeabi_dadd+0x5e2>
 8001ada:	464b      	mov	r3, r9
 8001adc:	2100      	movs	r1, #0
 8001ade:	08d8      	lsrs	r0, r3, #3
 8001ae0:	0777      	lsls	r7, r6, #29
 8001ae2:	4307      	orrs	r7, r0
 8001ae4:	08f0      	lsrs	r0, r6, #3
 8001ae6:	0306      	lsls	r6, r0, #12
 8001ae8:	054c      	lsls	r4, r1, #21
 8001aea:	0b36      	lsrs	r6, r6, #12
 8001aec:	0d64      	lsrs	r4, r4, #21
 8001aee:	e00c      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001af0:	4f44      	ldr	r7, [pc, #272]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001af2:	42bc      	cmp	r4, r7
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dadd+0x280>
 8001af6:	e08b      	b.n	8001c10 <__aeabi_dadd+0x398>
 8001af8:	2701      	movs	r7, #1
 8001afa:	2938      	cmp	r1, #56	@ 0x38
 8001afc:	dcb2      	bgt.n	8001a64 <__aeabi_dadd+0x1ec>
 8001afe:	2780      	movs	r7, #128	@ 0x80
 8001b00:	043f      	lsls	r7, r7, #16
 8001b02:	433b      	orrs	r3, r7
 8001b04:	e79c      	b.n	8001a40 <__aeabi_dadd+0x1c8>
 8001b06:	2600      	movs	r6, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	0524      	lsls	r4, r4, #20
 8001b0c:	4334      	orrs	r4, r6
 8001b0e:	07ed      	lsls	r5, r5, #31
 8001b10:	432c      	orrs	r4, r5
 8001b12:	0038      	movs	r0, r7
 8001b14:	0021      	movs	r1, r4
 8001b16:	b002      	add	sp, #8
 8001b18:	bce0      	pop	{r5, r6, r7}
 8001b1a:	46ba      	mov	sl, r7
 8001b1c:	46b1      	mov	r9, r6
 8001b1e:	46a8      	mov	r8, r5
 8001b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b22:	077b      	lsls	r3, r7, #29
 8001b24:	d004      	beq.n	8001b30 <__aeabi_dadd+0x2b8>
 8001b26:	230f      	movs	r3, #15
 8001b28:	403b      	ands	r3, r7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d000      	beq.n	8001b30 <__aeabi_dadd+0x2b8>
 8001b2e:	e728      	b.n	8001982 <__aeabi_dadd+0x10a>
 8001b30:	08f8      	lsrs	r0, r7, #3
 8001b32:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001b34:	0777      	lsls	r7, r6, #29
 8001b36:	4307      	orrs	r7, r0
 8001b38:	08f0      	lsrs	r0, r6, #3
 8001b3a:	429c      	cmp	r4, r3
 8001b3c:	d000      	beq.n	8001b40 <__aeabi_dadd+0x2c8>
 8001b3e:	e24a      	b.n	8001fd6 <__aeabi_dadd+0x75e>
 8001b40:	003b      	movs	r3, r7
 8001b42:	4303      	orrs	r3, r0
 8001b44:	d059      	beq.n	8001bfa <__aeabi_dadd+0x382>
 8001b46:	2680      	movs	r6, #128	@ 0x80
 8001b48:	0336      	lsls	r6, r6, #12
 8001b4a:	4306      	orrs	r6, r0
 8001b4c:	0336      	lsls	r6, r6, #12
 8001b4e:	4c2d      	ldr	r4, [pc, #180]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001b50:	0b36      	lsrs	r6, r6, #12
 8001b52:	e7da      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001b54:	2900      	cmp	r1, #0
 8001b56:	d061      	beq.n	8001c1c <__aeabi_dadd+0x3a4>
 8001b58:	4641      	mov	r1, r8
 8001b5a:	1b09      	subs	r1, r1, r4
 8001b5c:	2c00      	cmp	r4, #0
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dadd+0x2ea>
 8001b60:	e0b9      	b.n	8001cd6 <__aeabi_dadd+0x45e>
 8001b62:	4c28      	ldr	r4, [pc, #160]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001b64:	45a0      	cmp	r8, r4
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x2f2>
 8001b68:	e1a5      	b.n	8001eb6 <__aeabi_dadd+0x63e>
 8001b6a:	2701      	movs	r7, #1
 8001b6c:	2938      	cmp	r1, #56	@ 0x38
 8001b6e:	dc13      	bgt.n	8001b98 <__aeabi_dadd+0x320>
 8001b70:	2480      	movs	r4, #128	@ 0x80
 8001b72:	0424      	lsls	r4, r4, #16
 8001b74:	4326      	orrs	r6, r4
 8001b76:	291f      	cmp	r1, #31
 8001b78:	dd00      	ble.n	8001b7c <__aeabi_dadd+0x304>
 8001b7a:	e1c8      	b.n	8001f0e <__aeabi_dadd+0x696>
 8001b7c:	2420      	movs	r4, #32
 8001b7e:	0037      	movs	r7, r6
 8001b80:	4648      	mov	r0, r9
 8001b82:	1a64      	subs	r4, r4, r1
 8001b84:	40a7      	lsls	r7, r4
 8001b86:	40c8      	lsrs	r0, r1
 8001b88:	4307      	orrs	r7, r0
 8001b8a:	4648      	mov	r0, r9
 8001b8c:	40a0      	lsls	r0, r4
 8001b8e:	40ce      	lsrs	r6, r1
 8001b90:	1e44      	subs	r4, r0, #1
 8001b92:	41a0      	sbcs	r0, r4
 8001b94:	199b      	adds	r3, r3, r6
 8001b96:	4307      	orrs	r7, r0
 8001b98:	18bf      	adds	r7, r7, r2
 8001b9a:	4297      	cmp	r7, r2
 8001b9c:	4192      	sbcs	r2, r2
 8001b9e:	4252      	negs	r2, r2
 8001ba0:	4644      	mov	r4, r8
 8001ba2:	18d6      	adds	r6, r2, r3
 8001ba4:	e763      	b.n	8001a6e <__aeabi_dadd+0x1f6>
 8001ba6:	0038      	movs	r0, r7
 8001ba8:	f001 feae 	bl	8003908 <__clzsi2>
 8001bac:	0003      	movs	r3, r0
 8001bae:	3318      	adds	r3, #24
 8001bb0:	2b1f      	cmp	r3, #31
 8001bb2:	dc00      	bgt.n	8001bb6 <__aeabi_dadd+0x33e>
 8001bb4:	e6bf      	b.n	8001936 <__aeabi_dadd+0xbe>
 8001bb6:	003a      	movs	r2, r7
 8001bb8:	3808      	subs	r0, #8
 8001bba:	4082      	lsls	r2, r0
 8001bbc:	429c      	cmp	r4, r3
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dadd+0x34a>
 8001bc0:	e083      	b.n	8001cca <__aeabi_dadd+0x452>
 8001bc2:	1b1b      	subs	r3, r3, r4
 8001bc4:	1c58      	adds	r0, r3, #1
 8001bc6:	281f      	cmp	r0, #31
 8001bc8:	dc00      	bgt.n	8001bcc <__aeabi_dadd+0x354>
 8001bca:	e1b4      	b.n	8001f36 <__aeabi_dadd+0x6be>
 8001bcc:	0017      	movs	r7, r2
 8001bce:	3b1f      	subs	r3, #31
 8001bd0:	40df      	lsrs	r7, r3
 8001bd2:	2820      	cmp	r0, #32
 8001bd4:	d005      	beq.n	8001be2 <__aeabi_dadd+0x36a>
 8001bd6:	2340      	movs	r3, #64	@ 0x40
 8001bd8:	1a1b      	subs	r3, r3, r0
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	1e53      	subs	r3, r2, #1
 8001bde:	419a      	sbcs	r2, r3
 8001be0:	4317      	orrs	r7, r2
 8001be2:	2400      	movs	r4, #0
 8001be4:	2f00      	cmp	r7, #0
 8001be6:	d00a      	beq.n	8001bfe <__aeabi_dadd+0x386>
 8001be8:	077b      	lsls	r3, r7, #29
 8001bea:	d000      	beq.n	8001bee <__aeabi_dadd+0x376>
 8001bec:	e6c4      	b.n	8001978 <__aeabi_dadd+0x100>
 8001bee:	0026      	movs	r6, r4
 8001bf0:	e79e      	b.n	8001b30 <__aeabi_dadd+0x2b8>
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	000c      	movs	r4, r1
 8001bf6:	08d8      	lsrs	r0, r3, #3
 8001bf8:	e79b      	b.n	8001b32 <__aeabi_dadd+0x2ba>
 8001bfa:	2700      	movs	r7, #0
 8001bfc:	4c01      	ldr	r4, [pc, #4]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001bfe:	2600      	movs	r6, #0
 8001c00:	e783      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	000007ff 	.word	0x000007ff
 8001c08:	ff7fffff 	.word	0xff7fffff
 8001c0c:	000007fe 	.word	0x000007fe
 8001c10:	464b      	mov	r3, r9
 8001c12:	0777      	lsls	r7, r6, #29
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4307      	orrs	r7, r0
 8001c18:	08f0      	lsrs	r0, r6, #3
 8001c1a:	e791      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001c1c:	4fcd      	ldr	r7, [pc, #820]	@ (8001f54 <__aeabi_dadd+0x6dc>)
 8001c1e:	1c61      	adds	r1, r4, #1
 8001c20:	4239      	tst	r1, r7
 8001c22:	d16b      	bne.n	8001cfc <__aeabi_dadd+0x484>
 8001c24:	0031      	movs	r1, r6
 8001c26:	4648      	mov	r0, r9
 8001c28:	4301      	orrs	r1, r0
 8001c2a:	2c00      	cmp	r4, #0
 8001c2c:	d000      	beq.n	8001c30 <__aeabi_dadd+0x3b8>
 8001c2e:	e14b      	b.n	8001ec8 <__aeabi_dadd+0x650>
 8001c30:	001f      	movs	r7, r3
 8001c32:	4317      	orrs	r7, r2
 8001c34:	2900      	cmp	r1, #0
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dadd+0x3c2>
 8001c38:	e181      	b.n	8001f3e <__aeabi_dadd+0x6c6>
 8001c3a:	2f00      	cmp	r7, #0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dadd+0x3c8>
 8001c3e:	e74c      	b.n	8001ada <__aeabi_dadd+0x262>
 8001c40:	444a      	add	r2, r9
 8001c42:	454a      	cmp	r2, r9
 8001c44:	4180      	sbcs	r0, r0
 8001c46:	18f6      	adds	r6, r6, r3
 8001c48:	4240      	negs	r0, r0
 8001c4a:	1836      	adds	r6, r6, r0
 8001c4c:	0233      	lsls	r3, r6, #8
 8001c4e:	d500      	bpl.n	8001c52 <__aeabi_dadd+0x3da>
 8001c50:	e1b0      	b.n	8001fb4 <__aeabi_dadd+0x73c>
 8001c52:	0017      	movs	r7, r2
 8001c54:	4691      	mov	r9, r2
 8001c56:	4337      	orrs	r7, r6
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dadd+0x3e4>
 8001c5a:	e73e      	b.n	8001ada <__aeabi_dadd+0x262>
 8001c5c:	2600      	movs	r6, #0
 8001c5e:	e754      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001c60:	4649      	mov	r1, r9
 8001c62:	1a89      	subs	r1, r1, r2
 8001c64:	4688      	mov	r8, r1
 8001c66:	45c1      	cmp	r9, r8
 8001c68:	41bf      	sbcs	r7, r7
 8001c6a:	1af1      	subs	r1, r6, r3
 8001c6c:	427f      	negs	r7, r7
 8001c6e:	1bc9      	subs	r1, r1, r7
 8001c70:	020f      	lsls	r7, r1, #8
 8001c72:	d461      	bmi.n	8001d38 <__aeabi_dadd+0x4c0>
 8001c74:	4647      	mov	r7, r8
 8001c76:	430f      	orrs	r7, r1
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dadd+0x404>
 8001c7a:	e0bd      	b.n	8001df8 <__aeabi_dadd+0x580>
 8001c7c:	000e      	movs	r6, r1
 8001c7e:	4647      	mov	r7, r8
 8001c80:	e651      	b.n	8001926 <__aeabi_dadd+0xae>
 8001c82:	4cb5      	ldr	r4, [pc, #724]	@ (8001f58 <__aeabi_dadd+0x6e0>)
 8001c84:	45a0      	cmp	r8, r4
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dadd+0x412>
 8001c88:	e100      	b.n	8001e8c <__aeabi_dadd+0x614>
 8001c8a:	2701      	movs	r7, #1
 8001c8c:	2938      	cmp	r1, #56	@ 0x38
 8001c8e:	dd00      	ble.n	8001c92 <__aeabi_dadd+0x41a>
 8001c90:	e6b8      	b.n	8001a04 <__aeabi_dadd+0x18c>
 8001c92:	2480      	movs	r4, #128	@ 0x80
 8001c94:	0424      	lsls	r4, r4, #16
 8001c96:	4326      	orrs	r6, r4
 8001c98:	e6a3      	b.n	80019e2 <__aeabi_dadd+0x16a>
 8001c9a:	4eb0      	ldr	r6, [pc, #704]	@ (8001f5c <__aeabi_dadd+0x6e4>)
 8001c9c:	1ae4      	subs	r4, r4, r3
 8001c9e:	4016      	ands	r6, r2
 8001ca0:	077b      	lsls	r3, r7, #29
 8001ca2:	d000      	beq.n	8001ca6 <__aeabi_dadd+0x42e>
 8001ca4:	e73f      	b.n	8001b26 <__aeabi_dadd+0x2ae>
 8001ca6:	e743      	b.n	8001b30 <__aeabi_dadd+0x2b8>
 8001ca8:	000f      	movs	r7, r1
 8001caa:	0018      	movs	r0, r3
 8001cac:	3f20      	subs	r7, #32
 8001cae:	40f8      	lsrs	r0, r7
 8001cb0:	4684      	mov	ip, r0
 8001cb2:	2920      	cmp	r1, #32
 8001cb4:	d003      	beq.n	8001cbe <__aeabi_dadd+0x446>
 8001cb6:	2740      	movs	r7, #64	@ 0x40
 8001cb8:	1a79      	subs	r1, r7, r1
 8001cba:	408b      	lsls	r3, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	1e53      	subs	r3, r2, #1
 8001cc0:	419a      	sbcs	r2, r3
 8001cc2:	4663      	mov	r3, ip
 8001cc4:	0017      	movs	r7, r2
 8001cc6:	431f      	orrs	r7, r3
 8001cc8:	e622      	b.n	8001910 <__aeabi_dadd+0x98>
 8001cca:	48a4      	ldr	r0, [pc, #656]	@ (8001f5c <__aeabi_dadd+0x6e4>)
 8001ccc:	1ae1      	subs	r1, r4, r3
 8001cce:	4010      	ands	r0, r2
 8001cd0:	0747      	lsls	r7, r0, #29
 8001cd2:	08c0      	lsrs	r0, r0, #3
 8001cd4:	e707      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001cd6:	0034      	movs	r4, r6
 8001cd8:	4648      	mov	r0, r9
 8001cda:	4304      	orrs	r4, r0
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dadd+0x468>
 8001cde:	e0fa      	b.n	8001ed6 <__aeabi_dadd+0x65e>
 8001ce0:	1e4c      	subs	r4, r1, #1
 8001ce2:	2901      	cmp	r1, #1
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dadd+0x470>
 8001ce6:	e0d7      	b.n	8001e98 <__aeabi_dadd+0x620>
 8001ce8:	4f9b      	ldr	r7, [pc, #620]	@ (8001f58 <__aeabi_dadd+0x6e0>)
 8001cea:	42b9      	cmp	r1, r7
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dadd+0x478>
 8001cee:	e0e2      	b.n	8001eb6 <__aeabi_dadd+0x63e>
 8001cf0:	2701      	movs	r7, #1
 8001cf2:	2c38      	cmp	r4, #56	@ 0x38
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_dadd+0x480>
 8001cf6:	e74f      	b.n	8001b98 <__aeabi_dadd+0x320>
 8001cf8:	0021      	movs	r1, r4
 8001cfa:	e73c      	b.n	8001b76 <__aeabi_dadd+0x2fe>
 8001cfc:	4c96      	ldr	r4, [pc, #600]	@ (8001f58 <__aeabi_dadd+0x6e0>)
 8001cfe:	42a1      	cmp	r1, r4
 8001d00:	d100      	bne.n	8001d04 <__aeabi_dadd+0x48c>
 8001d02:	e0dd      	b.n	8001ec0 <__aeabi_dadd+0x648>
 8001d04:	444a      	add	r2, r9
 8001d06:	454a      	cmp	r2, r9
 8001d08:	4180      	sbcs	r0, r0
 8001d0a:	18f3      	adds	r3, r6, r3
 8001d0c:	4240      	negs	r0, r0
 8001d0e:	1818      	adds	r0, r3, r0
 8001d10:	07c7      	lsls	r7, r0, #31
 8001d12:	0852      	lsrs	r2, r2, #1
 8001d14:	4317      	orrs	r7, r2
 8001d16:	0846      	lsrs	r6, r0, #1
 8001d18:	0752      	lsls	r2, r2, #29
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dadd+0x4b0>
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	000c      	movs	r4, r1
 8001d20:	403a      	ands	r2, r7
 8001d22:	2a04      	cmp	r2, #4
 8001d24:	d000      	beq.n	8001d28 <__aeabi_dadd+0x4b0>
 8001d26:	e62c      	b.n	8001982 <__aeabi_dadd+0x10a>
 8001d28:	0776      	lsls	r6, r6, #29
 8001d2a:	08ff      	lsrs	r7, r7, #3
 8001d2c:	4337      	orrs	r7, r6
 8001d2e:	0900      	lsrs	r0, r0, #4
 8001d30:	e6d9      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001d32:	2700      	movs	r7, #0
 8001d34:	2600      	movs	r6, #0
 8001d36:	e6e8      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001d38:	4649      	mov	r1, r9
 8001d3a:	1a57      	subs	r7, r2, r1
 8001d3c:	42ba      	cmp	r2, r7
 8001d3e:	4192      	sbcs	r2, r2
 8001d40:	1b9e      	subs	r6, r3, r6
 8001d42:	4252      	negs	r2, r2
 8001d44:	4665      	mov	r5, ip
 8001d46:	1ab6      	subs	r6, r6, r2
 8001d48:	e5ed      	b.n	8001926 <__aeabi_dadd+0xae>
 8001d4a:	2900      	cmp	r1, #0
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dadd+0x4d8>
 8001d4e:	e0c6      	b.n	8001ede <__aeabi_dadd+0x666>
 8001d50:	2f00      	cmp	r7, #0
 8001d52:	d167      	bne.n	8001e24 <__aeabi_dadd+0x5ac>
 8001d54:	2680      	movs	r6, #128	@ 0x80
 8001d56:	2500      	movs	r5, #0
 8001d58:	4c7f      	ldr	r4, [pc, #508]	@ (8001f58 <__aeabi_dadd+0x6e0>)
 8001d5a:	0336      	lsls	r6, r6, #12
 8001d5c:	e6d5      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001d5e:	4665      	mov	r5, ip
 8001d60:	000c      	movs	r4, r1
 8001d62:	001e      	movs	r6, r3
 8001d64:	08d0      	lsrs	r0, r2, #3
 8001d66:	e6e4      	b.n	8001b32 <__aeabi_dadd+0x2ba>
 8001d68:	444a      	add	r2, r9
 8001d6a:	454a      	cmp	r2, r9
 8001d6c:	4180      	sbcs	r0, r0
 8001d6e:	18f3      	adds	r3, r6, r3
 8001d70:	4240      	negs	r0, r0
 8001d72:	1818      	adds	r0, r3, r0
 8001d74:	0011      	movs	r1, r2
 8001d76:	0203      	lsls	r3, r0, #8
 8001d78:	d400      	bmi.n	8001d7c <__aeabi_dadd+0x504>
 8001d7a:	e096      	b.n	8001eaa <__aeabi_dadd+0x632>
 8001d7c:	4b77      	ldr	r3, [pc, #476]	@ (8001f5c <__aeabi_dadd+0x6e4>)
 8001d7e:	0849      	lsrs	r1, r1, #1
 8001d80:	4018      	ands	r0, r3
 8001d82:	07c3      	lsls	r3, r0, #31
 8001d84:	430b      	orrs	r3, r1
 8001d86:	0844      	lsrs	r4, r0, #1
 8001d88:	0749      	lsls	r1, r1, #29
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dadd+0x516>
 8001d8c:	e129      	b.n	8001fe2 <__aeabi_dadd+0x76a>
 8001d8e:	220f      	movs	r2, #15
 8001d90:	401a      	ands	r2, r3
 8001d92:	2a04      	cmp	r2, #4
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dadd+0x520>
 8001d96:	e0ea      	b.n	8001f6e <__aeabi_dadd+0x6f6>
 8001d98:	1d1f      	adds	r7, r3, #4
 8001d9a:	429f      	cmp	r7, r3
 8001d9c:	41b6      	sbcs	r6, r6
 8001d9e:	4276      	negs	r6, r6
 8001da0:	1936      	adds	r6, r6, r4
 8001da2:	2402      	movs	r4, #2
 8001da4:	e6c4      	b.n	8001b30 <__aeabi_dadd+0x2b8>
 8001da6:	4649      	mov	r1, r9
 8001da8:	1a8f      	subs	r7, r1, r2
 8001daa:	45b9      	cmp	r9, r7
 8001dac:	4180      	sbcs	r0, r0
 8001dae:	1af6      	subs	r6, r6, r3
 8001db0:	4240      	negs	r0, r0
 8001db2:	1a36      	subs	r6, r6, r0
 8001db4:	0233      	lsls	r3, r6, #8
 8001db6:	d406      	bmi.n	8001dc6 <__aeabi_dadd+0x54e>
 8001db8:	0773      	lsls	r3, r6, #29
 8001dba:	08ff      	lsrs	r7, r7, #3
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	431f      	orrs	r7, r3
 8001dc0:	08f0      	lsrs	r0, r6, #3
 8001dc2:	e690      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001dc4:	4665      	mov	r5, ip
 8001dc6:	2401      	movs	r4, #1
 8001dc8:	e5ab      	b.n	8001922 <__aeabi_dadd+0xaa>
 8001dca:	464b      	mov	r3, r9
 8001dcc:	0777      	lsls	r7, r6, #29
 8001dce:	08d8      	lsrs	r0, r3, #3
 8001dd0:	4307      	orrs	r7, r0
 8001dd2:	08f0      	lsrs	r0, r6, #3
 8001dd4:	e6b4      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001dd6:	000f      	movs	r7, r1
 8001dd8:	0018      	movs	r0, r3
 8001dda:	3f20      	subs	r7, #32
 8001ddc:	40f8      	lsrs	r0, r7
 8001dde:	4684      	mov	ip, r0
 8001de0:	2920      	cmp	r1, #32
 8001de2:	d003      	beq.n	8001dec <__aeabi_dadd+0x574>
 8001de4:	2740      	movs	r7, #64	@ 0x40
 8001de6:	1a79      	subs	r1, r7, r1
 8001de8:	408b      	lsls	r3, r1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	1e53      	subs	r3, r2, #1
 8001dee:	419a      	sbcs	r2, r3
 8001df0:	4663      	mov	r3, ip
 8001df2:	0017      	movs	r7, r2
 8001df4:	431f      	orrs	r7, r3
 8001df6:	e635      	b.n	8001a64 <__aeabi_dadd+0x1ec>
 8001df8:	2500      	movs	r5, #0
 8001dfa:	2400      	movs	r4, #0
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	e684      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001e00:	000c      	movs	r4, r1
 8001e02:	0035      	movs	r5, r6
 8001e04:	3c20      	subs	r4, #32
 8001e06:	40e5      	lsrs	r5, r4
 8001e08:	2920      	cmp	r1, #32
 8001e0a:	d005      	beq.n	8001e18 <__aeabi_dadd+0x5a0>
 8001e0c:	2440      	movs	r4, #64	@ 0x40
 8001e0e:	1a61      	subs	r1, r4, r1
 8001e10:	408e      	lsls	r6, r1
 8001e12:	4649      	mov	r1, r9
 8001e14:	4331      	orrs	r1, r6
 8001e16:	4689      	mov	r9, r1
 8001e18:	4648      	mov	r0, r9
 8001e1a:	1e41      	subs	r1, r0, #1
 8001e1c:	4188      	sbcs	r0, r1
 8001e1e:	0007      	movs	r7, r0
 8001e20:	432f      	orrs	r7, r5
 8001e22:	e5ef      	b.n	8001a04 <__aeabi_dadd+0x18c>
 8001e24:	08d2      	lsrs	r2, r2, #3
 8001e26:	075f      	lsls	r7, r3, #29
 8001e28:	4665      	mov	r5, ip
 8001e2a:	4317      	orrs	r7, r2
 8001e2c:	08d8      	lsrs	r0, r3, #3
 8001e2e:	e687      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001e30:	1a17      	subs	r7, r2, r0
 8001e32:	42ba      	cmp	r2, r7
 8001e34:	4192      	sbcs	r2, r2
 8001e36:	1b9e      	subs	r6, r3, r6
 8001e38:	4252      	negs	r2, r2
 8001e3a:	1ab6      	subs	r6, r6, r2
 8001e3c:	0233      	lsls	r3, r6, #8
 8001e3e:	d4c1      	bmi.n	8001dc4 <__aeabi_dadd+0x54c>
 8001e40:	0773      	lsls	r3, r6, #29
 8001e42:	08ff      	lsrs	r7, r7, #3
 8001e44:	4665      	mov	r5, ip
 8001e46:	2101      	movs	r1, #1
 8001e48:	431f      	orrs	r7, r3
 8001e4a:	08f0      	lsrs	r0, r6, #3
 8001e4c:	e64b      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001e4e:	2f00      	cmp	r7, #0
 8001e50:	d07b      	beq.n	8001f4a <__aeabi_dadd+0x6d2>
 8001e52:	4665      	mov	r5, ip
 8001e54:	001e      	movs	r6, r3
 8001e56:	4691      	mov	r9, r2
 8001e58:	e63f      	b.n	8001ada <__aeabi_dadd+0x262>
 8001e5a:	1a81      	subs	r1, r0, r2
 8001e5c:	4688      	mov	r8, r1
 8001e5e:	45c1      	cmp	r9, r8
 8001e60:	41a4      	sbcs	r4, r4
 8001e62:	1af1      	subs	r1, r6, r3
 8001e64:	4264      	negs	r4, r4
 8001e66:	1b09      	subs	r1, r1, r4
 8001e68:	2480      	movs	r4, #128	@ 0x80
 8001e6a:	0424      	lsls	r4, r4, #16
 8001e6c:	4221      	tst	r1, r4
 8001e6e:	d077      	beq.n	8001f60 <__aeabi_dadd+0x6e8>
 8001e70:	1a10      	subs	r0, r2, r0
 8001e72:	4282      	cmp	r2, r0
 8001e74:	4192      	sbcs	r2, r2
 8001e76:	0007      	movs	r7, r0
 8001e78:	1b9e      	subs	r6, r3, r6
 8001e7a:	4252      	negs	r2, r2
 8001e7c:	1ab6      	subs	r6, r6, r2
 8001e7e:	4337      	orrs	r7, r6
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dadd+0x60c>
 8001e82:	e0a0      	b.n	8001fc6 <__aeabi_dadd+0x74e>
 8001e84:	4665      	mov	r5, ip
 8001e86:	2400      	movs	r4, #0
 8001e88:	2600      	movs	r6, #0
 8001e8a:	e63e      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001e8c:	075f      	lsls	r7, r3, #29
 8001e8e:	08d2      	lsrs	r2, r2, #3
 8001e90:	4665      	mov	r5, ip
 8001e92:	4317      	orrs	r7, r2
 8001e94:	08d8      	lsrs	r0, r3, #3
 8001e96:	e653      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001e98:	1881      	adds	r1, r0, r2
 8001e9a:	4291      	cmp	r1, r2
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	18f0      	adds	r0, r6, r3
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	1880      	adds	r0, r0, r2
 8001ea4:	0203      	lsls	r3, r0, #8
 8001ea6:	d500      	bpl.n	8001eaa <__aeabi_dadd+0x632>
 8001ea8:	e768      	b.n	8001d7c <__aeabi_dadd+0x504>
 8001eaa:	0747      	lsls	r7, r0, #29
 8001eac:	08c9      	lsrs	r1, r1, #3
 8001eae:	430f      	orrs	r7, r1
 8001eb0:	08c0      	lsrs	r0, r0, #3
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	e617      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001eb6:	08d2      	lsrs	r2, r2, #3
 8001eb8:	075f      	lsls	r7, r3, #29
 8001eba:	4317      	orrs	r7, r2
 8001ebc:	08d8      	lsrs	r0, r3, #3
 8001ebe:	e63f      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001ec0:	000c      	movs	r4, r1
 8001ec2:	2600      	movs	r6, #0
 8001ec4:	2700      	movs	r7, #0
 8001ec6:	e620      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d156      	bne.n	8001f7a <__aeabi_dadd+0x702>
 8001ecc:	075f      	lsls	r7, r3, #29
 8001ece:	08d2      	lsrs	r2, r2, #3
 8001ed0:	4317      	orrs	r7, r2
 8001ed2:	08d8      	lsrs	r0, r3, #3
 8001ed4:	e634      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001ed6:	000c      	movs	r4, r1
 8001ed8:	001e      	movs	r6, r3
 8001eda:	08d0      	lsrs	r0, r2, #3
 8001edc:	e629      	b.n	8001b32 <__aeabi_dadd+0x2ba>
 8001ede:	08c1      	lsrs	r1, r0, #3
 8001ee0:	0770      	lsls	r0, r6, #29
 8001ee2:	4301      	orrs	r1, r0
 8001ee4:	08f0      	lsrs	r0, r6, #3
 8001ee6:	2f00      	cmp	r7, #0
 8001ee8:	d062      	beq.n	8001fb0 <__aeabi_dadd+0x738>
 8001eea:	2480      	movs	r4, #128	@ 0x80
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	4220      	tst	r0, r4
 8001ef0:	d007      	beq.n	8001f02 <__aeabi_dadd+0x68a>
 8001ef2:	08de      	lsrs	r6, r3, #3
 8001ef4:	4226      	tst	r6, r4
 8001ef6:	d104      	bne.n	8001f02 <__aeabi_dadd+0x68a>
 8001ef8:	4665      	mov	r5, ip
 8001efa:	0030      	movs	r0, r6
 8001efc:	08d1      	lsrs	r1, r2, #3
 8001efe:	075b      	lsls	r3, r3, #29
 8001f00:	4319      	orrs	r1, r3
 8001f02:	0f4f      	lsrs	r7, r1, #29
 8001f04:	00c9      	lsls	r1, r1, #3
 8001f06:	08c9      	lsrs	r1, r1, #3
 8001f08:	077f      	lsls	r7, r7, #29
 8001f0a:	430f      	orrs	r7, r1
 8001f0c:	e618      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001f0e:	000c      	movs	r4, r1
 8001f10:	0030      	movs	r0, r6
 8001f12:	3c20      	subs	r4, #32
 8001f14:	40e0      	lsrs	r0, r4
 8001f16:	4684      	mov	ip, r0
 8001f18:	2920      	cmp	r1, #32
 8001f1a:	d005      	beq.n	8001f28 <__aeabi_dadd+0x6b0>
 8001f1c:	2440      	movs	r4, #64	@ 0x40
 8001f1e:	1a61      	subs	r1, r4, r1
 8001f20:	408e      	lsls	r6, r1
 8001f22:	4649      	mov	r1, r9
 8001f24:	4331      	orrs	r1, r6
 8001f26:	4689      	mov	r9, r1
 8001f28:	4648      	mov	r0, r9
 8001f2a:	1e41      	subs	r1, r0, #1
 8001f2c:	4188      	sbcs	r0, r1
 8001f2e:	4661      	mov	r1, ip
 8001f30:	0007      	movs	r7, r0
 8001f32:	430f      	orrs	r7, r1
 8001f34:	e630      	b.n	8001b98 <__aeabi_dadd+0x320>
 8001f36:	2120      	movs	r1, #32
 8001f38:	2700      	movs	r7, #0
 8001f3a:	1a09      	subs	r1, r1, r0
 8001f3c:	e50e      	b.n	800195c <__aeabi_dadd+0xe4>
 8001f3e:	001e      	movs	r6, r3
 8001f40:	2f00      	cmp	r7, #0
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dadd+0x6ce>
 8001f44:	e522      	b.n	800198c <__aeabi_dadd+0x114>
 8001f46:	2400      	movs	r4, #0
 8001f48:	e758      	b.n	8001dfc <__aeabi_dadd+0x584>
 8001f4a:	2500      	movs	r5, #0
 8001f4c:	2400      	movs	r4, #0
 8001f4e:	2600      	movs	r6, #0
 8001f50:	e5db      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	000007fe 	.word	0x000007fe
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	4647      	mov	r7, r8
 8001f62:	430f      	orrs	r7, r1
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dadd+0x6f0>
 8001f66:	e747      	b.n	8001df8 <__aeabi_dadd+0x580>
 8001f68:	000e      	movs	r6, r1
 8001f6a:	46c1      	mov	r9, r8
 8001f6c:	e5b5      	b.n	8001ada <__aeabi_dadd+0x262>
 8001f6e:	08df      	lsrs	r7, r3, #3
 8001f70:	0764      	lsls	r4, r4, #29
 8001f72:	2102      	movs	r1, #2
 8001f74:	4327      	orrs	r7, r4
 8001f76:	0900      	lsrs	r0, r0, #4
 8001f78:	e5b5      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	08c0      	lsrs	r0, r0, #3
 8001f7e:	0777      	lsls	r7, r6, #29
 8001f80:	4307      	orrs	r7, r0
 8001f82:	4311      	orrs	r1, r2
 8001f84:	08f0      	lsrs	r0, r6, #3
 8001f86:	2900      	cmp	r1, #0
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dadd+0x714>
 8001f8a:	e5d9      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001f8c:	2180      	movs	r1, #128	@ 0x80
 8001f8e:	0309      	lsls	r1, r1, #12
 8001f90:	4208      	tst	r0, r1
 8001f92:	d007      	beq.n	8001fa4 <__aeabi_dadd+0x72c>
 8001f94:	08dc      	lsrs	r4, r3, #3
 8001f96:	420c      	tst	r4, r1
 8001f98:	d104      	bne.n	8001fa4 <__aeabi_dadd+0x72c>
 8001f9a:	08d2      	lsrs	r2, r2, #3
 8001f9c:	075b      	lsls	r3, r3, #29
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	0017      	movs	r7, r2
 8001fa2:	0020      	movs	r0, r4
 8001fa4:	0f7b      	lsrs	r3, r7, #29
 8001fa6:	00ff      	lsls	r7, r7, #3
 8001fa8:	08ff      	lsrs	r7, r7, #3
 8001faa:	075b      	lsls	r3, r3, #29
 8001fac:	431f      	orrs	r7, r3
 8001fae:	e5c7      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001fb0:	000f      	movs	r7, r1
 8001fb2:	e5c5      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <__aeabi_dadd+0x788>)
 8001fb6:	08d2      	lsrs	r2, r2, #3
 8001fb8:	4033      	ands	r3, r6
 8001fba:	075f      	lsls	r7, r3, #29
 8001fbc:	025b      	lsls	r3, r3, #9
 8001fbe:	2401      	movs	r4, #1
 8001fc0:	4317      	orrs	r7, r2
 8001fc2:	0b1e      	lsrs	r6, r3, #12
 8001fc4:	e5a1      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001fc6:	4226      	tst	r6, r4
 8001fc8:	d012      	beq.n	8001ff0 <__aeabi_dadd+0x778>
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <__aeabi_dadd+0x788>)
 8001fcc:	4665      	mov	r5, ip
 8001fce:	0002      	movs	r2, r0
 8001fd0:	2401      	movs	r4, #1
 8001fd2:	401e      	ands	r6, r3
 8001fd4:	e4e6      	b.n	80019a4 <__aeabi_dadd+0x12c>
 8001fd6:	0021      	movs	r1, r4
 8001fd8:	e585      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001fda:	0017      	movs	r7, r2
 8001fdc:	e5a8      	b.n	8001b30 <__aeabi_dadd+0x2b8>
 8001fde:	003a      	movs	r2, r7
 8001fe0:	e4d4      	b.n	800198c <__aeabi_dadd+0x114>
 8001fe2:	08db      	lsrs	r3, r3, #3
 8001fe4:	0764      	lsls	r4, r4, #29
 8001fe6:	431c      	orrs	r4, r3
 8001fe8:	0027      	movs	r7, r4
 8001fea:	2102      	movs	r1, #2
 8001fec:	0900      	lsrs	r0, r0, #4
 8001fee:	e57a      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001ff0:	08c0      	lsrs	r0, r0, #3
 8001ff2:	0777      	lsls	r7, r6, #29
 8001ff4:	4307      	orrs	r7, r0
 8001ff6:	4665      	mov	r5, ip
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	08f0      	lsrs	r0, r6, #3
 8001ffc:	e573      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	ff7fffff 	.word	0xff7fffff

08002004 <__aeabi_ddiv>:
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	46de      	mov	lr, fp
 8002008:	4645      	mov	r5, r8
 800200a:	4657      	mov	r7, sl
 800200c:	464e      	mov	r6, r9
 800200e:	b5e0      	push	{r5, r6, r7, lr}
 8002010:	b087      	sub	sp, #28
 8002012:	9200      	str	r2, [sp, #0]
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	030b      	lsls	r3, r1, #12
 8002018:	0b1b      	lsrs	r3, r3, #12
 800201a:	469b      	mov	fp, r3
 800201c:	0fca      	lsrs	r2, r1, #31
 800201e:	004b      	lsls	r3, r1, #1
 8002020:	0004      	movs	r4, r0
 8002022:	4680      	mov	r8, r0
 8002024:	0d5b      	lsrs	r3, r3, #21
 8002026:	9202      	str	r2, [sp, #8]
 8002028:	d100      	bne.n	800202c <__aeabi_ddiv+0x28>
 800202a:	e098      	b.n	800215e <__aeabi_ddiv+0x15a>
 800202c:	4a7c      	ldr	r2, [pc, #496]	@ (8002220 <__aeabi_ddiv+0x21c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d037      	beq.n	80020a2 <__aeabi_ddiv+0x9e>
 8002032:	4659      	mov	r1, fp
 8002034:	0f42      	lsrs	r2, r0, #29
 8002036:	00c9      	lsls	r1, r1, #3
 8002038:	430a      	orrs	r2, r1
 800203a:	2180      	movs	r1, #128	@ 0x80
 800203c:	0409      	lsls	r1, r1, #16
 800203e:	4311      	orrs	r1, r2
 8002040:	00c2      	lsls	r2, r0, #3
 8002042:	4690      	mov	r8, r2
 8002044:	4a77      	ldr	r2, [pc, #476]	@ (8002224 <__aeabi_ddiv+0x220>)
 8002046:	4689      	mov	r9, r1
 8002048:	4692      	mov	sl, r2
 800204a:	449a      	add	sl, r3
 800204c:	2300      	movs	r3, #0
 800204e:	2400      	movs	r4, #0
 8002050:	9303      	str	r3, [sp, #12]
 8002052:	9e00      	ldr	r6, [sp, #0]
 8002054:	9f01      	ldr	r7, [sp, #4]
 8002056:	033b      	lsls	r3, r7, #12
 8002058:	0b1b      	lsrs	r3, r3, #12
 800205a:	469b      	mov	fp, r3
 800205c:	007b      	lsls	r3, r7, #1
 800205e:	0030      	movs	r0, r6
 8002060:	0d5b      	lsrs	r3, r3, #21
 8002062:	0ffd      	lsrs	r5, r7, #31
 8002064:	2b00      	cmp	r3, #0
 8002066:	d059      	beq.n	800211c <__aeabi_ddiv+0x118>
 8002068:	4a6d      	ldr	r2, [pc, #436]	@ (8002220 <__aeabi_ddiv+0x21c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d048      	beq.n	8002100 <__aeabi_ddiv+0xfc>
 800206e:	4659      	mov	r1, fp
 8002070:	0f72      	lsrs	r2, r6, #29
 8002072:	00c9      	lsls	r1, r1, #3
 8002074:	430a      	orrs	r2, r1
 8002076:	2180      	movs	r1, #128	@ 0x80
 8002078:	0409      	lsls	r1, r1, #16
 800207a:	4311      	orrs	r1, r2
 800207c:	468b      	mov	fp, r1
 800207e:	4969      	ldr	r1, [pc, #420]	@ (8002224 <__aeabi_ddiv+0x220>)
 8002080:	00f2      	lsls	r2, r6, #3
 8002082:	468c      	mov	ip, r1
 8002084:	4651      	mov	r1, sl
 8002086:	4463      	add	r3, ip
 8002088:	1acb      	subs	r3, r1, r3
 800208a:	469a      	mov	sl, r3
 800208c:	2100      	movs	r1, #0
 800208e:	9e02      	ldr	r6, [sp, #8]
 8002090:	406e      	eors	r6, r5
 8002092:	b2f6      	uxtb	r6, r6
 8002094:	2c0f      	cmp	r4, #15
 8002096:	d900      	bls.n	800209a <__aeabi_ddiv+0x96>
 8002098:	e0ce      	b.n	8002238 <__aeabi_ddiv+0x234>
 800209a:	4b63      	ldr	r3, [pc, #396]	@ (8002228 <__aeabi_ddiv+0x224>)
 800209c:	00a4      	lsls	r4, r4, #2
 800209e:	591b      	ldr	r3, [r3, r4]
 80020a0:	469f      	mov	pc, r3
 80020a2:	465a      	mov	r2, fp
 80020a4:	4302      	orrs	r2, r0
 80020a6:	4691      	mov	r9, r2
 80020a8:	d000      	beq.n	80020ac <__aeabi_ddiv+0xa8>
 80020aa:	e090      	b.n	80021ce <__aeabi_ddiv+0x1ca>
 80020ac:	469a      	mov	sl, r3
 80020ae:	2302      	movs	r3, #2
 80020b0:	4690      	mov	r8, r2
 80020b2:	2408      	movs	r4, #8
 80020b4:	9303      	str	r3, [sp, #12]
 80020b6:	e7cc      	b.n	8002052 <__aeabi_ddiv+0x4e>
 80020b8:	46cb      	mov	fp, r9
 80020ba:	4642      	mov	r2, r8
 80020bc:	9d02      	ldr	r5, [sp, #8]
 80020be:	9903      	ldr	r1, [sp, #12]
 80020c0:	2902      	cmp	r1, #2
 80020c2:	d100      	bne.n	80020c6 <__aeabi_ddiv+0xc2>
 80020c4:	e1de      	b.n	8002484 <__aeabi_ddiv+0x480>
 80020c6:	2903      	cmp	r1, #3
 80020c8:	d100      	bne.n	80020cc <__aeabi_ddiv+0xc8>
 80020ca:	e08d      	b.n	80021e8 <__aeabi_ddiv+0x1e4>
 80020cc:	2901      	cmp	r1, #1
 80020ce:	d000      	beq.n	80020d2 <__aeabi_ddiv+0xce>
 80020d0:	e179      	b.n	80023c6 <__aeabi_ddiv+0x3c2>
 80020d2:	002e      	movs	r6, r5
 80020d4:	2200      	movs	r2, #0
 80020d6:	2300      	movs	r3, #0
 80020d8:	2400      	movs	r4, #0
 80020da:	4690      	mov	r8, r2
 80020dc:	051b      	lsls	r3, r3, #20
 80020de:	4323      	orrs	r3, r4
 80020e0:	07f6      	lsls	r6, r6, #31
 80020e2:	4333      	orrs	r3, r6
 80020e4:	4640      	mov	r0, r8
 80020e6:	0019      	movs	r1, r3
 80020e8:	b007      	add	sp, #28
 80020ea:	bcf0      	pop	{r4, r5, r6, r7}
 80020ec:	46bb      	mov	fp, r7
 80020ee:	46b2      	mov	sl, r6
 80020f0:	46a9      	mov	r9, r5
 80020f2:	46a0      	mov	r8, r4
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	2200      	movs	r2, #0
 80020f8:	2400      	movs	r4, #0
 80020fa:	4690      	mov	r8, r2
 80020fc:	4b48      	ldr	r3, [pc, #288]	@ (8002220 <__aeabi_ddiv+0x21c>)
 80020fe:	e7ed      	b.n	80020dc <__aeabi_ddiv+0xd8>
 8002100:	465a      	mov	r2, fp
 8002102:	9b00      	ldr	r3, [sp, #0]
 8002104:	431a      	orrs	r2, r3
 8002106:	4b49      	ldr	r3, [pc, #292]	@ (800222c <__aeabi_ddiv+0x228>)
 8002108:	469c      	mov	ip, r3
 800210a:	44e2      	add	sl, ip
 800210c:	2a00      	cmp	r2, #0
 800210e:	d159      	bne.n	80021c4 <__aeabi_ddiv+0x1c0>
 8002110:	2302      	movs	r3, #2
 8002112:	431c      	orrs	r4, r3
 8002114:	2300      	movs	r3, #0
 8002116:	2102      	movs	r1, #2
 8002118:	469b      	mov	fp, r3
 800211a:	e7b8      	b.n	800208e <__aeabi_ddiv+0x8a>
 800211c:	465a      	mov	r2, fp
 800211e:	9b00      	ldr	r3, [sp, #0]
 8002120:	431a      	orrs	r2, r3
 8002122:	d049      	beq.n	80021b8 <__aeabi_ddiv+0x1b4>
 8002124:	465b      	mov	r3, fp
 8002126:	2b00      	cmp	r3, #0
 8002128:	d100      	bne.n	800212c <__aeabi_ddiv+0x128>
 800212a:	e19c      	b.n	8002466 <__aeabi_ddiv+0x462>
 800212c:	4658      	mov	r0, fp
 800212e:	f001 fbeb 	bl	8003908 <__clzsi2>
 8002132:	0002      	movs	r2, r0
 8002134:	0003      	movs	r3, r0
 8002136:	3a0b      	subs	r2, #11
 8002138:	271d      	movs	r7, #29
 800213a:	9e00      	ldr	r6, [sp, #0]
 800213c:	1aba      	subs	r2, r7, r2
 800213e:	0019      	movs	r1, r3
 8002140:	4658      	mov	r0, fp
 8002142:	40d6      	lsrs	r6, r2
 8002144:	3908      	subs	r1, #8
 8002146:	4088      	lsls	r0, r1
 8002148:	0032      	movs	r2, r6
 800214a:	4302      	orrs	r2, r0
 800214c:	4693      	mov	fp, r2
 800214e:	9a00      	ldr	r2, [sp, #0]
 8002150:	408a      	lsls	r2, r1
 8002152:	4937      	ldr	r1, [pc, #220]	@ (8002230 <__aeabi_ddiv+0x22c>)
 8002154:	4453      	add	r3, sl
 8002156:	468a      	mov	sl, r1
 8002158:	2100      	movs	r1, #0
 800215a:	449a      	add	sl, r3
 800215c:	e797      	b.n	800208e <__aeabi_ddiv+0x8a>
 800215e:	465b      	mov	r3, fp
 8002160:	4303      	orrs	r3, r0
 8002162:	4699      	mov	r9, r3
 8002164:	d021      	beq.n	80021aa <__aeabi_ddiv+0x1a6>
 8002166:	465b      	mov	r3, fp
 8002168:	2b00      	cmp	r3, #0
 800216a:	d100      	bne.n	800216e <__aeabi_ddiv+0x16a>
 800216c:	e169      	b.n	8002442 <__aeabi_ddiv+0x43e>
 800216e:	4658      	mov	r0, fp
 8002170:	f001 fbca 	bl	8003908 <__clzsi2>
 8002174:	230b      	movs	r3, #11
 8002176:	425b      	negs	r3, r3
 8002178:	469c      	mov	ip, r3
 800217a:	0002      	movs	r2, r0
 800217c:	4484      	add	ip, r0
 800217e:	4666      	mov	r6, ip
 8002180:	231d      	movs	r3, #29
 8002182:	1b9b      	subs	r3, r3, r6
 8002184:	0026      	movs	r6, r4
 8002186:	0011      	movs	r1, r2
 8002188:	4658      	mov	r0, fp
 800218a:	40de      	lsrs	r6, r3
 800218c:	3908      	subs	r1, #8
 800218e:	4088      	lsls	r0, r1
 8002190:	0033      	movs	r3, r6
 8002192:	4303      	orrs	r3, r0
 8002194:	4699      	mov	r9, r3
 8002196:	0023      	movs	r3, r4
 8002198:	408b      	lsls	r3, r1
 800219a:	4698      	mov	r8, r3
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <__aeabi_ddiv+0x230>)
 800219e:	2400      	movs	r4, #0
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	469a      	mov	sl, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	9303      	str	r3, [sp, #12]
 80021a8:	e753      	b.n	8002052 <__aeabi_ddiv+0x4e>
 80021aa:	2300      	movs	r3, #0
 80021ac:	4698      	mov	r8, r3
 80021ae:	469a      	mov	sl, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	2404      	movs	r4, #4
 80021b4:	9303      	str	r3, [sp, #12]
 80021b6:	e74c      	b.n	8002052 <__aeabi_ddiv+0x4e>
 80021b8:	2301      	movs	r3, #1
 80021ba:	431c      	orrs	r4, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	2101      	movs	r1, #1
 80021c0:	469b      	mov	fp, r3
 80021c2:	e764      	b.n	800208e <__aeabi_ddiv+0x8a>
 80021c4:	2303      	movs	r3, #3
 80021c6:	0032      	movs	r2, r6
 80021c8:	2103      	movs	r1, #3
 80021ca:	431c      	orrs	r4, r3
 80021cc:	e75f      	b.n	800208e <__aeabi_ddiv+0x8a>
 80021ce:	469a      	mov	sl, r3
 80021d0:	2303      	movs	r3, #3
 80021d2:	46d9      	mov	r9, fp
 80021d4:	240c      	movs	r4, #12
 80021d6:	9303      	str	r3, [sp, #12]
 80021d8:	e73b      	b.n	8002052 <__aeabi_ddiv+0x4e>
 80021da:	2300      	movs	r3, #0
 80021dc:	2480      	movs	r4, #128	@ 0x80
 80021de:	4698      	mov	r8, r3
 80021e0:	2600      	movs	r6, #0
 80021e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <__aeabi_ddiv+0x21c>)
 80021e4:	0324      	lsls	r4, r4, #12
 80021e6:	e779      	b.n	80020dc <__aeabi_ddiv+0xd8>
 80021e8:	2480      	movs	r4, #128	@ 0x80
 80021ea:	465b      	mov	r3, fp
 80021ec:	0324      	lsls	r4, r4, #12
 80021ee:	431c      	orrs	r4, r3
 80021f0:	0324      	lsls	r4, r4, #12
 80021f2:	002e      	movs	r6, r5
 80021f4:	4690      	mov	r8, r2
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <__aeabi_ddiv+0x21c>)
 80021f8:	0b24      	lsrs	r4, r4, #12
 80021fa:	e76f      	b.n	80020dc <__aeabi_ddiv+0xd8>
 80021fc:	2480      	movs	r4, #128	@ 0x80
 80021fe:	464b      	mov	r3, r9
 8002200:	0324      	lsls	r4, r4, #12
 8002202:	4223      	tst	r3, r4
 8002204:	d002      	beq.n	800220c <__aeabi_ddiv+0x208>
 8002206:	465b      	mov	r3, fp
 8002208:	4223      	tst	r3, r4
 800220a:	d0f0      	beq.n	80021ee <__aeabi_ddiv+0x1ea>
 800220c:	2480      	movs	r4, #128	@ 0x80
 800220e:	464b      	mov	r3, r9
 8002210:	0324      	lsls	r4, r4, #12
 8002212:	431c      	orrs	r4, r3
 8002214:	0324      	lsls	r4, r4, #12
 8002216:	9e02      	ldr	r6, [sp, #8]
 8002218:	4b01      	ldr	r3, [pc, #4]	@ (8002220 <__aeabi_ddiv+0x21c>)
 800221a:	0b24      	lsrs	r4, r4, #12
 800221c:	e75e      	b.n	80020dc <__aeabi_ddiv+0xd8>
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	000007ff 	.word	0x000007ff
 8002224:	fffffc01 	.word	0xfffffc01
 8002228:	0800ece8 	.word	0x0800ece8
 800222c:	fffff801 	.word	0xfffff801
 8002230:	000003f3 	.word	0x000003f3
 8002234:	fffffc0d 	.word	0xfffffc0d
 8002238:	45cb      	cmp	fp, r9
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x23a>
 800223c:	e0f8      	b.n	8002430 <__aeabi_ddiv+0x42c>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x23e>
 8002240:	e0f3      	b.n	800242a <__aeabi_ddiv+0x426>
 8002242:	2301      	movs	r3, #1
 8002244:	425b      	negs	r3, r3
 8002246:	469c      	mov	ip, r3
 8002248:	4644      	mov	r4, r8
 800224a:	4648      	mov	r0, r9
 800224c:	2500      	movs	r5, #0
 800224e:	44e2      	add	sl, ip
 8002250:	465b      	mov	r3, fp
 8002252:	0e17      	lsrs	r7, r2, #24
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	431f      	orrs	r7, r3
 8002258:	0c19      	lsrs	r1, r3, #16
 800225a:	043b      	lsls	r3, r7, #16
 800225c:	0212      	lsls	r2, r2, #8
 800225e:	9700      	str	r7, [sp, #0]
 8002260:	0c1f      	lsrs	r7, r3, #16
 8002262:	4691      	mov	r9, r2
 8002264:	9102      	str	r1, [sp, #8]
 8002266:	9703      	str	r7, [sp, #12]
 8002268:	f7fd fff8 	bl	800025c <__aeabi_uidivmod>
 800226c:	0002      	movs	r2, r0
 800226e:	437a      	muls	r2, r7
 8002270:	040b      	lsls	r3, r1, #16
 8002272:	0c21      	lsrs	r1, r4, #16
 8002274:	4680      	mov	r8, r0
 8002276:	4319      	orrs	r1, r3
 8002278:	428a      	cmp	r2, r1
 800227a:	d909      	bls.n	8002290 <__aeabi_ddiv+0x28c>
 800227c:	9f00      	ldr	r7, [sp, #0]
 800227e:	2301      	movs	r3, #1
 8002280:	46bc      	mov	ip, r7
 8002282:	425b      	negs	r3, r3
 8002284:	4461      	add	r1, ip
 8002286:	469c      	mov	ip, r3
 8002288:	44e0      	add	r8, ip
 800228a:	428f      	cmp	r7, r1
 800228c:	d800      	bhi.n	8002290 <__aeabi_ddiv+0x28c>
 800228e:	e15c      	b.n	800254a <__aeabi_ddiv+0x546>
 8002290:	1a88      	subs	r0, r1, r2
 8002292:	9902      	ldr	r1, [sp, #8]
 8002294:	f7fd ffe2 	bl	800025c <__aeabi_uidivmod>
 8002298:	9a03      	ldr	r2, [sp, #12]
 800229a:	0424      	lsls	r4, r4, #16
 800229c:	4342      	muls	r2, r0
 800229e:	0409      	lsls	r1, r1, #16
 80022a0:	0c24      	lsrs	r4, r4, #16
 80022a2:	0003      	movs	r3, r0
 80022a4:	430c      	orrs	r4, r1
 80022a6:	42a2      	cmp	r2, r4
 80022a8:	d906      	bls.n	80022b8 <__aeabi_ddiv+0x2b4>
 80022aa:	9900      	ldr	r1, [sp, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	468c      	mov	ip, r1
 80022b0:	4464      	add	r4, ip
 80022b2:	42a1      	cmp	r1, r4
 80022b4:	d800      	bhi.n	80022b8 <__aeabi_ddiv+0x2b4>
 80022b6:	e142      	b.n	800253e <__aeabi_ddiv+0x53a>
 80022b8:	1aa0      	subs	r0, r4, r2
 80022ba:	4642      	mov	r2, r8
 80022bc:	0412      	lsls	r2, r2, #16
 80022be:	431a      	orrs	r2, r3
 80022c0:	4693      	mov	fp, r2
 80022c2:	464b      	mov	r3, r9
 80022c4:	4659      	mov	r1, fp
 80022c6:	0c1b      	lsrs	r3, r3, #16
 80022c8:	001f      	movs	r7, r3
 80022ca:	9304      	str	r3, [sp, #16]
 80022cc:	040b      	lsls	r3, r1, #16
 80022ce:	4649      	mov	r1, r9
 80022d0:	0409      	lsls	r1, r1, #16
 80022d2:	0c09      	lsrs	r1, r1, #16
 80022d4:	000c      	movs	r4, r1
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	435c      	muls	r4, r3
 80022da:	0c12      	lsrs	r2, r2, #16
 80022dc:	437b      	muls	r3, r7
 80022de:	4688      	mov	r8, r1
 80022e0:	4351      	muls	r1, r2
 80022e2:	437a      	muls	r2, r7
 80022e4:	0c27      	lsrs	r7, r4, #16
 80022e6:	46bc      	mov	ip, r7
 80022e8:	185b      	adds	r3, r3, r1
 80022ea:	4463      	add	r3, ip
 80022ec:	4299      	cmp	r1, r3
 80022ee:	d903      	bls.n	80022f8 <__aeabi_ddiv+0x2f4>
 80022f0:	2180      	movs	r1, #128	@ 0x80
 80022f2:	0249      	lsls	r1, r1, #9
 80022f4:	468c      	mov	ip, r1
 80022f6:	4462      	add	r2, ip
 80022f8:	0c19      	lsrs	r1, r3, #16
 80022fa:	0424      	lsls	r4, r4, #16
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	0c24      	lsrs	r4, r4, #16
 8002300:	188a      	adds	r2, r1, r2
 8002302:	191c      	adds	r4, r3, r4
 8002304:	4290      	cmp	r0, r2
 8002306:	d302      	bcc.n	800230e <__aeabi_ddiv+0x30a>
 8002308:	d116      	bne.n	8002338 <__aeabi_ddiv+0x334>
 800230a:	42a5      	cmp	r5, r4
 800230c:	d214      	bcs.n	8002338 <__aeabi_ddiv+0x334>
 800230e:	465b      	mov	r3, fp
 8002310:	9f00      	ldr	r7, [sp, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	444d      	add	r5, r9
 8002316:	9305      	str	r3, [sp, #20]
 8002318:	454d      	cmp	r5, r9
 800231a:	419b      	sbcs	r3, r3
 800231c:	46bc      	mov	ip, r7
 800231e:	425b      	negs	r3, r3
 8002320:	4463      	add	r3, ip
 8002322:	18c0      	adds	r0, r0, r3
 8002324:	4287      	cmp	r7, r0
 8002326:	d300      	bcc.n	800232a <__aeabi_ddiv+0x326>
 8002328:	e102      	b.n	8002530 <__aeabi_ddiv+0x52c>
 800232a:	4282      	cmp	r2, r0
 800232c:	d900      	bls.n	8002330 <__aeabi_ddiv+0x32c>
 800232e:	e129      	b.n	8002584 <__aeabi_ddiv+0x580>
 8002330:	d100      	bne.n	8002334 <__aeabi_ddiv+0x330>
 8002332:	e124      	b.n	800257e <__aeabi_ddiv+0x57a>
 8002334:	9b05      	ldr	r3, [sp, #20]
 8002336:	469b      	mov	fp, r3
 8002338:	1b2c      	subs	r4, r5, r4
 800233a:	42a5      	cmp	r5, r4
 800233c:	41ad      	sbcs	r5, r5
 800233e:	9b00      	ldr	r3, [sp, #0]
 8002340:	1a80      	subs	r0, r0, r2
 8002342:	426d      	negs	r5, r5
 8002344:	1b40      	subs	r0, r0, r5
 8002346:	4283      	cmp	r3, r0
 8002348:	d100      	bne.n	800234c <__aeabi_ddiv+0x348>
 800234a:	e10f      	b.n	800256c <__aeabi_ddiv+0x568>
 800234c:	9902      	ldr	r1, [sp, #8]
 800234e:	f7fd ff85 	bl	800025c <__aeabi_uidivmod>
 8002352:	9a03      	ldr	r2, [sp, #12]
 8002354:	040b      	lsls	r3, r1, #16
 8002356:	4342      	muls	r2, r0
 8002358:	0c21      	lsrs	r1, r4, #16
 800235a:	0005      	movs	r5, r0
 800235c:	4319      	orrs	r1, r3
 800235e:	428a      	cmp	r2, r1
 8002360:	d900      	bls.n	8002364 <__aeabi_ddiv+0x360>
 8002362:	e0cb      	b.n	80024fc <__aeabi_ddiv+0x4f8>
 8002364:	1a88      	subs	r0, r1, r2
 8002366:	9902      	ldr	r1, [sp, #8]
 8002368:	f7fd ff78 	bl	800025c <__aeabi_uidivmod>
 800236c:	9a03      	ldr	r2, [sp, #12]
 800236e:	0424      	lsls	r4, r4, #16
 8002370:	4342      	muls	r2, r0
 8002372:	0409      	lsls	r1, r1, #16
 8002374:	0c24      	lsrs	r4, r4, #16
 8002376:	0003      	movs	r3, r0
 8002378:	430c      	orrs	r4, r1
 800237a:	42a2      	cmp	r2, r4
 800237c:	d900      	bls.n	8002380 <__aeabi_ddiv+0x37c>
 800237e:	e0ca      	b.n	8002516 <__aeabi_ddiv+0x512>
 8002380:	4641      	mov	r1, r8
 8002382:	1aa4      	subs	r4, r4, r2
 8002384:	042a      	lsls	r2, r5, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	9f04      	ldr	r7, [sp, #16]
 800238a:	0413      	lsls	r3, r2, #16
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	4359      	muls	r1, r3
 8002390:	4640      	mov	r0, r8
 8002392:	437b      	muls	r3, r7
 8002394:	469c      	mov	ip, r3
 8002396:	0c15      	lsrs	r5, r2, #16
 8002398:	4368      	muls	r0, r5
 800239a:	0c0b      	lsrs	r3, r1, #16
 800239c:	4484      	add	ip, r0
 800239e:	4463      	add	r3, ip
 80023a0:	437d      	muls	r5, r7
 80023a2:	4298      	cmp	r0, r3
 80023a4:	d903      	bls.n	80023ae <__aeabi_ddiv+0x3aa>
 80023a6:	2080      	movs	r0, #128	@ 0x80
 80023a8:	0240      	lsls	r0, r0, #9
 80023aa:	4684      	mov	ip, r0
 80023ac:	4465      	add	r5, ip
 80023ae:	0c18      	lsrs	r0, r3, #16
 80023b0:	0409      	lsls	r1, r1, #16
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	0c09      	lsrs	r1, r1, #16
 80023b6:	1940      	adds	r0, r0, r5
 80023b8:	185b      	adds	r3, r3, r1
 80023ba:	4284      	cmp	r4, r0
 80023bc:	d327      	bcc.n	800240e <__aeabi_ddiv+0x40a>
 80023be:	d023      	beq.n	8002408 <__aeabi_ddiv+0x404>
 80023c0:	2301      	movs	r3, #1
 80023c2:	0035      	movs	r5, r6
 80023c4:	431a      	orrs	r2, r3
 80023c6:	4b94      	ldr	r3, [pc, #592]	@ (8002618 <__aeabi_ddiv+0x614>)
 80023c8:	4453      	add	r3, sl
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	dd60      	ble.n	8002490 <__aeabi_ddiv+0x48c>
 80023ce:	0751      	lsls	r1, r2, #29
 80023d0:	d000      	beq.n	80023d4 <__aeabi_ddiv+0x3d0>
 80023d2:	e086      	b.n	80024e2 <__aeabi_ddiv+0x4de>
 80023d4:	002e      	movs	r6, r5
 80023d6:	08d1      	lsrs	r1, r2, #3
 80023d8:	465a      	mov	r2, fp
 80023da:	01d2      	lsls	r2, r2, #7
 80023dc:	d506      	bpl.n	80023ec <__aeabi_ddiv+0x3e8>
 80023de:	465a      	mov	r2, fp
 80023e0:	4b8e      	ldr	r3, [pc, #568]	@ (800261c <__aeabi_ddiv+0x618>)
 80023e2:	401a      	ands	r2, r3
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	4693      	mov	fp, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4453      	add	r3, sl
 80023ec:	4a8c      	ldr	r2, [pc, #560]	@ (8002620 <__aeabi_ddiv+0x61c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	dd00      	ble.n	80023f4 <__aeabi_ddiv+0x3f0>
 80023f2:	e680      	b.n	80020f6 <__aeabi_ddiv+0xf2>
 80023f4:	465a      	mov	r2, fp
 80023f6:	0752      	lsls	r2, r2, #29
 80023f8:	430a      	orrs	r2, r1
 80023fa:	4690      	mov	r8, r2
 80023fc:	465a      	mov	r2, fp
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	0254      	lsls	r4, r2, #9
 8002402:	0b24      	lsrs	r4, r4, #12
 8002404:	0d5b      	lsrs	r3, r3, #21
 8002406:	e669      	b.n	80020dc <__aeabi_ddiv+0xd8>
 8002408:	0035      	movs	r5, r6
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0db      	beq.n	80023c6 <__aeabi_ddiv+0x3c2>
 800240e:	9d00      	ldr	r5, [sp, #0]
 8002410:	1e51      	subs	r1, r2, #1
 8002412:	46ac      	mov	ip, r5
 8002414:	4464      	add	r4, ip
 8002416:	42ac      	cmp	r4, r5
 8002418:	d200      	bcs.n	800241c <__aeabi_ddiv+0x418>
 800241a:	e09e      	b.n	800255a <__aeabi_ddiv+0x556>
 800241c:	4284      	cmp	r4, r0
 800241e:	d200      	bcs.n	8002422 <__aeabi_ddiv+0x41e>
 8002420:	e0e1      	b.n	80025e6 <__aeabi_ddiv+0x5e2>
 8002422:	d100      	bne.n	8002426 <__aeabi_ddiv+0x422>
 8002424:	e0ee      	b.n	8002604 <__aeabi_ddiv+0x600>
 8002426:	000a      	movs	r2, r1
 8002428:	e7ca      	b.n	80023c0 <__aeabi_ddiv+0x3bc>
 800242a:	4542      	cmp	r2, r8
 800242c:	d900      	bls.n	8002430 <__aeabi_ddiv+0x42c>
 800242e:	e708      	b.n	8002242 <__aeabi_ddiv+0x23e>
 8002430:	464b      	mov	r3, r9
 8002432:	07dc      	lsls	r4, r3, #31
 8002434:	0858      	lsrs	r0, r3, #1
 8002436:	4643      	mov	r3, r8
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	431c      	orrs	r4, r3
 800243c:	4643      	mov	r3, r8
 800243e:	07dd      	lsls	r5, r3, #31
 8002440:	e706      	b.n	8002250 <__aeabi_ddiv+0x24c>
 8002442:	f001 fa61 	bl	8003908 <__clzsi2>
 8002446:	2315      	movs	r3, #21
 8002448:	469c      	mov	ip, r3
 800244a:	4484      	add	ip, r0
 800244c:	0002      	movs	r2, r0
 800244e:	4663      	mov	r3, ip
 8002450:	3220      	adds	r2, #32
 8002452:	2b1c      	cmp	r3, #28
 8002454:	dc00      	bgt.n	8002458 <__aeabi_ddiv+0x454>
 8002456:	e692      	b.n	800217e <__aeabi_ddiv+0x17a>
 8002458:	0023      	movs	r3, r4
 800245a:	3808      	subs	r0, #8
 800245c:	4083      	lsls	r3, r0
 800245e:	4699      	mov	r9, r3
 8002460:	2300      	movs	r3, #0
 8002462:	4698      	mov	r8, r3
 8002464:	e69a      	b.n	800219c <__aeabi_ddiv+0x198>
 8002466:	f001 fa4f 	bl	8003908 <__clzsi2>
 800246a:	0002      	movs	r2, r0
 800246c:	0003      	movs	r3, r0
 800246e:	3215      	adds	r2, #21
 8002470:	3320      	adds	r3, #32
 8002472:	2a1c      	cmp	r2, #28
 8002474:	dc00      	bgt.n	8002478 <__aeabi_ddiv+0x474>
 8002476:	e65f      	b.n	8002138 <__aeabi_ddiv+0x134>
 8002478:	9900      	ldr	r1, [sp, #0]
 800247a:	3808      	subs	r0, #8
 800247c:	4081      	lsls	r1, r0
 800247e:	2200      	movs	r2, #0
 8002480:	468b      	mov	fp, r1
 8002482:	e666      	b.n	8002152 <__aeabi_ddiv+0x14e>
 8002484:	2200      	movs	r2, #0
 8002486:	002e      	movs	r6, r5
 8002488:	2400      	movs	r4, #0
 800248a:	4690      	mov	r8, r2
 800248c:	4b65      	ldr	r3, [pc, #404]	@ (8002624 <__aeabi_ddiv+0x620>)
 800248e:	e625      	b.n	80020dc <__aeabi_ddiv+0xd8>
 8002490:	002e      	movs	r6, r5
 8002492:	2101      	movs	r1, #1
 8002494:	1ac9      	subs	r1, r1, r3
 8002496:	2938      	cmp	r1, #56	@ 0x38
 8002498:	dd00      	ble.n	800249c <__aeabi_ddiv+0x498>
 800249a:	e61b      	b.n	80020d4 <__aeabi_ddiv+0xd0>
 800249c:	291f      	cmp	r1, #31
 800249e:	dc7e      	bgt.n	800259e <__aeabi_ddiv+0x59a>
 80024a0:	4861      	ldr	r0, [pc, #388]	@ (8002628 <__aeabi_ddiv+0x624>)
 80024a2:	0014      	movs	r4, r2
 80024a4:	4450      	add	r0, sl
 80024a6:	465b      	mov	r3, fp
 80024a8:	4082      	lsls	r2, r0
 80024aa:	4083      	lsls	r3, r0
 80024ac:	40cc      	lsrs	r4, r1
 80024ae:	1e50      	subs	r0, r2, #1
 80024b0:	4182      	sbcs	r2, r0
 80024b2:	4323      	orrs	r3, r4
 80024b4:	431a      	orrs	r2, r3
 80024b6:	465b      	mov	r3, fp
 80024b8:	40cb      	lsrs	r3, r1
 80024ba:	0751      	lsls	r1, r2, #29
 80024bc:	d009      	beq.n	80024d2 <__aeabi_ddiv+0x4ce>
 80024be:	210f      	movs	r1, #15
 80024c0:	4011      	ands	r1, r2
 80024c2:	2904      	cmp	r1, #4
 80024c4:	d005      	beq.n	80024d2 <__aeabi_ddiv+0x4ce>
 80024c6:	1d11      	adds	r1, r2, #4
 80024c8:	4291      	cmp	r1, r2
 80024ca:	4192      	sbcs	r2, r2
 80024cc:	4252      	negs	r2, r2
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	000a      	movs	r2, r1
 80024d2:	0219      	lsls	r1, r3, #8
 80024d4:	d400      	bmi.n	80024d8 <__aeabi_ddiv+0x4d4>
 80024d6:	e09b      	b.n	8002610 <__aeabi_ddiv+0x60c>
 80024d8:	2200      	movs	r2, #0
 80024da:	2301      	movs	r3, #1
 80024dc:	2400      	movs	r4, #0
 80024de:	4690      	mov	r8, r2
 80024e0:	e5fc      	b.n	80020dc <__aeabi_ddiv+0xd8>
 80024e2:	210f      	movs	r1, #15
 80024e4:	4011      	ands	r1, r2
 80024e6:	2904      	cmp	r1, #4
 80024e8:	d100      	bne.n	80024ec <__aeabi_ddiv+0x4e8>
 80024ea:	e773      	b.n	80023d4 <__aeabi_ddiv+0x3d0>
 80024ec:	1d11      	adds	r1, r2, #4
 80024ee:	4291      	cmp	r1, r2
 80024f0:	4192      	sbcs	r2, r2
 80024f2:	4252      	negs	r2, r2
 80024f4:	002e      	movs	r6, r5
 80024f6:	08c9      	lsrs	r1, r1, #3
 80024f8:	4493      	add	fp, r2
 80024fa:	e76d      	b.n	80023d8 <__aeabi_ddiv+0x3d4>
 80024fc:	9b00      	ldr	r3, [sp, #0]
 80024fe:	3d01      	subs	r5, #1
 8002500:	469c      	mov	ip, r3
 8002502:	4461      	add	r1, ip
 8002504:	428b      	cmp	r3, r1
 8002506:	d900      	bls.n	800250a <__aeabi_ddiv+0x506>
 8002508:	e72c      	b.n	8002364 <__aeabi_ddiv+0x360>
 800250a:	428a      	cmp	r2, r1
 800250c:	d800      	bhi.n	8002510 <__aeabi_ddiv+0x50c>
 800250e:	e729      	b.n	8002364 <__aeabi_ddiv+0x360>
 8002510:	1e85      	subs	r5, r0, #2
 8002512:	4461      	add	r1, ip
 8002514:	e726      	b.n	8002364 <__aeabi_ddiv+0x360>
 8002516:	9900      	ldr	r1, [sp, #0]
 8002518:	3b01      	subs	r3, #1
 800251a:	468c      	mov	ip, r1
 800251c:	4464      	add	r4, ip
 800251e:	42a1      	cmp	r1, r4
 8002520:	d900      	bls.n	8002524 <__aeabi_ddiv+0x520>
 8002522:	e72d      	b.n	8002380 <__aeabi_ddiv+0x37c>
 8002524:	42a2      	cmp	r2, r4
 8002526:	d800      	bhi.n	800252a <__aeabi_ddiv+0x526>
 8002528:	e72a      	b.n	8002380 <__aeabi_ddiv+0x37c>
 800252a:	1e83      	subs	r3, r0, #2
 800252c:	4464      	add	r4, ip
 800252e:	e727      	b.n	8002380 <__aeabi_ddiv+0x37c>
 8002530:	4287      	cmp	r7, r0
 8002532:	d000      	beq.n	8002536 <__aeabi_ddiv+0x532>
 8002534:	e6fe      	b.n	8002334 <__aeabi_ddiv+0x330>
 8002536:	45a9      	cmp	r9, r5
 8002538:	d900      	bls.n	800253c <__aeabi_ddiv+0x538>
 800253a:	e6fb      	b.n	8002334 <__aeabi_ddiv+0x330>
 800253c:	e6f5      	b.n	800232a <__aeabi_ddiv+0x326>
 800253e:	42a2      	cmp	r2, r4
 8002540:	d800      	bhi.n	8002544 <__aeabi_ddiv+0x540>
 8002542:	e6b9      	b.n	80022b8 <__aeabi_ddiv+0x2b4>
 8002544:	1e83      	subs	r3, r0, #2
 8002546:	4464      	add	r4, ip
 8002548:	e6b6      	b.n	80022b8 <__aeabi_ddiv+0x2b4>
 800254a:	428a      	cmp	r2, r1
 800254c:	d800      	bhi.n	8002550 <__aeabi_ddiv+0x54c>
 800254e:	e69f      	b.n	8002290 <__aeabi_ddiv+0x28c>
 8002550:	46bc      	mov	ip, r7
 8002552:	1e83      	subs	r3, r0, #2
 8002554:	4698      	mov	r8, r3
 8002556:	4461      	add	r1, ip
 8002558:	e69a      	b.n	8002290 <__aeabi_ddiv+0x28c>
 800255a:	000a      	movs	r2, r1
 800255c:	4284      	cmp	r4, r0
 800255e:	d000      	beq.n	8002562 <__aeabi_ddiv+0x55e>
 8002560:	e72e      	b.n	80023c0 <__aeabi_ddiv+0x3bc>
 8002562:	454b      	cmp	r3, r9
 8002564:	d000      	beq.n	8002568 <__aeabi_ddiv+0x564>
 8002566:	e72b      	b.n	80023c0 <__aeabi_ddiv+0x3bc>
 8002568:	0035      	movs	r5, r6
 800256a:	e72c      	b.n	80023c6 <__aeabi_ddiv+0x3c2>
 800256c:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <__aeabi_ddiv+0x614>)
 800256e:	4a2f      	ldr	r2, [pc, #188]	@ (800262c <__aeabi_ddiv+0x628>)
 8002570:	4453      	add	r3, sl
 8002572:	4592      	cmp	sl, r2
 8002574:	db43      	blt.n	80025fe <__aeabi_ddiv+0x5fa>
 8002576:	2201      	movs	r2, #1
 8002578:	2100      	movs	r1, #0
 800257a:	4493      	add	fp, r2
 800257c:	e72c      	b.n	80023d8 <__aeabi_ddiv+0x3d4>
 800257e:	42ac      	cmp	r4, r5
 8002580:	d800      	bhi.n	8002584 <__aeabi_ddiv+0x580>
 8002582:	e6d7      	b.n	8002334 <__aeabi_ddiv+0x330>
 8002584:	2302      	movs	r3, #2
 8002586:	425b      	negs	r3, r3
 8002588:	469c      	mov	ip, r3
 800258a:	9900      	ldr	r1, [sp, #0]
 800258c:	444d      	add	r5, r9
 800258e:	454d      	cmp	r5, r9
 8002590:	419b      	sbcs	r3, r3
 8002592:	44e3      	add	fp, ip
 8002594:	468c      	mov	ip, r1
 8002596:	425b      	negs	r3, r3
 8002598:	4463      	add	r3, ip
 800259a:	18c0      	adds	r0, r0, r3
 800259c:	e6cc      	b.n	8002338 <__aeabi_ddiv+0x334>
 800259e:	201f      	movs	r0, #31
 80025a0:	4240      	negs	r0, r0
 80025a2:	1ac3      	subs	r3, r0, r3
 80025a4:	4658      	mov	r0, fp
 80025a6:	40d8      	lsrs	r0, r3
 80025a8:	2920      	cmp	r1, #32
 80025aa:	d004      	beq.n	80025b6 <__aeabi_ddiv+0x5b2>
 80025ac:	4659      	mov	r1, fp
 80025ae:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <__aeabi_ddiv+0x62c>)
 80025b0:	4453      	add	r3, sl
 80025b2:	4099      	lsls	r1, r3
 80025b4:	430a      	orrs	r2, r1
 80025b6:	1e53      	subs	r3, r2, #1
 80025b8:	419a      	sbcs	r2, r3
 80025ba:	2307      	movs	r3, #7
 80025bc:	0019      	movs	r1, r3
 80025be:	4302      	orrs	r2, r0
 80025c0:	2400      	movs	r4, #0
 80025c2:	4011      	ands	r1, r2
 80025c4:	4213      	tst	r3, r2
 80025c6:	d009      	beq.n	80025dc <__aeabi_ddiv+0x5d8>
 80025c8:	3308      	adds	r3, #8
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d01d      	beq.n	800260c <__aeabi_ddiv+0x608>
 80025d0:	1d13      	adds	r3, r2, #4
 80025d2:	4293      	cmp	r3, r2
 80025d4:	4189      	sbcs	r1, r1
 80025d6:	001a      	movs	r2, r3
 80025d8:	4249      	negs	r1, r1
 80025da:	0749      	lsls	r1, r1, #29
 80025dc:	08d2      	lsrs	r2, r2, #3
 80025de:	430a      	orrs	r2, r1
 80025e0:	4690      	mov	r8, r2
 80025e2:	2300      	movs	r3, #0
 80025e4:	e57a      	b.n	80020dc <__aeabi_ddiv+0xd8>
 80025e6:	4649      	mov	r1, r9
 80025e8:	9f00      	ldr	r7, [sp, #0]
 80025ea:	004d      	lsls	r5, r1, #1
 80025ec:	454d      	cmp	r5, r9
 80025ee:	4189      	sbcs	r1, r1
 80025f0:	46bc      	mov	ip, r7
 80025f2:	4249      	negs	r1, r1
 80025f4:	4461      	add	r1, ip
 80025f6:	46a9      	mov	r9, r5
 80025f8:	3a02      	subs	r2, #2
 80025fa:	1864      	adds	r4, r4, r1
 80025fc:	e7ae      	b.n	800255c <__aeabi_ddiv+0x558>
 80025fe:	2201      	movs	r2, #1
 8002600:	4252      	negs	r2, r2
 8002602:	e746      	b.n	8002492 <__aeabi_ddiv+0x48e>
 8002604:	4599      	cmp	r9, r3
 8002606:	d3ee      	bcc.n	80025e6 <__aeabi_ddiv+0x5e2>
 8002608:	000a      	movs	r2, r1
 800260a:	e7aa      	b.n	8002562 <__aeabi_ddiv+0x55e>
 800260c:	2100      	movs	r1, #0
 800260e:	e7e5      	b.n	80025dc <__aeabi_ddiv+0x5d8>
 8002610:	0759      	lsls	r1, r3, #29
 8002612:	025b      	lsls	r3, r3, #9
 8002614:	0b1c      	lsrs	r4, r3, #12
 8002616:	e7e1      	b.n	80025dc <__aeabi_ddiv+0x5d8>
 8002618:	000003ff 	.word	0x000003ff
 800261c:	feffffff 	.word	0xfeffffff
 8002620:	000007fe 	.word	0x000007fe
 8002624:	000007ff 	.word	0x000007ff
 8002628:	0000041e 	.word	0x0000041e
 800262c:	fffffc02 	.word	0xfffffc02
 8002630:	0000043e 	.word	0x0000043e

08002634 <__eqdf2>:
 8002634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002636:	4657      	mov	r7, sl
 8002638:	46de      	mov	lr, fp
 800263a:	464e      	mov	r6, r9
 800263c:	4645      	mov	r5, r8
 800263e:	b5e0      	push	{r5, r6, r7, lr}
 8002640:	000d      	movs	r5, r1
 8002642:	0004      	movs	r4, r0
 8002644:	0fe8      	lsrs	r0, r5, #31
 8002646:	4683      	mov	fp, r0
 8002648:	0309      	lsls	r1, r1, #12
 800264a:	0fd8      	lsrs	r0, r3, #31
 800264c:	0b09      	lsrs	r1, r1, #12
 800264e:	4682      	mov	sl, r0
 8002650:	4819      	ldr	r0, [pc, #100]	@ (80026b8 <__eqdf2+0x84>)
 8002652:	468c      	mov	ip, r1
 8002654:	031f      	lsls	r7, r3, #12
 8002656:	0069      	lsls	r1, r5, #1
 8002658:	005e      	lsls	r6, r3, #1
 800265a:	0d49      	lsrs	r1, r1, #21
 800265c:	0b3f      	lsrs	r7, r7, #12
 800265e:	0d76      	lsrs	r6, r6, #21
 8002660:	4281      	cmp	r1, r0
 8002662:	d018      	beq.n	8002696 <__eqdf2+0x62>
 8002664:	4286      	cmp	r6, r0
 8002666:	d00f      	beq.n	8002688 <__eqdf2+0x54>
 8002668:	2001      	movs	r0, #1
 800266a:	42b1      	cmp	r1, r6
 800266c:	d10d      	bne.n	800268a <__eqdf2+0x56>
 800266e:	45bc      	cmp	ip, r7
 8002670:	d10b      	bne.n	800268a <__eqdf2+0x56>
 8002672:	4294      	cmp	r4, r2
 8002674:	d109      	bne.n	800268a <__eqdf2+0x56>
 8002676:	45d3      	cmp	fp, sl
 8002678:	d01c      	beq.n	80026b4 <__eqdf2+0x80>
 800267a:	2900      	cmp	r1, #0
 800267c:	d105      	bne.n	800268a <__eqdf2+0x56>
 800267e:	4660      	mov	r0, ip
 8002680:	4320      	orrs	r0, r4
 8002682:	1e43      	subs	r3, r0, #1
 8002684:	4198      	sbcs	r0, r3
 8002686:	e000      	b.n	800268a <__eqdf2+0x56>
 8002688:	2001      	movs	r0, #1
 800268a:	bcf0      	pop	{r4, r5, r6, r7}
 800268c:	46bb      	mov	fp, r7
 800268e:	46b2      	mov	sl, r6
 8002690:	46a9      	mov	r9, r5
 8002692:	46a0      	mov	r8, r4
 8002694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002696:	2001      	movs	r0, #1
 8002698:	428e      	cmp	r6, r1
 800269a:	d1f6      	bne.n	800268a <__eqdf2+0x56>
 800269c:	4661      	mov	r1, ip
 800269e:	4339      	orrs	r1, r7
 80026a0:	000f      	movs	r7, r1
 80026a2:	4317      	orrs	r7, r2
 80026a4:	4327      	orrs	r7, r4
 80026a6:	d1f0      	bne.n	800268a <__eqdf2+0x56>
 80026a8:	465b      	mov	r3, fp
 80026aa:	4652      	mov	r2, sl
 80026ac:	1a98      	subs	r0, r3, r2
 80026ae:	1e43      	subs	r3, r0, #1
 80026b0:	4198      	sbcs	r0, r3
 80026b2:	e7ea      	b.n	800268a <__eqdf2+0x56>
 80026b4:	2000      	movs	r0, #0
 80026b6:	e7e8      	b.n	800268a <__eqdf2+0x56>
 80026b8:	000007ff 	.word	0x000007ff

080026bc <__gedf2>:
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026be:	4657      	mov	r7, sl
 80026c0:	464e      	mov	r6, r9
 80026c2:	4645      	mov	r5, r8
 80026c4:	46de      	mov	lr, fp
 80026c6:	b5e0      	push	{r5, r6, r7, lr}
 80026c8:	000d      	movs	r5, r1
 80026ca:	030e      	lsls	r6, r1, #12
 80026cc:	0049      	lsls	r1, r1, #1
 80026ce:	0d49      	lsrs	r1, r1, #21
 80026d0:	468a      	mov	sl, r1
 80026d2:	0fdf      	lsrs	r7, r3, #31
 80026d4:	0fe9      	lsrs	r1, r5, #31
 80026d6:	46bc      	mov	ip, r7
 80026d8:	b083      	sub	sp, #12
 80026da:	4f2f      	ldr	r7, [pc, #188]	@ (8002798 <__gedf2+0xdc>)
 80026dc:	0004      	movs	r4, r0
 80026de:	4680      	mov	r8, r0
 80026e0:	9101      	str	r1, [sp, #4]
 80026e2:	0058      	lsls	r0, r3, #1
 80026e4:	0319      	lsls	r1, r3, #12
 80026e6:	4691      	mov	r9, r2
 80026e8:	0b36      	lsrs	r6, r6, #12
 80026ea:	0b09      	lsrs	r1, r1, #12
 80026ec:	0d40      	lsrs	r0, r0, #21
 80026ee:	45ba      	cmp	sl, r7
 80026f0:	d01d      	beq.n	800272e <__gedf2+0x72>
 80026f2:	42b8      	cmp	r0, r7
 80026f4:	d00d      	beq.n	8002712 <__gedf2+0x56>
 80026f6:	4657      	mov	r7, sl
 80026f8:	2f00      	cmp	r7, #0
 80026fa:	d12a      	bne.n	8002752 <__gedf2+0x96>
 80026fc:	4334      	orrs	r4, r6
 80026fe:	2800      	cmp	r0, #0
 8002700:	d124      	bne.n	800274c <__gedf2+0x90>
 8002702:	430a      	orrs	r2, r1
 8002704:	d036      	beq.n	8002774 <__gedf2+0xb8>
 8002706:	2c00      	cmp	r4, #0
 8002708:	d141      	bne.n	800278e <__gedf2+0xd2>
 800270a:	4663      	mov	r3, ip
 800270c:	0058      	lsls	r0, r3, #1
 800270e:	3801      	subs	r0, #1
 8002710:	e015      	b.n	800273e <__gedf2+0x82>
 8002712:	4311      	orrs	r1, r2
 8002714:	d138      	bne.n	8002788 <__gedf2+0xcc>
 8002716:	4653      	mov	r3, sl
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <__gedf2+0x64>
 800271c:	4326      	orrs	r6, r4
 800271e:	d0f4      	beq.n	800270a <__gedf2+0x4e>
 8002720:	9b01      	ldr	r3, [sp, #4]
 8002722:	4563      	cmp	r3, ip
 8002724:	d107      	bne.n	8002736 <__gedf2+0x7a>
 8002726:	9b01      	ldr	r3, [sp, #4]
 8002728:	0058      	lsls	r0, r3, #1
 800272a:	3801      	subs	r0, #1
 800272c:	e007      	b.n	800273e <__gedf2+0x82>
 800272e:	4326      	orrs	r6, r4
 8002730:	d12a      	bne.n	8002788 <__gedf2+0xcc>
 8002732:	4550      	cmp	r0, sl
 8002734:	d021      	beq.n	800277a <__gedf2+0xbe>
 8002736:	2001      	movs	r0, #1
 8002738:	9b01      	ldr	r3, [sp, #4]
 800273a:	425f      	negs	r7, r3
 800273c:	4338      	orrs	r0, r7
 800273e:	b003      	add	sp, #12
 8002740:	bcf0      	pop	{r4, r5, r6, r7}
 8002742:	46bb      	mov	fp, r7
 8002744:	46b2      	mov	sl, r6
 8002746:	46a9      	mov	r9, r5
 8002748:	46a0      	mov	r8, r4
 800274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274c:	2c00      	cmp	r4, #0
 800274e:	d0dc      	beq.n	800270a <__gedf2+0x4e>
 8002750:	e7e6      	b.n	8002720 <__gedf2+0x64>
 8002752:	2800      	cmp	r0, #0
 8002754:	d0ef      	beq.n	8002736 <__gedf2+0x7a>
 8002756:	9b01      	ldr	r3, [sp, #4]
 8002758:	4563      	cmp	r3, ip
 800275a:	d1ec      	bne.n	8002736 <__gedf2+0x7a>
 800275c:	4582      	cmp	sl, r0
 800275e:	dcea      	bgt.n	8002736 <__gedf2+0x7a>
 8002760:	dbe1      	blt.n	8002726 <__gedf2+0x6a>
 8002762:	428e      	cmp	r6, r1
 8002764:	d8e7      	bhi.n	8002736 <__gedf2+0x7a>
 8002766:	d1de      	bne.n	8002726 <__gedf2+0x6a>
 8002768:	45c8      	cmp	r8, r9
 800276a:	d8e4      	bhi.n	8002736 <__gedf2+0x7a>
 800276c:	2000      	movs	r0, #0
 800276e:	45c8      	cmp	r8, r9
 8002770:	d2e5      	bcs.n	800273e <__gedf2+0x82>
 8002772:	e7d8      	b.n	8002726 <__gedf2+0x6a>
 8002774:	2c00      	cmp	r4, #0
 8002776:	d0e2      	beq.n	800273e <__gedf2+0x82>
 8002778:	e7dd      	b.n	8002736 <__gedf2+0x7a>
 800277a:	4311      	orrs	r1, r2
 800277c:	d104      	bne.n	8002788 <__gedf2+0xcc>
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	4563      	cmp	r3, ip
 8002782:	d1d8      	bne.n	8002736 <__gedf2+0x7a>
 8002784:	2000      	movs	r0, #0
 8002786:	e7da      	b.n	800273e <__gedf2+0x82>
 8002788:	2002      	movs	r0, #2
 800278a:	4240      	negs	r0, r0
 800278c:	e7d7      	b.n	800273e <__gedf2+0x82>
 800278e:	9b01      	ldr	r3, [sp, #4]
 8002790:	4563      	cmp	r3, ip
 8002792:	d0e6      	beq.n	8002762 <__gedf2+0xa6>
 8002794:	e7cf      	b.n	8002736 <__gedf2+0x7a>
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	000007ff 	.word	0x000007ff

0800279c <__ledf2>:
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	4657      	mov	r7, sl
 80027a0:	464e      	mov	r6, r9
 80027a2:	4645      	mov	r5, r8
 80027a4:	46de      	mov	lr, fp
 80027a6:	b5e0      	push	{r5, r6, r7, lr}
 80027a8:	000d      	movs	r5, r1
 80027aa:	030e      	lsls	r6, r1, #12
 80027ac:	0049      	lsls	r1, r1, #1
 80027ae:	0d49      	lsrs	r1, r1, #21
 80027b0:	468a      	mov	sl, r1
 80027b2:	0fdf      	lsrs	r7, r3, #31
 80027b4:	0fe9      	lsrs	r1, r5, #31
 80027b6:	46bc      	mov	ip, r7
 80027b8:	b083      	sub	sp, #12
 80027ba:	4f2e      	ldr	r7, [pc, #184]	@ (8002874 <__ledf2+0xd8>)
 80027bc:	0004      	movs	r4, r0
 80027be:	4680      	mov	r8, r0
 80027c0:	9101      	str	r1, [sp, #4]
 80027c2:	0058      	lsls	r0, r3, #1
 80027c4:	0319      	lsls	r1, r3, #12
 80027c6:	4691      	mov	r9, r2
 80027c8:	0b36      	lsrs	r6, r6, #12
 80027ca:	0b09      	lsrs	r1, r1, #12
 80027cc:	0d40      	lsrs	r0, r0, #21
 80027ce:	45ba      	cmp	sl, r7
 80027d0:	d01e      	beq.n	8002810 <__ledf2+0x74>
 80027d2:	42b8      	cmp	r0, r7
 80027d4:	d00d      	beq.n	80027f2 <__ledf2+0x56>
 80027d6:	4657      	mov	r7, sl
 80027d8:	2f00      	cmp	r7, #0
 80027da:	d127      	bne.n	800282c <__ledf2+0x90>
 80027dc:	4334      	orrs	r4, r6
 80027de:	2800      	cmp	r0, #0
 80027e0:	d133      	bne.n	800284a <__ledf2+0xae>
 80027e2:	430a      	orrs	r2, r1
 80027e4:	d034      	beq.n	8002850 <__ledf2+0xb4>
 80027e6:	2c00      	cmp	r4, #0
 80027e8:	d140      	bne.n	800286c <__ledf2+0xd0>
 80027ea:	4663      	mov	r3, ip
 80027ec:	0058      	lsls	r0, r3, #1
 80027ee:	3801      	subs	r0, #1
 80027f0:	e015      	b.n	800281e <__ledf2+0x82>
 80027f2:	4311      	orrs	r1, r2
 80027f4:	d112      	bne.n	800281c <__ledf2+0x80>
 80027f6:	4653      	mov	r3, sl
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <__ledf2+0x64>
 80027fc:	4326      	orrs	r6, r4
 80027fe:	d0f4      	beq.n	80027ea <__ledf2+0x4e>
 8002800:	9b01      	ldr	r3, [sp, #4]
 8002802:	4563      	cmp	r3, ip
 8002804:	d01d      	beq.n	8002842 <__ledf2+0xa6>
 8002806:	2001      	movs	r0, #1
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	425f      	negs	r7, r3
 800280c:	4338      	orrs	r0, r7
 800280e:	e006      	b.n	800281e <__ledf2+0x82>
 8002810:	4326      	orrs	r6, r4
 8002812:	d103      	bne.n	800281c <__ledf2+0x80>
 8002814:	4550      	cmp	r0, sl
 8002816:	d1f6      	bne.n	8002806 <__ledf2+0x6a>
 8002818:	4311      	orrs	r1, r2
 800281a:	d01c      	beq.n	8002856 <__ledf2+0xba>
 800281c:	2002      	movs	r0, #2
 800281e:	b003      	add	sp, #12
 8002820:	bcf0      	pop	{r4, r5, r6, r7}
 8002822:	46bb      	mov	fp, r7
 8002824:	46b2      	mov	sl, r6
 8002826:	46a9      	mov	r9, r5
 8002828:	46a0      	mov	r8, r4
 800282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800282c:	2800      	cmp	r0, #0
 800282e:	d0ea      	beq.n	8002806 <__ledf2+0x6a>
 8002830:	9b01      	ldr	r3, [sp, #4]
 8002832:	4563      	cmp	r3, ip
 8002834:	d1e7      	bne.n	8002806 <__ledf2+0x6a>
 8002836:	4582      	cmp	sl, r0
 8002838:	dce5      	bgt.n	8002806 <__ledf2+0x6a>
 800283a:	db02      	blt.n	8002842 <__ledf2+0xa6>
 800283c:	428e      	cmp	r6, r1
 800283e:	d8e2      	bhi.n	8002806 <__ledf2+0x6a>
 8002840:	d00e      	beq.n	8002860 <__ledf2+0xc4>
 8002842:	9b01      	ldr	r3, [sp, #4]
 8002844:	0058      	lsls	r0, r3, #1
 8002846:	3801      	subs	r0, #1
 8002848:	e7e9      	b.n	800281e <__ledf2+0x82>
 800284a:	2c00      	cmp	r4, #0
 800284c:	d0cd      	beq.n	80027ea <__ledf2+0x4e>
 800284e:	e7d7      	b.n	8002800 <__ledf2+0x64>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e4      	beq.n	800281e <__ledf2+0x82>
 8002854:	e7d7      	b.n	8002806 <__ledf2+0x6a>
 8002856:	9b01      	ldr	r3, [sp, #4]
 8002858:	2000      	movs	r0, #0
 800285a:	4563      	cmp	r3, ip
 800285c:	d0df      	beq.n	800281e <__ledf2+0x82>
 800285e:	e7d2      	b.n	8002806 <__ledf2+0x6a>
 8002860:	45c8      	cmp	r8, r9
 8002862:	d8d0      	bhi.n	8002806 <__ledf2+0x6a>
 8002864:	2000      	movs	r0, #0
 8002866:	45c8      	cmp	r8, r9
 8002868:	d2d9      	bcs.n	800281e <__ledf2+0x82>
 800286a:	e7ea      	b.n	8002842 <__ledf2+0xa6>
 800286c:	9b01      	ldr	r3, [sp, #4]
 800286e:	4563      	cmp	r3, ip
 8002870:	d0e4      	beq.n	800283c <__ledf2+0xa0>
 8002872:	e7c8      	b.n	8002806 <__ledf2+0x6a>
 8002874:	000007ff 	.word	0x000007ff

08002878 <__aeabi_dmul>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	46de      	mov	lr, fp
 8002880:	4645      	mov	r5, r8
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	001f      	movs	r7, r3
 8002886:	030b      	lsls	r3, r1, #12
 8002888:	0b1b      	lsrs	r3, r3, #12
 800288a:	0016      	movs	r6, r2
 800288c:	469a      	mov	sl, r3
 800288e:	0fca      	lsrs	r2, r1, #31
 8002890:	004b      	lsls	r3, r1, #1
 8002892:	0004      	movs	r4, r0
 8002894:	4691      	mov	r9, r2
 8002896:	b085      	sub	sp, #20
 8002898:	0d5b      	lsrs	r3, r3, #21
 800289a:	d100      	bne.n	800289e <__aeabi_dmul+0x26>
 800289c:	e1cf      	b.n	8002c3e <__aeabi_dmul+0x3c6>
 800289e:	4acd      	ldr	r2, [pc, #820]	@ (8002bd4 <__aeabi_dmul+0x35c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d055      	beq.n	8002950 <__aeabi_dmul+0xd8>
 80028a4:	4651      	mov	r1, sl
 80028a6:	0f42      	lsrs	r2, r0, #29
 80028a8:	00c9      	lsls	r1, r1, #3
 80028aa:	430a      	orrs	r2, r1
 80028ac:	2180      	movs	r1, #128	@ 0x80
 80028ae:	0409      	lsls	r1, r1, #16
 80028b0:	4311      	orrs	r1, r2
 80028b2:	00c2      	lsls	r2, r0, #3
 80028b4:	4690      	mov	r8, r2
 80028b6:	4ac8      	ldr	r2, [pc, #800]	@ (8002bd8 <__aeabi_dmul+0x360>)
 80028b8:	468a      	mov	sl, r1
 80028ba:	4693      	mov	fp, r2
 80028bc:	449b      	add	fp, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	2500      	movs	r5, #0
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	033c      	lsls	r4, r7, #12
 80028c6:	007b      	lsls	r3, r7, #1
 80028c8:	0ffa      	lsrs	r2, r7, #31
 80028ca:	9601      	str	r6, [sp, #4]
 80028cc:	0b24      	lsrs	r4, r4, #12
 80028ce:	0d5b      	lsrs	r3, r3, #21
 80028d0:	9200      	str	r2, [sp, #0]
 80028d2:	d100      	bne.n	80028d6 <__aeabi_dmul+0x5e>
 80028d4:	e188      	b.n	8002be8 <__aeabi_dmul+0x370>
 80028d6:	4abf      	ldr	r2, [pc, #764]	@ (8002bd4 <__aeabi_dmul+0x35c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d100      	bne.n	80028de <__aeabi_dmul+0x66>
 80028dc:	e092      	b.n	8002a04 <__aeabi_dmul+0x18c>
 80028de:	4abe      	ldr	r2, [pc, #760]	@ (8002bd8 <__aeabi_dmul+0x360>)
 80028e0:	4694      	mov	ip, r2
 80028e2:	4463      	add	r3, ip
 80028e4:	449b      	add	fp, r3
 80028e6:	2d0a      	cmp	r5, #10
 80028e8:	dc42      	bgt.n	8002970 <__aeabi_dmul+0xf8>
 80028ea:	00e4      	lsls	r4, r4, #3
 80028ec:	0f73      	lsrs	r3, r6, #29
 80028ee:	4323      	orrs	r3, r4
 80028f0:	2480      	movs	r4, #128	@ 0x80
 80028f2:	4649      	mov	r1, r9
 80028f4:	0424      	lsls	r4, r4, #16
 80028f6:	431c      	orrs	r4, r3
 80028f8:	00f3      	lsls	r3, r6, #3
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	9b00      	ldr	r3, [sp, #0]
 80028fe:	2000      	movs	r0, #0
 8002900:	4059      	eors	r1, r3
 8002902:	b2cb      	uxtb	r3, r1
 8002904:	9303      	str	r3, [sp, #12]
 8002906:	2d02      	cmp	r5, #2
 8002908:	dc00      	bgt.n	800290c <__aeabi_dmul+0x94>
 800290a:	e094      	b.n	8002a36 <__aeabi_dmul+0x1be>
 800290c:	2301      	movs	r3, #1
 800290e:	40ab      	lsls	r3, r5
 8002910:	001d      	movs	r5, r3
 8002912:	23a6      	movs	r3, #166	@ 0xa6
 8002914:	002a      	movs	r2, r5
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	401a      	ands	r2, r3
 800291a:	421d      	tst	r5, r3
 800291c:	d000      	beq.n	8002920 <__aeabi_dmul+0xa8>
 800291e:	e229      	b.n	8002d74 <__aeabi_dmul+0x4fc>
 8002920:	2390      	movs	r3, #144	@ 0x90
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	421d      	tst	r5, r3
 8002926:	d100      	bne.n	800292a <__aeabi_dmul+0xb2>
 8002928:	e24d      	b.n	8002dc6 <__aeabi_dmul+0x54e>
 800292a:	2300      	movs	r3, #0
 800292c:	2480      	movs	r4, #128	@ 0x80
 800292e:	4699      	mov	r9, r3
 8002930:	0324      	lsls	r4, r4, #12
 8002932:	4ba8      	ldr	r3, [pc, #672]	@ (8002bd4 <__aeabi_dmul+0x35c>)
 8002934:	0010      	movs	r0, r2
 8002936:	464a      	mov	r2, r9
 8002938:	051b      	lsls	r3, r3, #20
 800293a:	4323      	orrs	r3, r4
 800293c:	07d2      	lsls	r2, r2, #31
 800293e:	4313      	orrs	r3, r2
 8002940:	0019      	movs	r1, r3
 8002942:	b005      	add	sp, #20
 8002944:	bcf0      	pop	{r4, r5, r6, r7}
 8002946:	46bb      	mov	fp, r7
 8002948:	46b2      	mov	sl, r6
 800294a:	46a9      	mov	r9, r5
 800294c:	46a0      	mov	r8, r4
 800294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002950:	4652      	mov	r2, sl
 8002952:	4302      	orrs	r2, r0
 8002954:	4690      	mov	r8, r2
 8002956:	d000      	beq.n	800295a <__aeabi_dmul+0xe2>
 8002958:	e1ac      	b.n	8002cb4 <__aeabi_dmul+0x43c>
 800295a:	469b      	mov	fp, r3
 800295c:	2302      	movs	r3, #2
 800295e:	4692      	mov	sl, r2
 8002960:	2508      	movs	r5, #8
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	e7ae      	b.n	80028c4 <__aeabi_dmul+0x4c>
 8002966:	9b00      	ldr	r3, [sp, #0]
 8002968:	46a2      	mov	sl, r4
 800296a:	4699      	mov	r9, r3
 800296c:	9b01      	ldr	r3, [sp, #4]
 800296e:	4698      	mov	r8, r3
 8002970:	9b02      	ldr	r3, [sp, #8]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d100      	bne.n	8002978 <__aeabi_dmul+0x100>
 8002976:	e1ca      	b.n	8002d0e <__aeabi_dmul+0x496>
 8002978:	2b03      	cmp	r3, #3
 800297a:	d100      	bne.n	800297e <__aeabi_dmul+0x106>
 800297c:	e192      	b.n	8002ca4 <__aeabi_dmul+0x42c>
 800297e:	2b01      	cmp	r3, #1
 8002980:	d110      	bne.n	80029a4 <__aeabi_dmul+0x12c>
 8002982:	2300      	movs	r3, #0
 8002984:	2400      	movs	r4, #0
 8002986:	2200      	movs	r2, #0
 8002988:	e7d4      	b.n	8002934 <__aeabi_dmul+0xbc>
 800298a:	2201      	movs	r2, #1
 800298c:	087b      	lsrs	r3, r7, #1
 800298e:	403a      	ands	r2, r7
 8002990:	4313      	orrs	r3, r2
 8002992:	4652      	mov	r2, sl
 8002994:	07d2      	lsls	r2, r2, #31
 8002996:	4313      	orrs	r3, r2
 8002998:	4698      	mov	r8, r3
 800299a:	4653      	mov	r3, sl
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	469a      	mov	sl, r3
 80029a0:	9b03      	ldr	r3, [sp, #12]
 80029a2:	4699      	mov	r9, r3
 80029a4:	465b      	mov	r3, fp
 80029a6:	1c58      	adds	r0, r3, #1
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	445b      	add	r3, fp
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dc00      	bgt.n	80029b4 <__aeabi_dmul+0x13c>
 80029b2:	e1b1      	b.n	8002d18 <__aeabi_dmul+0x4a0>
 80029b4:	4642      	mov	r2, r8
 80029b6:	0752      	lsls	r2, r2, #29
 80029b8:	d00b      	beq.n	80029d2 <__aeabi_dmul+0x15a>
 80029ba:	220f      	movs	r2, #15
 80029bc:	4641      	mov	r1, r8
 80029be:	400a      	ands	r2, r1
 80029c0:	2a04      	cmp	r2, #4
 80029c2:	d006      	beq.n	80029d2 <__aeabi_dmul+0x15a>
 80029c4:	4642      	mov	r2, r8
 80029c6:	1d11      	adds	r1, r2, #4
 80029c8:	4541      	cmp	r1, r8
 80029ca:	4192      	sbcs	r2, r2
 80029cc:	4688      	mov	r8, r1
 80029ce:	4252      	negs	r2, r2
 80029d0:	4492      	add	sl, r2
 80029d2:	4652      	mov	r2, sl
 80029d4:	01d2      	lsls	r2, r2, #7
 80029d6:	d506      	bpl.n	80029e6 <__aeabi_dmul+0x16e>
 80029d8:	4652      	mov	r2, sl
 80029da:	4b80      	ldr	r3, [pc, #512]	@ (8002bdc <__aeabi_dmul+0x364>)
 80029dc:	401a      	ands	r2, r3
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	4692      	mov	sl, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	18c3      	adds	r3, r0, r3
 80029e6:	4a7e      	ldr	r2, [pc, #504]	@ (8002be0 <__aeabi_dmul+0x368>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	dd00      	ble.n	80029ee <__aeabi_dmul+0x176>
 80029ec:	e18f      	b.n	8002d0e <__aeabi_dmul+0x496>
 80029ee:	4642      	mov	r2, r8
 80029f0:	08d1      	lsrs	r1, r2, #3
 80029f2:	4652      	mov	r2, sl
 80029f4:	0752      	lsls	r2, r2, #29
 80029f6:	430a      	orrs	r2, r1
 80029f8:	4651      	mov	r1, sl
 80029fa:	055b      	lsls	r3, r3, #21
 80029fc:	024c      	lsls	r4, r1, #9
 80029fe:	0b24      	lsrs	r4, r4, #12
 8002a00:	0d5b      	lsrs	r3, r3, #21
 8002a02:	e797      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002a04:	4b73      	ldr	r3, [pc, #460]	@ (8002bd4 <__aeabi_dmul+0x35c>)
 8002a06:	4326      	orrs	r6, r4
 8002a08:	469c      	mov	ip, r3
 8002a0a:	44e3      	add	fp, ip
 8002a0c:	2e00      	cmp	r6, #0
 8002a0e:	d100      	bne.n	8002a12 <__aeabi_dmul+0x19a>
 8002a10:	e16f      	b.n	8002cf2 <__aeabi_dmul+0x47a>
 8002a12:	2303      	movs	r3, #3
 8002a14:	4649      	mov	r1, r9
 8002a16:	431d      	orrs	r5, r3
 8002a18:	9b00      	ldr	r3, [sp, #0]
 8002a1a:	4059      	eors	r1, r3
 8002a1c:	b2cb      	uxtb	r3, r1
 8002a1e:	9303      	str	r3, [sp, #12]
 8002a20:	2d0a      	cmp	r5, #10
 8002a22:	dd00      	ble.n	8002a26 <__aeabi_dmul+0x1ae>
 8002a24:	e133      	b.n	8002c8e <__aeabi_dmul+0x416>
 8002a26:	2301      	movs	r3, #1
 8002a28:	40ab      	lsls	r3, r5
 8002a2a:	001d      	movs	r5, r3
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	9302      	str	r3, [sp, #8]
 8002a30:	2288      	movs	r2, #136	@ 0x88
 8002a32:	422a      	tst	r2, r5
 8002a34:	d197      	bne.n	8002966 <__aeabi_dmul+0xee>
 8002a36:	4642      	mov	r2, r8
 8002a38:	4643      	mov	r3, r8
 8002a3a:	0412      	lsls	r2, r2, #16
 8002a3c:	0c12      	lsrs	r2, r2, #16
 8002a3e:	0016      	movs	r6, r2
 8002a40:	9801      	ldr	r0, [sp, #4]
 8002a42:	0c1d      	lsrs	r5, r3, #16
 8002a44:	0c03      	lsrs	r3, r0, #16
 8002a46:	0400      	lsls	r0, r0, #16
 8002a48:	0c00      	lsrs	r0, r0, #16
 8002a4a:	4346      	muls	r6, r0
 8002a4c:	46b4      	mov	ip, r6
 8002a4e:	001e      	movs	r6, r3
 8002a50:	436e      	muls	r6, r5
 8002a52:	9600      	str	r6, [sp, #0]
 8002a54:	0016      	movs	r6, r2
 8002a56:	0007      	movs	r7, r0
 8002a58:	435e      	muls	r6, r3
 8002a5a:	4661      	mov	r1, ip
 8002a5c:	46b0      	mov	r8, r6
 8002a5e:	436f      	muls	r7, r5
 8002a60:	0c0e      	lsrs	r6, r1, #16
 8002a62:	44b8      	add	r8, r7
 8002a64:	4446      	add	r6, r8
 8002a66:	42b7      	cmp	r7, r6
 8002a68:	d905      	bls.n	8002a76 <__aeabi_dmul+0x1fe>
 8002a6a:	2180      	movs	r1, #128	@ 0x80
 8002a6c:	0249      	lsls	r1, r1, #9
 8002a6e:	4688      	mov	r8, r1
 8002a70:	9f00      	ldr	r7, [sp, #0]
 8002a72:	4447      	add	r7, r8
 8002a74:	9700      	str	r7, [sp, #0]
 8002a76:	4661      	mov	r1, ip
 8002a78:	0409      	lsls	r1, r1, #16
 8002a7a:	0c09      	lsrs	r1, r1, #16
 8002a7c:	0c37      	lsrs	r7, r6, #16
 8002a7e:	0436      	lsls	r6, r6, #16
 8002a80:	468c      	mov	ip, r1
 8002a82:	0031      	movs	r1, r6
 8002a84:	4461      	add	r1, ip
 8002a86:	9101      	str	r1, [sp, #4]
 8002a88:	0011      	movs	r1, r2
 8002a8a:	0c26      	lsrs	r6, r4, #16
 8002a8c:	0424      	lsls	r4, r4, #16
 8002a8e:	0c24      	lsrs	r4, r4, #16
 8002a90:	4361      	muls	r1, r4
 8002a92:	468c      	mov	ip, r1
 8002a94:	0021      	movs	r1, r4
 8002a96:	4369      	muls	r1, r5
 8002a98:	4689      	mov	r9, r1
 8002a9a:	4661      	mov	r1, ip
 8002a9c:	0c09      	lsrs	r1, r1, #16
 8002a9e:	4688      	mov	r8, r1
 8002aa0:	4372      	muls	r2, r6
 8002aa2:	444a      	add	r2, r9
 8002aa4:	4442      	add	r2, r8
 8002aa6:	4375      	muls	r5, r6
 8002aa8:	4591      	cmp	r9, r2
 8002aaa:	d903      	bls.n	8002ab4 <__aeabi_dmul+0x23c>
 8002aac:	2180      	movs	r1, #128	@ 0x80
 8002aae:	0249      	lsls	r1, r1, #9
 8002ab0:	4688      	mov	r8, r1
 8002ab2:	4445      	add	r5, r8
 8002ab4:	0c11      	lsrs	r1, r2, #16
 8002ab6:	4688      	mov	r8, r1
 8002ab8:	4661      	mov	r1, ip
 8002aba:	0409      	lsls	r1, r1, #16
 8002abc:	0c09      	lsrs	r1, r1, #16
 8002abe:	468c      	mov	ip, r1
 8002ac0:	0412      	lsls	r2, r2, #16
 8002ac2:	4462      	add	r2, ip
 8002ac4:	18b9      	adds	r1, r7, r2
 8002ac6:	9102      	str	r1, [sp, #8]
 8002ac8:	4651      	mov	r1, sl
 8002aca:	0c09      	lsrs	r1, r1, #16
 8002acc:	468c      	mov	ip, r1
 8002ace:	4651      	mov	r1, sl
 8002ad0:	040f      	lsls	r7, r1, #16
 8002ad2:	0c3f      	lsrs	r7, r7, #16
 8002ad4:	0039      	movs	r1, r7
 8002ad6:	4341      	muls	r1, r0
 8002ad8:	4445      	add	r5, r8
 8002ada:	4688      	mov	r8, r1
 8002adc:	4661      	mov	r1, ip
 8002ade:	4341      	muls	r1, r0
 8002ae0:	468a      	mov	sl, r1
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	4660      	mov	r0, ip
 8002ae6:	0c09      	lsrs	r1, r1, #16
 8002ae8:	4689      	mov	r9, r1
 8002aea:	4358      	muls	r0, r3
 8002aec:	437b      	muls	r3, r7
 8002aee:	4453      	add	r3, sl
 8002af0:	444b      	add	r3, r9
 8002af2:	459a      	cmp	sl, r3
 8002af4:	d903      	bls.n	8002afe <__aeabi_dmul+0x286>
 8002af6:	2180      	movs	r1, #128	@ 0x80
 8002af8:	0249      	lsls	r1, r1, #9
 8002afa:	4689      	mov	r9, r1
 8002afc:	4448      	add	r0, r9
 8002afe:	0c19      	lsrs	r1, r3, #16
 8002b00:	4689      	mov	r9, r1
 8002b02:	4641      	mov	r1, r8
 8002b04:	0409      	lsls	r1, r1, #16
 8002b06:	0c09      	lsrs	r1, r1, #16
 8002b08:	4688      	mov	r8, r1
 8002b0a:	0039      	movs	r1, r7
 8002b0c:	4361      	muls	r1, r4
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	4443      	add	r3, r8
 8002b12:	4688      	mov	r8, r1
 8002b14:	4661      	mov	r1, ip
 8002b16:	434c      	muls	r4, r1
 8002b18:	4371      	muls	r1, r6
 8002b1a:	468c      	mov	ip, r1
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	4377      	muls	r7, r6
 8002b20:	0c0e      	lsrs	r6, r1, #16
 8002b22:	193f      	adds	r7, r7, r4
 8002b24:	19f6      	adds	r6, r6, r7
 8002b26:	4448      	add	r0, r9
 8002b28:	42b4      	cmp	r4, r6
 8002b2a:	d903      	bls.n	8002b34 <__aeabi_dmul+0x2bc>
 8002b2c:	2180      	movs	r1, #128	@ 0x80
 8002b2e:	0249      	lsls	r1, r1, #9
 8002b30:	4689      	mov	r9, r1
 8002b32:	44cc      	add	ip, r9
 8002b34:	9902      	ldr	r1, [sp, #8]
 8002b36:	9f00      	ldr	r7, [sp, #0]
 8002b38:	4689      	mov	r9, r1
 8002b3a:	0431      	lsls	r1, r6, #16
 8002b3c:	444f      	add	r7, r9
 8002b3e:	4689      	mov	r9, r1
 8002b40:	4641      	mov	r1, r8
 8002b42:	4297      	cmp	r7, r2
 8002b44:	4192      	sbcs	r2, r2
 8002b46:	040c      	lsls	r4, r1, #16
 8002b48:	0c24      	lsrs	r4, r4, #16
 8002b4a:	444c      	add	r4, r9
 8002b4c:	18ff      	adds	r7, r7, r3
 8002b4e:	4252      	negs	r2, r2
 8002b50:	1964      	adds	r4, r4, r5
 8002b52:	18a1      	adds	r1, r4, r2
 8002b54:	429f      	cmp	r7, r3
 8002b56:	419b      	sbcs	r3, r3
 8002b58:	4688      	mov	r8, r1
 8002b5a:	4682      	mov	sl, r0
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	4699      	mov	r9, r3
 8002b60:	4590      	cmp	r8, r2
 8002b62:	4192      	sbcs	r2, r2
 8002b64:	42ac      	cmp	r4, r5
 8002b66:	41a4      	sbcs	r4, r4
 8002b68:	44c2      	add	sl, r8
 8002b6a:	44d1      	add	r9, sl
 8002b6c:	4252      	negs	r2, r2
 8002b6e:	4264      	negs	r4, r4
 8002b70:	4314      	orrs	r4, r2
 8002b72:	4599      	cmp	r9, r3
 8002b74:	419b      	sbcs	r3, r3
 8002b76:	4582      	cmp	sl, r0
 8002b78:	4192      	sbcs	r2, r2
 8002b7a:	425b      	negs	r3, r3
 8002b7c:	4252      	negs	r2, r2
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	464a      	mov	r2, r9
 8002b82:	0c36      	lsrs	r6, r6, #16
 8002b84:	19a4      	adds	r4, r4, r6
 8002b86:	18e3      	adds	r3, r4, r3
 8002b88:	4463      	add	r3, ip
 8002b8a:	025b      	lsls	r3, r3, #9
 8002b8c:	0dd2      	lsrs	r2, r2, #23
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	9901      	ldr	r1, [sp, #4]
 8002b92:	4692      	mov	sl, r2
 8002b94:	027a      	lsls	r2, r7, #9
 8002b96:	430a      	orrs	r2, r1
 8002b98:	1e50      	subs	r0, r2, #1
 8002b9a:	4182      	sbcs	r2, r0
 8002b9c:	0dff      	lsrs	r7, r7, #23
 8002b9e:	4317      	orrs	r7, r2
 8002ba0:	464a      	mov	r2, r9
 8002ba2:	0252      	lsls	r2, r2, #9
 8002ba4:	4317      	orrs	r7, r2
 8002ba6:	46b8      	mov	r8, r7
 8002ba8:	01db      	lsls	r3, r3, #7
 8002baa:	d500      	bpl.n	8002bae <__aeabi_dmul+0x336>
 8002bac:	e6ed      	b.n	800298a <__aeabi_dmul+0x112>
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <__aeabi_dmul+0x36c>)
 8002bb0:	9a03      	ldr	r2, [sp, #12]
 8002bb2:	445b      	add	r3, fp
 8002bb4:	4691      	mov	r9, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	dc00      	bgt.n	8002bbc <__aeabi_dmul+0x344>
 8002bba:	e0ac      	b.n	8002d16 <__aeabi_dmul+0x49e>
 8002bbc:	003a      	movs	r2, r7
 8002bbe:	0752      	lsls	r2, r2, #29
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dmul+0x34c>
 8002bc2:	e710      	b.n	80029e6 <__aeabi_dmul+0x16e>
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	4658      	mov	r0, fp
 8002bc8:	403a      	ands	r2, r7
 8002bca:	2a04      	cmp	r2, #4
 8002bcc:	d000      	beq.n	8002bd0 <__aeabi_dmul+0x358>
 8002bce:	e6f9      	b.n	80029c4 <__aeabi_dmul+0x14c>
 8002bd0:	e709      	b.n	80029e6 <__aeabi_dmul+0x16e>
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	000007ff 	.word	0x000007ff
 8002bd8:	fffffc01 	.word	0xfffffc01
 8002bdc:	feffffff 	.word	0xfeffffff
 8002be0:	000007fe 	.word	0x000007fe
 8002be4:	000003ff 	.word	0x000003ff
 8002be8:	0022      	movs	r2, r4
 8002bea:	4332      	orrs	r2, r6
 8002bec:	d06f      	beq.n	8002cce <__aeabi_dmul+0x456>
 8002bee:	2c00      	cmp	r4, #0
 8002bf0:	d100      	bne.n	8002bf4 <__aeabi_dmul+0x37c>
 8002bf2:	e0c2      	b.n	8002d7a <__aeabi_dmul+0x502>
 8002bf4:	0020      	movs	r0, r4
 8002bf6:	f000 fe87 	bl	8003908 <__clzsi2>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	3a0b      	subs	r2, #11
 8002c00:	201d      	movs	r0, #29
 8002c02:	1a82      	subs	r2, r0, r2
 8002c04:	0030      	movs	r0, r6
 8002c06:	0019      	movs	r1, r3
 8002c08:	40d0      	lsrs	r0, r2
 8002c0a:	3908      	subs	r1, #8
 8002c0c:	408c      	lsls	r4, r1
 8002c0e:	0002      	movs	r2, r0
 8002c10:	4322      	orrs	r2, r4
 8002c12:	0034      	movs	r4, r6
 8002c14:	408c      	lsls	r4, r1
 8002c16:	4659      	mov	r1, fp
 8002c18:	1acb      	subs	r3, r1, r3
 8002c1a:	4986      	ldr	r1, [pc, #536]	@ (8002e34 <__aeabi_dmul+0x5bc>)
 8002c1c:	468b      	mov	fp, r1
 8002c1e:	449b      	add	fp, r3
 8002c20:	2d0a      	cmp	r5, #10
 8002c22:	dd00      	ble.n	8002c26 <__aeabi_dmul+0x3ae>
 8002c24:	e6a4      	b.n	8002970 <__aeabi_dmul+0xf8>
 8002c26:	4649      	mov	r1, r9
 8002c28:	9b00      	ldr	r3, [sp, #0]
 8002c2a:	9401      	str	r4, [sp, #4]
 8002c2c:	4059      	eors	r1, r3
 8002c2e:	b2cb      	uxtb	r3, r1
 8002c30:	0014      	movs	r4, r2
 8002c32:	2000      	movs	r0, #0
 8002c34:	9303      	str	r3, [sp, #12]
 8002c36:	2d02      	cmp	r5, #2
 8002c38:	dd00      	ble.n	8002c3c <__aeabi_dmul+0x3c4>
 8002c3a:	e667      	b.n	800290c <__aeabi_dmul+0x94>
 8002c3c:	e6fb      	b.n	8002a36 <__aeabi_dmul+0x1be>
 8002c3e:	4653      	mov	r3, sl
 8002c40:	4303      	orrs	r3, r0
 8002c42:	4698      	mov	r8, r3
 8002c44:	d03c      	beq.n	8002cc0 <__aeabi_dmul+0x448>
 8002c46:	4653      	mov	r3, sl
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d100      	bne.n	8002c4e <__aeabi_dmul+0x3d6>
 8002c4c:	e0a3      	b.n	8002d96 <__aeabi_dmul+0x51e>
 8002c4e:	4650      	mov	r0, sl
 8002c50:	f000 fe5a 	bl	8003908 <__clzsi2>
 8002c54:	230b      	movs	r3, #11
 8002c56:	425b      	negs	r3, r3
 8002c58:	469c      	mov	ip, r3
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	4484      	add	ip, r0
 8002c5e:	0011      	movs	r1, r2
 8002c60:	4650      	mov	r0, sl
 8002c62:	3908      	subs	r1, #8
 8002c64:	4088      	lsls	r0, r1
 8002c66:	231d      	movs	r3, #29
 8002c68:	4680      	mov	r8, r0
 8002c6a:	4660      	mov	r0, ip
 8002c6c:	1a1b      	subs	r3, r3, r0
 8002c6e:	0020      	movs	r0, r4
 8002c70:	40d8      	lsrs	r0, r3
 8002c72:	0003      	movs	r3, r0
 8002c74:	4640      	mov	r0, r8
 8002c76:	4303      	orrs	r3, r0
 8002c78:	469a      	mov	sl, r3
 8002c7a:	0023      	movs	r3, r4
 8002c7c:	408b      	lsls	r3, r1
 8002c7e:	4698      	mov	r8, r3
 8002c80:	4b6c      	ldr	r3, [pc, #432]	@ (8002e34 <__aeabi_dmul+0x5bc>)
 8002c82:	2500      	movs	r5, #0
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	469b      	mov	fp, r3
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9302      	str	r3, [sp, #8]
 8002c8c:	e61a      	b.n	80028c4 <__aeabi_dmul+0x4c>
 8002c8e:	2d0f      	cmp	r5, #15
 8002c90:	d000      	beq.n	8002c94 <__aeabi_dmul+0x41c>
 8002c92:	e0c9      	b.n	8002e28 <__aeabi_dmul+0x5b0>
 8002c94:	2380      	movs	r3, #128	@ 0x80
 8002c96:	4652      	mov	r2, sl
 8002c98:	031b      	lsls	r3, r3, #12
 8002c9a:	421a      	tst	r2, r3
 8002c9c:	d002      	beq.n	8002ca4 <__aeabi_dmul+0x42c>
 8002c9e:	421c      	tst	r4, r3
 8002ca0:	d100      	bne.n	8002ca4 <__aeabi_dmul+0x42c>
 8002ca2:	e092      	b.n	8002dca <__aeabi_dmul+0x552>
 8002ca4:	2480      	movs	r4, #128	@ 0x80
 8002ca6:	4653      	mov	r3, sl
 8002ca8:	0324      	lsls	r4, r4, #12
 8002caa:	431c      	orrs	r4, r3
 8002cac:	0324      	lsls	r4, r4, #12
 8002cae:	4642      	mov	r2, r8
 8002cb0:	0b24      	lsrs	r4, r4, #12
 8002cb2:	e63e      	b.n	8002932 <__aeabi_dmul+0xba>
 8002cb4:	469b      	mov	fp, r3
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	4680      	mov	r8, r0
 8002cba:	250c      	movs	r5, #12
 8002cbc:	9302      	str	r3, [sp, #8]
 8002cbe:	e601      	b.n	80028c4 <__aeabi_dmul+0x4c>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	469a      	mov	sl, r3
 8002cc4:	469b      	mov	fp, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	2504      	movs	r5, #4
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	e5fa      	b.n	80028c4 <__aeabi_dmul+0x4c>
 8002cce:	2101      	movs	r1, #1
 8002cd0:	430d      	orrs	r5, r1
 8002cd2:	2d0a      	cmp	r5, #10
 8002cd4:	dd00      	ble.n	8002cd8 <__aeabi_dmul+0x460>
 8002cd6:	e64b      	b.n	8002970 <__aeabi_dmul+0xf8>
 8002cd8:	4649      	mov	r1, r9
 8002cda:	9800      	ldr	r0, [sp, #0]
 8002cdc:	4041      	eors	r1, r0
 8002cde:	b2c9      	uxtb	r1, r1
 8002ce0:	9103      	str	r1, [sp, #12]
 8002ce2:	2d02      	cmp	r5, #2
 8002ce4:	dc00      	bgt.n	8002ce8 <__aeabi_dmul+0x470>
 8002ce6:	e096      	b.n	8002e16 <__aeabi_dmul+0x59e>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2400      	movs	r4, #0
 8002cec:	2001      	movs	r0, #1
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	e60c      	b.n	800290c <__aeabi_dmul+0x94>
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	9a00      	ldr	r2, [sp, #0]
 8002cf8:	432b      	orrs	r3, r5
 8002cfa:	4051      	eors	r1, r2
 8002cfc:	b2ca      	uxtb	r2, r1
 8002cfe:	9203      	str	r2, [sp, #12]
 8002d00:	2b0a      	cmp	r3, #10
 8002d02:	dd00      	ble.n	8002d06 <__aeabi_dmul+0x48e>
 8002d04:	e634      	b.n	8002970 <__aeabi_dmul+0xf8>
 8002d06:	2d00      	cmp	r5, #0
 8002d08:	d157      	bne.n	8002dba <__aeabi_dmul+0x542>
 8002d0a:	9b03      	ldr	r3, [sp, #12]
 8002d0c:	4699      	mov	r9, r3
 8002d0e:	2400      	movs	r4, #0
 8002d10:	2200      	movs	r2, #0
 8002d12:	4b49      	ldr	r3, [pc, #292]	@ (8002e38 <__aeabi_dmul+0x5c0>)
 8002d14:	e60e      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002d16:	4658      	mov	r0, fp
 8002d18:	2101      	movs	r1, #1
 8002d1a:	1ac9      	subs	r1, r1, r3
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dmul+0x4aa>
 8002d20:	e62f      	b.n	8002982 <__aeabi_dmul+0x10a>
 8002d22:	291f      	cmp	r1, #31
 8002d24:	dd56      	ble.n	8002dd4 <__aeabi_dmul+0x55c>
 8002d26:	221f      	movs	r2, #31
 8002d28:	4654      	mov	r4, sl
 8002d2a:	4252      	negs	r2, r2
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	40dc      	lsrs	r4, r3
 8002d30:	2920      	cmp	r1, #32
 8002d32:	d007      	beq.n	8002d44 <__aeabi_dmul+0x4cc>
 8002d34:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <__aeabi_dmul+0x5c4>)
 8002d36:	4642      	mov	r2, r8
 8002d38:	469c      	mov	ip, r3
 8002d3a:	4653      	mov	r3, sl
 8002d3c:	4460      	add	r0, ip
 8002d3e:	4083      	lsls	r3, r0
 8002d40:	431a      	orrs	r2, r3
 8002d42:	4690      	mov	r8, r2
 8002d44:	4642      	mov	r2, r8
 8002d46:	2107      	movs	r1, #7
 8002d48:	1e53      	subs	r3, r2, #1
 8002d4a:	419a      	sbcs	r2, r3
 8002d4c:	000b      	movs	r3, r1
 8002d4e:	4322      	orrs	r2, r4
 8002d50:	4013      	ands	r3, r2
 8002d52:	2400      	movs	r4, #0
 8002d54:	4211      	tst	r1, r2
 8002d56:	d009      	beq.n	8002d6c <__aeabi_dmul+0x4f4>
 8002d58:	230f      	movs	r3, #15
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d05d      	beq.n	8002e1c <__aeabi_dmul+0x5a4>
 8002d60:	1d11      	adds	r1, r2, #4
 8002d62:	4291      	cmp	r1, r2
 8002d64:	419b      	sbcs	r3, r3
 8002d66:	000a      	movs	r2, r1
 8002d68:	425b      	negs	r3, r3
 8002d6a:	075b      	lsls	r3, r3, #29
 8002d6c:	08d2      	lsrs	r2, r2, #3
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	2300      	movs	r3, #0
 8002d72:	e5df      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002d74:	9b03      	ldr	r3, [sp, #12]
 8002d76:	4699      	mov	r9, r3
 8002d78:	e5fa      	b.n	8002970 <__aeabi_dmul+0xf8>
 8002d7a:	9801      	ldr	r0, [sp, #4]
 8002d7c:	f000 fdc4 	bl	8003908 <__clzsi2>
 8002d80:	0002      	movs	r2, r0
 8002d82:	0003      	movs	r3, r0
 8002d84:	3215      	adds	r2, #21
 8002d86:	3320      	adds	r3, #32
 8002d88:	2a1c      	cmp	r2, #28
 8002d8a:	dc00      	bgt.n	8002d8e <__aeabi_dmul+0x516>
 8002d8c:	e738      	b.n	8002c00 <__aeabi_dmul+0x388>
 8002d8e:	9a01      	ldr	r2, [sp, #4]
 8002d90:	3808      	subs	r0, #8
 8002d92:	4082      	lsls	r2, r0
 8002d94:	e73f      	b.n	8002c16 <__aeabi_dmul+0x39e>
 8002d96:	f000 fdb7 	bl	8003908 <__clzsi2>
 8002d9a:	2315      	movs	r3, #21
 8002d9c:	469c      	mov	ip, r3
 8002d9e:	4484      	add	ip, r0
 8002da0:	0002      	movs	r2, r0
 8002da2:	4663      	mov	r3, ip
 8002da4:	3220      	adds	r2, #32
 8002da6:	2b1c      	cmp	r3, #28
 8002da8:	dc00      	bgt.n	8002dac <__aeabi_dmul+0x534>
 8002daa:	e758      	b.n	8002c5e <__aeabi_dmul+0x3e6>
 8002dac:	2300      	movs	r3, #0
 8002dae:	4698      	mov	r8, r3
 8002db0:	0023      	movs	r3, r4
 8002db2:	3808      	subs	r0, #8
 8002db4:	4083      	lsls	r3, r0
 8002db6:	469a      	mov	sl, r3
 8002db8:	e762      	b.n	8002c80 <__aeabi_dmul+0x408>
 8002dba:	001d      	movs	r5, r3
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2400      	movs	r4, #0
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	e5a2      	b.n	800290c <__aeabi_dmul+0x94>
 8002dc6:	9002      	str	r0, [sp, #8]
 8002dc8:	e632      	b.n	8002a30 <__aeabi_dmul+0x1b8>
 8002dca:	431c      	orrs	r4, r3
 8002dcc:	9b00      	ldr	r3, [sp, #0]
 8002dce:	9a01      	ldr	r2, [sp, #4]
 8002dd0:	4699      	mov	r9, r3
 8002dd2:	e5ae      	b.n	8002932 <__aeabi_dmul+0xba>
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e40 <__aeabi_dmul+0x5c8>)
 8002dd6:	4652      	mov	r2, sl
 8002dd8:	18c3      	adds	r3, r0, r3
 8002dda:	4640      	mov	r0, r8
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	40c8      	lsrs	r0, r1
 8002de0:	4302      	orrs	r2, r0
 8002de2:	4640      	mov	r0, r8
 8002de4:	4098      	lsls	r0, r3
 8002de6:	0003      	movs	r3, r0
 8002de8:	1e58      	subs	r0, r3, #1
 8002dea:	4183      	sbcs	r3, r0
 8002dec:	4654      	mov	r4, sl
 8002dee:	431a      	orrs	r2, r3
 8002df0:	40cc      	lsrs	r4, r1
 8002df2:	0753      	lsls	r3, r2, #29
 8002df4:	d009      	beq.n	8002e0a <__aeabi_dmul+0x592>
 8002df6:	230f      	movs	r3, #15
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d005      	beq.n	8002e0a <__aeabi_dmul+0x592>
 8002dfe:	1d13      	adds	r3, r2, #4
 8002e00:	4293      	cmp	r3, r2
 8002e02:	4192      	sbcs	r2, r2
 8002e04:	4252      	negs	r2, r2
 8002e06:	18a4      	adds	r4, r4, r2
 8002e08:	001a      	movs	r2, r3
 8002e0a:	0223      	lsls	r3, r4, #8
 8002e0c:	d508      	bpl.n	8002e20 <__aeabi_dmul+0x5a8>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	2400      	movs	r4, #0
 8002e12:	2200      	movs	r2, #0
 8002e14:	e58e      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002e16:	4689      	mov	r9, r1
 8002e18:	2400      	movs	r4, #0
 8002e1a:	e58b      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e7a5      	b.n	8002d6c <__aeabi_dmul+0x4f4>
 8002e20:	0763      	lsls	r3, r4, #29
 8002e22:	0264      	lsls	r4, r4, #9
 8002e24:	0b24      	lsrs	r4, r4, #12
 8002e26:	e7a1      	b.n	8002d6c <__aeabi_dmul+0x4f4>
 8002e28:	9b00      	ldr	r3, [sp, #0]
 8002e2a:	46a2      	mov	sl, r4
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	9b01      	ldr	r3, [sp, #4]
 8002e30:	4698      	mov	r8, r3
 8002e32:	e737      	b.n	8002ca4 <__aeabi_dmul+0x42c>
 8002e34:	fffffc0d 	.word	0xfffffc0d
 8002e38:	000007ff 	.word	0x000007ff
 8002e3c:	0000043e 	.word	0x0000043e
 8002e40:	0000041e 	.word	0x0000041e

08002e44 <__aeabi_dsub>:
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	4657      	mov	r7, sl
 8002e48:	464e      	mov	r6, r9
 8002e4a:	4645      	mov	r5, r8
 8002e4c:	46de      	mov	lr, fp
 8002e4e:	b5e0      	push	{r5, r6, r7, lr}
 8002e50:	b083      	sub	sp, #12
 8002e52:	9000      	str	r0, [sp, #0]
 8002e54:	9101      	str	r1, [sp, #4]
 8002e56:	030c      	lsls	r4, r1, #12
 8002e58:	004d      	lsls	r5, r1, #1
 8002e5a:	0fce      	lsrs	r6, r1, #31
 8002e5c:	0a61      	lsrs	r1, r4, #9
 8002e5e:	9c00      	ldr	r4, [sp, #0]
 8002e60:	005f      	lsls	r7, r3, #1
 8002e62:	0f64      	lsrs	r4, r4, #29
 8002e64:	430c      	orrs	r4, r1
 8002e66:	9900      	ldr	r1, [sp, #0]
 8002e68:	9200      	str	r2, [sp, #0]
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	00c8      	lsls	r0, r1, #3
 8002e6e:	0319      	lsls	r1, r3, #12
 8002e70:	0d7b      	lsrs	r3, r7, #21
 8002e72:	4699      	mov	r9, r3
 8002e74:	9b01      	ldr	r3, [sp, #4]
 8002e76:	4fcc      	ldr	r7, [pc, #816]	@ (80031a8 <__aeabi_dsub+0x364>)
 8002e78:	0fdb      	lsrs	r3, r3, #31
 8002e7a:	469c      	mov	ip, r3
 8002e7c:	0a4b      	lsrs	r3, r1, #9
 8002e7e:	9900      	ldr	r1, [sp, #0]
 8002e80:	4680      	mov	r8, r0
 8002e82:	0f49      	lsrs	r1, r1, #29
 8002e84:	4319      	orrs	r1, r3
 8002e86:	9b00      	ldr	r3, [sp, #0]
 8002e88:	468b      	mov	fp, r1
 8002e8a:	00da      	lsls	r2, r3, #3
 8002e8c:	4692      	mov	sl, r2
 8002e8e:	0d6d      	lsrs	r5, r5, #21
 8002e90:	45b9      	cmp	r9, r7
 8002e92:	d100      	bne.n	8002e96 <__aeabi_dsub+0x52>
 8002e94:	e0bf      	b.n	8003016 <__aeabi_dsub+0x1d2>
 8002e96:	2301      	movs	r3, #1
 8002e98:	4661      	mov	r1, ip
 8002e9a:	4059      	eors	r1, r3
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	468c      	mov	ip, r1
 8002ea0:	1aeb      	subs	r3, r5, r3
 8002ea2:	428e      	cmp	r6, r1
 8002ea4:	d075      	beq.n	8002f92 <__aeabi_dsub+0x14e>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	dc00      	bgt.n	8002eac <__aeabi_dsub+0x68>
 8002eaa:	e2a3      	b.n	80033f4 <__aeabi_dsub+0x5b0>
 8002eac:	4649      	mov	r1, r9
 8002eae:	2900      	cmp	r1, #0
 8002eb0:	d100      	bne.n	8002eb4 <__aeabi_dsub+0x70>
 8002eb2:	e0ce      	b.n	8003052 <__aeabi_dsub+0x20e>
 8002eb4:	42bd      	cmp	r5, r7
 8002eb6:	d100      	bne.n	8002eba <__aeabi_dsub+0x76>
 8002eb8:	e200      	b.n	80032bc <__aeabi_dsub+0x478>
 8002eba:	2701      	movs	r7, #1
 8002ebc:	2b38      	cmp	r3, #56	@ 0x38
 8002ebe:	dc19      	bgt.n	8002ef4 <__aeabi_dsub+0xb0>
 8002ec0:	2780      	movs	r7, #128	@ 0x80
 8002ec2:	4659      	mov	r1, fp
 8002ec4:	043f      	lsls	r7, r7, #16
 8002ec6:	4339      	orrs	r1, r7
 8002ec8:	468b      	mov	fp, r1
 8002eca:	2b1f      	cmp	r3, #31
 8002ecc:	dd00      	ble.n	8002ed0 <__aeabi_dsub+0x8c>
 8002ece:	e1fa      	b.n	80032c6 <__aeabi_dsub+0x482>
 8002ed0:	2720      	movs	r7, #32
 8002ed2:	1af9      	subs	r1, r7, r3
 8002ed4:	468c      	mov	ip, r1
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	4667      	mov	r7, ip
 8002eda:	40b9      	lsls	r1, r7
 8002edc:	000f      	movs	r7, r1
 8002ede:	0011      	movs	r1, r2
 8002ee0:	40d9      	lsrs	r1, r3
 8002ee2:	430f      	orrs	r7, r1
 8002ee4:	4661      	mov	r1, ip
 8002ee6:	408a      	lsls	r2, r1
 8002ee8:	1e51      	subs	r1, r2, #1
 8002eea:	418a      	sbcs	r2, r1
 8002eec:	4659      	mov	r1, fp
 8002eee:	40d9      	lsrs	r1, r3
 8002ef0:	4317      	orrs	r7, r2
 8002ef2:	1a64      	subs	r4, r4, r1
 8002ef4:	1bc7      	subs	r7, r0, r7
 8002ef6:	42b8      	cmp	r0, r7
 8002ef8:	4180      	sbcs	r0, r0
 8002efa:	4240      	negs	r0, r0
 8002efc:	1a24      	subs	r4, r4, r0
 8002efe:	0223      	lsls	r3, r4, #8
 8002f00:	d400      	bmi.n	8002f04 <__aeabi_dsub+0xc0>
 8002f02:	e140      	b.n	8003186 <__aeabi_dsub+0x342>
 8002f04:	0264      	lsls	r4, r4, #9
 8002f06:	0a64      	lsrs	r4, r4, #9
 8002f08:	2c00      	cmp	r4, #0
 8002f0a:	d100      	bne.n	8002f0e <__aeabi_dsub+0xca>
 8002f0c:	e154      	b.n	80031b8 <__aeabi_dsub+0x374>
 8002f0e:	0020      	movs	r0, r4
 8002f10:	f000 fcfa 	bl	8003908 <__clzsi2>
 8002f14:	0003      	movs	r3, r0
 8002f16:	3b08      	subs	r3, #8
 8002f18:	2120      	movs	r1, #32
 8002f1a:	0038      	movs	r0, r7
 8002f1c:	1aca      	subs	r2, r1, r3
 8002f1e:	40d0      	lsrs	r0, r2
 8002f20:	409c      	lsls	r4, r3
 8002f22:	0002      	movs	r2, r0
 8002f24:	409f      	lsls	r7, r3
 8002f26:	4322      	orrs	r2, r4
 8002f28:	429d      	cmp	r5, r3
 8002f2a:	dd00      	ble.n	8002f2e <__aeabi_dsub+0xea>
 8002f2c:	e1a6      	b.n	800327c <__aeabi_dsub+0x438>
 8002f2e:	1b58      	subs	r0, r3, r5
 8002f30:	3001      	adds	r0, #1
 8002f32:	1a09      	subs	r1, r1, r0
 8002f34:	003c      	movs	r4, r7
 8002f36:	408f      	lsls	r7, r1
 8002f38:	40c4      	lsrs	r4, r0
 8002f3a:	1e7b      	subs	r3, r7, #1
 8002f3c:	419f      	sbcs	r7, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	408b      	lsls	r3, r1
 8002f42:	4327      	orrs	r7, r4
 8002f44:	431f      	orrs	r7, r3
 8002f46:	40c2      	lsrs	r2, r0
 8002f48:	003b      	movs	r3, r7
 8002f4a:	0014      	movs	r4, r2
 8002f4c:	2500      	movs	r5, #0
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	d100      	bne.n	8002f54 <__aeabi_dsub+0x110>
 8002f52:	e1f7      	b.n	8003344 <__aeabi_dsub+0x500>
 8002f54:	077b      	lsls	r3, r7, #29
 8002f56:	d100      	bne.n	8002f5a <__aeabi_dsub+0x116>
 8002f58:	e377      	b.n	800364a <__aeabi_dsub+0x806>
 8002f5a:	230f      	movs	r3, #15
 8002f5c:	0038      	movs	r0, r7
 8002f5e:	403b      	ands	r3, r7
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d004      	beq.n	8002f6e <__aeabi_dsub+0x12a>
 8002f64:	1d38      	adds	r0, r7, #4
 8002f66:	42b8      	cmp	r0, r7
 8002f68:	41bf      	sbcs	r7, r7
 8002f6a:	427f      	negs	r7, r7
 8002f6c:	19e4      	adds	r4, r4, r7
 8002f6e:	0223      	lsls	r3, r4, #8
 8002f70:	d400      	bmi.n	8002f74 <__aeabi_dsub+0x130>
 8002f72:	e368      	b.n	8003646 <__aeabi_dsub+0x802>
 8002f74:	4b8c      	ldr	r3, [pc, #560]	@ (80031a8 <__aeabi_dsub+0x364>)
 8002f76:	3501      	adds	r5, #1
 8002f78:	429d      	cmp	r5, r3
 8002f7a:	d100      	bne.n	8002f7e <__aeabi_dsub+0x13a>
 8002f7c:	e0f4      	b.n	8003168 <__aeabi_dsub+0x324>
 8002f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80031ac <__aeabi_dsub+0x368>)
 8002f80:	056d      	lsls	r5, r5, #21
 8002f82:	401c      	ands	r4, r3
 8002f84:	0d6d      	lsrs	r5, r5, #21
 8002f86:	0767      	lsls	r7, r4, #29
 8002f88:	08c0      	lsrs	r0, r0, #3
 8002f8a:	0264      	lsls	r4, r4, #9
 8002f8c:	4307      	orrs	r7, r0
 8002f8e:	0b24      	lsrs	r4, r4, #12
 8002f90:	e0ec      	b.n	800316c <__aeabi_dsub+0x328>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	dc00      	bgt.n	8002f98 <__aeabi_dsub+0x154>
 8002f96:	e329      	b.n	80035ec <__aeabi_dsub+0x7a8>
 8002f98:	4649      	mov	r1, r9
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d000      	beq.n	8002fa0 <__aeabi_dsub+0x15c>
 8002f9e:	e0d6      	b.n	800314e <__aeabi_dsub+0x30a>
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	d100      	bne.n	8002fa8 <__aeabi_dsub+0x164>
 8002fa6:	e12e      	b.n	8003206 <__aeabi_dsub+0x3c2>
 8002fa8:	1e59      	subs	r1, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d100      	bne.n	8002fb0 <__aeabi_dsub+0x16c>
 8002fae:	e1e6      	b.n	800337e <__aeabi_dsub+0x53a>
 8002fb0:	42bb      	cmp	r3, r7
 8002fb2:	d100      	bne.n	8002fb6 <__aeabi_dsub+0x172>
 8002fb4:	e182      	b.n	80032bc <__aeabi_dsub+0x478>
 8002fb6:	2701      	movs	r7, #1
 8002fb8:	000b      	movs	r3, r1
 8002fba:	2938      	cmp	r1, #56	@ 0x38
 8002fbc:	dc14      	bgt.n	8002fe8 <__aeabi_dsub+0x1a4>
 8002fbe:	2b1f      	cmp	r3, #31
 8002fc0:	dd00      	ble.n	8002fc4 <__aeabi_dsub+0x180>
 8002fc2:	e23c      	b.n	800343e <__aeabi_dsub+0x5fa>
 8002fc4:	2720      	movs	r7, #32
 8002fc6:	1af9      	subs	r1, r7, r3
 8002fc8:	468c      	mov	ip, r1
 8002fca:	4659      	mov	r1, fp
 8002fcc:	4667      	mov	r7, ip
 8002fce:	40b9      	lsls	r1, r7
 8002fd0:	000f      	movs	r7, r1
 8002fd2:	0011      	movs	r1, r2
 8002fd4:	40d9      	lsrs	r1, r3
 8002fd6:	430f      	orrs	r7, r1
 8002fd8:	4661      	mov	r1, ip
 8002fda:	408a      	lsls	r2, r1
 8002fdc:	1e51      	subs	r1, r2, #1
 8002fde:	418a      	sbcs	r2, r1
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	40d9      	lsrs	r1, r3
 8002fe4:	4317      	orrs	r7, r2
 8002fe6:	1864      	adds	r4, r4, r1
 8002fe8:	183f      	adds	r7, r7, r0
 8002fea:	4287      	cmp	r7, r0
 8002fec:	4180      	sbcs	r0, r0
 8002fee:	4240      	negs	r0, r0
 8002ff0:	1824      	adds	r4, r4, r0
 8002ff2:	0223      	lsls	r3, r4, #8
 8002ff4:	d400      	bmi.n	8002ff8 <__aeabi_dsub+0x1b4>
 8002ff6:	e0c6      	b.n	8003186 <__aeabi_dsub+0x342>
 8002ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80031a8 <__aeabi_dsub+0x364>)
 8002ffa:	3501      	adds	r5, #1
 8002ffc:	429d      	cmp	r5, r3
 8002ffe:	d100      	bne.n	8003002 <__aeabi_dsub+0x1be>
 8003000:	e0b2      	b.n	8003168 <__aeabi_dsub+0x324>
 8003002:	2101      	movs	r1, #1
 8003004:	4b69      	ldr	r3, [pc, #420]	@ (80031ac <__aeabi_dsub+0x368>)
 8003006:	087a      	lsrs	r2, r7, #1
 8003008:	401c      	ands	r4, r3
 800300a:	4039      	ands	r1, r7
 800300c:	430a      	orrs	r2, r1
 800300e:	07e7      	lsls	r7, r4, #31
 8003010:	4317      	orrs	r7, r2
 8003012:	0864      	lsrs	r4, r4, #1
 8003014:	e79e      	b.n	8002f54 <__aeabi_dsub+0x110>
 8003016:	4b66      	ldr	r3, [pc, #408]	@ (80031b0 <__aeabi_dsub+0x36c>)
 8003018:	4311      	orrs	r1, r2
 800301a:	468a      	mov	sl, r1
 800301c:	18eb      	adds	r3, r5, r3
 800301e:	2900      	cmp	r1, #0
 8003020:	d028      	beq.n	8003074 <__aeabi_dsub+0x230>
 8003022:	4566      	cmp	r6, ip
 8003024:	d02c      	beq.n	8003080 <__aeabi_dsub+0x23c>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d05b      	beq.n	80030e2 <__aeabi_dsub+0x29e>
 800302a:	2d00      	cmp	r5, #0
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x1ec>
 800302e:	e12c      	b.n	800328a <__aeabi_dsub+0x446>
 8003030:	465b      	mov	r3, fp
 8003032:	4666      	mov	r6, ip
 8003034:	075f      	lsls	r7, r3, #29
 8003036:	08d2      	lsrs	r2, r2, #3
 8003038:	4317      	orrs	r7, r2
 800303a:	08dd      	lsrs	r5, r3, #3
 800303c:	003b      	movs	r3, r7
 800303e:	432b      	orrs	r3, r5
 8003040:	d100      	bne.n	8003044 <__aeabi_dsub+0x200>
 8003042:	e0e2      	b.n	800320a <__aeabi_dsub+0x3c6>
 8003044:	2480      	movs	r4, #128	@ 0x80
 8003046:	0324      	lsls	r4, r4, #12
 8003048:	432c      	orrs	r4, r5
 800304a:	0324      	lsls	r4, r4, #12
 800304c:	4d56      	ldr	r5, [pc, #344]	@ (80031a8 <__aeabi_dsub+0x364>)
 800304e:	0b24      	lsrs	r4, r4, #12
 8003050:	e08c      	b.n	800316c <__aeabi_dsub+0x328>
 8003052:	4659      	mov	r1, fp
 8003054:	4311      	orrs	r1, r2
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x216>
 8003058:	e0d5      	b.n	8003206 <__aeabi_dsub+0x3c2>
 800305a:	1e59      	subs	r1, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d100      	bne.n	8003062 <__aeabi_dsub+0x21e>
 8003060:	e1b9      	b.n	80033d6 <__aeabi_dsub+0x592>
 8003062:	42bb      	cmp	r3, r7
 8003064:	d100      	bne.n	8003068 <__aeabi_dsub+0x224>
 8003066:	e1b1      	b.n	80033cc <__aeabi_dsub+0x588>
 8003068:	2701      	movs	r7, #1
 800306a:	000b      	movs	r3, r1
 800306c:	2938      	cmp	r1, #56	@ 0x38
 800306e:	dd00      	ble.n	8003072 <__aeabi_dsub+0x22e>
 8003070:	e740      	b.n	8002ef4 <__aeabi_dsub+0xb0>
 8003072:	e72a      	b.n	8002eca <__aeabi_dsub+0x86>
 8003074:	4661      	mov	r1, ip
 8003076:	2701      	movs	r7, #1
 8003078:	4079      	eors	r1, r7
 800307a:	468c      	mov	ip, r1
 800307c:	4566      	cmp	r6, ip
 800307e:	d1d2      	bne.n	8003026 <__aeabi_dsub+0x1e2>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d100      	bne.n	8003086 <__aeabi_dsub+0x242>
 8003084:	e0c5      	b.n	8003212 <__aeabi_dsub+0x3ce>
 8003086:	2d00      	cmp	r5, #0
 8003088:	d000      	beq.n	800308c <__aeabi_dsub+0x248>
 800308a:	e155      	b.n	8003338 <__aeabi_dsub+0x4f4>
 800308c:	464b      	mov	r3, r9
 800308e:	0025      	movs	r5, r4
 8003090:	4305      	orrs	r5, r0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x252>
 8003094:	e212      	b.n	80034bc <__aeabi_dsub+0x678>
 8003096:	1e59      	subs	r1, r3, #1
 8003098:	468c      	mov	ip, r1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d100      	bne.n	80030a0 <__aeabi_dsub+0x25c>
 800309e:	e249      	b.n	8003534 <__aeabi_dsub+0x6f0>
 80030a0:	4d41      	ldr	r5, [pc, #260]	@ (80031a8 <__aeabi_dsub+0x364>)
 80030a2:	42ab      	cmp	r3, r5
 80030a4:	d100      	bne.n	80030a8 <__aeabi_dsub+0x264>
 80030a6:	e28f      	b.n	80035c8 <__aeabi_dsub+0x784>
 80030a8:	2701      	movs	r7, #1
 80030aa:	2938      	cmp	r1, #56	@ 0x38
 80030ac:	dc11      	bgt.n	80030d2 <__aeabi_dsub+0x28e>
 80030ae:	4663      	mov	r3, ip
 80030b0:	2b1f      	cmp	r3, #31
 80030b2:	dd00      	ble.n	80030b6 <__aeabi_dsub+0x272>
 80030b4:	e25b      	b.n	800356e <__aeabi_dsub+0x72a>
 80030b6:	4661      	mov	r1, ip
 80030b8:	2320      	movs	r3, #32
 80030ba:	0027      	movs	r7, r4
 80030bc:	1a5b      	subs	r3, r3, r1
 80030be:	0005      	movs	r5, r0
 80030c0:	4098      	lsls	r0, r3
 80030c2:	409f      	lsls	r7, r3
 80030c4:	40cd      	lsrs	r5, r1
 80030c6:	1e43      	subs	r3, r0, #1
 80030c8:	4198      	sbcs	r0, r3
 80030ca:	40cc      	lsrs	r4, r1
 80030cc:	432f      	orrs	r7, r5
 80030ce:	4307      	orrs	r7, r0
 80030d0:	44a3      	add	fp, r4
 80030d2:	18bf      	adds	r7, r7, r2
 80030d4:	4297      	cmp	r7, r2
 80030d6:	4192      	sbcs	r2, r2
 80030d8:	4252      	negs	r2, r2
 80030da:	445a      	add	r2, fp
 80030dc:	0014      	movs	r4, r2
 80030de:	464d      	mov	r5, r9
 80030e0:	e787      	b.n	8002ff2 <__aeabi_dsub+0x1ae>
 80030e2:	4f34      	ldr	r7, [pc, #208]	@ (80031b4 <__aeabi_dsub+0x370>)
 80030e4:	1c6b      	adds	r3, r5, #1
 80030e6:	423b      	tst	r3, r7
 80030e8:	d000      	beq.n	80030ec <__aeabi_dsub+0x2a8>
 80030ea:	e0b6      	b.n	800325a <__aeabi_dsub+0x416>
 80030ec:	4659      	mov	r1, fp
 80030ee:	0023      	movs	r3, r4
 80030f0:	4311      	orrs	r1, r2
 80030f2:	000f      	movs	r7, r1
 80030f4:	4303      	orrs	r3, r0
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	d000      	beq.n	80030fc <__aeabi_dsub+0x2b8>
 80030fa:	e126      	b.n	800334a <__aeabi_dsub+0x506>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d100      	bne.n	8003102 <__aeabi_dsub+0x2be>
 8003100:	e1c0      	b.n	8003484 <__aeabi_dsub+0x640>
 8003102:	2900      	cmp	r1, #0
 8003104:	d100      	bne.n	8003108 <__aeabi_dsub+0x2c4>
 8003106:	e0a1      	b.n	800324c <__aeabi_dsub+0x408>
 8003108:	1a83      	subs	r3, r0, r2
 800310a:	4698      	mov	r8, r3
 800310c:	465b      	mov	r3, fp
 800310e:	4540      	cmp	r0, r8
 8003110:	41ad      	sbcs	r5, r5
 8003112:	1ae3      	subs	r3, r4, r3
 8003114:	426d      	negs	r5, r5
 8003116:	1b5b      	subs	r3, r3, r5
 8003118:	2580      	movs	r5, #128	@ 0x80
 800311a:	042d      	lsls	r5, r5, #16
 800311c:	422b      	tst	r3, r5
 800311e:	d100      	bne.n	8003122 <__aeabi_dsub+0x2de>
 8003120:	e14b      	b.n	80033ba <__aeabi_dsub+0x576>
 8003122:	465b      	mov	r3, fp
 8003124:	1a10      	subs	r0, r2, r0
 8003126:	4282      	cmp	r2, r0
 8003128:	4192      	sbcs	r2, r2
 800312a:	1b1c      	subs	r4, r3, r4
 800312c:	0007      	movs	r7, r0
 800312e:	2601      	movs	r6, #1
 8003130:	4663      	mov	r3, ip
 8003132:	4252      	negs	r2, r2
 8003134:	1aa4      	subs	r4, r4, r2
 8003136:	4327      	orrs	r7, r4
 8003138:	401e      	ands	r6, r3
 800313a:	2f00      	cmp	r7, #0
 800313c:	d100      	bne.n	8003140 <__aeabi_dsub+0x2fc>
 800313e:	e142      	b.n	80033c6 <__aeabi_dsub+0x582>
 8003140:	422c      	tst	r4, r5
 8003142:	d100      	bne.n	8003146 <__aeabi_dsub+0x302>
 8003144:	e26d      	b.n	8003622 <__aeabi_dsub+0x7de>
 8003146:	4b19      	ldr	r3, [pc, #100]	@ (80031ac <__aeabi_dsub+0x368>)
 8003148:	2501      	movs	r5, #1
 800314a:	401c      	ands	r4, r3
 800314c:	e71b      	b.n	8002f86 <__aeabi_dsub+0x142>
 800314e:	42bd      	cmp	r5, r7
 8003150:	d100      	bne.n	8003154 <__aeabi_dsub+0x310>
 8003152:	e13b      	b.n	80033cc <__aeabi_dsub+0x588>
 8003154:	2701      	movs	r7, #1
 8003156:	2b38      	cmp	r3, #56	@ 0x38
 8003158:	dd00      	ble.n	800315c <__aeabi_dsub+0x318>
 800315a:	e745      	b.n	8002fe8 <__aeabi_dsub+0x1a4>
 800315c:	2780      	movs	r7, #128	@ 0x80
 800315e:	4659      	mov	r1, fp
 8003160:	043f      	lsls	r7, r7, #16
 8003162:	4339      	orrs	r1, r7
 8003164:	468b      	mov	fp, r1
 8003166:	e72a      	b.n	8002fbe <__aeabi_dsub+0x17a>
 8003168:	2400      	movs	r4, #0
 800316a:	2700      	movs	r7, #0
 800316c:	052d      	lsls	r5, r5, #20
 800316e:	4325      	orrs	r5, r4
 8003170:	07f6      	lsls	r6, r6, #31
 8003172:	4335      	orrs	r5, r6
 8003174:	0038      	movs	r0, r7
 8003176:	0029      	movs	r1, r5
 8003178:	b003      	add	sp, #12
 800317a:	bcf0      	pop	{r4, r5, r6, r7}
 800317c:	46bb      	mov	fp, r7
 800317e:	46b2      	mov	sl, r6
 8003180:	46a9      	mov	r9, r5
 8003182:	46a0      	mov	r8, r4
 8003184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003186:	077b      	lsls	r3, r7, #29
 8003188:	d004      	beq.n	8003194 <__aeabi_dsub+0x350>
 800318a:	230f      	movs	r3, #15
 800318c:	403b      	ands	r3, r7
 800318e:	2b04      	cmp	r3, #4
 8003190:	d000      	beq.n	8003194 <__aeabi_dsub+0x350>
 8003192:	e6e7      	b.n	8002f64 <__aeabi_dsub+0x120>
 8003194:	002b      	movs	r3, r5
 8003196:	08f8      	lsrs	r0, r7, #3
 8003198:	4a03      	ldr	r2, [pc, #12]	@ (80031a8 <__aeabi_dsub+0x364>)
 800319a:	0767      	lsls	r7, r4, #29
 800319c:	4307      	orrs	r7, r0
 800319e:	08e5      	lsrs	r5, r4, #3
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d100      	bne.n	80031a6 <__aeabi_dsub+0x362>
 80031a4:	e74a      	b.n	800303c <__aeabi_dsub+0x1f8>
 80031a6:	e0a5      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 80031a8:	000007ff 	.word	0x000007ff
 80031ac:	ff7fffff 	.word	0xff7fffff
 80031b0:	fffff801 	.word	0xfffff801
 80031b4:	000007fe 	.word	0x000007fe
 80031b8:	0038      	movs	r0, r7
 80031ba:	f000 fba5 	bl	8003908 <__clzsi2>
 80031be:	0003      	movs	r3, r0
 80031c0:	3318      	adds	r3, #24
 80031c2:	2b1f      	cmp	r3, #31
 80031c4:	dc00      	bgt.n	80031c8 <__aeabi_dsub+0x384>
 80031c6:	e6a7      	b.n	8002f18 <__aeabi_dsub+0xd4>
 80031c8:	003a      	movs	r2, r7
 80031ca:	3808      	subs	r0, #8
 80031cc:	4082      	lsls	r2, r0
 80031ce:	429d      	cmp	r5, r3
 80031d0:	dd00      	ble.n	80031d4 <__aeabi_dsub+0x390>
 80031d2:	e08a      	b.n	80032ea <__aeabi_dsub+0x4a6>
 80031d4:	1b5b      	subs	r3, r3, r5
 80031d6:	1c58      	adds	r0, r3, #1
 80031d8:	281f      	cmp	r0, #31
 80031da:	dc00      	bgt.n	80031de <__aeabi_dsub+0x39a>
 80031dc:	e1d8      	b.n	8003590 <__aeabi_dsub+0x74c>
 80031de:	0017      	movs	r7, r2
 80031e0:	3b1f      	subs	r3, #31
 80031e2:	40df      	lsrs	r7, r3
 80031e4:	2820      	cmp	r0, #32
 80031e6:	d005      	beq.n	80031f4 <__aeabi_dsub+0x3b0>
 80031e8:	2340      	movs	r3, #64	@ 0x40
 80031ea:	1a1b      	subs	r3, r3, r0
 80031ec:	409a      	lsls	r2, r3
 80031ee:	1e53      	subs	r3, r2, #1
 80031f0:	419a      	sbcs	r2, r3
 80031f2:	4317      	orrs	r7, r2
 80031f4:	2500      	movs	r5, #0
 80031f6:	2f00      	cmp	r7, #0
 80031f8:	d100      	bne.n	80031fc <__aeabi_dsub+0x3b8>
 80031fa:	e0e5      	b.n	80033c8 <__aeabi_dsub+0x584>
 80031fc:	077b      	lsls	r3, r7, #29
 80031fe:	d000      	beq.n	8003202 <__aeabi_dsub+0x3be>
 8003200:	e6ab      	b.n	8002f5a <__aeabi_dsub+0x116>
 8003202:	002c      	movs	r4, r5
 8003204:	e7c6      	b.n	8003194 <__aeabi_dsub+0x350>
 8003206:	08c0      	lsrs	r0, r0, #3
 8003208:	e7c6      	b.n	8003198 <__aeabi_dsub+0x354>
 800320a:	2700      	movs	r7, #0
 800320c:	2400      	movs	r4, #0
 800320e:	4dd1      	ldr	r5, [pc, #836]	@ (8003554 <__aeabi_dsub+0x710>)
 8003210:	e7ac      	b.n	800316c <__aeabi_dsub+0x328>
 8003212:	4fd1      	ldr	r7, [pc, #836]	@ (8003558 <__aeabi_dsub+0x714>)
 8003214:	1c6b      	adds	r3, r5, #1
 8003216:	423b      	tst	r3, r7
 8003218:	d171      	bne.n	80032fe <__aeabi_dsub+0x4ba>
 800321a:	0023      	movs	r3, r4
 800321c:	4303      	orrs	r3, r0
 800321e:	2d00      	cmp	r5, #0
 8003220:	d000      	beq.n	8003224 <__aeabi_dsub+0x3e0>
 8003222:	e14e      	b.n	80034c2 <__aeabi_dsub+0x67e>
 8003224:	4657      	mov	r7, sl
 8003226:	2b00      	cmp	r3, #0
 8003228:	d100      	bne.n	800322c <__aeabi_dsub+0x3e8>
 800322a:	e1b5      	b.n	8003598 <__aeabi_dsub+0x754>
 800322c:	2f00      	cmp	r7, #0
 800322e:	d00d      	beq.n	800324c <__aeabi_dsub+0x408>
 8003230:	1883      	adds	r3, r0, r2
 8003232:	4283      	cmp	r3, r0
 8003234:	4180      	sbcs	r0, r0
 8003236:	445c      	add	r4, fp
 8003238:	4240      	negs	r0, r0
 800323a:	1824      	adds	r4, r4, r0
 800323c:	0222      	lsls	r2, r4, #8
 800323e:	d500      	bpl.n	8003242 <__aeabi_dsub+0x3fe>
 8003240:	e1c8      	b.n	80035d4 <__aeabi_dsub+0x790>
 8003242:	001f      	movs	r7, r3
 8003244:	4698      	mov	r8, r3
 8003246:	4327      	orrs	r7, r4
 8003248:	d100      	bne.n	800324c <__aeabi_dsub+0x408>
 800324a:	e0bc      	b.n	80033c6 <__aeabi_dsub+0x582>
 800324c:	4643      	mov	r3, r8
 800324e:	0767      	lsls	r7, r4, #29
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	431f      	orrs	r7, r3
 8003254:	08e5      	lsrs	r5, r4, #3
 8003256:	2300      	movs	r3, #0
 8003258:	e04c      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 800325a:	1a83      	subs	r3, r0, r2
 800325c:	4698      	mov	r8, r3
 800325e:	465b      	mov	r3, fp
 8003260:	4540      	cmp	r0, r8
 8003262:	41bf      	sbcs	r7, r7
 8003264:	1ae3      	subs	r3, r4, r3
 8003266:	427f      	negs	r7, r7
 8003268:	1bdb      	subs	r3, r3, r7
 800326a:	021f      	lsls	r7, r3, #8
 800326c:	d47c      	bmi.n	8003368 <__aeabi_dsub+0x524>
 800326e:	4647      	mov	r7, r8
 8003270:	431f      	orrs	r7, r3
 8003272:	d100      	bne.n	8003276 <__aeabi_dsub+0x432>
 8003274:	e0a6      	b.n	80033c4 <__aeabi_dsub+0x580>
 8003276:	001c      	movs	r4, r3
 8003278:	4647      	mov	r7, r8
 800327a:	e645      	b.n	8002f08 <__aeabi_dsub+0xc4>
 800327c:	4cb7      	ldr	r4, [pc, #732]	@ (800355c <__aeabi_dsub+0x718>)
 800327e:	1aed      	subs	r5, r5, r3
 8003280:	4014      	ands	r4, r2
 8003282:	077b      	lsls	r3, r7, #29
 8003284:	d000      	beq.n	8003288 <__aeabi_dsub+0x444>
 8003286:	e780      	b.n	800318a <__aeabi_dsub+0x346>
 8003288:	e784      	b.n	8003194 <__aeabi_dsub+0x350>
 800328a:	464b      	mov	r3, r9
 800328c:	0025      	movs	r5, r4
 800328e:	4305      	orrs	r5, r0
 8003290:	d066      	beq.n	8003360 <__aeabi_dsub+0x51c>
 8003292:	1e5f      	subs	r7, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d100      	bne.n	800329a <__aeabi_dsub+0x456>
 8003298:	e0fc      	b.n	8003494 <__aeabi_dsub+0x650>
 800329a:	4dae      	ldr	r5, [pc, #696]	@ (8003554 <__aeabi_dsub+0x710>)
 800329c:	42ab      	cmp	r3, r5
 800329e:	d100      	bne.n	80032a2 <__aeabi_dsub+0x45e>
 80032a0:	e15e      	b.n	8003560 <__aeabi_dsub+0x71c>
 80032a2:	4666      	mov	r6, ip
 80032a4:	2f38      	cmp	r7, #56	@ 0x38
 80032a6:	dc00      	bgt.n	80032aa <__aeabi_dsub+0x466>
 80032a8:	e0b4      	b.n	8003414 <__aeabi_dsub+0x5d0>
 80032aa:	2001      	movs	r0, #1
 80032ac:	1a17      	subs	r7, r2, r0
 80032ae:	42ba      	cmp	r2, r7
 80032b0:	4192      	sbcs	r2, r2
 80032b2:	465b      	mov	r3, fp
 80032b4:	4252      	negs	r2, r2
 80032b6:	464d      	mov	r5, r9
 80032b8:	1a9c      	subs	r4, r3, r2
 80032ba:	e620      	b.n	8002efe <__aeabi_dsub+0xba>
 80032bc:	0767      	lsls	r7, r4, #29
 80032be:	08c0      	lsrs	r0, r0, #3
 80032c0:	4307      	orrs	r7, r0
 80032c2:	08e5      	lsrs	r5, r4, #3
 80032c4:	e6ba      	b.n	800303c <__aeabi_dsub+0x1f8>
 80032c6:	001f      	movs	r7, r3
 80032c8:	4659      	mov	r1, fp
 80032ca:	3f20      	subs	r7, #32
 80032cc:	40f9      	lsrs	r1, r7
 80032ce:	000f      	movs	r7, r1
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d005      	beq.n	80032e0 <__aeabi_dsub+0x49c>
 80032d4:	2140      	movs	r1, #64	@ 0x40
 80032d6:	1acb      	subs	r3, r1, r3
 80032d8:	4659      	mov	r1, fp
 80032da:	4099      	lsls	r1, r3
 80032dc:	430a      	orrs	r2, r1
 80032de:	4692      	mov	sl, r2
 80032e0:	4653      	mov	r3, sl
 80032e2:	1e5a      	subs	r2, r3, #1
 80032e4:	4193      	sbcs	r3, r2
 80032e6:	431f      	orrs	r7, r3
 80032e8:	e604      	b.n	8002ef4 <__aeabi_dsub+0xb0>
 80032ea:	1aeb      	subs	r3, r5, r3
 80032ec:	4d9b      	ldr	r5, [pc, #620]	@ (800355c <__aeabi_dsub+0x718>)
 80032ee:	4015      	ands	r5, r2
 80032f0:	076f      	lsls	r7, r5, #29
 80032f2:	08ed      	lsrs	r5, r5, #3
 80032f4:	032c      	lsls	r4, r5, #12
 80032f6:	055d      	lsls	r5, r3, #21
 80032f8:	0b24      	lsrs	r4, r4, #12
 80032fa:	0d6d      	lsrs	r5, r5, #21
 80032fc:	e736      	b.n	800316c <__aeabi_dsub+0x328>
 80032fe:	4d95      	ldr	r5, [pc, #596]	@ (8003554 <__aeabi_dsub+0x710>)
 8003300:	42ab      	cmp	r3, r5
 8003302:	d100      	bne.n	8003306 <__aeabi_dsub+0x4c2>
 8003304:	e0d6      	b.n	80034b4 <__aeabi_dsub+0x670>
 8003306:	1882      	adds	r2, r0, r2
 8003308:	0021      	movs	r1, r4
 800330a:	4282      	cmp	r2, r0
 800330c:	4180      	sbcs	r0, r0
 800330e:	4459      	add	r1, fp
 8003310:	4240      	negs	r0, r0
 8003312:	1808      	adds	r0, r1, r0
 8003314:	07c7      	lsls	r7, r0, #31
 8003316:	0852      	lsrs	r2, r2, #1
 8003318:	4317      	orrs	r7, r2
 800331a:	0844      	lsrs	r4, r0, #1
 800331c:	0752      	lsls	r2, r2, #29
 800331e:	d400      	bmi.n	8003322 <__aeabi_dsub+0x4de>
 8003320:	e185      	b.n	800362e <__aeabi_dsub+0x7ea>
 8003322:	220f      	movs	r2, #15
 8003324:	001d      	movs	r5, r3
 8003326:	403a      	ands	r2, r7
 8003328:	2a04      	cmp	r2, #4
 800332a:	d000      	beq.n	800332e <__aeabi_dsub+0x4ea>
 800332c:	e61a      	b.n	8002f64 <__aeabi_dsub+0x120>
 800332e:	08ff      	lsrs	r7, r7, #3
 8003330:	0764      	lsls	r4, r4, #29
 8003332:	4327      	orrs	r7, r4
 8003334:	0905      	lsrs	r5, r0, #4
 8003336:	e7dd      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 8003338:	465b      	mov	r3, fp
 800333a:	08d2      	lsrs	r2, r2, #3
 800333c:	075f      	lsls	r7, r3, #29
 800333e:	4317      	orrs	r7, r2
 8003340:	08dd      	lsrs	r5, r3, #3
 8003342:	e67b      	b.n	800303c <__aeabi_dsub+0x1f8>
 8003344:	2700      	movs	r7, #0
 8003346:	2400      	movs	r4, #0
 8003348:	e710      	b.n	800316c <__aeabi_dsub+0x328>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d000      	beq.n	8003350 <__aeabi_dsub+0x50c>
 800334e:	e0d6      	b.n	80034fe <__aeabi_dsub+0x6ba>
 8003350:	2900      	cmp	r1, #0
 8003352:	d000      	beq.n	8003356 <__aeabi_dsub+0x512>
 8003354:	e12f      	b.n	80035b6 <__aeabi_dsub+0x772>
 8003356:	2480      	movs	r4, #128	@ 0x80
 8003358:	2600      	movs	r6, #0
 800335a:	4d7e      	ldr	r5, [pc, #504]	@ (8003554 <__aeabi_dsub+0x710>)
 800335c:	0324      	lsls	r4, r4, #12
 800335e:	e705      	b.n	800316c <__aeabi_dsub+0x328>
 8003360:	4666      	mov	r6, ip
 8003362:	465c      	mov	r4, fp
 8003364:	08d0      	lsrs	r0, r2, #3
 8003366:	e717      	b.n	8003198 <__aeabi_dsub+0x354>
 8003368:	465b      	mov	r3, fp
 800336a:	1a17      	subs	r7, r2, r0
 800336c:	42ba      	cmp	r2, r7
 800336e:	4192      	sbcs	r2, r2
 8003370:	1b1c      	subs	r4, r3, r4
 8003372:	2601      	movs	r6, #1
 8003374:	4663      	mov	r3, ip
 8003376:	4252      	negs	r2, r2
 8003378:	1aa4      	subs	r4, r4, r2
 800337a:	401e      	ands	r6, r3
 800337c:	e5c4      	b.n	8002f08 <__aeabi_dsub+0xc4>
 800337e:	1883      	adds	r3, r0, r2
 8003380:	4283      	cmp	r3, r0
 8003382:	4180      	sbcs	r0, r0
 8003384:	445c      	add	r4, fp
 8003386:	4240      	negs	r0, r0
 8003388:	1825      	adds	r5, r4, r0
 800338a:	022a      	lsls	r2, r5, #8
 800338c:	d400      	bmi.n	8003390 <__aeabi_dsub+0x54c>
 800338e:	e0da      	b.n	8003546 <__aeabi_dsub+0x702>
 8003390:	4a72      	ldr	r2, [pc, #456]	@ (800355c <__aeabi_dsub+0x718>)
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	4015      	ands	r5, r2
 8003396:	07ea      	lsls	r2, r5, #31
 8003398:	431a      	orrs	r2, r3
 800339a:	0869      	lsrs	r1, r5, #1
 800339c:	075b      	lsls	r3, r3, #29
 800339e:	d400      	bmi.n	80033a2 <__aeabi_dsub+0x55e>
 80033a0:	e14a      	b.n	8003638 <__aeabi_dsub+0x7f4>
 80033a2:	230f      	movs	r3, #15
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d100      	bne.n	80033ac <__aeabi_dsub+0x568>
 80033aa:	e0fc      	b.n	80035a6 <__aeabi_dsub+0x762>
 80033ac:	1d17      	adds	r7, r2, #4
 80033ae:	4297      	cmp	r7, r2
 80033b0:	41a4      	sbcs	r4, r4
 80033b2:	4264      	negs	r4, r4
 80033b4:	2502      	movs	r5, #2
 80033b6:	1864      	adds	r4, r4, r1
 80033b8:	e6ec      	b.n	8003194 <__aeabi_dsub+0x350>
 80033ba:	4647      	mov	r7, r8
 80033bc:	001c      	movs	r4, r3
 80033be:	431f      	orrs	r7, r3
 80033c0:	d000      	beq.n	80033c4 <__aeabi_dsub+0x580>
 80033c2:	e743      	b.n	800324c <__aeabi_dsub+0x408>
 80033c4:	2600      	movs	r6, #0
 80033c6:	2500      	movs	r5, #0
 80033c8:	2400      	movs	r4, #0
 80033ca:	e6cf      	b.n	800316c <__aeabi_dsub+0x328>
 80033cc:	08c0      	lsrs	r0, r0, #3
 80033ce:	0767      	lsls	r7, r4, #29
 80033d0:	4307      	orrs	r7, r0
 80033d2:	08e5      	lsrs	r5, r4, #3
 80033d4:	e632      	b.n	800303c <__aeabi_dsub+0x1f8>
 80033d6:	1a87      	subs	r7, r0, r2
 80033d8:	465b      	mov	r3, fp
 80033da:	42b8      	cmp	r0, r7
 80033dc:	4180      	sbcs	r0, r0
 80033de:	1ae4      	subs	r4, r4, r3
 80033e0:	4240      	negs	r0, r0
 80033e2:	1a24      	subs	r4, r4, r0
 80033e4:	0223      	lsls	r3, r4, #8
 80033e6:	d428      	bmi.n	800343a <__aeabi_dsub+0x5f6>
 80033e8:	0763      	lsls	r3, r4, #29
 80033ea:	08ff      	lsrs	r7, r7, #3
 80033ec:	431f      	orrs	r7, r3
 80033ee:	08e5      	lsrs	r5, r4, #3
 80033f0:	2301      	movs	r3, #1
 80033f2:	e77f      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d100      	bne.n	80033fa <__aeabi_dsub+0x5b6>
 80033f8:	e673      	b.n	80030e2 <__aeabi_dsub+0x29e>
 80033fa:	464b      	mov	r3, r9
 80033fc:	1b5f      	subs	r7, r3, r5
 80033fe:	003b      	movs	r3, r7
 8003400:	2d00      	cmp	r5, #0
 8003402:	d100      	bne.n	8003406 <__aeabi_dsub+0x5c2>
 8003404:	e742      	b.n	800328c <__aeabi_dsub+0x448>
 8003406:	2f38      	cmp	r7, #56	@ 0x38
 8003408:	dd00      	ble.n	800340c <__aeabi_dsub+0x5c8>
 800340a:	e0ec      	b.n	80035e6 <__aeabi_dsub+0x7a2>
 800340c:	2380      	movs	r3, #128	@ 0x80
 800340e:	000e      	movs	r6, r1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431c      	orrs	r4, r3
 8003414:	2f1f      	cmp	r7, #31
 8003416:	dc25      	bgt.n	8003464 <__aeabi_dsub+0x620>
 8003418:	2520      	movs	r5, #32
 800341a:	0023      	movs	r3, r4
 800341c:	1bed      	subs	r5, r5, r7
 800341e:	0001      	movs	r1, r0
 8003420:	40a8      	lsls	r0, r5
 8003422:	40ab      	lsls	r3, r5
 8003424:	40f9      	lsrs	r1, r7
 8003426:	1e45      	subs	r5, r0, #1
 8003428:	41a8      	sbcs	r0, r5
 800342a:	430b      	orrs	r3, r1
 800342c:	40fc      	lsrs	r4, r7
 800342e:	4318      	orrs	r0, r3
 8003430:	465b      	mov	r3, fp
 8003432:	1b1b      	subs	r3, r3, r4
 8003434:	469b      	mov	fp, r3
 8003436:	e739      	b.n	80032ac <__aeabi_dsub+0x468>
 8003438:	4666      	mov	r6, ip
 800343a:	2501      	movs	r5, #1
 800343c:	e562      	b.n	8002f04 <__aeabi_dsub+0xc0>
 800343e:	001f      	movs	r7, r3
 8003440:	4659      	mov	r1, fp
 8003442:	3f20      	subs	r7, #32
 8003444:	40f9      	lsrs	r1, r7
 8003446:	468c      	mov	ip, r1
 8003448:	2b20      	cmp	r3, #32
 800344a:	d005      	beq.n	8003458 <__aeabi_dsub+0x614>
 800344c:	2740      	movs	r7, #64	@ 0x40
 800344e:	4659      	mov	r1, fp
 8003450:	1afb      	subs	r3, r7, r3
 8003452:	4099      	lsls	r1, r3
 8003454:	430a      	orrs	r2, r1
 8003456:	4692      	mov	sl, r2
 8003458:	4657      	mov	r7, sl
 800345a:	1e7b      	subs	r3, r7, #1
 800345c:	419f      	sbcs	r7, r3
 800345e:	4663      	mov	r3, ip
 8003460:	431f      	orrs	r7, r3
 8003462:	e5c1      	b.n	8002fe8 <__aeabi_dsub+0x1a4>
 8003464:	003b      	movs	r3, r7
 8003466:	0025      	movs	r5, r4
 8003468:	3b20      	subs	r3, #32
 800346a:	40dd      	lsrs	r5, r3
 800346c:	2f20      	cmp	r7, #32
 800346e:	d004      	beq.n	800347a <__aeabi_dsub+0x636>
 8003470:	2340      	movs	r3, #64	@ 0x40
 8003472:	1bdb      	subs	r3, r3, r7
 8003474:	409c      	lsls	r4, r3
 8003476:	4320      	orrs	r0, r4
 8003478:	4680      	mov	r8, r0
 800347a:	4640      	mov	r0, r8
 800347c:	1e43      	subs	r3, r0, #1
 800347e:	4198      	sbcs	r0, r3
 8003480:	4328      	orrs	r0, r5
 8003482:	e713      	b.n	80032ac <__aeabi_dsub+0x468>
 8003484:	2900      	cmp	r1, #0
 8003486:	d09d      	beq.n	80033c4 <__aeabi_dsub+0x580>
 8003488:	2601      	movs	r6, #1
 800348a:	4663      	mov	r3, ip
 800348c:	465c      	mov	r4, fp
 800348e:	4690      	mov	r8, r2
 8003490:	401e      	ands	r6, r3
 8003492:	e6db      	b.n	800324c <__aeabi_dsub+0x408>
 8003494:	1a17      	subs	r7, r2, r0
 8003496:	465b      	mov	r3, fp
 8003498:	42ba      	cmp	r2, r7
 800349a:	4192      	sbcs	r2, r2
 800349c:	1b1c      	subs	r4, r3, r4
 800349e:	4252      	negs	r2, r2
 80034a0:	1aa4      	subs	r4, r4, r2
 80034a2:	0223      	lsls	r3, r4, #8
 80034a4:	d4c8      	bmi.n	8003438 <__aeabi_dsub+0x5f4>
 80034a6:	0763      	lsls	r3, r4, #29
 80034a8:	08ff      	lsrs	r7, r7, #3
 80034aa:	431f      	orrs	r7, r3
 80034ac:	4666      	mov	r6, ip
 80034ae:	2301      	movs	r3, #1
 80034b0:	08e5      	lsrs	r5, r4, #3
 80034b2:	e71f      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 80034b4:	001d      	movs	r5, r3
 80034b6:	2400      	movs	r4, #0
 80034b8:	2700      	movs	r7, #0
 80034ba:	e657      	b.n	800316c <__aeabi_dsub+0x328>
 80034bc:	465c      	mov	r4, fp
 80034be:	08d0      	lsrs	r0, r2, #3
 80034c0:	e66a      	b.n	8003198 <__aeabi_dsub+0x354>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d100      	bne.n	80034c8 <__aeabi_dsub+0x684>
 80034c6:	e737      	b.n	8003338 <__aeabi_dsub+0x4f4>
 80034c8:	4653      	mov	r3, sl
 80034ca:	08c0      	lsrs	r0, r0, #3
 80034cc:	0767      	lsls	r7, r4, #29
 80034ce:	4307      	orrs	r7, r0
 80034d0:	08e5      	lsrs	r5, r4, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d100      	bne.n	80034d8 <__aeabi_dsub+0x694>
 80034d6:	e5b1      	b.n	800303c <__aeabi_dsub+0x1f8>
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	031b      	lsls	r3, r3, #12
 80034dc:	421d      	tst	r5, r3
 80034de:	d008      	beq.n	80034f2 <__aeabi_dsub+0x6ae>
 80034e0:	4659      	mov	r1, fp
 80034e2:	08c8      	lsrs	r0, r1, #3
 80034e4:	4218      	tst	r0, r3
 80034e6:	d104      	bne.n	80034f2 <__aeabi_dsub+0x6ae>
 80034e8:	08d2      	lsrs	r2, r2, #3
 80034ea:	0749      	lsls	r1, r1, #29
 80034ec:	430a      	orrs	r2, r1
 80034ee:	0017      	movs	r7, r2
 80034f0:	0005      	movs	r5, r0
 80034f2:	0f7b      	lsrs	r3, r7, #29
 80034f4:	00ff      	lsls	r7, r7, #3
 80034f6:	08ff      	lsrs	r7, r7, #3
 80034f8:	075b      	lsls	r3, r3, #29
 80034fa:	431f      	orrs	r7, r3
 80034fc:	e59e      	b.n	800303c <__aeabi_dsub+0x1f8>
 80034fe:	08c0      	lsrs	r0, r0, #3
 8003500:	0763      	lsls	r3, r4, #29
 8003502:	4318      	orrs	r0, r3
 8003504:	08e5      	lsrs	r5, r4, #3
 8003506:	2900      	cmp	r1, #0
 8003508:	d053      	beq.n	80035b2 <__aeabi_dsub+0x76e>
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	031b      	lsls	r3, r3, #12
 800350e:	421d      	tst	r5, r3
 8003510:	d00a      	beq.n	8003528 <__aeabi_dsub+0x6e4>
 8003512:	4659      	mov	r1, fp
 8003514:	08cc      	lsrs	r4, r1, #3
 8003516:	421c      	tst	r4, r3
 8003518:	d106      	bne.n	8003528 <__aeabi_dsub+0x6e4>
 800351a:	2601      	movs	r6, #1
 800351c:	4663      	mov	r3, ip
 800351e:	0025      	movs	r5, r4
 8003520:	08d0      	lsrs	r0, r2, #3
 8003522:	0749      	lsls	r1, r1, #29
 8003524:	4308      	orrs	r0, r1
 8003526:	401e      	ands	r6, r3
 8003528:	0f47      	lsrs	r7, r0, #29
 800352a:	00c0      	lsls	r0, r0, #3
 800352c:	08c0      	lsrs	r0, r0, #3
 800352e:	077f      	lsls	r7, r7, #29
 8003530:	4307      	orrs	r7, r0
 8003532:	e583      	b.n	800303c <__aeabi_dsub+0x1f8>
 8003534:	1883      	adds	r3, r0, r2
 8003536:	4293      	cmp	r3, r2
 8003538:	4192      	sbcs	r2, r2
 800353a:	445c      	add	r4, fp
 800353c:	4252      	negs	r2, r2
 800353e:	18a5      	adds	r5, r4, r2
 8003540:	022a      	lsls	r2, r5, #8
 8003542:	d500      	bpl.n	8003546 <__aeabi_dsub+0x702>
 8003544:	e724      	b.n	8003390 <__aeabi_dsub+0x54c>
 8003546:	076f      	lsls	r7, r5, #29
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	431f      	orrs	r7, r3
 800354c:	08ed      	lsrs	r5, r5, #3
 800354e:	2301      	movs	r3, #1
 8003550:	e6d0      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	000007ff 	.word	0x000007ff
 8003558:	000007fe 	.word	0x000007fe
 800355c:	ff7fffff 	.word	0xff7fffff
 8003560:	465b      	mov	r3, fp
 8003562:	08d2      	lsrs	r2, r2, #3
 8003564:	075f      	lsls	r7, r3, #29
 8003566:	4666      	mov	r6, ip
 8003568:	4317      	orrs	r7, r2
 800356a:	08dd      	lsrs	r5, r3, #3
 800356c:	e566      	b.n	800303c <__aeabi_dsub+0x1f8>
 800356e:	0025      	movs	r5, r4
 8003570:	3b20      	subs	r3, #32
 8003572:	40dd      	lsrs	r5, r3
 8003574:	4663      	mov	r3, ip
 8003576:	2b20      	cmp	r3, #32
 8003578:	d005      	beq.n	8003586 <__aeabi_dsub+0x742>
 800357a:	2340      	movs	r3, #64	@ 0x40
 800357c:	4661      	mov	r1, ip
 800357e:	1a5b      	subs	r3, r3, r1
 8003580:	409c      	lsls	r4, r3
 8003582:	4320      	orrs	r0, r4
 8003584:	4680      	mov	r8, r0
 8003586:	4647      	mov	r7, r8
 8003588:	1e7b      	subs	r3, r7, #1
 800358a:	419f      	sbcs	r7, r3
 800358c:	432f      	orrs	r7, r5
 800358e:	e5a0      	b.n	80030d2 <__aeabi_dsub+0x28e>
 8003590:	2120      	movs	r1, #32
 8003592:	2700      	movs	r7, #0
 8003594:	1a09      	subs	r1, r1, r0
 8003596:	e4d2      	b.n	8002f3e <__aeabi_dsub+0xfa>
 8003598:	2f00      	cmp	r7, #0
 800359a:	d100      	bne.n	800359e <__aeabi_dsub+0x75a>
 800359c:	e713      	b.n	80033c6 <__aeabi_dsub+0x582>
 800359e:	465c      	mov	r4, fp
 80035a0:	0017      	movs	r7, r2
 80035a2:	2500      	movs	r5, #0
 80035a4:	e5f6      	b.n	8003194 <__aeabi_dsub+0x350>
 80035a6:	08d7      	lsrs	r7, r2, #3
 80035a8:	0749      	lsls	r1, r1, #29
 80035aa:	2302      	movs	r3, #2
 80035ac:	430f      	orrs	r7, r1
 80035ae:	092d      	lsrs	r5, r5, #4
 80035b0:	e6a0      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 80035b2:	0007      	movs	r7, r0
 80035b4:	e542      	b.n	800303c <__aeabi_dsub+0x1f8>
 80035b6:	465b      	mov	r3, fp
 80035b8:	2601      	movs	r6, #1
 80035ba:	075f      	lsls	r7, r3, #29
 80035bc:	08dd      	lsrs	r5, r3, #3
 80035be:	4663      	mov	r3, ip
 80035c0:	08d2      	lsrs	r2, r2, #3
 80035c2:	4317      	orrs	r7, r2
 80035c4:	401e      	ands	r6, r3
 80035c6:	e539      	b.n	800303c <__aeabi_dsub+0x1f8>
 80035c8:	465b      	mov	r3, fp
 80035ca:	08d2      	lsrs	r2, r2, #3
 80035cc:	075f      	lsls	r7, r3, #29
 80035ce:	4317      	orrs	r7, r2
 80035d0:	08dd      	lsrs	r5, r3, #3
 80035d2:	e533      	b.n	800303c <__aeabi_dsub+0x1f8>
 80035d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003650 <__aeabi_dsub+0x80c>)
 80035d6:	08db      	lsrs	r3, r3, #3
 80035d8:	4022      	ands	r2, r4
 80035da:	0757      	lsls	r7, r2, #29
 80035dc:	0252      	lsls	r2, r2, #9
 80035de:	2501      	movs	r5, #1
 80035e0:	431f      	orrs	r7, r3
 80035e2:	0b14      	lsrs	r4, r2, #12
 80035e4:	e5c2      	b.n	800316c <__aeabi_dsub+0x328>
 80035e6:	000e      	movs	r6, r1
 80035e8:	2001      	movs	r0, #1
 80035ea:	e65f      	b.n	80032ac <__aeabi_dsub+0x468>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <__aeabi_dsub+0x7c8>
 80035f0:	464b      	mov	r3, r9
 80035f2:	1b5b      	subs	r3, r3, r5
 80035f4:	469c      	mov	ip, r3
 80035f6:	2d00      	cmp	r5, #0
 80035f8:	d100      	bne.n	80035fc <__aeabi_dsub+0x7b8>
 80035fa:	e548      	b.n	800308e <__aeabi_dsub+0x24a>
 80035fc:	2701      	movs	r7, #1
 80035fe:	2b38      	cmp	r3, #56	@ 0x38
 8003600:	dd00      	ble.n	8003604 <__aeabi_dsub+0x7c0>
 8003602:	e566      	b.n	80030d2 <__aeabi_dsub+0x28e>
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	431c      	orrs	r4, r3
 800360a:	e550      	b.n	80030ae <__aeabi_dsub+0x26a>
 800360c:	1c6b      	adds	r3, r5, #1
 800360e:	4d11      	ldr	r5, [pc, #68]	@ (8003654 <__aeabi_dsub+0x810>)
 8003610:	422b      	tst	r3, r5
 8003612:	d000      	beq.n	8003616 <__aeabi_dsub+0x7d2>
 8003614:	e673      	b.n	80032fe <__aeabi_dsub+0x4ba>
 8003616:	4659      	mov	r1, fp
 8003618:	0023      	movs	r3, r4
 800361a:	4311      	orrs	r1, r2
 800361c:	468a      	mov	sl, r1
 800361e:	4303      	orrs	r3, r0
 8003620:	e600      	b.n	8003224 <__aeabi_dsub+0x3e0>
 8003622:	0767      	lsls	r7, r4, #29
 8003624:	08c0      	lsrs	r0, r0, #3
 8003626:	2300      	movs	r3, #0
 8003628:	4307      	orrs	r7, r0
 800362a:	08e5      	lsrs	r5, r4, #3
 800362c:	e662      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 800362e:	0764      	lsls	r4, r4, #29
 8003630:	08ff      	lsrs	r7, r7, #3
 8003632:	4327      	orrs	r7, r4
 8003634:	0905      	lsrs	r5, r0, #4
 8003636:	e65d      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 8003638:	08d2      	lsrs	r2, r2, #3
 800363a:	0749      	lsls	r1, r1, #29
 800363c:	4311      	orrs	r1, r2
 800363e:	000f      	movs	r7, r1
 8003640:	2302      	movs	r3, #2
 8003642:	092d      	lsrs	r5, r5, #4
 8003644:	e656      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 8003646:	0007      	movs	r7, r0
 8003648:	e5a4      	b.n	8003194 <__aeabi_dsub+0x350>
 800364a:	0038      	movs	r0, r7
 800364c:	e48f      	b.n	8002f6e <__aeabi_dsub+0x12a>
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	ff7fffff 	.word	0xff7fffff
 8003654:	000007fe 	.word	0x000007fe

08003658 <__aeabi_d2iz>:
 8003658:	000b      	movs	r3, r1
 800365a:	0002      	movs	r2, r0
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	4d16      	ldr	r5, [pc, #88]	@ (80036b8 <__aeabi_d2iz+0x60>)
 8003660:	030c      	lsls	r4, r1, #12
 8003662:	b082      	sub	sp, #8
 8003664:	0049      	lsls	r1, r1, #1
 8003666:	2000      	movs	r0, #0
 8003668:	9200      	str	r2, [sp, #0]
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	0b24      	lsrs	r4, r4, #12
 800366e:	0d49      	lsrs	r1, r1, #21
 8003670:	0fde      	lsrs	r6, r3, #31
 8003672:	42a9      	cmp	r1, r5
 8003674:	dd04      	ble.n	8003680 <__aeabi_d2iz+0x28>
 8003676:	4811      	ldr	r0, [pc, #68]	@ (80036bc <__aeabi_d2iz+0x64>)
 8003678:	4281      	cmp	r1, r0
 800367a:	dd03      	ble.n	8003684 <__aeabi_d2iz+0x2c>
 800367c:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <__aeabi_d2iz+0x68>)
 800367e:	18f0      	adds	r0, r6, r3
 8003680:	b002      	add	sp, #8
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	2080      	movs	r0, #128	@ 0x80
 8003686:	0340      	lsls	r0, r0, #13
 8003688:	4320      	orrs	r0, r4
 800368a:	4c0e      	ldr	r4, [pc, #56]	@ (80036c4 <__aeabi_d2iz+0x6c>)
 800368c:	1a64      	subs	r4, r4, r1
 800368e:	2c1f      	cmp	r4, #31
 8003690:	dd08      	ble.n	80036a4 <__aeabi_d2iz+0x4c>
 8003692:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <__aeabi_d2iz+0x70>)
 8003694:	1a5b      	subs	r3, r3, r1
 8003696:	40d8      	lsrs	r0, r3
 8003698:	0003      	movs	r3, r0
 800369a:	4258      	negs	r0, r3
 800369c:	2e00      	cmp	r6, #0
 800369e:	d1ef      	bne.n	8003680 <__aeabi_d2iz+0x28>
 80036a0:	0018      	movs	r0, r3
 80036a2:	e7ed      	b.n	8003680 <__aeabi_d2iz+0x28>
 80036a4:	4b09      	ldr	r3, [pc, #36]	@ (80036cc <__aeabi_d2iz+0x74>)
 80036a6:	9a00      	ldr	r2, [sp, #0]
 80036a8:	469c      	mov	ip, r3
 80036aa:	0003      	movs	r3, r0
 80036ac:	4461      	add	r1, ip
 80036ae:	408b      	lsls	r3, r1
 80036b0:	40e2      	lsrs	r2, r4
 80036b2:	4313      	orrs	r3, r2
 80036b4:	e7f1      	b.n	800369a <__aeabi_d2iz+0x42>
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	000003fe 	.word	0x000003fe
 80036bc:	0000041d 	.word	0x0000041d
 80036c0:	7fffffff 	.word	0x7fffffff
 80036c4:	00000433 	.word	0x00000433
 80036c8:	00000413 	.word	0x00000413
 80036cc:	fffffbed 	.word	0xfffffbed

080036d0 <__aeabi_i2d>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d016      	beq.n	8003704 <__aeabi_i2d+0x34>
 80036d6:	17c3      	asrs	r3, r0, #31
 80036d8:	18c5      	adds	r5, r0, r3
 80036da:	405d      	eors	r5, r3
 80036dc:	0fc4      	lsrs	r4, r0, #31
 80036de:	0028      	movs	r0, r5
 80036e0:	f000 f912 	bl	8003908 <__clzsi2>
 80036e4:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <__aeabi_i2d+0x58>)
 80036e6:	1a1b      	subs	r3, r3, r0
 80036e8:	055b      	lsls	r3, r3, #21
 80036ea:	0d5b      	lsrs	r3, r3, #21
 80036ec:	280a      	cmp	r0, #10
 80036ee:	dc14      	bgt.n	800371a <__aeabi_i2d+0x4a>
 80036f0:	0002      	movs	r2, r0
 80036f2:	002e      	movs	r6, r5
 80036f4:	3215      	adds	r2, #21
 80036f6:	4096      	lsls	r6, r2
 80036f8:	220b      	movs	r2, #11
 80036fa:	1a12      	subs	r2, r2, r0
 80036fc:	40d5      	lsrs	r5, r2
 80036fe:	032d      	lsls	r5, r5, #12
 8003700:	0b2d      	lsrs	r5, r5, #12
 8003702:	e003      	b.n	800370c <__aeabi_i2d+0x3c>
 8003704:	2400      	movs	r4, #0
 8003706:	2300      	movs	r3, #0
 8003708:	2500      	movs	r5, #0
 800370a:	2600      	movs	r6, #0
 800370c:	051b      	lsls	r3, r3, #20
 800370e:	432b      	orrs	r3, r5
 8003710:	07e4      	lsls	r4, r4, #31
 8003712:	4323      	orrs	r3, r4
 8003714:	0030      	movs	r0, r6
 8003716:	0019      	movs	r1, r3
 8003718:	bd70      	pop	{r4, r5, r6, pc}
 800371a:	380b      	subs	r0, #11
 800371c:	4085      	lsls	r5, r0
 800371e:	032d      	lsls	r5, r5, #12
 8003720:	2600      	movs	r6, #0
 8003722:	0b2d      	lsrs	r5, r5, #12
 8003724:	e7f2      	b.n	800370c <__aeabi_i2d+0x3c>
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	0000041e 	.word	0x0000041e

0800372c <__aeabi_ui2d>:
 800372c:	b510      	push	{r4, lr}
 800372e:	1e04      	subs	r4, r0, #0
 8003730:	d010      	beq.n	8003754 <__aeabi_ui2d+0x28>
 8003732:	f000 f8e9 	bl	8003908 <__clzsi2>
 8003736:	4b0e      	ldr	r3, [pc, #56]	@ (8003770 <__aeabi_ui2d+0x44>)
 8003738:	1a1b      	subs	r3, r3, r0
 800373a:	055b      	lsls	r3, r3, #21
 800373c:	0d5b      	lsrs	r3, r3, #21
 800373e:	280a      	cmp	r0, #10
 8003740:	dc0f      	bgt.n	8003762 <__aeabi_ui2d+0x36>
 8003742:	220b      	movs	r2, #11
 8003744:	0021      	movs	r1, r4
 8003746:	1a12      	subs	r2, r2, r0
 8003748:	40d1      	lsrs	r1, r2
 800374a:	3015      	adds	r0, #21
 800374c:	030a      	lsls	r2, r1, #12
 800374e:	4084      	lsls	r4, r0
 8003750:	0b12      	lsrs	r2, r2, #12
 8003752:	e001      	b.n	8003758 <__aeabi_ui2d+0x2c>
 8003754:	2300      	movs	r3, #0
 8003756:	2200      	movs	r2, #0
 8003758:	051b      	lsls	r3, r3, #20
 800375a:	4313      	orrs	r3, r2
 800375c:	0020      	movs	r0, r4
 800375e:	0019      	movs	r1, r3
 8003760:	bd10      	pop	{r4, pc}
 8003762:	0022      	movs	r2, r4
 8003764:	380b      	subs	r0, #11
 8003766:	4082      	lsls	r2, r0
 8003768:	0312      	lsls	r2, r2, #12
 800376a:	2400      	movs	r4, #0
 800376c:	0b12      	lsrs	r2, r2, #12
 800376e:	e7f3      	b.n	8003758 <__aeabi_ui2d+0x2c>
 8003770:	0000041e 	.word	0x0000041e

08003774 <__aeabi_f2d>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	0242      	lsls	r2, r0, #9
 8003778:	0043      	lsls	r3, r0, #1
 800377a:	0fc4      	lsrs	r4, r0, #31
 800377c:	20fe      	movs	r0, #254	@ 0xfe
 800377e:	0e1b      	lsrs	r3, r3, #24
 8003780:	1c59      	adds	r1, r3, #1
 8003782:	0a55      	lsrs	r5, r2, #9
 8003784:	4208      	tst	r0, r1
 8003786:	d00c      	beq.n	80037a2 <__aeabi_f2d+0x2e>
 8003788:	21e0      	movs	r1, #224	@ 0xe0
 800378a:	0089      	lsls	r1, r1, #2
 800378c:	468c      	mov	ip, r1
 800378e:	076d      	lsls	r5, r5, #29
 8003790:	0b12      	lsrs	r2, r2, #12
 8003792:	4463      	add	r3, ip
 8003794:	051b      	lsls	r3, r3, #20
 8003796:	4313      	orrs	r3, r2
 8003798:	07e4      	lsls	r4, r4, #31
 800379a:	4323      	orrs	r3, r4
 800379c:	0028      	movs	r0, r5
 800379e:	0019      	movs	r1, r3
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d114      	bne.n	80037d0 <__aeabi_f2d+0x5c>
 80037a6:	2d00      	cmp	r5, #0
 80037a8:	d01b      	beq.n	80037e2 <__aeabi_f2d+0x6e>
 80037aa:	0028      	movs	r0, r5
 80037ac:	f000 f8ac 	bl	8003908 <__clzsi2>
 80037b0:	280a      	cmp	r0, #10
 80037b2:	dc1c      	bgt.n	80037ee <__aeabi_f2d+0x7a>
 80037b4:	230b      	movs	r3, #11
 80037b6:	002a      	movs	r2, r5
 80037b8:	1a1b      	subs	r3, r3, r0
 80037ba:	40da      	lsrs	r2, r3
 80037bc:	0003      	movs	r3, r0
 80037be:	3315      	adds	r3, #21
 80037c0:	409d      	lsls	r5, r3
 80037c2:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <__aeabi_f2d+0x88>)
 80037c4:	0312      	lsls	r2, r2, #12
 80037c6:	1a1b      	subs	r3, r3, r0
 80037c8:	055b      	lsls	r3, r3, #21
 80037ca:	0b12      	lsrs	r2, r2, #12
 80037cc:	0d5b      	lsrs	r3, r3, #21
 80037ce:	e7e1      	b.n	8003794 <__aeabi_f2d+0x20>
 80037d0:	2d00      	cmp	r5, #0
 80037d2:	d009      	beq.n	80037e8 <__aeabi_f2d+0x74>
 80037d4:	0b13      	lsrs	r3, r2, #12
 80037d6:	2280      	movs	r2, #128	@ 0x80
 80037d8:	0312      	lsls	r2, r2, #12
 80037da:	431a      	orrs	r2, r3
 80037dc:	076d      	lsls	r5, r5, #29
 80037de:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <__aeabi_f2d+0x8c>)
 80037e0:	e7d8      	b.n	8003794 <__aeabi_f2d+0x20>
 80037e2:	2300      	movs	r3, #0
 80037e4:	2200      	movs	r2, #0
 80037e6:	e7d5      	b.n	8003794 <__aeabi_f2d+0x20>
 80037e8:	2200      	movs	r2, #0
 80037ea:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <__aeabi_f2d+0x8c>)
 80037ec:	e7d2      	b.n	8003794 <__aeabi_f2d+0x20>
 80037ee:	0003      	movs	r3, r0
 80037f0:	002a      	movs	r2, r5
 80037f2:	3b0b      	subs	r3, #11
 80037f4:	409a      	lsls	r2, r3
 80037f6:	2500      	movs	r5, #0
 80037f8:	e7e3      	b.n	80037c2 <__aeabi_f2d+0x4e>
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	00000389 	.word	0x00000389
 8003800:	000007ff 	.word	0x000007ff

08003804 <__aeabi_d2f>:
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	004b      	lsls	r3, r1, #1
 8003808:	030f      	lsls	r7, r1, #12
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	4c3a      	ldr	r4, [pc, #232]	@ (80038f8 <__aeabi_d2f+0xf4>)
 800380e:	0f45      	lsrs	r5, r0, #29
 8003810:	b083      	sub	sp, #12
 8003812:	0a7f      	lsrs	r7, r7, #9
 8003814:	1c5e      	adds	r6, r3, #1
 8003816:	432f      	orrs	r7, r5
 8003818:	9000      	str	r0, [sp, #0]
 800381a:	9101      	str	r1, [sp, #4]
 800381c:	0fca      	lsrs	r2, r1, #31
 800381e:	00c5      	lsls	r5, r0, #3
 8003820:	4226      	tst	r6, r4
 8003822:	d00b      	beq.n	800383c <__aeabi_d2f+0x38>
 8003824:	4935      	ldr	r1, [pc, #212]	@ (80038fc <__aeabi_d2f+0xf8>)
 8003826:	185c      	adds	r4, r3, r1
 8003828:	2cfe      	cmp	r4, #254	@ 0xfe
 800382a:	dd13      	ble.n	8003854 <__aeabi_d2f+0x50>
 800382c:	20ff      	movs	r0, #255	@ 0xff
 800382e:	2300      	movs	r3, #0
 8003830:	05c0      	lsls	r0, r0, #23
 8003832:	4318      	orrs	r0, r3
 8003834:	07d2      	lsls	r2, r2, #31
 8003836:	4310      	orrs	r0, r2
 8003838:	b003      	add	sp, #12
 800383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800383c:	433d      	orrs	r5, r7
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <__aeabi_d2f+0x42>
 8003842:	2000      	movs	r0, #0
 8003844:	e7f4      	b.n	8003830 <__aeabi_d2f+0x2c>
 8003846:	2d00      	cmp	r5, #0
 8003848:	d0f0      	beq.n	800382c <__aeabi_d2f+0x28>
 800384a:	2380      	movs	r3, #128	@ 0x80
 800384c:	03db      	lsls	r3, r3, #15
 800384e:	20ff      	movs	r0, #255	@ 0xff
 8003850:	433b      	orrs	r3, r7
 8003852:	e7ed      	b.n	8003830 <__aeabi_d2f+0x2c>
 8003854:	2c00      	cmp	r4, #0
 8003856:	dd0c      	ble.n	8003872 <__aeabi_d2f+0x6e>
 8003858:	9b00      	ldr	r3, [sp, #0]
 800385a:	00ff      	lsls	r7, r7, #3
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	4183      	sbcs	r3, r0
 8003862:	0f69      	lsrs	r1, r5, #29
 8003864:	433b      	orrs	r3, r7
 8003866:	430b      	orrs	r3, r1
 8003868:	0759      	lsls	r1, r3, #29
 800386a:	d127      	bne.n	80038bc <__aeabi_d2f+0xb8>
 800386c:	08db      	lsrs	r3, r3, #3
 800386e:	b2e0      	uxtb	r0, r4
 8003870:	e7de      	b.n	8003830 <__aeabi_d2f+0x2c>
 8003872:	0021      	movs	r1, r4
 8003874:	3117      	adds	r1, #23
 8003876:	db31      	blt.n	80038dc <__aeabi_d2f+0xd8>
 8003878:	2180      	movs	r1, #128	@ 0x80
 800387a:	201e      	movs	r0, #30
 800387c:	0409      	lsls	r1, r1, #16
 800387e:	4339      	orrs	r1, r7
 8003880:	1b00      	subs	r0, r0, r4
 8003882:	281f      	cmp	r0, #31
 8003884:	dd2d      	ble.n	80038e2 <__aeabi_d2f+0xde>
 8003886:	2602      	movs	r6, #2
 8003888:	4276      	negs	r6, r6
 800388a:	1b34      	subs	r4, r6, r4
 800388c:	000e      	movs	r6, r1
 800388e:	40e6      	lsrs	r6, r4
 8003890:	0034      	movs	r4, r6
 8003892:	2820      	cmp	r0, #32
 8003894:	d004      	beq.n	80038a0 <__aeabi_d2f+0x9c>
 8003896:	481a      	ldr	r0, [pc, #104]	@ (8003900 <__aeabi_d2f+0xfc>)
 8003898:	4684      	mov	ip, r0
 800389a:	4463      	add	r3, ip
 800389c:	4099      	lsls	r1, r3
 800389e:	430d      	orrs	r5, r1
 80038a0:	002b      	movs	r3, r5
 80038a2:	1e59      	subs	r1, r3, #1
 80038a4:	418b      	sbcs	r3, r1
 80038a6:	4323      	orrs	r3, r4
 80038a8:	0759      	lsls	r1, r3, #29
 80038aa:	d003      	beq.n	80038b4 <__aeabi_d2f+0xb0>
 80038ac:	210f      	movs	r1, #15
 80038ae:	4019      	ands	r1, r3
 80038b0:	2904      	cmp	r1, #4
 80038b2:	d10b      	bne.n	80038cc <__aeabi_d2f+0xc8>
 80038b4:	019b      	lsls	r3, r3, #6
 80038b6:	2000      	movs	r0, #0
 80038b8:	0a5b      	lsrs	r3, r3, #9
 80038ba:	e7b9      	b.n	8003830 <__aeabi_d2f+0x2c>
 80038bc:	210f      	movs	r1, #15
 80038be:	4019      	ands	r1, r3
 80038c0:	2904      	cmp	r1, #4
 80038c2:	d104      	bne.n	80038ce <__aeabi_d2f+0xca>
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	0a5b      	lsrs	r3, r3, #9
 80038c8:	b2e0      	uxtb	r0, r4
 80038ca:	e7b1      	b.n	8003830 <__aeabi_d2f+0x2c>
 80038cc:	2400      	movs	r4, #0
 80038ce:	3304      	adds	r3, #4
 80038d0:	0159      	lsls	r1, r3, #5
 80038d2:	d5f7      	bpl.n	80038c4 <__aeabi_d2f+0xc0>
 80038d4:	3401      	adds	r4, #1
 80038d6:	2300      	movs	r3, #0
 80038d8:	b2e0      	uxtb	r0, r4
 80038da:	e7a9      	b.n	8003830 <__aeabi_d2f+0x2c>
 80038dc:	2000      	movs	r0, #0
 80038de:	2300      	movs	r3, #0
 80038e0:	e7a6      	b.n	8003830 <__aeabi_d2f+0x2c>
 80038e2:	4c08      	ldr	r4, [pc, #32]	@ (8003904 <__aeabi_d2f+0x100>)
 80038e4:	191c      	adds	r4, r3, r4
 80038e6:	002b      	movs	r3, r5
 80038e8:	40a5      	lsls	r5, r4
 80038ea:	40c3      	lsrs	r3, r0
 80038ec:	40a1      	lsls	r1, r4
 80038ee:	1e68      	subs	r0, r5, #1
 80038f0:	4185      	sbcs	r5, r0
 80038f2:	4329      	orrs	r1, r5
 80038f4:	430b      	orrs	r3, r1
 80038f6:	e7d7      	b.n	80038a8 <__aeabi_d2f+0xa4>
 80038f8:	000007fe 	.word	0x000007fe
 80038fc:	fffffc80 	.word	0xfffffc80
 8003900:	fffffca2 	.word	0xfffffca2
 8003904:	fffffc82 	.word	0xfffffc82

08003908 <__clzsi2>:
 8003908:	211c      	movs	r1, #28
 800390a:	2301      	movs	r3, #1
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	4298      	cmp	r0, r3
 8003910:	d301      	bcc.n	8003916 <__clzsi2+0xe>
 8003912:	0c00      	lsrs	r0, r0, #16
 8003914:	3910      	subs	r1, #16
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	4298      	cmp	r0, r3
 800391a:	d301      	bcc.n	8003920 <__clzsi2+0x18>
 800391c:	0a00      	lsrs	r0, r0, #8
 800391e:	3908      	subs	r1, #8
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	4298      	cmp	r0, r3
 8003924:	d301      	bcc.n	800392a <__clzsi2+0x22>
 8003926:	0900      	lsrs	r0, r0, #4
 8003928:	3904      	subs	r1, #4
 800392a:	a202      	add	r2, pc, #8	@ (adr r2, 8003934 <__clzsi2+0x2c>)
 800392c:	5c10      	ldrb	r0, [r2, r0]
 800392e:	1840      	adds	r0, r0, r1
 8003930:	4770      	bx	lr
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	02020304 	.word	0x02020304
 8003938:	01010101 	.word	0x01010101
	...

08003944 <__clzdi2>:
 8003944:	b510      	push	{r4, lr}
 8003946:	2900      	cmp	r1, #0
 8003948:	d103      	bne.n	8003952 <__clzdi2+0xe>
 800394a:	f7ff ffdd 	bl	8003908 <__clzsi2>
 800394e:	3020      	adds	r0, #32
 8003950:	e002      	b.n	8003958 <__clzdi2+0x14>
 8003952:	0008      	movs	r0, r1
 8003954:	f7ff ffd8 	bl	8003908 <__clzsi2>
 8003958:	bd10      	pop	{r4, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)

0800395c <bme680_i2c_read>:
// BME680 device structure
struct bme68x_dev bme680_dev;

// I2C read function for BME680
int8_t bme680_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 800395c:	b5b0      	push	{r4, r5, r7, lr}
 800395e:	b08a      	sub	sp, #40	@ 0x28
 8003960:	af04      	add	r7, sp, #16
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	210f      	movs	r1, #15
 800396a:	187b      	adds	r3, r7, r1
 800396c:	1c02      	adds	r2, r0, #0
 800396e:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;
    
    // Read data from BME680 using I2C
    status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, reg_addr, 
 8003970:	187b      	adds	r3, r7, r1
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b299      	uxth	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	b29b      	uxth	r3, r3
 800397a:	2517      	movs	r5, #23
 800397c:	197c      	adds	r4, r7, r5
 800397e:	480d      	ldr	r0, [pc, #52]	@ (80039b4 <bme680_i2c_read+0x58>)
 8003980:	2201      	movs	r2, #1
 8003982:	4252      	negs	r2, r2
 8003984:	9202      	str	r2, [sp, #8]
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2301      	movs	r3, #1
 800398e:	000a      	movs	r2, r1
 8003990:	21ec      	movs	r1, #236	@ 0xec
 8003992:	f004 ff5b 	bl	800884c <HAL_I2C_Mem_Read>
 8003996:	0003      	movs	r3, r0
 8003998:	7023      	strb	r3, [r4, #0]
                              I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY);
    
    if (status == HAL_OK) {
 800399a:	197b      	adds	r3, r7, r5
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <bme680_i2c_read+0x4a>
        return BME68X_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e001      	b.n	80039aa <bme680_i2c_read+0x4e>
    } else {
        return BME68X_E_COM_FAIL;
 80039a6:	2302      	movs	r3, #2
 80039a8:	425b      	negs	r3, r3
    }
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b006      	add	sp, #24
 80039b0:	bdb0      	pop	{r4, r5, r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	200002c4 	.word	0x200002c4

080039b8 <bme680_i2c_write>:

// I2C write function for BME680
int8_t bme680_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	b08a      	sub	sp, #40	@ 0x28
 80039bc:	af04      	add	r7, sp, #16
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	210f      	movs	r1, #15
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	1c02      	adds	r2, r0, #0
 80039ca:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;
    
    // Write data to BME680 using I2C
    status = HAL_I2C_Mem_Write(&hi2c1, BME68X_I2C_ADDR_LOW << 1, reg_addr, 
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b299      	uxth	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2517      	movs	r5, #23
 80039d8:	197c      	adds	r4, r7, r5
 80039da:	480d      	ldr	r0, [pc, #52]	@ (8003a10 <bme680_i2c_write+0x58>)
 80039dc:	2201      	movs	r2, #1
 80039de:	4252      	negs	r2, r2
 80039e0:	9202      	str	r2, [sp, #8]
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2301      	movs	r3, #1
 80039ea:	000a      	movs	r2, r1
 80039ec:	21ec      	movs	r1, #236	@ 0xec
 80039ee:	f004 fdff 	bl	80085f0 <HAL_I2C_Mem_Write>
 80039f2:	0003      	movs	r3, r0
 80039f4:	7023      	strb	r3, [r4, #0]
                               I2C_MEMADD_SIZE_8BIT, (uint8_t*)reg_data, len, HAL_MAX_DELAY);
    
    if (status == HAL_OK) {
 80039f6:	197b      	adds	r3, r7, r5
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <bme680_i2c_write+0x4a>
        return BME68X_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e001      	b.n	8003a06 <bme680_i2c_write+0x4e>
    } else {
        return BME68X_E_COM_FAIL;
 8003a02:	2302      	movs	r3, #2
 8003a04:	425b      	negs	r3, r3
    }
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b006      	add	sp, #24
 8003a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	200002c4 	.word	0x200002c4

08003a14 <bme680_delay_us>:

// Delay function for BME680
void bme680_delay_us(uint32_t period, void *intf_ptr)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
    // For small delays, use a simple loop
    // For larger delays, use HAL_Delay
    if (period < 1000) {
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	23fa      	movs	r3, #250	@ 0xfa
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d20c      	bcs.n	8003a42 <bme680_delay_us+0x2e>
        // Simple microsecond delay loop
        volatile uint32_t i;
        for (i = 0; i < period * 16; i++) {
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e003      	b.n	8003a36 <bme680_delay_us+0x22>
            __NOP();
 8003a2e:	46c0      	nop			@ (mov r8, r8)
        for (i = 0; i < period * 16; i++) {
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3301      	adds	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	011a      	lsls	r2, r3, #4
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d8f6      	bhi.n	8003a2e <bme680_delay_us+0x1a>
        }
    } else {
        // Convert microseconds to milliseconds for HAL_Delay
        HAL_Delay(period / 1000);
    }
}
 8003a40:	e009      	b.n	8003a56 <bme680_delay_us+0x42>
        HAL_Delay(period / 1000);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	22fa      	movs	r2, #250	@ 0xfa
 8003a46:	0091      	lsls	r1, r2, #2
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7fc fb81 	bl	8000150 <__udivsi3>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	0018      	movs	r0, r3
 8003a52:	f004 fab3 	bl	8007fbc <HAL_Delay>
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b004      	add	sp, #16
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <bme680_init_sensor>:

// Initialize BME680 sensor
int8_t bme680_init_sensor(void)
{
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	b0a8      	sub	sp, #160	@ 0xa0
 8003a64:	af00      	add	r7, sp, #0
    int8_t rslt;
    
    // Initialize device structure
    bme680_dev.intf = BME68X_I2C_INTF;
 8003a66:	4b38      	ldr	r3, [pc, #224]	@ (8003b48 <bme680_init_sensor+0xe8>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	731a      	strb	r2, [r3, #12]
    bme680_dev.read = bme680_i2c_read;
 8003a6c:	4b36      	ldr	r3, [pc, #216]	@ (8003b48 <bme680_init_sensor+0xe8>)
 8003a6e:	4a37      	ldr	r2, [pc, #220]	@ (8003b4c <bme680_init_sensor+0xec>)
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40
    bme680_dev.write = bme680_i2c_write;
 8003a72:	4b35      	ldr	r3, [pc, #212]	@ (8003b48 <bme680_init_sensor+0xe8>)
 8003a74:	4a36      	ldr	r2, [pc, #216]	@ (8003b50 <bme680_init_sensor+0xf0>)
 8003a76:	645a      	str	r2, [r3, #68]	@ 0x44
    bme680_dev.delay_us = bme680_delay_us;
 8003a78:	4b33      	ldr	r3, [pc, #204]	@ (8003b48 <bme680_init_sensor+0xe8>)
 8003a7a:	4a36      	ldr	r2, [pc, #216]	@ (8003b54 <bme680_init_sensor+0xf4>)
 8003a7c:	649a      	str	r2, [r3, #72]	@ 0x48
    bme680_dev.intf_ptr = NULL;
 8003a7e:	4b32      	ldr	r3, [pc, #200]	@ (8003b48 <bme680_init_sensor+0xe8>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	605a      	str	r2, [r3, #4]
    bme680_dev.amb_temp = 25;
 8003a84:	4b30      	ldr	r3, [pc, #192]	@ (8003b48 <bme680_init_sensor+0xe8>)
 8003a86:	2219      	movs	r2, #25
 8003a88:	739a      	strb	r2, [r3, #14]
    
    // Initialize the sensor
    rslt = bme68x_init(&bme680_dev);
 8003a8a:	259f      	movs	r5, #159	@ 0x9f
 8003a8c:	197c      	adds	r4, r7, r5
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b48 <bme680_init_sensor+0xe8>)
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 f929 	bl	8003ce8 <bme68x_init>
 8003a96:	0003      	movs	r3, r0
 8003a98:	7023      	strb	r3, [r4, #0]
    
    if (rslt == BME68X_OK) {
 8003a9a:	0028      	movs	r0, r5
 8003a9c:	183b      	adds	r3, r7, r0
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b25b      	sxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d132      	bne.n	8003b0c <bme680_init_sensor+0xac>
        // Configure sensor settings
        struct bme68x_conf conf;
        conf.os_hum = BME68X_OS_1X;
 8003aa6:	2114      	movs	r1, #20
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
        conf.os_pres = BME68X_OS_1X;
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	709a      	strb	r2, [r3, #2]
        conf.os_temp = BME68X_OS_1X;
 8003ab4:	187b      	adds	r3, r7, r1
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	705a      	strb	r2, [r3, #1]
        conf.filter = BME68X_FILTER_OFF;
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	2200      	movs	r2, #0
 8003abe:	70da      	strb	r2, [r3, #3]
        conf.odr = BME68X_ODR_NONE;
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	711a      	strb	r2, [r3, #4]
        
        rslt = bme68x_set_conf(&conf, &bme680_dev);
 8003ac6:	0005      	movs	r5, r0
 8003ac8:	183c      	adds	r4, r7, r0
 8003aca:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <bme680_init_sensor+0xe8>)
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 faa3 	bl	800401c <bme68x_set_conf>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	7023      	strb	r3, [r4, #0]
        
        if (rslt == BME68X_OK) {
 8003ada:	0028      	movs	r0, r5
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b25b      	sxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d112      	bne.n	8003b0c <bme680_init_sensor+0xac>
            // Configure gas sensor (optional - for gas resistance measurement)
            struct bme68x_heatr_conf heatr_conf;
            heatr_conf.enable = BME68X_DISABLE; // Disable gas sensor for now
 8003ae6:	003b      	movs	r3, r7
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
            heatr_conf.heatr_temp = 300;
 8003aec:	003b      	movs	r3, r7
 8003aee:	2296      	movs	r2, #150	@ 0x96
 8003af0:	0052      	lsls	r2, r2, #1
 8003af2:	805a      	strh	r2, [r3, #2]
            heatr_conf.heatr_dur = 100;
 8003af4:	003b      	movs	r3, r7
 8003af6:	2264      	movs	r2, #100	@ 0x64
 8003af8:	809a      	strh	r2, [r3, #4]
            
            rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme680_dev);
 8003afa:	183c      	adds	r4, r7, r0
 8003afc:	4a12      	ldr	r2, [pc, #72]	@ (8003b48 <bme680_init_sensor+0xe8>)
 8003afe:	003b      	movs	r3, r7
 8003b00:	0019      	movs	r1, r3
 8003b02:	2001      	movs	r0, #1
 8003b04:	f000 fe38 	bl	8004778 <bme68x_set_heatr_conf>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	7023      	strb	r3, [r4, #0]
    }
    
    // Debug output
    extern UART_HandleTypeDef huart2;
    char debug_msg[128];
    snprintf(debug_msg, sizeof(debug_msg), "BME680 Init Result: %d\r\n", rslt);
 8003b0c:	259f      	movs	r5, #159	@ 0x9f
 8003b0e:	197b      	adds	r3, r7, r5
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b25b      	sxtb	r3, r3
 8003b14:	4a10      	ldr	r2, [pc, #64]	@ (8003b58 <bme680_init_sensor+0xf8>)
 8003b16:	241c      	movs	r4, #28
 8003b18:	1938      	adds	r0, r7, r4
 8003b1a:	2180      	movs	r1, #128	@ 0x80
 8003b1c:	f008 f900 	bl	800bd20 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8003b20:	193b      	adds	r3, r7, r4
 8003b22:	0018      	movs	r0, r3
 8003b24:	f7fc faf8 	bl	8000118 <strlen>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	425b      	negs	r3, r3
 8003b30:	1939      	adds	r1, r7, r4
 8003b32:	480a      	ldr	r0, [pc, #40]	@ (8003b5c <bme680_init_sensor+0xfc>)
 8003b34:	f006 fa70 	bl	800a018 <HAL_UART_Transmit>
    
    return rslt;
 8003b38:	197b      	adds	r3, r7, r5
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b25b      	sxtb	r3, r3
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b028      	add	sp, #160	@ 0xa0
 8003b44:	bdb0      	pop	{r4, r5, r7, pc}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	200001f0 	.word	0x200001f0
 8003b4c:	0800395d 	.word	0x0800395d
 8003b50:	080039b9 	.word	0x080039b9
 8003b54:	08003a15 	.word	0x08003a15
 8003b58:	0800e0f0 	.word	0x0800e0f0
 8003b5c:	20000318 	.word	0x20000318

08003b60 <bme680_read_sensor_data>:

// Read sensor data
int8_t bme680_read_sensor_data(struct bme68x_data *data)
{
 8003b60:	b5b0      	push	{r4, r5, r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t n_data;
    
    // Set operation mode to forced mode
    rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme680_dev);
 8003b68:	2517      	movs	r5, #23
 8003b6a:	197c      	adds	r4, r7, r5
 8003b6c:	4b16      	ldr	r3, [pc, #88]	@ (8003bc8 <bme680_read_sensor_data+0x68>)
 8003b6e:	0019      	movs	r1, r3
 8003b70:	2001      	movs	r0, #1
 8003b72:	f000 fba3 	bl	80042bc <bme68x_set_op_mode>
 8003b76:	0003      	movs	r3, r0
 8003b78:	7023      	strb	r3, [r4, #0]
    
    if (rslt == BME68X_OK) {
 8003b7a:	002c      	movs	r4, r5
 8003b7c:	193b      	adds	r3, r7, r4
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	b25b      	sxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d118      	bne.n	8003bb8 <bme680_read_sensor_data+0x58>
        // Wait for measurement to complete
        uint32_t del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, NULL, &bme680_dev);
 8003b86:	4b10      	ldr	r3, [pc, #64]	@ (8003bc8 <bme680_read_sensor_data+0x68>)
 8003b88:	001a      	movs	r2, r3
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f000 fc3d 	bl	800440c <bme68x_get_meas_dur>
 8003b92:	0003      	movs	r3, r0
 8003b94:	613b      	str	r3, [r7, #16]
        bme680_dev.delay_us(del_period, bme680_dev.intf_ptr);
 8003b96:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <bme680_read_sensor_data+0x68>)
 8003b98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <bme680_read_sensor_data+0x68>)
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	4790      	blx	r2
        
        // Read the data
        rslt = bme68x_get_data(BME68X_FORCED_MODE, data, &n_data, &bme680_dev);
 8003ba4:	193c      	adds	r4, r7, r4
 8003ba6:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <bme680_read_sensor_data+0x68>)
 8003ba8:	220f      	movs	r2, #15
 8003baa:	18ba      	adds	r2, r7, r2
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	2001      	movs	r0, #1
 8003bb0:	f000 fcb0 	bl	8004514 <bme68x_get_data>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	7023      	strb	r3, [r4, #0]
    }
    
    return rslt;
 8003bb8:	2317      	movs	r3, #23
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b25b      	sxtb	r3, r3
}
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b006      	add	sp, #24
 8003bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc8:	200001f0 	.word	0x200001f0

08003bcc <bme680_test_sensor>:
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

// Test BME680 sensor
void bme680_test_sensor(void)
{
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	b0cf      	sub	sp, #316	@ 0x13c
 8003bd0:	af06      	add	r7, sp, #24
    struct bme68x_data sensor_data;
    extern UART_HandleTypeDef huart2;
    char test_msg[256];
    
    snprintf(test_msg, sizeof(test_msg), "Testing BME680 sensor...\r\n");
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8003c8c <bme680_test_sensor+0xc0>)
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	0059      	lsls	r1, r3, #1
 8003bd8:	2408      	movs	r4, #8
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f008 f89f 	bl	800bd20 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fc fa97 	bl	8000118 <strlen>
 8003bea:	0003      	movs	r3, r0
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	2301      	movs	r3, #1
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	1939      	adds	r1, r7, r4
 8003bf4:	4826      	ldr	r0, [pc, #152]	@ (8003c90 <bme680_test_sensor+0xc4>)
 8003bf6:	f006 fa0f 	bl	800a018 <HAL_UART_Transmit>
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8003bfa:	2484      	movs	r4, #132	@ 0x84
 8003bfc:	0064      	lsls	r4, r4, #1
 8003bfe:	193b      	adds	r3, r7, r4
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7ff ffad 	bl	8003b60 <bme680_read_sensor_data>
 8003c06:	1e03      	subs	r3, r0, #0
 8003c08:	d126      	bne.n	8003c58 <bme680_test_sensor+0x8c>
        snprintf(test_msg, sizeof(test_msg), 
                 "Test successful!\r\nTemperature: %.2f°C\r\nPressure: %.2f Pa\r\nHumidity: %.2f%%\r\n",
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 8003c0a:	0026      	movs	r6, r4
 8003c0c:	193b      	adds	r3, r7, r4
 8003c0e:	689b      	ldr	r3, [r3, #8]
        snprintf(test_msg, sizeof(test_msg), 
 8003c10:	1c18      	adds	r0, r3, #0
 8003c12:	f7ff fdaf 	bl	8003774 <__aeabi_f2d>
 8003c16:	0004      	movs	r4, r0
 8003c18:	000d      	movs	r5, r1
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 8003c1a:	19bb      	adds	r3, r7, r6
 8003c1c:	68db      	ldr	r3, [r3, #12]
        snprintf(test_msg, sizeof(test_msg), 
 8003c1e:	1c18      	adds	r0, r3, #0
 8003c20:	f7ff fda8 	bl	8003774 <__aeabi_f2d>
 8003c24:	6038      	str	r0, [r7, #0]
 8003c26:	6079      	str	r1, [r7, #4]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 8003c28:	19bb      	adds	r3, r7, r6
 8003c2a:	691b      	ldr	r3, [r3, #16]
        snprintf(test_msg, sizeof(test_msg), 
 8003c2c:	1c18      	adds	r0, r3, #0
 8003c2e:	f7ff fda1 	bl	8003774 <__aeabi_f2d>
 8003c32:	0002      	movs	r2, r0
 8003c34:	000b      	movs	r3, r1
 8003c36:	4e17      	ldr	r6, [pc, #92]	@ (8003c94 <bme680_test_sensor+0xc8>)
 8003c38:	2180      	movs	r1, #128	@ 0x80
 8003c3a:	0049      	lsls	r1, r1, #1
 8003c3c:	2008      	movs	r0, #8
 8003c3e:	1838      	adds	r0, r7, r0
 8003c40:	9204      	str	r2, [sp, #16]
 8003c42:	9305      	str	r3, [sp, #20]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	9202      	str	r2, [sp, #8]
 8003c4a:	9303      	str	r3, [sp, #12]
 8003c4c:	9400      	str	r4, [sp, #0]
 8003c4e:	9501      	str	r5, [sp, #4]
 8003c50:	0032      	movs	r2, r6
 8003c52:	f008 f865 	bl	800bd20 <sniprintf>
 8003c56:	e007      	b.n	8003c68 <bme680_test_sensor+0x9c>
    } else {
        snprintf(test_msg, sizeof(test_msg), "Test failed! Error reading sensor data.\r\n");
 8003c58:	4a0f      	ldr	r2, [pc, #60]	@ (8003c98 <bme680_test_sensor+0xcc>)
 8003c5a:	2380      	movs	r3, #128	@ 0x80
 8003c5c:	0059      	lsls	r1, r3, #1
 8003c5e:	2308      	movs	r3, #8
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	0018      	movs	r0, r3
 8003c64:	f008 f85c 	bl	800bd20 <sniprintf>
    }
    
    HAL_UART_Transmit(&huart2, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 8003c68:	2408      	movs	r4, #8
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f7fc fa53 	bl	8000118 <strlen>
 8003c72:	0003      	movs	r3, r0
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	2301      	movs	r3, #1
 8003c78:	425b      	negs	r3, r3
 8003c7a:	1939      	adds	r1, r7, r4
 8003c7c:	4804      	ldr	r0, [pc, #16]	@ (8003c90 <bme680_test_sensor+0xc4>)
 8003c7e:	f006 f9cb 	bl	800a018 <HAL_UART_Transmit>
}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b049      	add	sp, #292	@ 0x124
 8003c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	0800e148 	.word	0x0800e148
 8003c90:	20000318 	.word	0x20000318
 8003c94:	0800e164 	.word	0x0800e164
 8003c98:	0800e1b4 	.word	0x0800e1b4

08003c9c <bme680_check_sensor_presence>:

// Check if BME680 sensor is present on I2C bus
int8_t bme680_check_sensor_presence(void)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t chip_id;
    
    // Try to read chip ID from BME680
    status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, BME68X_REG_CHIP_ID, 
 8003ca2:	1dfc      	adds	r4, r7, #7
 8003ca4:	480f      	ldr	r0, [pc, #60]	@ (8003ce4 <bme680_check_sensor_presence+0x48>)
 8003ca6:	23fa      	movs	r3, #250	@ 0xfa
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	9302      	str	r3, [sp, #8]
 8003cac:	2301      	movs	r3, #1
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	1dbb      	adds	r3, r7, #6
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	22d0      	movs	r2, #208	@ 0xd0
 8003cb8:	21ec      	movs	r1, #236	@ 0xec
 8003cba:	f004 fdc7 	bl	800884c <HAL_I2C_Mem_Read>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	7023      	strb	r3, [r4, #0]
                              I2C_MEMADD_SIZE_8BIT, &chip_id, 1, 1000);
    
    if (status == HAL_OK && chip_id == BME68X_CHIP_ID) {
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <bme680_check_sensor_presence+0x3a>
 8003cca:	1dbb      	adds	r3, r7, #6
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b61      	cmp	r3, #97	@ 0x61
 8003cd0:	d101      	bne.n	8003cd6 <bme680_check_sensor_presence+0x3a>
        return BME68X_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e001      	b.n	8003cda <bme680_check_sensor_presence+0x3e>
    } else {
        return BME68X_E_DEV_NOT_FOUND;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	425b      	negs	r3, r3
    }
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b003      	add	sp, #12
 8003ce0:	bd90      	pop	{r4, r7, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	200002c4 	.word	0x200002c4

08003ce8 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8003ce8:	b5b0      	push	{r4, r5, r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f000 f93a 	bl	8003f6c <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	250f      	movs	r5, #15
 8003cfc:	197c      	adds	r4, r7, r5
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	20d0      	movs	r0, #208	@ 0xd0
 8003d04:	f000 f8d8 	bl	8003eb8 <bme68x_get_regs>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8003d0c:	197b      	adds	r3, r7, r5
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b25b      	sxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11b      	bne.n	8003d4e <bme68x_init+0x66>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b61      	cmp	r3, #97	@ 0x61
 8003d1c:	d113      	bne.n	8003d46 <bme68x_init+0x5e>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8003d1e:	197c      	adds	r4, r7, r5
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f002 fae8 	bl	80062f8 <read_variant_id>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8003d2c:	197b      	adds	r3, r7, r5
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b25b      	sxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <bme68x_init+0x66>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8003d36:	197c      	adds	r4, r7, r5
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f002 f9a5 	bl	800608a <get_calib_data>
 8003d40:	0003      	movs	r3, r0
 8003d42:	7023      	strb	r3, [r4, #0]
 8003d44:	e003      	b.n	8003d4e <bme68x_init+0x66>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8003d46:	230f      	movs	r3, #15
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	22fd      	movs	r2, #253	@ 0xfd
 8003d4c:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003d4e:	230f      	movs	r3, #15
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	b25b      	sxtb	r3, r3
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bdb0      	pop	{r4, r5, r7, pc}

08003d5e <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8003d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d60:	b08b      	sub	sp, #44	@ 0x2c
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	0018      	movs	r0, r3
 8003d72:	2314      	movs	r3, #20
 8003d74:	001a      	movs	r2, r3
 8003d76:	2100      	movs	r1, #0
 8003d78:	f008 f854 	bl	800be24 <memset>
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003d7c:	2527      	movs	r5, #39	@ 0x27
 8003d7e:	197c      	adds	r4, r7, r5
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f001 feff 	bl	8005b86 <null_ptr_check>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8003d8c:	197b      	adds	r3, r7, r5
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d000      	beq.n	8003d98 <bme68x_set_regs+0x3a>
 8003d96:	e083      	b.n	8003ea0 <bme68x_set_regs+0x142>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d100      	bne.n	8003da0 <bme68x_set_regs+0x42>
 8003d9e:	e07f      	b.n	8003ea0 <bme68x_set_regs+0x142>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d100      	bne.n	8003da8 <bme68x_set_regs+0x4a>
 8003da6:	e07b      	b.n	8003ea0 <bme68x_set_regs+0x142>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d100      	bne.n	8003db0 <bme68x_set_regs+0x52>
 8003dae:	e070      	b.n	8003e92 <bme68x_set_regs+0x134>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b0a      	cmp	r3, #10
 8003db4:	d900      	bls.n	8003db8 <bme68x_set_regs+0x5a>
 8003db6:	e06c      	b.n	8003e92 <bme68x_set_regs+0x134>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8003db8:	2324      	movs	r3, #36	@ 0x24
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	801a      	strh	r2, [r3, #0]
 8003dc0:	e03f      	b.n	8003e42 <bme68x_set_regs+0xe4>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	7b1b      	ldrb	r3, [r3, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11d      	bne.n	8003e06 <bme68x_set_regs+0xa8>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8003dca:	2524      	movs	r5, #36	@ 0x24
 8003dcc:	197b      	adds	r3, r7, r5
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	18d3      	adds	r3, r2, r3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2227      	movs	r2, #39	@ 0x27
 8003dd8:	18bc      	adds	r4, r7, r2
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	0011      	movs	r1, r2
 8003dde:	0018      	movs	r0, r3
 8003de0:	f001 fde3 	bl	80059aa <set_mem_page>
 8003de4:	0003      	movs	r3, r0
 8003de6:	7023      	strb	r3, [r4, #0]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8003de8:	197b      	adds	r3, r7, r5
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	18d3      	adds	r3, r2, r3
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	197b      	adds	r3, r7, r5
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	217f      	movs	r1, #127	@ 0x7f
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	b2d1      	uxtb	r1, r2
 8003dfe:	2210      	movs	r2, #16
 8003e00:	18ba      	adds	r2, r7, r2
 8003e02:	54d1      	strb	r1, [r2, r3]
 8003e04:	e00b      	b.n	8003e1e <bme68x_set_regs+0xc0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8003e06:	2124      	movs	r1, #36	@ 0x24
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	18d2      	adds	r2, r2, r3
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	7811      	ldrb	r1, [r2, #0]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	18ba      	adds	r2, r7, r2
 8003e1c:	54d1      	strb	r1, [r2, r3]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8003e1e:	2024      	movs	r0, #36	@ 0x24
 8003e20:	183b      	adds	r3, r7, r0
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	18d2      	adds	r2, r2, r3
 8003e28:	183b      	adds	r3, r7, r0
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	3301      	adds	r3, #1
 8003e30:	7811      	ldrb	r1, [r2, #0]
 8003e32:	2210      	movs	r2, #16
 8003e34:	18ba      	adds	r2, r7, r2
 8003e36:	54d1      	strb	r1, [r2, r3]
            for (index = 0; index < len; index++)
 8003e38:	183b      	adds	r3, r7, r0
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	183b      	adds	r3, r7, r0
 8003e3e:	3201      	adds	r2, #1
 8003e40:	801a      	strh	r2, [r3, #0]
 8003e42:	2324      	movs	r3, #36	@ 0x24
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d8b9      	bhi.n	8003dc2 <bme68x_set_regs+0x64>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8003e4e:	2627      	movs	r6, #39	@ 0x27
 8003e50:	19bb      	adds	r3, r7, r6
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b25b      	sxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d120      	bne.n	8003e9c <bme68x_set_regs+0x13e>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003e5e:	2110      	movs	r1, #16
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	7818      	ldrb	r0, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	1e5a      	subs	r2, r3, #1
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685d      	ldr	r5, [r3, #4]
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	002b      	movs	r3, r5
 8003e74:	47a0      	blx	r4
 8003e76:	0003      	movs	r3, r0
 8003e78:	0019      	movs	r1, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	224c      	movs	r2, #76	@ 0x4c
 8003e7e:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	224c      	movs	r2, #76	@ 0x4c
 8003e84:	569b      	ldrsb	r3, [r3, r2]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <bme68x_set_regs+0x13e>
                {
                    rslt = BME68X_E_COM_FAIL;
 8003e8a:	19bb      	adds	r3, r7, r6
 8003e8c:	22fe      	movs	r2, #254	@ 0xfe
 8003e8e:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8003e90:	e004      	b.n	8003e9c <bme68x_set_regs+0x13e>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8003e92:	2327      	movs	r3, #39	@ 0x27
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	22fc      	movs	r2, #252	@ 0xfc
 8003e98:	701a      	strb	r2, [r3, #0]
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003e9a:	e005      	b.n	8003ea8 <bme68x_set_regs+0x14a>
            if (rslt == BME68X_OK)
 8003e9c:	46c0      	nop			@ (mov r8, r8)
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003e9e:	e003      	b.n	8003ea8 <bme68x_set_regs+0x14a>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003ea0:	2327      	movs	r3, #39	@ 0x27
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	22ff      	movs	r2, #255	@ 0xff
 8003ea6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003ea8:	2327      	movs	r3, #39	@ 0x27
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	b25b      	sxtb	r3, r3
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b00b      	add	sp, #44	@ 0x2c
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eb8 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	250f      	movs	r5, #15
 8003ec6:	197b      	adds	r3, r7, r5
 8003ec8:	1c02      	adds	r2, r0, #0
 8003eca:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003ecc:	2617      	movs	r6, #23
 8003ece:	19bc      	adds	r4, r7, r6
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f001 fe57 	bl	8005b86 <null_ptr_check>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_data)
 8003edc:	19bb      	adds	r3, r7, r6
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	b25b      	sxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d136      	bne.n	8003f54 <bme68x_get_regs+0x9c>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d033      	beq.n	8003f54 <bme68x_get_regs+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	7b1b      	ldrb	r3, [r3, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d115      	bne.n	8003f20 <bme68x_get_regs+0x68>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8003ef4:	19bc      	adds	r4, r7, r6
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	197b      	adds	r3, r7, r5
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f001 fd53 	bl	80059aa <set_mem_page>
 8003f04:	0003      	movs	r3, r0
 8003f06:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8003f08:	19bb      	adds	r3, r7, r6
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <bme68x_get_regs+0x68>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8003f12:	197b      	adds	r3, r7, r5
 8003f14:	197a      	adds	r2, r7, r5
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	2180      	movs	r1, #128	@ 0x80
 8003f1a:	4249      	negs	r1, r1
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	701a      	strb	r2, [r3, #0]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685d      	ldr	r5, [r3, #4]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	230f      	movs	r3, #15
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	7818      	ldrb	r0, [r3, #0]
 8003f32:	002b      	movs	r3, r5
 8003f34:	47a0      	blx	r4
 8003f36:	0003      	movs	r3, r0
 8003f38:	0019      	movs	r1, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	224c      	movs	r2, #76	@ 0x4c
 8003f3e:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	224c      	movs	r2, #76	@ 0x4c
 8003f44:	569b      	ldrsb	r3, [r3, r2]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <bme68x_get_regs+0xa4>
        {
            rslt = BME68X_E_COM_FAIL;
 8003f4a:	2317      	movs	r3, #23
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	22fe      	movs	r2, #254	@ 0xfe
 8003f50:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != 0)
 8003f52:	e003      	b.n	8003f5c <bme68x_get_regs+0xa4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003f54:	2317      	movs	r3, #23
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	22ff      	movs	r2, #255	@ 0xff
 8003f5a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003f5c:	2317      	movs	r3, #23
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b25b      	sxtb	r3, r3
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b007      	add	sp, #28
 8003f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f6c <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8003f6c:	b5b0      	push	{r4, r5, r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8003f74:	230e      	movs	r3, #14
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	22e0      	movs	r2, #224	@ 0xe0
 8003f7a:	701a      	strb	r2, [r3, #0]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8003f7c:	230d      	movs	r3, #13
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	22b6      	movs	r2, #182	@ 0xb6
 8003f82:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003f84:	250f      	movs	r5, #15
 8003f86:	197c      	adds	r4, r7, r5
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f001 fdfb 	bl	8005b86 <null_ptr_check>
 8003f90:	0003      	movs	r3, r0
 8003f92:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8003f94:	002a      	movs	r2, r5
 8003f96:	18bb      	adds	r3, r7, r2
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b25b      	sxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d133      	bne.n	8004008 <bme68x_soft_reset+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7b1b      	ldrb	r3, [r3, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <bme68x_soft_reset+0x4a>
        {
            rslt = get_mem_page(dev);
 8003fa8:	18bc      	adds	r4, r7, r2
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f001 fd79 	bl	8005aa4 <get_mem_page>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	7023      	strb	r3, [r4, #0]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8003fb6:	250f      	movs	r5, #15
 8003fb8:	197b      	adds	r3, r7, r5
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d122      	bne.n	8004008 <bme68x_soft_reset+0x9c>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003fc2:	197c      	adds	r4, r7, r5
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	220d      	movs	r2, #13
 8003fc8:	18b9      	adds	r1, r7, r2
 8003fca:	220e      	movs	r2, #14
 8003fcc:	18b8      	adds	r0, r7, r2
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f7ff fec5 	bl	8003d5e <bme68x_set_regs>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8003fd8:	002c      	movs	r4, r5
 8003fda:	193b      	adds	r3, r7, r4
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d111      	bne.n	8004008 <bme68x_soft_reset+0x9c>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	480a      	ldr	r0, [pc, #40]	@ (8004018 <bme68x_soft_reset+0xac>)
 8003fee:	0019      	movs	r1, r3
 8003ff0:	4790      	blx	r2

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	7b1b      	ldrb	r3, [r3, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <bme68x_soft_reset+0x9c>
                {
                    rslt = get_mem_page(dev);
 8003ffa:	193c      	adds	r4, r7, r4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f001 fd50 	bl	8005aa4 <get_mem_page>
 8004004:	0003      	movs	r3, r0
 8004006:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 8004008:	230f      	movs	r3, #15
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b25b      	sxtb	r3, r3
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b004      	add	sp, #16
 8004016:	bdb0      	pop	{r4, r5, r7, pc}
 8004018:	00002710 	.word	0x00002710

0800401c <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 800401c:	b5b0      	push	{r4, r5, r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8004026:	231e      	movs	r3, #30
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	231d      	movs	r3, #29
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8004036:	2314      	movs	r3, #20
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	4a9f      	ldr	r2, [pc, #636]	@ (80042b8 <bme68x_set_conf+0x29c>)
 800403c:	6811      	ldr	r1, [r2, #0]
 800403e:	6019      	str	r1, [r3, #0]
 8004040:	7912      	ldrb	r2, [r2, #4]
 8004042:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8004044:	230c      	movs	r3, #12
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	0018      	movs	r0, r3
 800404a:	2305      	movs	r3, #5
 800404c:	001a      	movs	r2, r3
 800404e:	2100      	movs	r1, #0
 8004050:	f007 fee8 	bl	800be24 <memset>

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8004054:	251f      	movs	r5, #31
 8004056:	197c      	adds	r4, r7, r5
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	231c      	movs	r3, #28
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	0011      	movs	r1, r2
 8004060:	0018      	movs	r0, r3
 8004062:	f000 f9ab 	bl	80043bc <bme68x_get_op_mode>
 8004066:	0003      	movs	r3, r0
 8004068:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 800406a:	197b      	adds	r3, r7, r5
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b25b      	sxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d107      	bne.n	8004084 <bme68x_set_conf+0x68>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8004074:	197c      	adds	r4, r7, r5
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	0019      	movs	r1, r3
 800407a:	2000      	movs	r0, #0
 800407c:	f000 f91e 	bl	80042bc <bme68x_set_op_mode>
 8004080:	0003      	movs	r3, r0
 8004082:	7023      	strb	r3, [r4, #0]
    }

    if (conf == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <bme68x_set_conf+0x78>
    {
        rslt = BME68X_E_NULL_PTR;
 800408a:	231f      	movs	r3, #31
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	22ff      	movs	r2, #255	@ 0xff
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	e0e2      	b.n	800425a <bme68x_set_conf+0x23e>
    }
    else if (rslt == BME68X_OK)
 8004094:	251f      	movs	r5, #31
 8004096:	197b      	adds	r3, r7, r5
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	b25b      	sxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d000      	beq.n	80040a2 <bme68x_set_conf+0x86>
 80040a0:	e0db      	b.n	800425a <bme68x_set_conf+0x23e>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 80040a2:	2314      	movs	r3, #20
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	7818      	ldrb	r0, [r3, #0]
 80040a8:	197c      	adds	r4, r7, r5
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	220c      	movs	r2, #12
 80040ae:	18b9      	adds	r1, r7, r2
 80040b0:	2205      	movs	r2, #5
 80040b2:	f7ff ff01 	bl	8003eb8 <bme68x_get_regs>
 80040b6:	0003      	movs	r3, r0
 80040b8:	7023      	strb	r3, [r4, #0]
        dev->info_msg = BME68X_OK;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	224d      	movs	r2, #77	@ 0x4d
 80040be:	2100      	movs	r1, #0
 80040c0:	5499      	strb	r1, [r3, r2]
        if (rslt == BME68X_OK)
 80040c2:	197b      	adds	r3, r7, r5
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	b25b      	sxtb	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <bme68x_set_conf+0xc4>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3303      	adds	r3, #3
 80040d0:	197c      	adds	r4, r7, r5
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	2107      	movs	r1, #7
 80040d6:	0018      	movs	r0, r3
 80040d8:	f001 fd1c 	bl	8005b14 <boundary_check>
 80040dc:	0003      	movs	r3, r0
 80040de:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80040e0:	221f      	movs	r2, #31
 80040e2:	18bb      	adds	r3, r7, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3301      	adds	r3, #1
 80040f0:	18bc      	adds	r4, r7, r2
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	2105      	movs	r1, #5
 80040f6:	0018      	movs	r0, r3
 80040f8:	f001 fd0c 	bl	8005b14 <boundary_check>
 80040fc:	0003      	movs	r3, r0
 80040fe:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8004100:	221f      	movs	r2, #31
 8004102:	18bb      	adds	r3, r7, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b25b      	sxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <bme68x_set_conf+0x104>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3302      	adds	r3, #2
 8004110:	18bc      	adds	r4, r7, r2
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	2105      	movs	r1, #5
 8004116:	0018      	movs	r0, r3
 8004118:	f001 fcfc 	bl	8005b14 <boundary_check>
 800411c:	0003      	movs	r3, r0
 800411e:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8004120:	221f      	movs	r2, #31
 8004122:	18bb      	adds	r3, r7, r2
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b25b      	sxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d108      	bne.n	800413e <bme68x_set_conf+0x122>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	18bc      	adds	r4, r7, r2
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	2105      	movs	r1, #5
 8004134:	0018      	movs	r0, r3
 8004136:	f001 fced 	bl	8005b14 <boundary_check>
 800413a:	0003      	movs	r3, r0
 800413c:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 800413e:	221f      	movs	r2, #31
 8004140:	18bb      	adds	r3, r7, r2
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b25b      	sxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <bme68x_set_conf+0x142>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	18bc      	adds	r4, r7, r2
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	2108      	movs	r1, #8
 8004154:	0018      	movs	r0, r3
 8004156:	f001 fcdd 	bl	8005b14 <boundary_check>
 800415a:	0003      	movs	r3, r0
 800415c:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 800415e:	231f      	movs	r3, #31
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	b25b      	sxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d177      	bne.n	800425a <bme68x_set_conf+0x23e>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 800416a:	200c      	movs	r0, #12
 800416c:	183b      	adds	r3, r7, r0
 800416e:	791b      	ldrb	r3, [r3, #4]
 8004170:	b25b      	sxtb	r3, r3
 8004172:	221c      	movs	r2, #28
 8004174:	4393      	bics	r3, r2
 8004176:	b25a      	sxtb	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	78db      	ldrb	r3, [r3, #3]
 800417c:	b25b      	sxtb	r3, r3
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	b25b      	sxtb	r3, r3
 8004182:	211c      	movs	r1, #28
 8004184:	400b      	ands	r3, r1
 8004186:	b25b      	sxtb	r3, r3
 8004188:	4313      	orrs	r3, r2
 800418a:	b25b      	sxtb	r3, r3
 800418c:	b2da      	uxtb	r2, r3
 800418e:	183b      	adds	r3, r7, r0
 8004190:	711a      	strb	r2, [r3, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8004192:	183b      	adds	r3, r7, r0
 8004194:	78db      	ldrb	r3, [r3, #3]
 8004196:	b25b      	sxtb	r3, r3
 8004198:	221f      	movs	r2, #31
 800419a:	4013      	ands	r3, r2
 800419c:	b25a      	sxtb	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	785b      	ldrb	r3, [r3, #1]
 80041a2:	b25b      	sxtb	r3, r3
 80041a4:	015b      	lsls	r3, r3, #5
 80041a6:	b25b      	sxtb	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b25b      	sxtb	r3, r3
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	183b      	adds	r3, r7, r0
 80041b0:	70da      	strb	r2, [r3, #3]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 80041b2:	183b      	adds	r3, r7, r0
 80041b4:	78db      	ldrb	r3, [r3, #3]
 80041b6:	b25b      	sxtb	r3, r3
 80041b8:	221c      	movs	r2, #28
 80041ba:	4393      	bics	r3, r2
 80041bc:	b25a      	sxtb	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	789b      	ldrb	r3, [r3, #2]
 80041c2:	b25b      	sxtb	r3, r3
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	b25b      	sxtb	r3, r3
 80041c8:	211c      	movs	r1, #28
 80041ca:	400b      	ands	r3, r1
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	4313      	orrs	r3, r2
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	183b      	adds	r3, r7, r0
 80041d6:	70da      	strb	r2, [r3, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80041d8:	183b      	adds	r3, r7, r0
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	b25b      	sxtb	r3, r3
 80041de:	2207      	movs	r2, #7
 80041e0:	4393      	bics	r3, r2
 80041e2:	b25a      	sxtb	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b25b      	sxtb	r3, r3
 80041ea:	2107      	movs	r1, #7
 80041ec:	400b      	ands	r3, r1
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	183b      	adds	r3, r7, r0
 80041f8:	705a      	strb	r2, [r3, #1]
            if (conf->odr != BME68X_ODR_NONE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	791b      	ldrb	r3, [r3, #4]
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d008      	beq.n	8004214 <bme68x_set_conf+0x1f8>
            {
                odr20 = conf->odr;
 8004202:	231e      	movs	r3, #30
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	7912      	ldrb	r2, [r2, #4]
 800420a:	701a      	strb	r2, [r3, #0]
                odr3 = 0;
 800420c:	231d      	movs	r3, #29
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8004214:	210c      	movs	r1, #12
 8004216:	187b      	adds	r3, r7, r1
 8004218:	791b      	ldrb	r3, [r3, #4]
 800421a:	b25b      	sxtb	r3, r3
 800421c:	221f      	movs	r2, #31
 800421e:	4013      	ands	r3, r2
 8004220:	b25a      	sxtb	r2, r3
 8004222:	231e      	movs	r3, #30
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b25b      	sxtb	r3, r3
 800422a:	015b      	lsls	r3, r3, #5
 800422c:	b25b      	sxtb	r3, r3
 800422e:	4313      	orrs	r3, r2
 8004230:	b25b      	sxtb	r3, r3
 8004232:	b2da      	uxtb	r2, r3
 8004234:	187b      	adds	r3, r7, r1
 8004236:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8004238:	187b      	adds	r3, r7, r1
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	b25b      	sxtb	r3, r3
 800423e:	227f      	movs	r2, #127	@ 0x7f
 8004240:	4013      	ands	r3, r2
 8004242:	b25a      	sxtb	r2, r3
 8004244:	231d      	movs	r3, #29
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b25b      	sxtb	r3, r3
 800424c:	01db      	lsls	r3, r3, #7
 800424e:	b25b      	sxtb	r3, r3
 8004250:	4313      	orrs	r3, r2
 8004252:	b25b      	sxtb	r3, r3
 8004254:	b2da      	uxtb	r2, r3
 8004256:	187b      	adds	r3, r7, r1
 8004258:	701a      	strb	r2, [r3, #0]
        }
    }

    if (rslt == BME68X_OK)
 800425a:	221f      	movs	r2, #31
 800425c:	18bb      	adds	r3, r7, r2
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	b25b      	sxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <bme68x_set_conf+0x260>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8004266:	18bc      	adds	r4, r7, r2
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	220c      	movs	r2, #12
 800426c:	18b9      	adds	r1, r7, r2
 800426e:	2214      	movs	r2, #20
 8004270:	18b8      	adds	r0, r7, r2
 8004272:	2205      	movs	r2, #5
 8004274:	f7ff fd73 	bl	8003d5e <bme68x_set_regs>
 8004278:	0003      	movs	r3, r0
 800427a:	7023      	strb	r3, [r4, #0]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 800427c:	221c      	movs	r2, #28
 800427e:	18bb      	adds	r3, r7, r2
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00f      	beq.n	80042a6 <bme68x_set_conf+0x28a>
 8004286:	211f      	movs	r1, #31
 8004288:	187b      	adds	r3, r7, r1
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b25b      	sxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <bme68x_set_conf+0x28a>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8004292:	18bb      	adds	r3, r7, r2
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	187c      	adds	r4, r7, r1
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	0011      	movs	r1, r2
 800429c:	0018      	movs	r0, r3
 800429e:	f000 f80d 	bl	80042bc <bme68x_set_op_mode>
 80042a2:	0003      	movs	r3, r0
 80042a4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80042a6:	231f      	movs	r3, #31
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b25b      	sxtb	r3, r3
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b008      	add	sp, #32
 80042b4:	bdb0      	pop	{r4, r5, r7, pc}
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	0800e1e0 	.word	0x0800e1e0

080042bc <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80042bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	0002      	movs	r2, r0
 80042c4:	6039      	str	r1, [r7, #0]
 80042c6:	1dfb      	adds	r3, r7, #7
 80042c8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80042ca:	230e      	movs	r3, #14
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80042d2:	230c      	movs	r3, #12
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	2274      	movs	r2, #116	@ 0x74
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80042da:	260f      	movs	r6, #15
 80042dc:	19bc      	adds	r4, r7, r6
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	250d      	movs	r5, #13
 80042e2:	1979      	adds	r1, r7, r5
 80042e4:	2201      	movs	r2, #1
 80042e6:	2074      	movs	r0, #116	@ 0x74
 80042e8:	f7ff fde6 	bl	8003eb8 <bme68x_get_regs>
 80042ec:	0003      	movs	r3, r0
 80042ee:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 80042f0:	0034      	movs	r4, r6
 80042f2:	193b      	adds	r3, r7, r4
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	b25b      	sxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d123      	bne.n	8004344 <bme68x_set_op_mode+0x88>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80042fc:	0028      	movs	r0, r5
 80042fe:	183b      	adds	r3, r7, r0
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	250e      	movs	r5, #14
 8004304:	197b      	adds	r3, r7, r5
 8004306:	2103      	movs	r1, #3
 8004308:	400a      	ands	r2, r1
 800430a:	701a      	strb	r2, [r3, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
 800430c:	197b      	adds	r3, r7, r5
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d017      	beq.n	8004344 <bme68x_set_op_mode+0x88>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8004314:	183b      	adds	r3, r7, r0
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2203      	movs	r2, #3
 800431a:	4393      	bics	r3, r2
 800431c:	b2da      	uxtb	r2, r3
 800431e:	183b      	adds	r3, r7, r0
 8004320:	701a      	strb	r2, [r3, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8004322:	193c      	adds	r4, r7, r4
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	1839      	adds	r1, r7, r0
 8004328:	220c      	movs	r2, #12
 800432a:	18b8      	adds	r0, r7, r2
 800432c:	2201      	movs	r2, #1
 800432e:	f7ff fd16 	bl	8003d5e <bme68x_set_regs>
 8004332:	0003      	movs	r3, r0
 8004334:	7023      	strb	r3, [r4, #0]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	481e      	ldr	r0, [pc, #120]	@ (80043b8 <bme68x_set_op_mode+0xfc>)
 8004340:	0019      	movs	r1, r3
 8004342:	4790      	blx	r2
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8004344:	230e      	movs	r3, #14
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <bme68x_set_op_mode+0x9e>
 800434e:	230f      	movs	r3, #15
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b25b      	sxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0bf      	beq.n	80042da <bme68x_set_op_mode+0x1e>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 800435a:	1dfb      	adds	r3, r7, #7
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d021      	beq.n	80043a6 <bme68x_set_op_mode+0xea>
 8004362:	240f      	movs	r4, #15
 8004364:	193b      	adds	r3, r7, r4
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b25b      	sxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d11b      	bne.n	80043a6 <bme68x_set_op_mode+0xea>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 800436e:	200d      	movs	r0, #13
 8004370:	183b      	adds	r3, r7, r0
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b25b      	sxtb	r3, r3
 8004376:	2203      	movs	r2, #3
 8004378:	4393      	bics	r3, r2
 800437a:	b25a      	sxtb	r2, r3
 800437c:	1dfb      	adds	r3, r7, #7
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b25b      	sxtb	r3, r3
 8004382:	2103      	movs	r1, #3
 8004384:	400b      	ands	r3, r1
 8004386:	b25b      	sxtb	r3, r3
 8004388:	4313      	orrs	r3, r2
 800438a:	b25b      	sxtb	r3, r3
 800438c:	b2da      	uxtb	r2, r3
 800438e:	183b      	adds	r3, r7, r0
 8004390:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8004392:	193c      	adds	r4, r7, r4
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	1839      	adds	r1, r7, r0
 8004398:	220c      	movs	r2, #12
 800439a:	18b8      	adds	r0, r7, r2
 800439c:	2201      	movs	r2, #1
 800439e:	f7ff fcde 	bl	8003d5e <bme68x_set_regs>
 80043a2:	0003      	movs	r3, r0
 80043a4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80043a6:	230f      	movs	r3, #15
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	b25b      	sxtb	r3, r3
}
 80043ae:	0018      	movs	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b005      	add	sp, #20
 80043b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b6:	46c0      	nop			@ (mov r8, r8)
 80043b8:	00002710 	.word	0x00002710

080043bc <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 80043bc:	b5b0      	push	{r4, r5, r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d012      	beq.n	80043f2 <bme68x_get_op_mode+0x36>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 80043cc:	230f      	movs	r3, #15
 80043ce:	18fc      	adds	r4, r7, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	250e      	movs	r5, #14
 80043d4:	1979      	adds	r1, r7, r5
 80043d6:	2201      	movs	r2, #1
 80043d8:	2074      	movs	r0, #116	@ 0x74
 80043da:	f7ff fd6d 	bl	8003eb8 <bme68x_get_regs>
 80043de:	0003      	movs	r3, r0
 80043e0:	7023      	strb	r3, [r4, #0]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 80043e2:	197b      	adds	r3, r7, r5
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2203      	movs	r2, #3
 80043e8:	4013      	ands	r3, r2
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e003      	b.n	80043fa <bme68x_get_op_mode+0x3e>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80043f2:	230f      	movs	r3, #15
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	22ff      	movs	r2, #255	@ 0xff
 80043f8:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80043fa:	230f      	movs	r3, #15
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b25b      	sxtb	r3, r3
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b004      	add	sp, #16
 8004408:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800440c <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 800440c:	b5b0      	push	{r4, r5, r7, lr}
 800440e:	b08a      	sub	sp, #40	@ 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	230f      	movs	r3, #15
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	1c02      	adds	r2, r0, #0
 800441c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 800441e:	2300      	movs	r3, #0
 8004420:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8004422:	2314      	movs	r3, #20
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	4a37      	ldr	r2, [pc, #220]	@ (8004504 <bme68x_get_meas_dur+0xf8>)
 8004428:	6811      	ldr	r1, [r2, #0]
 800442a:	6019      	str	r1, [r3, #0]
 800442c:	8892      	ldrh	r2, [r2, #4]
 800442e:	809a      	strh	r2, [r3, #4]

    if (conf != NULL)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d061      	beq.n	80044fa <bme68x_get_meas_dur+0xee>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	2527      	movs	r5, #39	@ 0x27
 800443c:	197c      	adds	r4, r7, r5
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	2105      	movs	r1, #5
 8004442:	0018      	movs	r0, r3
 8004444:	f001 fb66 	bl	8005b14 <boundary_check>
 8004448:	0003      	movs	r3, r0
 800444a:	7023      	strb	r3, [r4, #0]

        if (rslt == BME68X_OK)
 800444c:	002a      	movs	r2, r5
 800444e:	18bb      	adds	r3, r7, r2
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	b25b      	sxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <bme68x_get_meas_dur+0x60>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	3302      	adds	r3, #2
 800445c:	18bc      	adds	r4, r7, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	2105      	movs	r1, #5
 8004462:	0018      	movs	r0, r3
 8004464:	f001 fb56 	bl	8005b14 <boundary_check>
 8004468:	0003      	movs	r3, r0
 800446a:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 800446c:	2227      	movs	r2, #39	@ 0x27
 800446e:	18bb      	adds	r3, r7, r2
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b25b      	sxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <bme68x_get_meas_dur+0x7e>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	18bc      	adds	r4, r7, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	2105      	movs	r1, #5
 8004480:	0018      	movs	r0, r3
 8004482:	f001 fb47 	bl	8005b14 <boundary_check>
 8004486:	0003      	movs	r3, r0
 8004488:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 800448a:	2327      	movs	r3, #39	@ 0x27
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	b25b      	sxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d131      	bne.n	80044fa <bme68x_get_meas_dur+0xee>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	785b      	ldrb	r3, [r3, #1]
 800449a:	001a      	movs	r2, r3
 800449c:	2114      	movs	r1, #20
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	5c9b      	ldrb	r3, [r3, r2]
 80044a2:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	789b      	ldrb	r3, [r3, #2]
 80044a8:	001a      	movs	r2, r3
 80044aa:	187b      	adds	r3, r7, r1
 80044ac:	5c9b      	ldrb	r3, [r3, r2]
 80044ae:	001a      	movs	r2, r3
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	001a      	movs	r2, r3
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	5c9b      	ldrb	r3, [r3, r2]
 80044c0:	001a      	movs	r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004508 <bme68x_get_meas_dur+0xfc>)
 80044cc:	4353      	muls	r3, r2
 80044ce:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	4a0e      	ldr	r2, [pc, #56]	@ (800450c <bme68x_get_meas_dur+0x100>)
 80044d4:	4694      	mov	ip, r2
 80044d6:	4463      	add	r3, ip
 80044d8:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004510 <bme68x_get_meas_dur+0x104>)
 80044de:	4694      	mov	ip, r2
 80044e0:	4463      	add	r3, ip
 80044e2:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 80044e4:	230f      	movs	r3, #15
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d005      	beq.n	80044fa <bme68x_get_meas_dur+0xee>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	22fa      	movs	r2, #250	@ 0xfa
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4694      	mov	ip, r2
 80044f6:	4463      	add	r3, ip
 80044f8:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 80044fa:	6a3b      	ldr	r3, [r7, #32]
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b00a      	add	sp, #40	@ 0x28
 8004502:	bdb0      	pop	{r4, r5, r7, pc}
 8004504:	0800e1e8 	.word	0x0800e1e8
 8004508:	000007ab 	.word	0x000007ab
 800450c:	00000774 	.word	0x00000774
 8004510:	00000951 	.word	0x00000951

08004514 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8004514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004516:	b09b      	sub	sp, #108	@ 0x6c
 8004518:	af00      	add	r7, sp, #0
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	260f      	movs	r6, #15
 8004522:	19bb      	adds	r3, r7, r6
 8004524:	1c02      	adds	r2, r0, #0
 8004526:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8004528:	2366      	movs	r3, #102	@ 0x66
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	2365      	movs	r3, #101	@ 0x65
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	2364      	movs	r3, #100	@ 0x64
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *field_ptr[3] = { 0 };
 8004540:	2458      	movs	r4, #88	@ 0x58
 8004542:	193b      	adds	r3, r7, r4
 8004544:	0018      	movs	r0, r3
 8004546:	230c      	movs	r3, #12
 8004548:	001a      	movs	r2, r3
 800454a:	2100      	movs	r1, #0
 800454c:	f007 fc6a 	bl	800be24 <memset>
    struct bme68x_data field_data[3] = { { 0 } };
 8004550:	2510      	movs	r5, #16
 8004552:	197b      	adds	r3, r7, r5
 8004554:	0018      	movs	r0, r3
 8004556:	2348      	movs	r3, #72	@ 0x48
 8004558:	001a      	movs	r2, r3
 800455a:	2100      	movs	r1, #0
 800455c:	f007 fc62 	bl	800be24 <memset>

    field_ptr[0] = &field_data[0];
 8004560:	193b      	adds	r3, r7, r4
 8004562:	0029      	movs	r1, r5
 8004564:	187a      	adds	r2, r7, r1
 8004566:	601a      	str	r2, [r3, #0]
    field_ptr[1] = &field_data[1];
 8004568:	193b      	adds	r3, r7, r4
 800456a:	187a      	adds	r2, r7, r1
 800456c:	3218      	adds	r2, #24
 800456e:	605a      	str	r2, [r3, #4]
    field_ptr[2] = &field_data[2];
 8004570:	193b      	adds	r3, r7, r4
 8004572:	187a      	adds	r2, r7, r1
 8004574:	3230      	adds	r2, #48	@ 0x30
 8004576:	609a      	str	r2, [r3, #8]

    rslt = null_ptr_check(dev);
 8004578:	2567      	movs	r5, #103	@ 0x67
 800457a:	197c      	adds	r4, r7, r5
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	0018      	movs	r0, r3
 8004580:	f001 fb01 	bl	8005b86 <null_ptr_check>
 8004584:	0003      	movs	r3, r0
 8004586:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && (data != NULL))
 8004588:	002a      	movs	r2, r5
 800458a:	18bb      	adds	r3, r7, r2
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	b25b      	sxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d000      	beq.n	8004596 <bme68x_get_data+0x82>
 8004594:	e0e3      	b.n	800475e <bme68x_get_data+0x24a>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d100      	bne.n	800459e <bme68x_get_data+0x8a>
 800459c:	e0df      	b.n	800475e <bme68x_get_data+0x24a>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 800459e:	19bb      	adds	r3, r7, r6
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d122      	bne.n	80045ec <bme68x_get_data+0xd8>
        {
            rslt = read_field_data(0, data, dev);
 80045a6:	0015      	movs	r5, r2
 80045a8:	18bc      	adds	r4, r7, r2
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	0019      	movs	r1, r3
 80045b0:	2000      	movs	r0, #0
 80045b2:	f000 fe67 	bl	8005284 <read_field_data>
 80045b6:	0003      	movs	r3, r0
 80045b8:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 80045ba:	197b      	adds	r3, r7, r5
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b25b      	sxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d000      	beq.n	80045c6 <bme68x_get_data+0xb2>
 80045c4:	e0bd      	b.n	8004742 <bme68x_get_data+0x22e>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	da04      	bge.n	80045da <bme68x_get_data+0xc6>
                {
                    new_fields = 1;
 80045d0:	2364      	movs	r3, #100	@ 0x64
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e0b3      	b.n	8004742 <bme68x_get_data+0x22e>
                }
                else
                {
                    new_fields = 0;
 80045da:	2364      	movs	r3, #100	@ 0x64
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
                    rslt = BME68X_W_NO_NEW_DATA;
 80045e2:	2367      	movs	r3, #103	@ 0x67
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	2202      	movs	r2, #2
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	e0aa      	b.n	8004742 <bme68x_get_data+0x22e>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80045ec:	220f      	movs	r2, #15
 80045ee:	18bb      	adds	r3, r7, r2
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d004      	beq.n	8004600 <bme68x_get_data+0xec>
 80045f6:	18bb      	adds	r3, r7, r2
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d000      	beq.n	8004600 <bme68x_get_data+0xec>
 80045fe:	e09c      	b.n	800473a <bme68x_get_data+0x226>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8004600:	2367      	movs	r3, #103	@ 0x67
 8004602:	18fc      	adds	r4, r7, r3
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	2358      	movs	r3, #88	@ 0x58
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	0011      	movs	r1, r2
 800460c:	0018      	movs	r0, r3
 800460e:	f000 ffb9 	bl	8005584 <read_all_field_data>
 8004612:	0003      	movs	r3, r0
 8004614:	7023      	strb	r3, [r4, #0]

            new_fields = 0;
 8004616:	2364      	movs	r3, #100	@ 0x64
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800461e:	2366      	movs	r3, #102	@ 0x66
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	e016      	b.n	8004656 <bme68x_get_data+0x142>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8004628:	2366      	movs	r3, #102	@ 0x66
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	2358      	movs	r3, #88	@ 0x58
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	0092      	lsls	r2, r2, #2
 8004634:	58d3      	ldr	r3, [r2, r3]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	b25b      	sxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	da05      	bge.n	800464a <bme68x_get_data+0x136>
                {
                    new_fields++;
 800463e:	2164      	movs	r1, #100	@ 0x64
 8004640:	187b      	adds	r3, r7, r1
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	187b      	adds	r3, r7, r1
 8004646:	3201      	adds	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800464a:	2166      	movs	r1, #102	@ 0x66
 800464c:	187b      	adds	r3, r7, r1
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	187b      	adds	r3, r7, r1
 8004652:	3201      	adds	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	2366      	movs	r3, #102	@ 0x66
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d805      	bhi.n	800466c <bme68x_get_data+0x158>
 8004660:	2367      	movs	r3, #103	@ 0x67
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	b25b      	sxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0dd      	beq.n	8004628 <bme68x_get_data+0x114>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 800466c:	2366      	movs	r3, #102	@ 0x66
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e022      	b.n	80046bc <bme68x_get_data+0x1a8>
            {
                for (j = i + 1; j < 3; j++)
 8004676:	2365      	movs	r3, #101	@ 0x65
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	2266      	movs	r2, #102	@ 0x66
 800467c:	18ba      	adds	r2, r7, r2
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	3201      	adds	r2, #1
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	e00f      	b.n	80046a6 <bme68x_get_data+0x192>
                {
                    sort_sensor_data(i, j, field_ptr);
 8004686:	2358      	movs	r3, #88	@ 0x58
 8004688:	18fa      	adds	r2, r7, r3
 800468a:	2465      	movs	r4, #101	@ 0x65
 800468c:	193b      	adds	r3, r7, r4
 800468e:	7819      	ldrb	r1, [r3, #0]
 8004690:	2366      	movs	r3, #102	@ 0x66
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	0018      	movs	r0, r3
 8004698:	f001 fc62 	bl	8005f60 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 800469c:	193b      	adds	r3, r7, r4
 800469e:	781a      	ldrb	r2, [r3, #0]
 80046a0:	193b      	adds	r3, r7, r4
 80046a2:	3201      	adds	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	2365      	movs	r3, #101	@ 0x65
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d9ea      	bls.n	8004686 <bme68x_get_data+0x172>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80046b0:	2166      	movs	r1, #102	@ 0x66
 80046b2:	187b      	adds	r3, r7, r1
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	3201      	adds	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	2366      	movs	r3, #102	@ 0x66
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d805      	bhi.n	80046d2 <bme68x_get_data+0x1be>
 80046c6:	2367      	movs	r3, #103	@ 0x67
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	b25b      	sxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0d1      	beq.n	8004676 <bme68x_get_data+0x162>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80046d2:	2366      	movs	r3, #102	@ 0x66
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e019      	b.n	8004710 <bme68x_get_data+0x1fc>
            {
                data[i] = *field_ptr[i];
 80046dc:	2566      	movs	r5, #102	@ 0x66
 80046de:	197b      	adds	r3, r7, r5
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	2358      	movs	r3, #88	@ 0x58
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	0092      	lsls	r2, r2, #2
 80046e8:	58d1      	ldr	r1, [r2, r3]
 80046ea:	197b      	adds	r3, r7, r5
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	0013      	movs	r3, r2
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	001a      	movs	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	000a      	movs	r2, r1
 80046fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004700:	c313      	stmia	r3!, {r0, r1, r4}
 8004702:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004704:	c313      	stmia	r3!, {r0, r1, r4}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8004706:	197b      	adds	r3, r7, r5
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	197b      	adds	r3, r7, r5
 800470c:	3201      	adds	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	2366      	movs	r3, #102	@ 0x66
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d805      	bhi.n	8004726 <bme68x_get_data+0x212>
 800471a:	2367      	movs	r3, #103	@ 0x67
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b25b      	sxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0da      	beq.n	80046dc <bme68x_get_data+0x1c8>
            }

            if (new_fields == 0)
 8004726:	2364      	movs	r3, #100	@ 0x64
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d108      	bne.n	8004742 <bme68x_get_data+0x22e>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8004730:	2367      	movs	r3, #103	@ 0x67
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	2202      	movs	r2, #2
 8004736:	701a      	strb	r2, [r3, #0]
            if (new_fields == 0)
 8004738:	e003      	b.n	8004742 <bme68x_get_data+0x22e>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 800473a:	2367      	movs	r3, #103	@ 0x67
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	2201      	movs	r2, #1
 8004740:	701a      	strb	r2, [r3, #0]
        }

        if (n_data == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <bme68x_get_data+0x23e>
        {
            rslt = BME68X_E_NULL_PTR;
 8004748:	2367      	movs	r3, #103	@ 0x67
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	22ff      	movs	r2, #255	@ 0xff
 800474e:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8004750:	e009      	b.n	8004766 <bme68x_get_data+0x252>
        }
        else
        {
            *n_data = new_fields;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2264      	movs	r2, #100	@ 0x64
 8004756:	18ba      	adds	r2, r7, r2
 8004758:	7812      	ldrb	r2, [r2, #0]
 800475a:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 800475c:	e003      	b.n	8004766 <bme68x_get_data+0x252>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800475e:	2367      	movs	r3, #103	@ 0x67
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	22ff      	movs	r2, #255	@ 0xff
 8004764:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004766:	2367      	movs	r3, #103	@ 0x67
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b25b      	sxtb	r3, r3
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b01b      	add	sp, #108	@ 0x6c
 8004774:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004778 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8004778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477a:	b089      	sub	sp, #36	@ 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	260f      	movs	r6, #15
 8004784:	19bb      	adds	r3, r7, r6
 8004786:	1c02      	adds	r2, r0, #0
 8004788:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t nb_conv = 0;
 800478a:	231c      	movs	r3, #28
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
    uint8_t hctrl, run_gas = 0;
 8004792:	221d      	movs	r2, #29
 8004794:	18bb      	adds	r3, r7, r2
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 800479a:	2214      	movs	r2, #20
 800479c:	18bb      	adds	r3, r7, r2
 800479e:	4a53      	ldr	r2, [pc, #332]	@ (80048ec <bme68x_set_heatr_conf+0x174>)
 80047a0:	801a      	strh	r2, [r3, #0]

    if (conf != NULL)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d100      	bne.n	80047aa <bme68x_set_heatr_conf+0x32>
 80047a8:	e094      	b.n	80048d4 <bme68x_set_heatr_conf+0x15c>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80047aa:	251f      	movs	r5, #31
 80047ac:	197c      	adds	r4, r7, r5
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0019      	movs	r1, r3
 80047b2:	2000      	movs	r0, #0
 80047b4:	f7ff fd82 	bl	80042bc <bme68x_set_op_mode>
 80047b8:	0003      	movs	r3, r0
 80047ba:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 80047bc:	197b      	adds	r3, r7, r5
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b25b      	sxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <bme68x_set_heatr_conf+0x66>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80047c6:	197c      	adds	r4, r7, r5
 80047c8:	687d      	ldr	r5, [r7, #4]
 80047ca:	231c      	movs	r3, #28
 80047cc:	18fa      	adds	r2, r7, r3
 80047ce:	19bb      	adds	r3, r7, r6
 80047d0:	7819      	ldrb	r1, [r3, #0]
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	002b      	movs	r3, r5
 80047d6:	f001 f9f9 	bl	8005bcc <set_conf>
 80047da:	0003      	movs	r3, r0
 80047dc:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80047de:	251f      	movs	r5, #31
 80047e0:	197b      	adds	r3, r7, r5
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b25b      	sxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d000      	beq.n	80047ec <bme68x_set_heatr_conf+0x74>
 80047ea:	e077      	b.n	80048dc <bme68x_set_heatr_conf+0x164>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80047ec:	197c      	adds	r4, r7, r5
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2218      	movs	r2, #24
 80047f2:	18b9      	adds	r1, r7, r2
 80047f4:	2202      	movs	r2, #2
 80047f6:	2070      	movs	r0, #112	@ 0x70
 80047f8:	f7ff fb5e 	bl	8003eb8 <bme68x_get_regs>
 80047fc:	0003      	movs	r3, r0
 80047fe:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8004800:	197b      	adds	r3, r7, r5
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b25b      	sxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d168      	bne.n	80048dc <bme68x_set_heatr_conf+0x164>
            {
                if (conf->enable == BME68X_ENABLE)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d111      	bne.n	8004836 <bme68x_set_heatr_conf+0xbe>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8004812:	231e      	movs	r3, #30
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d104      	bne.n	800482c <bme68x_set_heatr_conf+0xb4>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8004822:	231d      	movs	r3, #29
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	2202      	movs	r2, #2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e00c      	b.n	8004846 <bme68x_set_heatr_conf+0xce>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 800482c:	231d      	movs	r3, #29
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2201      	movs	r2, #1
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e007      	b.n	8004846 <bme68x_set_heatr_conf+0xce>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8004836:	231e      	movs	r3, #30
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 800483e:	231d      	movs	r3, #29
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8004846:	2018      	movs	r0, #24
 8004848:	183b      	adds	r3, r7, r0
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b25b      	sxtb	r3, r3
 800484e:	2208      	movs	r2, #8
 8004850:	4393      	bics	r3, r2
 8004852:	b25a      	sxtb	r2, r3
 8004854:	231e      	movs	r3, #30
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	b25b      	sxtb	r3, r3
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	b25b      	sxtb	r3, r3
 8004860:	2108      	movs	r1, #8
 8004862:	400b      	ands	r3, r1
 8004864:	b25b      	sxtb	r3, r3
 8004866:	4313      	orrs	r3, r2
 8004868:	b25b      	sxtb	r3, r3
 800486a:	b2da      	uxtb	r2, r3
 800486c:	183b      	adds	r3, r7, r0
 800486e:	701a      	strb	r2, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8004870:	183b      	adds	r3, r7, r0
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	b25b      	sxtb	r3, r3
 8004876:	220f      	movs	r2, #15
 8004878:	4393      	bics	r3, r2
 800487a:	b25a      	sxtb	r2, r3
 800487c:	231c      	movs	r3, #28
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	b25b      	sxtb	r3, r3
 8004884:	210f      	movs	r1, #15
 8004886:	400b      	ands	r3, r1
 8004888:	b25b      	sxtb	r3, r3
 800488a:	4313      	orrs	r3, r2
 800488c:	b25b      	sxtb	r3, r3
 800488e:	b2da      	uxtb	r2, r3
 8004890:	183b      	adds	r3, r7, r0
 8004892:	705a      	strb	r2, [r3, #1]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8004894:	183b      	adds	r3, r7, r0
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	b25b      	sxtb	r3, r3
 800489a:	2230      	movs	r2, #48	@ 0x30
 800489c:	4393      	bics	r3, r2
 800489e:	b25a      	sxtb	r2, r3
 80048a0:	231d      	movs	r3, #29
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	b25b      	sxtb	r3, r3
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	b25b      	sxtb	r3, r3
 80048ac:	2130      	movs	r1, #48	@ 0x30
 80048ae:	400b      	ands	r3, r1
 80048b0:	b25b      	sxtb	r3, r3
 80048b2:	4313      	orrs	r3, r2
 80048b4:	b25b      	sxtb	r3, r3
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	183b      	adds	r3, r7, r0
 80048ba:	705a      	strb	r2, [r3, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 80048bc:	231f      	movs	r3, #31
 80048be:	18fc      	adds	r4, r7, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	1839      	adds	r1, r7, r0
 80048c4:	2214      	movs	r2, #20
 80048c6:	18b8      	adds	r0, r7, r2
 80048c8:	2202      	movs	r2, #2
 80048ca:	f7ff fa48 	bl	8003d5e <bme68x_set_regs>
 80048ce:	0003      	movs	r3, r0
 80048d0:	7023      	strb	r3, [r4, #0]
 80048d2:	e003      	b.n	80048dc <bme68x_set_heatr_conf+0x164>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80048d4:	231f      	movs	r3, #31
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	22ff      	movs	r2, #255	@ 0xff
 80048da:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80048dc:	231f      	movs	r3, #31
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	b25b      	sxtb	r3, r3
}
 80048e4:	0018      	movs	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b009      	add	sp, #36	@ 0x24
 80048ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ec:	00007170 	.word	0x00007170

080048f0 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80048f0:	b5b0      	push	{r4, r5, r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc ff76 	bl	80017ec <__aeabi_ui2f>
 8004900:	1c03      	adds	r3, r0, #0
 8004902:	218d      	movs	r1, #141	@ 0x8d
 8004904:	05c9      	lsls	r1, r1, #23
 8004906:	1c18      	adds	r0, r3, #0
 8004908:	f7fc f974 	bl	8000bf4 <__aeabi_fdiv>
 800490c:	1c03      	adds	r3, r0, #0
 800490e:	1c1c      	adds	r4, r3, #0
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	8bdb      	ldrh	r3, [r3, #30]
 8004914:	0018      	movs	r0, r3
 8004916:	f7fc ff69 	bl	80017ec <__aeabi_ui2f>
 800491a:	1c03      	adds	r3, r0, #0
 800491c:	2189      	movs	r1, #137	@ 0x89
 800491e:	05c9      	lsls	r1, r1, #23
 8004920:	1c18      	adds	r0, r3, #0
 8004922:	f7fc f967 	bl	8000bf4 <__aeabi_fdiv>
 8004926:	1c03      	adds	r3, r0, #0
 8004928:	1c19      	adds	r1, r3, #0
 800492a:	1c20      	adds	r0, r4, #0
 800492c:	f7fc fc8a 	bl	8001244 <__aeabi_fsub>
 8004930:	1c03      	adds	r3, r0, #0
 8004932:	1c1c      	adds	r4, r3, #0
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2220      	movs	r2, #32
 8004938:	5e9b      	ldrsh	r3, [r3, r2]
 800493a:	0018      	movs	r0, r3
 800493c:	f7fc ff06 	bl	800174c <__aeabi_i2f>
 8004940:	1c03      	adds	r3, r0, #0
 8004942:	1c19      	adds	r1, r3, #0
 8004944:	1c20      	adds	r0, r4, #0
 8004946:	f7fc fb23 	bl	8000f90 <__aeabi_fmul>
 800494a:	1c03      	adds	r3, r0, #0
 800494c:	617b      	str	r3, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc ff4c 	bl	80017ec <__aeabi_ui2f>
 8004954:	1c03      	adds	r3, r0, #0
 8004956:	2190      	movs	r1, #144	@ 0x90
 8004958:	05c9      	lsls	r1, r1, #23
 800495a:	1c18      	adds	r0, r3, #0
 800495c:	f7fc f94a 	bl	8000bf4 <__aeabi_fdiv>
 8004960:	1c03      	adds	r3, r0, #0
 8004962:	1c1c      	adds	r4, r3, #0
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	8bdb      	ldrh	r3, [r3, #30]
 8004968:	0018      	movs	r0, r3
 800496a:	f7fc ff3f 	bl	80017ec <__aeabi_ui2f>
 800496e:	1c03      	adds	r3, r0, #0
 8004970:	218c      	movs	r1, #140	@ 0x8c
 8004972:	05c9      	lsls	r1, r1, #23
 8004974:	1c18      	adds	r0, r3, #0
 8004976:	f7fc f93d 	bl	8000bf4 <__aeabi_fdiv>
 800497a:	1c03      	adds	r3, r0, #0
 800497c:	1c19      	adds	r1, r3, #0
 800497e:	1c20      	adds	r0, r4, #0
 8004980:	f7fc fc60 	bl	8001244 <__aeabi_fsub>
 8004984:	1c03      	adds	r3, r0, #0
 8004986:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fc ff2f 	bl	80017ec <__aeabi_ui2f>
 800498e:	1c03      	adds	r3, r0, #0
 8004990:	2190      	movs	r1, #144	@ 0x90
 8004992:	05c9      	lsls	r1, r1, #23
 8004994:	1c18      	adds	r0, r3, #0
 8004996:	f7fc f92d 	bl	8000bf4 <__aeabi_fdiv>
 800499a:	1c03      	adds	r3, r0, #0
 800499c:	1c1d      	adds	r5, r3, #0
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	8bdb      	ldrh	r3, [r3, #30]
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7fc ff22 	bl	80017ec <__aeabi_ui2f>
 80049a8:	1c03      	adds	r3, r0, #0
 80049aa:	218c      	movs	r1, #140	@ 0x8c
 80049ac:	05c9      	lsls	r1, r1, #23
 80049ae:	1c18      	adds	r0, r3, #0
 80049b0:	f7fc f920 	bl	8000bf4 <__aeabi_fdiv>
 80049b4:	1c03      	adds	r3, r0, #0
 80049b6:	1c19      	adds	r1, r3, #0
 80049b8:	1c28      	adds	r0, r5, #0
 80049ba:	f7fc fc43 	bl	8001244 <__aeabi_fsub>
 80049be:	1c03      	adds	r3, r0, #0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80049c0:	1c19      	adds	r1, r3, #0
 80049c2:	1c20      	adds	r0, r4, #0
 80049c4:	f7fc fae4 	bl	8000f90 <__aeabi_fmul>
 80049c8:	1c03      	adds	r3, r0, #0
 80049ca:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2222      	movs	r2, #34	@ 0x22
 80049d0:	569b      	ldrsb	r3, [r3, r2]
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7fc feba 	bl	800174c <__aeabi_i2f>
 80049d8:	1c03      	adds	r3, r0, #0
 80049da:	2183      	movs	r1, #131	@ 0x83
 80049dc:	05c9      	lsls	r1, r1, #23
 80049de:	1c18      	adds	r0, r3, #0
 80049e0:	f7fc fad6 	bl	8000f90 <__aeabi_fmul>
 80049e4:	1c03      	adds	r3, r0, #0
    var2 =
 80049e6:	1c19      	adds	r1, r3, #0
 80049e8:	1c20      	adds	r0, r4, #0
 80049ea:	f7fc fad1 	bl	8000f90 <__aeabi_fmul>
 80049ee:	1c03      	adds	r3, r0, #0
 80049f0:	613b      	str	r3, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80049f2:	6939      	ldr	r1, [r7, #16]
 80049f4:	6978      	ldr	r0, [r7, #20]
 80049f6:	f7fb ff0b 	bl	8000810 <__aeabi_fadd>
 80049fa:	1c03      	adds	r3, r0, #0
 80049fc:	1c1a      	adds	r2, r3, #0
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	4905      	ldr	r1, [pc, #20]	@ (8004a1c <calc_temperature+0x12c>)
 8004a08:	1c18      	adds	r0, r3, #0
 8004a0a:	f7fc f8f3 	bl	8000bf4 <__aeabi_fdiv>
 8004a0e:	1c03      	adds	r3, r0, #0
 8004a10:	60fb      	str	r3, [r7, #12]

    return calc_temp;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	1c18      	adds	r0, r3, #0
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b006      	add	sp, #24
 8004a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a1c:	45a00000 	.word	0x45a00000

08004a20 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2e:	2180      	movs	r1, #128	@ 0x80
 8004a30:	05c9      	lsls	r1, r1, #23
 8004a32:	1c18      	adds	r0, r3, #0
 8004a34:	f7fc f8de 	bl	8000bf4 <__aeabi_fdiv>
 8004a38:	1c03      	adds	r3, r0, #0
 8004a3a:	49a7      	ldr	r1, [pc, #668]	@ (8004cd8 <calc_pressure+0x2b8>)
 8004a3c:	1c18      	adds	r0, r3, #0
 8004a3e:	f7fc fc01 	bl	8001244 <__aeabi_fsub>
 8004a42:	1c03      	adds	r3, r0, #0
 8004a44:	613b      	str	r3, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8004a46:	6939      	ldr	r1, [r7, #16]
 8004a48:	6938      	ldr	r0, [r7, #16]
 8004a4a:	f7fc faa1 	bl	8000f90 <__aeabi_fmul>
 8004a4e:	1c03      	adds	r3, r0, #0
 8004a50:	1c1c      	adds	r4, r3, #0
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	222e      	movs	r2, #46	@ 0x2e
 8004a56:	569b      	ldrsb	r3, [r3, r2]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fc fe77 	bl	800174c <__aeabi_i2f>
 8004a5e:	1c03      	adds	r3, r0, #0
 8004a60:	2190      	movs	r1, #144	@ 0x90
 8004a62:	05c9      	lsls	r1, r1, #23
 8004a64:	1c18      	adds	r0, r3, #0
 8004a66:	f7fc f8c5 	bl	8000bf4 <__aeabi_fdiv>
 8004a6a:	1c03      	adds	r3, r0, #0
 8004a6c:	1c19      	adds	r1, r3, #0
 8004a6e:	1c20      	adds	r0, r4, #0
 8004a70:	f7fc fa8e 	bl	8000f90 <__aeabi_fmul>
 8004a74:	1c03      	adds	r3, r0, #0
 8004a76:	60fb      	str	r3, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	222c      	movs	r2, #44	@ 0x2c
 8004a7c:	5e9b      	ldrsh	r3, [r3, r2]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7fc fe64 	bl	800174c <__aeabi_i2f>
 8004a84:	1c03      	adds	r3, r0, #0
 8004a86:	6939      	ldr	r1, [r7, #16]
 8004a88:	1c18      	adds	r0, r3, #0
 8004a8a:	f7fc fa81 	bl	8000f90 <__aeabi_fmul>
 8004a8e:	1c03      	adds	r3, r0, #0
 8004a90:	1c19      	adds	r1, r3, #0
 8004a92:	1c18      	adds	r0, r3, #0
 8004a94:	f7fb febc 	bl	8000810 <__aeabi_fadd>
 8004a98:	1c03      	adds	r3, r0, #0
 8004a9a:	1c19      	adds	r1, r3, #0
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7fb feb7 	bl	8000810 <__aeabi_fadd>
 8004aa2:	1c03      	adds	r3, r0, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8004aa6:	2181      	movs	r1, #129	@ 0x81
 8004aa8:	05c9      	lsls	r1, r1, #23
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7fc f8a2 	bl	8000bf4 <__aeabi_fdiv>
 8004ab0:	1c03      	adds	r3, r0, #0
 8004ab2:	1c1c      	adds	r4, r3, #0
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	222a      	movs	r2, #42	@ 0x2a
 8004ab8:	5e9b      	ldrsh	r3, [r3, r2]
 8004aba:	0018      	movs	r0, r3
 8004abc:	f7fc fe46 	bl	800174c <__aeabi_i2f>
 8004ac0:	1c03      	adds	r3, r0, #0
 8004ac2:	218f      	movs	r1, #143	@ 0x8f
 8004ac4:	05c9      	lsls	r1, r1, #23
 8004ac6:	1c18      	adds	r0, r3, #0
 8004ac8:	f7fc fa62 	bl	8000f90 <__aeabi_fmul>
 8004acc:	1c03      	adds	r3, r0, #0
 8004ace:	1c19      	adds	r1, r3, #0
 8004ad0:	1c20      	adds	r0, r4, #0
 8004ad2:	f7fb fe9d 	bl	8000810 <__aeabi_fadd>
 8004ad6:	1c03      	adds	r3, r0, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2228      	movs	r2, #40	@ 0x28
 8004ade:	569b      	ldrsb	r3, [r3, r2]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7fc fe33 	bl	800174c <__aeabi_i2f>
 8004ae6:	1c03      	adds	r3, r0, #0
 8004ae8:	6939      	ldr	r1, [r7, #16]
 8004aea:	1c18      	adds	r0, r3, #0
 8004aec:	f7fc fa50 	bl	8000f90 <__aeabi_fmul>
 8004af0:	1c03      	adds	r3, r0, #0
 8004af2:	6939      	ldr	r1, [r7, #16]
 8004af4:	1c18      	adds	r0, r3, #0
 8004af6:	f7fc fa4b 	bl	8000f90 <__aeabi_fmul>
 8004afa:	1c03      	adds	r3, r0, #0
 8004afc:	218d      	movs	r1, #141	@ 0x8d
 8004afe:	05c9      	lsls	r1, r1, #23
 8004b00:	1c18      	adds	r0, r3, #0
 8004b02:	f7fc f877 	bl	8000bf4 <__aeabi_fdiv>
 8004b06:	1c03      	adds	r3, r0, #0
 8004b08:	1c1c      	adds	r4, r3, #0
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2226      	movs	r2, #38	@ 0x26
 8004b0e:	5e9b      	ldrsh	r3, [r3, r2]
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7fc fe1b 	bl	800174c <__aeabi_i2f>
 8004b16:	1c03      	adds	r3, r0, #0
 8004b18:	6939      	ldr	r1, [r7, #16]
 8004b1a:	1c18      	adds	r0, r3, #0
 8004b1c:	f7fc fa38 	bl	8000f90 <__aeabi_fmul>
 8004b20:	1c03      	adds	r3, r0, #0
 8004b22:	1c19      	adds	r1, r3, #0
 8004b24:	1c20      	adds	r0, r4, #0
 8004b26:	f7fb fe73 	bl	8000810 <__aeabi_fadd>
 8004b2a:	1c03      	adds	r3, r0, #0
 8004b2c:	2192      	movs	r1, #146	@ 0x92
 8004b2e:	05c9      	lsls	r1, r1, #23
 8004b30:	1c18      	adds	r0, r3, #0
 8004b32:	f7fc f85f 	bl	8000bf4 <__aeabi_fdiv>
 8004b36:	1c03      	adds	r3, r0, #0
 8004b38:	613b      	str	r3, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8004b3a:	218e      	movs	r1, #142	@ 0x8e
 8004b3c:	05c9      	lsls	r1, r1, #23
 8004b3e:	6938      	ldr	r0, [r7, #16]
 8004b40:	f7fc f858 	bl	8000bf4 <__aeabi_fdiv>
 8004b44:	1c03      	adds	r3, r0, #0
 8004b46:	21fe      	movs	r1, #254	@ 0xfe
 8004b48:	0589      	lsls	r1, r1, #22
 8004b4a:	1c18      	adds	r0, r3, #0
 8004b4c:	f7fb fe60 	bl	8000810 <__aeabi_fadd>
 8004b50:	1c03      	adds	r3, r0, #0
 8004b52:	1c1c      	adds	r4, r3, #0
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7fc fe47 	bl	80017ec <__aeabi_ui2f>
 8004b5e:	1c03      	adds	r3, r0, #0
 8004b60:	1c19      	adds	r1, r3, #0
 8004b62:	1c20      	adds	r0, r4, #0
 8004b64:	f7fc fa14 	bl	8000f90 <__aeabi_fmul>
 8004b68:	1c03      	adds	r3, r0, #0
 8004b6a:	613b      	str	r3, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fc fe3d 	bl	80017ec <__aeabi_ui2f>
 8004b72:	1c03      	adds	r3, r0, #0
 8004b74:	1c19      	adds	r1, r3, #0
 8004b76:	2093      	movs	r0, #147	@ 0x93
 8004b78:	05c0      	lsls	r0, r0, #23
 8004b7a:	f7fc fb63 	bl	8001244 <__aeabi_fsub>
 8004b7e:	1c03      	adds	r3, r0, #0
 8004b80:	617b      	str	r3, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8004b82:	6938      	ldr	r0, [r7, #16]
 8004b84:	f7fc fdc2 	bl	800170c <__aeabi_f2iz>
 8004b88:	1e03      	subs	r3, r0, #0
 8004b8a:	d100      	bne.n	8004b8e <calc_pressure+0x16e>
 8004b8c:	e09c      	b.n	8004cc8 <calc_pressure+0x2a8>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8004b8e:	218b      	movs	r1, #139	@ 0x8b
 8004b90:	05c9      	lsls	r1, r1, #23
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7fc f82e 	bl	8000bf4 <__aeabi_fdiv>
 8004b98:	1c03      	adds	r3, r0, #0
 8004b9a:	1c19      	adds	r1, r3, #0
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f7fc fb51 	bl	8001244 <__aeabi_fsub>
 8004ba2:	1c03      	adds	r3, r0, #0
 8004ba4:	494d      	ldr	r1, [pc, #308]	@ (8004cdc <calc_pressure+0x2bc>)
 8004ba6:	1c18      	adds	r0, r3, #0
 8004ba8:	f7fc f9f2 	bl	8000f90 <__aeabi_fmul>
 8004bac:	1c03      	adds	r3, r0, #0
 8004bae:	6939      	ldr	r1, [r7, #16]
 8004bb0:	1c18      	adds	r0, r3, #0
 8004bb2:	f7fc f81f 	bl	8000bf4 <__aeabi_fdiv>
 8004bb6:	1c03      	adds	r3, r0, #0
 8004bb8:	617b      	str	r3, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2232      	movs	r2, #50	@ 0x32
 8004bbe:	5e9b      	ldrsh	r3, [r3, r2]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7fc fdc3 	bl	800174c <__aeabi_i2f>
 8004bc6:	1c03      	adds	r3, r0, #0
 8004bc8:	6979      	ldr	r1, [r7, #20]
 8004bca:	1c18      	adds	r0, r3, #0
 8004bcc:	f7fc f9e0 	bl	8000f90 <__aeabi_fmul>
 8004bd0:	1c03      	adds	r3, r0, #0
 8004bd2:	6979      	ldr	r1, [r7, #20]
 8004bd4:	1c18      	adds	r0, r3, #0
 8004bd6:	f7fc f9db 	bl	8000f90 <__aeabi_fmul>
 8004bda:	1c03      	adds	r3, r0, #0
 8004bdc:	219e      	movs	r1, #158	@ 0x9e
 8004bde:	05c9      	lsls	r1, r1, #23
 8004be0:	1c18      	adds	r0, r3, #0
 8004be2:	f7fc f807 	bl	8000bf4 <__aeabi_fdiv>
 8004be6:	1c03      	adds	r3, r0, #0
 8004be8:	613b      	str	r3, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2230      	movs	r2, #48	@ 0x30
 8004bee:	5e9b      	ldrsh	r3, [r3, r2]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7fc fdab 	bl	800174c <__aeabi_i2f>
 8004bf6:	1c03      	adds	r3, r0, #0
 8004bf8:	218e      	movs	r1, #142	@ 0x8e
 8004bfa:	05c9      	lsls	r1, r1, #23
 8004bfc:	1c18      	adds	r0, r3, #0
 8004bfe:	f7fb fff9 	bl	8000bf4 <__aeabi_fdiv>
 8004c02:	1c03      	adds	r3, r0, #0
 8004c04:	1c19      	adds	r1, r3, #0
 8004c06:	6978      	ldr	r0, [r7, #20]
 8004c08:	f7fc f9c2 	bl	8000f90 <__aeabi_fmul>
 8004c0c:	1c03      	adds	r3, r0, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8004c10:	2187      	movs	r1, #135	@ 0x87
 8004c12:	05c9      	lsls	r1, r1, #23
 8004c14:	6978      	ldr	r0, [r7, #20]
 8004c16:	f7fb ffed 	bl	8000bf4 <__aeabi_fdiv>
 8004c1a:	1c03      	adds	r3, r0, #0
 8004c1c:	1c1c      	adds	r4, r3, #0
 8004c1e:	2187      	movs	r1, #135	@ 0x87
 8004c20:	05c9      	lsls	r1, r1, #23
 8004c22:	6978      	ldr	r0, [r7, #20]
 8004c24:	f7fb ffe6 	bl	8000bf4 <__aeabi_fdiv>
 8004c28:	1c03      	adds	r3, r0, #0
 8004c2a:	1c19      	adds	r1, r3, #0
 8004c2c:	1c20      	adds	r0, r4, #0
 8004c2e:	f7fc f9af 	bl	8000f90 <__aeabi_fmul>
 8004c32:	1c03      	adds	r3, r0, #0
 8004c34:	1c1c      	adds	r4, r3, #0
 8004c36:	2187      	movs	r1, #135	@ 0x87
 8004c38:	05c9      	lsls	r1, r1, #23
 8004c3a:	6978      	ldr	r0, [r7, #20]
 8004c3c:	f7fb ffda 	bl	8000bf4 <__aeabi_fdiv>
 8004c40:	1c03      	adds	r3, r0, #0
 8004c42:	1c19      	adds	r1, r3, #0
 8004c44:	1c20      	adds	r0, r4, #0
 8004c46:	f7fc f9a3 	bl	8000f90 <__aeabi_fmul>
 8004c4a:	1c03      	adds	r3, r0, #0
 8004c4c:	1c1c      	adds	r4, r3, #0
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2234      	movs	r2, #52	@ 0x34
 8004c52:	5c9b      	ldrb	r3, [r3, r2]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7fc fd79 	bl	800174c <__aeabi_i2f>
 8004c5a:	1c03      	adds	r3, r0, #0
 8004c5c:	2190      	movs	r1, #144	@ 0x90
 8004c5e:	05c9      	lsls	r1, r1, #23
 8004c60:	1c18      	adds	r0, r3, #0
 8004c62:	f7fb ffc7 	bl	8000bf4 <__aeabi_fdiv>
 8004c66:	1c03      	adds	r3, r0, #0
 8004c68:	1c19      	adds	r1, r3, #0
 8004c6a:	1c20      	adds	r0, r4, #0
 8004c6c:	f7fc f990 	bl	8000f90 <__aeabi_fmul>
 8004c70:	1c03      	adds	r3, r0, #0
 8004c72:	60bb      	str	r3, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8004c74:	68f9      	ldr	r1, [r7, #12]
 8004c76:	6938      	ldr	r0, [r7, #16]
 8004c78:	f7fb fdca 	bl	8000810 <__aeabi_fadd>
 8004c7c:	1c03      	adds	r3, r0, #0
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	1c18      	adds	r0, r3, #0
 8004c82:	f7fb fdc5 	bl	8000810 <__aeabi_fadd>
 8004c86:	1c03      	adds	r3, r0, #0
 8004c88:	1c1c      	adds	r4, r3, #0
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	222f      	movs	r2, #47	@ 0x2f
 8004c8e:	569b      	ldrsb	r3, [r3, r2]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f7fc fd5b 	bl	800174c <__aeabi_i2f>
 8004c96:	1c03      	adds	r3, r0, #0
 8004c98:	2186      	movs	r1, #134	@ 0x86
 8004c9a:	05c9      	lsls	r1, r1, #23
 8004c9c:	1c18      	adds	r0, r3, #0
 8004c9e:	f7fc f977 	bl	8000f90 <__aeabi_fmul>
 8004ca2:	1c03      	adds	r3, r0, #0
 8004ca4:	1c19      	adds	r1, r3, #0
 8004ca6:	1c20      	adds	r0, r4, #0
 8004ca8:	f7fb fdb2 	bl	8000810 <__aeabi_fadd>
 8004cac:	1c03      	adds	r3, r0, #0
 8004cae:	2183      	movs	r1, #131	@ 0x83
 8004cb0:	05c9      	lsls	r1, r1, #23
 8004cb2:	1c18      	adds	r0, r3, #0
 8004cb4:	f7fb ff9e 	bl	8000bf4 <__aeabi_fdiv>
 8004cb8:	1c03      	adds	r3, r0, #0
 8004cba:	1c19      	adds	r1, r3, #0
 8004cbc:	6978      	ldr	r0, [r7, #20]
 8004cbe:	f7fb fda7 	bl	8000810 <__aeabi_fadd>
 8004cc2:	1c03      	adds	r3, r0, #0
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e001      	b.n	8004ccc <calc_pressure+0x2ac>
    }
    else
    {
        calc_pres = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8004ccc:	697b      	ldr	r3, [r7, #20]
}
 8004cce:	1c18      	adds	r0, r3, #0
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b007      	add	sp, #28
 8004cd4:	bd90      	pop	{r4, r7, pc}
 8004cd6:	46c0      	nop			@ (mov r8, r8)
 8004cd8:	477a0000 	.word	0x477a0000
 8004cdc:	45c35000 	.word	0x45c35000

08004ce0 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8004ce0:	b5b0      	push	{r4, r5, r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	6039      	str	r1, [r7, #0]
 8004cea:	1dbb      	adds	r3, r7, #6
 8004cec:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf2:	4967      	ldr	r1, [pc, #412]	@ (8004e90 <calc_humidity+0x1b0>)
 8004cf4:	1c18      	adds	r0, r3, #0
 8004cf6:	f7fb ff7d 	bl	8000bf4 <__aeabi_fdiv>
 8004cfa:	1c03      	adds	r3, r0, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8004cfe:	1dbb      	adds	r3, r7, #6
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	0018      	movs	r0, r3
 8004d04:	f7fc fd72 	bl	80017ec <__aeabi_ui2f>
 8004d08:	1c04      	adds	r4, r0, #0
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	8a1b      	ldrh	r3, [r3, #16]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7fc fd6c 	bl	80017ec <__aeabi_ui2f>
 8004d14:	1c03      	adds	r3, r0, #0
 8004d16:	2183      	movs	r1, #131	@ 0x83
 8004d18:	05c9      	lsls	r1, r1, #23
 8004d1a:	1c18      	adds	r0, r3, #0
 8004d1c:	f7fc f938 	bl	8000f90 <__aeabi_fmul>
 8004d20:	1c03      	adds	r3, r0, #0
 8004d22:	1c1d      	adds	r5, r3, #0
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	7d1b      	ldrb	r3, [r3, #20]
 8004d28:	b25b      	sxtb	r3, r3
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f7fc fd0e 	bl	800174c <__aeabi_i2f>
 8004d30:	1c03      	adds	r3, r0, #0
 8004d32:	2180      	movs	r1, #128	@ 0x80
 8004d34:	05c9      	lsls	r1, r1, #23
 8004d36:	1c18      	adds	r0, r3, #0
 8004d38:	f7fb ff5c 	bl	8000bf4 <__aeabi_fdiv>
 8004d3c:	1c03      	adds	r3, r0, #0
 8004d3e:	69b9      	ldr	r1, [r7, #24]
 8004d40:	1c18      	adds	r0, r3, #0
 8004d42:	f7fc f925 	bl	8000f90 <__aeabi_fmul>
 8004d46:	1c03      	adds	r3, r0, #0
 8004d48:	1c19      	adds	r1, r3, #0
 8004d4a:	1c28      	adds	r0, r5, #0
 8004d4c:	f7fb fd60 	bl	8000810 <__aeabi_fadd>
 8004d50:	1c03      	adds	r3, r0, #0
    var1 = (float)((float)hum_adc) -
 8004d52:	1c19      	adds	r1, r3, #0
 8004d54:	1c20      	adds	r0, r4, #0
 8004d56:	f7fc fa75 	bl	8001244 <__aeabi_fsub>
 8004d5a:	1c03      	adds	r3, r0, #0
 8004d5c:	617b      	str	r3, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	8a5b      	ldrh	r3, [r3, #18]
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7fc fd42 	bl	80017ec <__aeabi_ui2f>
 8004d68:	1c03      	adds	r3, r0, #0
 8004d6a:	2191      	movs	r1, #145	@ 0x91
 8004d6c:	05c9      	lsls	r1, r1, #23
 8004d6e:	1c18      	adds	r0, r3, #0
 8004d70:	f7fb ff40 	bl	8000bf4 <__aeabi_fdiv>
 8004d74:	1c03      	adds	r3, r0, #0
 8004d76:	1c1c      	adds	r4, r3, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	7d5b      	ldrb	r3, [r3, #21]
 8004d7c:	b25b      	sxtb	r3, r3
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f7fc fce4 	bl	800174c <__aeabi_i2f>
 8004d84:	1c03      	adds	r3, r0, #0
 8004d86:	218d      	movs	r1, #141	@ 0x8d
 8004d88:	05c9      	lsls	r1, r1, #23
 8004d8a:	1c18      	adds	r0, r3, #0
 8004d8c:	f7fb ff32 	bl	8000bf4 <__aeabi_fdiv>
 8004d90:	1c03      	adds	r3, r0, #0
 8004d92:	69b9      	ldr	r1, [r7, #24]
 8004d94:	1c18      	adds	r0, r3, #0
 8004d96:	f7fc f8fb 	bl	8000f90 <__aeabi_fmul>
 8004d9a:	1c03      	adds	r3, r0, #0
 8004d9c:	21fe      	movs	r1, #254	@ 0xfe
 8004d9e:	0589      	lsls	r1, r1, #22
 8004da0:	1c18      	adds	r0, r3, #0
 8004da2:	f7fb fd35 	bl	8000810 <__aeabi_fadd>
 8004da6:	1c03      	adds	r3, r0, #0
 8004da8:	1c1d      	adds	r5, r3, #0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	7d9b      	ldrb	r3, [r3, #22]
 8004dae:	b25b      	sxtb	r3, r3
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7fc fccb 	bl	800174c <__aeabi_i2f>
 8004db6:	1c03      	adds	r3, r0, #0
 8004db8:	2193      	movs	r1, #147	@ 0x93
 8004dba:	05c9      	lsls	r1, r1, #23
 8004dbc:	1c18      	adds	r0, r3, #0
 8004dbe:	f7fb ff19 	bl	8000bf4 <__aeabi_fdiv>
 8004dc2:	1c03      	adds	r3, r0, #0
 8004dc4:	69b9      	ldr	r1, [r7, #24]
 8004dc6:	1c18      	adds	r0, r3, #0
 8004dc8:	f7fc f8e2 	bl	8000f90 <__aeabi_fmul>
 8004dcc:	1c03      	adds	r3, r0, #0
 8004dce:	69b9      	ldr	r1, [r7, #24]
 8004dd0:	1c18      	adds	r0, r3, #0
 8004dd2:	f7fc f8dd 	bl	8000f90 <__aeabi_fmul>
 8004dd6:	1c03      	adds	r3, r0, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8004dd8:	1c19      	adds	r1, r3, #0
 8004dda:	1c28      	adds	r0, r5, #0
 8004ddc:	f7fb fd18 	bl	8000810 <__aeabi_fadd>
 8004de0:	1c03      	adds	r3, r0, #0
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8004de2:	1c19      	adds	r1, r3, #0
 8004de4:	1c20      	adds	r0, r4, #0
 8004de6:	f7fc f8d3 	bl	8000f90 <__aeabi_fmul>
 8004dea:	1c03      	adds	r3, r0, #0
    var2 = var1 *
 8004dec:	1c19      	adds	r1, r3, #0
 8004dee:	6978      	ldr	r0, [r7, #20]
 8004df0:	f7fc f8ce 	bl	8000f90 <__aeabi_fmul>
 8004df4:	1c03      	adds	r3, r0, #0
 8004df6:	613b      	str	r3, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	7ddb      	ldrb	r3, [r3, #23]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7fc fcf5 	bl	80017ec <__aeabi_ui2f>
 8004e02:	1c03      	adds	r3, r0, #0
 8004e04:	218d      	movs	r1, #141	@ 0x8d
 8004e06:	05c9      	lsls	r1, r1, #23
 8004e08:	1c18      	adds	r0, r3, #0
 8004e0a:	f7fb fef3 	bl	8000bf4 <__aeabi_fdiv>
 8004e0e:	1c03      	adds	r3, r0, #0
 8004e10:	60fb      	str	r3, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	7e1b      	ldrb	r3, [r3, #24]
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7fc fc97 	bl	800174c <__aeabi_i2f>
 8004e1e:	1c03      	adds	r3, r0, #0
 8004e20:	2194      	movs	r1, #148	@ 0x94
 8004e22:	05c9      	lsls	r1, r1, #23
 8004e24:	1c18      	adds	r0, r3, #0
 8004e26:	f7fb fee5 	bl	8000bf4 <__aeabi_fdiv>
 8004e2a:	1c03      	adds	r3, r0, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8004e2e:	69b9      	ldr	r1, [r7, #24]
 8004e30:	68b8      	ldr	r0, [r7, #8]
 8004e32:	f7fc f8ad 	bl	8000f90 <__aeabi_fmul>
 8004e36:	1c03      	adds	r3, r0, #0
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	1c18      	adds	r0, r3, #0
 8004e3c:	f7fb fce8 	bl	8000810 <__aeabi_fadd>
 8004e40:	1c03      	adds	r3, r0, #0
 8004e42:	6939      	ldr	r1, [r7, #16]
 8004e44:	1c18      	adds	r0, r3, #0
 8004e46:	f7fc f8a3 	bl	8000f90 <__aeabi_fmul>
 8004e4a:	1c03      	adds	r3, r0, #0
 8004e4c:	6939      	ldr	r1, [r7, #16]
 8004e4e:	1c18      	adds	r0, r3, #0
 8004e50:	f7fc f89e 	bl	8000f90 <__aeabi_fmul>
 8004e54:	1c03      	adds	r3, r0, #0
 8004e56:	1c19      	adds	r1, r3, #0
 8004e58:	6938      	ldr	r0, [r7, #16]
 8004e5a:	f7fb fcd9 	bl	8000810 <__aeabi_fadd>
 8004e5e:	1c03      	adds	r3, r0, #0
 8004e60:	61fb      	str	r3, [r7, #28]
    if (calc_hum > 100.0f)
 8004e62:	490c      	ldr	r1, [pc, #48]	@ (8004e94 <calc_humidity+0x1b4>)
 8004e64:	69f8      	ldr	r0, [r7, #28]
 8004e66:	f7fb fb4d 	bl	8000504 <__aeabi_fcmpgt>
 8004e6a:	1e03      	subs	r3, r0, #0
 8004e6c:	d002      	beq.n	8004e74 <calc_humidity+0x194>
    {
        calc_hum = 100.0f;
 8004e6e:	4b09      	ldr	r3, [pc, #36]	@ (8004e94 <calc_humidity+0x1b4>)
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	e007      	b.n	8004e84 <calc_humidity+0x1a4>
    }
    else if (calc_hum < 0.0f)
 8004e74:	2100      	movs	r1, #0
 8004e76:	69f8      	ldr	r0, [r7, #28]
 8004e78:	f7fb fb30 	bl	80004dc <__aeabi_fcmplt>
 8004e7c:	1e03      	subs	r3, r0, #0
 8004e7e:	d001      	beq.n	8004e84 <calc_humidity+0x1a4>
    {
        calc_hum = 0.0f;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8004e84:	69fb      	ldr	r3, [r7, #28]
}
 8004e86:	1c18      	adds	r0, r3, #0
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b008      	add	sp, #32
 8004e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	45a00000 	.word	0x45a00000
 8004e94:	42c80000 	.word	0x42c80000

08004e98 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8004e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9a:	b0a9      	sub	sp, #164	@ 0xa4
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	603a      	str	r2, [r7, #0]
 8004ea0:	1dbb      	adds	r3, r7, #6
 8004ea2:	1c02      	adds	r2, r0, #0
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	1d7b      	adds	r3, r7, #5
 8004ea8:	1c0a      	adds	r2, r1, #0
 8004eaa:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8004eac:	1dbb      	adds	r3, r7, #6
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f7fc fc9b 	bl	80017ec <__aeabi_ui2f>
 8004eb6:	1c03      	adds	r3, r0, #0
 8004eb8:	259c      	movs	r5, #156	@ 0x9c
 8004eba:	197a      	adds	r2, r7, r5
 8004ebc:	6013      	str	r3, [r2, #0]
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8004ebe:	1d7b      	adds	r3, r7, #5
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	409a      	lsls	r2, r3
 8004ec6:	0013      	movs	r3, r2
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f7fc fc8f 	bl	80017ec <__aeabi_ui2f>
 8004ece:	1c03      	adds	r3, r0, #0
 8004ed0:	2498      	movs	r4, #152	@ 0x98
 8004ed2:	193a      	adds	r2, r7, r4
 8004ed4:	6013      	str	r3, [r2, #0]
    const float lookup_k1_range[16] = {
 8004ed6:	2648      	movs	r6, #72	@ 0x48
 8004ed8:	19ba      	adds	r2, r7, r6
 8004eda:	4b43      	ldr	r3, [pc, #268]	@ (8004fe8 <calc_gas_resistance_low+0x150>)
 8004edc:	0010      	movs	r0, r2
 8004ede:	0019      	movs	r1, r3
 8004ee0:	2340      	movs	r3, #64	@ 0x40
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	f007 f893 	bl	800c00e <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8004ee8:	2308      	movs	r3, #8
 8004eea:	18fa      	adds	r2, r7, r3
 8004eec:	4b3f      	ldr	r3, [pc, #252]	@ (8004fec <calc_gas_resistance_low+0x154>)
 8004eee:	0010      	movs	r0, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	2340      	movs	r3, #64	@ 0x40
 8004ef4:	001a      	movs	r2, r3
 8004ef6:	f007 f88a 	bl	800c00e <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	223e      	movs	r2, #62	@ 0x3e
 8004efe:	569b      	ldrsb	r3, [r3, r2]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7fc fc23 	bl	800174c <__aeabi_i2f>
 8004f06:	1c03      	adds	r3, r0, #0
 8004f08:	4939      	ldr	r1, [pc, #228]	@ (8004ff0 <calc_gas_resistance_low+0x158>)
 8004f0a:	1c18      	adds	r0, r3, #0
 8004f0c:	f7fc f840 	bl	8000f90 <__aeabi_fmul>
 8004f10:	1c03      	adds	r3, r0, #0
 8004f12:	4938      	ldr	r1, [pc, #224]	@ (8004ff4 <calc_gas_resistance_low+0x15c>)
 8004f14:	1c18      	adds	r0, r3, #0
 8004f16:	f7fb fc7b 	bl	8000810 <__aeabi_fadd>
 8004f1a:	1c03      	adds	r3, r0, #0
 8004f1c:	2294      	movs	r2, #148	@ 0x94
 8004f1e:	18b9      	adds	r1, r7, r2
 8004f20:	600b      	str	r3, [r1, #0]
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8004f22:	1d7b      	adds	r3, r7, #5
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	19bb      	adds	r3, r7, r6
 8004f28:	0092      	lsls	r2, r2, #2
 8004f2a:	58d3      	ldr	r3, [r2, r3]
 8004f2c:	4932      	ldr	r1, [pc, #200]	@ (8004ff8 <calc_gas_resistance_low+0x160>)
 8004f2e:	1c18      	adds	r0, r3, #0
 8004f30:	f7fb fe60 	bl	8000bf4 <__aeabi_fdiv>
 8004f34:	1c03      	adds	r3, r0, #0
 8004f36:	21fe      	movs	r1, #254	@ 0xfe
 8004f38:	0589      	lsls	r1, r1, #22
 8004f3a:	1c18      	adds	r0, r3, #0
 8004f3c:	f7fb fc68 	bl	8000810 <__aeabi_fadd>
 8004f40:	1c03      	adds	r3, r0, #0
 8004f42:	1c19      	adds	r1, r3, #0
 8004f44:	2294      	movs	r2, #148	@ 0x94
 8004f46:	18ba      	adds	r2, r7, r2
 8004f48:	6810      	ldr	r0, [r2, #0]
 8004f4a:	f7fc f821 	bl	8000f90 <__aeabi_fmul>
 8004f4e:	1c03      	adds	r3, r0, #0
 8004f50:	2690      	movs	r6, #144	@ 0x90
 8004f52:	19ba      	adds	r2, r7, r6
 8004f54:	6013      	str	r3, [r2, #0]
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8004f56:	1d7b      	adds	r3, r7, #5
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	0092      	lsls	r2, r2, #2
 8004f60:	58d3      	ldr	r3, [r2, r3]
 8004f62:	4925      	ldr	r1, [pc, #148]	@ (8004ff8 <calc_gas_resistance_low+0x160>)
 8004f64:	1c18      	adds	r0, r3, #0
 8004f66:	f7fb fe45 	bl	8000bf4 <__aeabi_fdiv>
 8004f6a:	1c03      	adds	r3, r0, #0
 8004f6c:	21fe      	movs	r1, #254	@ 0xfe
 8004f6e:	0589      	lsls	r1, r1, #22
 8004f70:	1c18      	adds	r0, r3, #0
 8004f72:	f7fb fc4d 	bl	8000810 <__aeabi_fadd>
 8004f76:	1c03      	adds	r3, r0, #0
 8004f78:	228c      	movs	r2, #140	@ 0x8c
 8004f7a:	18b9      	adds	r1, r7, r2
 8004f7c:	600b      	str	r3, [r1, #0]
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8004f7e:	491f      	ldr	r1, [pc, #124]	@ (8004ffc <calc_gas_resistance_low+0x164>)
 8004f80:	18bb      	adds	r3, r7, r2
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	f7fc f804 	bl	8000f90 <__aeabi_fmul>
 8004f88:	1c03      	adds	r3, r0, #0
 8004f8a:	193a      	adds	r2, r7, r4
 8004f8c:	6811      	ldr	r1, [r2, #0]
 8004f8e:	1c18      	adds	r0, r3, #0
 8004f90:	f7fb fffe 	bl	8000f90 <__aeabi_fmul>
 8004f94:	1c03      	adds	r3, r0, #0
 8004f96:	1c1c      	adds	r4, r3, #0
 8004f98:	2188      	movs	r1, #136	@ 0x88
 8004f9a:	05c9      	lsls	r1, r1, #23
 8004f9c:	197b      	adds	r3, r7, r5
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	f7fc f950 	bl	8001244 <__aeabi_fsub>
 8004fa4:	1c03      	adds	r3, r0, #0
 8004fa6:	19ba      	adds	r2, r7, r6
 8004fa8:	6811      	ldr	r1, [r2, #0]
 8004faa:	1c18      	adds	r0, r3, #0
 8004fac:	f7fb fe22 	bl	8000bf4 <__aeabi_fdiv>
 8004fb0:	1c03      	adds	r3, r0, #0
 8004fb2:	21fe      	movs	r1, #254	@ 0xfe
 8004fb4:	0589      	lsls	r1, r1, #22
 8004fb6:	1c18      	adds	r0, r3, #0
 8004fb8:	f7fb fc2a 	bl	8000810 <__aeabi_fadd>
 8004fbc:	1c03      	adds	r3, r0, #0
 8004fbe:	1c19      	adds	r1, r3, #0
 8004fc0:	1c20      	adds	r0, r4, #0
 8004fc2:	f7fb ffe5 	bl	8000f90 <__aeabi_fmul>
 8004fc6:	1c03      	adds	r3, r0, #0
 8004fc8:	1c19      	adds	r1, r3, #0
 8004fca:	20fe      	movs	r0, #254	@ 0xfe
 8004fcc:	0580      	lsls	r0, r0, #22
 8004fce:	f7fb fe11 	bl	8000bf4 <__aeabi_fdiv>
 8004fd2:	1c03      	adds	r3, r0, #0
 8004fd4:	2288      	movs	r2, #136	@ 0x88
 8004fd6:	18b9      	adds	r1, r7, r2
 8004fd8:	600b      	str	r3, [r1, #0]

    return calc_gas_res;
 8004fda:	18bb      	adds	r3, r7, r2
 8004fdc:	681b      	ldr	r3, [r3, #0]
}
 8004fde:	1c18      	adds	r0, r3, #0
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b029      	add	sp, #164	@ 0xa4
 8004fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	0800e1f0 	.word	0x0800e1f0
 8004fec:	0800e230 	.word	0x0800e230
 8004ff0:	40a00000 	.word	0x40a00000
 8004ff4:	44a78000 	.word	0x44a78000
 8004ff8:	42c80000 	.word	0x42c80000
 8004ffc:	340637bd 	.word	0x340637bd

08005000 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	0002      	movs	r2, r0
 8005008:	1dbb      	adds	r3, r7, #6
 800500a:	801a      	strh	r2, [r3, #0]
 800500c:	1d7b      	adds	r3, r7, #5
 800500e:	1c0a      	adds	r2, r1, #0
 8005010:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8005012:	1d7b      	adds	r3, r7, #5
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2280      	movs	r2, #128	@ 0x80
 8005018:	02d2      	lsls	r2, r2, #11
 800501a:	40da      	lsrs	r2, r3
 800501c:	0013      	movs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8005020:	1dbb      	adds	r3, r7, #6
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	4a13      	ldr	r2, [pc, #76]	@ (8005074 <calc_gas_resistance_high+0x74>)
 8005026:	4694      	mov	ip, r2
 8005028:	4463      	add	r3, ip
 800502a:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	0013      	movs	r3, r2
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	189b      	adds	r3, r3, r2
 8005034:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2280      	movs	r2, #128	@ 0x80
 800503a:	0152      	lsls	r2, r2, #5
 800503c:	4694      	mov	ip, r2
 800503e:	4463      	add	r3, ip
 8005040:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8005042:	6978      	ldr	r0, [r7, #20]
 8005044:	f7fc fbd2 	bl	80017ec <__aeabi_ui2f>
 8005048:	1c03      	adds	r3, r0, #0
 800504a:	490b      	ldr	r1, [pc, #44]	@ (8005078 <calc_gas_resistance_high+0x78>)
 800504c:	1c18      	adds	r0, r3, #0
 800504e:	f7fb ff9f 	bl	8000f90 <__aeabi_fmul>
 8005052:	1c03      	adds	r3, r0, #0
 8005054:	1c1c      	adds	r4, r3, #0
 8005056:	6938      	ldr	r0, [r7, #16]
 8005058:	f7fc fb78 	bl	800174c <__aeabi_i2f>
 800505c:	1c03      	adds	r3, r0, #0
 800505e:	1c19      	adds	r1, r3, #0
 8005060:	1c20      	adds	r0, r4, #0
 8005062:	f7fb fdc7 	bl	8000bf4 <__aeabi_fdiv>
 8005066:	1c03      	adds	r3, r0, #0
 8005068:	60fb      	str	r3, [r7, #12]

    return calc_gas_res;
 800506a:	68fb      	ldr	r3, [r7, #12]
}
 800506c:	1c18      	adds	r0, r3, #0
 800506e:	46bd      	mov	sp, r7
 8005070:	b007      	add	sp, #28
 8005072:	bd90      	pop	{r4, r7, pc}
 8005074:	fffffe00 	.word	0xfffffe00
 8005078:	49742400 	.word	0x49742400

0800507c <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 800507c:	b5b0      	push	{r4, r5, r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	0002      	movs	r2, r0
 8005084:	6039      	str	r1, [r7, #0]
 8005086:	1dbb      	adds	r3, r7, #6
 8005088:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 800508a:	1dbb      	adds	r3, r7, #6
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	23c8      	movs	r3, #200	@ 0xc8
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	429a      	cmp	r2, r3
 8005094:	d903      	bls.n	800509e <calc_res_heat+0x22>
    {
        temp = 400;
 8005096:	1dbb      	adds	r3, r7, #6
 8005098:	22c8      	movs	r2, #200	@ 0xc8
 800509a:	0052      	lsls	r2, r2, #1
 800509c:	801a      	strh	r2, [r3, #0]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	7e5b      	ldrb	r3, [r3, #25]
 80050a2:	b25b      	sxtb	r3, r3
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7fc fb51 	bl	800174c <__aeabi_i2f>
 80050aa:	1c03      	adds	r3, r0, #0
 80050ac:	2183      	movs	r1, #131	@ 0x83
 80050ae:	05c9      	lsls	r1, r1, #23
 80050b0:	1c18      	adds	r0, r3, #0
 80050b2:	f7fb fd9f 	bl	8000bf4 <__aeabi_fdiv>
 80050b6:	1c03      	adds	r3, r0, #0
 80050b8:	4950      	ldr	r1, [pc, #320]	@ (80051fc <calc_res_heat+0x180>)
 80050ba:	1c18      	adds	r0, r3, #0
 80050bc:	f7fb fba8 	bl	8000810 <__aeabi_fadd>
 80050c0:	1c03      	adds	r3, r0, #0
 80050c2:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	221a      	movs	r2, #26
 80050c8:	5e9b      	ldrsh	r3, [r3, r2]
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7fc fb3e 	bl	800174c <__aeabi_i2f>
 80050d0:	1c03      	adds	r3, r0, #0
 80050d2:	218e      	movs	r1, #142	@ 0x8e
 80050d4:	05c9      	lsls	r1, r1, #23
 80050d6:	1c18      	adds	r0, r3, #0
 80050d8:	f7fb fd8c 	bl	8000bf4 <__aeabi_fdiv>
 80050dc:	1c03      	adds	r3, r0, #0
 80050de:	4948      	ldr	r1, [pc, #288]	@ (8005200 <calc_res_heat+0x184>)
 80050e0:	1c18      	adds	r0, r3, #0
 80050e2:	f7fb ff55 	bl	8000f90 <__aeabi_fmul>
 80050e6:	1c03      	adds	r3, r0, #0
 80050e8:	4946      	ldr	r1, [pc, #280]	@ (8005204 <calc_res_heat+0x188>)
 80050ea:	1c18      	adds	r0, r3, #0
 80050ec:	f7fb fb90 	bl	8000810 <__aeabi_fadd>
 80050f0:	1c03      	adds	r3, r0, #0
 80050f2:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	7f1b      	ldrb	r3, [r3, #28]
 80050f8:	b25b      	sxtb	r3, r3
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7fc fb26 	bl	800174c <__aeabi_i2f>
 8005100:	1c03      	adds	r3, r0, #0
 8005102:	2189      	movs	r1, #137	@ 0x89
 8005104:	05c9      	lsls	r1, r1, #23
 8005106:	1c18      	adds	r0, r3, #0
 8005108:	f7fb fd74 	bl	8000bf4 <__aeabi_fdiv>
 800510c:	1c03      	adds	r3, r0, #0
 800510e:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8005110:	1dbb      	adds	r3, r7, #6
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	0018      	movs	r0, r3
 8005116:	f7fc fb69 	bl	80017ec <__aeabi_ui2f>
 800511a:	1c03      	adds	r3, r0, #0
 800511c:	69b9      	ldr	r1, [r7, #24]
 800511e:	1c18      	adds	r0, r3, #0
 8005120:	f7fb ff36 	bl	8000f90 <__aeabi_fmul>
 8005124:	1c03      	adds	r3, r0, #0
 8005126:	21fe      	movs	r1, #254	@ 0xfe
 8005128:	0589      	lsls	r1, r1, #22
 800512a:	1c18      	adds	r0, r3, #0
 800512c:	f7fb fb70 	bl	8000810 <__aeabi_fadd>
 8005130:	1c03      	adds	r3, r0, #0
 8005132:	1c19      	adds	r1, r3, #0
 8005134:	69f8      	ldr	r0, [r7, #28]
 8005136:	f7fb ff2b 	bl	8000f90 <__aeabi_fmul>
 800513a:	1c03      	adds	r3, r0, #0
 800513c:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	7b9b      	ldrb	r3, [r3, #14]
 8005142:	b25b      	sxtb	r3, r3
 8005144:	0018      	movs	r0, r3
 8005146:	f7fc fb01 	bl	800174c <__aeabi_i2f>
 800514a:	1c03      	adds	r3, r0, #0
 800514c:	6979      	ldr	r1, [r7, #20]
 800514e:	1c18      	adds	r0, r3, #0
 8005150:	f7fb ff1e 	bl	8000f90 <__aeabi_fmul>
 8005154:	1c03      	adds	r3, r0, #0
 8005156:	1c19      	adds	r1, r3, #0
 8005158:	6938      	ldr	r0, [r7, #16]
 800515a:	f7fb fb59 	bl	8000810 <__aeabi_fadd>
 800515e:	1c03      	adds	r3, r0, #0
 8005160:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	223c      	movs	r2, #60	@ 0x3c
 8005166:	5c9b      	ldrb	r3, [r3, r2]
 8005168:	0018      	movs	r0, r3
 800516a:	f7fc fb3f 	bl	80017ec <__aeabi_ui2f>
 800516e:	1c03      	adds	r3, r0, #0
 8005170:	2181      	movs	r1, #129	@ 0x81
 8005172:	05c9      	lsls	r1, r1, #23
 8005174:	1c18      	adds	r0, r3, #0
 8005176:	f7fb fb4b 	bl	8000810 <__aeabi_fadd>
 800517a:	1c03      	adds	r3, r0, #0
 800517c:	1c19      	adds	r1, r3, #0
 800517e:	2081      	movs	r0, #129	@ 0x81
 8005180:	05c0      	lsls	r0, r0, #23
 8005182:	f7fb fd37 	bl	8000bf4 <__aeabi_fdiv>
 8005186:	1c03      	adds	r3, r0, #0
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	1c18      	adds	r0, r3, #0
 800518c:	f7fb ff00 	bl	8000f90 <__aeabi_fmul>
 8005190:	1c03      	adds	r3, r0, #0
 8005192:	1c1c      	adds	r4, r3, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	223d      	movs	r2, #61	@ 0x3d
 8005198:	569b      	ldrsb	r3, [r3, r2]
 800519a:	0018      	movs	r0, r3
 800519c:	f7fc fad6 	bl	800174c <__aeabi_i2f>
 80051a0:	1c03      	adds	r3, r0, #0
 80051a2:	4919      	ldr	r1, [pc, #100]	@ (8005208 <calc_res_heat+0x18c>)
 80051a4:	1c18      	adds	r0, r3, #0
 80051a6:	f7fb fef3 	bl	8000f90 <__aeabi_fmul>
 80051aa:	1c03      	adds	r3, r0, #0
 80051ac:	21fe      	movs	r1, #254	@ 0xfe
 80051ae:	0589      	lsls	r1, r1, #22
 80051b0:	1c18      	adds	r0, r3, #0
 80051b2:	f7fb fb2d 	bl	8000810 <__aeabi_fadd>
 80051b6:	1c03      	adds	r3, r0, #0
 80051b8:	1c19      	adds	r1, r3, #0
 80051ba:	20fe      	movs	r0, #254	@ 0xfe
 80051bc:	0580      	lsls	r0, r0, #22
 80051be:	f7fb fd19 	bl	8000bf4 <__aeabi_fdiv>
 80051c2:	1c03      	adds	r3, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80051c4:	1c19      	adds	r1, r3, #0
 80051c6:	1c20      	adds	r0, r4, #0
 80051c8:	f7fb fee2 	bl	8000f90 <__aeabi_fmul>
 80051cc:	1c03      	adds	r3, r0, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80051ce:	490f      	ldr	r1, [pc, #60]	@ (800520c <calc_res_heat+0x190>)
 80051d0:	1c18      	adds	r0, r3, #0
 80051d2:	f7fc f837 	bl	8001244 <__aeabi_fsub>
 80051d6:	1c03      	adds	r3, r0, #0
        (uint8_t)(3.4f *
 80051d8:	490d      	ldr	r1, [pc, #52]	@ (8005210 <calc_res_heat+0x194>)
 80051da:	1c18      	adds	r0, r3, #0
 80051dc:	f7fb fed8 	bl	8000f90 <__aeabi_fmul>
 80051e0:	1c03      	adds	r3, r0, #0
    res_heat =
 80051e2:	250b      	movs	r5, #11
 80051e4:	197c      	adds	r4, r7, r5
 80051e6:	1c18      	adds	r0, r3, #0
 80051e8:	f7fb f9c0 	bl	800056c <__aeabi_f2uiz>
 80051ec:	0003      	movs	r3, r0
 80051ee:	7023      	strb	r3, [r4, #0]
                   25));

    return res_heat;
 80051f0:	197b      	adds	r3, r7, r5
 80051f2:	781b      	ldrb	r3, [r3, #0]
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b008      	add	sp, #32
 80051fa:	bdb0      	pop	{r4, r5, r7, pc}
 80051fc:	42440000 	.word	0x42440000
 8005200:	3a03126f 	.word	0x3a03126f
 8005204:	3b1a0275 	.word	0x3b1a0275
 8005208:	3b03126f 	.word	0x3b03126f
 800520c:	41c80000 	.word	0x41c80000
 8005210:	4059999a 	.word	0x4059999a

08005214 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	0002      	movs	r2, r0
 800521c:	1dbb      	adds	r3, r7, #6
 800521e:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8005220:	230f      	movs	r3, #15
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
    uint8_t durval;

    if (dur >= 0xfc0)
 8005228:	1dbb      	adds	r3, r7, #6
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	23fc      	movs	r3, #252	@ 0xfc
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	429a      	cmp	r2, r3
 8005232:	d30f      	bcc.n	8005254 <calc_gas_wait+0x40>
    {
        durval = 0xff; /* Max duration*/
 8005234:	230e      	movs	r3, #14
 8005236:	18fb      	adds	r3, r7, r3
 8005238:	22ff      	movs	r2, #255	@ 0xff
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	e01a      	b.n	8005274 <calc_gas_wait+0x60>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 800523e:	1dbb      	adds	r3, r7, #6
 8005240:	1dba      	adds	r2, r7, #6
 8005242:	8812      	ldrh	r2, [r2, #0]
 8005244:	0892      	lsrs	r2, r2, #2
 8005246:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8005248:	220f      	movs	r2, #15
 800524a:	18bb      	adds	r3, r7, r2
 800524c:	18ba      	adds	r2, r7, r2
 800524e:	7812      	ldrb	r2, [r2, #0]
 8005250:	3201      	adds	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8005254:	1dbb      	adds	r3, r7, #6
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	2b3f      	cmp	r3, #63	@ 0x3f
 800525a:	d8f0      	bhi.n	800523e <calc_gas_wait+0x2a>
        }

        durval = (uint8_t)(dur + (factor * 64));
 800525c:	1dbb      	adds	r3, r7, #6
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b2d9      	uxtb	r1, r3
 8005262:	230f      	movs	r3, #15
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	b2da      	uxtb	r2, r3
 800526c:	230e      	movs	r3, #14
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	188a      	adds	r2, r1, r2
 8005272:	701a      	strb	r2, [r3, #0]
    }

    return durval;
 8005274:	230e      	movs	r3, #14
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	781b      	ldrb	r3, [r3, #0]
}
 800527a:	0018      	movs	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	b004      	add	sp, #16
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8005284:	b5b0      	push	{r4, r5, r7, lr}
 8005286:	b08e      	sub	sp, #56	@ 0x38
 8005288:	af00      	add	r7, sp, #0
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	230f      	movs	r3, #15
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	1c02      	adds	r2, r0, #0
 8005294:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8005296:	2337      	movs	r3, #55	@ 0x37
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800529e:	2310      	movs	r3, #16
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	0018      	movs	r0, r3
 80052a4:	2311      	movs	r3, #17
 80052a6:	001a      	movs	r2, r3
 80052a8:	2100      	movs	r1, #0
 80052aa:	f006 fdbb 	bl	800be24 <memset>
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 80052ae:	2336      	movs	r3, #54	@ 0x36
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	2205      	movs	r2, #5
 80052b4:	701a      	strb	r2, [r3, #0]

    while ((tries) && (rslt == BME68X_OK))
 80052b6:	e14e      	b.n	8005556 <read_field_data+0x2d2>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 80052b8:	230f      	movs	r3, #15
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	1c1a      	adds	r2, r3, #0
 80052c0:	0112      	lsls	r2, r2, #4
 80052c2:	18d3      	adds	r3, r2, r3
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	331d      	adds	r3, #29
 80052c8:	b2d8      	uxtb	r0, r3
 80052ca:	2537      	movs	r5, #55	@ 0x37
 80052cc:	197c      	adds	r4, r7, r5
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2210      	movs	r2, #16
 80052d2:	18b9      	adds	r1, r7, r2
 80052d4:	2211      	movs	r2, #17
 80052d6:	f7fe fdef 	bl	8003eb8 <bme68x_get_regs>
 80052da:	0003      	movs	r3, r0
 80052dc:	7023      	strb	r3, [r4, #0]
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d103      	bne.n	80052ec <read_field_data+0x68>
        {
            rslt = BME68X_E_NULL_PTR;
 80052e4:	197b      	adds	r3, r7, r5
 80052e6:	22ff      	movs	r2, #255	@ 0xff
 80052e8:	701a      	strb	r2, [r3, #0]
            break;
 80052ea:	e140      	b.n	800556e <read_field_data+0x2ea>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 80052ec:	2010      	movs	r0, #16
 80052ee:	183b      	adds	r3, r7, r0
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	227f      	movs	r2, #127	@ 0x7f
 80052f4:	4393      	bics	r3, r2
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 80052fc:	183b      	adds	r3, r7, r0
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	220f      	movs	r2, #15
 8005302:	4013      	ands	r3, r2
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 800530a:	183b      	adds	r3, r7, r0
 800530c:	785a      	ldrb	r2, [r3, #1]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8005312:	183b      	adds	r3, r7, r0
 8005314:	789b      	ldrb	r3, [r3, #2]
 8005316:	031a      	lsls	r2, r3, #12
 8005318:	183b      	adds	r3, r7, r0
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	4313      	orrs	r3, r2
 8005320:	183a      	adds	r2, r7, r0
 8005322:	7912      	ldrb	r2, [r2, #4]
 8005324:	0912      	lsrs	r2, r2, #4
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	4313      	orrs	r3, r2
 800532a:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 800532c:	183b      	adds	r3, r7, r0
 800532e:	795b      	ldrb	r3, [r3, #5]
 8005330:	031a      	lsls	r2, r3, #12
 8005332:	183b      	adds	r3, r7, r0
 8005334:	799b      	ldrb	r3, [r3, #6]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	4313      	orrs	r3, r2
 800533a:	183a      	adds	r2, r7, r0
 800533c:	79d2      	ldrb	r2, [r2, #7]
 800533e:	0912      	lsrs	r2, r2, #4
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	4313      	orrs	r3, r2
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8005346:	183b      	adds	r3, r7, r0
 8005348:	7a1b      	ldrb	r3, [r3, #8]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	b29a      	uxth	r2, r3
 800534e:	183b      	adds	r3, r7, r0
 8005350:	7a5b      	ldrb	r3, [r3, #9]
 8005352:	0019      	movs	r1, r3
 8005354:	232a      	movs	r3, #42	@ 0x2a
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	430a      	orrs	r2, r1
 800535a:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 800535c:	183b      	adds	r3, r7, r0
 800535e:	7b5b      	ldrb	r3, [r3, #13]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	b29a      	uxth	r2, r3
 8005364:	183b      	adds	r3, r7, r0
 8005366:	7b9b      	ldrb	r3, [r3, #14]
 8005368:	099b      	lsrs	r3, r3, #6
 800536a:	b2db      	uxtb	r3, r3
 800536c:	0019      	movs	r1, r3
 800536e:	2328      	movs	r3, #40	@ 0x28
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	430a      	orrs	r2, r1
 8005374:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8005376:	183b      	adds	r3, r7, r0
 8005378:	7bdb      	ldrb	r3, [r3, #15]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	b29a      	uxth	r2, r3
 800537e:	183b      	adds	r3, r7, r0
 8005380:	7c1b      	ldrb	r3, [r3, #16]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	b2db      	uxtb	r3, r3
 8005386:	0019      	movs	r1, r3
 8005388:	2326      	movs	r3, #38	@ 0x26
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	430a      	orrs	r2, r1
 800538e:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8005390:	183b      	adds	r3, r7, r0
 8005392:	7b9a      	ldrb	r2, [r3, #14]
 8005394:	2325      	movs	r3, #37	@ 0x25
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	210f      	movs	r1, #15
 800539a:	400a      	ands	r2, r1
 800539c:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 800539e:	183b      	adds	r3, r7, r0
 80053a0:	7c1a      	ldrb	r2, [r3, #16]
 80053a2:	2324      	movs	r3, #36	@ 0x24
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	210f      	movs	r1, #15
 80053a8:	400a      	ands	r2, r1
 80053aa:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d11c      	bne.n	80053ee <read_field_data+0x16a>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b25a      	sxtb	r2, r3
 80053ba:	183b      	adds	r3, r7, r0
 80053bc:	7c1b      	ldrb	r3, [r3, #16]
 80053be:	b25b      	sxtb	r3, r3
 80053c0:	2120      	movs	r1, #32
 80053c2:	400b      	ands	r3, r1
 80053c4:	b25b      	sxtb	r3, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	b25b      	sxtb	r3, r3
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b25a      	sxtb	r2, r3
 80053d6:	183b      	adds	r3, r7, r0
 80053d8:	7c1b      	ldrb	r3, [r3, #16]
 80053da:	b25b      	sxtb	r3, r3
 80053dc:	2110      	movs	r1, #16
 80053de:	400b      	ands	r3, r1
 80053e0:	b25b      	sxtb	r3, r3
 80053e2:	4313      	orrs	r3, r2
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e01c      	b.n	8005428 <read_field_data+0x1a4>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	b25a      	sxtb	r2, r3
 80053f4:	2010      	movs	r0, #16
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	7b9b      	ldrb	r3, [r3, #14]
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	2120      	movs	r1, #32
 80053fe:	400b      	ands	r3, r1
 8005400:	b25b      	sxtb	r3, r3
 8005402:	4313      	orrs	r3, r2
 8005404:	b25b      	sxtb	r3, r3
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	b25a      	sxtb	r2, r3
 8005412:	183b      	adds	r3, r7, r0
 8005414:	7b9b      	ldrb	r3, [r3, #14]
 8005416:	b25b      	sxtb	r3, r3
 8005418:	2110      	movs	r1, #16
 800541a:	400b      	ands	r3, r1
 800541c:	b25b      	sxtb	r3, r3
 800541e:	4313      	orrs	r3, r2
 8005420:	b25b      	sxtb	r3, r3
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	b25b      	sxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	db00      	blt.n	8005434 <read_field_data+0x1b0>
 8005432:	e07d      	b.n	8005530 <read_field_data+0x2ac>
 8005434:	2237      	movs	r2, #55	@ 0x37
 8005436:	18bb      	adds	r3, r7, r2
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	b25b      	sxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d000      	beq.n	8005442 <read_field_data+0x1be>
 8005440:	e076      	b.n	8005530 <read_field_data+0x2ac>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	335a      	adds	r3, #90	@ 0x5a
 8005448:	b2d8      	uxtb	r0, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	1cd9      	adds	r1, r3, #3
 800544e:	0015      	movs	r5, r2
 8005450:	18bc      	adds	r4, r7, r2
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f7fe fd2f 	bl	8003eb8 <bme68x_get_regs>
 800545a:	0003      	movs	r3, r0
 800545c:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 800545e:	002a      	movs	r2, r5
 8005460:	18bb      	adds	r3, r7, r2
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	b25b      	sxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10c      	bne.n	8005484 <read_field_data+0x200>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	3350      	adds	r3, #80	@ 0x50
 8005470:	b2d8      	uxtb	r0, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	1d19      	adds	r1, r3, #4
 8005476:	18bc      	adds	r4, r7, r2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f7fe fd1c 	bl	8003eb8 <bme68x_get_regs>
 8005480:	0003      	movs	r3, r0
 8005482:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8005484:	2237      	movs	r2, #55	@ 0x37
 8005486:	18bb      	adds	r3, r7, r2
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	b25b      	sxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10c      	bne.n	80054aa <read_field_data+0x226>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	3364      	adds	r3, #100	@ 0x64
 8005496:	b2d8      	uxtb	r0, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1d59      	adds	r1, r3, #5
 800549c:	18bc      	adds	r4, r7, r2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f7fe fd09 	bl	8003eb8 <bme68x_get_regs>
 80054a6:	0003      	movs	r3, r0
 80054a8:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 80054aa:	2337      	movs	r3, #55	@ 0x37
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	b25b      	sxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d13c      	bne.n	8005530 <read_field_data+0x2ac>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ba:	0011      	movs	r1, r2
 80054bc:	0018      	movs	r0, r3
 80054be:	f7ff fa17 	bl	80048f0 <calc_temperature>
 80054c2:	1c02      	adds	r2, r0, #0
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	609a      	str	r2, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	0011      	movs	r1, r2
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7ff faa6 	bl	8004a20 <calc_pressure>
 80054d4:	1c02      	adds	r2, r0, #0
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	60da      	str	r2, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	232a      	movs	r3, #42	@ 0x2a
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	0011      	movs	r1, r2
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7ff fbfb 	bl	8004ce0 <calc_humidity>
 80054ea:	1c02      	adds	r2, r0, #0
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	611a      	str	r2, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10d      	bne.n	8005514 <read_field_data+0x290>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80054f8:	2324      	movs	r3, #36	@ 0x24
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	2326      	movs	r3, #38	@ 0x26
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	0011      	movs	r1, r2
 8005506:	0018      	movs	r0, r3
 8005508:	f7ff fd7a 	bl	8005000 <calc_gas_resistance_high>
 800550c:	1c02      	adds	r2, r0, #0
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	615a      	str	r2, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8005512:	e02c      	b.n	800556e <read_field_data+0x2ea>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	2325      	movs	r3, #37	@ 0x25
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	7819      	ldrb	r1, [r3, #0]
 800551c:	2328      	movs	r3, #40	@ 0x28
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	0018      	movs	r0, r3
 8005524:	f7ff fcb8 	bl	8004e98 <calc_gas_resistance_low>
 8005528:	1c02      	adds	r2, r0, #0
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	615a      	str	r2, [r3, #20]
                break;
 800552e:	e01e      	b.n	800556e <read_field_data+0x2ea>
            }
        }

        if (rslt == BME68X_OK)
 8005530:	2337      	movs	r3, #55	@ 0x37
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b25b      	sxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <read_field_data+0x2c6>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	480e      	ldr	r0, [pc, #56]	@ (8005580 <read_field_data+0x2fc>)
 8005546:	0019      	movs	r1, r3
 8005548:	4790      	blx	r2
        }

        tries--;
 800554a:	2136      	movs	r1, #54	@ 0x36
 800554c:	187b      	adds	r3, r7, r1
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	187b      	adds	r3, r7, r1
 8005552:	3a01      	subs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
    while ((tries) && (rslt == BME68X_OK))
 8005556:	2336      	movs	r3, #54	@ 0x36
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <read_field_data+0x2ea>
 8005560:	2337      	movs	r3, #55	@ 0x37
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b25b      	sxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d100      	bne.n	800556e <read_field_data+0x2ea>
 800556c:	e6a4      	b.n	80052b8 <read_field_data+0x34>
    }

    return rslt;
 800556e:	2337      	movs	r3, #55	@ 0x37
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	b25b      	sxtb	r3, r3
}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b00e      	add	sp, #56	@ 0x38
 800557c:	bdb0      	pop	{r4, r5, r7, pc}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	00002710 	.word	0x00002710

08005584 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8005584:	b5b0      	push	{r4, r5, r7, lr}
 8005586:	b09c      	sub	sp, #112	@ 0x70
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 800558e:	246f      	movs	r4, #111	@ 0x6f
 8005590:	193b      	adds	r3, r7, r4
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8005596:	2328      	movs	r3, #40	@ 0x28
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	0018      	movs	r0, r3
 800559c:	2333      	movs	r3, #51	@ 0x33
 800559e:	001a      	movs	r2, r3
 80055a0:	2100      	movs	r1, #0
 80055a2:	f006 fc3f 	bl	800be24 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80055a6:	2308      	movs	r3, #8
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	0018      	movs	r0, r3
 80055ac:	231e      	movs	r3, #30
 80055ae:	001a      	movs	r2, r3
 80055b0:	2100      	movs	r1, #0
 80055b2:	f006 fc37 	bl	800be24 <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10c      	bne.n	80055d8 <read_all_field_data+0x54>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d107      	bne.n	80055d8 <read_all_field_data+0x54>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3308      	adds	r3, #8
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <read_all_field_data+0x54>
    {
        rslt = BME68X_E_NULL_PTR;
 80055d2:	193b      	adds	r3, r7, r4
 80055d4:	22ff      	movs	r2, #255	@ 0xff
 80055d6:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BME68X_OK)
 80055d8:	226f      	movs	r2, #111	@ 0x6f
 80055da:	18bb      	adds	r3, r7, r2
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <read_all_field_data+0x74>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 80055e4:	18bc      	adds	r4, r7, r2
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2228      	movs	r2, #40	@ 0x28
 80055ea:	18b9      	adds	r1, r7, r2
 80055ec:	2233      	movs	r2, #51	@ 0x33
 80055ee:	201d      	movs	r0, #29
 80055f0:	f7fe fc62 	bl	8003eb8 <bme68x_get_regs>
 80055f4:	0003      	movs	r3, r0
 80055f6:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 80055f8:	226f      	movs	r2, #111	@ 0x6f
 80055fa:	18bb      	adds	r3, r7, r2
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8005604:	18bc      	adds	r4, r7, r2
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2208      	movs	r2, #8
 800560a:	18b9      	adds	r1, r7, r2
 800560c:	221e      	movs	r2, #30
 800560e:	2050      	movs	r0, #80	@ 0x50
 8005610:	f7fe fc52 	bl	8003eb8 <bme68x_get_regs>
 8005614:	0003      	movs	r3, r0
 8005616:	7023      	strb	r3, [r4, #0]
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8005618:	236e      	movs	r3, #110	@ 0x6e
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	e1af      	b.n	8005982 <read_all_field_data+0x3fe>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8005622:	206d      	movs	r0, #109	@ 0x6d
 8005624:	183a      	adds	r2, r7, r0
 8005626:	256e      	movs	r5, #110	@ 0x6e
 8005628:	197b      	adds	r3, r7, r5
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	1c19      	adds	r1, r3, #0
 800562e:	0109      	lsls	r1, r1, #4
 8005630:	18cb      	adds	r3, r1, r3
 8005632:	7013      	strb	r3, [r2, #0]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8005634:	183b      	adds	r3, r7, r0
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2428      	movs	r4, #40	@ 0x28
 800563a:	193a      	adds	r2, r7, r4
 800563c:	5cd2      	ldrb	r2, [r2, r3]
 800563e:	197b      	adds	r3, r7, r5
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	18cb      	adds	r3, r1, r3
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	217f      	movs	r1, #127	@ 0x7f
 800564c:	438a      	bics	r2, r1
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8005652:	183b      	adds	r3, r7, r0
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	193a      	adds	r2, r7, r4
 8005658:	5cd2      	ldrb	r2, [r2, r3]
 800565a:	197b      	adds	r3, r7, r5
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	18cb      	adds	r3, r1, r3
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	210f      	movs	r1, #15
 8005668:	400a      	ands	r2, r1
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 800566e:	183b      	adds	r3, r7, r0
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	197b      	adds	r3, r7, r5
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	18cb      	adds	r3, r1, r3
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1939      	adds	r1, r7, r4
 8005682:	5c8a      	ldrb	r2, [r1, r2]
 8005684:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8005686:	183b      	adds	r3, r7, r0
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	3302      	adds	r3, #2
 800568c:	193a      	adds	r2, r7, r4
 800568e:	5cd3      	ldrb	r3, [r2, r3]
 8005690:	031a      	lsls	r2, r3, #12
 8005692:	183b      	adds	r3, r7, r0
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	3303      	adds	r3, #3
 8005698:	1939      	adds	r1, r7, r4
 800569a:	5ccb      	ldrb	r3, [r1, r3]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 80056a0:	183a      	adds	r2, r7, r0
 80056a2:	7812      	ldrb	r2, [r2, #0]
 80056a4:	3204      	adds	r2, #4
 80056a6:	1939      	adds	r1, r7, r4
 80056a8:	5c8a      	ldrb	r2, [r1, r2]
 80056aa:	0912      	lsrs	r2, r2, #4
 80056ac:	b2d2      	uxtb	r2, r2
        adc_pres =
 80056ae:	4313      	orrs	r3, r2
 80056b0:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 80056b2:	183b      	adds	r3, r7, r0
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	3305      	adds	r3, #5
 80056b8:	193a      	adds	r2, r7, r4
 80056ba:	5cd3      	ldrb	r3, [r2, r3]
 80056bc:	031a      	lsls	r2, r3, #12
 80056be:	183b      	adds	r3, r7, r0
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	3306      	adds	r3, #6
 80056c4:	1939      	adds	r1, r7, r4
 80056c6:	5ccb      	ldrb	r3, [r1, r3]
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 80056cc:	183a      	adds	r2, r7, r0
 80056ce:	7812      	ldrb	r2, [r2, #0]
 80056d0:	3207      	adds	r2, #7
 80056d2:	1939      	adds	r1, r7, r4
 80056d4:	5c8a      	ldrb	r2, [r1, r2]
 80056d6:	0912      	lsrs	r2, r2, #4
 80056d8:	b2d2      	uxtb	r2, r2
        adc_temp =
 80056da:	4313      	orrs	r3, r2
 80056dc:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80056de:	183b      	adds	r3, r7, r0
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	193a      	adds	r2, r7, r4
 80056e6:	5cd3      	ldrb	r3, [r2, r3]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	183b      	adds	r3, r7, r0
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	3309      	adds	r3, #9
 80056f2:	1939      	adds	r1, r7, r4
 80056f4:	5ccb      	ldrb	r3, [r1, r3]
 80056f6:	0019      	movs	r1, r3
 80056f8:	2362      	movs	r3, #98	@ 0x62
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	430a      	orrs	r2, r1
 80056fe:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8005700:	183b      	adds	r3, r7, r0
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	330d      	adds	r3, #13
 8005706:	193a      	adds	r2, r7, r4
 8005708:	5cd3      	ldrb	r3, [r2, r3]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	b29a      	uxth	r2, r3
 800570e:	183b      	adds	r3, r7, r0
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	330e      	adds	r3, #14
 8005714:	1939      	adds	r1, r7, r4
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	099b      	lsrs	r3, r3, #6
 800571a:	b2db      	uxtb	r3, r3
 800571c:	0019      	movs	r1, r3
 800571e:	2360      	movs	r3, #96	@ 0x60
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	430a      	orrs	r2, r1
 8005724:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8005726:	183b      	adds	r3, r7, r0
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	330f      	adds	r3, #15
 800572c:	193a      	adds	r2, r7, r4
 800572e:	5cd3      	ldrb	r3, [r2, r3]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	b29a      	uxth	r2, r3
 8005734:	183b      	adds	r3, r7, r0
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	3310      	adds	r3, #16
 800573a:	1939      	adds	r1, r7, r4
 800573c:	5ccb      	ldrb	r3, [r1, r3]
 800573e:	099b      	lsrs	r3, r3, #6
 8005740:	b2db      	uxtb	r3, r3
 8005742:	0019      	movs	r1, r3
 8005744:	235e      	movs	r3, #94	@ 0x5e
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	430a      	orrs	r2, r1
 800574a:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 800574c:	183b      	adds	r3, r7, r0
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	330e      	adds	r3, #14
 8005752:	193a      	adds	r2, r7, r4
 8005754:	5cd2      	ldrb	r2, [r2, r3]
 8005756:	235d      	movs	r3, #93	@ 0x5d
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	210f      	movs	r1, #15
 800575c:	400a      	ands	r2, r1
 800575e:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8005760:	183b      	adds	r3, r7, r0
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	3310      	adds	r3, #16
 8005766:	193a      	adds	r2, r7, r4
 8005768:	5cd2      	ldrb	r2, [r2, r3]
 800576a:	235c      	movs	r3, #92	@ 0x5c
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	210f      	movs	r1, #15
 8005770:	400a      	ands	r2, r1
 8005772:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d136      	bne.n	80057ea <read_all_field_data+0x266>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 800577c:	197b      	adds	r3, r7, r5
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	18d3      	adds	r3, r2, r3
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	b25a      	sxtb	r2, r3
 800578c:	183b      	adds	r3, r7, r0
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	3310      	adds	r3, #16
 8005792:	1939      	adds	r1, r7, r4
 8005794:	5ccb      	ldrb	r3, [r1, r3]
 8005796:	b25b      	sxtb	r3, r3
 8005798:	2120      	movs	r1, #32
 800579a:	400b      	ands	r3, r1
 800579c:	b25b      	sxtb	r3, r3
 800579e:	4313      	orrs	r3, r2
 80057a0:	b259      	sxtb	r1, r3
 80057a2:	197b      	adds	r3, r7, r5
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	18d3      	adds	r3, r2, r3
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	b2ca      	uxtb	r2, r1
 80057b0:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 80057b2:	197b      	adds	r3, r7, r5
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	18d3      	adds	r3, r2, r3
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	b25a      	sxtb	r2, r3
 80057c2:	183b      	adds	r3, r7, r0
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	3310      	adds	r3, #16
 80057c8:	1939      	adds	r1, r7, r4
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	2110      	movs	r1, #16
 80057d0:	400b      	ands	r3, r1
 80057d2:	b25b      	sxtb	r3, r3
 80057d4:	4313      	orrs	r3, r2
 80057d6:	b259      	sxtb	r1, r3
 80057d8:	197b      	adds	r3, r7, r5
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	18d3      	adds	r3, r2, r3
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	b2ca      	uxtb	r2, r1
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e038      	b.n	800585c <read_all_field_data+0x2d8>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 80057ea:	206e      	movs	r0, #110	@ 0x6e
 80057ec:	183b      	adds	r3, r7, r0
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	18d3      	adds	r3, r2, r3
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b25a      	sxtb	r2, r3
 80057fc:	246d      	movs	r4, #109	@ 0x6d
 80057fe:	193b      	adds	r3, r7, r4
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	330e      	adds	r3, #14
 8005804:	2528      	movs	r5, #40	@ 0x28
 8005806:	1979      	adds	r1, r7, r5
 8005808:	5ccb      	ldrb	r3, [r1, r3]
 800580a:	b25b      	sxtb	r3, r3
 800580c:	2120      	movs	r1, #32
 800580e:	400b      	ands	r3, r1
 8005810:	b25b      	sxtb	r3, r3
 8005812:	4313      	orrs	r3, r2
 8005814:	b259      	sxtb	r1, r3
 8005816:	183b      	adds	r3, r7, r0
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	18d3      	adds	r3, r2, r3
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	b2ca      	uxtb	r2, r1
 8005824:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8005826:	183b      	adds	r3, r7, r0
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	18d3      	adds	r3, r2, r3
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	b25a      	sxtb	r2, r3
 8005836:	193b      	adds	r3, r7, r4
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	330e      	adds	r3, #14
 800583c:	1979      	adds	r1, r7, r5
 800583e:	5ccb      	ldrb	r3, [r1, r3]
 8005840:	b25b      	sxtb	r3, r3
 8005842:	2110      	movs	r1, #16
 8005844:	400b      	ands	r3, r1
 8005846:	b25b      	sxtb	r3, r3
 8005848:	4313      	orrs	r3, r2
 800584a:	b259      	sxtb	r1, r3
 800584c:	183b      	adds	r3, r7, r0
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	18d3      	adds	r3, r2, r3
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	b2ca      	uxtb	r2, r1
 800585a:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 800585c:	256e      	movs	r5, #110	@ 0x6e
 800585e:	197b      	adds	r3, r7, r5
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	18d3      	adds	r3, r2, r3
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	0019      	movs	r1, r3
 800586e:	197b      	adds	r3, r7, r5
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	18d3      	adds	r3, r2, r3
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2008      	movs	r0, #8
 800587c:	183a      	adds	r2, r7, r0
 800587e:	5c52      	ldrb	r2, [r2, r1]
 8005880:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8005882:	197b      	adds	r3, r7, r5
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	18d3      	adds	r3, r2, r3
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	330a      	adds	r3, #10
 8005892:	001a      	movs	r2, r3
 8005894:	197b      	adds	r3, r7, r5
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	18cb      	adds	r3, r1, r3
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	1839      	adds	r1, r7, r0
 80058a2:	5c8a      	ldrb	r2, [r1, r2]
 80058a4:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80058a6:	197b      	adds	r3, r7, r5
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	18d3      	adds	r3, r2, r3
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	3314      	adds	r3, #20
 80058b6:	001a      	movs	r2, r3
 80058b8:	197b      	adds	r3, r7, r5
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	18cb      	adds	r3, r1, r3
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	1839      	adds	r1, r7, r0
 80058c6:	5c8a      	ldrb	r2, [r1, r2]
 80058c8:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 80058ca:	197b      	adds	r3, r7, r5
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	18d3      	adds	r3, r2, r3
 80058d4:	681c      	ldr	r4, [r3, #0]
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058da:	0011      	movs	r1, r2
 80058dc:	0018      	movs	r0, r3
 80058de:	f7ff f807 	bl	80048f0 <calc_temperature>
 80058e2:	1c03      	adds	r3, r0, #0
 80058e4:	60a3      	str	r3, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80058e6:	197b      	adds	r3, r7, r5
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	18d3      	adds	r3, r2, r3
 80058f0:	681c      	ldr	r4, [r3, #0]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058f6:	0011      	movs	r1, r2
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7ff f891 	bl	8004a20 <calc_pressure>
 80058fe:	1c03      	adds	r3, r0, #0
 8005900:	60e3      	str	r3, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8005902:	197b      	adds	r3, r7, r5
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	18d3      	adds	r3, r2, r3
 800590c:	681c      	ldr	r4, [r3, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	2362      	movs	r3, #98	@ 0x62
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	0011      	movs	r1, r2
 8005918:	0018      	movs	r0, r3
 800591a:	f7ff f9e1 	bl	8004ce0 <calc_humidity>
 800591e:	1c03      	adds	r3, r0, #0
 8005920:	6123      	str	r3, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d112      	bne.n	8005950 <read_all_field_data+0x3cc>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 800592a:	197b      	adds	r3, r7, r5
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	18d3      	adds	r3, r2, r3
 8005934:	681c      	ldr	r4, [r3, #0]
 8005936:	235c      	movs	r3, #92	@ 0x5c
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	781a      	ldrb	r2, [r3, #0]
 800593c:	235e      	movs	r3, #94	@ 0x5e
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	0011      	movs	r1, r2
 8005944:	0018      	movs	r0, r3
 8005946:	f7ff fb5b 	bl	8005000 <calc_gas_resistance_high>
 800594a:	1c03      	adds	r3, r0, #0
 800594c:	6163      	str	r3, [r4, #20]
 800594e:	e012      	b.n	8005976 <read_all_field_data+0x3f2>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8005950:	236e      	movs	r3, #110	@ 0x6e
 8005952:	18fb      	adds	r3, r7, r3
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	18d3      	adds	r3, r2, r3
 800595c:	681c      	ldr	r4, [r3, #0]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	235d      	movs	r3, #93	@ 0x5d
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	7819      	ldrb	r1, [r3, #0]
 8005966:	2360      	movs	r3, #96	@ 0x60
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	0018      	movs	r0, r3
 800596e:	f7ff fa93 	bl	8004e98 <calc_gas_resistance_low>
 8005972:	1c03      	adds	r3, r0, #0
 8005974:	6163      	str	r3, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8005976:	216e      	movs	r1, #110	@ 0x6e
 8005978:	187b      	adds	r3, r7, r1
 800597a:	781a      	ldrb	r2, [r3, #0]
 800597c:	187b      	adds	r3, r7, r1
 800597e:	3201      	adds	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	236e      	movs	r3, #110	@ 0x6e
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d806      	bhi.n	800599a <read_all_field_data+0x416>
 800598c:	236f      	movs	r3, #111	@ 0x6f
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b25b      	sxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d100      	bne.n	800599a <read_all_field_data+0x416>
 8005998:	e643      	b.n	8005622 <read_all_field_data+0x9e>
        }
    }

    return rslt;
 800599a:	236f      	movs	r3, #111	@ 0x6f
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	b25b      	sxtb	r3, r3
}
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b01c      	add	sp, #112	@ 0x70
 80059a8:	bdb0      	pop	{r4, r5, r7, pc}

080059aa <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80059aa:	b5b0      	push	{r4, r5, r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	0002      	movs	r2, r0
 80059b2:	6039      	str	r1, [r7, #0]
 80059b4:	1dfb      	adds	r3, r7, #7
 80059b6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80059b8:	250f      	movs	r5, #15
 80059ba:	197c      	adds	r4, r7, r5
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	0018      	movs	r0, r3
 80059c0:	f000 f8e1 	bl	8005b86 <null_ptr_check>
 80059c4:	0003      	movs	r3, r0
 80059c6:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80059c8:	197b      	adds	r3, r7, r5
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d160      	bne.n	8005a94 <set_mem_page+0xea>
    {
        if (reg_addr > 0x7f)
 80059d2:	1dfb      	adds	r3, r7, #7
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	b25b      	sxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	da04      	bge.n	80059e6 <set_mem_page+0x3c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80059dc:	230e      	movs	r3, #14
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	e003      	b.n	80059ee <set_mem_page+0x44>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80059e6:	230e      	movs	r3, #14
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2210      	movs	r2, #16
 80059ec:	701a      	strb	r2, [r3, #0]
        }

        if (mem_page != dev->mem_page)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	7b5b      	ldrb	r3, [r3, #13]
 80059f2:	210e      	movs	r1, #14
 80059f4:	187a      	adds	r2, r7, r1
 80059f6:	7812      	ldrb	r2, [r2, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d04b      	beq.n	8005a94 <set_mem_page+0xea>
        {
            dev->mem_page = mem_page;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	187a      	adds	r2, r7, r1
 8005a00:	7812      	ldrb	r2, [r2, #0]
 8005a02:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	220d      	movs	r2, #13
 8005a0e:	18b9      	adds	r1, r7, r2
 8005a10:	2201      	movs	r2, #1
 8005a12:	20f3      	movs	r0, #243	@ 0xf3
 8005a14:	47a0      	blx	r4
 8005a16:	0003      	movs	r3, r0
 8005a18:	0019      	movs	r1, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	224c      	movs	r2, #76	@ 0x4c
 8005a1e:	5499      	strb	r1, [r3, r2]
            if (dev->intf_rslt != 0)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	224c      	movs	r2, #76	@ 0x4c
 8005a24:	569b      	ldrsb	r3, [r3, r2]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <set_mem_page+0x88>
            {
                rslt = BME68X_E_COM_FAIL;
 8005a2a:	230f      	movs	r3, #15
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	22fe      	movs	r2, #254	@ 0xfe
 8005a30:	701a      	strb	r2, [r3, #0]
            }

            if (rslt == BME68X_OK)
 8005a32:	250f      	movs	r5, #15
 8005a34:	197b      	adds	r3, r7, r5
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	b25b      	sxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d12a      	bne.n	8005a94 <set_mem_page+0xea>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8005a3e:	210d      	movs	r1, #13
 8005a40:	187b      	adds	r3, r7, r1
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2210      	movs	r2, #16
 8005a46:	4393      	bics	r3, r2
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	187b      	adds	r3, r7, r1
 8005a4c:	701a      	strb	r2, [r3, #0]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	7b5b      	ldrb	r3, [r3, #13]
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	2210      	movs	r2, #16
 8005a56:	4013      	ands	r3, r2
 8005a58:	b25a      	sxtb	r2, r3
 8005a5a:	187b      	adds	r3, r7, r1
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	187b      	adds	r3, r7, r1
 8005a68:	701a      	strb	r2, [r3, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	1879      	adds	r1, r7, r1
 8005a74:	2201      	movs	r2, #1
 8005a76:	2073      	movs	r0, #115	@ 0x73
 8005a78:	47a0      	blx	r4
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	224c      	movs	r2, #76	@ 0x4c
 8005a82:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	224c      	movs	r2, #76	@ 0x4c
 8005a88:	569b      	ldrsb	r3, [r3, r2]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <set_mem_page+0xea>
                {
                    rslt = BME68X_E_COM_FAIL;
 8005a8e:	197b      	adds	r3, r7, r5
 8005a90:	22fe      	movs	r2, #254	@ 0xfe
 8005a92:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 8005a94:	230f      	movs	r3, #15
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	b25b      	sxtb	r3, r3
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b004      	add	sp, #16
 8005aa2:	bdb0      	pop	{r4, r5, r7, pc}

08005aa4 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8005aa4:	b5b0      	push	{r4, r5, r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8005aac:	250f      	movs	r5, #15
 8005aae:	197c      	adds	r4, r7, r5
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 f867 	bl	8005b86 <null_ptr_check>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8005abc:	197b      	adds	r3, r7, r5
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b25b      	sxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d11e      	bne.n	8005b04 <get_mem_page+0x60>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	220e      	movs	r2, #14
 8005ad0:	18b9      	adds	r1, r7, r2
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	20f3      	movs	r0, #243	@ 0xf3
 8005ad6:	47a0      	blx	r4
 8005ad8:	0003      	movs	r3, r0
 8005ada:	0019      	movs	r1, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	224c      	movs	r2, #76	@ 0x4c
 8005ae0:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	224c      	movs	r2, #76	@ 0x4c
 8005ae6:	569b      	ldrsb	r3, [r3, r2]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <get_mem_page+0x50>
        {
            rslt = BME68X_E_COM_FAIL;
 8005aec:	197b      	adds	r3, r7, r5
 8005aee:	22fe      	movs	r2, #254	@ 0xfe
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	e007      	b.n	8005b04 <get_mem_page+0x60>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8005af4:	230e      	movs	r3, #14
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2210      	movs	r2, #16
 8005afc:	4013      	ands	r3, r2
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8005b04:	230f      	movs	r3, #15
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	b25b      	sxtb	r3, r3
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b004      	add	sp, #16
 8005b12:	bdb0      	pop	{r4, r5, r7, pc}

08005b14 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8005b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	250b      	movs	r5, #11
 8005b20:	197b      	adds	r3, r7, r5
 8005b22:	1c0a      	adds	r2, r1, #0
 8005b24:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8005b26:	2617      	movs	r6, #23
 8005b28:	19bc      	adds	r4, r7, r6
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 f82a 	bl	8005b86 <null_ptr_check>
 8005b32:	0003      	movs	r3, r0
 8005b34:	7023      	strb	r3, [r4, #0]
    if ((value != NULL) && (rslt == BME68X_OK))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d018      	beq.n	8005b6e <boundary_check+0x5a>
 8005b3c:	19bb      	adds	r3, r7, r6
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b25b      	sxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d113      	bne.n	8005b6e <boundary_check+0x5a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	197a      	adds	r2, r7, r5
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d211      	bcs.n	8005b76 <boundary_check+0x62>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	197a      	adds	r2, r7, r5
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	224d      	movs	r2, #77	@ 0x4d
 8005b5e:	5c9b      	ldrb	r3, [r3, r2]
 8005b60:	2201      	movs	r2, #1
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b2d9      	uxtb	r1, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	224d      	movs	r2, #77	@ 0x4d
 8005b6a:	5499      	strb	r1, [r3, r2]
        if (*value > max)
 8005b6c:	e003      	b.n	8005b76 <boundary_check+0x62>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8005b6e:	2317      	movs	r3, #23
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	22ff      	movs	r2, #255	@ 0xff
 8005b74:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8005b76:	2317      	movs	r3, #23
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b25b      	sxtb	r3, r3
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b007      	add	sp, #28
 8005b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b86 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8005b8e:	230f      	movs	r3, #15
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00b      	beq.n	8005bb4 <null_ptr_check+0x2e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <null_ptr_check+0x2e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <null_ptr_check+0x2e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d103      	bne.n	8005bbc <null_ptr_check+0x36>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8005bb4:	230f      	movs	r3, #15
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	22ff      	movs	r2, #255	@ 0xff
 8005bba:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8005bbc:	230f      	movs	r3, #15
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	b25b      	sxtb	r3, r3
}
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b004      	add	sp, #16
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8005bcc:	b5b0      	push	{r4, r5, r7, lr}
 8005bce:	b092      	sub	sp, #72	@ 0x48
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	607a      	str	r2, [r7, #4]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	240b      	movs	r4, #11
 8005bda:	193b      	adds	r3, r7, r4
 8005bdc:	1c0a      	adds	r2, r1, #0
 8005bde:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8005be0:	2347      	movs	r3, #71	@ 0x47
 8005be2:	18fb      	adds	r3, r7, r3
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8005be8:	2345      	movs	r3, #69	@ 0x45
 8005bea:	18fb      	adds	r3, r7, r3
 8005bec:	2200      	movs	r2, #0
 8005bee:	701a      	strb	r2, [r3, #0]
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8005bf0:	2343      	movs	r3, #67	@ 0x43
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	226e      	movs	r2, #110	@ 0x6e
 8005bf6:	701a      	strb	r2, [r3, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8005bf8:	2338      	movs	r3, #56	@ 0x38
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	230a      	movs	r3, #10
 8005c00:	001a      	movs	r2, r3
 8005c02:	2100      	movs	r1, #0
 8005c04:	f006 f90e 	bl	800be24 <memset>
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8005c08:	232c      	movs	r3, #44	@ 0x2c
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	230a      	movs	r3, #10
 8005c10:	001a      	movs	r2, r3
 8005c12:	2100      	movs	r1, #0
 8005c14:	f006 f906 	bl	800be24 <memset>
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8005c18:	2320      	movs	r3, #32
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	230a      	movs	r3, #10
 8005c20:	001a      	movs	r2, r3
 8005c22:	2100      	movs	r1, #0
 8005c24:	f006 f8fe 	bl	800be24 <memset>
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8005c28:	2314      	movs	r3, #20
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	230a      	movs	r3, #10
 8005c30:	001a      	movs	r2, r3
 8005c32:	2100      	movs	r1, #0
 8005c34:	f006 f8f6 	bl	800be24 <memset>

    switch (op_mode)
 8005c38:	193b      	adds	r3, r7, r4
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d02d      	beq.n	8005c9c <set_conf+0xd0>
 8005c40:	dd00      	ble.n	8005c44 <set_conf+0x78>
 8005c42:	e10c      	b.n	8005e5e <set_conf+0x292>
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d003      	beq.n	8005c50 <set_conf+0x84>
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d100      	bne.n	8005c4e <set_conf+0x82>
 8005c4c:	e088      	b.n	8005d60 <set_conf+0x194>
 8005c4e:	e106      	b.n	8005e5e <set_conf+0x292>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8005c50:	2338      	movs	r3, #56	@ 0x38
 8005c52:	18fb      	adds	r3, r7, r3
 8005c54:	225a      	movs	r2, #90	@ 0x5a
 8005c56:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	885b      	ldrh	r3, [r3, #2]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	0011      	movs	r1, r2
 8005c60:	0018      	movs	r0, r3
 8005c62:	f7ff fa0b 	bl	800507c <calc_res_heat>
 8005c66:	0003      	movs	r3, r0
 8005c68:	001a      	movs	r2, r3
 8005c6a:	232c      	movs	r3, #44	@ 0x2c
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	701a      	strb	r2, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8005c70:	2320      	movs	r3, #32
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	2264      	movs	r2, #100	@ 0x64
 8005c76:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	889b      	ldrh	r3, [r3, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7ff fac9 	bl	8005214 <calc_gas_wait>
 8005c82:	0003      	movs	r3, r0
 8005c84:	001a      	movs	r2, r3
 8005c86:	2314      	movs	r3, #20
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8005c92:	2345      	movs	r3, #69	@ 0x45
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	2201      	movs	r2, #1
 8005c98:	701a      	strb	r2, [r3, #0]
            break;
 8005c9a:	e0e6      	b.n	8005e6a <set_conf+0x29e>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <set_conf+0xe0>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <set_conf+0xea>
            {
                rslt = BME68X_E_NULL_PTR;
 8005cac:	2347      	movs	r3, #71	@ 0x47
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	22ff      	movs	r2, #255	@ 0xff
 8005cb2:	701a      	strb	r2, [r3, #0]
                break;
 8005cb4:	e0d9      	b.n	8005e6a <set_conf+0x29e>
            }

            for (i = 0; i < conf->profile_len; i++)
 8005cb6:	2346      	movs	r3, #70	@ 0x46
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e03e      	b.n	8005d3e <set_conf+0x172>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8005cc0:	2046      	movs	r0, #70	@ 0x46
 8005cc2:	183b      	adds	r3, r7, r0
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	183a      	adds	r2, r7, r0
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	325a      	adds	r2, #90	@ 0x5a
 8005ccc:	b2d1      	uxtb	r1, r2
 8005cce:	2238      	movs	r2, #56	@ 0x38
 8005cd0:	18ba      	adds	r2, r7, r2
 8005cd2:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	183b      	adds	r3, r7, r0
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	18d3      	adds	r3, r2, r3
 8005ce0:	881a      	ldrh	r2, [r3, #0]
 8005ce2:	0005      	movs	r5, r0
 8005ce4:	183b      	adds	r3, r7, r0
 8005ce6:	781c      	ldrb	r4, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	0019      	movs	r1, r3
 8005cec:	0010      	movs	r0, r2
 8005cee:	f7ff f9c5 	bl	800507c <calc_res_heat>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	001a      	movs	r2, r3
 8005cf6:	232c      	movs	r3, #44	@ 0x2c
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8005cfc:	0028      	movs	r0, r5
 8005cfe:	183b      	adds	r3, r7, r0
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	183a      	adds	r2, r7, r0
 8005d04:	7812      	ldrb	r2, [r2, #0]
 8005d06:	3264      	adds	r2, #100	@ 0x64
 8005d08:	b2d1      	uxtb	r1, r2
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	18ba      	adds	r2, r7, r2
 8005d0e:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	183b      	adds	r3, r7, r0
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	18d3      	adds	r3, r2, r3
 8005d1c:	881a      	ldrh	r2, [r3, #0]
 8005d1e:	0005      	movs	r5, r0
 8005d20:	183b      	adds	r3, r7, r0
 8005d22:	781c      	ldrb	r4, [r3, #0]
 8005d24:	0010      	movs	r0, r2
 8005d26:	f7ff fa75 	bl	8005214 <calc_gas_wait>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	001a      	movs	r2, r3
 8005d2e:	2314      	movs	r3, #20
 8005d30:	18fb      	adds	r3, r7, r3
 8005d32:	551a      	strb	r2, [r3, r4]
            for (i = 0; i < conf->profile_len; i++)
 8005d34:	197b      	adds	r3, r7, r5
 8005d36:	781a      	ldrb	r2, [r3, #0]
 8005d38:	197b      	adds	r3, r7, r5
 8005d3a:	3201      	adds	r2, #1
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	7c1b      	ldrb	r3, [r3, #16]
 8005d42:	2246      	movs	r2, #70	@ 0x46
 8005d44:	18ba      	adds	r2, r7, r2
 8005d46:	7812      	ldrb	r2, [r2, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d3b9      	bcc.n	8005cc0 <set_conf+0xf4>
            }

            (*nb_conv) = conf->profile_len;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	7c1a      	ldrb	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8005d54:	2345      	movs	r3, #69	@ 0x45
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	7c12      	ldrb	r2, [r2, #16]
 8005d5c:	701a      	strb	r2, [r3, #0]
            break;
 8005d5e:	e084      	b.n	8005e6a <set_conf+0x29e>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <set_conf+0x1a4>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <set_conf+0x1ae>
            {
                rslt = BME68X_E_NULL_PTR;
 8005d70:	2347      	movs	r3, #71	@ 0x47
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	22ff      	movs	r2, #255	@ 0xff
 8005d76:	701a      	strb	r2, [r3, #0]
                break;
 8005d78:	e077      	b.n	8005e6a <set_conf+0x29e>
            }

            if (conf->shared_heatr_dur == 0)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8a5b      	ldrh	r3, [r3, #18]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d103      	bne.n	8005d8a <set_conf+0x1be>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8005d82:	2347      	movs	r3, #71	@ 0x47
 8005d84:	18fb      	adds	r3, r7, r3
 8005d86:	2203      	movs	r2, #3
 8005d88:	701a      	strb	r2, [r3, #0]
            }

            for (i = 0; i < conf->profile_len; i++)
 8005d8a:	2346      	movs	r3, #70	@ 0x46
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e039      	b.n	8005e08 <set_conf+0x23c>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8005d94:	2046      	movs	r0, #70	@ 0x46
 8005d96:	183b      	adds	r3, r7, r0
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	183a      	adds	r2, r7, r0
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	325a      	adds	r2, #90	@ 0x5a
 8005da0:	b2d1      	uxtb	r1, r2
 8005da2:	2238      	movs	r2, #56	@ 0x38
 8005da4:	18ba      	adds	r2, r7, r2
 8005da6:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	183b      	adds	r3, r7, r0
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	18d3      	adds	r3, r2, r3
 8005db4:	881a      	ldrh	r2, [r3, #0]
 8005db6:	0005      	movs	r5, r0
 8005db8:	183b      	adds	r3, r7, r0
 8005dba:	781c      	ldrb	r4, [r3, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	0010      	movs	r0, r2
 8005dc2:	f7ff f95b 	bl	800507c <calc_res_heat>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	001a      	movs	r2, r3
 8005dca:	232c      	movs	r3, #44	@ 0x2c
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8005dd0:	0028      	movs	r0, r5
 8005dd2:	183b      	adds	r3, r7, r0
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	183a      	adds	r2, r7, r0
 8005dd8:	7812      	ldrb	r2, [r2, #0]
 8005dda:	3264      	adds	r2, #100	@ 0x64
 8005ddc:	b2d1      	uxtb	r1, r2
 8005dde:	2220      	movs	r2, #32
 8005de0:	18ba      	adds	r2, r7, r2
 8005de2:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	183b      	adds	r3, r7, r0
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	18d3      	adds	r3, r2, r3
 8005df0:	881a      	ldrh	r2, [r3, #0]
 8005df2:	183b      	adds	r3, r7, r0
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	b2d1      	uxtb	r1, r2
 8005df8:	2214      	movs	r2, #20
 8005dfa:	18ba      	adds	r2, r7, r2
 8005dfc:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < conf->profile_len; i++)
 8005dfe:	183b      	adds	r3, r7, r0
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	183b      	adds	r3, r7, r0
 8005e04:	3201      	adds	r2, #1
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	7c1b      	ldrb	r3, [r3, #16]
 8005e0c:	2246      	movs	r2, #70	@ 0x46
 8005e0e:	18ba      	adds	r2, r7, r2
 8005e10:	7812      	ldrb	r2, [r2, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d3be      	bcc.n	8005d94 <set_conf+0x1c8>
            }

            (*nb_conv) = conf->profile_len;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	7c1a      	ldrb	r2, [r3, #16]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8005e1e:	2345      	movs	r3, #69	@ 0x45
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	7c12      	ldrb	r2, [r2, #16]
 8005e26:	701a      	strb	r2, [r3, #0]
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8a5b      	ldrh	r3, [r3, #18]
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f000 f84b 	bl	8005ec8 <calc_heatr_dur_shared>
 8005e32:	0003      	movs	r3, r0
 8005e34:	001a      	movs	r2, r3
 8005e36:	2144      	movs	r1, #68	@ 0x44
 8005e38:	187b      	adds	r3, r7, r1
 8005e3a:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8005e3c:	2247      	movs	r2, #71	@ 0x47
 8005e3e:	18bb      	adds	r3, r7, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b25b      	sxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10f      	bne.n	8005e68 <set_conf+0x29c>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8005e48:	18bc      	adds	r4, r7, r2
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	1879      	adds	r1, r7, r1
 8005e4e:	2243      	movs	r2, #67	@ 0x43
 8005e50:	18b8      	adds	r0, r7, r2
 8005e52:	2201      	movs	r2, #1
 8005e54:	f7fd ff83 	bl	8003d5e <bme68x_set_regs>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	7023      	strb	r3, [r4, #0]
            }

            break;
 8005e5c:	e004      	b.n	8005e68 <set_conf+0x29c>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8005e5e:	2347      	movs	r3, #71	@ 0x47
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	e000      	b.n	8005e6a <set_conf+0x29e>
            break;
 8005e68:	46c0      	nop			@ (mov r8, r8)
    }

    if (rslt == BME68X_OK)
 8005e6a:	2147      	movs	r1, #71	@ 0x47
 8005e6c:	187b      	adds	r3, r7, r1
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	b25b      	sxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10c      	bne.n	8005e90 <set_conf+0x2c4>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8005e76:	2345      	movs	r3, #69	@ 0x45
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	187c      	adds	r4, r7, r1
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	212c      	movs	r1, #44	@ 0x2c
 8005e82:	1879      	adds	r1, r7, r1
 8005e84:	2038      	movs	r0, #56	@ 0x38
 8005e86:	1838      	adds	r0, r7, r0
 8005e88:	f7fd ff69 	bl	8003d5e <bme68x_set_regs>
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8005e90:	2147      	movs	r1, #71	@ 0x47
 8005e92:	187b      	adds	r3, r7, r1
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	b25b      	sxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10c      	bne.n	8005eb6 <set_conf+0x2ea>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8005e9c:	2345      	movs	r3, #69	@ 0x45
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	187c      	adds	r4, r7, r1
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2114      	movs	r1, #20
 8005ea8:	1879      	adds	r1, r7, r1
 8005eaa:	2020      	movs	r0, #32
 8005eac:	1838      	adds	r0, r7, r0
 8005eae:	f7fd ff56 	bl	8003d5e <bme68x_set_regs>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8005eb6:	2347      	movs	r3, #71	@ 0x47
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	b25b      	sxtb	r3, r3
}
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	b012      	add	sp, #72	@ 0x48
 8005ec4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005ec8 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	0002      	movs	r2, r0
 8005ed0:	1dbb      	adds	r3, r7, #6
 8005ed2:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8005ed4:	230f      	movs	r3, #15
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8005edc:	1dbb      	adds	r3, r7, #6
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8005f5c <calc_heatr_dur_shared+0x94>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d904      	bls.n	8005ef0 <calc_heatr_dur_shared+0x28>
    {
        heatdurval = 0xff; /* Max duration */
 8005ee6:	230e      	movs	r3, #14
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	22ff      	movs	r2, #255	@ 0xff
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	e02e      	b.n	8005f4e <calc_heatr_dur_shared+0x86>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8005ef0:	1dbb      	adds	r3, r7, #6
 8005ef2:	881a      	ldrh	r2, [r3, #0]
 8005ef4:	0013      	movs	r3, r2
 8005ef6:	015b      	lsls	r3, r3, #5
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	001a      	movs	r2, r3
 8005f02:	23de      	movs	r3, #222	@ 0xde
 8005f04:	33ff      	adds	r3, #255	@ 0xff
 8005f06:	0019      	movs	r1, r3
 8005f08:	0010      	movs	r0, r2
 8005f0a:	f7fa f921 	bl	8000150 <__udivsi3>
 8005f0e:	0003      	movs	r3, r0
 8005f10:	001a      	movs	r2, r3
 8005f12:	1dbb      	adds	r3, r7, #6
 8005f14:	801a      	strh	r2, [r3, #0]
        while (dur > 0x3F)
 8005f16:	e00a      	b.n	8005f2e <calc_heatr_dur_shared+0x66>
        {
            dur = dur >> 2;
 8005f18:	1dbb      	adds	r3, r7, #6
 8005f1a:	1dba      	adds	r2, r7, #6
 8005f1c:	8812      	ldrh	r2, [r2, #0]
 8005f1e:	0892      	lsrs	r2, r2, #2
 8005f20:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8005f22:	220f      	movs	r2, #15
 8005f24:	18bb      	adds	r3, r7, r2
 8005f26:	18ba      	adds	r2, r7, r2
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	3201      	adds	r2, #1
 8005f2c:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8005f2e:	1dbb      	adds	r3, r7, #6
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f34:	d8f0      	bhi.n	8005f18 <calc_heatr_dur_shared+0x50>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8005f36:	1dbb      	adds	r3, r7, #6
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b2d9      	uxtb	r1, r3
 8005f3c:	230f      	movs	r3, #15
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	019b      	lsls	r3, r3, #6
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	230e      	movs	r3, #14
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	188a      	adds	r2, r1, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
    }

    return heatdurval;
 8005f4e:	230e      	movs	r3, #14
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	781b      	ldrb	r3, [r3, #0]
}
 8005f54:	0018      	movs	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b004      	add	sp, #16
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	00000782 	.word	0x00000782

08005f60 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	603a      	str	r2, [r7, #0]
 8005f68:	1dfb      	adds	r3, r7, #7
 8005f6a:	1c02      	adds	r2, r0, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	1dbb      	adds	r3, r7, #6
 8005f70:	1c0a      	adds	r2, r1, #0
 8005f72:	701a      	strb	r2, [r3, #0]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8005f74:	1dfb      	adds	r3, r7, #7
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	18d3      	adds	r3, r2, r3
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	789a      	ldrb	r2, [r3, #2]
 8005f82:	210e      	movs	r1, #14
 8005f84:	187b      	adds	r3, r7, r1
 8005f86:	801a      	strh	r2, [r3, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8005f88:	1dbb      	adds	r3, r7, #6
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	18d3      	adds	r3, r2, r3
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	789a      	ldrb	r2, [r3, #2]
 8005f96:	200c      	movs	r0, #12
 8005f98:	183b      	adds	r3, r7, r0
 8005f9a:	801a      	strh	r2, [r3, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	18d3      	adds	r3, r2, r3
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b25b      	sxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	da2c      	bge.n	800600a <sort_sensor_data+0xaa>
 8005fb0:	1dbb      	adds	r3, r7, #6
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	18d3      	adds	r3, r2, r3
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	da22      	bge.n	800600a <sort_sensor_data+0xaa>
    {
        int16_t diff = meas_index2 - meas_index1;
 8005fc4:	183b      	adds	r3, r7, r0
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	187b      	adds	r3, r7, r1
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	210a      	movs	r1, #10
 8005fd2:	187b      	adds	r3, r7, r1
 8005fd4:	801a      	strh	r2, [r3, #0]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8005fd6:	000a      	movs	r2, r1
 8005fd8:	18bb      	adds	r3, r7, r2
 8005fda:	2100      	movs	r1, #0
 8005fdc:	5e5b      	ldrsh	r3, [r3, r1]
 8005fde:	3302      	adds	r3, #2
 8005fe0:	db04      	blt.n	8005fec <sort_sensor_data+0x8c>
 8005fe2:	18bb      	adds	r3, r7, r2
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	5e9b      	ldrsh	r3, [r3, r2]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	db05      	blt.n	8005ff8 <sort_sensor_data+0x98>
 8005fec:	230a      	movs	r3, #10
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	5e9b      	ldrsh	r3, [r3, r2]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	dd1b      	ble.n	8006030 <sort_sensor_data+0xd0>
        {
            swap_fields(low_index, high_index, field);
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	1dbb      	adds	r3, r7, #6
 8005ffc:	7819      	ldrb	r1, [r3, #0]
 8005ffe:	1dfb      	adds	r3, r7, #7
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	0018      	movs	r0, r3
 8006004:	f000 f819 	bl	800603a <swap_fields>
    {
 8006008:	e012      	b.n	8006030 <sort_sensor_data+0xd0>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 800600a:	1dbb      	adds	r3, r7, #6
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	18d3      	adds	r3, r2, r3
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b25b      	sxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	da09      	bge.n	8006032 <sort_sensor_data+0xd2>
    {
        swap_fields(low_index, high_index, field);
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	1dbb      	adds	r3, r7, #6
 8006022:	7819      	ldrb	r1, [r3, #0]
 8006024:	1dfb      	adds	r3, r7, #7
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	0018      	movs	r0, r3
 800602a:	f000 f806 	bl	800603a <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 800602e:	e000      	b.n	8006032 <sort_sensor_data+0xd2>
    {
 8006030:	46c0      	nop			@ (mov r8, r8)
}
 8006032:	46c0      	nop			@ (mov r8, r8)
 8006034:	46bd      	mov	sp, r7
 8006036:	b004      	add	sp, #16
 8006038:	bd80      	pop	{r7, pc}

0800603a <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	603a      	str	r2, [r7, #0]
 8006042:	1dfb      	adds	r3, r7, #7
 8006044:	1c02      	adds	r2, r0, #0
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	1dbb      	adds	r3, r7, #6
 800604a:	1c0a      	adds	r2, r1, #0
 800604c:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *temp;

    temp = field[index1];
 800604e:	1dfb      	adds	r3, r7, #7
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	18d3      	adds	r3, r2, r3
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 800605c:	1dbb      	adds	r3, r7, #6
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	18d2      	adds	r2, r2, r3
 8006066:	1dfb      	adds	r3, r7, #7
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	18cb      	adds	r3, r1, r3
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8006074:	1dbb      	adds	r3, r7, #6
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	18d3      	adds	r3, r2, r3
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	601a      	str	r2, [r3, #0]
}
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	46bd      	mov	sp, r7
 8006086:	b004      	add	sp, #16
 8006088:	bd80      	pop	{r7, pc}

0800608a <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 800608a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608c:	b08f      	sub	sp, #60	@ 0x3c
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8006092:	2537      	movs	r5, #55	@ 0x37
 8006094:	197c      	adds	r4, r7, r5
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	260c      	movs	r6, #12
 800609a:	19b9      	adds	r1, r7, r6
 800609c:	2217      	movs	r2, #23
 800609e:	208a      	movs	r0, #138	@ 0x8a
 80060a0:	f7fd ff0a 	bl	8003eb8 <bme68x_get_regs>
 80060a4:	0003      	movs	r3, r0
 80060a6:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80060a8:	197b      	adds	r3, r7, r5
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b25b      	sxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <get_calib_data+0x40>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 80060b2:	197c      	adds	r4, r7, r5
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	19bb      	adds	r3, r7, r6
 80060b8:	3317      	adds	r3, #23
 80060ba:	0019      	movs	r1, r3
 80060bc:	0013      	movs	r3, r2
 80060be:	220e      	movs	r2, #14
 80060c0:	20e1      	movs	r0, #225	@ 0xe1
 80060c2:	f7fd fef9 	bl	8003eb8 <bme68x_get_regs>
 80060c6:	0003      	movs	r3, r0
 80060c8:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 80060ca:	2237      	movs	r2, #55	@ 0x37
 80060cc:	18bb      	adds	r3, r7, r2
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	b25b      	sxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10c      	bne.n	80060f0 <get_calib_data+0x66>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 80060d6:	18bc      	adds	r4, r7, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	230c      	movs	r3, #12
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	3325      	adds	r3, #37	@ 0x25
 80060e0:	0019      	movs	r1, r3
 80060e2:	0013      	movs	r3, r2
 80060e4:	2205      	movs	r2, #5
 80060e6:	2000      	movs	r0, #0
 80060e8:	f7fd fee6 	bl	8003eb8 <bme68x_get_regs>
 80060ec:	0003      	movs	r3, r0
 80060ee:	7023      	strb	r3, [r4, #0]
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 80060f0:	2337      	movs	r3, #55	@ 0x37
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d000      	beq.n	80060fe <get_calib_data+0x74>
 80060fc:	e0f4      	b.n	80062e8 <get_calib_data+0x25e>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 80060fe:	210c      	movs	r1, #12
 8006100:	187b      	adds	r3, r7, r1
 8006102:	2220      	movs	r2, #32
 8006104:	5c9b      	ldrb	r3, [r3, r2]
 8006106:	b21b      	sxth	r3, r3
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	b21a      	sxth	r2, r3
 800610c:	187b      	adds	r3, r7, r1
 800610e:	7fdb      	ldrb	r3, [r3, #31]
 8006110:	b21b      	sxth	r3, r3
 8006112:	4313      	orrs	r3, r2
 8006114:	b21b      	sxth	r3, r3
 8006116:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 800611c:	187b      	adds	r3, r7, r1
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	b21b      	sxth	r3, r3
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	b21a      	sxth	r2, r3
 8006126:	187b      	adds	r3, r7, r1
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	b21b      	sxth	r3, r3
 800612c:	4313      	orrs	r3, r2
 800612e:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8006134:	0008      	movs	r0, r1
 8006136:	187b      	adds	r3, r7, r1
 8006138:	789b      	ldrb	r3, [r3, #2]
 800613a:	b259      	sxtb	r1, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2222      	movs	r2, #34	@ 0x22
 8006140:	5499      	strb	r1, [r3, r2]

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8006142:	0001      	movs	r1, r0
 8006144:	187b      	adds	r3, r7, r1
 8006146:	795b      	ldrb	r3, [r3, #5]
 8006148:	b21b      	sxth	r3, r3
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	b21a      	sxth	r2, r3
 800614e:	187b      	adds	r3, r7, r1
 8006150:	791b      	ldrb	r3, [r3, #4]
 8006152:	b21b      	sxth	r3, r3
 8006154:	4313      	orrs	r3, r2
 8006156:	b21b      	sxth	r3, r3
 8006158:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 800615e:	187b      	adds	r3, r7, r1
 8006160:	79db      	ldrb	r3, [r3, #7]
 8006162:	b21b      	sxth	r3, r3
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	b21a      	sxth	r2, r3
 8006168:	187b      	adds	r3, r7, r1
 800616a:	799b      	ldrb	r3, [r3, #6]
 800616c:	b21b      	sxth	r3, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8006176:	0008      	movs	r0, r1
 8006178:	187b      	adds	r3, r7, r1
 800617a:	7a1b      	ldrb	r3, [r3, #8]
 800617c:	b259      	sxtb	r1, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2228      	movs	r2, #40	@ 0x28
 8006182:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8006184:	0001      	movs	r1, r0
 8006186:	187b      	adds	r3, r7, r1
 8006188:	7adb      	ldrb	r3, [r3, #11]
 800618a:	b21b      	sxth	r3, r3
 800618c:	021b      	lsls	r3, r3, #8
 800618e:	b21a      	sxth	r2, r3
 8006190:	187b      	adds	r3, r7, r1
 8006192:	7a9b      	ldrb	r3, [r3, #10]
 8006194:	b21b      	sxth	r3, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 800619e:	187b      	adds	r3, r7, r1
 80061a0:	7b5b      	ldrb	r3, [r3, #13]
 80061a2:	b21b      	sxth	r3, r3
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	b21a      	sxth	r2, r3
 80061a8:	187b      	adds	r3, r7, r1
 80061aa:	7b1b      	ldrb	r3, [r3, #12]
 80061ac:	b21b      	sxth	r3, r3
 80061ae:	4313      	orrs	r3, r2
 80061b0:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 80061b6:	0008      	movs	r0, r1
 80061b8:	183b      	adds	r3, r7, r0
 80061ba:	7bdb      	ldrb	r3, [r3, #15]
 80061bc:	b259      	sxtb	r1, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	222e      	movs	r2, #46	@ 0x2e
 80061c2:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 80061c4:	183b      	adds	r3, r7, r0
 80061c6:	7b9b      	ldrb	r3, [r3, #14]
 80061c8:	b259      	sxtb	r1, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	222f      	movs	r2, #47	@ 0x2f
 80061ce:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 80061d0:	183b      	adds	r3, r7, r0
 80061d2:	7cdb      	ldrb	r3, [r3, #19]
 80061d4:	b21b      	sxth	r3, r3
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	b21a      	sxth	r2, r3
 80061da:	183b      	adds	r3, r7, r0
 80061dc:	7c9b      	ldrb	r3, [r3, #18]
 80061de:	b21b      	sxth	r3, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 80061e8:	183b      	adds	r3, r7, r0
 80061ea:	7d5b      	ldrb	r3, [r3, #21]
 80061ec:	b21b      	sxth	r3, r3
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	b21a      	sxth	r2, r3
 80061f2:	183b      	adds	r3, r7, r0
 80061f4:	7d1b      	ldrb	r3, [r3, #20]
 80061f6:	b21b      	sxth	r3, r3
 80061f8:	4313      	orrs	r3, r2
 80061fa:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8006200:	183b      	adds	r3, r7, r0
 8006202:	7d99      	ldrb	r1, [r3, #22]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2234      	movs	r2, #52	@ 0x34
 8006208:	5499      	strb	r1, [r3, r2]

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 800620a:	183b      	adds	r3, r7, r0
 800620c:	7e5b      	ldrb	r3, [r3, #25]
 800620e:	b21b      	sxth	r3, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8006214:	183b      	adds	r3, r7, r0
 8006216:	7e1b      	ldrb	r3, [r3, #24]
 8006218:	b21b      	sxth	r3, r3
 800621a:	210f      	movs	r1, #15
 800621c:	400b      	ands	r3, r1
 800621e:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8006220:	4313      	orrs	r3, r2
 8006222:	b21b      	sxth	r3, r3
 8006224:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 800622a:	183b      	adds	r3, r7, r0
 800622c:	7ddb      	ldrb	r3, [r3, #23]
 800622e:	b21b      	sxth	r3, r3
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	b21a      	sxth	r2, r3
 8006234:	183b      	adds	r3, r7, r0
 8006236:	7e1b      	ldrb	r3, [r3, #24]
 8006238:	091b      	lsrs	r3, r3, #4
 800623a:	b2db      	uxtb	r3, r3
 800623c:	b21b      	sxth	r3, r3
 800623e:	4313      	orrs	r3, r2
 8006240:	b21b      	sxth	r3, r3
 8006242:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8006248:	183b      	adds	r3, r7, r0
 800624a:	7e9b      	ldrb	r3, [r3, #26]
 800624c:	b25a      	sxtb	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8006252:	183b      	adds	r3, r7, r0
 8006254:	7edb      	ldrb	r3, [r3, #27]
 8006256:	b25a      	sxtb	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 800625c:	183b      	adds	r3, r7, r0
 800625e:	7f1b      	ldrb	r3, [r3, #28]
 8006260:	b25a      	sxtb	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8006266:	183b      	adds	r3, r7, r0
 8006268:	7f5a      	ldrb	r2, [r3, #29]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 800626e:	183b      	adds	r3, r7, r0
 8006270:	7f9b      	ldrb	r3, [r3, #30]
 8006272:	b25a      	sxtb	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8006278:	183b      	adds	r3, r7, r0
 800627a:	2223      	movs	r2, #35	@ 0x23
 800627c:	5c9b      	ldrb	r3, [r3, r2]
 800627e:	b25a      	sxtb	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8006284:	183b      	adds	r3, r7, r0
 8006286:	2222      	movs	r2, #34	@ 0x22
 8006288:	5c9b      	ldrb	r3, [r3, r2]
 800628a:	b21b      	sxth	r3, r3
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	b21a      	sxth	r2, r3
 8006290:	183b      	adds	r3, r7, r0
 8006292:	2121      	movs	r1, #33	@ 0x21
 8006294:	5c5b      	ldrb	r3, [r3, r1]
 8006296:	b21b      	sxth	r3, r3
 8006298:	4313      	orrs	r3, r2
 800629a:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 80062a0:	183b      	adds	r3, r7, r0
 80062a2:	2224      	movs	r2, #36	@ 0x24
 80062a4:	5c9b      	ldrb	r3, [r3, r2]
 80062a6:	b25a      	sxtb	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 80062ac:	183b      	adds	r3, r7, r0
 80062ae:	2227      	movs	r2, #39	@ 0x27
 80062b0:	5c9b      	ldrb	r3, [r3, r2]
 80062b2:	001a      	movs	r2, r3
 80062b4:	2330      	movs	r3, #48	@ 0x30
 80062b6:	4013      	ands	r3, r2
 80062b8:	d500      	bpl.n	80062bc <get_calib_data+0x232>
 80062ba:	330f      	adds	r3, #15
 80062bc:	111b      	asrs	r3, r3, #4
 80062be:	b2d9      	uxtb	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	223c      	movs	r2, #60	@ 0x3c
 80062c4:	5499      	strb	r1, [r3, r2]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 80062c6:	200c      	movs	r0, #12
 80062c8:	183b      	adds	r3, r7, r0
 80062ca:	2225      	movs	r2, #37	@ 0x25
 80062cc:	5c9b      	ldrb	r3, [r3, r2]
 80062ce:	b259      	sxtb	r1, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	223d      	movs	r2, #61	@ 0x3d
 80062d4:	5499      	strb	r1, [r3, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 80062d6:	183b      	adds	r3, r7, r0
 80062d8:	2229      	movs	r2, #41	@ 0x29
 80062da:	5c9b      	ldrb	r3, [r3, r2]
 80062dc:	b25b      	sxtb	r3, r3
 80062de:	111b      	asrs	r3, r3, #4
 80062e0:	b259      	sxtb	r1, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	223e      	movs	r2, #62	@ 0x3e
 80062e6:	5499      	strb	r1, [r3, r2]
    }

    return rslt;
 80062e8:	2337      	movs	r3, #55	@ 0x37
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	b25b      	sxtb	r3, r3
}
 80062f0:	0018      	movs	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b00f      	add	sp, #60	@ 0x3c
 80062f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062f8 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 80062f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8006300:	250e      	movs	r5, #14
 8006302:	197b      	adds	r3, r7, r5
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8006308:	260f      	movs	r6, #15
 800630a:	19bc      	adds	r4, r7, r6
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	1979      	adds	r1, r7, r5
 8006310:	2201      	movs	r2, #1
 8006312:	20f0      	movs	r0, #240	@ 0xf0
 8006314:	f7fd fdd0 	bl	8003eb8 <bme68x_get_regs>
 8006318:	0003      	movs	r3, r0
 800631a:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 800631c:	19bb      	adds	r3, r7, r6
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b25b      	sxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <read_variant_id+0x38>
    {
        dev->variant_id = reg_data;
 8006326:	197b      	adds	r3, r7, r5
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	001a      	movs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8006330:	230f      	movs	r3, #15
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	b25b      	sxtb	r3, r3
}
 8006338:	0018      	movs	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	b005      	add	sp, #20
 800633e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006340 <command_interface_init>:
static uint8_t system_started = 0;
static uint8_t system_started_usart4 = 0;

// Initialize command interface
void command_interface_init(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
    // Initialize USART2 command interface
    cmd_index = 0;
 8006344:	4b15      	ldr	r3, [pc, #84]	@ (800639c <command_interface_init+0x5c>)
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
    system_started = 0;
 800634a:	4b15      	ldr	r3, [pc, #84]	@ (80063a0 <command_interface_init+0x60>)
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
    memset(cmd_buffer, 0, CMD_BUFFER_SIZE);
 8006350:	4b14      	ldr	r3, [pc, #80]	@ (80063a4 <command_interface_init+0x64>)
 8006352:	2240      	movs	r2, #64	@ 0x40
 8006354:	2100      	movs	r1, #0
 8006356:	0018      	movs	r0, r3
 8006358:	f005 fd64 	bl	800be24 <memset>
    
    // Initialize USART4 command interface
    cmd_index_usart4 = 0;
 800635c:	4b12      	ldr	r3, [pc, #72]	@ (80063a8 <command_interface_init+0x68>)
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
    system_started_usart4 = 0;
 8006362:	4b12      	ldr	r3, [pc, #72]	@ (80063ac <command_interface_init+0x6c>)
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
    memset(cmd_buffer_usart4, 0, CMD_BUFFER_SIZE);
 8006368:	4b11      	ldr	r3, [pc, #68]	@ (80063b0 <command_interface_init+0x70>)
 800636a:	2240      	movs	r2, #64	@ 0x40
 800636c:	2100      	movs	r1, #0
 800636e:	0018      	movs	r0, r3
 8006370:	f005 fd58 	bl	800be24 <memset>
    
    // Send welcome message on both UARTs
    command_interface_send_response("IoT Prototype System Ready (USART2)\r\n");
 8006374:	4b0f      	ldr	r3, [pc, #60]	@ (80063b4 <command_interface_init+0x74>)
 8006376:	0018      	movs	r0, r3
 8006378:	f000 fa14 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("Type 'start' to begin\r\n");
 800637c:	4b0e      	ldr	r3, [pc, #56]	@ (80063b8 <command_interface_init+0x78>)
 800637e:	0018      	movs	r0, r3
 8006380:	f000 fa10 	bl	80067a4 <command_interface_send_response>
    
    command_interface_send_response_usart4("IoT Prototype System Ready (USART4)\r\n");
 8006384:	4b0d      	ldr	r3, [pc, #52]	@ (80063bc <command_interface_init+0x7c>)
 8006386:	0018      	movs	r0, r3
 8006388:	f000 fa22 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("Type 'start' to begin\r\n");
 800638c:	4b0a      	ldr	r3, [pc, #40]	@ (80063b8 <command_interface_init+0x78>)
 800638e:	0018      	movs	r0, r3
 8006390:	f000 fa1e 	bl	80067d0 <command_interface_send_response_usart4>
}
 8006394:	46c0      	nop			@ (mov r8, r8)
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	200002c0 	.word	0x200002c0
 80063a0:	200002c2 	.word	0x200002c2
 80063a4:	20000240 	.word	0x20000240
 80063a8:	200002c1 	.word	0x200002c1
 80063ac:	200002c3 	.word	0x200002c3
 80063b0:	20000280 	.word	0x20000280
 80063b4:	0800e270 	.word	0x0800e270
 80063b8:	0800e298 	.word	0x0800e298
 80063bc:	0800e2b0 	.word	0x0800e2b0

080063c0 <command_interface_process>:

// Process incoming commands
void command_interface_process(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
    uint8_t rx_byte;
    
    // Check if data is available on USART2
    if (HAL_UART_Receive(&huart2, &rx_byte, 1, 10) == HAL_OK) {
 80063c6:	1df9      	adds	r1, r7, #7
 80063c8:	486c      	ldr	r0, [pc, #432]	@ (800657c <command_interface_process+0x1bc>)
 80063ca:	230a      	movs	r3, #10
 80063cc:	2201      	movs	r2, #1
 80063ce:	f003 fec7 	bl	800a160 <HAL_UART_Receive>
 80063d2:	1e03      	subs	r3, r0, #0
 80063d4:	d162      	bne.n	800649c <command_interface_process+0xdc>
        // Handle backspace
        if (rx_byte == '\b' || rx_byte == 127) {
 80063d6:	1dfb      	adds	r3, r7, #7
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d003      	beq.n	80063e6 <command_interface_process+0x26>
 80063de:	1dfb      	adds	r3, r7, #7
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063e4:	d114      	bne.n	8006410 <command_interface_process+0x50>
            if (cmd_index > 0) {
 80063e6:	4b66      	ldr	r3, [pc, #408]	@ (8006580 <command_interface_process+0x1c0>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d056      	beq.n	800649c <command_interface_process+0xdc>
                cmd_index--;
 80063ee:	4b64      	ldr	r3, [pc, #400]	@ (8006580 <command_interface_process+0x1c0>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	4b62      	ldr	r3, [pc, #392]	@ (8006580 <command_interface_process+0x1c0>)
 80063f8:	701a      	strb	r2, [r3, #0]
                cmd_buffer[cmd_index] = '\0';
 80063fa:	4b61      	ldr	r3, [pc, #388]	@ (8006580 <command_interface_process+0x1c0>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	001a      	movs	r2, r3
 8006400:	4b60      	ldr	r3, [pc, #384]	@ (8006584 <command_interface_process+0x1c4>)
 8006402:	2100      	movs	r1, #0
 8006404:	5499      	strb	r1, [r3, r2]
                command_interface_send_response("\b \b"); // Backspace, space, backspace
 8006406:	4b60      	ldr	r3, [pc, #384]	@ (8006588 <command_interface_process+0x1c8>)
 8006408:	0018      	movs	r0, r3
 800640a:	f000 f9cb 	bl	80067a4 <command_interface_send_response>
            if (cmd_index > 0) {
 800640e:	e045      	b.n	800649c <command_interface_process+0xdc>
            }
        }
        // Handle enter key
        else if (rx_byte == '\r' || rx_byte == '\n') {
 8006410:	1dfb      	adds	r3, r7, #7
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b0d      	cmp	r3, #13
 8006416:	d003      	beq.n	8006420 <command_interface_process+0x60>
 8006418:	1dfb      	adds	r3, r7, #7
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b0a      	cmp	r3, #10
 800641e:	d11f      	bne.n	8006460 <command_interface_process+0xa0>
            if (cmd_index > 0) {
 8006420:	4b57      	ldr	r3, [pc, #348]	@ (8006580 <command_interface_process+0x1c0>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d016      	beq.n	8006456 <command_interface_process+0x96>
                cmd_buffer[cmd_index] = '\0';
 8006428:	4b55      	ldr	r3, [pc, #340]	@ (8006580 <command_interface_process+0x1c0>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	001a      	movs	r2, r3
 800642e:	4b55      	ldr	r3, [pc, #340]	@ (8006584 <command_interface_process+0x1c4>)
 8006430:	2100      	movs	r1, #0
 8006432:	5499      	strb	r1, [r3, r2]
                command_interface_send_response("\r\n");
 8006434:	4b55      	ldr	r3, [pc, #340]	@ (800658c <command_interface_process+0x1cc>)
 8006436:	0018      	movs	r0, r3
 8006438:	f000 f9b4 	bl	80067a4 <command_interface_send_response>
                
                // Process command
                command_interface_handle_command(cmd_buffer);
 800643c:	4b51      	ldr	r3, [pc, #324]	@ (8006584 <command_interface_process+0x1c4>)
 800643e:	0018      	movs	r0, r3
 8006440:	f000 f8f6 	bl	8006630 <command_interface_handle_command>
                
                // Reset buffer
                cmd_index = 0;
 8006444:	4b4e      	ldr	r3, [pc, #312]	@ (8006580 <command_interface_process+0x1c0>)
 8006446:	2200      	movs	r2, #0
 8006448:	701a      	strb	r2, [r3, #0]
                memset(cmd_buffer, 0, CMD_BUFFER_SIZE);
 800644a:	4b4e      	ldr	r3, [pc, #312]	@ (8006584 <command_interface_process+0x1c4>)
 800644c:	2240      	movs	r2, #64	@ 0x40
 800644e:	2100      	movs	r1, #0
 8006450:	0018      	movs	r0, r3
 8006452:	f005 fce7 	bl	800be24 <memset>
            }
            command_interface_send_response("> ");
 8006456:	4b4e      	ldr	r3, [pc, #312]	@ (8006590 <command_interface_process+0x1d0>)
 8006458:	0018      	movs	r0, r3
 800645a:	f000 f9a3 	bl	80067a4 <command_interface_send_response>
 800645e:	e01d      	b.n	800649c <command_interface_process+0xdc>
        }
        // Handle regular characters
        else if (cmd_index < CMD_BUFFER_SIZE - 1 && rx_byte >= 32 && rx_byte <= 126) {
 8006460:	4b47      	ldr	r3, [pc, #284]	@ (8006580 <command_interface_process+0x1c0>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b3e      	cmp	r3, #62	@ 0x3e
 8006466:	d819      	bhi.n	800649c <command_interface_process+0xdc>
 8006468:	1dfb      	adds	r3, r7, #7
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b1f      	cmp	r3, #31
 800646e:	d915      	bls.n	800649c <command_interface_process+0xdc>
 8006470:	1dfb      	adds	r3, r7, #7
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b7e      	cmp	r3, #126	@ 0x7e
 8006476:	d811      	bhi.n	800649c <command_interface_process+0xdc>
            cmd_buffer[cmd_index++] = rx_byte;
 8006478:	4b41      	ldr	r3, [pc, #260]	@ (8006580 <command_interface_process+0x1c0>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	b2d1      	uxtb	r1, r2
 8006480:	4a3f      	ldr	r2, [pc, #252]	@ (8006580 <command_interface_process+0x1c0>)
 8006482:	7011      	strb	r1, [r2, #0]
 8006484:	001a      	movs	r2, r3
 8006486:	1dfb      	adds	r3, r7, #7
 8006488:	7819      	ldrb	r1, [r3, #0]
 800648a:	4b3e      	ldr	r3, [pc, #248]	@ (8006584 <command_interface_process+0x1c4>)
 800648c:	5499      	strb	r1, [r3, r2]
            // Echo character back
            HAL_UART_Transmit(&huart2, &rx_byte, 1, HAL_MAX_DELAY);
 800648e:	2301      	movs	r3, #1
 8006490:	425b      	negs	r3, r3
 8006492:	1df9      	adds	r1, r7, #7
 8006494:	4839      	ldr	r0, [pc, #228]	@ (800657c <command_interface_process+0x1bc>)
 8006496:	2201      	movs	r2, #1
 8006498:	f003 fdbe 	bl	800a018 <HAL_UART_Transmit>
        }
    }
    
    // Check if data is available on USART4
    if (HAL_UART_Receive(&huart4, &rx_byte, 1, 10) == HAL_OK) {
 800649c:	1df9      	adds	r1, r7, #7
 800649e:	483d      	ldr	r0, [pc, #244]	@ (8006594 <command_interface_process+0x1d4>)
 80064a0:	230a      	movs	r3, #10
 80064a2:	2201      	movs	r2, #1
 80064a4:	f003 fe5c 	bl	800a160 <HAL_UART_Receive>
 80064a8:	1e03      	subs	r3, r0, #0
 80064aa:	d163      	bne.n	8006574 <command_interface_process+0x1b4>
        // Handle backspace
        if (rx_byte == '\b' || rx_byte == 127) {
 80064ac:	1dfb      	adds	r3, r7, #7
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d003      	beq.n	80064bc <command_interface_process+0xfc>
 80064b4:	1dfb      	adds	r3, r7, #7
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ba:	d114      	bne.n	80064e6 <command_interface_process+0x126>
            if (cmd_index_usart4 > 0) {
 80064bc:	4b36      	ldr	r3, [pc, #216]	@ (8006598 <command_interface_process+0x1d8>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d057      	beq.n	8006574 <command_interface_process+0x1b4>
                cmd_index_usart4--;
 80064c4:	4b34      	ldr	r3, [pc, #208]	@ (8006598 <command_interface_process+0x1d8>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	4b32      	ldr	r3, [pc, #200]	@ (8006598 <command_interface_process+0x1d8>)
 80064ce:	701a      	strb	r2, [r3, #0]
                cmd_buffer_usart4[cmd_index_usart4] = '\0';
 80064d0:	4b31      	ldr	r3, [pc, #196]	@ (8006598 <command_interface_process+0x1d8>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	001a      	movs	r2, r3
 80064d6:	4b31      	ldr	r3, [pc, #196]	@ (800659c <command_interface_process+0x1dc>)
 80064d8:	2100      	movs	r1, #0
 80064da:	5499      	strb	r1, [r3, r2]
                command_interface_send_response_usart4("\b \b"); // Backspace, space, backspace
 80064dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006588 <command_interface_process+0x1c8>)
 80064de:	0018      	movs	r0, r3
 80064e0:	f000 f976 	bl	80067d0 <command_interface_send_response_usart4>
            if (cmd_index_usart4 > 0) {
 80064e4:	e046      	b.n	8006574 <command_interface_process+0x1b4>
            }
        }
        // Handle enter key
        else if (rx_byte == '\r' || rx_byte == '\n') {
 80064e6:	1dfb      	adds	r3, r7, #7
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b0d      	cmp	r3, #13
 80064ec:	d003      	beq.n	80064f6 <command_interface_process+0x136>
 80064ee:	1dfb      	adds	r3, r7, #7
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b0a      	cmp	r3, #10
 80064f4:	d11f      	bne.n	8006536 <command_interface_process+0x176>
            if (cmd_index_usart4 > 0) {
 80064f6:	4b28      	ldr	r3, [pc, #160]	@ (8006598 <command_interface_process+0x1d8>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d016      	beq.n	800652c <command_interface_process+0x16c>
                cmd_buffer_usart4[cmd_index_usart4] = '\0';
 80064fe:	4b26      	ldr	r3, [pc, #152]	@ (8006598 <command_interface_process+0x1d8>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	001a      	movs	r2, r3
 8006504:	4b25      	ldr	r3, [pc, #148]	@ (800659c <command_interface_process+0x1dc>)
 8006506:	2100      	movs	r1, #0
 8006508:	5499      	strb	r1, [r3, r2]
                command_interface_send_response_usart4("\r\n");
 800650a:	4b20      	ldr	r3, [pc, #128]	@ (800658c <command_interface_process+0x1cc>)
 800650c:	0018      	movs	r0, r3
 800650e:	f000 f95f 	bl	80067d0 <command_interface_send_response_usart4>
                
                // Process command
                command_interface_handle_command_usart4(cmd_buffer_usart4);
 8006512:	4b22      	ldr	r3, [pc, #136]	@ (800659c <command_interface_process+0x1dc>)
 8006514:	0018      	movs	r0, r3
 8006516:	f000 fc2f 	bl	8006d78 <command_interface_handle_command_usart4>
                
                // Reset buffer
                cmd_index_usart4 = 0;
 800651a:	4b1f      	ldr	r3, [pc, #124]	@ (8006598 <command_interface_process+0x1d8>)
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
                memset(cmd_buffer_usart4, 0, CMD_BUFFER_SIZE);
 8006520:	4b1e      	ldr	r3, [pc, #120]	@ (800659c <command_interface_process+0x1dc>)
 8006522:	2240      	movs	r2, #64	@ 0x40
 8006524:	2100      	movs	r1, #0
 8006526:	0018      	movs	r0, r3
 8006528:	f005 fc7c 	bl	800be24 <memset>
            }
            command_interface_send_response_usart4("> ");
 800652c:	4b18      	ldr	r3, [pc, #96]	@ (8006590 <command_interface_process+0x1d0>)
 800652e:	0018      	movs	r0, r3
 8006530:	f000 f94e 	bl	80067d0 <command_interface_send_response_usart4>
 8006534:	e01e      	b.n	8006574 <command_interface_process+0x1b4>
        }
        // Handle regular characters
        else if (cmd_index_usart4 < CMD_BUFFER_SIZE - 1 && rx_byte >= 32 && rx_byte <= 126) {
 8006536:	4b18      	ldr	r3, [pc, #96]	@ (8006598 <command_interface_process+0x1d8>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b3e      	cmp	r3, #62	@ 0x3e
 800653c:	d81a      	bhi.n	8006574 <command_interface_process+0x1b4>
 800653e:	1dfb      	adds	r3, r7, #7
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b1f      	cmp	r3, #31
 8006544:	d916      	bls.n	8006574 <command_interface_process+0x1b4>
 8006546:	1dfb      	adds	r3, r7, #7
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b7e      	cmp	r3, #126	@ 0x7e
 800654c:	d812      	bhi.n	8006574 <command_interface_process+0x1b4>
            cmd_buffer_usart4[cmd_index_usart4++] = rx_byte;
 800654e:	4b12      	ldr	r3, [pc, #72]	@ (8006598 <command_interface_process+0x1d8>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	b2d1      	uxtb	r1, r2
 8006556:	4a10      	ldr	r2, [pc, #64]	@ (8006598 <command_interface_process+0x1d8>)
 8006558:	7011      	strb	r1, [r2, #0]
 800655a:	001a      	movs	r2, r3
 800655c:	1dfb      	adds	r3, r7, #7
 800655e:	7819      	ldrb	r1, [r3, #0]
 8006560:	4b0e      	ldr	r3, [pc, #56]	@ (800659c <command_interface_process+0x1dc>)
 8006562:	5499      	strb	r1, [r3, r2]
            // Echo character back
            HAL_UART_Transmit(&huart4, &rx_byte, 1, HAL_MAX_DELAY);
 8006564:	2301      	movs	r3, #1
 8006566:	425b      	negs	r3, r3
 8006568:	1df9      	adds	r1, r7, #7
 800656a:	480a      	ldr	r0, [pc, #40]	@ (8006594 <command_interface_process+0x1d4>)
 800656c:	2201      	movs	r2, #1
 800656e:	f003 fd53 	bl	800a018 <HAL_UART_Transmit>
        }
    }
}
 8006572:	e7ff      	b.n	8006574 <command_interface_process+0x1b4>
 8006574:	46c0      	nop			@ (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b002      	add	sp, #8
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000318 	.word	0x20000318
 8006580:	200002c0 	.word	0x200002c0
 8006584:	20000240 	.word	0x20000240
 8006588:	0800e2d8 	.word	0x0800e2d8
 800658c:	0800e2dc 	.word	0x0800e2dc
 8006590:	0800e2e0 	.word	0x0800e2e0
 8006594:	200003ac 	.word	0x200003ac
 8006598:	200002c1 	.word	0x200002c1
 800659c:	20000280 	.word	0x20000280

080065a0 <command_interface_show_help>:

// Show help menu
void command_interface_show_help(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
    command_interface_send_response("\r\n=== Available Commands ===\r\n");
 80065a4:	4b17      	ldr	r3, [pc, #92]	@ (8006604 <command_interface_show_help+0x64>)
 80065a6:	0018      	movs	r0, r3
 80065a8:	f000 f8fc 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("read temperature - Read temperature from BME680\r\n");
 80065ac:	4b16      	ldr	r3, [pc, #88]	@ (8006608 <command_interface_show_help+0x68>)
 80065ae:	0018      	movs	r0, r3
 80065b0:	f000 f8f8 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("read pressure   - Read pressure from BME680\r\n");
 80065b4:	4b15      	ldr	r3, [pc, #84]	@ (800660c <command_interface_show_help+0x6c>)
 80065b6:	0018      	movs	r0, r3
 80065b8:	f000 f8f4 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("read humidity   - Read humidity from BME680\r\n");
 80065bc:	4b14      	ldr	r3, [pc, #80]	@ (8006610 <command_interface_show_help+0x70>)
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 f8f0 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("test sensor     - Test BME680 sensor\r\n");
 80065c4:	4b13      	ldr	r3, [pc, #76]	@ (8006614 <command_interface_show_help+0x74>)
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 f8ec 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("sum <num1> <num2> - Add two numbers\r\n");
 80065cc:	4b12      	ldr	r3, [pc, #72]	@ (8006618 <command_interface_show_help+0x78>)
 80065ce:	0018      	movs	r0, r3
 80065d0:	f000 f8e8 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("sub <num1> <num2> - Subtract num2 from num1\r\n");
 80065d4:	4b11      	ldr	r3, [pc, #68]	@ (800661c <command_interface_show_help+0x7c>)
 80065d6:	0018      	movs	r0, r3
 80065d8:	f000 f8e4 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("mul <num1> <num2> - Multiply two numbers\r\n");
 80065dc:	4b10      	ldr	r3, [pc, #64]	@ (8006620 <command_interface_show_help+0x80>)
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 f8e0 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("div <num1> <num2> - Divide num1 by num2\r\n");
 80065e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006624 <command_interface_show_help+0x84>)
 80065e6:	0018      	movs	r0, r3
 80065e8:	f000 f8dc 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("help            - Show this help menu\r\n");
 80065ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006628 <command_interface_show_help+0x88>)
 80065ee:	0018      	movs	r0, r3
 80065f0:	f000 f8d8 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("========================\r\n");
 80065f4:	4b0d      	ldr	r3, [pc, #52]	@ (800662c <command_interface_show_help+0x8c>)
 80065f6:	0018      	movs	r0, r3
 80065f8:	f000 f8d4 	bl	80067a4 <command_interface_send_response>
}
 80065fc:	46c0      	nop			@ (mov r8, r8)
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	46c0      	nop			@ (mov r8, r8)
 8006604:	0800e2e4 	.word	0x0800e2e4
 8006608:	0800e304 	.word	0x0800e304
 800660c:	0800e338 	.word	0x0800e338
 8006610:	0800e368 	.word	0x0800e368
 8006614:	0800e398 	.word	0x0800e398
 8006618:	0800e3c0 	.word	0x0800e3c0
 800661c:	0800e3e8 	.word	0x0800e3e8
 8006620:	0800e418 	.word	0x0800e418
 8006624:	0800e444 	.word	0x0800e444
 8006628:	0800e470 	.word	0x0800e470
 800662c:	0800e498 	.word	0x0800e498

08006630 <command_interface_handle_command>:

// Handle incoming commands
void command_interface_handle_command(char* command)
{
 8006630:	b590      	push	{r4, r7, lr}
 8006632:	b0c3      	sub	sp, #268	@ 0x10c
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
    char response[256];
    
    // Check if system is started
    if (!system_started) {
 8006638:	4b4b      	ldr	r3, [pc, #300]	@ (8006768 <command_interface_handle_command+0x138>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d118      	bne.n	8006672 <command_interface_handle_command+0x42>
        if (strcmp(command, "start") == 0) {
 8006640:	4a4a      	ldr	r2, [pc, #296]	@ (800676c <command_interface_handle_command+0x13c>)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	0011      	movs	r1, r2
 8006646:	0018      	movs	r0, r3
 8006648:	f7f9 fd5c 	bl	8000104 <strcmp>
 800664c:	1e03      	subs	r3, r0, #0
 800664e:	d10b      	bne.n	8006668 <command_interface_handle_command+0x38>
            system_started = 1;
 8006650:	4b45      	ldr	r3, [pc, #276]	@ (8006768 <command_interface_handle_command+0x138>)
 8006652:	2201      	movs	r2, #1
 8006654:	701a      	strb	r2, [r3, #0]
            command_interface_send_response("System started! Type 'help' for available commands.\r\n");
 8006656:	4b46      	ldr	r3, [pc, #280]	@ (8006770 <command_interface_handle_command+0x140>)
 8006658:	0018      	movs	r0, r3
 800665a:	f000 f8a3 	bl	80067a4 <command_interface_send_response>
            command_interface_send_response("> ");
 800665e:	4b45      	ldr	r3, [pc, #276]	@ (8006774 <command_interface_handle_command+0x144>)
 8006660:	0018      	movs	r0, r3
 8006662:	f000 f89f 	bl	80067a4 <command_interface_send_response>
            return;
 8006666:	e07b      	b.n	8006760 <command_interface_handle_command+0x130>
        } else {
            command_interface_send_response("Please type 'start' to begin.\r\n");
 8006668:	4b43      	ldr	r3, [pc, #268]	@ (8006778 <command_interface_handle_command+0x148>)
 800666a:	0018      	movs	r0, r3
 800666c:	f000 f89a 	bl	80067a4 <command_interface_send_response>
            return;
 8006670:	e076      	b.n	8006760 <command_interface_handle_command+0x130>
        }
    }
    
    // Parse commands
    if (strcmp(command, "read temperature") == 0) {
 8006672:	4a42      	ldr	r2, [pc, #264]	@ (800677c <command_interface_handle_command+0x14c>)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	0011      	movs	r1, r2
 8006678:	0018      	movs	r0, r3
 800667a:	f7f9 fd43 	bl	8000104 <strcmp>
 800667e:	1e03      	subs	r3, r0, #0
 8006680:	d102      	bne.n	8006688 <command_interface_handle_command+0x58>
        cmd_read_temperature();
 8006682:	f000 f8bb 	bl	80067fc <cmd_read_temperature>
 8006686:	e06b      	b.n	8006760 <command_interface_handle_command+0x130>
    }
    else if (strcmp(command, "read pressure") == 0) {
 8006688:	4a3d      	ldr	r2, [pc, #244]	@ (8006780 <command_interface_handle_command+0x150>)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	0011      	movs	r1, r2
 800668e:	0018      	movs	r0, r3
 8006690:	f7f9 fd38 	bl	8000104 <strcmp>
 8006694:	1e03      	subs	r3, r0, #0
 8006696:	d102      	bne.n	800669e <command_interface_handle_command+0x6e>
        cmd_read_pressure();
 8006698:	f000 f8ec 	bl	8006874 <cmd_read_pressure>
 800669c:	e060      	b.n	8006760 <command_interface_handle_command+0x130>
    }
    else if (strcmp(command, "read humidity") == 0) {
 800669e:	4a39      	ldr	r2, [pc, #228]	@ (8006784 <command_interface_handle_command+0x154>)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	0011      	movs	r1, r2
 80066a4:	0018      	movs	r0, r3
 80066a6:	f7f9 fd2d 	bl	8000104 <strcmp>
 80066aa:	1e03      	subs	r3, r0, #0
 80066ac:	d102      	bne.n	80066b4 <command_interface_handle_command+0x84>
        cmd_read_humidity();
 80066ae:	f000 f91d 	bl	80068ec <cmd_read_humidity>
 80066b2:	e055      	b.n	8006760 <command_interface_handle_command+0x130>
    }
    else if (strcmp(command, "test sensor") == 0) {
 80066b4:	4a34      	ldr	r2, [pc, #208]	@ (8006788 <command_interface_handle_command+0x158>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0011      	movs	r1, r2
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7f9 fd22 	bl	8000104 <strcmp>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d102      	bne.n	80066ca <command_interface_handle_command+0x9a>
        cmd_test_sensor();
 80066c4:	f000 f94e 	bl	8006964 <cmd_test_sensor>
 80066c8:	e04a      	b.n	8006760 <command_interface_handle_command+0x130>
    }
    else if (strncmp(command, "sum ", 4) == 0) {
 80066ca:	4930      	ldr	r1, [pc, #192]	@ (800678c <command_interface_handle_command+0x15c>)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2204      	movs	r2, #4
 80066d0:	0018      	movs	r0, r3
 80066d2:	f005 fbaf 	bl	800be34 <strncmp>
 80066d6:	1e03      	subs	r3, r0, #0
 80066d8:	d104      	bne.n	80066e4 <command_interface_handle_command+0xb4>
        cmd_math_operation(command);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	0018      	movs	r0, r3
 80066de:	f000 f953 	bl	8006988 <cmd_math_operation>
 80066e2:	e03d      	b.n	8006760 <command_interface_handle_command+0x130>
    }
    else if (strncmp(command, "sub ", 4) == 0) {
 80066e4:	492a      	ldr	r1, [pc, #168]	@ (8006790 <command_interface_handle_command+0x160>)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2204      	movs	r2, #4
 80066ea:	0018      	movs	r0, r3
 80066ec:	f005 fba2 	bl	800be34 <strncmp>
 80066f0:	1e03      	subs	r3, r0, #0
 80066f2:	d104      	bne.n	80066fe <command_interface_handle_command+0xce>
        cmd_math_operation(command);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	0018      	movs	r0, r3
 80066f8:	f000 f946 	bl	8006988 <cmd_math_operation>
 80066fc:	e030      	b.n	8006760 <command_interface_handle_command+0x130>
    }
    else if (strncmp(command, "mul ", 4) == 0) {
 80066fe:	4925      	ldr	r1, [pc, #148]	@ (8006794 <command_interface_handle_command+0x164>)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2204      	movs	r2, #4
 8006704:	0018      	movs	r0, r3
 8006706:	f005 fb95 	bl	800be34 <strncmp>
 800670a:	1e03      	subs	r3, r0, #0
 800670c:	d104      	bne.n	8006718 <command_interface_handle_command+0xe8>
        cmd_math_operation(command);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	0018      	movs	r0, r3
 8006712:	f000 f939 	bl	8006988 <cmd_math_operation>
 8006716:	e023      	b.n	8006760 <command_interface_handle_command+0x130>
    }
    else if (strncmp(command, "div ", 4) == 0) {
 8006718:	491f      	ldr	r1, [pc, #124]	@ (8006798 <command_interface_handle_command+0x168>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2204      	movs	r2, #4
 800671e:	0018      	movs	r0, r3
 8006720:	f005 fb88 	bl	800be34 <strncmp>
 8006724:	1e03      	subs	r3, r0, #0
 8006726:	d104      	bne.n	8006732 <command_interface_handle_command+0x102>
        cmd_math_operation(command);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	0018      	movs	r0, r3
 800672c:	f000 f92c 	bl	8006988 <cmd_math_operation>
 8006730:	e016      	b.n	8006760 <command_interface_handle_command+0x130>
    }
    else if (strcmp(command, "help") == 0) {
 8006732:	4a1a      	ldr	r2, [pc, #104]	@ (800679c <command_interface_handle_command+0x16c>)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	0011      	movs	r1, r2
 8006738:	0018      	movs	r0, r3
 800673a:	f7f9 fce3 	bl	8000104 <strcmp>
 800673e:	1e03      	subs	r3, r0, #0
 8006740:	d102      	bne.n	8006748 <command_interface_handle_command+0x118>
        command_interface_show_help();
 8006742:	f7ff ff2d 	bl	80065a0 <command_interface_show_help>
 8006746:	e00b      	b.n	8006760 <command_interface_handle_command+0x130>
    }
    else {
        snprintf(response, sizeof(response), "Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a15      	ldr	r2, [pc, #84]	@ (80067a0 <command_interface_handle_command+0x170>)
 800674c:	2180      	movs	r1, #128	@ 0x80
 800674e:	0049      	lsls	r1, r1, #1
 8006750:	2408      	movs	r4, #8
 8006752:	1938      	adds	r0, r7, r4
 8006754:	f005 fae4 	bl	800bd20 <sniprintf>
        command_interface_send_response(response);
 8006758:	193b      	adds	r3, r7, r4
 800675a:	0018      	movs	r0, r3
 800675c:	f000 f822 	bl	80067a4 <command_interface_send_response>
    }
}
 8006760:	46bd      	mov	sp, r7
 8006762:	b043      	add	sp, #268	@ 0x10c
 8006764:	bd90      	pop	{r4, r7, pc}
 8006766:	46c0      	nop			@ (mov r8, r8)
 8006768:	200002c2 	.word	0x200002c2
 800676c:	0800e4b4 	.word	0x0800e4b4
 8006770:	0800e4bc 	.word	0x0800e4bc
 8006774:	0800e2e0 	.word	0x0800e2e0
 8006778:	0800e4f4 	.word	0x0800e4f4
 800677c:	0800e514 	.word	0x0800e514
 8006780:	0800e528 	.word	0x0800e528
 8006784:	0800e538 	.word	0x0800e538
 8006788:	0800e548 	.word	0x0800e548
 800678c:	0800e554 	.word	0x0800e554
 8006790:	0800e55c 	.word	0x0800e55c
 8006794:	0800e564 	.word	0x0800e564
 8006798:	0800e56c 	.word	0x0800e56c
 800679c:	0800e574 	.word	0x0800e574
 80067a0:	0800e57c 	.word	0x0800e57c

080067a4 <command_interface_send_response>:

// Send response via USART2
void command_interface_send_response(const char* response)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	0018      	movs	r0, r3
 80067b0:	f7f9 fcb2 	bl	8000118 <strlen>
 80067b4:	0003      	movs	r3, r0
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	2301      	movs	r3, #1
 80067ba:	425b      	negs	r3, r3
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4803      	ldr	r0, [pc, #12]	@ (80067cc <command_interface_send_response+0x28>)
 80067c0:	f003 fc2a 	bl	800a018 <HAL_UART_Transmit>
}
 80067c4:	46c0      	nop			@ (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000318 	.word	0x20000318

080067d0 <command_interface_send_response_usart4>:

// Send response via USART4
void command_interface_send_response_usart4(const char* response)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	0018      	movs	r0, r3
 80067dc:	f7f9 fc9c 	bl	8000118 <strlen>
 80067e0:	0003      	movs	r3, r0
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	2301      	movs	r3, #1
 80067e6:	425b      	negs	r3, r3
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	4803      	ldr	r0, [pc, #12]	@ (80067f8 <command_interface_send_response_usart4+0x28>)
 80067ec:	f003 fc14 	bl	800a018 <HAL_UART_Transmit>
}
 80067f0:	46c0      	nop			@ (mov r8, r8)
 80067f2:	46bd      	mov	sp, r7
 80067f4:	b002      	add	sp, #8
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	200003ac 	.word	0x200003ac

080067fc <cmd_read_temperature>:

// Command handler for reading temperature
void cmd_read_temperature(void)
{
 80067fc:	b590      	push	{r4, r7, lr}
 80067fe:	b0a9      	sub	sp, #164	@ 0xa4
 8006800:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 8006802:	f7fd fa4b 	bl	8003c9c <bme680_check_sensor_presence>
 8006806:	1e03      	subs	r3, r0, #0
 8006808:	d00a      	beq.n	8006820 <cmd_read_temperature+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 800680a:	4a17      	ldr	r2, [pc, #92]	@ (8006868 <cmd_read_temperature+0x6c>)
 800680c:	003b      	movs	r3, r7
 800680e:	2180      	movs	r1, #128	@ 0x80
 8006810:	0018      	movs	r0, r3
 8006812:	f005 fa85 	bl	800bd20 <sniprintf>
        command_interface_send_response(response);
 8006816:	003b      	movs	r3, r7
 8006818:	0018      	movs	r0, r3
 800681a:	f7ff ffc3 	bl	80067a4 <command_interface_send_response>
 800681e:	e020      	b.n	8006862 <cmd_read_temperature+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8006820:	2480      	movs	r4, #128	@ 0x80
 8006822:	193b      	adds	r3, r7, r4
 8006824:	0018      	movs	r0, r3
 8006826:	f7fd f99b 	bl	8003b60 <bme680_read_sensor_data>
 800682a:	1e03      	subs	r3, r0, #0
 800682c:	d10f      	bne.n	800684e <cmd_read_temperature+0x52>
        snprintf(response, sizeof(response), "Temperature: %.2f°C\r\n", sensor_data.temperature);
 800682e:	193b      	adds	r3, r7, r4
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	1c18      	adds	r0, r3, #0
 8006834:	f7fc ff9e 	bl	8003774 <__aeabi_f2d>
 8006838:	0002      	movs	r2, r0
 800683a:	000b      	movs	r3, r1
 800683c:	490b      	ldr	r1, [pc, #44]	@ (800686c <cmd_read_temperature+0x70>)
 800683e:	0038      	movs	r0, r7
 8006840:	9200      	str	r2, [sp, #0]
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	000a      	movs	r2, r1
 8006846:	2180      	movs	r1, #128	@ 0x80
 8006848:	f005 fa6a 	bl	800bd20 <sniprintf>
 800684c:	e005      	b.n	800685a <cmd_read_temperature+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading temperature from BME680\r\n");
 800684e:	4a08      	ldr	r2, [pc, #32]	@ (8006870 <cmd_read_temperature+0x74>)
 8006850:	003b      	movs	r3, r7
 8006852:	2180      	movs	r1, #128	@ 0x80
 8006854:	0018      	movs	r0, r3
 8006856:	f005 fa63 	bl	800bd20 <sniprintf>
    }
    
    command_interface_send_response(response);
 800685a:	003b      	movs	r3, r7
 800685c:	0018      	movs	r0, r3
 800685e:	f7ff ffa1 	bl	80067a4 <command_interface_send_response>
}
 8006862:	46bd      	mov	sp, r7
 8006864:	b027      	add	sp, #156	@ 0x9c
 8006866:	bd90      	pop	{r4, r7, pc}
 8006868:	0800e5b8 	.word	0x0800e5b8
 800686c:	0800e5e0 	.word	0x0800e5e0
 8006870:	0800e5f8 	.word	0x0800e5f8

08006874 <cmd_read_pressure>:

// Command handler for reading pressure
void cmd_read_pressure(void)
{
 8006874:	b590      	push	{r4, r7, lr}
 8006876:	b0a9      	sub	sp, #164	@ 0xa4
 8006878:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800687a:	f7fd fa0f 	bl	8003c9c <bme680_check_sensor_presence>
 800687e:	1e03      	subs	r3, r0, #0
 8006880:	d00a      	beq.n	8006898 <cmd_read_pressure+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 8006882:	4a17      	ldr	r2, [pc, #92]	@ (80068e0 <cmd_read_pressure+0x6c>)
 8006884:	003b      	movs	r3, r7
 8006886:	2180      	movs	r1, #128	@ 0x80
 8006888:	0018      	movs	r0, r3
 800688a:	f005 fa49 	bl	800bd20 <sniprintf>
        command_interface_send_response(response);
 800688e:	003b      	movs	r3, r7
 8006890:	0018      	movs	r0, r3
 8006892:	f7ff ff87 	bl	80067a4 <command_interface_send_response>
 8006896:	e020      	b.n	80068da <cmd_read_pressure+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8006898:	2480      	movs	r4, #128	@ 0x80
 800689a:	193b      	adds	r3, r7, r4
 800689c:	0018      	movs	r0, r3
 800689e:	f7fd f95f 	bl	8003b60 <bme680_read_sensor_data>
 80068a2:	1e03      	subs	r3, r0, #0
 80068a4:	d10f      	bne.n	80068c6 <cmd_read_pressure+0x52>
        snprintf(response, sizeof(response), "Pressure: %.2f Pa\r\n", sensor_data.pressure);
 80068a6:	193b      	adds	r3, r7, r4
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	1c18      	adds	r0, r3, #0
 80068ac:	f7fc ff62 	bl	8003774 <__aeabi_f2d>
 80068b0:	0002      	movs	r2, r0
 80068b2:	000b      	movs	r3, r1
 80068b4:	490b      	ldr	r1, [pc, #44]	@ (80068e4 <cmd_read_pressure+0x70>)
 80068b6:	0038      	movs	r0, r7
 80068b8:	9200      	str	r2, [sp, #0]
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	000a      	movs	r2, r1
 80068be:	2180      	movs	r1, #128	@ 0x80
 80068c0:	f005 fa2e 	bl	800bd20 <sniprintf>
 80068c4:	e005      	b.n	80068d2 <cmd_read_pressure+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading pressure from BME680\r\n");
 80068c6:	4a08      	ldr	r2, [pc, #32]	@ (80068e8 <cmd_read_pressure+0x74>)
 80068c8:	003b      	movs	r3, r7
 80068ca:	2180      	movs	r1, #128	@ 0x80
 80068cc:	0018      	movs	r0, r3
 80068ce:	f005 fa27 	bl	800bd20 <sniprintf>
    }
    
    command_interface_send_response(response);
 80068d2:	003b      	movs	r3, r7
 80068d4:	0018      	movs	r0, r3
 80068d6:	f7ff ff65 	bl	80067a4 <command_interface_send_response>
}
 80068da:	46bd      	mov	sp, r7
 80068dc:	b027      	add	sp, #156	@ 0x9c
 80068de:	bd90      	pop	{r4, r7, pc}
 80068e0:	0800e5b8 	.word	0x0800e5b8
 80068e4:	0800e620 	.word	0x0800e620
 80068e8:	0800e634 	.word	0x0800e634

080068ec <cmd_read_humidity>:

// Command handler for reading humidity
void cmd_read_humidity(void)
{
 80068ec:	b590      	push	{r4, r7, lr}
 80068ee:	b0a9      	sub	sp, #164	@ 0xa4
 80068f0:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 80068f2:	f7fd f9d3 	bl	8003c9c <bme680_check_sensor_presence>
 80068f6:	1e03      	subs	r3, r0, #0
 80068f8:	d00a      	beq.n	8006910 <cmd_read_humidity+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 80068fa:	4a17      	ldr	r2, [pc, #92]	@ (8006958 <cmd_read_humidity+0x6c>)
 80068fc:	003b      	movs	r3, r7
 80068fe:	2180      	movs	r1, #128	@ 0x80
 8006900:	0018      	movs	r0, r3
 8006902:	f005 fa0d 	bl	800bd20 <sniprintf>
        command_interface_send_response(response);
 8006906:	003b      	movs	r3, r7
 8006908:	0018      	movs	r0, r3
 800690a:	f7ff ff4b 	bl	80067a4 <command_interface_send_response>
 800690e:	e020      	b.n	8006952 <cmd_read_humidity+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8006910:	2480      	movs	r4, #128	@ 0x80
 8006912:	193b      	adds	r3, r7, r4
 8006914:	0018      	movs	r0, r3
 8006916:	f7fd f923 	bl	8003b60 <bme680_read_sensor_data>
 800691a:	1e03      	subs	r3, r0, #0
 800691c:	d10f      	bne.n	800693e <cmd_read_humidity+0x52>
        snprintf(response, sizeof(response), "Humidity: %.2f%%\r\n", sensor_data.humidity);
 800691e:	193b      	adds	r3, r7, r4
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	1c18      	adds	r0, r3, #0
 8006924:	f7fc ff26 	bl	8003774 <__aeabi_f2d>
 8006928:	0002      	movs	r2, r0
 800692a:	000b      	movs	r3, r1
 800692c:	490b      	ldr	r1, [pc, #44]	@ (800695c <cmd_read_humidity+0x70>)
 800692e:	0038      	movs	r0, r7
 8006930:	9200      	str	r2, [sp, #0]
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	000a      	movs	r2, r1
 8006936:	2180      	movs	r1, #128	@ 0x80
 8006938:	f005 f9f2 	bl	800bd20 <sniprintf>
 800693c:	e005      	b.n	800694a <cmd_read_humidity+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading humidity from BME680\r\n");
 800693e:	4a08      	ldr	r2, [pc, #32]	@ (8006960 <cmd_read_humidity+0x74>)
 8006940:	003b      	movs	r3, r7
 8006942:	2180      	movs	r1, #128	@ 0x80
 8006944:	0018      	movs	r0, r3
 8006946:	f005 f9eb 	bl	800bd20 <sniprintf>
    }
    
    command_interface_send_response(response);
 800694a:	003b      	movs	r3, r7
 800694c:	0018      	movs	r0, r3
 800694e:	f7ff ff29 	bl	80067a4 <command_interface_send_response>
}
 8006952:	46bd      	mov	sp, r7
 8006954:	b027      	add	sp, #156	@ 0x9c
 8006956:	bd90      	pop	{r4, r7, pc}
 8006958:	0800e5b8 	.word	0x0800e5b8
 800695c:	0800e65c 	.word	0x0800e65c
 8006960:	0800e670 	.word	0x0800e670

08006964 <cmd_test_sensor>:

// Command handler for testing sensor
void cmd_test_sensor(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 8006968:	f7fd f998 	bl	8003c9c <bme680_check_sensor_presence>
 800696c:	1e03      	subs	r3, r0, #0
 800696e:	d004      	beq.n	800697a <cmd_test_sensor+0x16>
        command_interface_send_response("Error: BME680 sensor not available\r\n");
 8006970:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <cmd_test_sensor+0x20>)
 8006972:	0018      	movs	r0, r3
 8006974:	f7ff ff16 	bl	80067a4 <command_interface_send_response>
        return;
 8006978:	e001      	b.n	800697e <cmd_test_sensor+0x1a>
    }
    
    bme680_test_sensor();
 800697a:	f7fd f927 	bl	8003bcc <bme680_test_sensor>
}
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	0800e5b8 	.word	0x0800e5b8

08006988 <cmd_math_operation>:

// Command handler for mathematical operations
void cmd_math_operation(char* command)
{
 8006988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698a:	b0b1      	sub	sp, #196	@ 0xc4
 800698c:	af06      	add	r7, sp, #24
 800698e:	60f8      	str	r0, [r7, #12]
    char* operation = strtok(command, " ");
 8006990:	4ac9      	ldr	r2, [pc, #804]	@ (8006cb8 <cmd_math_operation+0x330>)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	0011      	movs	r1, r2
 8006996:	0018      	movs	r0, r3
 8006998:	f005 fa5e 	bl	800be58 <strtok>
 800699c:	0003      	movs	r3, r0
 800699e:	229c      	movs	r2, #156	@ 0x9c
 80069a0:	2508      	movs	r5, #8
 80069a2:	1952      	adds	r2, r2, r5
 80069a4:	19d2      	adds	r2, r2, r7
 80069a6:	6013      	str	r3, [r2, #0]
    char* num1_str = strtok(NULL, " ");
 80069a8:	4bc3      	ldr	r3, [pc, #780]	@ (8006cb8 <cmd_math_operation+0x330>)
 80069aa:	0019      	movs	r1, r3
 80069ac:	2000      	movs	r0, #0
 80069ae:	f005 fa53 	bl	800be58 <strtok>
 80069b2:	0003      	movs	r3, r0
 80069b4:	2498      	movs	r4, #152	@ 0x98
 80069b6:	1962      	adds	r2, r4, r5
 80069b8:	19d2      	adds	r2, r2, r7
 80069ba:	6013      	str	r3, [r2, #0]
    char* num2_str = strtok(NULL, " ");
 80069bc:	4bbe      	ldr	r3, [pc, #760]	@ (8006cb8 <cmd_math_operation+0x330>)
 80069be:	0019      	movs	r1, r3
 80069c0:	2000      	movs	r0, #0
 80069c2:	f005 fa49 	bl	800be58 <strtok>
 80069c6:	0003      	movs	r3, r0
 80069c8:	2294      	movs	r2, #148	@ 0x94
 80069ca:	1951      	adds	r1, r2, r5
 80069cc:	19c9      	adds	r1, r1, r7
 80069ce:	600b      	str	r3, [r1, #0]
    char response[128];
    
    if (num1_str == NULL || num2_str == NULL) {
 80069d0:	0029      	movs	r1, r5
 80069d2:	1963      	adds	r3, r4, r5
 80069d4:	19db      	adds	r3, r3, r7
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <cmd_math_operation+0x5e>
 80069dc:	1853      	adds	r3, r2, r1
 80069de:	19db      	adds	r3, r3, r7
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <cmd_math_operation+0x68>
        command_interface_send_response("Usage: <operation> <num1> <num2>\r\n");
 80069e6:	4bb5      	ldr	r3, [pc, #724]	@ (8006cbc <cmd_math_operation+0x334>)
 80069e8:	0018      	movs	r0, r3
 80069ea:	f7ff fedb 	bl	80067a4 <command_interface_send_response>
 80069ee:	e160      	b.n	8006cb2 <cmd_math_operation+0x32a>
        return;
    }
    
    float num1 = atof(num1_str);
 80069f0:	2398      	movs	r3, #152	@ 0x98
 80069f2:	2508      	movs	r5, #8
 80069f4:	195b      	adds	r3, r3, r5
 80069f6:	19db      	adds	r3, r3, r7
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	0018      	movs	r0, r3
 80069fc:	f004 faa2 	bl	800af44 <atof>
 8006a00:	0002      	movs	r2, r0
 8006a02:	000b      	movs	r3, r1
 8006a04:	0010      	movs	r0, r2
 8006a06:	0019      	movs	r1, r3
 8006a08:	f7fc fefc 	bl	8003804 <__aeabi_d2f>
 8006a0c:	1c03      	adds	r3, r0, #0
 8006a0e:	2490      	movs	r4, #144	@ 0x90
 8006a10:	1962      	adds	r2, r4, r5
 8006a12:	19d2      	adds	r2, r2, r7
 8006a14:	6013      	str	r3, [r2, #0]
    float num2 = atof(num2_str);
 8006a16:	2394      	movs	r3, #148	@ 0x94
 8006a18:	195b      	adds	r3, r3, r5
 8006a1a:	19db      	adds	r3, r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	0018      	movs	r0, r3
 8006a20:	f004 fa90 	bl	800af44 <atof>
 8006a24:	0002      	movs	r2, r0
 8006a26:	000b      	movs	r3, r1
 8006a28:	0010      	movs	r0, r2
 8006a2a:	0019      	movs	r1, r3
 8006a2c:	f7fc feea 	bl	8003804 <__aeabi_d2f>
 8006a30:	1c03      	adds	r3, r0, #0
 8006a32:	268c      	movs	r6, #140	@ 0x8c
 8006a34:	1972      	adds	r2, r6, r5
 8006a36:	19d2      	adds	r2, r2, r7
 8006a38:	6013      	str	r3, [r2, #0]
    float result;
    
    if (strcmp(operation, "sum") == 0) {
 8006a3a:	4aa1      	ldr	r2, [pc, #644]	@ (8006cc0 <cmd_math_operation+0x338>)
 8006a3c:	239c      	movs	r3, #156	@ 0x9c
 8006a3e:	195b      	adds	r3, r3, r5
 8006a40:	19db      	adds	r3, r3, r7
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	0011      	movs	r1, r2
 8006a46:	0018      	movs	r0, r3
 8006a48:	f7f9 fb5c 	bl	8000104 <strcmp>
 8006a4c:	1e03      	subs	r3, r0, #0
 8006a4e:	d136      	bne.n	8006abe <cmd_math_operation+0x136>
        result = num1 + num2;
 8006a50:	1973      	adds	r3, r6, r5
 8006a52:	19db      	adds	r3, r3, r7
 8006a54:	6819      	ldr	r1, [r3, #0]
 8006a56:	1963      	adds	r3, r4, r5
 8006a58:	19db      	adds	r3, r3, r7
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	f7f9 fed8 	bl	8000810 <__aeabi_fadd>
 8006a60:	1c03      	adds	r3, r0, #0
 8006a62:	2288      	movs	r2, #136	@ 0x88
 8006a64:	1952      	adds	r2, r2, r5
 8006a66:	19d1      	adds	r1, r2, r7
 8006a68:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f + %.2f = %.2f\r\n", num1, num2, result);
 8006a6a:	1963      	adds	r3, r4, r5
 8006a6c:	19d9      	adds	r1, r3, r7
 8006a6e:	6808      	ldr	r0, [r1, #0]
 8006a70:	f7fc fe80 	bl	8003774 <__aeabi_f2d>
 8006a74:	0004      	movs	r4, r0
 8006a76:	000d      	movs	r5, r1
 8006a78:	2208      	movs	r2, #8
 8006a7a:	18b3      	adds	r3, r6, r2
 8006a7c:	19d9      	adds	r1, r3, r7
 8006a7e:	6808      	ldr	r0, [r1, #0]
 8006a80:	f7fc fe78 	bl	8003774 <__aeabi_f2d>
 8006a84:	6038      	str	r0, [r7, #0]
 8006a86:	6079      	str	r1, [r7, #4]
 8006a88:	2388      	movs	r3, #136	@ 0x88
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	189b      	adds	r3, r3, r2
 8006a8e:	19db      	adds	r3, r3, r7
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	f7fc fe6f 	bl	8003774 <__aeabi_f2d>
 8006a96:	0002      	movs	r2, r0
 8006a98:	000b      	movs	r3, r1
 8006a9a:	498a      	ldr	r1, [pc, #552]	@ (8006cc4 <cmd_math_operation+0x33c>)
 8006a9c:	2608      	movs	r6, #8
 8006a9e:	2008      	movs	r0, #8
 8006aa0:	1830      	adds	r0, r6, r0
 8006aa2:	19c0      	adds	r0, r0, r7
 8006aa4:	9204      	str	r2, [sp, #16]
 8006aa6:	9305      	str	r3, [sp, #20]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	9202      	str	r2, [sp, #8]
 8006aae:	9303      	str	r3, [sp, #12]
 8006ab0:	9400      	str	r4, [sp, #0]
 8006ab2:	9501      	str	r5, [sp, #4]
 8006ab4:	000a      	movs	r2, r1
 8006ab6:	2180      	movs	r1, #128	@ 0x80
 8006ab8:	f005 f932 	bl	800bd20 <sniprintf>
 8006abc:	e0f2      	b.n	8006ca4 <cmd_math_operation+0x31c>
    }
    else if (strcmp(operation, "sub") == 0) {
 8006abe:	4a82      	ldr	r2, [pc, #520]	@ (8006cc8 <cmd_math_operation+0x340>)
 8006ac0:	239c      	movs	r3, #156	@ 0x9c
 8006ac2:	2408      	movs	r4, #8
 8006ac4:	191b      	adds	r3, r3, r4
 8006ac6:	19db      	adds	r3, r3, r7
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	0011      	movs	r1, r2
 8006acc:	0018      	movs	r0, r3
 8006ace:	f7f9 fb19 	bl	8000104 <strcmp>
 8006ad2:	1e03      	subs	r3, r0, #0
 8006ad4:	d13a      	bne.n	8006b4c <cmd_math_operation+0x1c4>
        result = num1 - num2;
 8006ad6:	268c      	movs	r6, #140	@ 0x8c
 8006ad8:	0025      	movs	r5, r4
 8006ada:	1973      	adds	r3, r6, r5
 8006adc:	19db      	adds	r3, r3, r7
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	2490      	movs	r4, #144	@ 0x90
 8006ae2:	1963      	adds	r3, r4, r5
 8006ae4:	19db      	adds	r3, r3, r7
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	f7fa fbac 	bl	8001244 <__aeabi_fsub>
 8006aec:	1c03      	adds	r3, r0, #0
 8006aee:	2288      	movs	r2, #136	@ 0x88
 8006af0:	0028      	movs	r0, r5
 8006af2:	1812      	adds	r2, r2, r0
 8006af4:	19d1      	adds	r1, r2, r7
 8006af6:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f - %.2f = %.2f\r\n", num1, num2, result);
 8006af8:	1823      	adds	r3, r4, r0
 8006afa:	19d9      	adds	r1, r3, r7
 8006afc:	6808      	ldr	r0, [r1, #0]
 8006afe:	f7fc fe39 	bl	8003774 <__aeabi_f2d>
 8006b02:	0004      	movs	r4, r0
 8006b04:	000d      	movs	r5, r1
 8006b06:	2008      	movs	r0, #8
 8006b08:	1833      	adds	r3, r6, r0
 8006b0a:	19d9      	adds	r1, r3, r7
 8006b0c:	6808      	ldr	r0, [r1, #0]
 8006b0e:	f7fc fe31 	bl	8003774 <__aeabi_f2d>
 8006b12:	6038      	str	r0, [r7, #0]
 8006b14:	6079      	str	r1, [r7, #4]
 8006b16:	2388      	movs	r3, #136	@ 0x88
 8006b18:	2008      	movs	r0, #8
 8006b1a:	181b      	adds	r3, r3, r0
 8006b1c:	19db      	adds	r3, r3, r7
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	f7fc fe28 	bl	8003774 <__aeabi_f2d>
 8006b24:	0002      	movs	r2, r0
 8006b26:	000b      	movs	r3, r1
 8006b28:	4968      	ldr	r1, [pc, #416]	@ (8006ccc <cmd_math_operation+0x344>)
 8006b2a:	2608      	movs	r6, #8
 8006b2c:	2008      	movs	r0, #8
 8006b2e:	1830      	adds	r0, r6, r0
 8006b30:	19c0      	adds	r0, r0, r7
 8006b32:	9204      	str	r2, [sp, #16]
 8006b34:	9305      	str	r3, [sp, #20]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	9202      	str	r2, [sp, #8]
 8006b3c:	9303      	str	r3, [sp, #12]
 8006b3e:	9400      	str	r4, [sp, #0]
 8006b40:	9501      	str	r5, [sp, #4]
 8006b42:	000a      	movs	r2, r1
 8006b44:	2180      	movs	r1, #128	@ 0x80
 8006b46:	f005 f8eb 	bl	800bd20 <sniprintf>
 8006b4a:	e0ab      	b.n	8006ca4 <cmd_math_operation+0x31c>
    }
    else if (strcmp(operation, "mul") == 0) {
 8006b4c:	4a60      	ldr	r2, [pc, #384]	@ (8006cd0 <cmd_math_operation+0x348>)
 8006b4e:	239c      	movs	r3, #156	@ 0x9c
 8006b50:	2408      	movs	r4, #8
 8006b52:	191b      	adds	r3, r3, r4
 8006b54:	19db      	adds	r3, r3, r7
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	0011      	movs	r1, r2
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7f9 fad2 	bl	8000104 <strcmp>
 8006b60:	1e03      	subs	r3, r0, #0
 8006b62:	d13a      	bne.n	8006bda <cmd_math_operation+0x252>
        result = num1 * num2;
 8006b64:	268c      	movs	r6, #140	@ 0x8c
 8006b66:	0025      	movs	r5, r4
 8006b68:	1973      	adds	r3, r6, r5
 8006b6a:	19db      	adds	r3, r3, r7
 8006b6c:	6819      	ldr	r1, [r3, #0]
 8006b6e:	2490      	movs	r4, #144	@ 0x90
 8006b70:	1963      	adds	r3, r4, r5
 8006b72:	19db      	adds	r3, r3, r7
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	f7fa fa0b 	bl	8000f90 <__aeabi_fmul>
 8006b7a:	1c03      	adds	r3, r0, #0
 8006b7c:	2288      	movs	r2, #136	@ 0x88
 8006b7e:	0028      	movs	r0, r5
 8006b80:	1812      	adds	r2, r2, r0
 8006b82:	19d1      	adds	r1, r2, r7
 8006b84:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f * %.2f = %.2f\r\n", num1, num2, result);
 8006b86:	1823      	adds	r3, r4, r0
 8006b88:	19d9      	adds	r1, r3, r7
 8006b8a:	6808      	ldr	r0, [r1, #0]
 8006b8c:	f7fc fdf2 	bl	8003774 <__aeabi_f2d>
 8006b90:	0004      	movs	r4, r0
 8006b92:	000d      	movs	r5, r1
 8006b94:	2008      	movs	r0, #8
 8006b96:	1833      	adds	r3, r6, r0
 8006b98:	19d9      	adds	r1, r3, r7
 8006b9a:	6808      	ldr	r0, [r1, #0]
 8006b9c:	f7fc fdea 	bl	8003774 <__aeabi_f2d>
 8006ba0:	6038      	str	r0, [r7, #0]
 8006ba2:	6079      	str	r1, [r7, #4]
 8006ba4:	2388      	movs	r3, #136	@ 0x88
 8006ba6:	2008      	movs	r0, #8
 8006ba8:	181b      	adds	r3, r3, r0
 8006baa:	19db      	adds	r3, r3, r7
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	f7fc fde1 	bl	8003774 <__aeabi_f2d>
 8006bb2:	0002      	movs	r2, r0
 8006bb4:	000b      	movs	r3, r1
 8006bb6:	4947      	ldr	r1, [pc, #284]	@ (8006cd4 <cmd_math_operation+0x34c>)
 8006bb8:	2608      	movs	r6, #8
 8006bba:	2008      	movs	r0, #8
 8006bbc:	1830      	adds	r0, r6, r0
 8006bbe:	19c0      	adds	r0, r0, r7
 8006bc0:	9204      	str	r2, [sp, #16]
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	9202      	str	r2, [sp, #8]
 8006bca:	9303      	str	r3, [sp, #12]
 8006bcc:	9400      	str	r4, [sp, #0]
 8006bce:	9501      	str	r5, [sp, #4]
 8006bd0:	000a      	movs	r2, r1
 8006bd2:	2180      	movs	r1, #128	@ 0x80
 8006bd4:	f005 f8a4 	bl	800bd20 <sniprintf>
 8006bd8:	e064      	b.n	8006ca4 <cmd_math_operation+0x31c>
    }
    else if (strcmp(operation, "div") == 0) {
 8006bda:	4a3f      	ldr	r2, [pc, #252]	@ (8006cd8 <cmd_math_operation+0x350>)
 8006bdc:	239c      	movs	r3, #156	@ 0x9c
 8006bde:	2408      	movs	r4, #8
 8006be0:	191b      	adds	r3, r3, r4
 8006be2:	19db      	adds	r3, r3, r7
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	0011      	movs	r1, r2
 8006be8:	0018      	movs	r0, r3
 8006bea:	f7f9 fa8b 	bl	8000104 <strcmp>
 8006bee:	1e03      	subs	r3, r0, #0
 8006bf0:	d14c      	bne.n	8006c8c <cmd_math_operation+0x304>
        if (num2 != 0) {
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	268c      	movs	r6, #140	@ 0x8c
 8006bf6:	1933      	adds	r3, r6, r4
 8006bf8:	19db      	adds	r3, r3, r7
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	f7f9 fc68 	bl	80004d0 <__aeabi_fcmpeq>
 8006c00:	1e03      	subs	r3, r0, #0
 8006c02:	d139      	bne.n	8006c78 <cmd_math_operation+0x2f0>
            result = num1 / num2;
 8006c04:	0025      	movs	r5, r4
 8006c06:	1933      	adds	r3, r6, r4
 8006c08:	19db      	adds	r3, r3, r7
 8006c0a:	6819      	ldr	r1, [r3, #0]
 8006c0c:	2490      	movs	r4, #144	@ 0x90
 8006c0e:	1963      	adds	r3, r4, r5
 8006c10:	19db      	adds	r3, r3, r7
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	f7f9 ffee 	bl	8000bf4 <__aeabi_fdiv>
 8006c18:	1c03      	adds	r3, r0, #0
 8006c1a:	2288      	movs	r2, #136	@ 0x88
 8006c1c:	0028      	movs	r0, r5
 8006c1e:	1812      	adds	r2, r2, r0
 8006c20:	19d1      	adds	r1, r2, r7
 8006c22:	600b      	str	r3, [r1, #0]
            snprintf(response, sizeof(response), "%.2f / %.2f = %.2f\r\n", num1, num2, result);
 8006c24:	1823      	adds	r3, r4, r0
 8006c26:	19d9      	adds	r1, r3, r7
 8006c28:	6808      	ldr	r0, [r1, #0]
 8006c2a:	f7fc fda3 	bl	8003774 <__aeabi_f2d>
 8006c2e:	0004      	movs	r4, r0
 8006c30:	000d      	movs	r5, r1
 8006c32:	2008      	movs	r0, #8
 8006c34:	1833      	adds	r3, r6, r0
 8006c36:	19d9      	adds	r1, r3, r7
 8006c38:	6808      	ldr	r0, [r1, #0]
 8006c3a:	f7fc fd9b 	bl	8003774 <__aeabi_f2d>
 8006c3e:	6038      	str	r0, [r7, #0]
 8006c40:	6079      	str	r1, [r7, #4]
 8006c42:	2388      	movs	r3, #136	@ 0x88
 8006c44:	2008      	movs	r0, #8
 8006c46:	181b      	adds	r3, r3, r0
 8006c48:	19db      	adds	r3, r3, r7
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	f7fc fd92 	bl	8003774 <__aeabi_f2d>
 8006c50:	0002      	movs	r2, r0
 8006c52:	000b      	movs	r3, r1
 8006c54:	4921      	ldr	r1, [pc, #132]	@ (8006cdc <cmd_math_operation+0x354>)
 8006c56:	2608      	movs	r6, #8
 8006c58:	2008      	movs	r0, #8
 8006c5a:	1830      	adds	r0, r6, r0
 8006c5c:	19c0      	adds	r0, r0, r7
 8006c5e:	9204      	str	r2, [sp, #16]
 8006c60:	9305      	str	r3, [sp, #20]
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	9202      	str	r2, [sp, #8]
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	9400      	str	r4, [sp, #0]
 8006c6c:	9501      	str	r5, [sp, #4]
 8006c6e:	000a      	movs	r2, r1
 8006c70:	2180      	movs	r1, #128	@ 0x80
 8006c72:	f005 f855 	bl	800bd20 <sniprintf>
 8006c76:	e015      	b.n	8006ca4 <cmd_math_operation+0x31c>
        } else {
            snprintf(response, sizeof(response), "Error: Division by zero\r\n");
 8006c78:	4a19      	ldr	r2, [pc, #100]	@ (8006ce0 <cmd_math_operation+0x358>)
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	2108      	movs	r1, #8
 8006c7e:	185b      	adds	r3, r3, r1
 8006c80:	19db      	adds	r3, r3, r7
 8006c82:	2180      	movs	r1, #128	@ 0x80
 8006c84:	0018      	movs	r0, r3
 8006c86:	f005 f84b 	bl	800bd20 <sniprintf>
 8006c8a:	e00b      	b.n	8006ca4 <cmd_math_operation+0x31c>
        }
    }
    else {
        snprintf(response, sizeof(response), "Unknown operation: %s\r\n", operation);
 8006c8c:	239c      	movs	r3, #156	@ 0x9c
 8006c8e:	2008      	movs	r0, #8
 8006c90:	181b      	adds	r3, r3, r0
 8006c92:	19db      	adds	r3, r3, r7
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a13      	ldr	r2, [pc, #76]	@ (8006ce4 <cmd_math_operation+0x35c>)
 8006c98:	2108      	movs	r1, #8
 8006c9a:	1809      	adds	r1, r1, r0
 8006c9c:	19c8      	adds	r0, r1, r7
 8006c9e:	2180      	movs	r1, #128	@ 0x80
 8006ca0:	f005 f83e 	bl	800bd20 <sniprintf>
    }
    
    command_interface_send_response(response);
 8006ca4:	2308      	movs	r3, #8
 8006ca6:	2208      	movs	r2, #8
 8006ca8:	189b      	adds	r3, r3, r2
 8006caa:	19db      	adds	r3, r3, r7
 8006cac:	0018      	movs	r0, r3
 8006cae:	f7ff fd79 	bl	80067a4 <command_interface_send_response>
}
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	b02b      	add	sp, #172	@ 0xac
 8006cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb8:	0800e698 	.word	0x0800e698
 8006cbc:	0800e69c 	.word	0x0800e69c
 8006cc0:	0800e6c0 	.word	0x0800e6c0
 8006cc4:	0800e6c4 	.word	0x0800e6c4
 8006cc8:	0800e6dc 	.word	0x0800e6dc
 8006ccc:	0800e6e0 	.word	0x0800e6e0
 8006cd0:	0800e6f8 	.word	0x0800e6f8
 8006cd4:	0800e6fc 	.word	0x0800e6fc
 8006cd8:	0800e714 	.word	0x0800e714
 8006cdc:	0800e718 	.word	0x0800e718
 8006ce0:	0800e730 	.word	0x0800e730
 8006ce4:	0800e74c 	.word	0x0800e74c

08006ce8 <command_interface_show_help_usart4>:

// Show help menu for USART4
void command_interface_show_help_usart4(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
    command_interface_send_response_usart4("\r\n=== Available Commands (USART4) ===\r\n");
 8006cec:	4b17      	ldr	r3, [pc, #92]	@ (8006d4c <command_interface_show_help_usart4+0x64>)
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7ff fd6e 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("read temperature - Read temperature from BME680\r\n");
 8006cf4:	4b16      	ldr	r3, [pc, #88]	@ (8006d50 <command_interface_show_help_usart4+0x68>)
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f7ff fd6a 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("read pressure   - Read pressure from BME680\r\n");
 8006cfc:	4b15      	ldr	r3, [pc, #84]	@ (8006d54 <command_interface_show_help_usart4+0x6c>)
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f7ff fd66 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("read humidity   - Read humidity from BME680\r\n");
 8006d04:	4b14      	ldr	r3, [pc, #80]	@ (8006d58 <command_interface_show_help_usart4+0x70>)
 8006d06:	0018      	movs	r0, r3
 8006d08:	f7ff fd62 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("test sensor     - Test BME680 sensor\r\n");
 8006d0c:	4b13      	ldr	r3, [pc, #76]	@ (8006d5c <command_interface_show_help_usart4+0x74>)
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f7ff fd5e 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("sum <num1> <num2> - Add two numbers\r\n");
 8006d14:	4b12      	ldr	r3, [pc, #72]	@ (8006d60 <command_interface_show_help_usart4+0x78>)
 8006d16:	0018      	movs	r0, r3
 8006d18:	f7ff fd5a 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("sub <num1> <num2> - Subtract num2 from num1\r\n");
 8006d1c:	4b11      	ldr	r3, [pc, #68]	@ (8006d64 <command_interface_show_help_usart4+0x7c>)
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f7ff fd56 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("mul <num1> <num2> - Multiply two numbers\r\n");
 8006d24:	4b10      	ldr	r3, [pc, #64]	@ (8006d68 <command_interface_show_help_usart4+0x80>)
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7ff fd52 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("div <num1> <num2> - Divide num1 by num2\r\n");
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d6c <command_interface_show_help_usart4+0x84>)
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f7ff fd4e 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("help            - Show this help menu\r\n");
 8006d34:	4b0e      	ldr	r3, [pc, #56]	@ (8006d70 <command_interface_show_help_usart4+0x88>)
 8006d36:	0018      	movs	r0, r3
 8006d38:	f7ff fd4a 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("========================\r\n");
 8006d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <command_interface_show_help_usart4+0x8c>)
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f7ff fd46 	bl	80067d0 <command_interface_send_response_usart4>
}
 8006d44:	46c0      	nop			@ (mov r8, r8)
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	0800e764 	.word	0x0800e764
 8006d50:	0800e304 	.word	0x0800e304
 8006d54:	0800e338 	.word	0x0800e338
 8006d58:	0800e368 	.word	0x0800e368
 8006d5c:	0800e398 	.word	0x0800e398
 8006d60:	0800e3c0 	.word	0x0800e3c0
 8006d64:	0800e3e8 	.word	0x0800e3e8
 8006d68:	0800e418 	.word	0x0800e418
 8006d6c:	0800e444 	.word	0x0800e444
 8006d70:	0800e470 	.word	0x0800e470
 8006d74:	0800e498 	.word	0x0800e498

08006d78 <command_interface_handle_command_usart4>:

// Handle incoming commands for USART4
void command_interface_handle_command_usart4(char* command)
{
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b0c3      	sub	sp, #268	@ 0x10c
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
    char response[256];
    
    // Check if system is started
    if (!system_started_usart4) {
 8006d80:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb0 <command_interface_handle_command_usart4+0x138>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d118      	bne.n	8006dba <command_interface_handle_command_usart4+0x42>
        if (strcmp(command, "start") == 0) {
 8006d88:	4a4a      	ldr	r2, [pc, #296]	@ (8006eb4 <command_interface_handle_command_usart4+0x13c>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0011      	movs	r1, r2
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7f9 f9b8 	bl	8000104 <strcmp>
 8006d94:	1e03      	subs	r3, r0, #0
 8006d96:	d10b      	bne.n	8006db0 <command_interface_handle_command_usart4+0x38>
            system_started_usart4 = 1;
 8006d98:	4b45      	ldr	r3, [pc, #276]	@ (8006eb0 <command_interface_handle_command_usart4+0x138>)
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]
            command_interface_send_response_usart4("System started! Type 'help' for available commands.\r\n");
 8006d9e:	4b46      	ldr	r3, [pc, #280]	@ (8006eb8 <command_interface_handle_command_usart4+0x140>)
 8006da0:	0018      	movs	r0, r3
 8006da2:	f7ff fd15 	bl	80067d0 <command_interface_send_response_usart4>
            command_interface_send_response_usart4("> ");
 8006da6:	4b45      	ldr	r3, [pc, #276]	@ (8006ebc <command_interface_handle_command_usart4+0x144>)
 8006da8:	0018      	movs	r0, r3
 8006daa:	f7ff fd11 	bl	80067d0 <command_interface_send_response_usart4>
            return;
 8006dae:	e07b      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
        } else {
            command_interface_send_response_usart4("Please type 'start' to begin.\r\n");
 8006db0:	4b43      	ldr	r3, [pc, #268]	@ (8006ec0 <command_interface_handle_command_usart4+0x148>)
 8006db2:	0018      	movs	r0, r3
 8006db4:	f7ff fd0c 	bl	80067d0 <command_interface_send_response_usart4>
            return;
 8006db8:	e076      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
        }
    }
    
    // Parse commands
    if (strcmp(command, "read temperature") == 0) {
 8006dba:	4a42      	ldr	r2, [pc, #264]	@ (8006ec4 <command_interface_handle_command_usart4+0x14c>)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	0011      	movs	r1, r2
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f7f9 f99f 	bl	8000104 <strcmp>
 8006dc6:	1e03      	subs	r3, r0, #0
 8006dc8:	d102      	bne.n	8006dd0 <command_interface_handle_command_usart4+0x58>
        cmd_read_temperature_usart4();
 8006dca:	f000 f88f 	bl	8006eec <cmd_read_temperature_usart4>
 8006dce:	e06b      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
    }
    else if (strcmp(command, "read pressure") == 0) {
 8006dd0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ec8 <command_interface_handle_command_usart4+0x150>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0011      	movs	r1, r2
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f7f9 f994 	bl	8000104 <strcmp>
 8006ddc:	1e03      	subs	r3, r0, #0
 8006dde:	d102      	bne.n	8006de6 <command_interface_handle_command_usart4+0x6e>
        cmd_read_pressure_usart4();
 8006de0:	f000 f8c0 	bl	8006f64 <cmd_read_pressure_usart4>
 8006de4:	e060      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
    }
    else if (strcmp(command, "read humidity") == 0) {
 8006de6:	4a39      	ldr	r2, [pc, #228]	@ (8006ecc <command_interface_handle_command_usart4+0x154>)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	0011      	movs	r1, r2
 8006dec:	0018      	movs	r0, r3
 8006dee:	f7f9 f989 	bl	8000104 <strcmp>
 8006df2:	1e03      	subs	r3, r0, #0
 8006df4:	d102      	bne.n	8006dfc <command_interface_handle_command_usart4+0x84>
        cmd_read_humidity_usart4();
 8006df6:	f000 f8f1 	bl	8006fdc <cmd_read_humidity_usart4>
 8006dfa:	e055      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
    }
    else if (strcmp(command, "test sensor") == 0) {
 8006dfc:	4a34      	ldr	r2, [pc, #208]	@ (8006ed0 <command_interface_handle_command_usart4+0x158>)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	0011      	movs	r1, r2
 8006e02:	0018      	movs	r0, r3
 8006e04:	f7f9 f97e 	bl	8000104 <strcmp>
 8006e08:	1e03      	subs	r3, r0, #0
 8006e0a:	d102      	bne.n	8006e12 <command_interface_handle_command_usart4+0x9a>
        cmd_test_sensor_usart4();
 8006e0c:	f000 f922 	bl	8007054 <cmd_test_sensor_usart4>
 8006e10:	e04a      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
    }
    else if (strncmp(command, "sum ", 4) == 0) {
 8006e12:	4930      	ldr	r1, [pc, #192]	@ (8006ed4 <command_interface_handle_command_usart4+0x15c>)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2204      	movs	r2, #4
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f005 f80b 	bl	800be34 <strncmp>
 8006e1e:	1e03      	subs	r3, r0, #0
 8006e20:	d104      	bne.n	8006e2c <command_interface_handle_command_usart4+0xb4>
        cmd_math_operation_usart4(command);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	0018      	movs	r0, r3
 8006e26:	f000 f975 	bl	8007114 <cmd_math_operation_usart4>
 8006e2a:	e03d      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
    }
    else if (strncmp(command, "sub ", 4) == 0) {
 8006e2c:	492a      	ldr	r1, [pc, #168]	@ (8006ed8 <command_interface_handle_command_usart4+0x160>)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2204      	movs	r2, #4
 8006e32:	0018      	movs	r0, r3
 8006e34:	f004 fffe 	bl	800be34 <strncmp>
 8006e38:	1e03      	subs	r3, r0, #0
 8006e3a:	d104      	bne.n	8006e46 <command_interface_handle_command_usart4+0xce>
        cmd_math_operation_usart4(command);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f000 f968 	bl	8007114 <cmd_math_operation_usart4>
 8006e44:	e030      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
    }
    else if (strncmp(command, "mul ", 4) == 0) {
 8006e46:	4925      	ldr	r1, [pc, #148]	@ (8006edc <command_interface_handle_command_usart4+0x164>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f004 fff1 	bl	800be34 <strncmp>
 8006e52:	1e03      	subs	r3, r0, #0
 8006e54:	d104      	bne.n	8006e60 <command_interface_handle_command_usart4+0xe8>
        cmd_math_operation_usart4(command);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 f95b 	bl	8007114 <cmd_math_operation_usart4>
 8006e5e:	e023      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
    }
    else if (strncmp(command, "div ", 4) == 0) {
 8006e60:	491f      	ldr	r1, [pc, #124]	@ (8006ee0 <command_interface_handle_command_usart4+0x168>)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2204      	movs	r2, #4
 8006e66:	0018      	movs	r0, r3
 8006e68:	f004 ffe4 	bl	800be34 <strncmp>
 8006e6c:	1e03      	subs	r3, r0, #0
 8006e6e:	d104      	bne.n	8006e7a <command_interface_handle_command_usart4+0x102>
        cmd_math_operation_usart4(command);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	0018      	movs	r0, r3
 8006e74:	f000 f94e 	bl	8007114 <cmd_math_operation_usart4>
 8006e78:	e016      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
    }
    else if (strcmp(command, "help") == 0) {
 8006e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ee4 <command_interface_handle_command_usart4+0x16c>)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	0011      	movs	r1, r2
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7f9 f93f 	bl	8000104 <strcmp>
 8006e86:	1e03      	subs	r3, r0, #0
 8006e88:	d102      	bne.n	8006e90 <command_interface_handle_command_usart4+0x118>
        command_interface_show_help_usart4();
 8006e8a:	f7ff ff2d 	bl	8006ce8 <command_interface_show_help_usart4>
 8006e8e:	e00b      	b.n	8006ea8 <command_interface_handle_command_usart4+0x130>
    }
    else {
        snprintf(response, sizeof(response), "Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a15      	ldr	r2, [pc, #84]	@ (8006ee8 <command_interface_handle_command_usart4+0x170>)
 8006e94:	2180      	movs	r1, #128	@ 0x80
 8006e96:	0049      	lsls	r1, r1, #1
 8006e98:	2408      	movs	r4, #8
 8006e9a:	1938      	adds	r0, r7, r4
 8006e9c:	f004 ff40 	bl	800bd20 <sniprintf>
        command_interface_send_response_usart4(response);
 8006ea0:	193b      	adds	r3, r7, r4
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7ff fc94 	bl	80067d0 <command_interface_send_response_usart4>
    }
}
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b043      	add	sp, #268	@ 0x10c
 8006eac:	bd90      	pop	{r4, r7, pc}
 8006eae:	46c0      	nop			@ (mov r8, r8)
 8006eb0:	200002c3 	.word	0x200002c3
 8006eb4:	0800e4b4 	.word	0x0800e4b4
 8006eb8:	0800e4bc 	.word	0x0800e4bc
 8006ebc:	0800e2e0 	.word	0x0800e2e0
 8006ec0:	0800e4f4 	.word	0x0800e4f4
 8006ec4:	0800e514 	.word	0x0800e514
 8006ec8:	0800e528 	.word	0x0800e528
 8006ecc:	0800e538 	.word	0x0800e538
 8006ed0:	0800e548 	.word	0x0800e548
 8006ed4:	0800e554 	.word	0x0800e554
 8006ed8:	0800e55c 	.word	0x0800e55c
 8006edc:	0800e564 	.word	0x0800e564
 8006ee0:	0800e56c 	.word	0x0800e56c
 8006ee4:	0800e574 	.word	0x0800e574
 8006ee8:	0800e57c 	.word	0x0800e57c

08006eec <cmd_read_temperature_usart4>:

// USART4 Command handlers

// Command handler for reading temperature (USART4)
void cmd_read_temperature_usart4(void)
{
 8006eec:	b590      	push	{r4, r7, lr}
 8006eee:	b0a9      	sub	sp, #164	@ 0xa4
 8006ef0:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 8006ef2:	f7fc fed3 	bl	8003c9c <bme680_check_sensor_presence>
 8006ef6:	1e03      	subs	r3, r0, #0
 8006ef8:	d00a      	beq.n	8006f10 <cmd_read_temperature_usart4+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 8006efa:	4a17      	ldr	r2, [pc, #92]	@ (8006f58 <cmd_read_temperature_usart4+0x6c>)
 8006efc:	003b      	movs	r3, r7
 8006efe:	2180      	movs	r1, #128	@ 0x80
 8006f00:	0018      	movs	r0, r3
 8006f02:	f004 ff0d 	bl	800bd20 <sniprintf>
        command_interface_send_response_usart4(response);
 8006f06:	003b      	movs	r3, r7
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f7ff fc61 	bl	80067d0 <command_interface_send_response_usart4>
 8006f0e:	e020      	b.n	8006f52 <cmd_read_temperature_usart4+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8006f10:	2480      	movs	r4, #128	@ 0x80
 8006f12:	193b      	adds	r3, r7, r4
 8006f14:	0018      	movs	r0, r3
 8006f16:	f7fc fe23 	bl	8003b60 <bme680_read_sensor_data>
 8006f1a:	1e03      	subs	r3, r0, #0
 8006f1c:	d10f      	bne.n	8006f3e <cmd_read_temperature_usart4+0x52>
        snprintf(response, sizeof(response), "Temperature: %.2f°C\r\n", sensor_data.temperature);
 8006f1e:	193b      	adds	r3, r7, r4
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	1c18      	adds	r0, r3, #0
 8006f24:	f7fc fc26 	bl	8003774 <__aeabi_f2d>
 8006f28:	0002      	movs	r2, r0
 8006f2a:	000b      	movs	r3, r1
 8006f2c:	490b      	ldr	r1, [pc, #44]	@ (8006f5c <cmd_read_temperature_usart4+0x70>)
 8006f2e:	0038      	movs	r0, r7
 8006f30:	9200      	str	r2, [sp, #0]
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	000a      	movs	r2, r1
 8006f36:	2180      	movs	r1, #128	@ 0x80
 8006f38:	f004 fef2 	bl	800bd20 <sniprintf>
 8006f3c:	e005      	b.n	8006f4a <cmd_read_temperature_usart4+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading temperature from BME680\r\n");
 8006f3e:	4a08      	ldr	r2, [pc, #32]	@ (8006f60 <cmd_read_temperature_usart4+0x74>)
 8006f40:	003b      	movs	r3, r7
 8006f42:	2180      	movs	r1, #128	@ 0x80
 8006f44:	0018      	movs	r0, r3
 8006f46:	f004 feeb 	bl	800bd20 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 8006f4a:	003b      	movs	r3, r7
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f7ff fc3f 	bl	80067d0 <command_interface_send_response_usart4>
}
 8006f52:	46bd      	mov	sp, r7
 8006f54:	b027      	add	sp, #156	@ 0x9c
 8006f56:	bd90      	pop	{r4, r7, pc}
 8006f58:	0800e5b8 	.word	0x0800e5b8
 8006f5c:	0800e5e0 	.word	0x0800e5e0
 8006f60:	0800e5f8 	.word	0x0800e5f8

08006f64 <cmd_read_pressure_usart4>:

// Command handler for reading pressure (USART4)
void cmd_read_pressure_usart4(void)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b0a9      	sub	sp, #164	@ 0xa4
 8006f68:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 8006f6a:	f7fc fe97 	bl	8003c9c <bme680_check_sensor_presence>
 8006f6e:	1e03      	subs	r3, r0, #0
 8006f70:	d00a      	beq.n	8006f88 <cmd_read_pressure_usart4+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 8006f72:	4a17      	ldr	r2, [pc, #92]	@ (8006fd0 <cmd_read_pressure_usart4+0x6c>)
 8006f74:	003b      	movs	r3, r7
 8006f76:	2180      	movs	r1, #128	@ 0x80
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f004 fed1 	bl	800bd20 <sniprintf>
        command_interface_send_response_usart4(response);
 8006f7e:	003b      	movs	r3, r7
 8006f80:	0018      	movs	r0, r3
 8006f82:	f7ff fc25 	bl	80067d0 <command_interface_send_response_usart4>
 8006f86:	e020      	b.n	8006fca <cmd_read_pressure_usart4+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8006f88:	2480      	movs	r4, #128	@ 0x80
 8006f8a:	193b      	adds	r3, r7, r4
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f7fc fde7 	bl	8003b60 <bme680_read_sensor_data>
 8006f92:	1e03      	subs	r3, r0, #0
 8006f94:	d10f      	bne.n	8006fb6 <cmd_read_pressure_usart4+0x52>
        snprintf(response, sizeof(response), "Pressure: %.2f Pa\r\n", sensor_data.pressure);
 8006f96:	193b      	adds	r3, r7, r4
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	1c18      	adds	r0, r3, #0
 8006f9c:	f7fc fbea 	bl	8003774 <__aeabi_f2d>
 8006fa0:	0002      	movs	r2, r0
 8006fa2:	000b      	movs	r3, r1
 8006fa4:	490b      	ldr	r1, [pc, #44]	@ (8006fd4 <cmd_read_pressure_usart4+0x70>)
 8006fa6:	0038      	movs	r0, r7
 8006fa8:	9200      	str	r2, [sp, #0]
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	000a      	movs	r2, r1
 8006fae:	2180      	movs	r1, #128	@ 0x80
 8006fb0:	f004 feb6 	bl	800bd20 <sniprintf>
 8006fb4:	e005      	b.n	8006fc2 <cmd_read_pressure_usart4+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading pressure from BME680\r\n");
 8006fb6:	4a08      	ldr	r2, [pc, #32]	@ (8006fd8 <cmd_read_pressure_usart4+0x74>)
 8006fb8:	003b      	movs	r3, r7
 8006fba:	2180      	movs	r1, #128	@ 0x80
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f004 feaf 	bl	800bd20 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 8006fc2:	003b      	movs	r3, r7
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f7ff fc03 	bl	80067d0 <command_interface_send_response_usart4>
}
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	b027      	add	sp, #156	@ 0x9c
 8006fce:	bd90      	pop	{r4, r7, pc}
 8006fd0:	0800e5b8 	.word	0x0800e5b8
 8006fd4:	0800e620 	.word	0x0800e620
 8006fd8:	0800e634 	.word	0x0800e634

08006fdc <cmd_read_humidity_usart4>:

// Command handler for reading humidity (USART4)
void cmd_read_humidity_usart4(void)
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b0a9      	sub	sp, #164	@ 0xa4
 8006fe0:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 8006fe2:	f7fc fe5b 	bl	8003c9c <bme680_check_sensor_presence>
 8006fe6:	1e03      	subs	r3, r0, #0
 8006fe8:	d00a      	beq.n	8007000 <cmd_read_humidity_usart4+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 8006fea:	4a17      	ldr	r2, [pc, #92]	@ (8007048 <cmd_read_humidity_usart4+0x6c>)
 8006fec:	003b      	movs	r3, r7
 8006fee:	2180      	movs	r1, #128	@ 0x80
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f004 fe95 	bl	800bd20 <sniprintf>
        command_interface_send_response_usart4(response);
 8006ff6:	003b      	movs	r3, r7
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f7ff fbe9 	bl	80067d0 <command_interface_send_response_usart4>
 8006ffe:	e020      	b.n	8007042 <cmd_read_humidity_usart4+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8007000:	2480      	movs	r4, #128	@ 0x80
 8007002:	193b      	adds	r3, r7, r4
 8007004:	0018      	movs	r0, r3
 8007006:	f7fc fdab 	bl	8003b60 <bme680_read_sensor_data>
 800700a:	1e03      	subs	r3, r0, #0
 800700c:	d10f      	bne.n	800702e <cmd_read_humidity_usart4+0x52>
        snprintf(response, sizeof(response), "Humidity: %.2f%%\r\n", sensor_data.humidity);
 800700e:	193b      	adds	r3, r7, r4
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	1c18      	adds	r0, r3, #0
 8007014:	f7fc fbae 	bl	8003774 <__aeabi_f2d>
 8007018:	0002      	movs	r2, r0
 800701a:	000b      	movs	r3, r1
 800701c:	490b      	ldr	r1, [pc, #44]	@ (800704c <cmd_read_humidity_usart4+0x70>)
 800701e:	0038      	movs	r0, r7
 8007020:	9200      	str	r2, [sp, #0]
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	000a      	movs	r2, r1
 8007026:	2180      	movs	r1, #128	@ 0x80
 8007028:	f004 fe7a 	bl	800bd20 <sniprintf>
 800702c:	e005      	b.n	800703a <cmd_read_humidity_usart4+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading humidity from BME680\r\n");
 800702e:	4a08      	ldr	r2, [pc, #32]	@ (8007050 <cmd_read_humidity_usart4+0x74>)
 8007030:	003b      	movs	r3, r7
 8007032:	2180      	movs	r1, #128	@ 0x80
 8007034:	0018      	movs	r0, r3
 8007036:	f004 fe73 	bl	800bd20 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 800703a:	003b      	movs	r3, r7
 800703c:	0018      	movs	r0, r3
 800703e:	f7ff fbc7 	bl	80067d0 <command_interface_send_response_usart4>
}
 8007042:	46bd      	mov	sp, r7
 8007044:	b027      	add	sp, #156	@ 0x9c
 8007046:	bd90      	pop	{r4, r7, pc}
 8007048:	0800e5b8 	.word	0x0800e5b8
 800704c:	0800e65c 	.word	0x0800e65c
 8007050:	0800e670 	.word	0x0800e670

08007054 <cmd_test_sensor_usart4>:

// Command handler for testing sensor (USART4)
void cmd_test_sensor_usart4(void)
{
 8007054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007056:	b0cf      	sub	sp, #316	@ 0x13c
 8007058:	af06      	add	r7, sp, #24
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800705a:	f7fc fe1f 	bl	8003c9c <bme680_check_sensor_presence>
 800705e:	1e03      	subs	r3, r0, #0
 8007060:	d004      	beq.n	800706c <cmd_test_sensor_usart4+0x18>
        command_interface_send_response_usart4("Error: BME680 sensor not available\r\n");
 8007062:	4b28      	ldr	r3, [pc, #160]	@ (8007104 <cmd_test_sensor_usart4+0xb0>)
 8007064:	0018      	movs	r0, r3
 8007066:	f7ff fbb3 	bl	80067d0 <command_interface_send_response_usart4>
 800706a:	e047      	b.n	80070fc <cmd_test_sensor_usart4+0xa8>
    
    // Create a custom test function for USART4
    struct bme68x_data sensor_data;
    char test_msg[256];
    
    snprintf(test_msg, sizeof(test_msg), "Testing BME680 sensor (USART4)...\r\n");
 800706c:	4a26      	ldr	r2, [pc, #152]	@ (8007108 <cmd_test_sensor_usart4+0xb4>)
 800706e:	2380      	movs	r3, #128	@ 0x80
 8007070:	0059      	lsls	r1, r3, #1
 8007072:	2408      	movs	r4, #8
 8007074:	193b      	adds	r3, r7, r4
 8007076:	0018      	movs	r0, r3
 8007078:	f004 fe52 	bl	800bd20 <sniprintf>
    command_interface_send_response_usart4(test_msg);
 800707c:	193b      	adds	r3, r7, r4
 800707e:	0018      	movs	r0, r3
 8007080:	f7ff fba6 	bl	80067d0 <command_interface_send_response_usart4>
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8007084:	2484      	movs	r4, #132	@ 0x84
 8007086:	0064      	lsls	r4, r4, #1
 8007088:	193b      	adds	r3, r7, r4
 800708a:	0018      	movs	r0, r3
 800708c:	f7fc fd68 	bl	8003b60 <bme680_read_sensor_data>
 8007090:	1e03      	subs	r3, r0, #0
 8007092:	d126      	bne.n	80070e2 <cmd_test_sensor_usart4+0x8e>
        snprintf(test_msg, sizeof(test_msg), 
                 "Test successful!\r\nTemperature: %.2f°C\r\nPressure: %.2f Pa\r\nHumidity: %.2f%%\r\n",
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 8007094:	0026      	movs	r6, r4
 8007096:	193b      	adds	r3, r7, r4
 8007098:	689b      	ldr	r3, [r3, #8]
        snprintf(test_msg, sizeof(test_msg), 
 800709a:	1c18      	adds	r0, r3, #0
 800709c:	f7fc fb6a 	bl	8003774 <__aeabi_f2d>
 80070a0:	0004      	movs	r4, r0
 80070a2:	000d      	movs	r5, r1
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80070a4:	19bb      	adds	r3, r7, r6
 80070a6:	68db      	ldr	r3, [r3, #12]
        snprintf(test_msg, sizeof(test_msg), 
 80070a8:	1c18      	adds	r0, r3, #0
 80070aa:	f7fc fb63 	bl	8003774 <__aeabi_f2d>
 80070ae:	6038      	str	r0, [r7, #0]
 80070b0:	6079      	str	r1, [r7, #4]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80070b2:	19bb      	adds	r3, r7, r6
 80070b4:	691b      	ldr	r3, [r3, #16]
        snprintf(test_msg, sizeof(test_msg), 
 80070b6:	1c18      	adds	r0, r3, #0
 80070b8:	f7fc fb5c 	bl	8003774 <__aeabi_f2d>
 80070bc:	0002      	movs	r2, r0
 80070be:	000b      	movs	r3, r1
 80070c0:	4e12      	ldr	r6, [pc, #72]	@ (800710c <cmd_test_sensor_usart4+0xb8>)
 80070c2:	2180      	movs	r1, #128	@ 0x80
 80070c4:	0049      	lsls	r1, r1, #1
 80070c6:	2008      	movs	r0, #8
 80070c8:	1838      	adds	r0, r7, r0
 80070ca:	9204      	str	r2, [sp, #16]
 80070cc:	9305      	str	r3, [sp, #20]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	9202      	str	r2, [sp, #8]
 80070d4:	9303      	str	r3, [sp, #12]
 80070d6:	9400      	str	r4, [sp, #0]
 80070d8:	9501      	str	r5, [sp, #4]
 80070da:	0032      	movs	r2, r6
 80070dc:	f004 fe20 	bl	800bd20 <sniprintf>
 80070e0:	e007      	b.n	80070f2 <cmd_test_sensor_usart4+0x9e>
    } else {
        snprintf(test_msg, sizeof(test_msg), "Test failed! Error reading sensor data.\r\n");
 80070e2:	4a0b      	ldr	r2, [pc, #44]	@ (8007110 <cmd_test_sensor_usart4+0xbc>)
 80070e4:	2380      	movs	r3, #128	@ 0x80
 80070e6:	0059      	lsls	r1, r3, #1
 80070e8:	2308      	movs	r3, #8
 80070ea:	18fb      	adds	r3, r7, r3
 80070ec:	0018      	movs	r0, r3
 80070ee:	f004 fe17 	bl	800bd20 <sniprintf>
    }
    
    command_interface_send_response_usart4(test_msg);
 80070f2:	2308      	movs	r3, #8
 80070f4:	18fb      	adds	r3, r7, r3
 80070f6:	0018      	movs	r0, r3
 80070f8:	f7ff fb6a 	bl	80067d0 <command_interface_send_response_usart4>
}
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b049      	add	sp, #292	@ 0x124
 8007100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007102:	46c0      	nop			@ (mov r8, r8)
 8007104:	0800e5b8 	.word	0x0800e5b8
 8007108:	0800e78c 	.word	0x0800e78c
 800710c:	0800e7b0 	.word	0x0800e7b0
 8007110:	0800e800 	.word	0x0800e800

08007114 <cmd_math_operation_usart4>:

// Command handler for mathematical operations (USART4)
void cmd_math_operation_usart4(char* command)
{
 8007114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007116:	b0b1      	sub	sp, #196	@ 0xc4
 8007118:	af06      	add	r7, sp, #24
 800711a:	60f8      	str	r0, [r7, #12]
    char* operation = strtok(command, " ");
 800711c:	4ac9      	ldr	r2, [pc, #804]	@ (8007444 <cmd_math_operation_usart4+0x330>)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	0011      	movs	r1, r2
 8007122:	0018      	movs	r0, r3
 8007124:	f004 fe98 	bl	800be58 <strtok>
 8007128:	0003      	movs	r3, r0
 800712a:	229c      	movs	r2, #156	@ 0x9c
 800712c:	2508      	movs	r5, #8
 800712e:	1952      	adds	r2, r2, r5
 8007130:	19d2      	adds	r2, r2, r7
 8007132:	6013      	str	r3, [r2, #0]
    char* num1_str = strtok(NULL, " ");
 8007134:	4bc3      	ldr	r3, [pc, #780]	@ (8007444 <cmd_math_operation_usart4+0x330>)
 8007136:	0019      	movs	r1, r3
 8007138:	2000      	movs	r0, #0
 800713a:	f004 fe8d 	bl	800be58 <strtok>
 800713e:	0003      	movs	r3, r0
 8007140:	2498      	movs	r4, #152	@ 0x98
 8007142:	1962      	adds	r2, r4, r5
 8007144:	19d2      	adds	r2, r2, r7
 8007146:	6013      	str	r3, [r2, #0]
    char* num2_str = strtok(NULL, " ");
 8007148:	4bbe      	ldr	r3, [pc, #760]	@ (8007444 <cmd_math_operation_usart4+0x330>)
 800714a:	0019      	movs	r1, r3
 800714c:	2000      	movs	r0, #0
 800714e:	f004 fe83 	bl	800be58 <strtok>
 8007152:	0003      	movs	r3, r0
 8007154:	2294      	movs	r2, #148	@ 0x94
 8007156:	1951      	adds	r1, r2, r5
 8007158:	19c9      	adds	r1, r1, r7
 800715a:	600b      	str	r3, [r1, #0]
    char response[128];
    
    if (num1_str == NULL || num2_str == NULL) {
 800715c:	0029      	movs	r1, r5
 800715e:	1963      	adds	r3, r4, r5
 8007160:	19db      	adds	r3, r3, r7
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d004      	beq.n	8007172 <cmd_math_operation_usart4+0x5e>
 8007168:	1853      	adds	r3, r2, r1
 800716a:	19db      	adds	r3, r3, r7
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <cmd_math_operation_usart4+0x68>
        command_interface_send_response_usart4("Usage: <operation> <num1> <num2>\r\n");
 8007172:	4bb5      	ldr	r3, [pc, #724]	@ (8007448 <cmd_math_operation_usart4+0x334>)
 8007174:	0018      	movs	r0, r3
 8007176:	f7ff fb2b 	bl	80067d0 <command_interface_send_response_usart4>
 800717a:	e160      	b.n	800743e <cmd_math_operation_usart4+0x32a>
        return;
    }
    
    float num1 = atof(num1_str);
 800717c:	2398      	movs	r3, #152	@ 0x98
 800717e:	2508      	movs	r5, #8
 8007180:	195b      	adds	r3, r3, r5
 8007182:	19db      	adds	r3, r3, r7
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	0018      	movs	r0, r3
 8007188:	f003 fedc 	bl	800af44 <atof>
 800718c:	0002      	movs	r2, r0
 800718e:	000b      	movs	r3, r1
 8007190:	0010      	movs	r0, r2
 8007192:	0019      	movs	r1, r3
 8007194:	f7fc fb36 	bl	8003804 <__aeabi_d2f>
 8007198:	1c03      	adds	r3, r0, #0
 800719a:	2490      	movs	r4, #144	@ 0x90
 800719c:	1962      	adds	r2, r4, r5
 800719e:	19d2      	adds	r2, r2, r7
 80071a0:	6013      	str	r3, [r2, #0]
    float num2 = atof(num2_str);
 80071a2:	2394      	movs	r3, #148	@ 0x94
 80071a4:	195b      	adds	r3, r3, r5
 80071a6:	19db      	adds	r3, r3, r7
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	0018      	movs	r0, r3
 80071ac:	f003 feca 	bl	800af44 <atof>
 80071b0:	0002      	movs	r2, r0
 80071b2:	000b      	movs	r3, r1
 80071b4:	0010      	movs	r0, r2
 80071b6:	0019      	movs	r1, r3
 80071b8:	f7fc fb24 	bl	8003804 <__aeabi_d2f>
 80071bc:	1c03      	adds	r3, r0, #0
 80071be:	268c      	movs	r6, #140	@ 0x8c
 80071c0:	1972      	adds	r2, r6, r5
 80071c2:	19d2      	adds	r2, r2, r7
 80071c4:	6013      	str	r3, [r2, #0]
    float result;
    
    if (strcmp(operation, "sum") == 0) {
 80071c6:	4aa1      	ldr	r2, [pc, #644]	@ (800744c <cmd_math_operation_usart4+0x338>)
 80071c8:	239c      	movs	r3, #156	@ 0x9c
 80071ca:	195b      	adds	r3, r3, r5
 80071cc:	19db      	adds	r3, r3, r7
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	0011      	movs	r1, r2
 80071d2:	0018      	movs	r0, r3
 80071d4:	f7f8 ff96 	bl	8000104 <strcmp>
 80071d8:	1e03      	subs	r3, r0, #0
 80071da:	d136      	bne.n	800724a <cmd_math_operation_usart4+0x136>
        result = num1 + num2;
 80071dc:	1973      	adds	r3, r6, r5
 80071de:	19db      	adds	r3, r3, r7
 80071e0:	6819      	ldr	r1, [r3, #0]
 80071e2:	1963      	adds	r3, r4, r5
 80071e4:	19db      	adds	r3, r3, r7
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	f7f9 fb12 	bl	8000810 <__aeabi_fadd>
 80071ec:	1c03      	adds	r3, r0, #0
 80071ee:	2288      	movs	r2, #136	@ 0x88
 80071f0:	1952      	adds	r2, r2, r5
 80071f2:	19d1      	adds	r1, r2, r7
 80071f4:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f + %.2f = %.2f\r\n", num1, num2, result);
 80071f6:	1963      	adds	r3, r4, r5
 80071f8:	19d9      	adds	r1, r3, r7
 80071fa:	6808      	ldr	r0, [r1, #0]
 80071fc:	f7fc faba 	bl	8003774 <__aeabi_f2d>
 8007200:	0004      	movs	r4, r0
 8007202:	000d      	movs	r5, r1
 8007204:	2208      	movs	r2, #8
 8007206:	18b3      	adds	r3, r6, r2
 8007208:	19d9      	adds	r1, r3, r7
 800720a:	6808      	ldr	r0, [r1, #0]
 800720c:	f7fc fab2 	bl	8003774 <__aeabi_f2d>
 8007210:	6038      	str	r0, [r7, #0]
 8007212:	6079      	str	r1, [r7, #4]
 8007214:	2388      	movs	r3, #136	@ 0x88
 8007216:	2208      	movs	r2, #8
 8007218:	189b      	adds	r3, r3, r2
 800721a:	19db      	adds	r3, r3, r7
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	f7fc faa9 	bl	8003774 <__aeabi_f2d>
 8007222:	0002      	movs	r2, r0
 8007224:	000b      	movs	r3, r1
 8007226:	498a      	ldr	r1, [pc, #552]	@ (8007450 <cmd_math_operation_usart4+0x33c>)
 8007228:	2608      	movs	r6, #8
 800722a:	2008      	movs	r0, #8
 800722c:	1830      	adds	r0, r6, r0
 800722e:	19c0      	adds	r0, r0, r7
 8007230:	9204      	str	r2, [sp, #16]
 8007232:	9305      	str	r3, [sp, #20]
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	9202      	str	r2, [sp, #8]
 800723a:	9303      	str	r3, [sp, #12]
 800723c:	9400      	str	r4, [sp, #0]
 800723e:	9501      	str	r5, [sp, #4]
 8007240:	000a      	movs	r2, r1
 8007242:	2180      	movs	r1, #128	@ 0x80
 8007244:	f004 fd6c 	bl	800bd20 <sniprintf>
 8007248:	e0f2      	b.n	8007430 <cmd_math_operation_usart4+0x31c>
    }
    else if (strcmp(operation, "sub") == 0) {
 800724a:	4a82      	ldr	r2, [pc, #520]	@ (8007454 <cmd_math_operation_usart4+0x340>)
 800724c:	239c      	movs	r3, #156	@ 0x9c
 800724e:	2408      	movs	r4, #8
 8007250:	191b      	adds	r3, r3, r4
 8007252:	19db      	adds	r3, r3, r7
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	0011      	movs	r1, r2
 8007258:	0018      	movs	r0, r3
 800725a:	f7f8 ff53 	bl	8000104 <strcmp>
 800725e:	1e03      	subs	r3, r0, #0
 8007260:	d13a      	bne.n	80072d8 <cmd_math_operation_usart4+0x1c4>
        result = num1 - num2;
 8007262:	268c      	movs	r6, #140	@ 0x8c
 8007264:	0025      	movs	r5, r4
 8007266:	1973      	adds	r3, r6, r5
 8007268:	19db      	adds	r3, r3, r7
 800726a:	6819      	ldr	r1, [r3, #0]
 800726c:	2490      	movs	r4, #144	@ 0x90
 800726e:	1963      	adds	r3, r4, r5
 8007270:	19db      	adds	r3, r3, r7
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	f7f9 ffe6 	bl	8001244 <__aeabi_fsub>
 8007278:	1c03      	adds	r3, r0, #0
 800727a:	2288      	movs	r2, #136	@ 0x88
 800727c:	0028      	movs	r0, r5
 800727e:	1812      	adds	r2, r2, r0
 8007280:	19d1      	adds	r1, r2, r7
 8007282:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f - %.2f = %.2f\r\n", num1, num2, result);
 8007284:	1823      	adds	r3, r4, r0
 8007286:	19d9      	adds	r1, r3, r7
 8007288:	6808      	ldr	r0, [r1, #0]
 800728a:	f7fc fa73 	bl	8003774 <__aeabi_f2d>
 800728e:	0004      	movs	r4, r0
 8007290:	000d      	movs	r5, r1
 8007292:	2008      	movs	r0, #8
 8007294:	1833      	adds	r3, r6, r0
 8007296:	19d9      	adds	r1, r3, r7
 8007298:	6808      	ldr	r0, [r1, #0]
 800729a:	f7fc fa6b 	bl	8003774 <__aeabi_f2d>
 800729e:	6038      	str	r0, [r7, #0]
 80072a0:	6079      	str	r1, [r7, #4]
 80072a2:	2388      	movs	r3, #136	@ 0x88
 80072a4:	2008      	movs	r0, #8
 80072a6:	181b      	adds	r3, r3, r0
 80072a8:	19db      	adds	r3, r3, r7
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	f7fc fa62 	bl	8003774 <__aeabi_f2d>
 80072b0:	0002      	movs	r2, r0
 80072b2:	000b      	movs	r3, r1
 80072b4:	4968      	ldr	r1, [pc, #416]	@ (8007458 <cmd_math_operation_usart4+0x344>)
 80072b6:	2608      	movs	r6, #8
 80072b8:	2008      	movs	r0, #8
 80072ba:	1830      	adds	r0, r6, r0
 80072bc:	19c0      	adds	r0, r0, r7
 80072be:	9204      	str	r2, [sp, #16]
 80072c0:	9305      	str	r3, [sp, #20]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	9202      	str	r2, [sp, #8]
 80072c8:	9303      	str	r3, [sp, #12]
 80072ca:	9400      	str	r4, [sp, #0]
 80072cc:	9501      	str	r5, [sp, #4]
 80072ce:	000a      	movs	r2, r1
 80072d0:	2180      	movs	r1, #128	@ 0x80
 80072d2:	f004 fd25 	bl	800bd20 <sniprintf>
 80072d6:	e0ab      	b.n	8007430 <cmd_math_operation_usart4+0x31c>
    }
    else if (strcmp(operation, "mul") == 0) {
 80072d8:	4a60      	ldr	r2, [pc, #384]	@ (800745c <cmd_math_operation_usart4+0x348>)
 80072da:	239c      	movs	r3, #156	@ 0x9c
 80072dc:	2408      	movs	r4, #8
 80072de:	191b      	adds	r3, r3, r4
 80072e0:	19db      	adds	r3, r3, r7
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	0011      	movs	r1, r2
 80072e6:	0018      	movs	r0, r3
 80072e8:	f7f8 ff0c 	bl	8000104 <strcmp>
 80072ec:	1e03      	subs	r3, r0, #0
 80072ee:	d13a      	bne.n	8007366 <cmd_math_operation_usart4+0x252>
        result = num1 * num2;
 80072f0:	268c      	movs	r6, #140	@ 0x8c
 80072f2:	0025      	movs	r5, r4
 80072f4:	1973      	adds	r3, r6, r5
 80072f6:	19db      	adds	r3, r3, r7
 80072f8:	6819      	ldr	r1, [r3, #0]
 80072fa:	2490      	movs	r4, #144	@ 0x90
 80072fc:	1963      	adds	r3, r4, r5
 80072fe:	19db      	adds	r3, r3, r7
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	f7f9 fe45 	bl	8000f90 <__aeabi_fmul>
 8007306:	1c03      	adds	r3, r0, #0
 8007308:	2288      	movs	r2, #136	@ 0x88
 800730a:	0028      	movs	r0, r5
 800730c:	1812      	adds	r2, r2, r0
 800730e:	19d1      	adds	r1, r2, r7
 8007310:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f * %.2f = %.2f\r\n", num1, num2, result);
 8007312:	1823      	adds	r3, r4, r0
 8007314:	19d9      	adds	r1, r3, r7
 8007316:	6808      	ldr	r0, [r1, #0]
 8007318:	f7fc fa2c 	bl	8003774 <__aeabi_f2d>
 800731c:	0004      	movs	r4, r0
 800731e:	000d      	movs	r5, r1
 8007320:	2008      	movs	r0, #8
 8007322:	1833      	adds	r3, r6, r0
 8007324:	19d9      	adds	r1, r3, r7
 8007326:	6808      	ldr	r0, [r1, #0]
 8007328:	f7fc fa24 	bl	8003774 <__aeabi_f2d>
 800732c:	6038      	str	r0, [r7, #0]
 800732e:	6079      	str	r1, [r7, #4]
 8007330:	2388      	movs	r3, #136	@ 0x88
 8007332:	2008      	movs	r0, #8
 8007334:	181b      	adds	r3, r3, r0
 8007336:	19db      	adds	r3, r3, r7
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	f7fc fa1b 	bl	8003774 <__aeabi_f2d>
 800733e:	0002      	movs	r2, r0
 8007340:	000b      	movs	r3, r1
 8007342:	4947      	ldr	r1, [pc, #284]	@ (8007460 <cmd_math_operation_usart4+0x34c>)
 8007344:	2608      	movs	r6, #8
 8007346:	2008      	movs	r0, #8
 8007348:	1830      	adds	r0, r6, r0
 800734a:	19c0      	adds	r0, r0, r7
 800734c:	9204      	str	r2, [sp, #16]
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	9202      	str	r2, [sp, #8]
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	9400      	str	r4, [sp, #0]
 800735a:	9501      	str	r5, [sp, #4]
 800735c:	000a      	movs	r2, r1
 800735e:	2180      	movs	r1, #128	@ 0x80
 8007360:	f004 fcde 	bl	800bd20 <sniprintf>
 8007364:	e064      	b.n	8007430 <cmd_math_operation_usart4+0x31c>
    }
    else if (strcmp(operation, "div") == 0) {
 8007366:	4a3f      	ldr	r2, [pc, #252]	@ (8007464 <cmd_math_operation_usart4+0x350>)
 8007368:	239c      	movs	r3, #156	@ 0x9c
 800736a:	2408      	movs	r4, #8
 800736c:	191b      	adds	r3, r3, r4
 800736e:	19db      	adds	r3, r3, r7
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	0011      	movs	r1, r2
 8007374:	0018      	movs	r0, r3
 8007376:	f7f8 fec5 	bl	8000104 <strcmp>
 800737a:	1e03      	subs	r3, r0, #0
 800737c:	d14c      	bne.n	8007418 <cmd_math_operation_usart4+0x304>
        if (num2 != 0) {
 800737e:	2100      	movs	r1, #0
 8007380:	268c      	movs	r6, #140	@ 0x8c
 8007382:	1933      	adds	r3, r6, r4
 8007384:	19db      	adds	r3, r3, r7
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	f7f9 f8a2 	bl	80004d0 <__aeabi_fcmpeq>
 800738c:	1e03      	subs	r3, r0, #0
 800738e:	d139      	bne.n	8007404 <cmd_math_operation_usart4+0x2f0>
            result = num1 / num2;
 8007390:	0025      	movs	r5, r4
 8007392:	1933      	adds	r3, r6, r4
 8007394:	19db      	adds	r3, r3, r7
 8007396:	6819      	ldr	r1, [r3, #0]
 8007398:	2490      	movs	r4, #144	@ 0x90
 800739a:	1963      	adds	r3, r4, r5
 800739c:	19db      	adds	r3, r3, r7
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	f7f9 fc28 	bl	8000bf4 <__aeabi_fdiv>
 80073a4:	1c03      	adds	r3, r0, #0
 80073a6:	2288      	movs	r2, #136	@ 0x88
 80073a8:	0028      	movs	r0, r5
 80073aa:	1812      	adds	r2, r2, r0
 80073ac:	19d1      	adds	r1, r2, r7
 80073ae:	600b      	str	r3, [r1, #0]
            snprintf(response, sizeof(response), "%.2f / %.2f = %.2f\r\n", num1, num2, result);
 80073b0:	1823      	adds	r3, r4, r0
 80073b2:	19d9      	adds	r1, r3, r7
 80073b4:	6808      	ldr	r0, [r1, #0]
 80073b6:	f7fc f9dd 	bl	8003774 <__aeabi_f2d>
 80073ba:	0004      	movs	r4, r0
 80073bc:	000d      	movs	r5, r1
 80073be:	2008      	movs	r0, #8
 80073c0:	1833      	adds	r3, r6, r0
 80073c2:	19d9      	adds	r1, r3, r7
 80073c4:	6808      	ldr	r0, [r1, #0]
 80073c6:	f7fc f9d5 	bl	8003774 <__aeabi_f2d>
 80073ca:	6038      	str	r0, [r7, #0]
 80073cc:	6079      	str	r1, [r7, #4]
 80073ce:	2388      	movs	r3, #136	@ 0x88
 80073d0:	2008      	movs	r0, #8
 80073d2:	181b      	adds	r3, r3, r0
 80073d4:	19db      	adds	r3, r3, r7
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	f7fc f9cc 	bl	8003774 <__aeabi_f2d>
 80073dc:	0002      	movs	r2, r0
 80073de:	000b      	movs	r3, r1
 80073e0:	4921      	ldr	r1, [pc, #132]	@ (8007468 <cmd_math_operation_usart4+0x354>)
 80073e2:	2608      	movs	r6, #8
 80073e4:	2008      	movs	r0, #8
 80073e6:	1830      	adds	r0, r6, r0
 80073e8:	19c0      	adds	r0, r0, r7
 80073ea:	9204      	str	r2, [sp, #16]
 80073ec:	9305      	str	r3, [sp, #20]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	9202      	str	r2, [sp, #8]
 80073f4:	9303      	str	r3, [sp, #12]
 80073f6:	9400      	str	r4, [sp, #0]
 80073f8:	9501      	str	r5, [sp, #4]
 80073fa:	000a      	movs	r2, r1
 80073fc:	2180      	movs	r1, #128	@ 0x80
 80073fe:	f004 fc8f 	bl	800bd20 <sniprintf>
 8007402:	e015      	b.n	8007430 <cmd_math_operation_usart4+0x31c>
        } else {
            snprintf(response, sizeof(response), "Error: Division by zero\r\n");
 8007404:	4a19      	ldr	r2, [pc, #100]	@ (800746c <cmd_math_operation_usart4+0x358>)
 8007406:	2308      	movs	r3, #8
 8007408:	2108      	movs	r1, #8
 800740a:	185b      	adds	r3, r3, r1
 800740c:	19db      	adds	r3, r3, r7
 800740e:	2180      	movs	r1, #128	@ 0x80
 8007410:	0018      	movs	r0, r3
 8007412:	f004 fc85 	bl	800bd20 <sniprintf>
 8007416:	e00b      	b.n	8007430 <cmd_math_operation_usart4+0x31c>
        }
    }
    else {
        snprintf(response, sizeof(response), "Unknown operation: %s\r\n", operation);
 8007418:	239c      	movs	r3, #156	@ 0x9c
 800741a:	2008      	movs	r0, #8
 800741c:	181b      	adds	r3, r3, r0
 800741e:	19db      	adds	r3, r3, r7
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a13      	ldr	r2, [pc, #76]	@ (8007470 <cmd_math_operation_usart4+0x35c>)
 8007424:	2108      	movs	r1, #8
 8007426:	1809      	adds	r1, r1, r0
 8007428:	19c8      	adds	r0, r1, r7
 800742a:	2180      	movs	r1, #128	@ 0x80
 800742c:	f004 fc78 	bl	800bd20 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 8007430:	2308      	movs	r3, #8
 8007432:	2208      	movs	r2, #8
 8007434:	189b      	adds	r3, r3, r2
 8007436:	19db      	adds	r3, r3, r7
 8007438:	0018      	movs	r0, r3
 800743a:	f7ff f9c9 	bl	80067d0 <command_interface_send_response_usart4>
 800743e:	46bd      	mov	sp, r7
 8007440:	b02b      	add	sp, #172	@ 0xac
 8007442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007444:	0800e698 	.word	0x0800e698
 8007448:	0800e69c 	.word	0x0800e69c
 800744c:	0800e6c0 	.word	0x0800e6c0
 8007450:	0800e6c4 	.word	0x0800e6c4
 8007454:	0800e6dc 	.word	0x0800e6dc
 8007458:	0800e6e0 	.word	0x0800e6e0
 800745c:	0800e6f8 	.word	0x0800e6f8
 8007460:	0800e6fc 	.word	0x0800e6fc
 8007464:	0800e714 	.word	0x0800e714
 8007468:	0800e718 	.word	0x0800e718
 800746c:	0800e730 	.word	0x0800e730
 8007470:	0800e74c 	.word	0x0800e74c

08007474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007478:	f000 fd1a 	bl	8007eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800747c:	f000 f954 	bl	8007728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007480:	f000 fa5c 	bl	800793c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8007484:	f000 f9d8 	bl	8007838 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8007488:	f000 f996 	bl	80077b8 <MX_I2C1_Init>
  MX_USART4_UART_Init();
 800748c:	f000 fa22 	bl	80078d4 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  // System initialization messages
  command_interface_send_response("========================================\r\n");
 8007490:	4b88      	ldr	r3, [pc, #544]	@ (80076b4 <main+0x240>)
 8007492:	0018      	movs	r0, r3
 8007494:	f7ff f986 	bl	80067a4 <command_interface_send_response>
  command_interface_send_response("IoT Prototype System - STM32G071RB\r\n");
 8007498:	4b87      	ldr	r3, [pc, #540]	@ (80076b8 <main+0x244>)
 800749a:	0018      	movs	r0, r3
 800749c:	f7ff f982 	bl	80067a4 <command_interface_send_response>
  command_interface_send_response("========================================\r\n");
 80074a0:	4b84      	ldr	r3, [pc, #528]	@ (80076b4 <main+0x240>)
 80074a2:	0018      	movs	r0, r3
 80074a4:	f7ff f97e 	bl	80067a4 <command_interface_send_response>
  command_interface_send_response("System Clock: 16 MHz\r\n");
 80074a8:	4b84      	ldr	r3, [pc, #528]	@ (80076bc <main+0x248>)
 80074aa:	0018      	movs	r0, r3
 80074ac:	f7ff f97a 	bl	80067a4 <command_interface_send_response>
  command_interface_send_response("I2C1 Configuration: PB8 (SCL), PB9 (SDA)\r\n");
 80074b0:	4b83      	ldr	r3, [pc, #524]	@ (80076c0 <main+0x24c>)
 80074b2:	0018      	movs	r0, r3
 80074b4:	f7ff f976 	bl	80067a4 <command_interface_send_response>
  command_interface_send_response("USART2: PA2 (TX), PA3 (RX) - 115200 baud\r\n");
 80074b8:	4b82      	ldr	r3, [pc, #520]	@ (80076c4 <main+0x250>)
 80074ba:	0018      	movs	r0, r3
 80074bc:	f7ff f972 	bl	80067a4 <command_interface_send_response>
  command_interface_send_response("USART4: PA0 (TX), PA1 (RX) - 115200 baud\r\n");
 80074c0:	4b81      	ldr	r3, [pc, #516]	@ (80076c8 <main+0x254>)
 80074c2:	0018      	movs	r0, r3
 80074c4:	f7ff f96e 	bl	80067a4 <command_interface_send_response>
  command_interface_send_response("LED Status: PA5\r\n");
 80074c8:	4b80      	ldr	r3, [pc, #512]	@ (80076cc <main+0x258>)
 80074ca:	0018      	movs	r0, r3
 80074cc:	f7ff f96a 	bl	80067a4 <command_interface_send_response>
  command_interface_send_response("========================================\r\n");
 80074d0:	4b78      	ldr	r3, [pc, #480]	@ (80076b4 <main+0x240>)
 80074d2:	0018      	movs	r0, r3
 80074d4:	f7ff f966 	bl	80067a4 <command_interface_send_response>
  
  command_interface_send_response_usart4("========================================\r\n");
 80074d8:	4b76      	ldr	r3, [pc, #472]	@ (80076b4 <main+0x240>)
 80074da:	0018      	movs	r0, r3
 80074dc:	f7ff f978 	bl	80067d0 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("IoT Prototype System - STM32G071RB\r\n");
 80074e0:	4b75      	ldr	r3, [pc, #468]	@ (80076b8 <main+0x244>)
 80074e2:	0018      	movs	r0, r3
 80074e4:	f7ff f974 	bl	80067d0 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("========================================\r\n");
 80074e8:	4b72      	ldr	r3, [pc, #456]	@ (80076b4 <main+0x240>)
 80074ea:	0018      	movs	r0, r3
 80074ec:	f7ff f970 	bl	80067d0 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("System Clock: 16 MHz\r\n");
 80074f0:	4b72      	ldr	r3, [pc, #456]	@ (80076bc <main+0x248>)
 80074f2:	0018      	movs	r0, r3
 80074f4:	f7ff f96c 	bl	80067d0 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("I2C1 Configuration: PB8 (SCL), PB9 (SDA)\r\n");
 80074f8:	4b71      	ldr	r3, [pc, #452]	@ (80076c0 <main+0x24c>)
 80074fa:	0018      	movs	r0, r3
 80074fc:	f7ff f968 	bl	80067d0 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("USART2: PA2 (TX), PA3 (RX) - 115200 baud\r\n");
 8007500:	4b70      	ldr	r3, [pc, #448]	@ (80076c4 <main+0x250>)
 8007502:	0018      	movs	r0, r3
 8007504:	f7ff f964 	bl	80067d0 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("USART4: PA0 (TX), PA1 (RX) - 115200 baud\r\n");
 8007508:	4b6f      	ldr	r3, [pc, #444]	@ (80076c8 <main+0x254>)
 800750a:	0018      	movs	r0, r3
 800750c:	f7ff f960 	bl	80067d0 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("LED Status: PA5\r\n");
 8007510:	4b6e      	ldr	r3, [pc, #440]	@ (80076cc <main+0x258>)
 8007512:	0018      	movs	r0, r3
 8007514:	f7ff f95c 	bl	80067d0 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("========================================\r\n");
 8007518:	4b66      	ldr	r3, [pc, #408]	@ (80076b4 <main+0x240>)
 800751a:	0018      	movs	r0, r3
 800751c:	f7ff f958 	bl	80067d0 <command_interface_send_response_usart4>
  
  // Check BME680 sensor presence
  command_interface_send_response("\r\nChecking BME680 sensor presence...\r\n");
 8007520:	4b6b      	ldr	r3, [pc, #428]	@ (80076d0 <main+0x25c>)
 8007522:	0018      	movs	r0, r3
 8007524:	f7ff f93e 	bl	80067a4 <command_interface_send_response>
  command_interface_send_response_usart4("\r\nChecking BME680 sensor presence...\r\n");
 8007528:	4b69      	ldr	r3, [pc, #420]	@ (80076d0 <main+0x25c>)
 800752a:	0018      	movs	r0, r3
 800752c:	f7ff f950 	bl	80067d0 <command_interface_send_response_usart4>
  
  if (bme680_check_sensor_presence() == BME68X_OK) {
 8007530:	f7fc fbb4 	bl	8003c9c <bme680_check_sensor_presence>
 8007534:	1e03      	subs	r3, r0, #0
 8007536:	d155      	bne.n	80075e4 <main+0x170>
    command_interface_send_response("✓ BME680 sensor detected on I2C bus (Address: 0x76)\r\n");
 8007538:	4b66      	ldr	r3, [pc, #408]	@ (80076d4 <main+0x260>)
 800753a:	0018      	movs	r0, r3
 800753c:	f7ff f932 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response_usart4("✓ BME680 sensor detected on I2C bus (Address: 0x76)\r\n");
 8007540:	4b64      	ldr	r3, [pc, #400]	@ (80076d4 <main+0x260>)
 8007542:	0018      	movs	r0, r3
 8007544:	f7ff f944 	bl	80067d0 <command_interface_send_response_usart4>
    
    // Initialize BME680 sensor
    command_interface_send_response("Initializing BME680 sensor...\r\n");
 8007548:	4b63      	ldr	r3, [pc, #396]	@ (80076d8 <main+0x264>)
 800754a:	0018      	movs	r0, r3
 800754c:	f7ff f92a 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response_usart4("Initializing BME680 sensor...\r\n");
 8007550:	4b61      	ldr	r3, [pc, #388]	@ (80076d8 <main+0x264>)
 8007552:	0018      	movs	r0, r3
 8007554:	f7ff f93c 	bl	80067d0 <command_interface_send_response_usart4>
    
    if (bme680_init_sensor() == BME68X_OK) {
 8007558:	f7fc fa82 	bl	8003a60 <bme680_init_sensor>
 800755c:	1e03      	subs	r3, r0, #0
 800755e:	d128      	bne.n	80075b2 <main+0x13e>
      command_interface_send_response("✓ BME680 sensor initialized successfully\r\n");
 8007560:	4b5e      	ldr	r3, [pc, #376]	@ (80076dc <main+0x268>)
 8007562:	0018      	movs	r0, r3
 8007564:	f7ff f91e 	bl	80067a4 <command_interface_send_response>
      command_interface_send_response("  - Temperature oversampling: 1x\r\n");
 8007568:	4b5d      	ldr	r3, [pc, #372]	@ (80076e0 <main+0x26c>)
 800756a:	0018      	movs	r0, r3
 800756c:	f7ff f91a 	bl	80067a4 <command_interface_send_response>
      command_interface_send_response("  - Pressure oversampling: 1x\r\n");
 8007570:	4b5c      	ldr	r3, [pc, #368]	@ (80076e4 <main+0x270>)
 8007572:	0018      	movs	r0, r3
 8007574:	f7ff f916 	bl	80067a4 <command_interface_send_response>
      command_interface_send_response("  - Humidity oversampling: 1x\r\n");
 8007578:	4b5b      	ldr	r3, [pc, #364]	@ (80076e8 <main+0x274>)
 800757a:	0018      	movs	r0, r3
 800757c:	f7ff f912 	bl	80067a4 <command_interface_send_response>
      command_interface_send_response("  - Gas sensor: Disabled\r\n");
 8007580:	4b5a      	ldr	r3, [pc, #360]	@ (80076ec <main+0x278>)
 8007582:	0018      	movs	r0, r3
 8007584:	f7ff f90e 	bl	80067a4 <command_interface_send_response>
      
      command_interface_send_response_usart4("✓ BME680 sensor initialized successfully\r\n");
 8007588:	4b54      	ldr	r3, [pc, #336]	@ (80076dc <main+0x268>)
 800758a:	0018      	movs	r0, r3
 800758c:	f7ff f920 	bl	80067d0 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Temperature oversampling: 1x\r\n");
 8007590:	4b53      	ldr	r3, [pc, #332]	@ (80076e0 <main+0x26c>)
 8007592:	0018      	movs	r0, r3
 8007594:	f7ff f91c 	bl	80067d0 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Pressure oversampling: 1x\r\n");
 8007598:	4b52      	ldr	r3, [pc, #328]	@ (80076e4 <main+0x270>)
 800759a:	0018      	movs	r0, r3
 800759c:	f7ff f918 	bl	80067d0 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Humidity oversampling: 1x\r\n");
 80075a0:	4b51      	ldr	r3, [pc, #324]	@ (80076e8 <main+0x274>)
 80075a2:	0018      	movs	r0, r3
 80075a4:	f7ff f914 	bl	80067d0 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Gas sensor: Disabled\r\n");
 80075a8:	4b50      	ldr	r3, [pc, #320]	@ (80076ec <main+0x278>)
 80075aa:	0018      	movs	r0, r3
 80075ac:	f7ff f910 	bl	80067d0 <command_interface_send_response_usart4>
 80075b0:	e070      	b.n	8007694 <main+0x220>
    } else {
      command_interface_send_response("✗ Error initializing BME680 sensor\r\n");
 80075b2:	4b4f      	ldr	r3, [pc, #316]	@ (80076f0 <main+0x27c>)
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7ff f8f5 	bl	80067a4 <command_interface_send_response>
      command_interface_send_response("  - Check sensor power supply (3.3V)\r\n");
 80075ba:	4b4e      	ldr	r3, [pc, #312]	@ (80076f4 <main+0x280>)
 80075bc:	0018      	movs	r0, r3
 80075be:	f7ff f8f1 	bl	80067a4 <command_interface_send_response>
      command_interface_send_response("  - Verify I2C connections\r\n");
 80075c2:	4b4d      	ldr	r3, [pc, #308]	@ (80076f8 <main+0x284>)
 80075c4:	0018      	movs	r0, r3
 80075c6:	f7ff f8ed 	bl	80067a4 <command_interface_send_response>
      
      command_interface_send_response_usart4("✗ Error initializing BME680 sensor\r\n");
 80075ca:	4b49      	ldr	r3, [pc, #292]	@ (80076f0 <main+0x27c>)
 80075cc:	0018      	movs	r0, r3
 80075ce:	f7ff f8ff 	bl	80067d0 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Check sensor power supply (3.3V)\r\n");
 80075d2:	4b48      	ldr	r3, [pc, #288]	@ (80076f4 <main+0x280>)
 80075d4:	0018      	movs	r0, r3
 80075d6:	f7ff f8fb 	bl	80067d0 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Verify I2C connections\r\n");
 80075da:	4b47      	ldr	r3, [pc, #284]	@ (80076f8 <main+0x284>)
 80075dc:	0018      	movs	r0, r3
 80075de:	f7ff f8f7 	bl	80067d0 <command_interface_send_response_usart4>
 80075e2:	e057      	b.n	8007694 <main+0x220>
    }
  } else {
    command_interface_send_response("✗ BME680 sensor not found on I2C bus\r\n");
 80075e4:	4b45      	ldr	r3, [pc, #276]	@ (80076fc <main+0x288>)
 80075e6:	0018      	movs	r0, r3
 80075e8:	f7ff f8dc 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("Troubleshooting steps:\r\n");
 80075ec:	4b44      	ldr	r3, [pc, #272]	@ (8007700 <main+0x28c>)
 80075ee:	0018      	movs	r0, r3
 80075f0:	f7ff f8d8 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("  1. Check I2C connections:\r\n");
 80075f4:	4b43      	ldr	r3, [pc, #268]	@ (8007704 <main+0x290>)
 80075f6:	0018      	movs	r0, r3
 80075f8:	f7ff f8d4 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("     - PB8 (SCL) → BME680 SCL\r\n");
 80075fc:	4b42      	ldr	r3, [pc, #264]	@ (8007708 <main+0x294>)
 80075fe:	0018      	movs	r0, r3
 8007600:	f7ff f8d0 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("     - PB9 (SDA) → BME680 SDA\r\n");
 8007604:	4b41      	ldr	r3, [pc, #260]	@ (800770c <main+0x298>)
 8007606:	0018      	movs	r0, r3
 8007608:	f7ff f8cc 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("  2. Verify power supply:\r\n");
 800760c:	4b40      	ldr	r3, [pc, #256]	@ (8007710 <main+0x29c>)
 800760e:	0018      	movs	r0, r3
 8007610:	f7ff f8c8 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("     - BME680 VCC → 3.3V\r\n");
 8007614:	4b3f      	ldr	r3, [pc, #252]	@ (8007714 <main+0x2a0>)
 8007616:	0018      	movs	r0, r3
 8007618:	f7ff f8c4 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("     - BME680 GND → GND\r\n");
 800761c:	4b3e      	ldr	r3, [pc, #248]	@ (8007718 <main+0x2a4>)
 800761e:	0018      	movs	r0, r3
 8007620:	f7ff f8c0 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("  3. Check pull-up resistors (4.7kΩ recommended)\r\n");
 8007624:	4b3d      	ldr	r3, [pc, #244]	@ (800771c <main+0x2a8>)
 8007626:	0018      	movs	r0, r3
 8007628:	f7ff f8bc 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("  4. Verify I2C address (default: 0x76)\r\n");
 800762c:	4b3c      	ldr	r3, [pc, #240]	@ (8007720 <main+0x2ac>)
 800762e:	0018      	movs	r0, r3
 8007630:	f7ff f8b8 	bl	80067a4 <command_interface_send_response>
    command_interface_send_response("System will continue without sensor functionality\r\n");
 8007634:	4b3b      	ldr	r3, [pc, #236]	@ (8007724 <main+0x2b0>)
 8007636:	0018      	movs	r0, r3
 8007638:	f7ff f8b4 	bl	80067a4 <command_interface_send_response>
    
    command_interface_send_response_usart4("✗ BME680 sensor not found on I2C bus\r\n");
 800763c:	4b2f      	ldr	r3, [pc, #188]	@ (80076fc <main+0x288>)
 800763e:	0018      	movs	r0, r3
 8007640:	f7ff f8c6 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("Troubleshooting steps:\r\n");
 8007644:	4b2e      	ldr	r3, [pc, #184]	@ (8007700 <main+0x28c>)
 8007646:	0018      	movs	r0, r3
 8007648:	f7ff f8c2 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  1. Check I2C connections:\r\n");
 800764c:	4b2d      	ldr	r3, [pc, #180]	@ (8007704 <main+0x290>)
 800764e:	0018      	movs	r0, r3
 8007650:	f7ff f8be 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - PB8 (SCL) → BME680 SCL\r\n");
 8007654:	4b2c      	ldr	r3, [pc, #176]	@ (8007708 <main+0x294>)
 8007656:	0018      	movs	r0, r3
 8007658:	f7ff f8ba 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - PB9 (SDA) → BME680 SDA\r\n");
 800765c:	4b2b      	ldr	r3, [pc, #172]	@ (800770c <main+0x298>)
 800765e:	0018      	movs	r0, r3
 8007660:	f7ff f8b6 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  2. Verify power supply:\r\n");
 8007664:	4b2a      	ldr	r3, [pc, #168]	@ (8007710 <main+0x29c>)
 8007666:	0018      	movs	r0, r3
 8007668:	f7ff f8b2 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - BME680 VCC → 3.3V\r\n");
 800766c:	4b29      	ldr	r3, [pc, #164]	@ (8007714 <main+0x2a0>)
 800766e:	0018      	movs	r0, r3
 8007670:	f7ff f8ae 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - BME680 GND → GND\r\n");
 8007674:	4b28      	ldr	r3, [pc, #160]	@ (8007718 <main+0x2a4>)
 8007676:	0018      	movs	r0, r3
 8007678:	f7ff f8aa 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  3. Check pull-up resistors (4.7kΩ recommended)\r\n");
 800767c:	4b27      	ldr	r3, [pc, #156]	@ (800771c <main+0x2a8>)
 800767e:	0018      	movs	r0, r3
 8007680:	f7ff f8a6 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  4. Verify I2C address (default: 0x76)\r\n");
 8007684:	4b26      	ldr	r3, [pc, #152]	@ (8007720 <main+0x2ac>)
 8007686:	0018      	movs	r0, r3
 8007688:	f7ff f8a2 	bl	80067d0 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("System will continue without sensor functionality\r\n");
 800768c:	4b25      	ldr	r3, [pc, #148]	@ (8007724 <main+0x2b0>)
 800768e:	0018      	movs	r0, r3
 8007690:	f7ff f89e 	bl	80067d0 <command_interface_send_response_usart4>
  }
  
  // Initialize command interface
  command_interface_init();
 8007694:	f7fe fe54 	bl	8006340 <command_interface_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Process command interface
    command_interface_process();
 8007698:	f7fe fe92 	bl	80063c0 <command_interface_process>
    
    // Toggle LED to show system is running
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800769c:	23a0      	movs	r3, #160	@ 0xa0
 800769e:	05db      	lsls	r3, r3, #23
 80076a0:	2120      	movs	r1, #32
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 fee3 	bl	800846e <HAL_GPIO_TogglePin>
    
    // Small delay
    HAL_Delay(10);
 80076a8:	200a      	movs	r0, #10
 80076aa:	f000 fc87 	bl	8007fbc <HAL_Delay>
    command_interface_process();
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	e7f2      	b.n	8007698 <main+0x224>
 80076b2:	46c0      	nop			@ (mov r8, r8)
 80076b4:	0800e82c 	.word	0x0800e82c
 80076b8:	0800e858 	.word	0x0800e858
 80076bc:	0800e880 	.word	0x0800e880
 80076c0:	0800e898 	.word	0x0800e898
 80076c4:	0800e8c4 	.word	0x0800e8c4
 80076c8:	0800e8f0 	.word	0x0800e8f0
 80076cc:	0800e91c 	.word	0x0800e91c
 80076d0:	0800e930 	.word	0x0800e930
 80076d4:	0800e958 	.word	0x0800e958
 80076d8:	0800e990 	.word	0x0800e990
 80076dc:	0800e9b0 	.word	0x0800e9b0
 80076e0:	0800e9e0 	.word	0x0800e9e0
 80076e4:	0800ea04 	.word	0x0800ea04
 80076e8:	0800ea24 	.word	0x0800ea24
 80076ec:	0800ea44 	.word	0x0800ea44
 80076f0:	0800ea60 	.word	0x0800ea60
 80076f4:	0800ea88 	.word	0x0800ea88
 80076f8:	0800eab0 	.word	0x0800eab0
 80076fc:	0800ead0 	.word	0x0800ead0
 8007700:	0800eafc 	.word	0x0800eafc
 8007704:	0800eb18 	.word	0x0800eb18
 8007708:	0800eb38 	.word	0x0800eb38
 800770c:	0800eb5c 	.word	0x0800eb5c
 8007710:	0800eb80 	.word	0x0800eb80
 8007714:	0800eb9c 	.word	0x0800eb9c
 8007718:	0800ebbc 	.word	0x0800ebbc
 800771c:	0800ebd8 	.word	0x0800ebd8
 8007720:	0800ec0c 	.word	0x0800ec0c
 8007724:	0800ec38 	.word	0x0800ec38

08007728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	b093      	sub	sp, #76	@ 0x4c
 800772c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800772e:	2410      	movs	r4, #16
 8007730:	193b      	adds	r3, r7, r4
 8007732:	0018      	movs	r0, r3
 8007734:	2338      	movs	r3, #56	@ 0x38
 8007736:	001a      	movs	r2, r3
 8007738:	2100      	movs	r1, #0
 800773a:	f004 fb73 	bl	800be24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800773e:	003b      	movs	r3, r7
 8007740:	0018      	movs	r0, r3
 8007742:	2310      	movs	r3, #16
 8007744:	001a      	movs	r2, r3
 8007746:	2100      	movs	r1, #0
 8007748:	f004 fb6c 	bl	800be24 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800774c:	2380      	movs	r3, #128	@ 0x80
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	0018      	movs	r0, r3
 8007752:	f001 fd43 	bl	80091dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007756:	193b      	adds	r3, r7, r4
 8007758:	2202      	movs	r2, #2
 800775a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800775c:	193b      	adds	r3, r7, r4
 800775e:	2280      	movs	r2, #128	@ 0x80
 8007760:	0052      	lsls	r2, r2, #1
 8007762:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8007764:	193b      	adds	r3, r7, r4
 8007766:	2200      	movs	r2, #0
 8007768:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800776a:	193b      	adds	r3, r7, r4
 800776c:	2240      	movs	r2, #64	@ 0x40
 800776e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007770:	193b      	adds	r3, r7, r4
 8007772:	2200      	movs	r2, #0
 8007774:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007776:	193b      	adds	r3, r7, r4
 8007778:	0018      	movs	r0, r3
 800777a:	f001 fd7b 	bl	8009274 <HAL_RCC_OscConfig>
 800777e:	1e03      	subs	r3, r0, #0
 8007780:	d001      	beq.n	8007786 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8007782:	f000 f967 	bl	8007a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007786:	003b      	movs	r3, r7
 8007788:	2207      	movs	r2, #7
 800778a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800778c:	003b      	movs	r3, r7
 800778e:	2200      	movs	r2, #0
 8007790:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007792:	003b      	movs	r3, r7
 8007794:	2200      	movs	r2, #0
 8007796:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007798:	003b      	movs	r3, r7
 800779a:	2200      	movs	r2, #0
 800779c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800779e:	003b      	movs	r3, r7
 80077a0:	2100      	movs	r1, #0
 80077a2:	0018      	movs	r0, r3
 80077a4:	f002 f880 	bl	80098a8 <HAL_RCC_ClockConfig>
 80077a8:	1e03      	subs	r3, r0, #0
 80077aa:	d001      	beq.n	80077b0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80077ac:	f000 f952 	bl	8007a54 <Error_Handler>
  }
}
 80077b0:	46c0      	nop			@ (mov r8, r8)
 80077b2:	46bd      	mov	sp, r7
 80077b4:	b013      	add	sp, #76	@ 0x4c
 80077b6:	bd90      	pop	{r4, r7, pc}

080077b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80077bc:	4b1b      	ldr	r3, [pc, #108]	@ (800782c <MX_I2C1_Init+0x74>)
 80077be:	4a1c      	ldr	r2, [pc, #112]	@ (8007830 <MX_I2C1_Init+0x78>)
 80077c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80077c2:	4b1a      	ldr	r3, [pc, #104]	@ (800782c <MX_I2C1_Init+0x74>)
 80077c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007834 <MX_I2C1_Init+0x7c>)
 80077c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80077c8:	4b18      	ldr	r3, [pc, #96]	@ (800782c <MX_I2C1_Init+0x74>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077ce:	4b17      	ldr	r3, [pc, #92]	@ (800782c <MX_I2C1_Init+0x74>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077d4:	4b15      	ldr	r3, [pc, #84]	@ (800782c <MX_I2C1_Init+0x74>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80077da:	4b14      	ldr	r3, [pc, #80]	@ (800782c <MX_I2C1_Init+0x74>)
 80077dc:	2200      	movs	r2, #0
 80077de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077e0:	4b12      	ldr	r3, [pc, #72]	@ (800782c <MX_I2C1_Init+0x74>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077e6:	4b11      	ldr	r3, [pc, #68]	@ (800782c <MX_I2C1_Init+0x74>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077ec:	4b0f      	ldr	r3, [pc, #60]	@ (800782c <MX_I2C1_Init+0x74>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077f2:	4b0e      	ldr	r3, [pc, #56]	@ (800782c <MX_I2C1_Init+0x74>)
 80077f4:	0018      	movs	r0, r3
 80077f6:	f000 fe55 	bl	80084a4 <HAL_I2C_Init>
 80077fa:	1e03      	subs	r3, r0, #0
 80077fc:	d001      	beq.n	8007802 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80077fe:	f000 f929 	bl	8007a54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007802:	4b0a      	ldr	r3, [pc, #40]	@ (800782c <MX_I2C1_Init+0x74>)
 8007804:	2100      	movs	r1, #0
 8007806:	0018      	movs	r0, r3
 8007808:	f001 fc50 	bl	80090ac <HAL_I2CEx_ConfigAnalogFilter>
 800780c:	1e03      	subs	r3, r0, #0
 800780e:	d001      	beq.n	8007814 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007810:	f000 f920 	bl	8007a54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007814:	4b05      	ldr	r3, [pc, #20]	@ (800782c <MX_I2C1_Init+0x74>)
 8007816:	2100      	movs	r1, #0
 8007818:	0018      	movs	r0, r3
 800781a:	f001 fc93 	bl	8009144 <HAL_I2CEx_ConfigDigitalFilter>
 800781e:	1e03      	subs	r3, r0, #0
 8007820:	d001      	beq.n	8007826 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007822:	f000 f917 	bl	8007a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007826:	46c0      	nop			@ (mov r8, r8)
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	200002c4 	.word	0x200002c4
 8007830:	40005400 	.word	0x40005400
 8007834:	00503d58 	.word	0x00503d58

08007838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800783c:	4b23      	ldr	r3, [pc, #140]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 800783e:	4a24      	ldr	r2, [pc, #144]	@ (80078d0 <MX_USART2_UART_Init+0x98>)
 8007840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007842:	4b22      	ldr	r3, [pc, #136]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 8007844:	22e1      	movs	r2, #225	@ 0xe1
 8007846:	0252      	lsls	r2, r2, #9
 8007848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800784a:	4b20      	ldr	r3, [pc, #128]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 800784c:	2200      	movs	r2, #0
 800784e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007850:	4b1e      	ldr	r3, [pc, #120]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 8007852:	2200      	movs	r2, #0
 8007854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007856:	4b1d      	ldr	r3, [pc, #116]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 8007858:	2200      	movs	r2, #0
 800785a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800785c:	4b1b      	ldr	r3, [pc, #108]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 800785e:	220c      	movs	r2, #12
 8007860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007862:	4b1a      	ldr	r3, [pc, #104]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 8007864:	2200      	movs	r2, #0
 8007866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007868:	4b18      	ldr	r3, [pc, #96]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 800786a:	2200      	movs	r2, #0
 800786c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800786e:	4b17      	ldr	r3, [pc, #92]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 8007870:	2200      	movs	r2, #0
 8007872:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007874:	4b15      	ldr	r3, [pc, #84]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 8007876:	2200      	movs	r2, #0
 8007878:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800787a:	4b14      	ldr	r3, [pc, #80]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 800787c:	2200      	movs	r2, #0
 800787e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007880:	4b12      	ldr	r3, [pc, #72]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 8007882:	0018      	movs	r0, r3
 8007884:	f002 fb72 	bl	8009f6c <HAL_UART_Init>
 8007888:	1e03      	subs	r3, r0, #0
 800788a:	d001      	beq.n	8007890 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800788c:	f000 f8e2 	bl	8007a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007890:	4b0e      	ldr	r3, [pc, #56]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 8007892:	2100      	movs	r1, #0
 8007894:	0018      	movs	r0, r3
 8007896:	f003 fa75 	bl	800ad84 <HAL_UARTEx_SetTxFifoThreshold>
 800789a:	1e03      	subs	r3, r0, #0
 800789c:	d001      	beq.n	80078a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800789e:	f000 f8d9 	bl	8007a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80078a2:	4b0a      	ldr	r3, [pc, #40]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 80078a4:	2100      	movs	r1, #0
 80078a6:	0018      	movs	r0, r3
 80078a8:	f003 faac 	bl	800ae04 <HAL_UARTEx_SetRxFifoThreshold>
 80078ac:	1e03      	subs	r3, r0, #0
 80078ae:	d001      	beq.n	80078b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80078b0:	f000 f8d0 	bl	8007a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80078b4:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <MX_USART2_UART_Init+0x94>)
 80078b6:	0018      	movs	r0, r3
 80078b8:	f003 fa2a 	bl	800ad10 <HAL_UARTEx_DisableFifoMode>
 80078bc:	1e03      	subs	r3, r0, #0
 80078be:	d001      	beq.n	80078c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80078c0:	f000 f8c8 	bl	8007a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80078c4:	46c0      	nop			@ (mov r8, r8)
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	46c0      	nop			@ (mov r8, r8)
 80078cc:	20000318 	.word	0x20000318
 80078d0:	40004400 	.word	0x40004400

080078d4 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80078d8:	4b16      	ldr	r3, [pc, #88]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 80078da:	4a17      	ldr	r2, [pc, #92]	@ (8007938 <MX_USART4_UART_Init+0x64>)
 80078dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80078de:	4b15      	ldr	r3, [pc, #84]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 80078e0:	22e1      	movs	r2, #225	@ 0xe1
 80078e2:	0252      	lsls	r2, r2, #9
 80078e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80078e6:	4b13      	ldr	r3, [pc, #76]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80078ec:	4b11      	ldr	r3, [pc, #68]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80078f2:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80078f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 80078fa:	220c      	movs	r2, #12
 80078fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 8007900:	2200      	movs	r2, #0
 8007902:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007904:	4b0b      	ldr	r3, [pc, #44]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 8007906:	2200      	movs	r2, #0
 8007908:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800790a:	4b0a      	ldr	r3, [pc, #40]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 800790c:	2200      	movs	r2, #0
 800790e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007910:	4b08      	ldr	r3, [pc, #32]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 8007912:	2200      	movs	r2, #0
 8007914:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007916:	4b07      	ldr	r3, [pc, #28]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 8007918:	2200      	movs	r2, #0
 800791a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800791c:	4b05      	ldr	r3, [pc, #20]	@ (8007934 <MX_USART4_UART_Init+0x60>)
 800791e:	0018      	movs	r0, r3
 8007920:	f002 fb24 	bl	8009f6c <HAL_UART_Init>
 8007924:	1e03      	subs	r3, r0, #0
 8007926:	d001      	beq.n	800792c <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8007928:	f000 f894 	bl	8007a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800792c:	46c0      	nop			@ (mov r8, r8)
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	46c0      	nop			@ (mov r8, r8)
 8007934:	200003ac 	.word	0x200003ac
 8007938:	40004c00 	.word	0x40004c00

0800793c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b08b      	sub	sp, #44	@ 0x2c
 8007940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007942:	2414      	movs	r4, #20
 8007944:	193b      	adds	r3, r7, r4
 8007946:	0018      	movs	r0, r3
 8007948:	2314      	movs	r3, #20
 800794a:	001a      	movs	r2, r3
 800794c:	2100      	movs	r1, #0
 800794e:	f004 fa69 	bl	800be24 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007952:	4b3e      	ldr	r3, [pc, #248]	@ (8007a4c <MX_GPIO_Init+0x110>)
 8007954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007956:	4b3d      	ldr	r3, [pc, #244]	@ (8007a4c <MX_GPIO_Init+0x110>)
 8007958:	2104      	movs	r1, #4
 800795a:	430a      	orrs	r2, r1
 800795c:	635a      	str	r2, [r3, #52]	@ 0x34
 800795e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a4c <MX_GPIO_Init+0x110>)
 8007960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007962:	2204      	movs	r2, #4
 8007964:	4013      	ands	r3, r2
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800796a:	4b38      	ldr	r3, [pc, #224]	@ (8007a4c <MX_GPIO_Init+0x110>)
 800796c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800796e:	4b37      	ldr	r3, [pc, #220]	@ (8007a4c <MX_GPIO_Init+0x110>)
 8007970:	2120      	movs	r1, #32
 8007972:	430a      	orrs	r2, r1
 8007974:	635a      	str	r2, [r3, #52]	@ 0x34
 8007976:	4b35      	ldr	r3, [pc, #212]	@ (8007a4c <MX_GPIO_Init+0x110>)
 8007978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800797a:	2220      	movs	r2, #32
 800797c:	4013      	ands	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007982:	4b32      	ldr	r3, [pc, #200]	@ (8007a4c <MX_GPIO_Init+0x110>)
 8007984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007986:	4b31      	ldr	r3, [pc, #196]	@ (8007a4c <MX_GPIO_Init+0x110>)
 8007988:	2101      	movs	r1, #1
 800798a:	430a      	orrs	r2, r1
 800798c:	635a      	str	r2, [r3, #52]	@ 0x34
 800798e:	4b2f      	ldr	r3, [pc, #188]	@ (8007a4c <MX_GPIO_Init+0x110>)
 8007990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007992:	2201      	movs	r2, #1
 8007994:	4013      	ands	r3, r2
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800799a:	4b2c      	ldr	r3, [pc, #176]	@ (8007a4c <MX_GPIO_Init+0x110>)
 800799c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800799e:	4b2b      	ldr	r3, [pc, #172]	@ (8007a4c <MX_GPIO_Init+0x110>)
 80079a0:	2102      	movs	r1, #2
 80079a2:	430a      	orrs	r2, r1
 80079a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80079a6:	4b29      	ldr	r3, [pc, #164]	@ (8007a4c <MX_GPIO_Init+0x110>)
 80079a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079aa:	2202      	movs	r2, #2
 80079ac:	4013      	ands	r3, r2
 80079ae:	607b      	str	r3, [r7, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80079b2:	4b27      	ldr	r3, [pc, #156]	@ (8007a50 <MX_GPIO_Init+0x114>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	2101      	movs	r1, #1
 80079b8:	0018      	movs	r0, r3
 80079ba:	f000 fd3b 	bl	8008434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80079be:	23a0      	movs	r3, #160	@ 0xa0
 80079c0:	05db      	lsls	r3, r3, #23
 80079c2:	2200      	movs	r2, #0
 80079c4:	2120      	movs	r1, #32
 80079c6:	0018      	movs	r0, r3
 80079c8:	f000 fd34 	bl	8008434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80079cc:	193b      	adds	r3, r7, r4
 80079ce:	2201      	movs	r2, #1
 80079d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079d2:	193b      	adds	r3, r7, r4
 80079d4:	2201      	movs	r2, #1
 80079d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d8:	193b      	adds	r3, r7, r4
 80079da:	2200      	movs	r2, #0
 80079dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079de:	193b      	adds	r3, r7, r4
 80079e0:	2200      	movs	r2, #0
 80079e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079e4:	193b      	adds	r3, r7, r4
 80079e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007a50 <MX_GPIO_Init+0x114>)
 80079e8:	0019      	movs	r1, r3
 80079ea:	0010      	movs	r0, r2
 80079ec:	f000 fbbe 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pins : lora_nss_Pin miso_pa6_Pin mosi_pa7_Pin */
  GPIO_InitStruct.Pin = lora_nss_Pin|miso_pa6_Pin|mosi_pa7_Pin;
 80079f0:	193b      	adds	r3, r7, r4
 80079f2:	22d0      	movs	r2, #208	@ 0xd0
 80079f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f6:	193b      	adds	r3, r7, r4
 80079f8:	2202      	movs	r2, #2
 80079fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079fc:	193b      	adds	r3, r7, r4
 80079fe:	2200      	movs	r2, #0
 8007a00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a02:	193b      	adds	r3, r7, r4
 8007a04:	2200      	movs	r2, #0
 8007a06:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007a08:	193b      	adds	r3, r7, r4
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a0e:	193a      	adds	r2, r7, r4
 8007a10:	23a0      	movs	r3, #160	@ 0xa0
 8007a12:	05db      	lsls	r3, r3, #23
 8007a14:	0011      	movs	r1, r2
 8007a16:	0018      	movs	r0, r3
 8007a18:	f000 fba8 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007a1c:	0021      	movs	r1, r4
 8007a1e:	187b      	adds	r3, r7, r1
 8007a20:	2220      	movs	r2, #32
 8007a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a24:	187b      	adds	r3, r7, r1
 8007a26:	2201      	movs	r2, #1
 8007a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a2a:	187b      	adds	r3, r7, r1
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a30:	187b      	adds	r3, r7, r1
 8007a32:	2200      	movs	r2, #0
 8007a34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a36:	187a      	adds	r2, r7, r1
 8007a38:	23a0      	movs	r3, #160	@ 0xa0
 8007a3a:	05db      	lsls	r3, r3, #23
 8007a3c:	0011      	movs	r1, r2
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f000 fb94 	bl	800816c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8007a44:	46c0      	nop			@ (mov r8, r8)
 8007a46:	46bd      	mov	sp, r7
 8007a48:	b00b      	add	sp, #44	@ 0x2c
 8007a4a:	bd90      	pop	{r4, r7, pc}
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	50000800 	.word	0x50000800

08007a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007a58:	b672      	cpsid	i
}
 8007a5a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007a5c:	46c0      	nop			@ (mov r8, r8)
 8007a5e:	e7fd      	b.n	8007a5c <Error_Handler+0x8>

08007a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a66:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa4 <HAL_MspInit+0x44>)
 8007a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007aa4 <HAL_MspInit+0x44>)
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a72:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa4 <HAL_MspInit+0x44>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a76:	2201      	movs	r2, #1
 8007a78:	4013      	ands	r3, r2
 8007a7a:	607b      	str	r3, [r7, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a7e:	4b09      	ldr	r3, [pc, #36]	@ (8007aa4 <HAL_MspInit+0x44>)
 8007a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a82:	4b08      	ldr	r3, [pc, #32]	@ (8007aa4 <HAL_MspInit+0x44>)
 8007a84:	2180      	movs	r1, #128	@ 0x80
 8007a86:	0549      	lsls	r1, r1, #21
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007a8c:	4b05      	ldr	r3, [pc, #20]	@ (8007aa4 <HAL_MspInit+0x44>)
 8007a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a90:	2380      	movs	r3, #128	@ 0x80
 8007a92:	055b      	lsls	r3, r3, #21
 8007a94:	4013      	ands	r3, r2
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b002      	add	sp, #8
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	46c0      	nop			@ (mov r8, r8)
 8007aa4:	40021000 	.word	0x40021000

08007aa8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007aa8:	b590      	push	{r4, r7, lr}
 8007aaa:	b097      	sub	sp, #92	@ 0x5c
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab0:	2344      	movs	r3, #68	@ 0x44
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	2314      	movs	r3, #20
 8007ab8:	001a      	movs	r2, r3
 8007aba:	2100      	movs	r1, #0
 8007abc:	f004 f9b2 	bl	800be24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ac0:	2410      	movs	r4, #16
 8007ac2:	193b      	adds	r3, r7, r4
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	2334      	movs	r3, #52	@ 0x34
 8007ac8:	001a      	movs	r2, r3
 8007aca:	2100      	movs	r1, #0
 8007acc:	f004 f9aa 	bl	800be24 <memset>
  if(hi2c->Instance==I2C1)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a22      	ldr	r2, [pc, #136]	@ (8007b60 <HAL_I2C_MspInit+0xb8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d13d      	bne.n	8007b56 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007ada:	193b      	adds	r3, r7, r4
 8007adc:	2220      	movs	r2, #32
 8007ade:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007ae0:	193b      	adds	r3, r7, r4
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ae6:	193b      	adds	r3, r7, r4
 8007ae8:	0018      	movs	r0, r3
 8007aea:	f002 f887 	bl	8009bfc <HAL_RCCEx_PeriphCLKConfig>
 8007aee:	1e03      	subs	r3, r0, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007af2:	f7ff ffaf 	bl	8007a54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007af6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b64 <HAL_I2C_MspInit+0xbc>)
 8007af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007afa:	4b1a      	ldr	r3, [pc, #104]	@ (8007b64 <HAL_I2C_MspInit+0xbc>)
 8007afc:	2102      	movs	r1, #2
 8007afe:	430a      	orrs	r2, r1
 8007b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b02:	4b18      	ldr	r3, [pc, #96]	@ (8007b64 <HAL_I2C_MspInit+0xbc>)
 8007b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b06:	2202      	movs	r2, #2
 8007b08:	4013      	ands	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b0e:	2144      	movs	r1, #68	@ 0x44
 8007b10:	187b      	adds	r3, r7, r1
 8007b12:	22c0      	movs	r2, #192	@ 0xc0
 8007b14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	2212      	movs	r2, #18
 8007b1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b1c:	187b      	adds	r3, r7, r1
 8007b1e:	2200      	movs	r2, #0
 8007b20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b22:	187b      	adds	r3, r7, r1
 8007b24:	2200      	movs	r2, #0
 8007b26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8007b28:	187b      	adds	r3, r7, r1
 8007b2a:	2206      	movs	r2, #6
 8007b2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b2e:	187b      	adds	r3, r7, r1
 8007b30:	4a0d      	ldr	r2, [pc, #52]	@ (8007b68 <HAL_I2C_MspInit+0xc0>)
 8007b32:	0019      	movs	r1, r3
 8007b34:	0010      	movs	r0, r2
 8007b36:	f000 fb19 	bl	800816c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b64 <HAL_I2C_MspInit+0xbc>)
 8007b3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b3e:	4b09      	ldr	r3, [pc, #36]	@ (8007b64 <HAL_I2C_MspInit+0xbc>)
 8007b40:	2180      	movs	r1, #128	@ 0x80
 8007b42:	0389      	lsls	r1, r1, #14
 8007b44:	430a      	orrs	r2, r1
 8007b46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007b48:	4b06      	ldr	r3, [pc, #24]	@ (8007b64 <HAL_I2C_MspInit+0xbc>)
 8007b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b4c:	2380      	movs	r3, #128	@ 0x80
 8007b4e:	039b      	lsls	r3, r3, #14
 8007b50:	4013      	ands	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]
 8007b54:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007b56:	46c0      	nop			@ (mov r8, r8)
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	b017      	add	sp, #92	@ 0x5c
 8007b5c:	bd90      	pop	{r4, r7, pc}
 8007b5e:	46c0      	nop			@ (mov r8, r8)
 8007b60:	40005400 	.word	0x40005400
 8007b64:	40021000 	.word	0x40021000
 8007b68:	50000400 	.word	0x50000400

08007b6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b6c:	b590      	push	{r4, r7, lr}
 8007b6e:	b099      	sub	sp, #100	@ 0x64
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b74:	234c      	movs	r3, #76	@ 0x4c
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	0018      	movs	r0, r3
 8007b7a:	2314      	movs	r3, #20
 8007b7c:	001a      	movs	r2, r3
 8007b7e:	2100      	movs	r1, #0
 8007b80:	f004 f950 	bl	800be24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b84:	2418      	movs	r4, #24
 8007b86:	193b      	adds	r3, r7, r4
 8007b88:	0018      	movs	r0, r3
 8007b8a:	2334      	movs	r3, #52	@ 0x34
 8007b8c:	001a      	movs	r2, r3
 8007b8e:	2100      	movs	r1, #0
 8007b90:	f004 f948 	bl	800be24 <memset>
  if(huart->Instance==USART2)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a3e      	ldr	r2, [pc, #248]	@ (8007c94 <HAL_UART_MspInit+0x128>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d13f      	bne.n	8007c1e <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007b9e:	193b      	adds	r3, r7, r4
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007ba4:	193b      	adds	r3, r7, r4
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007baa:	193b      	adds	r3, r7, r4
 8007bac:	0018      	movs	r0, r3
 8007bae:	f002 f825 	bl	8009bfc <HAL_RCCEx_PeriphCLKConfig>
 8007bb2:	1e03      	subs	r3, r0, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007bb6:	f7ff ff4d 	bl	8007a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007bba:	4b37      	ldr	r3, [pc, #220]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bbe:	4b36      	ldr	r3, [pc, #216]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007bc0:	2180      	movs	r1, #128	@ 0x80
 8007bc2:	0289      	lsls	r1, r1, #10
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007bc8:	4b33      	ldr	r3, [pc, #204]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007bca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bcc:	2380      	movs	r3, #128	@ 0x80
 8007bce:	029b      	lsls	r3, r3, #10
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bd6:	4b30      	ldr	r3, [pc, #192]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bda:	4b2f      	ldr	r3, [pc, #188]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007bdc:	2101      	movs	r1, #1
 8007bde:	430a      	orrs	r2, r1
 8007be0:	635a      	str	r2, [r3, #52]	@ 0x34
 8007be2:	4b2d      	ldr	r3, [pc, #180]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be6:	2201      	movs	r2, #1
 8007be8:	4013      	ands	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
 8007bec:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8007bee:	214c      	movs	r1, #76	@ 0x4c
 8007bf0:	187b      	adds	r3, r7, r1
 8007bf2:	220c      	movs	r2, #12
 8007bf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf6:	187b      	adds	r3, r7, r1
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007bfc:	187b      	adds	r3, r7, r1
 8007bfe:	2201      	movs	r2, #1
 8007c00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c02:	187b      	adds	r3, r7, r1
 8007c04:	2200      	movs	r2, #0
 8007c06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007c08:	187b      	adds	r3, r7, r1
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c0e:	187a      	adds	r2, r7, r1
 8007c10:	23a0      	movs	r3, #160	@ 0xa0
 8007c12:	05db      	lsls	r3, r3, #23
 8007c14:	0011      	movs	r1, r2
 8007c16:	0018      	movs	r0, r3
 8007c18:	f000 faa8 	bl	800816c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART4_MspInit 1 */

    /* USER CODE END USART4_MspInit 1 */
  }

}
 8007c1c:	e035      	b.n	8007c8a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART4)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a1e      	ldr	r2, [pc, #120]	@ (8007c9c <HAL_UART_MspInit+0x130>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d130      	bne.n	8007c8a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8007c28:	4b1b      	ldr	r3, [pc, #108]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007c2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007c2e:	2180      	movs	r1, #128	@ 0x80
 8007c30:	0309      	lsls	r1, r1, #12
 8007c32:	430a      	orrs	r2, r1
 8007c34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007c36:	4b18      	ldr	r3, [pc, #96]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c3a:	2380      	movs	r3, #128	@ 0x80
 8007c3c:	031b      	lsls	r3, r3, #12
 8007c3e:	4013      	ands	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c44:	4b14      	ldr	r3, [pc, #80]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c48:	4b13      	ldr	r3, [pc, #76]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007c50:	4b11      	ldr	r3, [pc, #68]	@ (8007c98 <HAL_UART_MspInit+0x12c>)
 8007c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c54:	2201      	movs	r2, #1
 8007c56:	4013      	ands	r3, r2
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007c5c:	214c      	movs	r1, #76	@ 0x4c
 8007c5e:	187b      	adds	r3, r7, r1
 8007c60:	2203      	movs	r2, #3
 8007c62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c64:	187b      	adds	r3, r7, r1
 8007c66:	2202      	movs	r2, #2
 8007c68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c6a:	187b      	adds	r3, r7, r1
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c70:	187b      	adds	r3, r7, r1
 8007c72:	2200      	movs	r2, #0
 8007c74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8007c76:	187b      	adds	r3, r7, r1
 8007c78:	2204      	movs	r2, #4
 8007c7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c7c:	187a      	adds	r2, r7, r1
 8007c7e:	23a0      	movs	r3, #160	@ 0xa0
 8007c80:	05db      	lsls	r3, r3, #23
 8007c82:	0011      	movs	r1, r2
 8007c84:	0018      	movs	r0, r3
 8007c86:	f000 fa71 	bl	800816c <HAL_GPIO_Init>
}
 8007c8a:	46c0      	nop			@ (mov r8, r8)
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	b019      	add	sp, #100	@ 0x64
 8007c90:	bd90      	pop	{r4, r7, pc}
 8007c92:	46c0      	nop			@ (mov r8, r8)
 8007c94:	40004400 	.word	0x40004400
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	40004c00 	.word	0x40004c00

08007ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007ca4:	46c0      	nop			@ (mov r8, r8)
 8007ca6:	e7fd      	b.n	8007ca4 <NMI_Handler+0x4>

08007ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007cac:	46c0      	nop			@ (mov r8, r8)
 8007cae:	e7fd      	b.n	8007cac <HardFault_Handler+0x4>

08007cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007cb4:	46c0      	nop			@ (mov r8, r8)
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007cbe:	46c0      	nop			@ (mov r8, r8)
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007cc8:	f000 f95c 	bl	8007f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ccc:	46c0      	nop			@ (mov r8, r8)
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	af00      	add	r7, sp, #0
  return 1;
 8007cd6:	2301      	movs	r3, #1
}
 8007cd8:	0018      	movs	r0, r3
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <_kill>:

int _kill(int pid, int sig)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007ce8:	f004 f964 	bl	800bfb4 <__errno>
 8007cec:	0003      	movs	r3, r0
 8007cee:	2216      	movs	r2, #22
 8007cf0:	601a      	str	r2, [r3, #0]
  return -1;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	425b      	negs	r3, r3
}
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	b002      	add	sp, #8
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <_exit>:

void _exit (int status)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007d06:	2301      	movs	r3, #1
 8007d08:	425a      	negs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	0011      	movs	r1, r2
 8007d0e:	0018      	movs	r0, r3
 8007d10:	f7ff ffe5 	bl	8007cde <_kill>
  while (1) {}    /* Make sure we hang here */
 8007d14:	46c0      	nop			@ (mov r8, r8)
 8007d16:	e7fd      	b.n	8007d14 <_exit+0x16>

08007d18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d24:	2300      	movs	r3, #0
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	e00a      	b.n	8007d40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007d2a:	e000      	b.n	8007d2e <_read+0x16>
 8007d2c:	bf00      	nop
 8007d2e:	0001      	movs	r1, r0
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	60ba      	str	r2, [r7, #8]
 8007d36:	b2ca      	uxtb	r2, r1
 8007d38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	dbf0      	blt.n	8007d2a <_read+0x12>
  }

  return len;
 8007d48:	687b      	ldr	r3, [r7, #4]
}
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	b006      	add	sp, #24
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b086      	sub	sp, #24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e009      	b.n	8007d78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	60ba      	str	r2, [r7, #8]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	e000      	b.n	8007d72 <_write+0x20>
 8007d70:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	3301      	adds	r3, #1
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	dbf1      	blt.n	8007d64 <_write+0x12>
  }
  return len;
 8007d80:	687b      	ldr	r3, [r7, #4]
}
 8007d82:	0018      	movs	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	b006      	add	sp, #24
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <_close>:

int _close(int file)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007d92:	2301      	movs	r3, #1
 8007d94:	425b      	negs	r3, r3
}
 8007d96:	0018      	movs	r0, r3
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	b002      	add	sp, #8
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2280      	movs	r2, #128	@ 0x80
 8007dac:	0192      	lsls	r2, r2, #6
 8007dae:	605a      	str	r2, [r3, #4]
  return 0;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	0018      	movs	r0, r3
 8007db4:	46bd      	mov	sp, r7
 8007db6:	b002      	add	sp, #8
 8007db8:	bd80      	pop	{r7, pc}

08007dba <_isatty>:

int _isatty(int file)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007dc2:	2301      	movs	r3, #1
}
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b002      	add	sp, #8
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	0018      	movs	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	b004      	add	sp, #16
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007dec:	4a14      	ldr	r2, [pc, #80]	@ (8007e40 <_sbrk+0x5c>)
 8007dee:	4b15      	ldr	r3, [pc, #84]	@ (8007e44 <_sbrk+0x60>)
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007df8:	4b13      	ldr	r3, [pc, #76]	@ (8007e48 <_sbrk+0x64>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007e00:	4b11      	ldr	r3, [pc, #68]	@ (8007e48 <_sbrk+0x64>)
 8007e02:	4a12      	ldr	r2, [pc, #72]	@ (8007e4c <_sbrk+0x68>)
 8007e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007e06:	4b10      	ldr	r3, [pc, #64]	@ (8007e48 <_sbrk+0x64>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	18d3      	adds	r3, r2, r3
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d207      	bcs.n	8007e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007e14:	f004 f8ce 	bl	800bfb4 <__errno>
 8007e18:	0003      	movs	r3, r0
 8007e1a:	220c      	movs	r2, #12
 8007e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	425b      	negs	r3, r3
 8007e22:	e009      	b.n	8007e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007e24:	4b08      	ldr	r3, [pc, #32]	@ (8007e48 <_sbrk+0x64>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007e2a:	4b07      	ldr	r3, [pc, #28]	@ (8007e48 <_sbrk+0x64>)
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	18d2      	adds	r2, r2, r3
 8007e32:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <_sbrk+0x64>)
 8007e34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007e36:	68fb      	ldr	r3, [r7, #12]
}
 8007e38:	0018      	movs	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b006      	add	sp, #24
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20009000 	.word	0x20009000
 8007e44:	00000400 	.word	0x00000400
 8007e48:	20000440 	.word	0x20000440
 8007e4c:	20000598 	.word	0x20000598

08007e50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007e54:	46c0      	nop			@ (mov r8, r8)
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007e5c:	480d      	ldr	r0, [pc, #52]	@ (8007e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007e5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007e60:	f7ff fff6 	bl	8007e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007e64:	480c      	ldr	r0, [pc, #48]	@ (8007e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8007e66:	490d      	ldr	r1, [pc, #52]	@ (8007e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007e68:	4a0d      	ldr	r2, [pc, #52]	@ (8007ea0 <LoopForever+0xe>)
  movs r3, #0
 8007e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007e6c:	e002      	b.n	8007e74 <LoopCopyDataInit>

08007e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007e72:	3304      	adds	r3, #4

08007e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007e78:	d3f9      	bcc.n	8007e6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8007ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8007ea8 <LoopForever+0x16>)
  movs r3, #0
 8007e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007e80:	e001      	b.n	8007e86 <LoopFillZerobss>

08007e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007e84:	3204      	adds	r2, #4

08007e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007e88:	d3fb      	bcc.n	8007e82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007e8a:	f004 f899 	bl	800bfc0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007e8e:	f7ff faf1 	bl	8007474 <main>

08007e92 <LoopForever>:

LoopForever:
  b LoopForever
 8007e92:	e7fe      	b.n	8007e92 <LoopForever>
  ldr   r0, =_estack
 8007e94:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007e9c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8007ea0:	0800f1d4 	.word	0x0800f1d4
  ldr r2, =_sbss
 8007ea4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8007ea8:	20000594 	.word	0x20000594

08007eac <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007eac:	e7fe      	b.n	8007eac <ADC1_COMP_IRQHandler>
	...

08007eb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007eb6:	1dfb      	adds	r3, r7, #7
 8007eb8:	2200      	movs	r2, #0
 8007eba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8007eec <HAL_Init+0x3c>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8007eec <HAL_Init+0x3c>)
 8007ec2:	2180      	movs	r1, #128	@ 0x80
 8007ec4:	0049      	lsls	r1, r1, #1
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007eca:	2000      	movs	r0, #0
 8007ecc:	f000 f810 	bl	8007ef0 <HAL_InitTick>
 8007ed0:	1e03      	subs	r3, r0, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007ed4:	1dfb      	adds	r3, r7, #7
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	e001      	b.n	8007ee0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007edc:	f7ff fdc0 	bl	8007a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007ee0:	1dfb      	adds	r3, r7, #7
 8007ee2:	781b      	ldrb	r3, [r3, #0]
}
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	b002      	add	sp, #8
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	40022000 	.word	0x40022000

08007ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ef0:	b590      	push	{r4, r7, lr}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007ef8:	230f      	movs	r3, #15
 8007efa:	18fb      	adds	r3, r7, r3
 8007efc:	2200      	movs	r2, #0
 8007efe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8007f00:	4b1d      	ldr	r3, [pc, #116]	@ (8007f78 <HAL_InitTick+0x88>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d02b      	beq.n	8007f60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8007f08:	4b1c      	ldr	r3, [pc, #112]	@ (8007f7c <HAL_InitTick+0x8c>)
 8007f0a:	681c      	ldr	r4, [r3, #0]
 8007f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f78 <HAL_InitTick+0x88>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	0019      	movs	r1, r3
 8007f12:	23fa      	movs	r3, #250	@ 0xfa
 8007f14:	0098      	lsls	r0, r3, #2
 8007f16:	f7f8 f91b 	bl	8000150 <__udivsi3>
 8007f1a:	0003      	movs	r3, r0
 8007f1c:	0019      	movs	r1, r3
 8007f1e:	0020      	movs	r0, r4
 8007f20:	f7f8 f916 	bl	8000150 <__udivsi3>
 8007f24:	0003      	movs	r3, r0
 8007f26:	0018      	movs	r0, r3
 8007f28:	f000 f913 	bl	8008152 <HAL_SYSTICK_Config>
 8007f2c:	1e03      	subs	r3, r0, #0
 8007f2e:	d112      	bne.n	8007f56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d80a      	bhi.n	8007f4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	2301      	movs	r3, #1
 8007f3a:	425b      	negs	r3, r3
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f000 f8f2 	bl	8008128 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007f44:	4b0e      	ldr	r3, [pc, #56]	@ (8007f80 <HAL_InitTick+0x90>)
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	e00d      	b.n	8007f68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8007f4c:	230f      	movs	r3, #15
 8007f4e:	18fb      	adds	r3, r7, r3
 8007f50:	2201      	movs	r2, #1
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	e008      	b.n	8007f68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007f56:	230f      	movs	r3, #15
 8007f58:	18fb      	adds	r3, r7, r3
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	701a      	strb	r2, [r3, #0]
 8007f5e:	e003      	b.n	8007f68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007f60:	230f      	movs	r3, #15
 8007f62:	18fb      	adds	r3, r7, r3
 8007f64:	2201      	movs	r2, #1
 8007f66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007f68:	230f      	movs	r3, #15
 8007f6a:	18fb      	adds	r3, r7, r3
 8007f6c:	781b      	ldrb	r3, [r3, #0]
}
 8007f6e:	0018      	movs	r0, r3
 8007f70:	46bd      	mov	sp, r7
 8007f72:	b005      	add	sp, #20
 8007f74:	bd90      	pop	{r4, r7, pc}
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	20000008 	.word	0x20000008
 8007f7c:	20000000 	.word	0x20000000
 8007f80:	20000004 	.word	0x20000004

08007f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007f88:	4b05      	ldr	r3, [pc, #20]	@ (8007fa0 <HAL_IncTick+0x1c>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	001a      	movs	r2, r3
 8007f8e:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <HAL_IncTick+0x20>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	18d2      	adds	r2, r2, r3
 8007f94:	4b03      	ldr	r3, [pc, #12]	@ (8007fa4 <HAL_IncTick+0x20>)
 8007f96:	601a      	str	r2, [r3, #0]
}
 8007f98:	46c0      	nop			@ (mov r8, r8)
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	46c0      	nop			@ (mov r8, r8)
 8007fa0:	20000008 	.word	0x20000008
 8007fa4:	20000444 	.word	0x20000444

08007fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  return uwTick;
 8007fac:	4b02      	ldr	r3, [pc, #8]	@ (8007fb8 <HAL_GetTick+0x10>)
 8007fae:	681b      	ldr	r3, [r3, #0]
}
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	46c0      	nop			@ (mov r8, r8)
 8007fb8:	20000444 	.word	0x20000444

08007fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007fc4:	f7ff fff0 	bl	8007fa8 <HAL_GetTick>
 8007fc8:	0003      	movs	r3, r0
 8007fca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	d005      	beq.n	8007fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008000 <HAL_Delay+0x44>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	001a      	movs	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	189b      	adds	r3, r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007fe2:	46c0      	nop			@ (mov r8, r8)
 8007fe4:	f7ff ffe0 	bl	8007fa8 <HAL_GetTick>
 8007fe8:	0002      	movs	r2, r0
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d8f7      	bhi.n	8007fe4 <HAL_Delay+0x28>
  {
  }
}
 8007ff4:	46c0      	nop			@ (mov r8, r8)
 8007ff6:	46c0      	nop			@ (mov r8, r8)
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	b004      	add	sp, #16
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	46c0      	nop			@ (mov r8, r8)
 8008000:	20000008 	.word	0x20000008

08008004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008004:	b590      	push	{r4, r7, lr}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	0002      	movs	r2, r0
 800800c:	6039      	str	r1, [r7, #0]
 800800e:	1dfb      	adds	r3, r7, #7
 8008010:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008012:	1dfb      	adds	r3, r7, #7
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b7f      	cmp	r3, #127	@ 0x7f
 8008018:	d828      	bhi.n	800806c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800801a:	4a2f      	ldr	r2, [pc, #188]	@ (80080d8 <__NVIC_SetPriority+0xd4>)
 800801c:	1dfb      	adds	r3, r7, #7
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	b25b      	sxtb	r3, r3
 8008022:	089b      	lsrs	r3, r3, #2
 8008024:	33c0      	adds	r3, #192	@ 0xc0
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	589b      	ldr	r3, [r3, r2]
 800802a:	1dfa      	adds	r2, r7, #7
 800802c:	7812      	ldrb	r2, [r2, #0]
 800802e:	0011      	movs	r1, r2
 8008030:	2203      	movs	r2, #3
 8008032:	400a      	ands	r2, r1
 8008034:	00d2      	lsls	r2, r2, #3
 8008036:	21ff      	movs	r1, #255	@ 0xff
 8008038:	4091      	lsls	r1, r2
 800803a:	000a      	movs	r2, r1
 800803c:	43d2      	mvns	r2, r2
 800803e:	401a      	ands	r2, r3
 8008040:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	019b      	lsls	r3, r3, #6
 8008046:	22ff      	movs	r2, #255	@ 0xff
 8008048:	401a      	ands	r2, r3
 800804a:	1dfb      	adds	r3, r7, #7
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	0018      	movs	r0, r3
 8008050:	2303      	movs	r3, #3
 8008052:	4003      	ands	r3, r0
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008058:	481f      	ldr	r0, [pc, #124]	@ (80080d8 <__NVIC_SetPriority+0xd4>)
 800805a:	1dfb      	adds	r3, r7, #7
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	b25b      	sxtb	r3, r3
 8008060:	089b      	lsrs	r3, r3, #2
 8008062:	430a      	orrs	r2, r1
 8008064:	33c0      	adds	r3, #192	@ 0xc0
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800806a:	e031      	b.n	80080d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800806c:	4a1b      	ldr	r2, [pc, #108]	@ (80080dc <__NVIC_SetPriority+0xd8>)
 800806e:	1dfb      	adds	r3, r7, #7
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	0019      	movs	r1, r3
 8008074:	230f      	movs	r3, #15
 8008076:	400b      	ands	r3, r1
 8008078:	3b08      	subs	r3, #8
 800807a:	089b      	lsrs	r3, r3, #2
 800807c:	3306      	adds	r3, #6
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	18d3      	adds	r3, r2, r3
 8008082:	3304      	adds	r3, #4
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	1dfa      	adds	r2, r7, #7
 8008088:	7812      	ldrb	r2, [r2, #0]
 800808a:	0011      	movs	r1, r2
 800808c:	2203      	movs	r2, #3
 800808e:	400a      	ands	r2, r1
 8008090:	00d2      	lsls	r2, r2, #3
 8008092:	21ff      	movs	r1, #255	@ 0xff
 8008094:	4091      	lsls	r1, r2
 8008096:	000a      	movs	r2, r1
 8008098:	43d2      	mvns	r2, r2
 800809a:	401a      	ands	r2, r3
 800809c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	019b      	lsls	r3, r3, #6
 80080a2:	22ff      	movs	r2, #255	@ 0xff
 80080a4:	401a      	ands	r2, r3
 80080a6:	1dfb      	adds	r3, r7, #7
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	0018      	movs	r0, r3
 80080ac:	2303      	movs	r3, #3
 80080ae:	4003      	ands	r3, r0
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080b4:	4809      	ldr	r0, [pc, #36]	@ (80080dc <__NVIC_SetPriority+0xd8>)
 80080b6:	1dfb      	adds	r3, r7, #7
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	001c      	movs	r4, r3
 80080bc:	230f      	movs	r3, #15
 80080be:	4023      	ands	r3, r4
 80080c0:	3b08      	subs	r3, #8
 80080c2:	089b      	lsrs	r3, r3, #2
 80080c4:	430a      	orrs	r2, r1
 80080c6:	3306      	adds	r3, #6
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	18c3      	adds	r3, r0, r3
 80080cc:	3304      	adds	r3, #4
 80080ce:	601a      	str	r2, [r3, #0]
}
 80080d0:	46c0      	nop			@ (mov r8, r8)
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b003      	add	sp, #12
 80080d6:	bd90      	pop	{r4, r7, pc}
 80080d8:	e000e100 	.word	0xe000e100
 80080dc:	e000ed00 	.word	0xe000ed00

080080e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	1e5a      	subs	r2, r3, #1
 80080ec:	2380      	movs	r3, #128	@ 0x80
 80080ee:	045b      	lsls	r3, r3, #17
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d301      	bcc.n	80080f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080f4:	2301      	movs	r3, #1
 80080f6:	e010      	b.n	800811a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008124 <SysTick_Config+0x44>)
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	3a01      	subs	r2, #1
 80080fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008100:	2301      	movs	r3, #1
 8008102:	425b      	negs	r3, r3
 8008104:	2103      	movs	r1, #3
 8008106:	0018      	movs	r0, r3
 8008108:	f7ff ff7c 	bl	8008004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800810c:	4b05      	ldr	r3, [pc, #20]	@ (8008124 <SysTick_Config+0x44>)
 800810e:	2200      	movs	r2, #0
 8008110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008112:	4b04      	ldr	r3, [pc, #16]	@ (8008124 <SysTick_Config+0x44>)
 8008114:	2207      	movs	r2, #7
 8008116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008118:	2300      	movs	r3, #0
}
 800811a:	0018      	movs	r0, r3
 800811c:	46bd      	mov	sp, r7
 800811e:	b002      	add	sp, #8
 8008120:	bd80      	pop	{r7, pc}
 8008122:	46c0      	nop			@ (mov r8, r8)
 8008124:	e000e010 	.word	0xe000e010

08008128 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
 8008132:	210f      	movs	r1, #15
 8008134:	187b      	adds	r3, r7, r1
 8008136:	1c02      	adds	r2, r0, #0
 8008138:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	187b      	adds	r3, r7, r1
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	b25b      	sxtb	r3, r3
 8008142:	0011      	movs	r1, r2
 8008144:	0018      	movs	r0, r3
 8008146:	f7ff ff5d 	bl	8008004 <__NVIC_SetPriority>
}
 800814a:	46c0      	nop			@ (mov r8, r8)
 800814c:	46bd      	mov	sp, r7
 800814e:	b004      	add	sp, #16
 8008150:	bd80      	pop	{r7, pc}

08008152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	0018      	movs	r0, r3
 800815e:	f7ff ffbf 	bl	80080e0 <SysTick_Config>
 8008162:	0003      	movs	r3, r0
}
 8008164:	0018      	movs	r0, r3
 8008166:	46bd      	mov	sp, r7
 8008168:	b002      	add	sp, #8
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008176:	2300      	movs	r3, #0
 8008178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800817a:	e147      	b.n	800840c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2101      	movs	r1, #1
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	4091      	lsls	r1, r2
 8008186:	000a      	movs	r2, r1
 8008188:	4013      	ands	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d100      	bne.n	8008194 <HAL_GPIO_Init+0x28>
 8008192:	e138      	b.n	8008406 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2203      	movs	r2, #3
 800819a:	4013      	ands	r3, r2
 800819c:	2b01      	cmp	r3, #1
 800819e:	d005      	beq.n	80081ac <HAL_GPIO_Init+0x40>
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2203      	movs	r2, #3
 80081a6:	4013      	ands	r3, r2
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d130      	bne.n	800820e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	2203      	movs	r2, #3
 80081b8:	409a      	lsls	r2, r3
 80081ba:	0013      	movs	r3, r2
 80081bc:	43da      	mvns	r2, r3
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	4013      	ands	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	409a      	lsls	r2, r3
 80081ce:	0013      	movs	r3, r2
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081e2:	2201      	movs	r2, #1
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	409a      	lsls	r2, r3
 80081e8:	0013      	movs	r3, r2
 80081ea:	43da      	mvns	r2, r3
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	4013      	ands	r3, r2
 80081f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	091b      	lsrs	r3, r3, #4
 80081f8:	2201      	movs	r2, #1
 80081fa:	401a      	ands	r2, r3
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	409a      	lsls	r2, r3
 8008200:	0013      	movs	r3, r2
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4313      	orrs	r3, r2
 8008206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2203      	movs	r2, #3
 8008214:	4013      	ands	r3, r2
 8008216:	2b03      	cmp	r3, #3
 8008218:	d017      	beq.n	800824a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	2203      	movs	r2, #3
 8008226:	409a      	lsls	r2, r3
 8008228:	0013      	movs	r3, r2
 800822a:	43da      	mvns	r2, r3
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	4013      	ands	r3, r2
 8008230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	409a      	lsls	r2, r3
 800823c:	0013      	movs	r3, r2
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2203      	movs	r2, #3
 8008250:	4013      	ands	r3, r2
 8008252:	2b02      	cmp	r3, #2
 8008254:	d123      	bne.n	800829e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	08da      	lsrs	r2, r3, #3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3208      	adds	r2, #8
 800825e:	0092      	lsls	r2, r2, #2
 8008260:	58d3      	ldr	r3, [r2, r3]
 8008262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2207      	movs	r2, #7
 8008268:	4013      	ands	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	220f      	movs	r2, #15
 800826e:	409a      	lsls	r2, r3
 8008270:	0013      	movs	r3, r2
 8008272:	43da      	mvns	r2, r3
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	4013      	ands	r3, r2
 8008278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2107      	movs	r1, #7
 8008282:	400b      	ands	r3, r1
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	409a      	lsls	r2, r3
 8008288:	0013      	movs	r3, r2
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	08da      	lsrs	r2, r3, #3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3208      	adds	r2, #8
 8008298:	0092      	lsls	r2, r2, #2
 800829a:	6939      	ldr	r1, [r7, #16]
 800829c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	2203      	movs	r2, #3
 80082aa:	409a      	lsls	r2, r3
 80082ac:	0013      	movs	r3, r2
 80082ae:	43da      	mvns	r2, r3
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	4013      	ands	r3, r2
 80082b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2203      	movs	r2, #3
 80082bc:	401a      	ands	r2, r3
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	409a      	lsls	r2, r3
 80082c4:	0013      	movs	r3, r2
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	23c0      	movs	r3, #192	@ 0xc0
 80082d8:	029b      	lsls	r3, r3, #10
 80082da:	4013      	ands	r3, r2
 80082dc:	d100      	bne.n	80082e0 <HAL_GPIO_Init+0x174>
 80082de:	e092      	b.n	8008406 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80082e0:	4a50      	ldr	r2, [pc, #320]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	089b      	lsrs	r3, r3, #2
 80082e6:	3318      	adds	r3, #24
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	589b      	ldr	r3, [r3, r2]
 80082ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2203      	movs	r2, #3
 80082f2:	4013      	ands	r3, r2
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	220f      	movs	r2, #15
 80082f8:	409a      	lsls	r2, r3
 80082fa:	0013      	movs	r3, r2
 80082fc:	43da      	mvns	r2, r3
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	4013      	ands	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	23a0      	movs	r3, #160	@ 0xa0
 8008308:	05db      	lsls	r3, r3, #23
 800830a:	429a      	cmp	r2, r3
 800830c:	d013      	beq.n	8008336 <HAL_GPIO_Init+0x1ca>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a45      	ldr	r2, [pc, #276]	@ (8008428 <HAL_GPIO_Init+0x2bc>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00d      	beq.n	8008332 <HAL_GPIO_Init+0x1c6>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a44      	ldr	r2, [pc, #272]	@ (800842c <HAL_GPIO_Init+0x2c0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d007      	beq.n	800832e <HAL_GPIO_Init+0x1c2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a43      	ldr	r2, [pc, #268]	@ (8008430 <HAL_GPIO_Init+0x2c4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d101      	bne.n	800832a <HAL_GPIO_Init+0x1be>
 8008326:	2303      	movs	r3, #3
 8008328:	e006      	b.n	8008338 <HAL_GPIO_Init+0x1cc>
 800832a:	2305      	movs	r3, #5
 800832c:	e004      	b.n	8008338 <HAL_GPIO_Init+0x1cc>
 800832e:	2302      	movs	r3, #2
 8008330:	e002      	b.n	8008338 <HAL_GPIO_Init+0x1cc>
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <HAL_GPIO_Init+0x1cc>
 8008336:	2300      	movs	r3, #0
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	2103      	movs	r1, #3
 800833c:	400a      	ands	r2, r1
 800833e:	00d2      	lsls	r2, r2, #3
 8008340:	4093      	lsls	r3, r2
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008348:	4936      	ldr	r1, [pc, #216]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	089b      	lsrs	r3, r3, #2
 800834e:	3318      	adds	r3, #24
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008356:	4b33      	ldr	r3, [pc, #204]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	43da      	mvns	r2, r3
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4013      	ands	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	2380      	movs	r3, #128	@ 0x80
 800836c:	035b      	lsls	r3, r3, #13
 800836e:	4013      	ands	r3, r2
 8008370:	d003      	beq.n	800837a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800837a:	4b2a      	ldr	r3, [pc, #168]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008380:	4b28      	ldr	r3, [pc, #160]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	43da      	mvns	r2, r3
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4013      	ands	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	2380      	movs	r3, #128	@ 0x80
 8008396:	039b      	lsls	r3, r3, #14
 8008398:	4013      	ands	r3, r2
 800839a:	d003      	beq.n	80083a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80083a4:	4b1f      	ldr	r3, [pc, #124]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80083aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 80083ac:	2384      	movs	r3, #132	@ 0x84
 80083ae:	58d3      	ldr	r3, [r2, r3]
 80083b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	43da      	mvns	r2, r3
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	4013      	ands	r3, r2
 80083ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	2380      	movs	r3, #128	@ 0x80
 80083c2:	029b      	lsls	r3, r3, #10
 80083c4:	4013      	ands	r3, r2
 80083c6:	d003      	beq.n	80083d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80083d0:	4914      	ldr	r1, [pc, #80]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 80083d2:	2284      	movs	r2, #132	@ 0x84
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80083d8:	4a12      	ldr	r2, [pc, #72]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 80083da:	2380      	movs	r3, #128	@ 0x80
 80083dc:	58d3      	ldr	r3, [r2, r3]
 80083de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	43da      	mvns	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	4013      	ands	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	2380      	movs	r3, #128	@ 0x80
 80083f0:	025b      	lsls	r3, r3, #9
 80083f2:	4013      	ands	r3, r2
 80083f4:	d003      	beq.n	80083fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80083fe:	4909      	ldr	r1, [pc, #36]	@ (8008424 <HAL_GPIO_Init+0x2b8>)
 8008400:	2280      	movs	r2, #128	@ 0x80
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	3301      	adds	r3, #1
 800840a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	40da      	lsrs	r2, r3
 8008414:	1e13      	subs	r3, r2, #0
 8008416:	d000      	beq.n	800841a <HAL_GPIO_Init+0x2ae>
 8008418:	e6b0      	b.n	800817c <HAL_GPIO_Init+0x10>
  }
}
 800841a:	46c0      	nop			@ (mov r8, r8)
 800841c:	46c0      	nop			@ (mov r8, r8)
 800841e:	46bd      	mov	sp, r7
 8008420:	b006      	add	sp, #24
 8008422:	bd80      	pop	{r7, pc}
 8008424:	40021800 	.word	0x40021800
 8008428:	50000400 	.word	0x50000400
 800842c:	50000800 	.word	0x50000800
 8008430:	50000c00 	.word	0x50000c00

08008434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	0008      	movs	r0, r1
 800843e:	0011      	movs	r1, r2
 8008440:	1cbb      	adds	r3, r7, #2
 8008442:	1c02      	adds	r2, r0, #0
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	1c7b      	adds	r3, r7, #1
 8008448:	1c0a      	adds	r2, r1, #0
 800844a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800844c:	1c7b      	adds	r3, r7, #1
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008454:	1cbb      	adds	r3, r7, #2
 8008456:	881a      	ldrh	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800845c:	e003      	b.n	8008466 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800845e:	1cbb      	adds	r3, r7, #2
 8008460:	881a      	ldrh	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008466:	46c0      	nop			@ (mov r8, r8)
 8008468:	46bd      	mov	sp, r7
 800846a:	b002      	add	sp, #8
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	000a      	movs	r2, r1
 8008478:	1cbb      	adds	r3, r7, #2
 800847a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008482:	1cbb      	adds	r3, r7, #2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4013      	ands	r3, r2
 800848a:	041a      	lsls	r2, r3, #16
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	43db      	mvns	r3, r3
 8008490:	1cb9      	adds	r1, r7, #2
 8008492:	8809      	ldrh	r1, [r1, #0]
 8008494:	400b      	ands	r3, r1
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	619a      	str	r2, [r3, #24]
}
 800849c:	46c0      	nop			@ (mov r8, r8)
 800849e:	46bd      	mov	sp, r7
 80084a0:	b004      	add	sp, #16
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e08f      	b.n	80085d6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2241      	movs	r2, #65	@ 0x41
 80084ba:	5c9b      	ldrb	r3, [r3, r2]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d107      	bne.n	80084d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2240      	movs	r2, #64	@ 0x40
 80084c6:	2100      	movs	r1, #0
 80084c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	0018      	movs	r0, r3
 80084ce:	f7ff faeb 	bl	8007aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2241      	movs	r2, #65	@ 0x41
 80084d6:	2124      	movs	r1, #36	@ 0x24
 80084d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2101      	movs	r1, #1
 80084e6:	438a      	bics	r2, r1
 80084e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	493b      	ldr	r1, [pc, #236]	@ (80085e0 <HAL_I2C_Init+0x13c>)
 80084f4:	400a      	ands	r2, r1
 80084f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4938      	ldr	r1, [pc, #224]	@ (80085e4 <HAL_I2C_Init+0x140>)
 8008504:	400a      	ands	r2, r1
 8008506:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d108      	bne.n	8008522 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2180      	movs	r1, #128	@ 0x80
 800851a:	0209      	lsls	r1, r1, #8
 800851c:	430a      	orrs	r2, r1
 800851e:	609a      	str	r2, [r3, #8]
 8008520:	e007      	b.n	8008532 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2184      	movs	r1, #132	@ 0x84
 800852c:	0209      	lsls	r1, r1, #8
 800852e:	430a      	orrs	r2, r1
 8008530:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	2b02      	cmp	r3, #2
 8008538:	d109      	bne.n	800854e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2180      	movs	r1, #128	@ 0x80
 8008546:	0109      	lsls	r1, r1, #4
 8008548:	430a      	orrs	r2, r1
 800854a:	605a      	str	r2, [r3, #4]
 800854c:	e007      	b.n	800855e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4923      	ldr	r1, [pc, #140]	@ (80085e8 <HAL_I2C_Init+0x144>)
 800855a:	400a      	ands	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4920      	ldr	r1, [pc, #128]	@ (80085ec <HAL_I2C_Init+0x148>)
 800856a:	430a      	orrs	r2, r1
 800856c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	491a      	ldr	r1, [pc, #104]	@ (80085e4 <HAL_I2C_Init+0x140>)
 800857a:	400a      	ands	r2, r1
 800857c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691a      	ldr	r2, [r3, #16]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	431a      	orrs	r2, r3
 8008588:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	69d9      	ldr	r1, [r3, #28]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1a      	ldr	r2, [r3, #32]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2101      	movs	r1, #1
 80085b4:	430a      	orrs	r2, r1
 80085b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2241      	movs	r2, #65	@ 0x41
 80085c2:	2120      	movs	r1, #32
 80085c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2242      	movs	r2, #66	@ 0x42
 80085d0:	2100      	movs	r1, #0
 80085d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	0018      	movs	r0, r3
 80085d8:	46bd      	mov	sp, r7
 80085da:	b002      	add	sp, #8
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	46c0      	nop			@ (mov r8, r8)
 80085e0:	f0ffffff 	.word	0xf0ffffff
 80085e4:	ffff7fff 	.word	0xffff7fff
 80085e8:	fffff7ff 	.word	0xfffff7ff
 80085ec:	02008000 	.word	0x02008000

080085f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b089      	sub	sp, #36	@ 0x24
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	000c      	movs	r4, r1
 80085fa:	0010      	movs	r0, r2
 80085fc:	0019      	movs	r1, r3
 80085fe:	230a      	movs	r3, #10
 8008600:	18fb      	adds	r3, r7, r3
 8008602:	1c22      	adds	r2, r4, #0
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	2308      	movs	r3, #8
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	1c02      	adds	r2, r0, #0
 800860c:	801a      	strh	r2, [r3, #0]
 800860e:	1dbb      	adds	r3, r7, #6
 8008610:	1c0a      	adds	r2, r1, #0
 8008612:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2241      	movs	r2, #65	@ 0x41
 8008618:	5c9b      	ldrb	r3, [r3, r2]
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b20      	cmp	r3, #32
 800861e:	d000      	beq.n	8008622 <HAL_I2C_Mem_Write+0x32>
 8008620:	e10c      	b.n	800883c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008624:	2b00      	cmp	r3, #0
 8008626:	d004      	beq.n	8008632 <HAL_I2C_Mem_Write+0x42>
 8008628:	232c      	movs	r3, #44	@ 0x2c
 800862a:	18fb      	adds	r3, r7, r3
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d105      	bne.n	800863e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2280      	movs	r2, #128	@ 0x80
 8008636:	0092      	lsls	r2, r2, #2
 8008638:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e0ff      	b.n	800883e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2240      	movs	r2, #64	@ 0x40
 8008642:	5c9b      	ldrb	r3, [r3, r2]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_I2C_Mem_Write+0x5c>
 8008648:	2302      	movs	r3, #2
 800864a:	e0f8      	b.n	800883e <HAL_I2C_Mem_Write+0x24e>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2240      	movs	r2, #64	@ 0x40
 8008650:	2101      	movs	r1, #1
 8008652:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008654:	f7ff fca8 	bl	8007fa8 <HAL_GetTick>
 8008658:	0003      	movs	r3, r0
 800865a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800865c:	2380      	movs	r3, #128	@ 0x80
 800865e:	0219      	lsls	r1, r3, #8
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	2319      	movs	r3, #25
 8008668:	2201      	movs	r2, #1
 800866a:	f000 fb0b 	bl	8008c84 <I2C_WaitOnFlagUntilTimeout>
 800866e:	1e03      	subs	r3, r0, #0
 8008670:	d001      	beq.n	8008676 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e0e3      	b.n	800883e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2241      	movs	r2, #65	@ 0x41
 800867a:	2121      	movs	r1, #33	@ 0x21
 800867c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2242      	movs	r2, #66	@ 0x42
 8008682:	2140      	movs	r1, #64	@ 0x40
 8008684:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008690:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	222c      	movs	r2, #44	@ 0x2c
 8008696:	18ba      	adds	r2, r7, r2
 8008698:	8812      	ldrh	r2, [r2, #0]
 800869a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086a2:	1dbb      	adds	r3, r7, #6
 80086a4:	881c      	ldrh	r4, [r3, #0]
 80086a6:	2308      	movs	r3, #8
 80086a8:	18fb      	adds	r3, r7, r3
 80086aa:	881a      	ldrh	r2, [r3, #0]
 80086ac:	230a      	movs	r3, #10
 80086ae:	18fb      	adds	r3, r7, r3
 80086b0:	8819      	ldrh	r1, [r3, #0]
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	0023      	movs	r3, r4
 80086be:	f000 f9f9 	bl	8008ab4 <I2C_RequestMemoryWrite>
 80086c2:	1e03      	subs	r3, r0, #0
 80086c4:	d005      	beq.n	80086d2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2240      	movs	r2, #64	@ 0x40
 80086ca:	2100      	movs	r1, #0
 80086cc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e0b5      	b.n	800883e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2bff      	cmp	r3, #255	@ 0xff
 80086da:	d911      	bls.n	8008700 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	22ff      	movs	r2, #255	@ 0xff
 80086e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	2380      	movs	r3, #128	@ 0x80
 80086ea:	045c      	lsls	r4, r3, #17
 80086ec:	230a      	movs	r3, #10
 80086ee:	18fb      	adds	r3, r7, r3
 80086f0:	8819      	ldrh	r1, [r3, #0]
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	2300      	movs	r3, #0
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	0023      	movs	r3, r4
 80086fa:	f000 fc9d 	bl	8009038 <I2C_TransferConfig>
 80086fe:	e012      	b.n	8008726 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800870e:	b2da      	uxtb	r2, r3
 8008710:	2380      	movs	r3, #128	@ 0x80
 8008712:	049c      	lsls	r4, r3, #18
 8008714:	230a      	movs	r3, #10
 8008716:	18fb      	adds	r3, r7, r3
 8008718:	8819      	ldrh	r1, [r3, #0]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	0023      	movs	r3, r4
 8008722:	f000 fc89 	bl	8009038 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	0018      	movs	r0, r3
 800872e:	f000 fb01 	bl	8008d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008732:	1e03      	subs	r3, r0, #0
 8008734:	d001      	beq.n	800873a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e081      	b.n	800883e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	781a      	ldrb	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008762:	3b01      	subs	r3, #1
 8008764:	b29a      	uxth	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d03a      	beq.n	80087ea <HAL_I2C_Mem_Write+0x1fa>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008778:	2b00      	cmp	r3, #0
 800877a:	d136      	bne.n	80087ea <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800877c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	0013      	movs	r3, r2
 8008786:	2200      	movs	r2, #0
 8008788:	2180      	movs	r1, #128	@ 0x80
 800878a:	f000 fa7b 	bl	8008c84 <I2C_WaitOnFlagUntilTimeout>
 800878e:	1e03      	subs	r3, r0, #0
 8008790:	d001      	beq.n	8008796 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e053      	b.n	800883e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800879a:	b29b      	uxth	r3, r3
 800879c:	2bff      	cmp	r3, #255	@ 0xff
 800879e:	d911      	bls.n	80087c4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	22ff      	movs	r2, #255	@ 0xff
 80087a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	2380      	movs	r3, #128	@ 0x80
 80087ae:	045c      	lsls	r4, r3, #17
 80087b0:	230a      	movs	r3, #10
 80087b2:	18fb      	adds	r3, r7, r3
 80087b4:	8819      	ldrh	r1, [r3, #0]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	2300      	movs	r3, #0
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	0023      	movs	r3, r4
 80087be:	f000 fc3b 	bl	8009038 <I2C_TransferConfig>
 80087c2:	e012      	b.n	80087ea <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	2380      	movs	r3, #128	@ 0x80
 80087d6:	049c      	lsls	r4, r3, #18
 80087d8:	230a      	movs	r3, #10
 80087da:	18fb      	adds	r3, r7, r3
 80087dc:	8819      	ldrh	r1, [r3, #0]
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	2300      	movs	r3, #0
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	0023      	movs	r3, r4
 80087e6:	f000 fc27 	bl	8009038 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d198      	bne.n	8008726 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	0018      	movs	r0, r3
 80087fc:	f000 fae0 	bl	8008dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008800:	1e03      	subs	r3, r0, #0
 8008802:	d001      	beq.n	8008808 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e01a      	b.n	800883e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2220      	movs	r2, #32
 800880e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	490b      	ldr	r1, [pc, #44]	@ (8008848 <HAL_I2C_Mem_Write+0x258>)
 800881c:	400a      	ands	r2, r1
 800881e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2241      	movs	r2, #65	@ 0x41
 8008824:	2120      	movs	r1, #32
 8008826:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2242      	movs	r2, #66	@ 0x42
 800882c:	2100      	movs	r1, #0
 800882e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2240      	movs	r2, #64	@ 0x40
 8008834:	2100      	movs	r1, #0
 8008836:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	e000      	b.n	800883e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800883c:	2302      	movs	r3, #2
  }
}
 800883e:	0018      	movs	r0, r3
 8008840:	46bd      	mov	sp, r7
 8008842:	b007      	add	sp, #28
 8008844:	bd90      	pop	{r4, r7, pc}
 8008846:	46c0      	nop			@ (mov r8, r8)
 8008848:	fe00e800 	.word	0xfe00e800

0800884c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800884c:	b590      	push	{r4, r7, lr}
 800884e:	b089      	sub	sp, #36	@ 0x24
 8008850:	af02      	add	r7, sp, #8
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	000c      	movs	r4, r1
 8008856:	0010      	movs	r0, r2
 8008858:	0019      	movs	r1, r3
 800885a:	230a      	movs	r3, #10
 800885c:	18fb      	adds	r3, r7, r3
 800885e:	1c22      	adds	r2, r4, #0
 8008860:	801a      	strh	r2, [r3, #0]
 8008862:	2308      	movs	r3, #8
 8008864:	18fb      	adds	r3, r7, r3
 8008866:	1c02      	adds	r2, r0, #0
 8008868:	801a      	strh	r2, [r3, #0]
 800886a:	1dbb      	adds	r3, r7, #6
 800886c:	1c0a      	adds	r2, r1, #0
 800886e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2241      	movs	r2, #65	@ 0x41
 8008874:	5c9b      	ldrb	r3, [r3, r2]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b20      	cmp	r3, #32
 800887a:	d000      	beq.n	800887e <HAL_I2C_Mem_Read+0x32>
 800887c:	e110      	b.n	8008aa0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <HAL_I2C_Mem_Read+0x42>
 8008884:	232c      	movs	r3, #44	@ 0x2c
 8008886:	18fb      	adds	r3, r7, r3
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2280      	movs	r2, #128	@ 0x80
 8008892:	0092      	lsls	r2, r2, #2
 8008894:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e103      	b.n	8008aa2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2240      	movs	r2, #64	@ 0x40
 800889e:	5c9b      	ldrb	r3, [r3, r2]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d101      	bne.n	80088a8 <HAL_I2C_Mem_Read+0x5c>
 80088a4:	2302      	movs	r3, #2
 80088a6:	e0fc      	b.n	8008aa2 <HAL_I2C_Mem_Read+0x256>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2240      	movs	r2, #64	@ 0x40
 80088ac:	2101      	movs	r1, #1
 80088ae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088b0:	f7ff fb7a 	bl	8007fa8 <HAL_GetTick>
 80088b4:	0003      	movs	r3, r0
 80088b6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088b8:	2380      	movs	r3, #128	@ 0x80
 80088ba:	0219      	lsls	r1, r3, #8
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	2319      	movs	r3, #25
 80088c4:	2201      	movs	r2, #1
 80088c6:	f000 f9dd 	bl	8008c84 <I2C_WaitOnFlagUntilTimeout>
 80088ca:	1e03      	subs	r3, r0, #0
 80088cc:	d001      	beq.n	80088d2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e0e7      	b.n	8008aa2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2241      	movs	r2, #65	@ 0x41
 80088d6:	2122      	movs	r1, #34	@ 0x22
 80088d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2242      	movs	r2, #66	@ 0x42
 80088de:	2140      	movs	r1, #64	@ 0x40
 80088e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	222c      	movs	r2, #44	@ 0x2c
 80088f2:	18ba      	adds	r2, r7, r2
 80088f4:	8812      	ldrh	r2, [r2, #0]
 80088f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088fe:	1dbb      	adds	r3, r7, #6
 8008900:	881c      	ldrh	r4, [r3, #0]
 8008902:	2308      	movs	r3, #8
 8008904:	18fb      	adds	r3, r7, r3
 8008906:	881a      	ldrh	r2, [r3, #0]
 8008908:	230a      	movs	r3, #10
 800890a:	18fb      	adds	r3, r7, r3
 800890c:	8819      	ldrh	r1, [r3, #0]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	0023      	movs	r3, r4
 800891a:	f000 f92f 	bl	8008b7c <I2C_RequestMemoryRead>
 800891e:	1e03      	subs	r3, r0, #0
 8008920:	d005      	beq.n	800892e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2240      	movs	r2, #64	@ 0x40
 8008926:	2100      	movs	r1, #0
 8008928:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e0b9      	b.n	8008aa2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008932:	b29b      	uxth	r3, r3
 8008934:	2bff      	cmp	r3, #255	@ 0xff
 8008936:	d911      	bls.n	800895c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	22ff      	movs	r2, #255	@ 0xff
 800893c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008942:	b2da      	uxtb	r2, r3
 8008944:	2380      	movs	r3, #128	@ 0x80
 8008946:	045c      	lsls	r4, r3, #17
 8008948:	230a      	movs	r3, #10
 800894a:	18fb      	adds	r3, r7, r3
 800894c:	8819      	ldrh	r1, [r3, #0]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	4b56      	ldr	r3, [pc, #344]	@ (8008aac <HAL_I2C_Mem_Read+0x260>)
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	0023      	movs	r3, r4
 8008956:	f000 fb6f 	bl	8009038 <I2C_TransferConfig>
 800895a:	e012      	b.n	8008982 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008960:	b29a      	uxth	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800896a:	b2da      	uxtb	r2, r3
 800896c:	2380      	movs	r3, #128	@ 0x80
 800896e:	049c      	lsls	r4, r3, #18
 8008970:	230a      	movs	r3, #10
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	8819      	ldrh	r1, [r3, #0]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	4b4c      	ldr	r3, [pc, #304]	@ (8008aac <HAL_I2C_Mem_Read+0x260>)
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	0023      	movs	r3, r4
 800897e:	f000 fb5b 	bl	8009038 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	0013      	movs	r3, r2
 800898c:	2200      	movs	r2, #0
 800898e:	2104      	movs	r1, #4
 8008990:	f000 f978 	bl	8008c84 <I2C_WaitOnFlagUntilTimeout>
 8008994:	1e03      	subs	r3, r0, #0
 8008996:	d001      	beq.n	800899c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e082      	b.n	8008aa2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b8:	3b01      	subs	r3, #1
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d03a      	beq.n	8008a4e <HAL_I2C_Mem_Read+0x202>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d136      	bne.n	8008a4e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	0013      	movs	r3, r2
 80089ea:	2200      	movs	r2, #0
 80089ec:	2180      	movs	r1, #128	@ 0x80
 80089ee:	f000 f949 	bl	8008c84 <I2C_WaitOnFlagUntilTimeout>
 80089f2:	1e03      	subs	r3, r0, #0
 80089f4:	d001      	beq.n	80089fa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e053      	b.n	8008aa2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	2bff      	cmp	r3, #255	@ 0xff
 8008a02:	d911      	bls.n	8008a28 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	22ff      	movs	r2, #255	@ 0xff
 8008a08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	2380      	movs	r3, #128	@ 0x80
 8008a12:	045c      	lsls	r4, r3, #17
 8008a14:	230a      	movs	r3, #10
 8008a16:	18fb      	adds	r3, r7, r3
 8008a18:	8819      	ldrh	r1, [r3, #0]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	0023      	movs	r3, r4
 8008a22:	f000 fb09 	bl	8009038 <I2C_TransferConfig>
 8008a26:	e012      	b.n	8008a4e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	2380      	movs	r3, #128	@ 0x80
 8008a3a:	049c      	lsls	r4, r3, #18
 8008a3c:	230a      	movs	r3, #10
 8008a3e:	18fb      	adds	r3, r7, r3
 8008a40:	8819      	ldrh	r1, [r3, #0]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	2300      	movs	r3, #0
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	0023      	movs	r3, r4
 8008a4a:	f000 faf5 	bl	8009038 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d194      	bne.n	8008982 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f000 f9ae 	bl	8008dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a64:	1e03      	subs	r3, r0, #0
 8008a66:	d001      	beq.n	8008a6c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e01a      	b.n	8008aa2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2220      	movs	r2, #32
 8008a72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	490c      	ldr	r1, [pc, #48]	@ (8008ab0 <HAL_I2C_Mem_Read+0x264>)
 8008a80:	400a      	ands	r2, r1
 8008a82:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2241      	movs	r2, #65	@ 0x41
 8008a88:	2120      	movs	r1, #32
 8008a8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2242      	movs	r2, #66	@ 0x42
 8008a90:	2100      	movs	r1, #0
 8008a92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2240      	movs	r2, #64	@ 0x40
 8008a98:	2100      	movs	r1, #0
 8008a9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e000      	b.n	8008aa2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8008aa0:	2302      	movs	r3, #2
  }
}
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	b007      	add	sp, #28
 8008aa8:	bd90      	pop	{r4, r7, pc}
 8008aaa:	46c0      	nop			@ (mov r8, r8)
 8008aac:	80002400 	.word	0x80002400
 8008ab0:	fe00e800 	.word	0xfe00e800

08008ab4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008ab4:	b5b0      	push	{r4, r5, r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af02      	add	r7, sp, #8
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	000c      	movs	r4, r1
 8008abe:	0010      	movs	r0, r2
 8008ac0:	0019      	movs	r1, r3
 8008ac2:	250a      	movs	r5, #10
 8008ac4:	197b      	adds	r3, r7, r5
 8008ac6:	1c22      	adds	r2, r4, #0
 8008ac8:	801a      	strh	r2, [r3, #0]
 8008aca:	2308      	movs	r3, #8
 8008acc:	18fb      	adds	r3, r7, r3
 8008ace:	1c02      	adds	r2, r0, #0
 8008ad0:	801a      	strh	r2, [r3, #0]
 8008ad2:	1dbb      	adds	r3, r7, #6
 8008ad4:	1c0a      	adds	r2, r1, #0
 8008ad6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008ad8:	1dbb      	adds	r3, r7, #6
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	2380      	movs	r3, #128	@ 0x80
 8008ae0:	045c      	lsls	r4, r3, #17
 8008ae2:	197b      	adds	r3, r7, r5
 8008ae4:	8819      	ldrh	r1, [r3, #0]
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	4b23      	ldr	r3, [pc, #140]	@ (8008b78 <I2C_RequestMemoryWrite+0xc4>)
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	0023      	movs	r3, r4
 8008aee:	f000 faa3 	bl	8009038 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af4:	6a39      	ldr	r1, [r7, #32]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	0018      	movs	r0, r3
 8008afa:	f000 f91b 	bl	8008d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008afe:	1e03      	subs	r3, r0, #0
 8008b00:	d001      	beq.n	8008b06 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e033      	b.n	8008b6e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b06:	1dbb      	adds	r3, r7, #6
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d107      	bne.n	8008b1e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b0e:	2308      	movs	r3, #8
 8008b10:	18fb      	adds	r3, r7, r3
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b1c:	e019      	b.n	8008b52 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b1e:	2308      	movs	r3, #8
 8008b20:	18fb      	adds	r3, r7, r3
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	0a1b      	lsrs	r3, r3, #8
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b32:	6a39      	ldr	r1, [r7, #32]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	0018      	movs	r0, r3
 8008b38:	f000 f8fc 	bl	8008d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b3c:	1e03      	subs	r3, r0, #0
 8008b3e:	d001      	beq.n	8008b44 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e014      	b.n	8008b6e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b44:	2308      	movs	r3, #8
 8008b46:	18fb      	adds	r3, r7, r3
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008b52:	6a3a      	ldr	r2, [r7, #32]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	0013      	movs	r3, r2
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2180      	movs	r1, #128	@ 0x80
 8008b60:	f000 f890 	bl	8008c84 <I2C_WaitOnFlagUntilTimeout>
 8008b64:	1e03      	subs	r3, r0, #0
 8008b66:	d001      	beq.n	8008b6c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e000      	b.n	8008b6e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	0018      	movs	r0, r3
 8008b70:	46bd      	mov	sp, r7
 8008b72:	b004      	add	sp, #16
 8008b74:	bdb0      	pop	{r4, r5, r7, pc}
 8008b76:	46c0      	nop			@ (mov r8, r8)
 8008b78:	80002000 	.word	0x80002000

08008b7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008b7c:	b5b0      	push	{r4, r5, r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	000c      	movs	r4, r1
 8008b86:	0010      	movs	r0, r2
 8008b88:	0019      	movs	r1, r3
 8008b8a:	250a      	movs	r5, #10
 8008b8c:	197b      	adds	r3, r7, r5
 8008b8e:	1c22      	adds	r2, r4, #0
 8008b90:	801a      	strh	r2, [r3, #0]
 8008b92:	2308      	movs	r3, #8
 8008b94:	18fb      	adds	r3, r7, r3
 8008b96:	1c02      	adds	r2, r0, #0
 8008b98:	801a      	strh	r2, [r3, #0]
 8008b9a:	1dbb      	adds	r3, r7, #6
 8008b9c:	1c0a      	adds	r2, r1, #0
 8008b9e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008ba0:	1dbb      	adds	r3, r7, #6
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	197b      	adds	r3, r7, r5
 8008ba8:	8819      	ldrh	r1, [r3, #0]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	4b23      	ldr	r3, [pc, #140]	@ (8008c3c <I2C_RequestMemoryRead+0xc0>)
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f000 fa41 	bl	8009038 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb8:	6a39      	ldr	r1, [r7, #32]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f000 f8b9 	bl	8008d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bc2:	1e03      	subs	r3, r0, #0
 8008bc4:	d001      	beq.n	8008bca <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e033      	b.n	8008c32 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bca:	1dbb      	adds	r3, r7, #6
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d107      	bne.n	8008be2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bd2:	2308      	movs	r3, #8
 8008bd4:	18fb      	adds	r3, r7, r3
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	629a      	str	r2, [r3, #40]	@ 0x28
 8008be0:	e019      	b.n	8008c16 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008be2:	2308      	movs	r3, #8
 8008be4:	18fb      	adds	r3, r7, r3
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	0a1b      	lsrs	r3, r3, #8
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bf6:	6a39      	ldr	r1, [r7, #32]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f000 f89a 	bl	8008d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c00:	1e03      	subs	r3, r0, #0
 8008c02:	d001      	beq.n	8008c08 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e014      	b.n	8008c32 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c08:	2308      	movs	r3, #8
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008c16:	6a3a      	ldr	r2, [r7, #32]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	0013      	movs	r3, r2
 8008c20:	2200      	movs	r2, #0
 8008c22:	2140      	movs	r1, #64	@ 0x40
 8008c24:	f000 f82e 	bl	8008c84 <I2C_WaitOnFlagUntilTimeout>
 8008c28:	1e03      	subs	r3, r0, #0
 8008c2a:	d001      	beq.n	8008c30 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	0018      	movs	r0, r3
 8008c34:	46bd      	mov	sp, r7
 8008c36:	b004      	add	sp, #16
 8008c38:	bdb0      	pop	{r4, r5, r7, pc}
 8008c3a:	46c0      	nop			@ (mov r8, r8)
 8008c3c:	80002000 	.word	0x80002000

08008c40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	4013      	ands	r3, r2
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d103      	bne.n	8008c5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2201      	movs	r2, #1
 8008c66:	4013      	ands	r3, r2
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d007      	beq.n	8008c7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2101      	movs	r1, #1
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	619a      	str	r2, [r3, #24]
  }
}
 8008c7c:	46c0      	nop			@ (mov r8, r8)
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b002      	add	sp, #8
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	603b      	str	r3, [r7, #0]
 8008c90:	1dfb      	adds	r3, r7, #7
 8008c92:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c94:	e03a      	b.n	8008d0c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f000 f8d3 	bl	8008e48 <I2C_IsErrorOccurred>
 8008ca2:	1e03      	subs	r3, r0, #0
 8008ca4:	d001      	beq.n	8008caa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e040      	b.n	8008d2c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	3301      	adds	r3, #1
 8008cae:	d02d      	beq.n	8008d0c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb0:	f7ff f97a 	bl	8007fa8 <HAL_GetTick>
 8008cb4:	0002      	movs	r2, r0
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d302      	bcc.n	8008cc6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d122      	bne.n	8008d0c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	4013      	ands	r3, r2
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	425a      	negs	r2, r3
 8008cd6:	4153      	adcs	r3, r2
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	001a      	movs	r2, r3
 8008cdc:	1dfb      	adds	r3, r7, #7
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d113      	bne.n	8008d0c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce8:	2220      	movs	r2, #32
 8008cea:	431a      	orrs	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2241      	movs	r2, #65	@ 0x41
 8008cf4:	2120      	movs	r1, #32
 8008cf6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2242      	movs	r2, #66	@ 0x42
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2240      	movs	r2, #64	@ 0x40
 8008d04:	2100      	movs	r1, #0
 8008d06:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e00f      	b.n	8008d2c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	4013      	ands	r3, r2
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	425a      	negs	r2, r3
 8008d1c:	4153      	adcs	r3, r2
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	001a      	movs	r2, r3
 8008d22:	1dfb      	adds	r3, r7, #7
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d0b5      	beq.n	8008c96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	b004      	add	sp, #16
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d40:	e032      	b.n	8008da8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	0018      	movs	r0, r3
 8008d4a:	f000 f87d 	bl	8008e48 <I2C_IsErrorOccurred>
 8008d4e:	1e03      	subs	r3, r0, #0
 8008d50:	d001      	beq.n	8008d56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e030      	b.n	8008db8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	d025      	beq.n	8008da8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d5c:	f7ff f924 	bl	8007fa8 <HAL_GetTick>
 8008d60:	0002      	movs	r2, r0
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d302      	bcc.n	8008d72 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d11a      	bne.n	8008da8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	2202      	movs	r2, #2
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d013      	beq.n	8008da8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d84:	2220      	movs	r2, #32
 8008d86:	431a      	orrs	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2241      	movs	r2, #65	@ 0x41
 8008d90:	2120      	movs	r1, #32
 8008d92:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2242      	movs	r2, #66	@ 0x42
 8008d98:	2100      	movs	r1, #0
 8008d9a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2240      	movs	r2, #64	@ 0x40
 8008da0:	2100      	movs	r1, #0
 8008da2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e007      	b.n	8008db8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2202      	movs	r2, #2
 8008db0:	4013      	ands	r3, r2
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d1c5      	bne.n	8008d42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	0018      	movs	r0, r3
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	b004      	add	sp, #16
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dcc:	e02f      	b.n	8008e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f000 f837 	bl	8008e48 <I2C_IsErrorOccurred>
 8008dda:	1e03      	subs	r3, r0, #0
 8008ddc:	d001      	beq.n	8008de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e02d      	b.n	8008e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de2:	f7ff f8e1 	bl	8007fa8 <HAL_GetTick>
 8008de6:	0002      	movs	r2, r0
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d302      	bcc.n	8008df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d11a      	bne.n	8008e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	4013      	ands	r3, r2
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d013      	beq.n	8008e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2241      	movs	r2, #65	@ 0x41
 8008e16:	2120      	movs	r1, #32
 8008e18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2242      	movs	r2, #66	@ 0x42
 8008e1e:	2100      	movs	r1, #0
 8008e20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2240      	movs	r2, #64	@ 0x40
 8008e26:	2100      	movs	r1, #0
 8008e28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e007      	b.n	8008e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	2220      	movs	r2, #32
 8008e36:	4013      	ands	r3, r2
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	d1c8      	bne.n	8008dce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	0018      	movs	r0, r3
 8008e40:	46bd      	mov	sp, r7
 8008e42:	b004      	add	sp, #16
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08a      	sub	sp, #40	@ 0x28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e54:	2327      	movs	r3, #39	@ 0x27
 8008e56:	18fb      	adds	r3, r7, r3
 8008e58:	2200      	movs	r2, #0
 8008e5a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	2210      	movs	r2, #16
 8008e70:	4013      	ands	r3, r2
 8008e72:	d100      	bne.n	8008e76 <I2C_IsErrorOccurred+0x2e>
 8008e74:	e079      	b.n	8008f6a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2210      	movs	r2, #16
 8008e7c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e7e:	e057      	b.n	8008f30 <I2C_IsErrorOccurred+0xe8>
 8008e80:	2227      	movs	r2, #39	@ 0x27
 8008e82:	18bb      	adds	r3, r7, r2
 8008e84:	18ba      	adds	r2, r7, r2
 8008e86:	7812      	ldrb	r2, [r2, #0]
 8008e88:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	d04f      	beq.n	8008f30 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e90:	f7ff f88a 	bl	8007fa8 <HAL_GetTick>
 8008e94:	0002      	movs	r2, r0
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d302      	bcc.n	8008ea6 <I2C_IsErrorOccurred+0x5e>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d144      	bne.n	8008f30 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	2380      	movs	r3, #128	@ 0x80
 8008eae:	01db      	lsls	r3, r3, #7
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008eb4:	2013      	movs	r0, #19
 8008eb6:	183b      	adds	r3, r7, r0
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	2142      	movs	r1, #66	@ 0x42
 8008ebc:	5c52      	ldrb	r2, [r2, r1]
 8008ebe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699a      	ldr	r2, [r3, #24]
 8008ec6:	2380      	movs	r3, #128	@ 0x80
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	401a      	ands	r2, r3
 8008ecc:	2380      	movs	r3, #128	@ 0x80
 8008ece:	021b      	lsls	r3, r3, #8
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d126      	bne.n	8008f22 <I2C_IsErrorOccurred+0xda>
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	2380      	movs	r3, #128	@ 0x80
 8008ed8:	01db      	lsls	r3, r3, #7
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d021      	beq.n	8008f22 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8008ede:	183b      	adds	r3, r7, r0
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b20      	cmp	r3, #32
 8008ee4:	d01d      	beq.n	8008f22 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2180      	movs	r1, #128	@ 0x80
 8008ef2:	01c9      	lsls	r1, r1, #7
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008ef8:	f7ff f856 	bl	8007fa8 <HAL_GetTick>
 8008efc:	0003      	movs	r3, r0
 8008efe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f00:	e00f      	b.n	8008f22 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008f02:	f7ff f851 	bl	8007fa8 <HAL_GetTick>
 8008f06:	0002      	movs	r2, r0
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	2b19      	cmp	r3, #25
 8008f0e:	d908      	bls.n	8008f22 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	2220      	movs	r2, #32
 8008f14:	4313      	orrs	r3, r2
 8008f16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008f18:	2327      	movs	r3, #39	@ 0x27
 8008f1a:	18fb      	adds	r3, r7, r3
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	701a      	strb	r2, [r3, #0]

              break;
 8008f20:	e006      	b.n	8008f30 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d1e8      	bne.n	8008f02 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	2220      	movs	r2, #32
 8008f38:	4013      	ands	r3, r2
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	d004      	beq.n	8008f48 <I2C_IsErrorOccurred+0x100>
 8008f3e:	2327      	movs	r3, #39	@ 0x27
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d09b      	beq.n	8008e80 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008f48:	2327      	movs	r3, #39	@ 0x27
 8008f4a:	18fb      	adds	r3, r7, r3
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d103      	bne.n	8008f5a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2220      	movs	r2, #32
 8008f58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	2204      	movs	r2, #4
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008f62:	2327      	movs	r3, #39	@ 0x27
 8008f64:	18fb      	adds	r3, r7, r3
 8008f66:	2201      	movs	r2, #1
 8008f68:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	2380      	movs	r3, #128	@ 0x80
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	4013      	ands	r3, r2
 8008f7a:	d00c      	beq.n	8008f96 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	4313      	orrs	r3, r2
 8008f82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2280      	movs	r2, #128	@ 0x80
 8008f8a:	0052      	lsls	r2, r2, #1
 8008f8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f8e:	2327      	movs	r3, #39	@ 0x27
 8008f90:	18fb      	adds	r3, r7, r3
 8008f92:	2201      	movs	r2, #1
 8008f94:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	2380      	movs	r3, #128	@ 0x80
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	d00c      	beq.n	8008fba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	2208      	movs	r2, #8
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2280      	movs	r2, #128	@ 0x80
 8008fae:	00d2      	lsls	r2, r2, #3
 8008fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008fb2:	2327      	movs	r3, #39	@ 0x27
 8008fb4:	18fb      	adds	r3, r7, r3
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	2380      	movs	r3, #128	@ 0x80
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	d00c      	beq.n	8008fde <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2280      	movs	r2, #128	@ 0x80
 8008fd2:	0092      	lsls	r2, r2, #2
 8008fd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008fd6:	2327      	movs	r3, #39	@ 0x27
 8008fd8:	18fb      	adds	r3, r7, r3
 8008fda:	2201      	movs	r2, #1
 8008fdc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8008fde:	2327      	movs	r3, #39	@ 0x27
 8008fe0:	18fb      	adds	r3, r7, r3
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01d      	beq.n	8009024 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	0018      	movs	r0, r3
 8008fec:	f7ff fe28 	bl	8008c40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	490e      	ldr	r1, [pc, #56]	@ (8009034 <I2C_IsErrorOccurred+0x1ec>)
 8008ffc:	400a      	ands	r2, r1
 8008ffe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	431a      	orrs	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2241      	movs	r2, #65	@ 0x41
 8009010:	2120      	movs	r1, #32
 8009012:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2242      	movs	r2, #66	@ 0x42
 8009018:	2100      	movs	r1, #0
 800901a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2240      	movs	r2, #64	@ 0x40
 8009020:	2100      	movs	r1, #0
 8009022:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009024:	2327      	movs	r3, #39	@ 0x27
 8009026:	18fb      	adds	r3, r7, r3
 8009028:	781b      	ldrb	r3, [r3, #0]
}
 800902a:	0018      	movs	r0, r3
 800902c:	46bd      	mov	sp, r7
 800902e:	b00a      	add	sp, #40	@ 0x28
 8009030:	bd80      	pop	{r7, pc}
 8009032:	46c0      	nop			@ (mov r8, r8)
 8009034:	fe00e800 	.word	0xfe00e800

08009038 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009038:	b590      	push	{r4, r7, lr}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	0008      	movs	r0, r1
 8009042:	0011      	movs	r1, r2
 8009044:	607b      	str	r3, [r7, #4]
 8009046:	240a      	movs	r4, #10
 8009048:	193b      	adds	r3, r7, r4
 800904a:	1c02      	adds	r2, r0, #0
 800904c:	801a      	strh	r2, [r3, #0]
 800904e:	2009      	movs	r0, #9
 8009050:	183b      	adds	r3, r7, r0
 8009052:	1c0a      	adds	r2, r1, #0
 8009054:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009056:	193b      	adds	r3, r7, r4
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	059b      	lsls	r3, r3, #22
 800905c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800905e:	183b      	adds	r3, r7, r0
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	0419      	lsls	r1, r3, #16
 8009064:	23ff      	movs	r3, #255	@ 0xff
 8009066:	041b      	lsls	r3, r3, #16
 8009068:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800906a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009072:	4313      	orrs	r3, r2
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	085b      	lsrs	r3, r3, #1
 8009078:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009082:	0d51      	lsrs	r1, r2, #21
 8009084:	2280      	movs	r2, #128	@ 0x80
 8009086:	00d2      	lsls	r2, r2, #3
 8009088:	400a      	ands	r2, r1
 800908a:	4907      	ldr	r1, [pc, #28]	@ (80090a8 <I2C_TransferConfig+0x70>)
 800908c:	430a      	orrs	r2, r1
 800908e:	43d2      	mvns	r2, r2
 8009090:	401a      	ands	r2, r3
 8009092:	0011      	movs	r1, r2
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	430a      	orrs	r2, r1
 800909c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800909e:	46c0      	nop			@ (mov r8, r8)
 80090a0:	46bd      	mov	sp, r7
 80090a2:	b007      	add	sp, #28
 80090a4:	bd90      	pop	{r4, r7, pc}
 80090a6:	46c0      	nop			@ (mov r8, r8)
 80090a8:	03ff63ff 	.word	0x03ff63ff

080090ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2241      	movs	r2, #65	@ 0x41
 80090ba:	5c9b      	ldrb	r3, [r3, r2]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b20      	cmp	r3, #32
 80090c0:	d138      	bne.n	8009134 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2240      	movs	r2, #64	@ 0x40
 80090c6:	5c9b      	ldrb	r3, [r3, r2]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d101      	bne.n	80090d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80090cc:	2302      	movs	r3, #2
 80090ce:	e032      	b.n	8009136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2240      	movs	r2, #64	@ 0x40
 80090d4:	2101      	movs	r1, #1
 80090d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2241      	movs	r2, #65	@ 0x41
 80090dc:	2124      	movs	r1, #36	@ 0x24
 80090de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2101      	movs	r1, #1
 80090ec:	438a      	bics	r2, r1
 80090ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4911      	ldr	r1, [pc, #68]	@ (8009140 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80090fc:	400a      	ands	r2, r1
 80090fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6819      	ldr	r1, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2101      	movs	r1, #1
 800911c:	430a      	orrs	r2, r1
 800911e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2241      	movs	r2, #65	@ 0x41
 8009124:	2120      	movs	r1, #32
 8009126:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2240      	movs	r2, #64	@ 0x40
 800912c:	2100      	movs	r1, #0
 800912e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	e000      	b.n	8009136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009134:	2302      	movs	r3, #2
  }
}
 8009136:	0018      	movs	r0, r3
 8009138:	46bd      	mov	sp, r7
 800913a:	b002      	add	sp, #8
 800913c:	bd80      	pop	{r7, pc}
 800913e:	46c0      	nop			@ (mov r8, r8)
 8009140:	ffffefff 	.word	0xffffefff

08009144 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2241      	movs	r2, #65	@ 0x41
 8009152:	5c9b      	ldrb	r3, [r3, r2]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b20      	cmp	r3, #32
 8009158:	d139      	bne.n	80091ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2240      	movs	r2, #64	@ 0x40
 800915e:	5c9b      	ldrb	r3, [r3, r2]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009164:	2302      	movs	r3, #2
 8009166:	e033      	b.n	80091d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2240      	movs	r2, #64	@ 0x40
 800916c:	2101      	movs	r1, #1
 800916e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2241      	movs	r2, #65	@ 0x41
 8009174:	2124      	movs	r1, #36	@ 0x24
 8009176:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2101      	movs	r1, #1
 8009184:	438a      	bics	r2, r1
 8009186:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4a11      	ldr	r2, [pc, #68]	@ (80091d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009194:	4013      	ands	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	021b      	lsls	r3, r3, #8
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2101      	movs	r1, #1
 80091b6:	430a      	orrs	r2, r1
 80091b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2241      	movs	r2, #65	@ 0x41
 80091be:	2120      	movs	r1, #32
 80091c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2240      	movs	r2, #64	@ 0x40
 80091c6:	2100      	movs	r1, #0
 80091c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	e000      	b.n	80091d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80091ce:	2302      	movs	r3, #2
  }
}
 80091d0:	0018      	movs	r0, r3
 80091d2:	46bd      	mov	sp, r7
 80091d4:	b004      	add	sp, #16
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	fffff0ff 	.word	0xfffff0ff

080091dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80091e4:	4b19      	ldr	r3, [pc, #100]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a19      	ldr	r2, [pc, #100]	@ (8009250 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80091ea:	4013      	ands	r3, r2
 80091ec:	0019      	movs	r1, r3
 80091ee:	4b17      	ldr	r3, [pc, #92]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	2380      	movs	r3, #128	@ 0x80
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d11f      	bne.n	8009240 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009200:	4b14      	ldr	r3, [pc, #80]	@ (8009254 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	0013      	movs	r3, r2
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	189b      	adds	r3, r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4912      	ldr	r1, [pc, #72]	@ (8009258 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800920e:	0018      	movs	r0, r3
 8009210:	f7f6 ff9e 	bl	8000150 <__udivsi3>
 8009214:	0003      	movs	r3, r0
 8009216:	3301      	adds	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800921a:	e008      	b.n	800922e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3b01      	subs	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	e001      	b.n	800922e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e009      	b.n	8009242 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800922e:	4b07      	ldr	r3, [pc, #28]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009230:	695a      	ldr	r2, [r3, #20]
 8009232:	2380      	movs	r3, #128	@ 0x80
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	401a      	ands	r2, r3
 8009238:	2380      	movs	r3, #128	@ 0x80
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	429a      	cmp	r2, r3
 800923e:	d0ed      	beq.n	800921c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	0018      	movs	r0, r3
 8009244:	46bd      	mov	sp, r7
 8009246:	b004      	add	sp, #16
 8009248:	bd80      	pop	{r7, pc}
 800924a:	46c0      	nop			@ (mov r8, r8)
 800924c:	40007000 	.word	0x40007000
 8009250:	fffff9ff 	.word	0xfffff9ff
 8009254:	20000000 	.word	0x20000000
 8009258:	000f4240 	.word	0x000f4240

0800925c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009260:	4b03      	ldr	r3, [pc, #12]	@ (8009270 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	23e0      	movs	r3, #224	@ 0xe0
 8009266:	01db      	lsls	r3, r3, #7
 8009268:	4013      	ands	r3, r2
}
 800926a:	0018      	movs	r0, r3
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	40021000 	.word	0x40021000

08009274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e2fe      	b.n	8009884 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2201      	movs	r2, #1
 800928c:	4013      	ands	r3, r2
 800928e:	d100      	bne.n	8009292 <HAL_RCC_OscConfig+0x1e>
 8009290:	e07c      	b.n	800938c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009292:	4bc3      	ldr	r3, [pc, #780]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	2238      	movs	r2, #56	@ 0x38
 8009298:	4013      	ands	r3, r2
 800929a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800929c:	4bc0      	ldr	r3, [pc, #768]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	2203      	movs	r2, #3
 80092a2:	4013      	ands	r3, r2
 80092a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	2b10      	cmp	r3, #16
 80092aa:	d102      	bne.n	80092b2 <HAL_RCC_OscConfig+0x3e>
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d002      	beq.n	80092b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d10b      	bne.n	80092d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092b8:	4bb9      	ldr	r3, [pc, #740]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	2380      	movs	r3, #128	@ 0x80
 80092be:	029b      	lsls	r3, r3, #10
 80092c0:	4013      	ands	r3, r2
 80092c2:	d062      	beq.n	800938a <HAL_RCC_OscConfig+0x116>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d15e      	bne.n	800938a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e2d9      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	2380      	movs	r3, #128	@ 0x80
 80092d6:	025b      	lsls	r3, r3, #9
 80092d8:	429a      	cmp	r2, r3
 80092da:	d107      	bne.n	80092ec <HAL_RCC_OscConfig+0x78>
 80092dc:	4bb0      	ldr	r3, [pc, #704]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	4baf      	ldr	r3, [pc, #700]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80092e2:	2180      	movs	r1, #128	@ 0x80
 80092e4:	0249      	lsls	r1, r1, #9
 80092e6:	430a      	orrs	r2, r1
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	e020      	b.n	800932e <HAL_RCC_OscConfig+0xba>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	23a0      	movs	r3, #160	@ 0xa0
 80092f2:	02db      	lsls	r3, r3, #11
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d10e      	bne.n	8009316 <HAL_RCC_OscConfig+0xa2>
 80092f8:	4ba9      	ldr	r3, [pc, #676]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	4ba8      	ldr	r3, [pc, #672]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80092fe:	2180      	movs	r1, #128	@ 0x80
 8009300:	02c9      	lsls	r1, r1, #11
 8009302:	430a      	orrs	r2, r1
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	4ba6      	ldr	r3, [pc, #664]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	4ba5      	ldr	r3, [pc, #660]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800930c:	2180      	movs	r1, #128	@ 0x80
 800930e:	0249      	lsls	r1, r1, #9
 8009310:	430a      	orrs	r2, r1
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e00b      	b.n	800932e <HAL_RCC_OscConfig+0xba>
 8009316:	4ba2      	ldr	r3, [pc, #648]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4ba1      	ldr	r3, [pc, #644]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800931c:	49a1      	ldr	r1, [pc, #644]	@ (80095a4 <HAL_RCC_OscConfig+0x330>)
 800931e:	400a      	ands	r2, r1
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	4b9f      	ldr	r3, [pc, #636]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	4b9e      	ldr	r3, [pc, #632]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009328:	499f      	ldr	r1, [pc, #636]	@ (80095a8 <HAL_RCC_OscConfig+0x334>)
 800932a:	400a      	ands	r2, r1
 800932c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d014      	beq.n	8009360 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009336:	f7fe fe37 	bl	8007fa8 <HAL_GetTick>
 800933a:	0003      	movs	r3, r0
 800933c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800933e:	e008      	b.n	8009352 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009340:	f7fe fe32 	bl	8007fa8 <HAL_GetTick>
 8009344:	0002      	movs	r2, r0
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	2b64      	cmp	r3, #100	@ 0x64
 800934c:	d901      	bls.n	8009352 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e298      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009352:	4b93      	ldr	r3, [pc, #588]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	2380      	movs	r3, #128	@ 0x80
 8009358:	029b      	lsls	r3, r3, #10
 800935a:	4013      	ands	r3, r2
 800935c:	d0f0      	beq.n	8009340 <HAL_RCC_OscConfig+0xcc>
 800935e:	e015      	b.n	800938c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009360:	f7fe fe22 	bl	8007fa8 <HAL_GetTick>
 8009364:	0003      	movs	r3, r0
 8009366:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009368:	e008      	b.n	800937c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800936a:	f7fe fe1d 	bl	8007fa8 <HAL_GetTick>
 800936e:	0002      	movs	r2, r0
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	2b64      	cmp	r3, #100	@ 0x64
 8009376:	d901      	bls.n	800937c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e283      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800937c:	4b88      	ldr	r3, [pc, #544]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	2380      	movs	r3, #128	@ 0x80
 8009382:	029b      	lsls	r3, r3, #10
 8009384:	4013      	ands	r3, r2
 8009386:	d1f0      	bne.n	800936a <HAL_RCC_OscConfig+0xf6>
 8009388:	e000      	b.n	800938c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800938a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2202      	movs	r2, #2
 8009392:	4013      	ands	r3, r2
 8009394:	d100      	bne.n	8009398 <HAL_RCC_OscConfig+0x124>
 8009396:	e099      	b.n	80094cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009398:	4b81      	ldr	r3, [pc, #516]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	2238      	movs	r2, #56	@ 0x38
 800939e:	4013      	ands	r3, r2
 80093a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093a2:	4b7f      	ldr	r3, [pc, #508]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	2203      	movs	r2, #3
 80093a8:	4013      	ands	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	2b10      	cmp	r3, #16
 80093b0:	d102      	bne.n	80093b8 <HAL_RCC_OscConfig+0x144>
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d002      	beq.n	80093be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d135      	bne.n	800942a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093be:	4b78      	ldr	r3, [pc, #480]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	2380      	movs	r3, #128	@ 0x80
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	4013      	ands	r3, r2
 80093c8:	d005      	beq.n	80093d6 <HAL_RCC_OscConfig+0x162>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e256      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093d6:	4b72      	ldr	r3, [pc, #456]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	4a74      	ldr	r2, [pc, #464]	@ (80095ac <HAL_RCC_OscConfig+0x338>)
 80093dc:	4013      	ands	r3, r2
 80093de:	0019      	movs	r1, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	021a      	lsls	r2, r3, #8
 80093e6:	4b6e      	ldr	r3, [pc, #440]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80093e8:	430a      	orrs	r2, r1
 80093ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d112      	bne.n	8009418 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80093f2:	4b6b      	ldr	r3, [pc, #428]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a6e      	ldr	r2, [pc, #440]	@ (80095b0 <HAL_RCC_OscConfig+0x33c>)
 80093f8:	4013      	ands	r3, r2
 80093fa:	0019      	movs	r1, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	691a      	ldr	r2, [r3, #16]
 8009400:	4b67      	ldr	r3, [pc, #412]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009402:	430a      	orrs	r2, r1
 8009404:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009406:	4b66      	ldr	r3, [pc, #408]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	0adb      	lsrs	r3, r3, #11
 800940c:	2207      	movs	r2, #7
 800940e:	4013      	ands	r3, r2
 8009410:	4a68      	ldr	r2, [pc, #416]	@ (80095b4 <HAL_RCC_OscConfig+0x340>)
 8009412:	40da      	lsrs	r2, r3
 8009414:	4b68      	ldr	r3, [pc, #416]	@ (80095b8 <HAL_RCC_OscConfig+0x344>)
 8009416:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009418:	4b68      	ldr	r3, [pc, #416]	@ (80095bc <HAL_RCC_OscConfig+0x348>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	0018      	movs	r0, r3
 800941e:	f7fe fd67 	bl	8007ef0 <HAL_InitTick>
 8009422:	1e03      	subs	r3, r0, #0
 8009424:	d051      	beq.n	80094ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e22c      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d030      	beq.n	8009494 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009432:	4b5b      	ldr	r3, [pc, #364]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a5e      	ldr	r2, [pc, #376]	@ (80095b0 <HAL_RCC_OscConfig+0x33c>)
 8009438:	4013      	ands	r3, r2
 800943a:	0019      	movs	r1, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	4b57      	ldr	r3, [pc, #348]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009442:	430a      	orrs	r2, r1
 8009444:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009446:	4b56      	ldr	r3, [pc, #344]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	4b55      	ldr	r3, [pc, #340]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800944c:	2180      	movs	r1, #128	@ 0x80
 800944e:	0049      	lsls	r1, r1, #1
 8009450:	430a      	orrs	r2, r1
 8009452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009454:	f7fe fda8 	bl	8007fa8 <HAL_GetTick>
 8009458:	0003      	movs	r3, r0
 800945a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800945c:	e008      	b.n	8009470 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800945e:	f7fe fda3 	bl	8007fa8 <HAL_GetTick>
 8009462:	0002      	movs	r2, r0
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d901      	bls.n	8009470 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e209      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009470:	4b4b      	ldr	r3, [pc, #300]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	2380      	movs	r3, #128	@ 0x80
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	4013      	ands	r3, r2
 800947a:	d0f0      	beq.n	800945e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800947c:	4b48      	ldr	r3, [pc, #288]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	4a4a      	ldr	r2, [pc, #296]	@ (80095ac <HAL_RCC_OscConfig+0x338>)
 8009482:	4013      	ands	r3, r2
 8009484:	0019      	movs	r1, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	021a      	lsls	r2, r3, #8
 800948c:	4b44      	ldr	r3, [pc, #272]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800948e:	430a      	orrs	r2, r1
 8009490:	605a      	str	r2, [r3, #4]
 8009492:	e01b      	b.n	80094cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009494:	4b42      	ldr	r3, [pc, #264]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	4b41      	ldr	r3, [pc, #260]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800949a:	4949      	ldr	r1, [pc, #292]	@ (80095c0 <HAL_RCC_OscConfig+0x34c>)
 800949c:	400a      	ands	r2, r1
 800949e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a0:	f7fe fd82 	bl	8007fa8 <HAL_GetTick>
 80094a4:	0003      	movs	r3, r0
 80094a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094a8:	e008      	b.n	80094bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094aa:	f7fe fd7d 	bl	8007fa8 <HAL_GetTick>
 80094ae:	0002      	movs	r2, r0
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d901      	bls.n	80094bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e1e3      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094bc:	4b38      	ldr	r3, [pc, #224]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	2380      	movs	r3, #128	@ 0x80
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4013      	ands	r3, r2
 80094c6:	d1f0      	bne.n	80094aa <HAL_RCC_OscConfig+0x236>
 80094c8:	e000      	b.n	80094cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094ca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2208      	movs	r2, #8
 80094d2:	4013      	ands	r3, r2
 80094d4:	d047      	beq.n	8009566 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80094d6:	4b32      	ldr	r3, [pc, #200]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	2238      	movs	r2, #56	@ 0x38
 80094dc:	4013      	ands	r3, r2
 80094de:	2b18      	cmp	r3, #24
 80094e0:	d10a      	bne.n	80094f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80094e2:	4b2f      	ldr	r3, [pc, #188]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 80094e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094e6:	2202      	movs	r2, #2
 80094e8:	4013      	ands	r3, r2
 80094ea:	d03c      	beq.n	8009566 <HAL_RCC_OscConfig+0x2f2>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d138      	bne.n	8009566 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e1c5      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d019      	beq.n	8009534 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009500:	4b27      	ldr	r3, [pc, #156]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009502:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009504:	4b26      	ldr	r3, [pc, #152]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009506:	2101      	movs	r1, #1
 8009508:	430a      	orrs	r2, r1
 800950a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950c:	f7fe fd4c 	bl	8007fa8 <HAL_GetTick>
 8009510:	0003      	movs	r3, r0
 8009512:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009514:	e008      	b.n	8009528 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009516:	f7fe fd47 	bl	8007fa8 <HAL_GetTick>
 800951a:	0002      	movs	r2, r0
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	2b02      	cmp	r3, #2
 8009522:	d901      	bls.n	8009528 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e1ad      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009528:	4b1d      	ldr	r3, [pc, #116]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800952a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800952c:	2202      	movs	r2, #2
 800952e:	4013      	ands	r3, r2
 8009530:	d0f1      	beq.n	8009516 <HAL_RCC_OscConfig+0x2a2>
 8009532:	e018      	b.n	8009566 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009534:	4b1a      	ldr	r3, [pc, #104]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009536:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009538:	4b19      	ldr	r3, [pc, #100]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800953a:	2101      	movs	r1, #1
 800953c:	438a      	bics	r2, r1
 800953e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009540:	f7fe fd32 	bl	8007fa8 <HAL_GetTick>
 8009544:	0003      	movs	r3, r0
 8009546:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009548:	e008      	b.n	800955c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800954a:	f7fe fd2d 	bl	8007fa8 <HAL_GetTick>
 800954e:	0002      	movs	r2, r0
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	2b02      	cmp	r3, #2
 8009556:	d901      	bls.n	800955c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e193      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800955c:	4b10      	ldr	r3, [pc, #64]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800955e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009560:	2202      	movs	r2, #2
 8009562:	4013      	ands	r3, r2
 8009564:	d1f1      	bne.n	800954a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2204      	movs	r2, #4
 800956c:	4013      	ands	r3, r2
 800956e:	d100      	bne.n	8009572 <HAL_RCC_OscConfig+0x2fe>
 8009570:	e0c6      	b.n	8009700 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009572:	231f      	movs	r3, #31
 8009574:	18fb      	adds	r3, r7, r3
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800957a:	4b09      	ldr	r3, [pc, #36]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2238      	movs	r2, #56	@ 0x38
 8009580:	4013      	ands	r3, r2
 8009582:	2b20      	cmp	r3, #32
 8009584:	d11e      	bne.n	80095c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009586:	4b06      	ldr	r3, [pc, #24]	@ (80095a0 <HAL_RCC_OscConfig+0x32c>)
 8009588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800958a:	2202      	movs	r2, #2
 800958c:	4013      	ands	r3, r2
 800958e:	d100      	bne.n	8009592 <HAL_RCC_OscConfig+0x31e>
 8009590:	e0b6      	b.n	8009700 <HAL_RCC_OscConfig+0x48c>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d000      	beq.n	800959c <HAL_RCC_OscConfig+0x328>
 800959a:	e0b1      	b.n	8009700 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e171      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
 80095a0:	40021000 	.word	0x40021000
 80095a4:	fffeffff 	.word	0xfffeffff
 80095a8:	fffbffff 	.word	0xfffbffff
 80095ac:	ffff80ff 	.word	0xffff80ff
 80095b0:	ffffc7ff 	.word	0xffffc7ff
 80095b4:	00f42400 	.word	0x00f42400
 80095b8:	20000000 	.word	0x20000000
 80095bc:	20000004 	.word	0x20000004
 80095c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80095c4:	4bb1      	ldr	r3, [pc, #708]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80095c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095c8:	2380      	movs	r3, #128	@ 0x80
 80095ca:	055b      	lsls	r3, r3, #21
 80095cc:	4013      	ands	r3, r2
 80095ce:	d101      	bne.n	80095d4 <HAL_RCC_OscConfig+0x360>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e000      	b.n	80095d6 <HAL_RCC_OscConfig+0x362>
 80095d4:	2300      	movs	r3, #0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d011      	beq.n	80095fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80095da:	4bac      	ldr	r3, [pc, #688]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80095dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095de:	4bab      	ldr	r3, [pc, #684]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80095e0:	2180      	movs	r1, #128	@ 0x80
 80095e2:	0549      	lsls	r1, r1, #21
 80095e4:	430a      	orrs	r2, r1
 80095e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80095e8:	4ba8      	ldr	r3, [pc, #672]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80095ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095ec:	2380      	movs	r3, #128	@ 0x80
 80095ee:	055b      	lsls	r3, r3, #21
 80095f0:	4013      	ands	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80095f6:	231f      	movs	r3, #31
 80095f8:	18fb      	adds	r3, r7, r3
 80095fa:	2201      	movs	r2, #1
 80095fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095fe:	4ba4      	ldr	r3, [pc, #656]	@ (8009890 <HAL_RCC_OscConfig+0x61c>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	2380      	movs	r3, #128	@ 0x80
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	4013      	ands	r3, r2
 8009608:	d11a      	bne.n	8009640 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800960a:	4ba1      	ldr	r3, [pc, #644]	@ (8009890 <HAL_RCC_OscConfig+0x61c>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4ba0      	ldr	r3, [pc, #640]	@ (8009890 <HAL_RCC_OscConfig+0x61c>)
 8009610:	2180      	movs	r1, #128	@ 0x80
 8009612:	0049      	lsls	r1, r1, #1
 8009614:	430a      	orrs	r2, r1
 8009616:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009618:	f7fe fcc6 	bl	8007fa8 <HAL_GetTick>
 800961c:	0003      	movs	r3, r0
 800961e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009620:	e008      	b.n	8009634 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009622:	f7fe fcc1 	bl	8007fa8 <HAL_GetTick>
 8009626:	0002      	movs	r2, r0
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d901      	bls.n	8009634 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e127      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009634:	4b96      	ldr	r3, [pc, #600]	@ (8009890 <HAL_RCC_OscConfig+0x61c>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	2380      	movs	r3, #128	@ 0x80
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	4013      	ands	r3, r2
 800963e:	d0f0      	beq.n	8009622 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d106      	bne.n	8009656 <HAL_RCC_OscConfig+0x3e2>
 8009648:	4b90      	ldr	r3, [pc, #576]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800964a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800964c:	4b8f      	ldr	r3, [pc, #572]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800964e:	2101      	movs	r1, #1
 8009650:	430a      	orrs	r2, r1
 8009652:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009654:	e01c      	b.n	8009690 <HAL_RCC_OscConfig+0x41c>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b05      	cmp	r3, #5
 800965c:	d10c      	bne.n	8009678 <HAL_RCC_OscConfig+0x404>
 800965e:	4b8b      	ldr	r3, [pc, #556]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009660:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009662:	4b8a      	ldr	r3, [pc, #552]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009664:	2104      	movs	r1, #4
 8009666:	430a      	orrs	r2, r1
 8009668:	65da      	str	r2, [r3, #92]	@ 0x5c
 800966a:	4b88      	ldr	r3, [pc, #544]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800966c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800966e:	4b87      	ldr	r3, [pc, #540]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009670:	2101      	movs	r1, #1
 8009672:	430a      	orrs	r2, r1
 8009674:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009676:	e00b      	b.n	8009690 <HAL_RCC_OscConfig+0x41c>
 8009678:	4b84      	ldr	r3, [pc, #528]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800967a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800967c:	4b83      	ldr	r3, [pc, #524]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800967e:	2101      	movs	r1, #1
 8009680:	438a      	bics	r2, r1
 8009682:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009684:	4b81      	ldr	r3, [pc, #516]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009686:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009688:	4b80      	ldr	r3, [pc, #512]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800968a:	2104      	movs	r1, #4
 800968c:	438a      	bics	r2, r1
 800968e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d014      	beq.n	80096c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009698:	f7fe fc86 	bl	8007fa8 <HAL_GetTick>
 800969c:	0003      	movs	r3, r0
 800969e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096a0:	e009      	b.n	80096b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096a2:	f7fe fc81 	bl	8007fa8 <HAL_GetTick>
 80096a6:	0002      	movs	r2, r0
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	4a79      	ldr	r2, [pc, #484]	@ (8009894 <HAL_RCC_OscConfig+0x620>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e0e6      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096b6:	4b75      	ldr	r3, [pc, #468]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80096b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096ba:	2202      	movs	r2, #2
 80096bc:	4013      	ands	r3, r2
 80096be:	d0f0      	beq.n	80096a2 <HAL_RCC_OscConfig+0x42e>
 80096c0:	e013      	b.n	80096ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c2:	f7fe fc71 	bl	8007fa8 <HAL_GetTick>
 80096c6:	0003      	movs	r3, r0
 80096c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096ca:	e009      	b.n	80096e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096cc:	f7fe fc6c 	bl	8007fa8 <HAL_GetTick>
 80096d0:	0002      	movs	r2, r0
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	4a6f      	ldr	r2, [pc, #444]	@ (8009894 <HAL_RCC_OscConfig+0x620>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d901      	bls.n	80096e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e0d1      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096e0:	4b6a      	ldr	r3, [pc, #424]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80096e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096e4:	2202      	movs	r2, #2
 80096e6:	4013      	ands	r3, r2
 80096e8:	d1f0      	bne.n	80096cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80096ea:	231f      	movs	r3, #31
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d105      	bne.n	8009700 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80096f4:	4b65      	ldr	r3, [pc, #404]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80096f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096f8:	4b64      	ldr	r3, [pc, #400]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80096fa:	4967      	ldr	r1, [pc, #412]	@ (8009898 <HAL_RCC_OscConfig+0x624>)
 80096fc:	400a      	ands	r2, r1
 80096fe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d100      	bne.n	800970a <HAL_RCC_OscConfig+0x496>
 8009708:	e0bb      	b.n	8009882 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800970a:	4b60      	ldr	r3, [pc, #384]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	2238      	movs	r2, #56	@ 0x38
 8009710:	4013      	ands	r3, r2
 8009712:	2b10      	cmp	r3, #16
 8009714:	d100      	bne.n	8009718 <HAL_RCC_OscConfig+0x4a4>
 8009716:	e07b      	b.n	8009810 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	2b02      	cmp	r3, #2
 800971e:	d156      	bne.n	80097ce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009720:	4b5a      	ldr	r3, [pc, #360]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	4b59      	ldr	r3, [pc, #356]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009726:	495d      	ldr	r1, [pc, #372]	@ (800989c <HAL_RCC_OscConfig+0x628>)
 8009728:	400a      	ands	r2, r1
 800972a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800972c:	f7fe fc3c 	bl	8007fa8 <HAL_GetTick>
 8009730:	0003      	movs	r3, r0
 8009732:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009734:	e008      	b.n	8009748 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009736:	f7fe fc37 	bl	8007fa8 <HAL_GetTick>
 800973a:	0002      	movs	r2, r0
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	2b02      	cmp	r3, #2
 8009742:	d901      	bls.n	8009748 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e09d      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009748:	4b50      	ldr	r3, [pc, #320]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	2380      	movs	r3, #128	@ 0x80
 800974e:	049b      	lsls	r3, r3, #18
 8009750:	4013      	ands	r3, r2
 8009752:	d1f0      	bne.n	8009736 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009754:	4b4d      	ldr	r3, [pc, #308]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	4a51      	ldr	r2, [pc, #324]	@ (80098a0 <HAL_RCC_OscConfig+0x62c>)
 800975a:	4013      	ands	r3, r2
 800975c:	0019      	movs	r1, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1a      	ldr	r2, [r3, #32]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009780:	431a      	orrs	r2, r3
 8009782:	4b42      	ldr	r3, [pc, #264]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009784:	430a      	orrs	r2, r1
 8009786:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009788:	4b40      	ldr	r3, [pc, #256]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	4b3f      	ldr	r3, [pc, #252]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800978e:	2180      	movs	r1, #128	@ 0x80
 8009790:	0449      	lsls	r1, r1, #17
 8009792:	430a      	orrs	r2, r1
 8009794:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009796:	4b3d      	ldr	r3, [pc, #244]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	4b3c      	ldr	r3, [pc, #240]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800979c:	2180      	movs	r1, #128	@ 0x80
 800979e:	0549      	lsls	r1, r1, #21
 80097a0:	430a      	orrs	r2, r1
 80097a2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a4:	f7fe fc00 	bl	8007fa8 <HAL_GetTick>
 80097a8:	0003      	movs	r3, r0
 80097aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097ac:	e008      	b.n	80097c0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097ae:	f7fe fbfb 	bl	8007fa8 <HAL_GetTick>
 80097b2:	0002      	movs	r2, r0
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d901      	bls.n	80097c0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e061      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097c0:	4b32      	ldr	r3, [pc, #200]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	2380      	movs	r3, #128	@ 0x80
 80097c6:	049b      	lsls	r3, r3, #18
 80097c8:	4013      	ands	r3, r2
 80097ca:	d0f0      	beq.n	80097ae <HAL_RCC_OscConfig+0x53a>
 80097cc:	e059      	b.n	8009882 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097ce:	4b2f      	ldr	r3, [pc, #188]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4b2e      	ldr	r3, [pc, #184]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80097d4:	4931      	ldr	r1, [pc, #196]	@ (800989c <HAL_RCC_OscConfig+0x628>)
 80097d6:	400a      	ands	r2, r1
 80097d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097da:	f7fe fbe5 	bl	8007fa8 <HAL_GetTick>
 80097de:	0003      	movs	r3, r0
 80097e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097e2:	e008      	b.n	80097f6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097e4:	f7fe fbe0 	bl	8007fa8 <HAL_GetTick>
 80097e8:	0002      	movs	r2, r0
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d901      	bls.n	80097f6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e046      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097f6:	4b25      	ldr	r3, [pc, #148]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	2380      	movs	r3, #128	@ 0x80
 80097fc:	049b      	lsls	r3, r3, #18
 80097fe:	4013      	ands	r3, r2
 8009800:	d1f0      	bne.n	80097e4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009802:	4b22      	ldr	r3, [pc, #136]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	4b21      	ldr	r3, [pc, #132]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 8009808:	4926      	ldr	r1, [pc, #152]	@ (80098a4 <HAL_RCC_OscConfig+0x630>)
 800980a:	400a      	ands	r2, r1
 800980c:	60da      	str	r2, [r3, #12]
 800980e:	e038      	b.n	8009882 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d101      	bne.n	800981c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e033      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800981c:	4b1b      	ldr	r3, [pc, #108]	@ (800988c <HAL_RCC_OscConfig+0x618>)
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2203      	movs	r2, #3
 8009826:	401a      	ands	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	429a      	cmp	r2, r3
 800982e:	d126      	bne.n	800987e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2270      	movs	r2, #112	@ 0x70
 8009834:	401a      	ands	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800983a:	429a      	cmp	r2, r3
 800983c:	d11f      	bne.n	800987e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	23fe      	movs	r3, #254	@ 0xfe
 8009842:	01db      	lsls	r3, r3, #7
 8009844:	401a      	ands	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800984c:	429a      	cmp	r2, r3
 800984e:	d116      	bne.n	800987e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	23f8      	movs	r3, #248	@ 0xf8
 8009854:	039b      	lsls	r3, r3, #14
 8009856:	401a      	ands	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800985c:	429a      	cmp	r2, r3
 800985e:	d10e      	bne.n	800987e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	23e0      	movs	r3, #224	@ 0xe0
 8009864:	051b      	lsls	r3, r3, #20
 8009866:	401a      	ands	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800986c:	429a      	cmp	r2, r3
 800986e:	d106      	bne.n	800987e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	0f5b      	lsrs	r3, r3, #29
 8009874:	075a      	lsls	r2, r3, #29
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800987a:	429a      	cmp	r2, r3
 800987c:	d001      	beq.n	8009882 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	0018      	movs	r0, r3
 8009886:	46bd      	mov	sp, r7
 8009888:	b008      	add	sp, #32
 800988a:	bd80      	pop	{r7, pc}
 800988c:	40021000 	.word	0x40021000
 8009890:	40007000 	.word	0x40007000
 8009894:	00001388 	.word	0x00001388
 8009898:	efffffff 	.word	0xefffffff
 800989c:	feffffff 	.word	0xfeffffff
 80098a0:	11c1808c 	.word	0x11c1808c
 80098a4:	eefefffc 	.word	0xeefefffc

080098a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e0e9      	b.n	8009a90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098bc:	4b76      	ldr	r3, [pc, #472]	@ (8009a98 <HAL_RCC_ClockConfig+0x1f0>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2207      	movs	r2, #7
 80098c2:	4013      	ands	r3, r2
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d91e      	bls.n	8009908 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098ca:	4b73      	ldr	r3, [pc, #460]	@ (8009a98 <HAL_RCC_ClockConfig+0x1f0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2207      	movs	r2, #7
 80098d0:	4393      	bics	r3, r2
 80098d2:	0019      	movs	r1, r3
 80098d4:	4b70      	ldr	r3, [pc, #448]	@ (8009a98 <HAL_RCC_ClockConfig+0x1f0>)
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80098dc:	f7fe fb64 	bl	8007fa8 <HAL_GetTick>
 80098e0:	0003      	movs	r3, r0
 80098e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80098e4:	e009      	b.n	80098fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098e6:	f7fe fb5f 	bl	8007fa8 <HAL_GetTick>
 80098ea:	0002      	movs	r2, r0
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	4a6a      	ldr	r2, [pc, #424]	@ (8009a9c <HAL_RCC_ClockConfig+0x1f4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e0ca      	b.n	8009a90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80098fa:	4b67      	ldr	r3, [pc, #412]	@ (8009a98 <HAL_RCC_ClockConfig+0x1f0>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2207      	movs	r2, #7
 8009900:	4013      	ands	r3, r2
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	429a      	cmp	r2, r3
 8009906:	d1ee      	bne.n	80098e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2202      	movs	r2, #2
 800990e:	4013      	ands	r3, r2
 8009910:	d015      	beq.n	800993e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2204      	movs	r2, #4
 8009918:	4013      	ands	r3, r2
 800991a:	d006      	beq.n	800992a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800991c:	4b60      	ldr	r3, [pc, #384]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	4b5f      	ldr	r3, [pc, #380]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8009922:	21e0      	movs	r1, #224	@ 0xe0
 8009924:	01c9      	lsls	r1, r1, #7
 8009926:	430a      	orrs	r2, r1
 8009928:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800992a:	4b5d      	ldr	r3, [pc, #372]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	4a5d      	ldr	r2, [pc, #372]	@ (8009aa4 <HAL_RCC_ClockConfig+0x1fc>)
 8009930:	4013      	ands	r3, r2
 8009932:	0019      	movs	r1, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	4b59      	ldr	r3, [pc, #356]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800993a:	430a      	orrs	r2, r1
 800993c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2201      	movs	r2, #1
 8009944:	4013      	ands	r3, r2
 8009946:	d057      	beq.n	80099f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d107      	bne.n	8009960 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009950:	4b53      	ldr	r3, [pc, #332]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	2380      	movs	r3, #128	@ 0x80
 8009956:	029b      	lsls	r3, r3, #10
 8009958:	4013      	ands	r3, r2
 800995a:	d12b      	bne.n	80099b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e097      	b.n	8009a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	2b02      	cmp	r3, #2
 8009966:	d107      	bne.n	8009978 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009968:	4b4d      	ldr	r3, [pc, #308]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	2380      	movs	r3, #128	@ 0x80
 800996e:	049b      	lsls	r3, r3, #18
 8009970:	4013      	ands	r3, r2
 8009972:	d11f      	bne.n	80099b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e08b      	b.n	8009a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d107      	bne.n	8009990 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009980:	4b47      	ldr	r3, [pc, #284]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	2380      	movs	r3, #128	@ 0x80
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	4013      	ands	r3, r2
 800998a:	d113      	bne.n	80099b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e07f      	b.n	8009a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	2b03      	cmp	r3, #3
 8009996:	d106      	bne.n	80099a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009998:	4b41      	ldr	r3, [pc, #260]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800999a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800999c:	2202      	movs	r2, #2
 800999e:	4013      	ands	r3, r2
 80099a0:	d108      	bne.n	80099b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e074      	b.n	8009a90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099a6:	4b3e      	ldr	r3, [pc, #248]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80099a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099aa:	2202      	movs	r2, #2
 80099ac:	4013      	ands	r3, r2
 80099ae:	d101      	bne.n	80099b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e06d      	b.n	8009a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80099b4:	4b3a      	ldr	r3, [pc, #232]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	2207      	movs	r2, #7
 80099ba:	4393      	bics	r3, r2
 80099bc:	0019      	movs	r1, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	4b37      	ldr	r3, [pc, #220]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80099c4:	430a      	orrs	r2, r1
 80099c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099c8:	f7fe faee 	bl	8007fa8 <HAL_GetTick>
 80099cc:	0003      	movs	r3, r0
 80099ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099d0:	e009      	b.n	80099e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099d2:	f7fe fae9 	bl	8007fa8 <HAL_GetTick>
 80099d6:	0002      	movs	r2, r0
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	4a2f      	ldr	r2, [pc, #188]	@ (8009a9c <HAL_RCC_ClockConfig+0x1f4>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d901      	bls.n	80099e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e054      	b.n	8009a90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099e6:	4b2e      	ldr	r3, [pc, #184]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	2238      	movs	r2, #56	@ 0x38
 80099ec:	401a      	ands	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	00db      	lsls	r3, r3, #3
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d1ec      	bne.n	80099d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80099f8:	4b27      	ldr	r3, [pc, #156]	@ (8009a98 <HAL_RCC_ClockConfig+0x1f0>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2207      	movs	r2, #7
 80099fe:	4013      	ands	r3, r2
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d21e      	bcs.n	8009a44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a06:	4b24      	ldr	r3, [pc, #144]	@ (8009a98 <HAL_RCC_ClockConfig+0x1f0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2207      	movs	r2, #7
 8009a0c:	4393      	bics	r3, r2
 8009a0e:	0019      	movs	r1, r3
 8009a10:	4b21      	ldr	r3, [pc, #132]	@ (8009a98 <HAL_RCC_ClockConfig+0x1f0>)
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009a18:	f7fe fac6 	bl	8007fa8 <HAL_GetTick>
 8009a1c:	0003      	movs	r3, r0
 8009a1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009a20:	e009      	b.n	8009a36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a22:	f7fe fac1 	bl	8007fa8 <HAL_GetTick>
 8009a26:	0002      	movs	r2, r0
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8009a9c <HAL_RCC_ClockConfig+0x1f4>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d901      	bls.n	8009a36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e02c      	b.n	8009a90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009a36:	4b18      	ldr	r3, [pc, #96]	@ (8009a98 <HAL_RCC_ClockConfig+0x1f0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2207      	movs	r2, #7
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d1ee      	bne.n	8009a22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2204      	movs	r2, #4
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	d009      	beq.n	8009a62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009a4e:	4b14      	ldr	r3, [pc, #80]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	4a15      	ldr	r2, [pc, #84]	@ (8009aa8 <HAL_RCC_ClockConfig+0x200>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	0019      	movs	r1, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	4b10      	ldr	r3, [pc, #64]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009a62:	f000 f829 	bl	8009ab8 <HAL_RCC_GetSysClockFreq>
 8009a66:	0001      	movs	r1, r0
 8009a68:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	0a1b      	lsrs	r3, r3, #8
 8009a6e:	220f      	movs	r2, #15
 8009a70:	401a      	ands	r2, r3
 8009a72:	4b0e      	ldr	r3, [pc, #56]	@ (8009aac <HAL_RCC_ClockConfig+0x204>)
 8009a74:	0092      	lsls	r2, r2, #2
 8009a76:	58d3      	ldr	r3, [r2, r3]
 8009a78:	221f      	movs	r2, #31
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	000a      	movs	r2, r1
 8009a7e:	40da      	lsrs	r2, r3
 8009a80:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab0 <HAL_RCC_ClockConfig+0x208>)
 8009a82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009a84:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab4 <HAL_RCC_ClockConfig+0x20c>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f7fe fa31 	bl	8007ef0 <HAL_InitTick>
 8009a8e:	0003      	movs	r3, r0
}
 8009a90:	0018      	movs	r0, r3
 8009a92:	46bd      	mov	sp, r7
 8009a94:	b004      	add	sp, #16
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	40022000 	.word	0x40022000
 8009a9c:	00001388 	.word	0x00001388
 8009aa0:	40021000 	.word	0x40021000
 8009aa4:	fffff0ff 	.word	0xfffff0ff
 8009aa8:	ffff8fff 	.word	0xffff8fff
 8009aac:	0800ed28 	.word	0x0800ed28
 8009ab0:	20000000 	.word	0x20000000
 8009ab4:	20000004 	.word	0x20000004

08009ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009abe:	4b3c      	ldr	r3, [pc, #240]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	2238      	movs	r2, #56	@ 0x38
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	d10f      	bne.n	8009ae8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009ac8:	4b39      	ldr	r3, [pc, #228]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	0adb      	lsrs	r3, r3, #11
 8009ace:	2207      	movs	r2, #7
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	409a      	lsls	r2, r3
 8009ad6:	0013      	movs	r3, r2
 8009ad8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	4835      	ldr	r0, [pc, #212]	@ (8009bb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009ade:	f7f6 fb37 	bl	8000150 <__udivsi3>
 8009ae2:	0003      	movs	r3, r0
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	e05d      	b.n	8009ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ae8:	4b31      	ldr	r3, [pc, #196]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	2238      	movs	r2, #56	@ 0x38
 8009aee:	4013      	ands	r3, r2
 8009af0:	2b08      	cmp	r3, #8
 8009af2:	d102      	bne.n	8009afa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009af4:	4b30      	ldr	r3, [pc, #192]	@ (8009bb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	e054      	b.n	8009ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009afa:	4b2d      	ldr	r3, [pc, #180]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	2238      	movs	r2, #56	@ 0x38
 8009b00:	4013      	ands	r3, r2
 8009b02:	2b10      	cmp	r3, #16
 8009b04:	d138      	bne.n	8009b78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009b06:	4b2a      	ldr	r3, [pc, #168]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	2203      	movs	r2, #3
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b10:	4b27      	ldr	r3, [pc, #156]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	091b      	lsrs	r3, r3, #4
 8009b16:	2207      	movs	r2, #7
 8009b18:	4013      	ands	r3, r2
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d10d      	bne.n	8009b40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b24:	68b9      	ldr	r1, [r7, #8]
 8009b26:	4824      	ldr	r0, [pc, #144]	@ (8009bb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8009b28:	f7f6 fb12 	bl	8000150 <__udivsi3>
 8009b2c:	0003      	movs	r3, r0
 8009b2e:	0019      	movs	r1, r3
 8009b30:	4b1f      	ldr	r3, [pc, #124]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	0a1b      	lsrs	r3, r3, #8
 8009b36:	227f      	movs	r2, #127	@ 0x7f
 8009b38:	4013      	ands	r3, r2
 8009b3a:	434b      	muls	r3, r1
 8009b3c:	617b      	str	r3, [r7, #20]
        break;
 8009b3e:	e00d      	b.n	8009b5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	481c      	ldr	r0, [pc, #112]	@ (8009bb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009b44:	f7f6 fb04 	bl	8000150 <__udivsi3>
 8009b48:	0003      	movs	r3, r0
 8009b4a:	0019      	movs	r1, r3
 8009b4c:	4b18      	ldr	r3, [pc, #96]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	0a1b      	lsrs	r3, r3, #8
 8009b52:	227f      	movs	r2, #127	@ 0x7f
 8009b54:	4013      	ands	r3, r2
 8009b56:	434b      	muls	r3, r1
 8009b58:	617b      	str	r3, [r7, #20]
        break;
 8009b5a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009b5c:	4b14      	ldr	r3, [pc, #80]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	0f5b      	lsrs	r3, r3, #29
 8009b62:	2207      	movs	r2, #7
 8009b64:	4013      	ands	r3, r2
 8009b66:	3301      	adds	r3, #1
 8009b68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009b6a:	6879      	ldr	r1, [r7, #4]
 8009b6c:	6978      	ldr	r0, [r7, #20]
 8009b6e:	f7f6 faef 	bl	8000150 <__udivsi3>
 8009b72:	0003      	movs	r3, r0
 8009b74:	613b      	str	r3, [r7, #16]
 8009b76:	e015      	b.n	8009ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009b78:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	2238      	movs	r2, #56	@ 0x38
 8009b7e:	4013      	ands	r3, r2
 8009b80:	2b20      	cmp	r3, #32
 8009b82:	d103      	bne.n	8009b8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009b84:	2380      	movs	r3, #128	@ 0x80
 8009b86:	021b      	lsls	r3, r3, #8
 8009b88:	613b      	str	r3, [r7, #16]
 8009b8a:	e00b      	b.n	8009ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009b8c:	4b08      	ldr	r3, [pc, #32]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2238      	movs	r2, #56	@ 0x38
 8009b92:	4013      	ands	r3, r2
 8009b94:	2b18      	cmp	r3, #24
 8009b96:	d103      	bne.n	8009ba0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009b98:	23fa      	movs	r3, #250	@ 0xfa
 8009b9a:	01db      	lsls	r3, r3, #7
 8009b9c:	613b      	str	r3, [r7, #16]
 8009b9e:	e001      	b.n	8009ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009ba4:	693b      	ldr	r3, [r7, #16]
}
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	b006      	add	sp, #24
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	46c0      	nop			@ (mov r8, r8)
 8009bb0:	40021000 	.word	0x40021000
 8009bb4:	00f42400 	.word	0x00f42400
 8009bb8:	007a1200 	.word	0x007a1200

08009bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bc0:	4b02      	ldr	r3, [pc, #8]	@ (8009bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
}
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	46c0      	nop			@ (mov r8, r8)
 8009bcc:	20000000 	.word	0x20000000

08009bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bd0:	b5b0      	push	{r4, r5, r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009bd4:	f7ff fff2 	bl	8009bbc <HAL_RCC_GetHCLKFreq>
 8009bd8:	0004      	movs	r4, r0
 8009bda:	f7ff fb3f 	bl	800925c <LL_RCC_GetAPB1Prescaler>
 8009bde:	0003      	movs	r3, r0
 8009be0:	0b1a      	lsrs	r2, r3, #12
 8009be2:	4b05      	ldr	r3, [pc, #20]	@ (8009bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009be4:	0092      	lsls	r2, r2, #2
 8009be6:	58d3      	ldr	r3, [r2, r3]
 8009be8:	221f      	movs	r2, #31
 8009bea:	4013      	ands	r3, r2
 8009bec:	40dc      	lsrs	r4, r3
 8009bee:	0023      	movs	r3, r4
}
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8009bf6:	46c0      	nop			@ (mov r8, r8)
 8009bf8:	0800ed68 	.word	0x0800ed68

08009bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009c04:	2313      	movs	r3, #19
 8009c06:	18fb      	adds	r3, r7, r3
 8009c08:	2200      	movs	r2, #0
 8009c0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c0c:	2312      	movs	r3, #18
 8009c0e:	18fb      	adds	r3, r7, r3
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	2380      	movs	r3, #128	@ 0x80
 8009c1a:	029b      	lsls	r3, r3, #10
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	d100      	bne.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009c20:	e0a3      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c22:	2011      	movs	r0, #17
 8009c24:	183b      	adds	r3, r7, r0
 8009c26:	2200      	movs	r2, #0
 8009c28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c2a:	4bc3      	ldr	r3, [pc, #780]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c2e:	2380      	movs	r3, #128	@ 0x80
 8009c30:	055b      	lsls	r3, r3, #21
 8009c32:	4013      	ands	r3, r2
 8009c34:	d110      	bne.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c36:	4bc0      	ldr	r3, [pc, #768]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c3a:	4bbf      	ldr	r3, [pc, #764]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c3c:	2180      	movs	r1, #128	@ 0x80
 8009c3e:	0549      	lsls	r1, r1, #21
 8009c40:	430a      	orrs	r2, r1
 8009c42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009c44:	4bbc      	ldr	r3, [pc, #752]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c48:	2380      	movs	r3, #128	@ 0x80
 8009c4a:	055b      	lsls	r3, r3, #21
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	60bb      	str	r3, [r7, #8]
 8009c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c52:	183b      	adds	r3, r7, r0
 8009c54:	2201      	movs	r2, #1
 8009c56:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c58:	4bb8      	ldr	r3, [pc, #736]	@ (8009f3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	4bb7      	ldr	r3, [pc, #732]	@ (8009f3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009c5e:	2180      	movs	r1, #128	@ 0x80
 8009c60:	0049      	lsls	r1, r1, #1
 8009c62:	430a      	orrs	r2, r1
 8009c64:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c66:	f7fe f99f 	bl	8007fa8 <HAL_GetTick>
 8009c6a:	0003      	movs	r3, r0
 8009c6c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c6e:	e00b      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c70:	f7fe f99a 	bl	8007fa8 <HAL_GetTick>
 8009c74:	0002      	movs	r2, r0
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d904      	bls.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009c7e:	2313      	movs	r3, #19
 8009c80:	18fb      	adds	r3, r7, r3
 8009c82:	2203      	movs	r2, #3
 8009c84:	701a      	strb	r2, [r3, #0]
        break;
 8009c86:	e005      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c88:	4bac      	ldr	r3, [pc, #688]	@ (8009f3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	2380      	movs	r3, #128	@ 0x80
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	4013      	ands	r3, r2
 8009c92:	d0ed      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009c94:	2313      	movs	r3, #19
 8009c96:	18fb      	adds	r3, r7, r3
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d154      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009c9e:	4ba6      	ldr	r3, [pc, #664]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009ca0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ca2:	23c0      	movs	r3, #192	@ 0xc0
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d019      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d014      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009cba:	4b9f      	ldr	r3, [pc, #636]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cbe:	4aa0      	ldr	r2, [pc, #640]	@ (8009f40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009cc4:	4b9c      	ldr	r3, [pc, #624]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009cc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009cc8:	4b9b      	ldr	r3, [pc, #620]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009cca:	2180      	movs	r1, #128	@ 0x80
 8009ccc:	0249      	lsls	r1, r1, #9
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cd2:	4b99      	ldr	r3, [pc, #612]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009cd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009cd6:	4b98      	ldr	r3, [pc, #608]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009cd8:	499a      	ldr	r1, [pc, #616]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8009cda:	400a      	ands	r2, r1
 8009cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009cde:	4b96      	ldr	r3, [pc, #600]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	4013      	ands	r3, r2
 8009cea:	d016      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cec:	f7fe f95c 	bl	8007fa8 <HAL_GetTick>
 8009cf0:	0003      	movs	r3, r0
 8009cf2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009cf4:	e00c      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cf6:	f7fe f957 	bl	8007fa8 <HAL_GetTick>
 8009cfa:	0002      	movs	r2, r0
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	4a91      	ldr	r2, [pc, #580]	@ (8009f48 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d904      	bls.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009d06:	2313      	movs	r3, #19
 8009d08:	18fb      	adds	r3, r7, r3
 8009d0a:	2203      	movs	r2, #3
 8009d0c:	701a      	strb	r2, [r3, #0]
            break;
 8009d0e:	e004      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d10:	4b89      	ldr	r3, [pc, #548]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d14:	2202      	movs	r2, #2
 8009d16:	4013      	ands	r3, r2
 8009d18:	d0ed      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009d1a:	2313      	movs	r3, #19
 8009d1c:	18fb      	adds	r3, r7, r3
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d24:	4b84      	ldr	r3, [pc, #528]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d28:	4a85      	ldr	r2, [pc, #532]	@ (8009f40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	0019      	movs	r1, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d32:	4b81      	ldr	r3, [pc, #516]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d34:	430a      	orrs	r2, r1
 8009d36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d38:	e00c      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d3a:	2312      	movs	r3, #18
 8009d3c:	18fb      	adds	r3, r7, r3
 8009d3e:	2213      	movs	r2, #19
 8009d40:	18ba      	adds	r2, r7, r2
 8009d42:	7812      	ldrb	r2, [r2, #0]
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	e005      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d48:	2312      	movs	r3, #18
 8009d4a:	18fb      	adds	r3, r7, r3
 8009d4c:	2213      	movs	r2, #19
 8009d4e:	18ba      	adds	r2, r7, r2
 8009d50:	7812      	ldrb	r2, [r2, #0]
 8009d52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009d54:	2311      	movs	r3, #17
 8009d56:	18fb      	adds	r3, r7, r3
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d105      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d5e:	4b76      	ldr	r3, [pc, #472]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d62:	4b75      	ldr	r3, [pc, #468]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d64:	4979      	ldr	r1, [pc, #484]	@ (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8009d66:	400a      	ands	r2, r1
 8009d68:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	4013      	ands	r3, r2
 8009d72:	d009      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009d74:	4b70      	ldr	r3, [pc, #448]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d78:	2203      	movs	r2, #3
 8009d7a:	4393      	bics	r3, r2
 8009d7c:	0019      	movs	r1, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	4b6d      	ldr	r3, [pc, #436]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d84:	430a      	orrs	r2, r1
 8009d86:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	4013      	ands	r3, r2
 8009d90:	d009      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d92:	4b69      	ldr	r3, [pc, #420]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d96:	220c      	movs	r2, #12
 8009d98:	4393      	bics	r3, r2
 8009d9a:	0019      	movs	r1, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	4b65      	ldr	r3, [pc, #404]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009da2:	430a      	orrs	r2, r1
 8009da4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2210      	movs	r2, #16
 8009dac:	4013      	ands	r3, r2
 8009dae:	d009      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009db0:	4b61      	ldr	r3, [pc, #388]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009db4:	4a66      	ldr	r2, [pc, #408]	@ (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8009db6:	4013      	ands	r3, r2
 8009db8:	0019      	movs	r1, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68da      	ldr	r2, [r3, #12]
 8009dbe:	4b5e      	ldr	r3, [pc, #376]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	2380      	movs	r3, #128	@ 0x80
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4013      	ands	r3, r2
 8009dce:	d009      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009dd0:	4b59      	ldr	r3, [pc, #356]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dd4:	4a5f      	ldr	r2, [pc, #380]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	0019      	movs	r1, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	699a      	ldr	r2, [r3, #24]
 8009dde:	4b56      	ldr	r3, [pc, #344]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009de0:	430a      	orrs	r2, r1
 8009de2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	2380      	movs	r3, #128	@ 0x80
 8009dea:	00db      	lsls	r3, r3, #3
 8009dec:	4013      	ands	r3, r2
 8009dee:	d009      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009df0:	4b51      	ldr	r3, [pc, #324]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df4:	4a58      	ldr	r2, [pc, #352]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009df6:	4013      	ands	r3, r2
 8009df8:	0019      	movs	r1, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	69da      	ldr	r2, [r3, #28]
 8009dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e00:	430a      	orrs	r2, r1
 8009e02:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	d009      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e12:	4a52      	ldr	r2, [pc, #328]	@ (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	0019      	movs	r1, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691a      	ldr	r2, [r3, #16]
 8009e1c:	4b46      	ldr	r3, [pc, #280]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	2380      	movs	r3, #128	@ 0x80
 8009e28:	01db      	lsls	r3, r3, #7
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	d015      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e2e:	4b42      	ldr	r3, [pc, #264]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	0899      	lsrs	r1, r3, #2
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a1a      	ldr	r2, [r3, #32]
 8009e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a1a      	ldr	r2, [r3, #32]
 8009e44:	2380      	movs	r3, #128	@ 0x80
 8009e46:	05db      	lsls	r3, r3, #23
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d106      	bne.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	4b39      	ldr	r3, [pc, #228]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e52:	2180      	movs	r1, #128	@ 0x80
 8009e54:	0249      	lsls	r1, r1, #9
 8009e56:	430a      	orrs	r2, r1
 8009e58:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	2380      	movs	r3, #128	@ 0x80
 8009e60:	031b      	lsls	r3, r3, #12
 8009e62:	4013      	ands	r3, r2
 8009e64:	d009      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e66:	4b34      	ldr	r3, [pc, #208]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e6a:	2240      	movs	r2, #64	@ 0x40
 8009e6c:	4393      	bics	r3, r2
 8009e6e:	0019      	movs	r1, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e74:	4b30      	ldr	r3, [pc, #192]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e76:	430a      	orrs	r2, r1
 8009e78:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	2380      	movs	r3, #128	@ 0x80
 8009e80:	039b      	lsls	r3, r3, #14
 8009e82:	4013      	ands	r3, r2
 8009e84:	d016      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009e86:	4b2c      	ldr	r3, [pc, #176]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8a:	4a35      	ldr	r2, [pc, #212]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	0019      	movs	r1, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e94:	4b28      	ldr	r3, [pc, #160]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e96:	430a      	orrs	r2, r1
 8009e98:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e9e:	2380      	movs	r3, #128	@ 0x80
 8009ea0:	03db      	lsls	r3, r3, #15
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d106      	bne.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009ea6:	4b24      	ldr	r3, [pc, #144]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009ea8:	68da      	ldr	r2, [r3, #12]
 8009eaa:	4b23      	ldr	r3, [pc, #140]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009eac:	2180      	movs	r1, #128	@ 0x80
 8009eae:	0449      	lsls	r1, r1, #17
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	2380      	movs	r3, #128	@ 0x80
 8009eba:	03db      	lsls	r3, r3, #15
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	d016      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ec4:	4a27      	ldr	r2, [pc, #156]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	0019      	movs	r1, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ece:	4b1a      	ldr	r3, [pc, #104]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed8:	2380      	movs	r3, #128	@ 0x80
 8009eda:	045b      	lsls	r3, r3, #17
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d106      	bne.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009ee0:	4b15      	ldr	r3, [pc, #84]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	4b14      	ldr	r3, [pc, #80]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009ee6:	2180      	movs	r1, #128	@ 0x80
 8009ee8:	0449      	lsls	r1, r1, #17
 8009eea:	430a      	orrs	r2, r1
 8009eec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	2380      	movs	r3, #128	@ 0x80
 8009ef4:	011b      	lsls	r3, r3, #4
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	d016      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009efa:	4b0f      	ldr	r3, [pc, #60]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009efe:	4a1a      	ldr	r2, [pc, #104]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	0019      	movs	r1, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	695a      	ldr	r2, [r3, #20]
 8009f08:	4b0b      	ldr	r3, [pc, #44]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	695a      	ldr	r2, [r3, #20]
 8009f12:	2380      	movs	r3, #128	@ 0x80
 8009f14:	01db      	lsls	r3, r3, #7
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d106      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009f1a:	4b07      	ldr	r3, [pc, #28]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	4b06      	ldr	r3, [pc, #24]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009f20:	2180      	movs	r1, #128	@ 0x80
 8009f22:	0249      	lsls	r1, r1, #9
 8009f24:	430a      	orrs	r2, r1
 8009f26:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009f28:	2312      	movs	r3, #18
 8009f2a:	18fb      	adds	r3, r7, r3
 8009f2c:	781b      	ldrb	r3, [r3, #0]
}
 8009f2e:	0018      	movs	r0, r3
 8009f30:	46bd      	mov	sp, r7
 8009f32:	b006      	add	sp, #24
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	46c0      	nop			@ (mov r8, r8)
 8009f38:	40021000 	.word	0x40021000
 8009f3c:	40007000 	.word	0x40007000
 8009f40:	fffffcff 	.word	0xfffffcff
 8009f44:	fffeffff 	.word	0xfffeffff
 8009f48:	00001388 	.word	0x00001388
 8009f4c:	efffffff 	.word	0xefffffff
 8009f50:	fffff3ff 	.word	0xfffff3ff
 8009f54:	fff3ffff 	.word	0xfff3ffff
 8009f58:	ffcfffff 	.word	0xffcfffff
 8009f5c:	ffffcfff 	.word	0xffffcfff
 8009f60:	ffbfffff 	.word	0xffbfffff
 8009f64:	feffffff 	.word	0xfeffffff
 8009f68:	ffff3fff 	.word	0xffff3fff

08009f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d101      	bne.n	8009f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e046      	b.n	800a00c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2288      	movs	r2, #136	@ 0x88
 8009f82:	589b      	ldr	r3, [r3, r2]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d107      	bne.n	8009f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2284      	movs	r2, #132	@ 0x84
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	0018      	movs	r0, r3
 8009f94:	f7fd fdea 	bl	8007b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2288      	movs	r2, #136	@ 0x88
 8009f9c:	2124      	movs	r1, #36	@ 0x24
 8009f9e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2101      	movs	r1, #1
 8009fac:	438a      	bics	r2, r1
 8009fae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	0018      	movs	r0, r3
 8009fbc:	f000 fc74 	bl	800a8a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	f000 f9b2 	bl	800a32c <UART_SetConfig>
 8009fc8:	0003      	movs	r3, r0
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d101      	bne.n	8009fd2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e01c      	b.n	800a00c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	490d      	ldr	r1, [pc, #52]	@ (800a014 <HAL_UART_Init+0xa8>)
 8009fde:	400a      	ands	r2, r1
 8009fe0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	689a      	ldr	r2, [r3, #8]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	212a      	movs	r1, #42	@ 0x2a
 8009fee:	438a      	bics	r2, r1
 8009ff0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	430a      	orrs	r2, r1
 800a000:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	0018      	movs	r0, r3
 800a006:	f000 fd03 	bl	800aa10 <UART_CheckIdleState>
 800a00a:	0003      	movs	r3, r0
}
 800a00c:	0018      	movs	r0, r3
 800a00e:	46bd      	mov	sp, r7
 800a010:	b002      	add	sp, #8
 800a012:	bd80      	pop	{r7, pc}
 800a014:	ffffb7ff 	.word	0xffffb7ff

0800a018 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	@ 0x28
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	1dbb      	adds	r3, r7, #6
 800a026:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2288      	movs	r2, #136	@ 0x88
 800a02c:	589b      	ldr	r3, [r3, r2]
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d000      	beq.n	800a034 <HAL_UART_Transmit+0x1c>
 800a032:	e090      	b.n	800a156 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <HAL_UART_Transmit+0x2a>
 800a03a:	1dbb      	adds	r3, r7, #6
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e088      	b.n	800a158 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	2380      	movs	r3, #128	@ 0x80
 800a04c:	015b      	lsls	r3, r3, #5
 800a04e:	429a      	cmp	r2, r3
 800a050:	d109      	bne.n	800a066 <HAL_UART_Transmit+0x4e>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d105      	bne.n	800a066 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2201      	movs	r2, #1
 800a05e:	4013      	ands	r3, r2
 800a060:	d001      	beq.n	800a066 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e078      	b.n	800a158 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2290      	movs	r2, #144	@ 0x90
 800a06a:	2100      	movs	r1, #0
 800a06c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2288      	movs	r2, #136	@ 0x88
 800a072:	2121      	movs	r1, #33	@ 0x21
 800a074:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a076:	f7fd ff97 	bl	8007fa8 <HAL_GetTick>
 800a07a:	0003      	movs	r3, r0
 800a07c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	1dba      	adds	r2, r7, #6
 800a082:	2154      	movs	r1, #84	@ 0x54
 800a084:	8812      	ldrh	r2, [r2, #0]
 800a086:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	1dba      	adds	r2, r7, #6
 800a08c:	2156      	movs	r1, #86	@ 0x56
 800a08e:	8812      	ldrh	r2, [r2, #0]
 800a090:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	2380      	movs	r3, #128	@ 0x80
 800a098:	015b      	lsls	r3, r3, #5
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d108      	bne.n	800a0b0 <HAL_UART_Transmit+0x98>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d104      	bne.n	800a0b0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	61bb      	str	r3, [r7, #24]
 800a0ae:	e003      	b.n	800a0b8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a0b8:	e030      	b.n	800a11c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	0013      	movs	r3, r2
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2180      	movs	r1, #128	@ 0x80
 800a0c8:	f000 fd4c 	bl	800ab64 <UART_WaitOnFlagUntilTimeout>
 800a0cc:	1e03      	subs	r3, r0, #0
 800a0ce:	d005      	beq.n	800a0dc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2288      	movs	r2, #136	@ 0x88
 800a0d4:	2120      	movs	r1, #32
 800a0d6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e03d      	b.n	800a158 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10b      	bne.n	800a0fa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	001a      	movs	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	05d2      	lsls	r2, r2, #23
 800a0ee:	0dd2      	lsrs	r2, r2, #23
 800a0f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	3302      	adds	r3, #2
 800a0f6:	61bb      	str	r3, [r7, #24]
 800a0f8:	e007      	b.n	800a10a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	781a      	ldrb	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	3301      	adds	r3, #1
 800a108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2256      	movs	r2, #86	@ 0x56
 800a10e:	5a9b      	ldrh	r3, [r3, r2]
 800a110:	b29b      	uxth	r3, r3
 800a112:	3b01      	subs	r3, #1
 800a114:	b299      	uxth	r1, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2256      	movs	r2, #86	@ 0x56
 800a11a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2256      	movs	r2, #86	@ 0x56
 800a120:	5a9b      	ldrh	r3, [r3, r2]
 800a122:	b29b      	uxth	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1c8      	bne.n	800a0ba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	0013      	movs	r3, r2
 800a132:	2200      	movs	r2, #0
 800a134:	2140      	movs	r1, #64	@ 0x40
 800a136:	f000 fd15 	bl	800ab64 <UART_WaitOnFlagUntilTimeout>
 800a13a:	1e03      	subs	r3, r0, #0
 800a13c:	d005      	beq.n	800a14a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2288      	movs	r2, #136	@ 0x88
 800a142:	2120      	movs	r1, #32
 800a144:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e006      	b.n	800a158 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2288      	movs	r2, #136	@ 0x88
 800a14e:	2120      	movs	r1, #32
 800a150:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	e000      	b.n	800a158 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800a156:	2302      	movs	r3, #2
  }
}
 800a158:	0018      	movs	r0, r3
 800a15a:	46bd      	mov	sp, r7
 800a15c:	b008      	add	sp, #32
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08a      	sub	sp, #40	@ 0x28
 800a164:	af02      	add	r7, sp, #8
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	1dbb      	adds	r3, r7, #6
 800a16e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	228c      	movs	r2, #140	@ 0x8c
 800a174:	589b      	ldr	r3, [r3, r2]
 800a176:	2b20      	cmp	r3, #32
 800a178:	d000      	beq.n	800a17c <HAL_UART_Receive+0x1c>
 800a17a:	e0d0      	b.n	800a31e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_UART_Receive+0x2a>
 800a182:	1dbb      	adds	r3, r7, #6
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e0c8      	b.n	800a320 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	689a      	ldr	r2, [r3, #8]
 800a192:	2380      	movs	r3, #128	@ 0x80
 800a194:	015b      	lsls	r3, r3, #5
 800a196:	429a      	cmp	r2, r3
 800a198:	d109      	bne.n	800a1ae <HAL_UART_Receive+0x4e>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d105      	bne.n	800a1ae <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	d001      	beq.n	800a1ae <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e0b8      	b.n	800a320 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2290      	movs	r2, #144	@ 0x90
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	228c      	movs	r2, #140	@ 0x8c
 800a1ba:	2122      	movs	r1, #34	@ 0x22
 800a1bc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1c4:	f7fd fef0 	bl	8007fa8 <HAL_GetTick>
 800a1c8:	0003      	movs	r3, r0
 800a1ca:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	1dba      	adds	r2, r7, #6
 800a1d0:	215c      	movs	r1, #92	@ 0x5c
 800a1d2:	8812      	ldrh	r2, [r2, #0]
 800a1d4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	1dba      	adds	r2, r7, #6
 800a1da:	215e      	movs	r1, #94	@ 0x5e
 800a1dc:	8812      	ldrh	r2, [r2, #0]
 800a1de:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	689a      	ldr	r2, [r3, #8]
 800a1e4:	2380      	movs	r3, #128	@ 0x80
 800a1e6:	015b      	lsls	r3, r3, #5
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d10d      	bne.n	800a208 <HAL_UART_Receive+0xa8>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d104      	bne.n	800a1fe <HAL_UART_Receive+0x9e>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2260      	movs	r2, #96	@ 0x60
 800a1f8:	494b      	ldr	r1, [pc, #300]	@ (800a328 <HAL_UART_Receive+0x1c8>)
 800a1fa:	5299      	strh	r1, [r3, r2]
 800a1fc:	e02e      	b.n	800a25c <HAL_UART_Receive+0xfc>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2260      	movs	r2, #96	@ 0x60
 800a202:	21ff      	movs	r1, #255	@ 0xff
 800a204:	5299      	strh	r1, [r3, r2]
 800a206:	e029      	b.n	800a25c <HAL_UART_Receive+0xfc>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10d      	bne.n	800a22c <HAL_UART_Receive+0xcc>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d104      	bne.n	800a222 <HAL_UART_Receive+0xc2>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2260      	movs	r2, #96	@ 0x60
 800a21c:	21ff      	movs	r1, #255	@ 0xff
 800a21e:	5299      	strh	r1, [r3, r2]
 800a220:	e01c      	b.n	800a25c <HAL_UART_Receive+0xfc>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2260      	movs	r2, #96	@ 0x60
 800a226:	217f      	movs	r1, #127	@ 0x7f
 800a228:	5299      	strh	r1, [r3, r2]
 800a22a:	e017      	b.n	800a25c <HAL_UART_Receive+0xfc>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	2380      	movs	r3, #128	@ 0x80
 800a232:	055b      	lsls	r3, r3, #21
 800a234:	429a      	cmp	r2, r3
 800a236:	d10d      	bne.n	800a254 <HAL_UART_Receive+0xf4>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d104      	bne.n	800a24a <HAL_UART_Receive+0xea>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2260      	movs	r2, #96	@ 0x60
 800a244:	217f      	movs	r1, #127	@ 0x7f
 800a246:	5299      	strh	r1, [r3, r2]
 800a248:	e008      	b.n	800a25c <HAL_UART_Receive+0xfc>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2260      	movs	r2, #96	@ 0x60
 800a24e:	213f      	movs	r1, #63	@ 0x3f
 800a250:	5299      	strh	r1, [r3, r2]
 800a252:	e003      	b.n	800a25c <HAL_UART_Receive+0xfc>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2260      	movs	r2, #96	@ 0x60
 800a258:	2100      	movs	r1, #0
 800a25a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800a25c:	2312      	movs	r3, #18
 800a25e:	18fb      	adds	r3, r7, r3
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	2160      	movs	r1, #96	@ 0x60
 800a264:	5a52      	ldrh	r2, [r2, r1]
 800a266:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	2380      	movs	r3, #128	@ 0x80
 800a26e:	015b      	lsls	r3, r3, #5
 800a270:	429a      	cmp	r2, r3
 800a272:	d108      	bne.n	800a286 <HAL_UART_Receive+0x126>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d104      	bne.n	800a286 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800a27c:	2300      	movs	r3, #0
 800a27e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	61bb      	str	r3, [r7, #24]
 800a284:	e003      	b.n	800a28e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a28e:	e03a      	b.n	800a306 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	0013      	movs	r3, r2
 800a29a:	2200      	movs	r2, #0
 800a29c:	2120      	movs	r1, #32
 800a29e:	f000 fc61 	bl	800ab64 <UART_WaitOnFlagUntilTimeout>
 800a2a2:	1e03      	subs	r3, r0, #0
 800a2a4:	d005      	beq.n	800a2b2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	228c      	movs	r2, #140	@ 0x8c
 800a2aa:	2120      	movs	r1, #32
 800a2ac:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e036      	b.n	800a320 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10e      	bne.n	800a2d6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	2212      	movs	r2, #18
 800a2c2:	18ba      	adds	r2, r7, r2
 800a2c4:	8812      	ldrh	r2, [r2, #0]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	61bb      	str	r3, [r7, #24]
 800a2d4:	e00e      	b.n	800a2f4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2212      	movs	r2, #18
 800a2e0:	18ba      	adds	r2, r7, r2
 800a2e2:	8812      	ldrh	r2, [r2, #0]
 800a2e4:	b2d2      	uxtb	r2, r2
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	225e      	movs	r2, #94	@ 0x5e
 800a2f8:	5a9b      	ldrh	r3, [r3, r2]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	b299      	uxth	r1, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	225e      	movs	r2, #94	@ 0x5e
 800a304:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	225e      	movs	r2, #94	@ 0x5e
 800a30a:	5a9b      	ldrh	r3, [r3, r2]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1be      	bne.n	800a290 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	228c      	movs	r2, #140	@ 0x8c
 800a316:	2120      	movs	r1, #32
 800a318:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	e000      	b.n	800a320 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800a31e:	2302      	movs	r3, #2
  }
}
 800a320:	0018      	movs	r0, r3
 800a322:	46bd      	mov	sp, r7
 800a324:	b008      	add	sp, #32
 800a326:	bd80      	pop	{r7, pc}
 800a328:	000001ff 	.word	0x000001ff

0800a32c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a32c:	b5b0      	push	{r4, r5, r7, lr}
 800a32e:	b090      	sub	sp, #64	@ 0x40
 800a330:	af00      	add	r7, sp, #0
 800a332:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a334:	231a      	movs	r3, #26
 800a336:	2220      	movs	r2, #32
 800a338:	189b      	adds	r3, r3, r2
 800a33a:	19db      	adds	r3, r3, r7
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	431a      	orrs	r2, r3
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	431a      	orrs	r2, r3
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	4313      	orrs	r3, r2
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4aaf      	ldr	r2, [pc, #700]	@ (800a61c <UART_SetConfig+0x2f0>)
 800a360:	4013      	ands	r3, r2
 800a362:	0019      	movs	r1, r3
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36a:	430b      	orrs	r3, r1
 800a36c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	4aaa      	ldr	r2, [pc, #680]	@ (800a620 <UART_SetConfig+0x2f4>)
 800a376:	4013      	ands	r3, r2
 800a378:	0018      	movs	r0, r3
 800a37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37c:	68d9      	ldr	r1, [r3, #12]
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	0003      	movs	r3, r0
 800a384:	430b      	orrs	r3, r1
 800a386:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4aa4      	ldr	r2, [pc, #656]	@ (800a624 <UART_SetConfig+0x2f8>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d004      	beq.n	800a3a2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	4a9f      	ldr	r2, [pc, #636]	@ (800a628 <UART_SetConfig+0x2fc>)
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	0019      	movs	r1, r3
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b4:	430b      	orrs	r3, r1
 800a3b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3be:	220f      	movs	r2, #15
 800a3c0:	4393      	bics	r3, r2
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	0003      	movs	r3, r0
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a95      	ldr	r2, [pc, #596]	@ (800a62c <UART_SetConfig+0x300>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d131      	bne.n	800a440 <UART_SetConfig+0x114>
 800a3dc:	4b94      	ldr	r3, [pc, #592]	@ (800a630 <UART_SetConfig+0x304>)
 800a3de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e0:	2203      	movs	r2, #3
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d01d      	beq.n	800a424 <UART_SetConfig+0xf8>
 800a3e8:	d823      	bhi.n	800a432 <UART_SetConfig+0x106>
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d00c      	beq.n	800a408 <UART_SetConfig+0xdc>
 800a3ee:	d820      	bhi.n	800a432 <UART_SetConfig+0x106>
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <UART_SetConfig+0xce>
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d00e      	beq.n	800a416 <UART_SetConfig+0xea>
 800a3f8:	e01b      	b.n	800a432 <UART_SetConfig+0x106>
 800a3fa:	231b      	movs	r3, #27
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	189b      	adds	r3, r3, r2
 800a400:	19db      	adds	r3, r3, r7
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
 800a406:	e0b4      	b.n	800a572 <UART_SetConfig+0x246>
 800a408:	231b      	movs	r3, #27
 800a40a:	2220      	movs	r2, #32
 800a40c:	189b      	adds	r3, r3, r2
 800a40e:	19db      	adds	r3, r3, r7
 800a410:	2202      	movs	r2, #2
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	e0ad      	b.n	800a572 <UART_SetConfig+0x246>
 800a416:	231b      	movs	r3, #27
 800a418:	2220      	movs	r2, #32
 800a41a:	189b      	adds	r3, r3, r2
 800a41c:	19db      	adds	r3, r3, r7
 800a41e:	2204      	movs	r2, #4
 800a420:	701a      	strb	r2, [r3, #0]
 800a422:	e0a6      	b.n	800a572 <UART_SetConfig+0x246>
 800a424:	231b      	movs	r3, #27
 800a426:	2220      	movs	r2, #32
 800a428:	189b      	adds	r3, r3, r2
 800a42a:	19db      	adds	r3, r3, r7
 800a42c:	2208      	movs	r2, #8
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	e09f      	b.n	800a572 <UART_SetConfig+0x246>
 800a432:	231b      	movs	r3, #27
 800a434:	2220      	movs	r2, #32
 800a436:	189b      	adds	r3, r3, r2
 800a438:	19db      	adds	r3, r3, r7
 800a43a:	2210      	movs	r2, #16
 800a43c:	701a      	strb	r2, [r3, #0]
 800a43e:	e098      	b.n	800a572 <UART_SetConfig+0x246>
 800a440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a7b      	ldr	r2, [pc, #492]	@ (800a634 <UART_SetConfig+0x308>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d131      	bne.n	800a4ae <UART_SetConfig+0x182>
 800a44a:	4b79      	ldr	r3, [pc, #484]	@ (800a630 <UART_SetConfig+0x304>)
 800a44c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a44e:	220c      	movs	r2, #12
 800a450:	4013      	ands	r3, r2
 800a452:	2b0c      	cmp	r3, #12
 800a454:	d01d      	beq.n	800a492 <UART_SetConfig+0x166>
 800a456:	d823      	bhi.n	800a4a0 <UART_SetConfig+0x174>
 800a458:	2b08      	cmp	r3, #8
 800a45a:	d00c      	beq.n	800a476 <UART_SetConfig+0x14a>
 800a45c:	d820      	bhi.n	800a4a0 <UART_SetConfig+0x174>
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d002      	beq.n	800a468 <UART_SetConfig+0x13c>
 800a462:	2b04      	cmp	r3, #4
 800a464:	d00e      	beq.n	800a484 <UART_SetConfig+0x158>
 800a466:	e01b      	b.n	800a4a0 <UART_SetConfig+0x174>
 800a468:	231b      	movs	r3, #27
 800a46a:	2220      	movs	r2, #32
 800a46c:	189b      	adds	r3, r3, r2
 800a46e:	19db      	adds	r3, r3, r7
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]
 800a474:	e07d      	b.n	800a572 <UART_SetConfig+0x246>
 800a476:	231b      	movs	r3, #27
 800a478:	2220      	movs	r2, #32
 800a47a:	189b      	adds	r3, r3, r2
 800a47c:	19db      	adds	r3, r3, r7
 800a47e:	2202      	movs	r2, #2
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	e076      	b.n	800a572 <UART_SetConfig+0x246>
 800a484:	231b      	movs	r3, #27
 800a486:	2220      	movs	r2, #32
 800a488:	189b      	adds	r3, r3, r2
 800a48a:	19db      	adds	r3, r3, r7
 800a48c:	2204      	movs	r2, #4
 800a48e:	701a      	strb	r2, [r3, #0]
 800a490:	e06f      	b.n	800a572 <UART_SetConfig+0x246>
 800a492:	231b      	movs	r3, #27
 800a494:	2220      	movs	r2, #32
 800a496:	189b      	adds	r3, r3, r2
 800a498:	19db      	adds	r3, r3, r7
 800a49a:	2208      	movs	r2, #8
 800a49c:	701a      	strb	r2, [r3, #0]
 800a49e:	e068      	b.n	800a572 <UART_SetConfig+0x246>
 800a4a0:	231b      	movs	r3, #27
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	189b      	adds	r3, r3, r2
 800a4a6:	19db      	adds	r3, r3, r7
 800a4a8:	2210      	movs	r2, #16
 800a4aa:	701a      	strb	r2, [r3, #0]
 800a4ac:	e061      	b.n	800a572 <UART_SetConfig+0x246>
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a61      	ldr	r2, [pc, #388]	@ (800a638 <UART_SetConfig+0x30c>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d106      	bne.n	800a4c6 <UART_SetConfig+0x19a>
 800a4b8:	231b      	movs	r3, #27
 800a4ba:	2220      	movs	r2, #32
 800a4bc:	189b      	adds	r3, r3, r2
 800a4be:	19db      	adds	r3, r3, r7
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	701a      	strb	r2, [r3, #0]
 800a4c4:	e055      	b.n	800a572 <UART_SetConfig+0x246>
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a5c      	ldr	r2, [pc, #368]	@ (800a63c <UART_SetConfig+0x310>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d106      	bne.n	800a4de <UART_SetConfig+0x1b2>
 800a4d0:	231b      	movs	r3, #27
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	189b      	adds	r3, r3, r2
 800a4d6:	19db      	adds	r3, r3, r7
 800a4d8:	2200      	movs	r2, #0
 800a4da:	701a      	strb	r2, [r3, #0]
 800a4dc:	e049      	b.n	800a572 <UART_SetConfig+0x246>
 800a4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a50      	ldr	r2, [pc, #320]	@ (800a624 <UART_SetConfig+0x2f8>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d13e      	bne.n	800a566 <UART_SetConfig+0x23a>
 800a4e8:	4b51      	ldr	r3, [pc, #324]	@ (800a630 <UART_SetConfig+0x304>)
 800a4ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4ec:	23c0      	movs	r3, #192	@ 0xc0
 800a4ee:	011b      	lsls	r3, r3, #4
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	22c0      	movs	r2, #192	@ 0xc0
 800a4f4:	0112      	lsls	r2, r2, #4
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d027      	beq.n	800a54a <UART_SetConfig+0x21e>
 800a4fa:	22c0      	movs	r2, #192	@ 0xc0
 800a4fc:	0112      	lsls	r2, r2, #4
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d82a      	bhi.n	800a558 <UART_SetConfig+0x22c>
 800a502:	2280      	movs	r2, #128	@ 0x80
 800a504:	0112      	lsls	r2, r2, #4
 800a506:	4293      	cmp	r3, r2
 800a508:	d011      	beq.n	800a52e <UART_SetConfig+0x202>
 800a50a:	2280      	movs	r2, #128	@ 0x80
 800a50c:	0112      	lsls	r2, r2, #4
 800a50e:	4293      	cmp	r3, r2
 800a510:	d822      	bhi.n	800a558 <UART_SetConfig+0x22c>
 800a512:	2b00      	cmp	r3, #0
 800a514:	d004      	beq.n	800a520 <UART_SetConfig+0x1f4>
 800a516:	2280      	movs	r2, #128	@ 0x80
 800a518:	00d2      	lsls	r2, r2, #3
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d00e      	beq.n	800a53c <UART_SetConfig+0x210>
 800a51e:	e01b      	b.n	800a558 <UART_SetConfig+0x22c>
 800a520:	231b      	movs	r3, #27
 800a522:	2220      	movs	r2, #32
 800a524:	189b      	adds	r3, r3, r2
 800a526:	19db      	adds	r3, r3, r7
 800a528:	2200      	movs	r2, #0
 800a52a:	701a      	strb	r2, [r3, #0]
 800a52c:	e021      	b.n	800a572 <UART_SetConfig+0x246>
 800a52e:	231b      	movs	r3, #27
 800a530:	2220      	movs	r2, #32
 800a532:	189b      	adds	r3, r3, r2
 800a534:	19db      	adds	r3, r3, r7
 800a536:	2202      	movs	r2, #2
 800a538:	701a      	strb	r2, [r3, #0]
 800a53a:	e01a      	b.n	800a572 <UART_SetConfig+0x246>
 800a53c:	231b      	movs	r3, #27
 800a53e:	2220      	movs	r2, #32
 800a540:	189b      	adds	r3, r3, r2
 800a542:	19db      	adds	r3, r3, r7
 800a544:	2204      	movs	r2, #4
 800a546:	701a      	strb	r2, [r3, #0]
 800a548:	e013      	b.n	800a572 <UART_SetConfig+0x246>
 800a54a:	231b      	movs	r3, #27
 800a54c:	2220      	movs	r2, #32
 800a54e:	189b      	adds	r3, r3, r2
 800a550:	19db      	adds	r3, r3, r7
 800a552:	2208      	movs	r2, #8
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	e00c      	b.n	800a572 <UART_SetConfig+0x246>
 800a558:	231b      	movs	r3, #27
 800a55a:	2220      	movs	r2, #32
 800a55c:	189b      	adds	r3, r3, r2
 800a55e:	19db      	adds	r3, r3, r7
 800a560:	2210      	movs	r2, #16
 800a562:	701a      	strb	r2, [r3, #0]
 800a564:	e005      	b.n	800a572 <UART_SetConfig+0x246>
 800a566:	231b      	movs	r3, #27
 800a568:	2220      	movs	r2, #32
 800a56a:	189b      	adds	r3, r3, r2
 800a56c:	19db      	adds	r3, r3, r7
 800a56e:	2210      	movs	r2, #16
 800a570:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a2b      	ldr	r2, [pc, #172]	@ (800a624 <UART_SetConfig+0x2f8>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d000      	beq.n	800a57e <UART_SetConfig+0x252>
 800a57c:	e0a9      	b.n	800a6d2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a57e:	231b      	movs	r3, #27
 800a580:	2220      	movs	r2, #32
 800a582:	189b      	adds	r3, r3, r2
 800a584:	19db      	adds	r3, r3, r7
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d015      	beq.n	800a5b8 <UART_SetConfig+0x28c>
 800a58c:	dc18      	bgt.n	800a5c0 <UART_SetConfig+0x294>
 800a58e:	2b04      	cmp	r3, #4
 800a590:	d00d      	beq.n	800a5ae <UART_SetConfig+0x282>
 800a592:	dc15      	bgt.n	800a5c0 <UART_SetConfig+0x294>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <UART_SetConfig+0x272>
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d005      	beq.n	800a5a8 <UART_SetConfig+0x27c>
 800a59c:	e010      	b.n	800a5c0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a59e:	f7ff fb17 	bl	8009bd0 <HAL_RCC_GetPCLK1Freq>
 800a5a2:	0003      	movs	r3, r0
 800a5a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5a6:	e014      	b.n	800a5d2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5a8:	4b25      	ldr	r3, [pc, #148]	@ (800a640 <UART_SetConfig+0x314>)
 800a5aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5ac:	e011      	b.n	800a5d2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5ae:	f7ff fa83 	bl	8009ab8 <HAL_RCC_GetSysClockFreq>
 800a5b2:	0003      	movs	r3, r0
 800a5b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5b6:	e00c      	b.n	800a5d2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5b8:	2380      	movs	r3, #128	@ 0x80
 800a5ba:	021b      	lsls	r3, r3, #8
 800a5bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5be:	e008      	b.n	800a5d2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a5c4:	231a      	movs	r3, #26
 800a5c6:	2220      	movs	r2, #32
 800a5c8:	189b      	adds	r3, r3, r2
 800a5ca:	19db      	adds	r3, r3, r7
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	701a      	strb	r2, [r3, #0]
        break;
 800a5d0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d100      	bne.n	800a5da <UART_SetConfig+0x2ae>
 800a5d8:	e14b      	b.n	800a872 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5de:	4b19      	ldr	r3, [pc, #100]	@ (800a644 <UART_SetConfig+0x318>)
 800a5e0:	0052      	lsls	r2, r2, #1
 800a5e2:	5ad3      	ldrh	r3, [r2, r3]
 800a5e4:	0019      	movs	r1, r3
 800a5e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a5e8:	f7f5 fdb2 	bl	8000150 <__udivsi3>
 800a5ec:	0003      	movs	r3, r0
 800a5ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	0013      	movs	r3, r2
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	189b      	adds	r3, r3, r2
 800a5fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d305      	bcc.n	800a60c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a608:	429a      	cmp	r2, r3
 800a60a:	d91d      	bls.n	800a648 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800a60c:	231a      	movs	r3, #26
 800a60e:	2220      	movs	r2, #32
 800a610:	189b      	adds	r3, r3, r2
 800a612:	19db      	adds	r3, r3, r7
 800a614:	2201      	movs	r2, #1
 800a616:	701a      	strb	r2, [r3, #0]
 800a618:	e12b      	b.n	800a872 <UART_SetConfig+0x546>
 800a61a:	46c0      	nop			@ (mov r8, r8)
 800a61c:	cfff69f3 	.word	0xcfff69f3
 800a620:	ffffcfff 	.word	0xffffcfff
 800a624:	40008000 	.word	0x40008000
 800a628:	11fff4ff 	.word	0x11fff4ff
 800a62c:	40013800 	.word	0x40013800
 800a630:	40021000 	.word	0x40021000
 800a634:	40004400 	.word	0x40004400
 800a638:	40004800 	.word	0x40004800
 800a63c:	40004c00 	.word	0x40004c00
 800a640:	00f42400 	.word	0x00f42400
 800a644:	0800ed88 	.word	0x0800ed88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64a:	61bb      	str	r3, [r7, #24]
 800a64c:	2300      	movs	r3, #0
 800a64e:	61fb      	str	r3, [r7, #28]
 800a650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a654:	4b92      	ldr	r3, [pc, #584]	@ (800a8a0 <UART_SetConfig+0x574>)
 800a656:	0052      	lsls	r2, r2, #1
 800a658:	5ad3      	ldrh	r3, [r2, r3]
 800a65a:	613b      	str	r3, [r7, #16]
 800a65c:	2300      	movs	r3, #0
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	69b8      	ldr	r0, [r7, #24]
 800a666:	69f9      	ldr	r1, [r7, #28]
 800a668:	f7f5 ff60 	bl	800052c <__aeabi_uldivmod>
 800a66c:	0002      	movs	r2, r0
 800a66e:	000b      	movs	r3, r1
 800a670:	0e11      	lsrs	r1, r2, #24
 800a672:	021d      	lsls	r5, r3, #8
 800a674:	430d      	orrs	r5, r1
 800a676:	0214      	lsls	r4, r2, #8
 800a678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	085b      	lsrs	r3, r3, #1
 800a67e:	60bb      	str	r3, [r7, #8]
 800a680:	2300      	movs	r3, #0
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	68b8      	ldr	r0, [r7, #8]
 800a686:	68f9      	ldr	r1, [r7, #12]
 800a688:	1900      	adds	r0, r0, r4
 800a68a:	4169      	adcs	r1, r5
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	603b      	str	r3, [r7, #0]
 800a692:	2300      	movs	r3, #0
 800a694:	607b      	str	r3, [r7, #4]
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f7f5 ff47 	bl	800052c <__aeabi_uldivmod>
 800a69e:	0002      	movs	r2, r0
 800a6a0:	000b      	movs	r3, r1
 800a6a2:	0013      	movs	r3, r2
 800a6a4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6a8:	23c0      	movs	r3, #192	@ 0xc0
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d309      	bcc.n	800a6c4 <UART_SetConfig+0x398>
 800a6b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6b2:	2380      	movs	r3, #128	@ 0x80
 800a6b4:	035b      	lsls	r3, r3, #13
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d204      	bcs.n	800a6c4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6c0:	60da      	str	r2, [r3, #12]
 800a6c2:	e0d6      	b.n	800a872 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800a6c4:	231a      	movs	r3, #26
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	189b      	adds	r3, r3, r2
 800a6ca:	19db      	adds	r3, r3, r7
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	701a      	strb	r2, [r3, #0]
 800a6d0:	e0cf      	b.n	800a872 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d4:	69da      	ldr	r2, [r3, #28]
 800a6d6:	2380      	movs	r3, #128	@ 0x80
 800a6d8:	021b      	lsls	r3, r3, #8
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d000      	beq.n	800a6e0 <UART_SetConfig+0x3b4>
 800a6de:	e070      	b.n	800a7c2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800a6e0:	231b      	movs	r3, #27
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	189b      	adds	r3, r3, r2
 800a6e6:	19db      	adds	r3, r3, r7
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b08      	cmp	r3, #8
 800a6ec:	d015      	beq.n	800a71a <UART_SetConfig+0x3ee>
 800a6ee:	dc18      	bgt.n	800a722 <UART_SetConfig+0x3f6>
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d00d      	beq.n	800a710 <UART_SetConfig+0x3e4>
 800a6f4:	dc15      	bgt.n	800a722 <UART_SetConfig+0x3f6>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <UART_SetConfig+0x3d4>
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d005      	beq.n	800a70a <UART_SetConfig+0x3de>
 800a6fe:	e010      	b.n	800a722 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a700:	f7ff fa66 	bl	8009bd0 <HAL_RCC_GetPCLK1Freq>
 800a704:	0003      	movs	r3, r0
 800a706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a708:	e014      	b.n	800a734 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a70a:	4b66      	ldr	r3, [pc, #408]	@ (800a8a4 <UART_SetConfig+0x578>)
 800a70c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a70e:	e011      	b.n	800a734 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a710:	f7ff f9d2 	bl	8009ab8 <HAL_RCC_GetSysClockFreq>
 800a714:	0003      	movs	r3, r0
 800a716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a718:	e00c      	b.n	800a734 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a71a:	2380      	movs	r3, #128	@ 0x80
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a720:	e008      	b.n	800a734 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a726:	231a      	movs	r3, #26
 800a728:	2220      	movs	r2, #32
 800a72a:	189b      	adds	r3, r3, r2
 800a72c:	19db      	adds	r3, r3, r7
 800a72e:	2201      	movs	r2, #1
 800a730:	701a      	strb	r2, [r3, #0]
        break;
 800a732:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a736:	2b00      	cmp	r3, #0
 800a738:	d100      	bne.n	800a73c <UART_SetConfig+0x410>
 800a73a:	e09a      	b.n	800a872 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a740:	4b57      	ldr	r3, [pc, #348]	@ (800a8a0 <UART_SetConfig+0x574>)
 800a742:	0052      	lsls	r2, r2, #1
 800a744:	5ad3      	ldrh	r3, [r2, r3]
 800a746:	0019      	movs	r1, r3
 800a748:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a74a:	f7f5 fd01 	bl	8000150 <__udivsi3>
 800a74e:	0003      	movs	r3, r0
 800a750:	005a      	lsls	r2, r3, #1
 800a752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	085b      	lsrs	r3, r3, #1
 800a758:	18d2      	adds	r2, r2, r3
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	0019      	movs	r1, r3
 800a760:	0010      	movs	r0, r2
 800a762:	f7f5 fcf5 	bl	8000150 <__udivsi3>
 800a766:	0003      	movs	r3, r0
 800a768:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	2b0f      	cmp	r3, #15
 800a76e:	d921      	bls.n	800a7b4 <UART_SetConfig+0x488>
 800a770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a772:	2380      	movs	r3, #128	@ 0x80
 800a774:	025b      	lsls	r3, r3, #9
 800a776:	429a      	cmp	r2, r3
 800a778:	d21c      	bcs.n	800a7b4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	200e      	movs	r0, #14
 800a780:	2420      	movs	r4, #32
 800a782:	1903      	adds	r3, r0, r4
 800a784:	19db      	adds	r3, r3, r7
 800a786:	210f      	movs	r1, #15
 800a788:	438a      	bics	r2, r1
 800a78a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	085b      	lsrs	r3, r3, #1
 800a790:	b29b      	uxth	r3, r3
 800a792:	2207      	movs	r2, #7
 800a794:	4013      	ands	r3, r2
 800a796:	b299      	uxth	r1, r3
 800a798:	1903      	adds	r3, r0, r4
 800a79a:	19db      	adds	r3, r3, r7
 800a79c:	1902      	adds	r2, r0, r4
 800a79e:	19d2      	adds	r2, r2, r7
 800a7a0:	8812      	ldrh	r2, [r2, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	1902      	adds	r2, r0, r4
 800a7ac:	19d2      	adds	r2, r2, r7
 800a7ae:	8812      	ldrh	r2, [r2, #0]
 800a7b0:	60da      	str	r2, [r3, #12]
 800a7b2:	e05e      	b.n	800a872 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800a7b4:	231a      	movs	r3, #26
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	189b      	adds	r3, r3, r2
 800a7ba:	19db      	adds	r3, r3, r7
 800a7bc:	2201      	movs	r2, #1
 800a7be:	701a      	strb	r2, [r3, #0]
 800a7c0:	e057      	b.n	800a872 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7c2:	231b      	movs	r3, #27
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	189b      	adds	r3, r3, r2
 800a7c8:	19db      	adds	r3, r3, r7
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d015      	beq.n	800a7fc <UART_SetConfig+0x4d0>
 800a7d0:	dc18      	bgt.n	800a804 <UART_SetConfig+0x4d8>
 800a7d2:	2b04      	cmp	r3, #4
 800a7d4:	d00d      	beq.n	800a7f2 <UART_SetConfig+0x4c6>
 800a7d6:	dc15      	bgt.n	800a804 <UART_SetConfig+0x4d8>
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <UART_SetConfig+0x4b6>
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d005      	beq.n	800a7ec <UART_SetConfig+0x4c0>
 800a7e0:	e010      	b.n	800a804 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7e2:	f7ff f9f5 	bl	8009bd0 <HAL_RCC_GetPCLK1Freq>
 800a7e6:	0003      	movs	r3, r0
 800a7e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7ea:	e014      	b.n	800a816 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7ec:	4b2d      	ldr	r3, [pc, #180]	@ (800a8a4 <UART_SetConfig+0x578>)
 800a7ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7f0:	e011      	b.n	800a816 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7f2:	f7ff f961 	bl	8009ab8 <HAL_RCC_GetSysClockFreq>
 800a7f6:	0003      	movs	r3, r0
 800a7f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7fa:	e00c      	b.n	800a816 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7fc:	2380      	movs	r3, #128	@ 0x80
 800a7fe:	021b      	lsls	r3, r3, #8
 800a800:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a802:	e008      	b.n	800a816 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a808:	231a      	movs	r3, #26
 800a80a:	2220      	movs	r2, #32
 800a80c:	189b      	adds	r3, r3, r2
 800a80e:	19db      	adds	r3, r3, r7
 800a810:	2201      	movs	r2, #1
 800a812:	701a      	strb	r2, [r3, #0]
        break;
 800a814:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d02a      	beq.n	800a872 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a820:	4b1f      	ldr	r3, [pc, #124]	@ (800a8a0 <UART_SetConfig+0x574>)
 800a822:	0052      	lsls	r2, r2, #1
 800a824:	5ad3      	ldrh	r3, [r2, r3]
 800a826:	0019      	movs	r1, r3
 800a828:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a82a:	f7f5 fc91 	bl	8000150 <__udivsi3>
 800a82e:	0003      	movs	r3, r0
 800a830:	001a      	movs	r2, r3
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	085b      	lsrs	r3, r3, #1
 800a838:	18d2      	adds	r2, r2, r3
 800a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	0019      	movs	r1, r3
 800a840:	0010      	movs	r0, r2
 800a842:	f7f5 fc85 	bl	8000150 <__udivsi3>
 800a846:	0003      	movs	r3, r0
 800a848:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84c:	2b0f      	cmp	r3, #15
 800a84e:	d90a      	bls.n	800a866 <UART_SetConfig+0x53a>
 800a850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a852:	2380      	movs	r3, #128	@ 0x80
 800a854:	025b      	lsls	r3, r3, #9
 800a856:	429a      	cmp	r2, r3
 800a858:	d205      	bcs.n	800a866 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	60da      	str	r2, [r3, #12]
 800a864:	e005      	b.n	800a872 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800a866:	231a      	movs	r3, #26
 800a868:	2220      	movs	r2, #32
 800a86a:	189b      	adds	r3, r3, r2
 800a86c:	19db      	adds	r3, r3, r7
 800a86e:	2201      	movs	r2, #1
 800a870:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	226a      	movs	r2, #106	@ 0x6a
 800a876:	2101      	movs	r1, #1
 800a878:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	2268      	movs	r2, #104	@ 0x68
 800a87e:	2101      	movs	r1, #1
 800a880:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a884:	2200      	movs	r2, #0
 800a886:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	2200      	movs	r2, #0
 800a88c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a88e:	231a      	movs	r3, #26
 800a890:	2220      	movs	r2, #32
 800a892:	189b      	adds	r3, r3, r2
 800a894:	19db      	adds	r3, r3, r7
 800a896:	781b      	ldrb	r3, [r3, #0]
}
 800a898:	0018      	movs	r0, r3
 800a89a:	46bd      	mov	sp, r7
 800a89c:	b010      	add	sp, #64	@ 0x40
 800a89e:	bdb0      	pop	{r4, r5, r7, pc}
 800a8a0:	0800ed88 	.word	0x0800ed88
 800a8a4:	00f42400 	.word	0x00f42400

0800a8a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b4:	2208      	movs	r2, #8
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	d00b      	beq.n	800a8d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	4a4a      	ldr	r2, [pc, #296]	@ (800a9ec <UART_AdvFeatureConfig+0x144>)
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	0019      	movs	r1, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4013      	ands	r3, r2
 800a8da:	d00b      	beq.n	800a8f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	4a43      	ldr	r2, [pc, #268]	@ (800a9f0 <UART_AdvFeatureConfig+0x148>)
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	0019      	movs	r1, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	d00b      	beq.n	800a916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	4a3b      	ldr	r2, [pc, #236]	@ (800a9f4 <UART_AdvFeatureConfig+0x14c>)
 800a906:	4013      	ands	r3, r2
 800a908:	0019      	movs	r1, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a91a:	2204      	movs	r2, #4
 800a91c:	4013      	ands	r3, r2
 800a91e:	d00b      	beq.n	800a938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	4a34      	ldr	r2, [pc, #208]	@ (800a9f8 <UART_AdvFeatureConfig+0x150>)
 800a928:	4013      	ands	r3, r2
 800a92a:	0019      	movs	r1, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	430a      	orrs	r2, r1
 800a936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a93c:	2210      	movs	r2, #16
 800a93e:	4013      	ands	r3, r2
 800a940:	d00b      	beq.n	800a95a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	4a2c      	ldr	r2, [pc, #176]	@ (800a9fc <UART_AdvFeatureConfig+0x154>)
 800a94a:	4013      	ands	r3, r2
 800a94c:	0019      	movs	r1, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	430a      	orrs	r2, r1
 800a958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a95e:	2220      	movs	r2, #32
 800a960:	4013      	ands	r3, r2
 800a962:	d00b      	beq.n	800a97c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	4a25      	ldr	r2, [pc, #148]	@ (800aa00 <UART_AdvFeatureConfig+0x158>)
 800a96c:	4013      	ands	r3, r2
 800a96e:	0019      	movs	r1, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	430a      	orrs	r2, r1
 800a97a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a980:	2240      	movs	r2, #64	@ 0x40
 800a982:	4013      	ands	r3, r2
 800a984:	d01d      	beq.n	800a9c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	4a1d      	ldr	r2, [pc, #116]	@ (800aa04 <UART_AdvFeatureConfig+0x15c>)
 800a98e:	4013      	ands	r3, r2
 800a990:	0019      	movs	r1, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	430a      	orrs	r2, r1
 800a99c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9a2:	2380      	movs	r3, #128	@ 0x80
 800a9a4:	035b      	lsls	r3, r3, #13
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d10b      	bne.n	800a9c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	4a15      	ldr	r2, [pc, #84]	@ (800aa08 <UART_AdvFeatureConfig+0x160>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	0019      	movs	r1, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c6:	2280      	movs	r2, #128	@ 0x80
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	d00b      	beq.n	800a9e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	4a0e      	ldr	r2, [pc, #56]	@ (800aa0c <UART_AdvFeatureConfig+0x164>)
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	0019      	movs	r1, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	605a      	str	r2, [r3, #4]
  }
}
 800a9e4:	46c0      	nop			@ (mov r8, r8)
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	b002      	add	sp, #8
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	ffff7fff 	.word	0xffff7fff
 800a9f0:	fffdffff 	.word	0xfffdffff
 800a9f4:	fffeffff 	.word	0xfffeffff
 800a9f8:	fffbffff 	.word	0xfffbffff
 800a9fc:	ffffefff 	.word	0xffffefff
 800aa00:	ffffdfff 	.word	0xffffdfff
 800aa04:	ffefffff 	.word	0xffefffff
 800aa08:	ff9fffff 	.word	0xff9fffff
 800aa0c:	fff7ffff 	.word	0xfff7ffff

0800aa10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b092      	sub	sp, #72	@ 0x48
 800aa14:	af02      	add	r7, sp, #8
 800aa16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2290      	movs	r2, #144	@ 0x90
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa20:	f7fd fac2 	bl	8007fa8 <HAL_GetTick>
 800aa24:	0003      	movs	r3, r0
 800aa26:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2208      	movs	r2, #8
 800aa30:	4013      	ands	r3, r2
 800aa32:	2b08      	cmp	r3, #8
 800aa34:	d12d      	bne.n	800aa92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa38:	2280      	movs	r2, #128	@ 0x80
 800aa3a:	0391      	lsls	r1, r2, #14
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	4a47      	ldr	r2, [pc, #284]	@ (800ab5c <UART_CheckIdleState+0x14c>)
 800aa40:	9200      	str	r2, [sp, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f000 f88e 	bl	800ab64 <UART_WaitOnFlagUntilTimeout>
 800aa48:	1e03      	subs	r3, r0, #0
 800aa4a:	d022      	beq.n	800aa92 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa4c:	f3ef 8310 	mrs	r3, PRIMASK
 800aa50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800aa52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aa54:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa56:	2301      	movs	r3, #1
 800aa58:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5c:	f383 8810 	msr	PRIMASK, r3
}
 800aa60:	46c0      	nop			@ (mov r8, r8)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2180      	movs	r1, #128	@ 0x80
 800aa6e:	438a      	bics	r2, r1
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa78:	f383 8810 	msr	PRIMASK, r3
}
 800aa7c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2288      	movs	r2, #136	@ 0x88
 800aa82:	2120      	movs	r1, #32
 800aa84:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2284      	movs	r2, #132	@ 0x84
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e060      	b.n	800ab54 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2204      	movs	r2, #4
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d146      	bne.n	800ab2e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaa2:	2280      	movs	r2, #128	@ 0x80
 800aaa4:	03d1      	lsls	r1, r2, #15
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	4a2c      	ldr	r2, [pc, #176]	@ (800ab5c <UART_CheckIdleState+0x14c>)
 800aaaa:	9200      	str	r2, [sp, #0]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f000 f859 	bl	800ab64 <UART_WaitOnFlagUntilTimeout>
 800aab2:	1e03      	subs	r3, r0, #0
 800aab4:	d03b      	beq.n	800ab2e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aab6:	f3ef 8310 	mrs	r3, PRIMASK
 800aaba:	60fb      	str	r3, [r7, #12]
  return(result);
 800aabc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aabe:	637b      	str	r3, [r7, #52]	@ 0x34
 800aac0:	2301      	movs	r3, #1
 800aac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	f383 8810 	msr	PRIMASK, r3
}
 800aaca:	46c0      	nop			@ (mov r8, r8)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4922      	ldr	r1, [pc, #136]	@ (800ab60 <UART_CheckIdleState+0x150>)
 800aad8:	400a      	ands	r2, r1
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aade:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f383 8810 	msr	PRIMASK, r3
}
 800aae6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aae8:	f3ef 8310 	mrs	r3, PRIMASK
 800aaec:	61bb      	str	r3, [r7, #24]
  return(result);
 800aaee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf0:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	f383 8810 	msr	PRIMASK, r3
}
 800aafc:	46c0      	nop			@ (mov r8, r8)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2101      	movs	r1, #1
 800ab0a:	438a      	bics	r2, r1
 800ab0c:	609a      	str	r2, [r3, #8]
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	f383 8810 	msr	PRIMASK, r3
}
 800ab18:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	228c      	movs	r2, #140	@ 0x8c
 800ab1e:	2120      	movs	r1, #32
 800ab20:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2284      	movs	r2, #132	@ 0x84
 800ab26:	2100      	movs	r1, #0
 800ab28:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e012      	b.n	800ab54 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2288      	movs	r2, #136	@ 0x88
 800ab32:	2120      	movs	r1, #32
 800ab34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	228c      	movs	r2, #140	@ 0x8c
 800ab3a:	2120      	movs	r1, #32
 800ab3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2284      	movs	r2, #132	@ 0x84
 800ab4e:	2100      	movs	r1, #0
 800ab50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	0018      	movs	r0, r3
 800ab56:	46bd      	mov	sp, r7
 800ab58:	b010      	add	sp, #64	@ 0x40
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	01ffffff 	.word	0x01ffffff
 800ab60:	fffffedf 	.word	0xfffffedf

0800ab64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	1dfb      	adds	r3, r7, #7
 800ab72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab74:	e051      	b.n	800ac1a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	d04e      	beq.n	800ac1a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab7c:	f7fd fa14 	bl	8007fa8 <HAL_GetTick>
 800ab80:	0002      	movs	r2, r0
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d302      	bcc.n	800ab92 <UART_WaitOnFlagUntilTimeout+0x2e>
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e051      	b.n	800ac3a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2204      	movs	r2, #4
 800ab9e:	4013      	ands	r3, r2
 800aba0:	d03b      	beq.n	800ac1a <UART_WaitOnFlagUntilTimeout+0xb6>
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b80      	cmp	r3, #128	@ 0x80
 800aba6:	d038      	beq.n	800ac1a <UART_WaitOnFlagUntilTimeout+0xb6>
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2b40      	cmp	r3, #64	@ 0x40
 800abac:	d035      	beq.n	800ac1a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	69db      	ldr	r3, [r3, #28]
 800abb4:	2208      	movs	r2, #8
 800abb6:	4013      	ands	r3, r2
 800abb8:	2b08      	cmp	r3, #8
 800abba:	d111      	bne.n	800abe0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2208      	movs	r2, #8
 800abc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	0018      	movs	r0, r3
 800abc8:	f000 f83c 	bl	800ac44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2290      	movs	r2, #144	@ 0x90
 800abd0:	2108      	movs	r1, #8
 800abd2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2284      	movs	r2, #132	@ 0x84
 800abd8:	2100      	movs	r1, #0
 800abda:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	e02c      	b.n	800ac3a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	69da      	ldr	r2, [r3, #28]
 800abe6:	2380      	movs	r3, #128	@ 0x80
 800abe8:	011b      	lsls	r3, r3, #4
 800abea:	401a      	ands	r2, r3
 800abec:	2380      	movs	r3, #128	@ 0x80
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d112      	bne.n	800ac1a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2280      	movs	r2, #128	@ 0x80
 800abfa:	0112      	lsls	r2, r2, #4
 800abfc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	0018      	movs	r0, r3
 800ac02:	f000 f81f 	bl	800ac44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2290      	movs	r2, #144	@ 0x90
 800ac0a:	2120      	movs	r1, #32
 800ac0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2284      	movs	r2, #132	@ 0x84
 800ac12:	2100      	movs	r1, #0
 800ac14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e00f      	b.n	800ac3a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	4013      	ands	r3, r2
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	425a      	negs	r2, r3
 800ac2a:	4153      	adcs	r3, r2
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	001a      	movs	r2, r3
 800ac30:	1dfb      	adds	r3, r7, #7
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d09e      	beq.n	800ab76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	0018      	movs	r0, r3
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	b004      	add	sp, #16
 800ac40:	bd80      	pop	{r7, pc}
	...

0800ac44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08e      	sub	sp, #56	@ 0x38
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac50:	617b      	str	r3, [r7, #20]
  return(result);
 800ac52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac56:	2301      	movs	r3, #1
 800ac58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	f383 8810 	msr	PRIMASK, r3
}
 800ac60:	46c0      	nop			@ (mov r8, r8)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4926      	ldr	r1, [pc, #152]	@ (800ad08 <UART_EndRxTransfer+0xc4>)
 800ac6e:	400a      	ands	r2, r1
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	f383 8810 	msr	PRIMASK, r3
}
 800ac7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac82:	623b      	str	r3, [r7, #32]
  return(result);
 800ac84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac86:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac88:	2301      	movs	r3, #1
 800ac8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	f383 8810 	msr	PRIMASK, r3
}
 800ac92:	46c0      	nop			@ (mov r8, r8)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689a      	ldr	r2, [r3, #8]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	491b      	ldr	r1, [pc, #108]	@ (800ad0c <UART_EndRxTransfer+0xc8>)
 800aca0:	400a      	ands	r2, r1
 800aca2:	609a      	str	r2, [r3, #8]
 800aca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acaa:	f383 8810 	msr	PRIMASK, r3
}
 800acae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d118      	bne.n	800acea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acb8:	f3ef 8310 	mrs	r3, PRIMASK
 800acbc:	60bb      	str	r3, [r7, #8]
  return(result);
 800acbe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acc2:	2301      	movs	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f383 8810 	msr	PRIMASK, r3
}
 800accc:	46c0      	nop			@ (mov r8, r8)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2110      	movs	r1, #16
 800acda:	438a      	bics	r2, r1
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f383 8810 	msr	PRIMASK, r3
}
 800ace8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	228c      	movs	r2, #140	@ 0x8c
 800acee:	2120      	movs	r1, #32
 800acf0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800acfe:	46c0      	nop			@ (mov r8, r8)
 800ad00:	46bd      	mov	sp, r7
 800ad02:	b00e      	add	sp, #56	@ 0x38
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	46c0      	nop			@ (mov r8, r8)
 800ad08:	fffffedf 	.word	0xfffffedf
 800ad0c:	effffffe 	.word	0xeffffffe

0800ad10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2284      	movs	r2, #132	@ 0x84
 800ad1c:	5c9b      	ldrb	r3, [r3, r2]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d101      	bne.n	800ad26 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad22:	2302      	movs	r3, #2
 800ad24:	e027      	b.n	800ad76 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2284      	movs	r2, #132	@ 0x84
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2288      	movs	r2, #136	@ 0x88
 800ad32:	2124      	movs	r1, #36	@ 0x24
 800ad34:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2101      	movs	r1, #1
 800ad4a:	438a      	bics	r2, r1
 800ad4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	4a0b      	ldr	r2, [pc, #44]	@ (800ad80 <HAL_UARTEx_DisableFifoMode+0x70>)
 800ad52:	4013      	ands	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2288      	movs	r2, #136	@ 0x88
 800ad68:	2120      	movs	r1, #32
 800ad6a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2284      	movs	r2, #132	@ 0x84
 800ad70:	2100      	movs	r1, #0
 800ad72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	0018      	movs	r0, r3
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	b004      	add	sp, #16
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	46c0      	nop			@ (mov r8, r8)
 800ad80:	dfffffff 	.word	0xdfffffff

0800ad84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2284      	movs	r2, #132	@ 0x84
 800ad92:	5c9b      	ldrb	r3, [r3, r2]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e02e      	b.n	800adfa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2284      	movs	r2, #132	@ 0x84
 800ada0:	2101      	movs	r1, #1
 800ada2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2288      	movs	r2, #136	@ 0x88
 800ada8:	2124      	movs	r1, #36	@ 0x24
 800adaa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2101      	movs	r1, #1
 800adc0:	438a      	bics	r2, r1
 800adc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	08d9      	lsrs	r1, r3, #3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	0018      	movs	r0, r3
 800addc:	f000 f854 	bl	800ae88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2288      	movs	r2, #136	@ 0x88
 800adec:	2120      	movs	r1, #32
 800adee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2284      	movs	r2, #132	@ 0x84
 800adf4:	2100      	movs	r1, #0
 800adf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	0018      	movs	r0, r3
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b004      	add	sp, #16
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2284      	movs	r2, #132	@ 0x84
 800ae12:	5c9b      	ldrb	r3, [r3, r2]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d101      	bne.n	800ae1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae18:	2302      	movs	r3, #2
 800ae1a:	e02f      	b.n	800ae7c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2284      	movs	r2, #132	@ 0x84
 800ae20:	2101      	movs	r1, #1
 800ae22:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2288      	movs	r2, #136	@ 0x88
 800ae28:	2124      	movs	r1, #36	@ 0x24
 800ae2a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2101      	movs	r1, #1
 800ae40:	438a      	bics	r2, r1
 800ae42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	4a0e      	ldr	r2, [pc, #56]	@ (800ae84 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	0019      	movs	r1, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	0018      	movs	r0, r3
 800ae5e:	f000 f813 	bl	800ae88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2288      	movs	r2, #136	@ 0x88
 800ae6e:	2120      	movs	r1, #32
 800ae70:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2284      	movs	r2, #132	@ 0x84
 800ae76:	2100      	movs	r1, #0
 800ae78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	b004      	add	sp, #16
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	f1ffffff 	.word	0xf1ffffff

0800ae88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d108      	bne.n	800aeaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	226a      	movs	r2, #106	@ 0x6a
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2268      	movs	r2, #104	@ 0x68
 800aea4:	2101      	movs	r1, #1
 800aea6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aea8:	e043      	b.n	800af32 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aeaa:	260f      	movs	r6, #15
 800aeac:	19bb      	adds	r3, r7, r6
 800aeae:	2208      	movs	r2, #8
 800aeb0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aeb2:	200e      	movs	r0, #14
 800aeb4:	183b      	adds	r3, r7, r0
 800aeb6:	2208      	movs	r2, #8
 800aeb8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	0e5b      	lsrs	r3, r3, #25
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	240d      	movs	r4, #13
 800aec6:	193b      	adds	r3, r7, r4
 800aec8:	2107      	movs	r1, #7
 800aeca:	400a      	ands	r2, r1
 800aecc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	0f5b      	lsrs	r3, r3, #29
 800aed6:	b2da      	uxtb	r2, r3
 800aed8:	250c      	movs	r5, #12
 800aeda:	197b      	adds	r3, r7, r5
 800aedc:	2107      	movs	r1, #7
 800aede:	400a      	ands	r2, r1
 800aee0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aee2:	183b      	adds	r3, r7, r0
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	197a      	adds	r2, r7, r5
 800aee8:	7812      	ldrb	r2, [r2, #0]
 800aeea:	4914      	ldr	r1, [pc, #80]	@ (800af3c <UARTEx_SetNbDataToProcess+0xb4>)
 800aeec:	5c8a      	ldrb	r2, [r1, r2]
 800aeee:	435a      	muls	r2, r3
 800aef0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800aef2:	197b      	adds	r3, r7, r5
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	4a12      	ldr	r2, [pc, #72]	@ (800af40 <UARTEx_SetNbDataToProcess+0xb8>)
 800aef8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aefa:	0019      	movs	r1, r3
 800aefc:	f7f5 f9b2 	bl	8000264 <__divsi3>
 800af00:	0003      	movs	r3, r0
 800af02:	b299      	uxth	r1, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	226a      	movs	r2, #106	@ 0x6a
 800af08:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af0a:	19bb      	adds	r3, r7, r6
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	193a      	adds	r2, r7, r4
 800af10:	7812      	ldrb	r2, [r2, #0]
 800af12:	490a      	ldr	r1, [pc, #40]	@ (800af3c <UARTEx_SetNbDataToProcess+0xb4>)
 800af14:	5c8a      	ldrb	r2, [r1, r2]
 800af16:	435a      	muls	r2, r3
 800af18:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800af1a:	193b      	adds	r3, r7, r4
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	4a08      	ldr	r2, [pc, #32]	@ (800af40 <UARTEx_SetNbDataToProcess+0xb8>)
 800af20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af22:	0019      	movs	r1, r3
 800af24:	f7f5 f99e 	bl	8000264 <__divsi3>
 800af28:	0003      	movs	r3, r0
 800af2a:	b299      	uxth	r1, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2268      	movs	r2, #104	@ 0x68
 800af30:	5299      	strh	r1, [r3, r2]
}
 800af32:	46c0      	nop			@ (mov r8, r8)
 800af34:	46bd      	mov	sp, r7
 800af36:	b005      	add	sp, #20
 800af38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af3a:	46c0      	nop			@ (mov r8, r8)
 800af3c:	0800eda0 	.word	0x0800eda0
 800af40:	0800eda8 	.word	0x0800eda8

0800af44 <atof>:
 800af44:	b510      	push	{r4, lr}
 800af46:	2100      	movs	r1, #0
 800af48:	f000 fe18 	bl	800bb7c <strtod>
 800af4c:	bd10      	pop	{r4, pc}
	...

0800af50 <sulp>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	0016      	movs	r6, r2
 800af54:	000d      	movs	r5, r1
 800af56:	f002 f881 	bl	800d05c <__ulp>
 800af5a:	2e00      	cmp	r6, #0
 800af5c:	d00d      	beq.n	800af7a <sulp+0x2a>
 800af5e:	236b      	movs	r3, #107	@ 0x6b
 800af60:	006a      	lsls	r2, r5, #1
 800af62:	0d52      	lsrs	r2, r2, #21
 800af64:	1a9b      	subs	r3, r3, r2
 800af66:	2b00      	cmp	r3, #0
 800af68:	dd07      	ble.n	800af7a <sulp+0x2a>
 800af6a:	2400      	movs	r4, #0
 800af6c:	4a03      	ldr	r2, [pc, #12]	@ (800af7c <sulp+0x2c>)
 800af6e:	051b      	lsls	r3, r3, #20
 800af70:	189d      	adds	r5, r3, r2
 800af72:	002b      	movs	r3, r5
 800af74:	0022      	movs	r2, r4
 800af76:	f7f7 fc7f 	bl	8002878 <__aeabi_dmul>
 800af7a:	bd70      	pop	{r4, r5, r6, pc}
 800af7c:	3ff00000 	.word	0x3ff00000

0800af80 <_strtod_l>:
 800af80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af82:	b0a3      	sub	sp, #140	@ 0x8c
 800af84:	921b      	str	r2, [sp, #108]	@ 0x6c
 800af86:	2200      	movs	r2, #0
 800af88:	2600      	movs	r6, #0
 800af8a:	2700      	movs	r7, #0
 800af8c:	9005      	str	r0, [sp, #20]
 800af8e:	9109      	str	r1, [sp, #36]	@ 0x24
 800af90:	921e      	str	r2, [sp, #120]	@ 0x78
 800af92:	911d      	str	r1, [sp, #116]	@ 0x74
 800af94:	780a      	ldrb	r2, [r1, #0]
 800af96:	2a2b      	cmp	r2, #43	@ 0x2b
 800af98:	d053      	beq.n	800b042 <_strtod_l+0xc2>
 800af9a:	d83f      	bhi.n	800b01c <_strtod_l+0x9c>
 800af9c:	2a0d      	cmp	r2, #13
 800af9e:	d839      	bhi.n	800b014 <_strtod_l+0x94>
 800afa0:	2a08      	cmp	r2, #8
 800afa2:	d839      	bhi.n	800b018 <_strtod_l+0x98>
 800afa4:	2a00      	cmp	r2, #0
 800afa6:	d042      	beq.n	800b02e <_strtod_l+0xae>
 800afa8:	2200      	movs	r2, #0
 800afaa:	9212      	str	r2, [sp, #72]	@ 0x48
 800afac:	2100      	movs	r1, #0
 800afae:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800afb0:	910c      	str	r1, [sp, #48]	@ 0x30
 800afb2:	782a      	ldrb	r2, [r5, #0]
 800afb4:	2a30      	cmp	r2, #48	@ 0x30
 800afb6:	d000      	beq.n	800afba <_strtod_l+0x3a>
 800afb8:	e083      	b.n	800b0c2 <_strtod_l+0x142>
 800afba:	786a      	ldrb	r2, [r5, #1]
 800afbc:	3120      	adds	r1, #32
 800afbe:	438a      	bics	r2, r1
 800afc0:	2a58      	cmp	r2, #88	@ 0x58
 800afc2:	d000      	beq.n	800afc6 <_strtod_l+0x46>
 800afc4:	e073      	b.n	800b0ae <_strtod_l+0x12e>
 800afc6:	9302      	str	r3, [sp, #8]
 800afc8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800afca:	4a9b      	ldr	r2, [pc, #620]	@ (800b238 <_strtod_l+0x2b8>)
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	ab1e      	add	r3, sp, #120	@ 0x78
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	9805      	ldr	r0, [sp, #20]
 800afd4:	ab1f      	add	r3, sp, #124	@ 0x7c
 800afd6:	a91d      	add	r1, sp, #116	@ 0x74
 800afd8:	f001 f8f8 	bl	800c1cc <__gethex>
 800afdc:	230f      	movs	r3, #15
 800afde:	0002      	movs	r2, r0
 800afe0:	401a      	ands	r2, r3
 800afe2:	0004      	movs	r4, r0
 800afe4:	9206      	str	r2, [sp, #24]
 800afe6:	4218      	tst	r0, r3
 800afe8:	d005      	beq.n	800aff6 <_strtod_l+0x76>
 800afea:	2a06      	cmp	r2, #6
 800afec:	d12b      	bne.n	800b046 <_strtod_l+0xc6>
 800afee:	2300      	movs	r3, #0
 800aff0:	3501      	adds	r5, #1
 800aff2:	951d      	str	r5, [sp, #116]	@ 0x74
 800aff4:	9312      	str	r3, [sp, #72]	@ 0x48
 800aff6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <_strtod_l+0x82>
 800affc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800affe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b004:	2b00      	cmp	r3, #0
 800b006:	d019      	beq.n	800b03c <_strtod_l+0xbc>
 800b008:	2380      	movs	r3, #128	@ 0x80
 800b00a:	0030      	movs	r0, r6
 800b00c:	061b      	lsls	r3, r3, #24
 800b00e:	18f9      	adds	r1, r7, r3
 800b010:	b023      	add	sp, #140	@ 0x8c
 800b012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b014:	2a20      	cmp	r2, #32
 800b016:	d1c7      	bne.n	800afa8 <_strtod_l+0x28>
 800b018:	3101      	adds	r1, #1
 800b01a:	e7ba      	b.n	800af92 <_strtod_l+0x12>
 800b01c:	2a2d      	cmp	r2, #45	@ 0x2d
 800b01e:	d1c3      	bne.n	800afa8 <_strtod_l+0x28>
 800b020:	3a2c      	subs	r2, #44	@ 0x2c
 800b022:	9212      	str	r2, [sp, #72]	@ 0x48
 800b024:	1c4a      	adds	r2, r1, #1
 800b026:	921d      	str	r2, [sp, #116]	@ 0x74
 800b028:	784a      	ldrb	r2, [r1, #1]
 800b02a:	2a00      	cmp	r2, #0
 800b02c:	d1be      	bne.n	800afac <_strtod_l+0x2c>
 800b02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b030:	931d      	str	r3, [sp, #116]	@ 0x74
 800b032:	2300      	movs	r3, #0
 800b034:	9312      	str	r3, [sp, #72]	@ 0x48
 800b036:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1df      	bne.n	800affc <_strtod_l+0x7c>
 800b03c:	0030      	movs	r0, r6
 800b03e:	0039      	movs	r1, r7
 800b040:	e7e6      	b.n	800b010 <_strtod_l+0x90>
 800b042:	2200      	movs	r2, #0
 800b044:	e7ed      	b.n	800b022 <_strtod_l+0xa2>
 800b046:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b048:	2a00      	cmp	r2, #0
 800b04a:	d007      	beq.n	800b05c <_strtod_l+0xdc>
 800b04c:	2135      	movs	r1, #53	@ 0x35
 800b04e:	a820      	add	r0, sp, #128	@ 0x80
 800b050:	f002 f8fa 	bl	800d248 <__copybits>
 800b054:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b056:	9805      	ldr	r0, [sp, #20]
 800b058:	f001 fcbc 	bl	800c9d4 <_Bfree>
 800b05c:	9806      	ldr	r0, [sp, #24]
 800b05e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b060:	3801      	subs	r0, #1
 800b062:	2804      	cmp	r0, #4
 800b064:	d806      	bhi.n	800b074 <_strtod_l+0xf4>
 800b066:	f7f5 f85f 	bl	8000128 <__gnu_thumb1_case_uqi>
 800b06a:	0312      	.short	0x0312
 800b06c:	1e1c      	.short	0x1e1c
 800b06e:	12          	.byte	0x12
 800b06f:	00          	.byte	0x00
 800b070:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b072:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800b074:	05e4      	lsls	r4, r4, #23
 800b076:	d502      	bpl.n	800b07e <_strtod_l+0xfe>
 800b078:	2380      	movs	r3, #128	@ 0x80
 800b07a:	061b      	lsls	r3, r3, #24
 800b07c:	431f      	orrs	r7, r3
 800b07e:	4b6f      	ldr	r3, [pc, #444]	@ (800b23c <_strtod_l+0x2bc>)
 800b080:	423b      	tst	r3, r7
 800b082:	d1b8      	bne.n	800aff6 <_strtod_l+0x76>
 800b084:	f000 ff96 	bl	800bfb4 <__errno>
 800b088:	2322      	movs	r3, #34	@ 0x22
 800b08a:	6003      	str	r3, [r0, #0]
 800b08c:	e7b3      	b.n	800aff6 <_strtod_l+0x76>
 800b08e:	496c      	ldr	r1, [pc, #432]	@ (800b240 <_strtod_l+0x2c0>)
 800b090:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b092:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b094:	400a      	ands	r2, r1
 800b096:	496b      	ldr	r1, [pc, #428]	@ (800b244 <_strtod_l+0x2c4>)
 800b098:	185b      	adds	r3, r3, r1
 800b09a:	051b      	lsls	r3, r3, #20
 800b09c:	431a      	orrs	r2, r3
 800b09e:	0017      	movs	r7, r2
 800b0a0:	e7e8      	b.n	800b074 <_strtod_l+0xf4>
 800b0a2:	4f66      	ldr	r7, [pc, #408]	@ (800b23c <_strtod_l+0x2bc>)
 800b0a4:	e7e6      	b.n	800b074 <_strtod_l+0xf4>
 800b0a6:	2601      	movs	r6, #1
 800b0a8:	4f67      	ldr	r7, [pc, #412]	@ (800b248 <_strtod_l+0x2c8>)
 800b0aa:	4276      	negs	r6, r6
 800b0ac:	e7e2      	b.n	800b074 <_strtod_l+0xf4>
 800b0ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b0b0:	1c5a      	adds	r2, r3, #1
 800b0b2:	921d      	str	r2, [sp, #116]	@ 0x74
 800b0b4:	785b      	ldrb	r3, [r3, #1]
 800b0b6:	2b30      	cmp	r3, #48	@ 0x30
 800b0b8:	d0f9      	beq.n	800b0ae <_strtod_l+0x12e>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d09b      	beq.n	800aff6 <_strtod_l+0x76>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b0c4:	220a      	movs	r2, #10
 800b0c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0cc:	930d      	str	r3, [sp, #52]	@ 0x34
 800b0ce:	9308      	str	r3, [sp, #32]
 800b0d0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800b0d2:	7804      	ldrb	r4, [r0, #0]
 800b0d4:	0023      	movs	r3, r4
 800b0d6:	3b30      	subs	r3, #48	@ 0x30
 800b0d8:	b2d9      	uxtb	r1, r3
 800b0da:	2909      	cmp	r1, #9
 800b0dc:	d927      	bls.n	800b12e <_strtod_l+0x1ae>
 800b0de:	2201      	movs	r2, #1
 800b0e0:	495a      	ldr	r1, [pc, #360]	@ (800b24c <_strtod_l+0x2cc>)
 800b0e2:	f000 fea7 	bl	800be34 <strncmp>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d033      	beq.n	800b152 <_strtod_l+0x1d2>
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	0023      	movs	r3, r4
 800b0ee:	4684      	mov	ip, r0
 800b0f0:	9a08      	ldr	r2, [sp, #32]
 800b0f2:	900e      	str	r0, [sp, #56]	@ 0x38
 800b0f4:	9206      	str	r2, [sp, #24]
 800b0f6:	2220      	movs	r2, #32
 800b0f8:	0019      	movs	r1, r3
 800b0fa:	4391      	bics	r1, r2
 800b0fc:	000a      	movs	r2, r1
 800b0fe:	2100      	movs	r1, #0
 800b100:	9107      	str	r1, [sp, #28]
 800b102:	2a45      	cmp	r2, #69	@ 0x45
 800b104:	d000      	beq.n	800b108 <_strtod_l+0x188>
 800b106:	e0cb      	b.n	800b2a0 <_strtod_l+0x320>
 800b108:	9b06      	ldr	r3, [sp, #24]
 800b10a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b10c:	4303      	orrs	r3, r0
 800b10e:	4313      	orrs	r3, r2
 800b110:	428b      	cmp	r3, r1
 800b112:	d08c      	beq.n	800b02e <_strtod_l+0xae>
 800b114:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b116:	9309      	str	r3, [sp, #36]	@ 0x24
 800b118:	3301      	adds	r3, #1
 800b11a:	931d      	str	r3, [sp, #116]	@ 0x74
 800b11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b11e:	785b      	ldrb	r3, [r3, #1]
 800b120:	2b2b      	cmp	r3, #43	@ 0x2b
 800b122:	d07b      	beq.n	800b21c <_strtod_l+0x29c>
 800b124:	000c      	movs	r4, r1
 800b126:	2b2d      	cmp	r3, #45	@ 0x2d
 800b128:	d17e      	bne.n	800b228 <_strtod_l+0x2a8>
 800b12a:	2401      	movs	r4, #1
 800b12c:	e077      	b.n	800b21e <_strtod_l+0x29e>
 800b12e:	9908      	ldr	r1, [sp, #32]
 800b130:	2908      	cmp	r1, #8
 800b132:	dc09      	bgt.n	800b148 <_strtod_l+0x1c8>
 800b134:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b136:	4351      	muls	r1, r2
 800b138:	185b      	adds	r3, r3, r1
 800b13a:	930d      	str	r3, [sp, #52]	@ 0x34
 800b13c:	9b08      	ldr	r3, [sp, #32]
 800b13e:	3001      	adds	r0, #1
 800b140:	3301      	adds	r3, #1
 800b142:	9308      	str	r3, [sp, #32]
 800b144:	901d      	str	r0, [sp, #116]	@ 0x74
 800b146:	e7c3      	b.n	800b0d0 <_strtod_l+0x150>
 800b148:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b14a:	4355      	muls	r5, r2
 800b14c:	195b      	adds	r3, r3, r5
 800b14e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b150:	e7f4      	b.n	800b13c <_strtod_l+0x1bc>
 800b152:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b154:	1c5a      	adds	r2, r3, #1
 800b156:	921d      	str	r2, [sp, #116]	@ 0x74
 800b158:	9a08      	ldr	r2, [sp, #32]
 800b15a:	785b      	ldrb	r3, [r3, #1]
 800b15c:	2a00      	cmp	r2, #0
 800b15e:	d03e      	beq.n	800b1de <_strtod_l+0x25e>
 800b160:	900e      	str	r0, [sp, #56]	@ 0x38
 800b162:	9206      	str	r2, [sp, #24]
 800b164:	001a      	movs	r2, r3
 800b166:	3a30      	subs	r2, #48	@ 0x30
 800b168:	2a09      	cmp	r2, #9
 800b16a:	d912      	bls.n	800b192 <_strtod_l+0x212>
 800b16c:	2201      	movs	r2, #1
 800b16e:	4694      	mov	ip, r2
 800b170:	e7c1      	b.n	800b0f6 <_strtod_l+0x176>
 800b172:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b174:	3001      	adds	r0, #1
 800b176:	1c5a      	adds	r2, r3, #1
 800b178:	921d      	str	r2, [sp, #116]	@ 0x74
 800b17a:	785b      	ldrb	r3, [r3, #1]
 800b17c:	2b30      	cmp	r3, #48	@ 0x30
 800b17e:	d0f8      	beq.n	800b172 <_strtod_l+0x1f2>
 800b180:	001a      	movs	r2, r3
 800b182:	3a31      	subs	r2, #49	@ 0x31
 800b184:	2a08      	cmp	r2, #8
 800b186:	d844      	bhi.n	800b212 <_strtod_l+0x292>
 800b188:	900e      	str	r0, [sp, #56]	@ 0x38
 800b18a:	2000      	movs	r0, #0
 800b18c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b18e:	9006      	str	r0, [sp, #24]
 800b190:	9213      	str	r2, [sp, #76]	@ 0x4c
 800b192:	001c      	movs	r4, r3
 800b194:	1c42      	adds	r2, r0, #1
 800b196:	3c30      	subs	r4, #48	@ 0x30
 800b198:	2b30      	cmp	r3, #48	@ 0x30
 800b19a:	d01a      	beq.n	800b1d2 <_strtod_l+0x252>
 800b19c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b19e:	9906      	ldr	r1, [sp, #24]
 800b1a0:	189b      	adds	r3, r3, r2
 800b1a2:	930e      	str	r3, [sp, #56]	@ 0x38
 800b1a4:	230a      	movs	r3, #10
 800b1a6:	469c      	mov	ip, r3
 800b1a8:	9d06      	ldr	r5, [sp, #24]
 800b1aa:	1c4b      	adds	r3, r1, #1
 800b1ac:	1b5d      	subs	r5, r3, r5
 800b1ae:	42aa      	cmp	r2, r5
 800b1b0:	dc17      	bgt.n	800b1e2 <_strtod_l+0x262>
 800b1b2:	43c3      	mvns	r3, r0
 800b1b4:	9a06      	ldr	r2, [sp, #24]
 800b1b6:	17db      	asrs	r3, r3, #31
 800b1b8:	4003      	ands	r3, r0
 800b1ba:	18d1      	adds	r1, r2, r3
 800b1bc:	3201      	adds	r2, #1
 800b1be:	18d3      	adds	r3, r2, r3
 800b1c0:	9306      	str	r3, [sp, #24]
 800b1c2:	2908      	cmp	r1, #8
 800b1c4:	dc1c      	bgt.n	800b200 <_strtod_l+0x280>
 800b1c6:	230a      	movs	r3, #10
 800b1c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b1ca:	4353      	muls	r3, r2
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	18e3      	adds	r3, r4, r3
 800b1d0:	930d      	str	r3, [sp, #52]	@ 0x34
 800b1d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b1d4:	0010      	movs	r0, r2
 800b1d6:	1c59      	adds	r1, r3, #1
 800b1d8:	911d      	str	r1, [sp, #116]	@ 0x74
 800b1da:	785b      	ldrb	r3, [r3, #1]
 800b1dc:	e7c2      	b.n	800b164 <_strtod_l+0x1e4>
 800b1de:	9808      	ldr	r0, [sp, #32]
 800b1e0:	e7cc      	b.n	800b17c <_strtod_l+0x1fc>
 800b1e2:	2908      	cmp	r1, #8
 800b1e4:	dc05      	bgt.n	800b1f2 <_strtod_l+0x272>
 800b1e6:	4665      	mov	r5, ip
 800b1e8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b1ea:	4369      	muls	r1, r5
 800b1ec:	910d      	str	r1, [sp, #52]	@ 0x34
 800b1ee:	0019      	movs	r1, r3
 800b1f0:	e7da      	b.n	800b1a8 <_strtod_l+0x228>
 800b1f2:	2b10      	cmp	r3, #16
 800b1f4:	dcfb      	bgt.n	800b1ee <_strtod_l+0x26e>
 800b1f6:	4661      	mov	r1, ip
 800b1f8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b1fa:	434d      	muls	r5, r1
 800b1fc:	9510      	str	r5, [sp, #64]	@ 0x40
 800b1fe:	e7f6      	b.n	800b1ee <_strtod_l+0x26e>
 800b200:	2200      	movs	r2, #0
 800b202:	290f      	cmp	r1, #15
 800b204:	dce5      	bgt.n	800b1d2 <_strtod_l+0x252>
 800b206:	230a      	movs	r3, #10
 800b208:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b20a:	435d      	muls	r5, r3
 800b20c:	1963      	adds	r3, r4, r5
 800b20e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b210:	e7df      	b.n	800b1d2 <_strtod_l+0x252>
 800b212:	2200      	movs	r2, #0
 800b214:	920e      	str	r2, [sp, #56]	@ 0x38
 800b216:	9206      	str	r2, [sp, #24]
 800b218:	3201      	adds	r2, #1
 800b21a:	e7a8      	b.n	800b16e <_strtod_l+0x1ee>
 800b21c:	2400      	movs	r4, #0
 800b21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b220:	3302      	adds	r3, #2
 800b222:	931d      	str	r3, [sp, #116]	@ 0x74
 800b224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b226:	789b      	ldrb	r3, [r3, #2]
 800b228:	001a      	movs	r2, r3
 800b22a:	3a30      	subs	r2, #48	@ 0x30
 800b22c:	2a09      	cmp	r2, #9
 800b22e:	d913      	bls.n	800b258 <_strtod_l+0x2d8>
 800b230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b232:	921d      	str	r2, [sp, #116]	@ 0x74
 800b234:	2200      	movs	r2, #0
 800b236:	e032      	b.n	800b29e <_strtod_l+0x31e>
 800b238:	0800ef84 	.word	0x0800ef84
 800b23c:	7ff00000 	.word	0x7ff00000
 800b240:	ffefffff 	.word	0xffefffff
 800b244:	00000433 	.word	0x00000433
 800b248:	7fffffff 	.word	0x7fffffff
 800b24c:	0800edb0 	.word	0x0800edb0
 800b250:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	921d      	str	r2, [sp, #116]	@ 0x74
 800b256:	785b      	ldrb	r3, [r3, #1]
 800b258:	2b30      	cmp	r3, #48	@ 0x30
 800b25a:	d0f9      	beq.n	800b250 <_strtod_l+0x2d0>
 800b25c:	2200      	movs	r2, #0
 800b25e:	9207      	str	r2, [sp, #28]
 800b260:	001a      	movs	r2, r3
 800b262:	3a31      	subs	r2, #49	@ 0x31
 800b264:	2a08      	cmp	r2, #8
 800b266:	d81b      	bhi.n	800b2a0 <_strtod_l+0x320>
 800b268:	3b30      	subs	r3, #48	@ 0x30
 800b26a:	001a      	movs	r2, r3
 800b26c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b26e:	9307      	str	r3, [sp, #28]
 800b270:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b272:	1c59      	adds	r1, r3, #1
 800b274:	911d      	str	r1, [sp, #116]	@ 0x74
 800b276:	785b      	ldrb	r3, [r3, #1]
 800b278:	001d      	movs	r5, r3
 800b27a:	3d30      	subs	r5, #48	@ 0x30
 800b27c:	2d09      	cmp	r5, #9
 800b27e:	d93a      	bls.n	800b2f6 <_strtod_l+0x376>
 800b280:	9d07      	ldr	r5, [sp, #28]
 800b282:	1b49      	subs	r1, r1, r5
 800b284:	000d      	movs	r5, r1
 800b286:	49b3      	ldr	r1, [pc, #716]	@ (800b554 <_strtod_l+0x5d4>)
 800b288:	9107      	str	r1, [sp, #28]
 800b28a:	2d08      	cmp	r5, #8
 800b28c:	dc03      	bgt.n	800b296 <_strtod_l+0x316>
 800b28e:	9207      	str	r2, [sp, #28]
 800b290:	428a      	cmp	r2, r1
 800b292:	dd00      	ble.n	800b296 <_strtod_l+0x316>
 800b294:	9107      	str	r1, [sp, #28]
 800b296:	2c00      	cmp	r4, #0
 800b298:	d002      	beq.n	800b2a0 <_strtod_l+0x320>
 800b29a:	9a07      	ldr	r2, [sp, #28]
 800b29c:	4252      	negs	r2, r2
 800b29e:	9207      	str	r2, [sp, #28]
 800b2a0:	9a06      	ldr	r2, [sp, #24]
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	d14b      	bne.n	800b33e <_strtod_l+0x3be>
 800b2a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b2a8:	4310      	orrs	r0, r2
 800b2aa:	d000      	beq.n	800b2ae <_strtod_l+0x32e>
 800b2ac:	e6a3      	b.n	800aff6 <_strtod_l+0x76>
 800b2ae:	4662      	mov	r2, ip
 800b2b0:	2a00      	cmp	r2, #0
 800b2b2:	d000      	beq.n	800b2b6 <_strtod_l+0x336>
 800b2b4:	e6bb      	b.n	800b02e <_strtod_l+0xae>
 800b2b6:	2b69      	cmp	r3, #105	@ 0x69
 800b2b8:	d025      	beq.n	800b306 <_strtod_l+0x386>
 800b2ba:	dc21      	bgt.n	800b300 <_strtod_l+0x380>
 800b2bc:	2b49      	cmp	r3, #73	@ 0x49
 800b2be:	d022      	beq.n	800b306 <_strtod_l+0x386>
 800b2c0:	2b4e      	cmp	r3, #78	@ 0x4e
 800b2c2:	d000      	beq.n	800b2c6 <_strtod_l+0x346>
 800b2c4:	e6b3      	b.n	800b02e <_strtod_l+0xae>
 800b2c6:	49a4      	ldr	r1, [pc, #656]	@ (800b558 <_strtod_l+0x5d8>)
 800b2c8:	a81d      	add	r0, sp, #116	@ 0x74
 800b2ca:	f001 f9b5 	bl	800c638 <__match>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d100      	bne.n	800b2d4 <_strtod_l+0x354>
 800b2d2:	e6ac      	b.n	800b02e <_strtod_l+0xae>
 800b2d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b28      	cmp	r3, #40	@ 0x28
 800b2da:	d12a      	bne.n	800b332 <_strtod_l+0x3b2>
 800b2dc:	499f      	ldr	r1, [pc, #636]	@ (800b55c <_strtod_l+0x5dc>)
 800b2de:	aa20      	add	r2, sp, #128	@ 0x80
 800b2e0:	a81d      	add	r0, sp, #116	@ 0x74
 800b2e2:	f001 f9bd 	bl	800c660 <__hexnan>
 800b2e6:	2805      	cmp	r0, #5
 800b2e8:	d123      	bne.n	800b332 <_strtod_l+0x3b2>
 800b2ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2ec:	4a9c      	ldr	r2, [pc, #624]	@ (800b560 <_strtod_l+0x5e0>)
 800b2ee:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b2f0:	431a      	orrs	r2, r3
 800b2f2:	0017      	movs	r7, r2
 800b2f4:	e67f      	b.n	800aff6 <_strtod_l+0x76>
 800b2f6:	210a      	movs	r1, #10
 800b2f8:	434a      	muls	r2, r1
 800b2fa:	18d2      	adds	r2, r2, r3
 800b2fc:	3a30      	subs	r2, #48	@ 0x30
 800b2fe:	e7b7      	b.n	800b270 <_strtod_l+0x2f0>
 800b300:	2b6e      	cmp	r3, #110	@ 0x6e
 800b302:	d0e0      	beq.n	800b2c6 <_strtod_l+0x346>
 800b304:	e693      	b.n	800b02e <_strtod_l+0xae>
 800b306:	4997      	ldr	r1, [pc, #604]	@ (800b564 <_strtod_l+0x5e4>)
 800b308:	a81d      	add	r0, sp, #116	@ 0x74
 800b30a:	f001 f995 	bl	800c638 <__match>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d100      	bne.n	800b314 <_strtod_l+0x394>
 800b312:	e68c      	b.n	800b02e <_strtod_l+0xae>
 800b314:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b316:	4994      	ldr	r1, [pc, #592]	@ (800b568 <_strtod_l+0x5e8>)
 800b318:	3b01      	subs	r3, #1
 800b31a:	a81d      	add	r0, sp, #116	@ 0x74
 800b31c:	931d      	str	r3, [sp, #116]	@ 0x74
 800b31e:	f001 f98b 	bl	800c638 <__match>
 800b322:	2800      	cmp	r0, #0
 800b324:	d102      	bne.n	800b32c <_strtod_l+0x3ac>
 800b326:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b328:	3301      	adds	r3, #1
 800b32a:	931d      	str	r3, [sp, #116]	@ 0x74
 800b32c:	2600      	movs	r6, #0
 800b32e:	4f8c      	ldr	r7, [pc, #560]	@ (800b560 <_strtod_l+0x5e0>)
 800b330:	e661      	b.n	800aff6 <_strtod_l+0x76>
 800b332:	488e      	ldr	r0, [pc, #568]	@ (800b56c <_strtod_l+0x5ec>)
 800b334:	f000 fe74 	bl	800c020 <nan>
 800b338:	0006      	movs	r6, r0
 800b33a:	000f      	movs	r7, r1
 800b33c:	e65b      	b.n	800aff6 <_strtod_l+0x76>
 800b33e:	9b07      	ldr	r3, [sp, #28]
 800b340:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b342:	1a9b      	subs	r3, r3, r2
 800b344:	930c      	str	r3, [sp, #48]	@ 0x30
 800b346:	9b08      	ldr	r3, [sp, #32]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <_strtod_l+0x3d0>
 800b34c:	9b06      	ldr	r3, [sp, #24]
 800b34e:	9308      	str	r3, [sp, #32]
 800b350:	9c06      	ldr	r4, [sp, #24]
 800b352:	2c10      	cmp	r4, #16
 800b354:	dd00      	ble.n	800b358 <_strtod_l+0x3d8>
 800b356:	2410      	movs	r4, #16
 800b358:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b35a:	f7f8 f9e7 	bl	800372c <__aeabi_ui2d>
 800b35e:	9b06      	ldr	r3, [sp, #24]
 800b360:	0006      	movs	r6, r0
 800b362:	000f      	movs	r7, r1
 800b364:	2b09      	cmp	r3, #9
 800b366:	dc13      	bgt.n	800b390 <_strtod_l+0x410>
 800b368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d100      	bne.n	800b370 <_strtod_l+0x3f0>
 800b36e:	e642      	b.n	800aff6 <_strtod_l+0x76>
 800b370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b372:	2b00      	cmp	r3, #0
 800b374:	dc00      	bgt.n	800b378 <_strtod_l+0x3f8>
 800b376:	e07e      	b.n	800b476 <_strtod_l+0x4f6>
 800b378:	2b16      	cmp	r3, #22
 800b37a:	dc63      	bgt.n	800b444 <_strtod_l+0x4c4>
 800b37c:	497c      	ldr	r1, [pc, #496]	@ (800b570 <_strtod_l+0x5f0>)
 800b37e:	00db      	lsls	r3, r3, #3
 800b380:	18c9      	adds	r1, r1, r3
 800b382:	0032      	movs	r2, r6
 800b384:	6808      	ldr	r0, [r1, #0]
 800b386:	6849      	ldr	r1, [r1, #4]
 800b388:	003b      	movs	r3, r7
 800b38a:	f7f7 fa75 	bl	8002878 <__aeabi_dmul>
 800b38e:	e7d3      	b.n	800b338 <_strtod_l+0x3b8>
 800b390:	0022      	movs	r2, r4
 800b392:	4b77      	ldr	r3, [pc, #476]	@ (800b570 <_strtod_l+0x5f0>)
 800b394:	3a09      	subs	r2, #9
 800b396:	00d2      	lsls	r2, r2, #3
 800b398:	189b      	adds	r3, r3, r2
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f7f7 fa6b 	bl	8002878 <__aeabi_dmul>
 800b3a2:	0006      	movs	r6, r0
 800b3a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b3a6:	000f      	movs	r7, r1
 800b3a8:	f7f8 f9c0 	bl	800372c <__aeabi_ui2d>
 800b3ac:	000b      	movs	r3, r1
 800b3ae:	0002      	movs	r2, r0
 800b3b0:	0039      	movs	r1, r7
 800b3b2:	0030      	movs	r0, r6
 800b3b4:	f7f6 fa60 	bl	8001878 <__aeabi_dadd>
 800b3b8:	9b06      	ldr	r3, [sp, #24]
 800b3ba:	0006      	movs	r6, r0
 800b3bc:	000f      	movs	r7, r1
 800b3be:	2b0f      	cmp	r3, #15
 800b3c0:	ddd2      	ble.n	800b368 <_strtod_l+0x3e8>
 800b3c2:	9b06      	ldr	r3, [sp, #24]
 800b3c4:	1b1c      	subs	r4, r3, r4
 800b3c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3c8:	18e4      	adds	r4, r4, r3
 800b3ca:	2c00      	cmp	r4, #0
 800b3cc:	dc00      	bgt.n	800b3d0 <_strtod_l+0x450>
 800b3ce:	e09b      	b.n	800b508 <_strtod_l+0x588>
 800b3d0:	220f      	movs	r2, #15
 800b3d2:	0023      	movs	r3, r4
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	4214      	tst	r4, r2
 800b3d8:	d00a      	beq.n	800b3f0 <_strtod_l+0x470>
 800b3da:	4965      	ldr	r1, [pc, #404]	@ (800b570 <_strtod_l+0x5f0>)
 800b3dc:	00db      	lsls	r3, r3, #3
 800b3de:	18c9      	adds	r1, r1, r3
 800b3e0:	0032      	movs	r2, r6
 800b3e2:	6808      	ldr	r0, [r1, #0]
 800b3e4:	6849      	ldr	r1, [r1, #4]
 800b3e6:	003b      	movs	r3, r7
 800b3e8:	f7f7 fa46 	bl	8002878 <__aeabi_dmul>
 800b3ec:	0006      	movs	r6, r0
 800b3ee:	000f      	movs	r7, r1
 800b3f0:	230f      	movs	r3, #15
 800b3f2:	439c      	bics	r4, r3
 800b3f4:	d073      	beq.n	800b4de <_strtod_l+0x55e>
 800b3f6:	3326      	adds	r3, #38	@ 0x26
 800b3f8:	33ff      	adds	r3, #255	@ 0xff
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	dd4b      	ble.n	800b496 <_strtod_l+0x516>
 800b3fe:	2300      	movs	r3, #0
 800b400:	9306      	str	r3, [sp, #24]
 800b402:	9307      	str	r3, [sp, #28]
 800b404:	930d      	str	r3, [sp, #52]	@ 0x34
 800b406:	9308      	str	r3, [sp, #32]
 800b408:	2322      	movs	r3, #34	@ 0x22
 800b40a:	2600      	movs	r6, #0
 800b40c:	9a05      	ldr	r2, [sp, #20]
 800b40e:	4f54      	ldr	r7, [pc, #336]	@ (800b560 <_strtod_l+0x5e0>)
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b414:	42b3      	cmp	r3, r6
 800b416:	d100      	bne.n	800b41a <_strtod_l+0x49a>
 800b418:	e5ed      	b.n	800aff6 <_strtod_l+0x76>
 800b41a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b41c:	9805      	ldr	r0, [sp, #20]
 800b41e:	f001 fad9 	bl	800c9d4 <_Bfree>
 800b422:	9908      	ldr	r1, [sp, #32]
 800b424:	9805      	ldr	r0, [sp, #20]
 800b426:	f001 fad5 	bl	800c9d4 <_Bfree>
 800b42a:	9907      	ldr	r1, [sp, #28]
 800b42c:	9805      	ldr	r0, [sp, #20]
 800b42e:	f001 fad1 	bl	800c9d4 <_Bfree>
 800b432:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b434:	9805      	ldr	r0, [sp, #20]
 800b436:	f001 facd 	bl	800c9d4 <_Bfree>
 800b43a:	9906      	ldr	r1, [sp, #24]
 800b43c:	9805      	ldr	r0, [sp, #20]
 800b43e:	f001 fac9 	bl	800c9d4 <_Bfree>
 800b442:	e5d8      	b.n	800aff6 <_strtod_l+0x76>
 800b444:	2325      	movs	r3, #37	@ 0x25
 800b446:	9a06      	ldr	r2, [sp, #24]
 800b448:	1a9b      	subs	r3, r3, r2
 800b44a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b44c:	4293      	cmp	r3, r2
 800b44e:	dbb8      	blt.n	800b3c2 <_strtod_l+0x442>
 800b450:	240f      	movs	r4, #15
 800b452:	9b06      	ldr	r3, [sp, #24]
 800b454:	4d46      	ldr	r5, [pc, #280]	@ (800b570 <_strtod_l+0x5f0>)
 800b456:	1ae4      	subs	r4, r4, r3
 800b458:	00e1      	lsls	r1, r4, #3
 800b45a:	1869      	adds	r1, r5, r1
 800b45c:	0032      	movs	r2, r6
 800b45e:	6808      	ldr	r0, [r1, #0]
 800b460:	6849      	ldr	r1, [r1, #4]
 800b462:	003b      	movs	r3, r7
 800b464:	f7f7 fa08 	bl	8002878 <__aeabi_dmul>
 800b468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b46a:	1b1c      	subs	r4, r3, r4
 800b46c:	00e4      	lsls	r4, r4, #3
 800b46e:	192d      	adds	r5, r5, r4
 800b470:	682a      	ldr	r2, [r5, #0]
 800b472:	686b      	ldr	r3, [r5, #4]
 800b474:	e789      	b.n	800b38a <_strtod_l+0x40a>
 800b476:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b478:	3316      	adds	r3, #22
 800b47a:	dba2      	blt.n	800b3c2 <_strtod_l+0x442>
 800b47c:	9907      	ldr	r1, [sp, #28]
 800b47e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b480:	4b3b      	ldr	r3, [pc, #236]	@ (800b570 <_strtod_l+0x5f0>)
 800b482:	1a52      	subs	r2, r2, r1
 800b484:	00d2      	lsls	r2, r2, #3
 800b486:	189b      	adds	r3, r3, r2
 800b488:	0030      	movs	r0, r6
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	0039      	movs	r1, r7
 800b490:	f7f6 fdb8 	bl	8002004 <__aeabi_ddiv>
 800b494:	e750      	b.n	800b338 <_strtod_l+0x3b8>
 800b496:	2300      	movs	r3, #0
 800b498:	0030      	movs	r0, r6
 800b49a:	0039      	movs	r1, r7
 800b49c:	4d35      	ldr	r5, [pc, #212]	@ (800b574 <_strtod_l+0x5f4>)
 800b49e:	1124      	asrs	r4, r4, #4
 800b4a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4a2:	2c01      	cmp	r4, #1
 800b4a4:	dc1e      	bgt.n	800b4e4 <_strtod_l+0x564>
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <_strtod_l+0x52e>
 800b4aa:	0006      	movs	r6, r0
 800b4ac:	000f      	movs	r7, r1
 800b4ae:	4b32      	ldr	r3, [pc, #200]	@ (800b578 <_strtod_l+0x5f8>)
 800b4b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4b2:	18ff      	adds	r7, r7, r3
 800b4b4:	4b2f      	ldr	r3, [pc, #188]	@ (800b574 <_strtod_l+0x5f4>)
 800b4b6:	00d5      	lsls	r5, r2, #3
 800b4b8:	195d      	adds	r5, r3, r5
 800b4ba:	0032      	movs	r2, r6
 800b4bc:	6828      	ldr	r0, [r5, #0]
 800b4be:	6869      	ldr	r1, [r5, #4]
 800b4c0:	003b      	movs	r3, r7
 800b4c2:	f7f7 f9d9 	bl	8002878 <__aeabi_dmul>
 800b4c6:	4b26      	ldr	r3, [pc, #152]	@ (800b560 <_strtod_l+0x5e0>)
 800b4c8:	4a2c      	ldr	r2, [pc, #176]	@ (800b57c <_strtod_l+0x5fc>)
 800b4ca:	0006      	movs	r6, r0
 800b4cc:	400b      	ands	r3, r1
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d895      	bhi.n	800b3fe <_strtod_l+0x47e>
 800b4d2:	4a2b      	ldr	r2, [pc, #172]	@ (800b580 <_strtod_l+0x600>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d913      	bls.n	800b500 <_strtod_l+0x580>
 800b4d8:	2601      	movs	r6, #1
 800b4da:	4f2a      	ldr	r7, [pc, #168]	@ (800b584 <_strtod_l+0x604>)
 800b4dc:	4276      	negs	r6, r6
 800b4de:	2300      	movs	r3, #0
 800b4e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4e2:	e086      	b.n	800b5f2 <_strtod_l+0x672>
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	4214      	tst	r4, r2
 800b4e8:	d004      	beq.n	800b4f4 <_strtod_l+0x574>
 800b4ea:	682a      	ldr	r2, [r5, #0]
 800b4ec:	686b      	ldr	r3, [r5, #4]
 800b4ee:	f7f7 f9c3 	bl	8002878 <__aeabi_dmul>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4f6:	1064      	asrs	r4, r4, #1
 800b4f8:	3201      	adds	r2, #1
 800b4fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4fc:	3508      	adds	r5, #8
 800b4fe:	e7d0      	b.n	800b4a2 <_strtod_l+0x522>
 800b500:	23d4      	movs	r3, #212	@ 0xd4
 800b502:	049b      	lsls	r3, r3, #18
 800b504:	18cf      	adds	r7, r1, r3
 800b506:	e7ea      	b.n	800b4de <_strtod_l+0x55e>
 800b508:	2c00      	cmp	r4, #0
 800b50a:	d0e8      	beq.n	800b4de <_strtod_l+0x55e>
 800b50c:	4264      	negs	r4, r4
 800b50e:	230f      	movs	r3, #15
 800b510:	0022      	movs	r2, r4
 800b512:	401a      	ands	r2, r3
 800b514:	421c      	tst	r4, r3
 800b516:	d00a      	beq.n	800b52e <_strtod_l+0x5ae>
 800b518:	4b15      	ldr	r3, [pc, #84]	@ (800b570 <_strtod_l+0x5f0>)
 800b51a:	00d2      	lsls	r2, r2, #3
 800b51c:	189b      	adds	r3, r3, r2
 800b51e:	0030      	movs	r0, r6
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	0039      	movs	r1, r7
 800b526:	f7f6 fd6d 	bl	8002004 <__aeabi_ddiv>
 800b52a:	0006      	movs	r6, r0
 800b52c:	000f      	movs	r7, r1
 800b52e:	1124      	asrs	r4, r4, #4
 800b530:	d0d5      	beq.n	800b4de <_strtod_l+0x55e>
 800b532:	2c1f      	cmp	r4, #31
 800b534:	dd28      	ble.n	800b588 <_strtod_l+0x608>
 800b536:	2300      	movs	r3, #0
 800b538:	9306      	str	r3, [sp, #24]
 800b53a:	9307      	str	r3, [sp, #28]
 800b53c:	930d      	str	r3, [sp, #52]	@ 0x34
 800b53e:	9308      	str	r3, [sp, #32]
 800b540:	2322      	movs	r3, #34	@ 0x22
 800b542:	9a05      	ldr	r2, [sp, #20]
 800b544:	2600      	movs	r6, #0
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b54a:	2700      	movs	r7, #0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d000      	beq.n	800b552 <_strtod_l+0x5d2>
 800b550:	e763      	b.n	800b41a <_strtod_l+0x49a>
 800b552:	e550      	b.n	800aff6 <_strtod_l+0x76>
 800b554:	00004e1f 	.word	0x00004e1f
 800b558:	0800edbb 	.word	0x0800edbb
 800b55c:	0800ef70 	.word	0x0800ef70
 800b560:	7ff00000 	.word	0x7ff00000
 800b564:	0800edb2 	.word	0x0800edb2
 800b568:	0800edb5 	.word	0x0800edb5
 800b56c:	0800ee72 	.word	0x0800ee72
 800b570:	0800eff8 	.word	0x0800eff8
 800b574:	0800efd0 	.word	0x0800efd0
 800b578:	fcb00000 	.word	0xfcb00000
 800b57c:	7ca00000 	.word	0x7ca00000
 800b580:	7c900000 	.word	0x7c900000
 800b584:	7fefffff 	.word	0x7fefffff
 800b588:	2310      	movs	r3, #16
 800b58a:	0022      	movs	r2, r4
 800b58c:	401a      	ands	r2, r3
 800b58e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b590:	421c      	tst	r4, r3
 800b592:	d001      	beq.n	800b598 <_strtod_l+0x618>
 800b594:	335a      	adds	r3, #90	@ 0x5a
 800b596:	9309      	str	r3, [sp, #36]	@ 0x24
 800b598:	0030      	movs	r0, r6
 800b59a:	0039      	movs	r1, r7
 800b59c:	2300      	movs	r3, #0
 800b59e:	4dc0      	ldr	r5, [pc, #768]	@ (800b8a0 <_strtod_l+0x920>)
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	4214      	tst	r4, r2
 800b5a4:	d004      	beq.n	800b5b0 <_strtod_l+0x630>
 800b5a6:	682a      	ldr	r2, [r5, #0]
 800b5a8:	686b      	ldr	r3, [r5, #4]
 800b5aa:	f7f7 f965 	bl	8002878 <__aeabi_dmul>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	1064      	asrs	r4, r4, #1
 800b5b2:	3508      	adds	r5, #8
 800b5b4:	2c00      	cmp	r4, #0
 800b5b6:	d1f3      	bne.n	800b5a0 <_strtod_l+0x620>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d001      	beq.n	800b5c0 <_strtod_l+0x640>
 800b5bc:	0006      	movs	r6, r0
 800b5be:	000f      	movs	r7, r1
 800b5c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00d      	beq.n	800b5e2 <_strtod_l+0x662>
 800b5c6:	236b      	movs	r3, #107	@ 0x6b
 800b5c8:	007a      	lsls	r2, r7, #1
 800b5ca:	0d52      	lsrs	r2, r2, #21
 800b5cc:	0039      	movs	r1, r7
 800b5ce:	1a9b      	subs	r3, r3, r2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	dd06      	ble.n	800b5e2 <_strtod_l+0x662>
 800b5d4:	2b1f      	cmp	r3, #31
 800b5d6:	dd5c      	ble.n	800b692 <_strtod_l+0x712>
 800b5d8:	2600      	movs	r6, #0
 800b5da:	2b34      	cmp	r3, #52	@ 0x34
 800b5dc:	dd52      	ble.n	800b684 <_strtod_l+0x704>
 800b5de:	27dc      	movs	r7, #220	@ 0xdc
 800b5e0:	04bf      	lsls	r7, r7, #18
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	0030      	movs	r0, r6
 800b5e8:	0039      	movs	r1, r7
 800b5ea:	f7f4 ff37 	bl	800045c <__aeabi_dcmpeq>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d1a1      	bne.n	800b536 <_strtod_l+0x5b6>
 800b5f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5f4:	9a08      	ldr	r2, [sp, #32]
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b5fa:	9b06      	ldr	r3, [sp, #24]
 800b5fc:	9805      	ldr	r0, [sp, #20]
 800b5fe:	f001 fa51 	bl	800caa4 <__s2b>
 800b602:	900d      	str	r0, [sp, #52]	@ 0x34
 800b604:	2800      	cmp	r0, #0
 800b606:	d100      	bne.n	800b60a <_strtod_l+0x68a>
 800b608:	e6f9      	b.n	800b3fe <_strtod_l+0x47e>
 800b60a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b60c:	9907      	ldr	r1, [sp, #28]
 800b60e:	43db      	mvns	r3, r3
 800b610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b612:	17db      	asrs	r3, r3, #31
 800b614:	1a52      	subs	r2, r2, r1
 800b616:	9214      	str	r2, [sp, #80]	@ 0x50
 800b618:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b61a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800b61c:	17d2      	asrs	r2, r2, #31
 800b61e:	4011      	ands	r1, r2
 800b620:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b622:	9114      	str	r1, [sp, #80]	@ 0x50
 800b624:	401a      	ands	r2, r3
 800b626:	2300      	movs	r3, #0
 800b628:	921a      	str	r2, [sp, #104]	@ 0x68
 800b62a:	9306      	str	r3, [sp, #24]
 800b62c:	9307      	str	r3, [sp, #28]
 800b62e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b630:	9805      	ldr	r0, [sp, #20]
 800b632:	6859      	ldr	r1, [r3, #4]
 800b634:	f001 f98a 	bl	800c94c <_Balloc>
 800b638:	9008      	str	r0, [sp, #32]
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d100      	bne.n	800b640 <_strtod_l+0x6c0>
 800b63e:	e6e3      	b.n	800b408 <_strtod_l+0x488>
 800b640:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b642:	300c      	adds	r0, #12
 800b644:	0019      	movs	r1, r3
 800b646:	691a      	ldr	r2, [r3, #16]
 800b648:	310c      	adds	r1, #12
 800b64a:	3202      	adds	r2, #2
 800b64c:	0092      	lsls	r2, r2, #2
 800b64e:	f000 fcde 	bl	800c00e <memcpy>
 800b652:	ab20      	add	r3, sp, #128	@ 0x80
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	0032      	movs	r2, r6
 800b65c:	003b      	movs	r3, r7
 800b65e:	9805      	ldr	r0, [sp, #20]
 800b660:	9610      	str	r6, [sp, #64]	@ 0x40
 800b662:	9711      	str	r7, [sp, #68]	@ 0x44
 800b664:	f001 fd66 	bl	800d134 <__d2b>
 800b668:	901e      	str	r0, [sp, #120]	@ 0x78
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d100      	bne.n	800b670 <_strtod_l+0x6f0>
 800b66e:	e6cb      	b.n	800b408 <_strtod_l+0x488>
 800b670:	2101      	movs	r1, #1
 800b672:	9805      	ldr	r0, [sp, #20]
 800b674:	f001 fab2 	bl	800cbdc <__i2b>
 800b678:	9007      	str	r0, [sp, #28]
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d10e      	bne.n	800b69c <_strtod_l+0x71c>
 800b67e:	2300      	movs	r3, #0
 800b680:	9307      	str	r3, [sp, #28]
 800b682:	e6c1      	b.n	800b408 <_strtod_l+0x488>
 800b684:	234b      	movs	r3, #75	@ 0x4b
 800b686:	1a9a      	subs	r2, r3, r2
 800b688:	3b4c      	subs	r3, #76	@ 0x4c
 800b68a:	4093      	lsls	r3, r2
 800b68c:	4019      	ands	r1, r3
 800b68e:	000f      	movs	r7, r1
 800b690:	e7a7      	b.n	800b5e2 <_strtod_l+0x662>
 800b692:	2201      	movs	r2, #1
 800b694:	4252      	negs	r2, r2
 800b696:	409a      	lsls	r2, r3
 800b698:	4016      	ands	r6, r2
 800b69a:	e7a2      	b.n	800b5e2 <_strtod_l+0x662>
 800b69c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b69e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b6a0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b6a2:	1ad4      	subs	r4, r2, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	db01      	blt.n	800b6ac <_strtod_l+0x72c>
 800b6a8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800b6aa:	195d      	adds	r5, r3, r5
 800b6ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b6b0:	1a5b      	subs	r3, r3, r1
 800b6b2:	2136      	movs	r1, #54	@ 0x36
 800b6b4:	189b      	adds	r3, r3, r2
 800b6b6:	1a8a      	subs	r2, r1, r2
 800b6b8:	497a      	ldr	r1, [pc, #488]	@ (800b8a4 <_strtod_l+0x924>)
 800b6ba:	2001      	movs	r0, #1
 800b6bc:	468c      	mov	ip, r1
 800b6be:	2100      	movs	r1, #0
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	9115      	str	r1, [sp, #84]	@ 0x54
 800b6c4:	9016      	str	r0, [sp, #88]	@ 0x58
 800b6c6:	4563      	cmp	r3, ip
 800b6c8:	da06      	bge.n	800b6d8 <_strtod_l+0x758>
 800b6ca:	4661      	mov	r1, ip
 800b6cc:	1ac9      	subs	r1, r1, r3
 800b6ce:	1a52      	subs	r2, r2, r1
 800b6d0:	291f      	cmp	r1, #31
 800b6d2:	dc3f      	bgt.n	800b754 <_strtod_l+0x7d4>
 800b6d4:	4088      	lsls	r0, r1
 800b6d6:	9016      	str	r0, [sp, #88]	@ 0x58
 800b6d8:	18ab      	adds	r3, r5, r2
 800b6da:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6dc:	18a4      	adds	r4, r4, r2
 800b6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6e2:	191c      	adds	r4, r3, r4
 800b6e4:	002b      	movs	r3, r5
 800b6e6:	4295      	cmp	r5, r2
 800b6e8:	dd00      	ble.n	800b6ec <_strtod_l+0x76c>
 800b6ea:	0013      	movs	r3, r2
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	dd00      	ble.n	800b6f2 <_strtod_l+0x772>
 800b6f0:	0023      	movs	r3, r4
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	dd04      	ble.n	800b700 <_strtod_l+0x780>
 800b6f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6f8:	1ae4      	subs	r4, r4, r3
 800b6fa:	1ad2      	subs	r2, r2, r3
 800b6fc:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6fe:	1aed      	subs	r5, r5, r3
 800b700:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b702:	2b00      	cmp	r3, #0
 800b704:	dd16      	ble.n	800b734 <_strtod_l+0x7b4>
 800b706:	001a      	movs	r2, r3
 800b708:	9907      	ldr	r1, [sp, #28]
 800b70a:	9805      	ldr	r0, [sp, #20]
 800b70c:	f001 fb28 	bl	800cd60 <__pow5mult>
 800b710:	9007      	str	r0, [sp, #28]
 800b712:	2800      	cmp	r0, #0
 800b714:	d0b3      	beq.n	800b67e <_strtod_l+0x6fe>
 800b716:	0001      	movs	r1, r0
 800b718:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b71a:	9805      	ldr	r0, [sp, #20]
 800b71c:	f001 fa76 	bl	800cc0c <__multiply>
 800b720:	9013      	str	r0, [sp, #76]	@ 0x4c
 800b722:	2800      	cmp	r0, #0
 800b724:	d100      	bne.n	800b728 <_strtod_l+0x7a8>
 800b726:	e66f      	b.n	800b408 <_strtod_l+0x488>
 800b728:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b72a:	9805      	ldr	r0, [sp, #20]
 800b72c:	f001 f952 	bl	800c9d4 <_Bfree>
 800b730:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b732:	931e      	str	r3, [sp, #120]	@ 0x78
 800b734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b736:	2b00      	cmp	r3, #0
 800b738:	dc12      	bgt.n	800b760 <_strtod_l+0x7e0>
 800b73a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	dd18      	ble.n	800b772 <_strtod_l+0x7f2>
 800b740:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b742:	9908      	ldr	r1, [sp, #32]
 800b744:	9805      	ldr	r0, [sp, #20]
 800b746:	f001 fb0b 	bl	800cd60 <__pow5mult>
 800b74a:	9008      	str	r0, [sp, #32]
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d110      	bne.n	800b772 <_strtod_l+0x7f2>
 800b750:	2300      	movs	r3, #0
 800b752:	e658      	b.n	800b406 <_strtod_l+0x486>
 800b754:	4954      	ldr	r1, [pc, #336]	@ (800b8a8 <_strtod_l+0x928>)
 800b756:	1acb      	subs	r3, r1, r3
 800b758:	0001      	movs	r1, r0
 800b75a:	4099      	lsls	r1, r3
 800b75c:	9115      	str	r1, [sp, #84]	@ 0x54
 800b75e:	e7ba      	b.n	800b6d6 <_strtod_l+0x756>
 800b760:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b762:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b764:	9805      	ldr	r0, [sp, #20]
 800b766:	f001 fb57 	bl	800ce18 <__lshift>
 800b76a:	901e      	str	r0, [sp, #120]	@ 0x78
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d1e4      	bne.n	800b73a <_strtod_l+0x7ba>
 800b770:	e64a      	b.n	800b408 <_strtod_l+0x488>
 800b772:	2c00      	cmp	r4, #0
 800b774:	dd07      	ble.n	800b786 <_strtod_l+0x806>
 800b776:	0022      	movs	r2, r4
 800b778:	9908      	ldr	r1, [sp, #32]
 800b77a:	9805      	ldr	r0, [sp, #20]
 800b77c:	f001 fb4c 	bl	800ce18 <__lshift>
 800b780:	9008      	str	r0, [sp, #32]
 800b782:	2800      	cmp	r0, #0
 800b784:	d0e4      	beq.n	800b750 <_strtod_l+0x7d0>
 800b786:	2d00      	cmp	r5, #0
 800b788:	dd08      	ble.n	800b79c <_strtod_l+0x81c>
 800b78a:	002a      	movs	r2, r5
 800b78c:	9907      	ldr	r1, [sp, #28]
 800b78e:	9805      	ldr	r0, [sp, #20]
 800b790:	f001 fb42 	bl	800ce18 <__lshift>
 800b794:	9007      	str	r0, [sp, #28]
 800b796:	2800      	cmp	r0, #0
 800b798:	d100      	bne.n	800b79c <_strtod_l+0x81c>
 800b79a:	e635      	b.n	800b408 <_strtod_l+0x488>
 800b79c:	9a08      	ldr	r2, [sp, #32]
 800b79e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b7a0:	9805      	ldr	r0, [sp, #20]
 800b7a2:	f001 fbc1 	bl	800cf28 <__mdiff>
 800b7a6:	9006      	str	r0, [sp, #24]
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d100      	bne.n	800b7ae <_strtod_l+0x82e>
 800b7ac:	e62c      	b.n	800b408 <_strtod_l+0x488>
 800b7ae:	68c3      	ldr	r3, [r0, #12]
 800b7b0:	9907      	ldr	r1, [sp, #28]
 800b7b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60c3      	str	r3, [r0, #12]
 800b7b8:	f001 fb9a 	bl	800cef0 <__mcmp>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	da3b      	bge.n	800b838 <_strtod_l+0x8b8>
 800b7c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7c2:	4333      	orrs	r3, r6
 800b7c4:	d167      	bne.n	800b896 <_strtod_l+0x916>
 800b7c6:	033b      	lsls	r3, r7, #12
 800b7c8:	d165      	bne.n	800b896 <_strtod_l+0x916>
 800b7ca:	22d6      	movs	r2, #214	@ 0xd6
 800b7cc:	4b37      	ldr	r3, [pc, #220]	@ (800b8ac <_strtod_l+0x92c>)
 800b7ce:	04d2      	lsls	r2, r2, #19
 800b7d0:	403b      	ands	r3, r7
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d95f      	bls.n	800b896 <_strtod_l+0x916>
 800b7d6:	9b06      	ldr	r3, [sp, #24]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d103      	bne.n	800b7e6 <_strtod_l+0x866>
 800b7de:	9b06      	ldr	r3, [sp, #24]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	dd57      	ble.n	800b896 <_strtod_l+0x916>
 800b7e6:	9906      	ldr	r1, [sp, #24]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	9805      	ldr	r0, [sp, #20]
 800b7ec:	f001 fb14 	bl	800ce18 <__lshift>
 800b7f0:	9907      	ldr	r1, [sp, #28]
 800b7f2:	9006      	str	r0, [sp, #24]
 800b7f4:	f001 fb7c 	bl	800cef0 <__mcmp>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	dd4c      	ble.n	800b896 <_strtod_l+0x916>
 800b7fc:	4b2b      	ldr	r3, [pc, #172]	@ (800b8ac <_strtod_l+0x92c>)
 800b7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b800:	403b      	ands	r3, r7
 800b802:	2a00      	cmp	r2, #0
 800b804:	d074      	beq.n	800b8f0 <_strtod_l+0x970>
 800b806:	22d6      	movs	r2, #214	@ 0xd6
 800b808:	04d2      	lsls	r2, r2, #19
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d870      	bhi.n	800b8f0 <_strtod_l+0x970>
 800b80e:	22dc      	movs	r2, #220	@ 0xdc
 800b810:	0492      	lsls	r2, r2, #18
 800b812:	4293      	cmp	r3, r2
 800b814:	d800      	bhi.n	800b818 <_strtod_l+0x898>
 800b816:	e693      	b.n	800b540 <_strtod_l+0x5c0>
 800b818:	0030      	movs	r0, r6
 800b81a:	0039      	movs	r1, r7
 800b81c:	4b24      	ldr	r3, [pc, #144]	@ (800b8b0 <_strtod_l+0x930>)
 800b81e:	2200      	movs	r2, #0
 800b820:	f7f7 f82a 	bl	8002878 <__aeabi_dmul>
 800b824:	4b21      	ldr	r3, [pc, #132]	@ (800b8ac <_strtod_l+0x92c>)
 800b826:	0006      	movs	r6, r0
 800b828:	000f      	movs	r7, r1
 800b82a:	420b      	tst	r3, r1
 800b82c:	d000      	beq.n	800b830 <_strtod_l+0x8b0>
 800b82e:	e5f4      	b.n	800b41a <_strtod_l+0x49a>
 800b830:	2322      	movs	r3, #34	@ 0x22
 800b832:	9a05      	ldr	r2, [sp, #20]
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	e5f0      	b.n	800b41a <_strtod_l+0x49a>
 800b838:	970e      	str	r7, [sp, #56]	@ 0x38
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d175      	bne.n	800b92a <_strtod_l+0x9aa>
 800b83e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b840:	033b      	lsls	r3, r7, #12
 800b842:	0b1b      	lsrs	r3, r3, #12
 800b844:	2a00      	cmp	r2, #0
 800b846:	d039      	beq.n	800b8bc <_strtod_l+0x93c>
 800b848:	4a1a      	ldr	r2, [pc, #104]	@ (800b8b4 <_strtod_l+0x934>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d138      	bne.n	800b8c0 <_strtod_l+0x940>
 800b84e:	2101      	movs	r1, #1
 800b850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b852:	4249      	negs	r1, r1
 800b854:	0032      	movs	r2, r6
 800b856:	0008      	movs	r0, r1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00b      	beq.n	800b874 <_strtod_l+0x8f4>
 800b85c:	24d4      	movs	r4, #212	@ 0xd4
 800b85e:	4b13      	ldr	r3, [pc, #76]	@ (800b8ac <_strtod_l+0x92c>)
 800b860:	0008      	movs	r0, r1
 800b862:	403b      	ands	r3, r7
 800b864:	04e4      	lsls	r4, r4, #19
 800b866:	42a3      	cmp	r3, r4
 800b868:	d804      	bhi.n	800b874 <_strtod_l+0x8f4>
 800b86a:	306c      	adds	r0, #108	@ 0x6c
 800b86c:	0d1b      	lsrs	r3, r3, #20
 800b86e:	1ac3      	subs	r3, r0, r3
 800b870:	4099      	lsls	r1, r3
 800b872:	0008      	movs	r0, r1
 800b874:	4282      	cmp	r2, r0
 800b876:	d123      	bne.n	800b8c0 <_strtod_l+0x940>
 800b878:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b8 <_strtod_l+0x938>)
 800b87a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b87c:	4299      	cmp	r1, r3
 800b87e:	d102      	bne.n	800b886 <_strtod_l+0x906>
 800b880:	3201      	adds	r2, #1
 800b882:	d100      	bne.n	800b886 <_strtod_l+0x906>
 800b884:	e5c0      	b.n	800b408 <_strtod_l+0x488>
 800b886:	4b09      	ldr	r3, [pc, #36]	@ (800b8ac <_strtod_l+0x92c>)
 800b888:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b88a:	2600      	movs	r6, #0
 800b88c:	401a      	ands	r2, r3
 800b88e:	0013      	movs	r3, r2
 800b890:	2280      	movs	r2, #128	@ 0x80
 800b892:	0352      	lsls	r2, r2, #13
 800b894:	189f      	adds	r7, r3, r2
 800b896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1bd      	bne.n	800b818 <_strtod_l+0x898>
 800b89c:	e5bd      	b.n	800b41a <_strtod_l+0x49a>
 800b89e:	46c0      	nop			@ (mov r8, r8)
 800b8a0:	0800ef98 	.word	0x0800ef98
 800b8a4:	fffffc02 	.word	0xfffffc02
 800b8a8:	fffffbe2 	.word	0xfffffbe2
 800b8ac:	7ff00000 	.word	0x7ff00000
 800b8b0:	39500000 	.word	0x39500000
 800b8b4:	000fffff 	.word	0x000fffff
 800b8b8:	7fefffff 	.word	0x7fefffff
 800b8bc:	4333      	orrs	r3, r6
 800b8be:	d09d      	beq.n	800b7fc <_strtod_l+0x87c>
 800b8c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d01c      	beq.n	800b900 <_strtod_l+0x980>
 800b8c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b8ca:	4213      	tst	r3, r2
 800b8cc:	d0e3      	beq.n	800b896 <_strtod_l+0x916>
 800b8ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b8d0:	0030      	movs	r0, r6
 800b8d2:	0039      	movs	r1, r7
 800b8d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d016      	beq.n	800b908 <_strtod_l+0x988>
 800b8da:	f7ff fb39 	bl	800af50 <sulp>
 800b8de:	0002      	movs	r2, r0
 800b8e0:	000b      	movs	r3, r1
 800b8e2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b8e4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b8e6:	f7f5 ffc7 	bl	8001878 <__aeabi_dadd>
 800b8ea:	0006      	movs	r6, r0
 800b8ec:	000f      	movs	r7, r1
 800b8ee:	e7d2      	b.n	800b896 <_strtod_l+0x916>
 800b8f0:	2601      	movs	r6, #1
 800b8f2:	4a92      	ldr	r2, [pc, #584]	@ (800bb3c <_strtod_l+0xbbc>)
 800b8f4:	4276      	negs	r6, r6
 800b8f6:	189b      	adds	r3, r3, r2
 800b8f8:	4a91      	ldr	r2, [pc, #580]	@ (800bb40 <_strtod_l+0xbc0>)
 800b8fa:	431a      	orrs	r2, r3
 800b8fc:	0017      	movs	r7, r2
 800b8fe:	e7ca      	b.n	800b896 <_strtod_l+0x916>
 800b900:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b902:	4233      	tst	r3, r6
 800b904:	d0c7      	beq.n	800b896 <_strtod_l+0x916>
 800b906:	e7e2      	b.n	800b8ce <_strtod_l+0x94e>
 800b908:	f7ff fb22 	bl	800af50 <sulp>
 800b90c:	0002      	movs	r2, r0
 800b90e:	000b      	movs	r3, r1
 800b910:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b912:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b914:	f7f7 fa96 	bl	8002e44 <__aeabi_dsub>
 800b918:	2200      	movs	r2, #0
 800b91a:	2300      	movs	r3, #0
 800b91c:	0006      	movs	r6, r0
 800b91e:	000f      	movs	r7, r1
 800b920:	f7f4 fd9c 	bl	800045c <__aeabi_dcmpeq>
 800b924:	2800      	cmp	r0, #0
 800b926:	d0b6      	beq.n	800b896 <_strtod_l+0x916>
 800b928:	e60a      	b.n	800b540 <_strtod_l+0x5c0>
 800b92a:	9907      	ldr	r1, [sp, #28]
 800b92c:	9806      	ldr	r0, [sp, #24]
 800b92e:	f001 fc61 	bl	800d1f4 <__ratio>
 800b932:	2380      	movs	r3, #128	@ 0x80
 800b934:	2200      	movs	r2, #0
 800b936:	05db      	lsls	r3, r3, #23
 800b938:	0004      	movs	r4, r0
 800b93a:	000d      	movs	r5, r1
 800b93c:	f7f4 fd9e 	bl	800047c <__aeabi_dcmple>
 800b940:	2800      	cmp	r0, #0
 800b942:	d06c      	beq.n	800ba1e <_strtod_l+0xa9e>
 800b944:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b946:	2b00      	cmp	r3, #0
 800b948:	d177      	bne.n	800ba3a <_strtod_l+0xaba>
 800b94a:	2e00      	cmp	r6, #0
 800b94c:	d157      	bne.n	800b9fe <_strtod_l+0xa7e>
 800b94e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b950:	031b      	lsls	r3, r3, #12
 800b952:	d15a      	bne.n	800ba0a <_strtod_l+0xa8a>
 800b954:	2200      	movs	r2, #0
 800b956:	0020      	movs	r0, r4
 800b958:	0029      	movs	r1, r5
 800b95a:	4b7a      	ldr	r3, [pc, #488]	@ (800bb44 <_strtod_l+0xbc4>)
 800b95c:	f7f4 fd84 	bl	8000468 <__aeabi_dcmplt>
 800b960:	2800      	cmp	r0, #0
 800b962:	d159      	bne.n	800ba18 <_strtod_l+0xa98>
 800b964:	0020      	movs	r0, r4
 800b966:	0029      	movs	r1, r5
 800b968:	2200      	movs	r2, #0
 800b96a:	4b77      	ldr	r3, [pc, #476]	@ (800bb48 <_strtod_l+0xbc8>)
 800b96c:	f7f6 ff84 	bl	8002878 <__aeabi_dmul>
 800b970:	0004      	movs	r4, r0
 800b972:	000d      	movs	r5, r1
 800b974:	2380      	movs	r3, #128	@ 0x80
 800b976:	061b      	lsls	r3, r3, #24
 800b978:	18eb      	adds	r3, r5, r3
 800b97a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b97c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b97e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b982:	9216      	str	r2, [sp, #88]	@ 0x58
 800b984:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b986:	4a71      	ldr	r2, [pc, #452]	@ (800bb4c <_strtod_l+0xbcc>)
 800b988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b98a:	4013      	ands	r3, r2
 800b98c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b98e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b990:	4b6f      	ldr	r3, [pc, #444]	@ (800bb50 <_strtod_l+0xbd0>)
 800b992:	429a      	cmp	r2, r3
 800b994:	d000      	beq.n	800b998 <_strtod_l+0xa18>
 800b996:	e087      	b.n	800baa8 <_strtod_l+0xb28>
 800b998:	4a6e      	ldr	r2, [pc, #440]	@ (800bb54 <_strtod_l+0xbd4>)
 800b99a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b99c:	4694      	mov	ip, r2
 800b99e:	4463      	add	r3, ip
 800b9a0:	001f      	movs	r7, r3
 800b9a2:	0030      	movs	r0, r6
 800b9a4:	0019      	movs	r1, r3
 800b9a6:	f001 fb59 	bl	800d05c <__ulp>
 800b9aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9ae:	f7f6 ff63 	bl	8002878 <__aeabi_dmul>
 800b9b2:	0032      	movs	r2, r6
 800b9b4:	003b      	movs	r3, r7
 800b9b6:	f7f5 ff5f 	bl	8001878 <__aeabi_dadd>
 800b9ba:	4a64      	ldr	r2, [pc, #400]	@ (800bb4c <_strtod_l+0xbcc>)
 800b9bc:	4b66      	ldr	r3, [pc, #408]	@ (800bb58 <_strtod_l+0xbd8>)
 800b9be:	0006      	movs	r6, r0
 800b9c0:	400a      	ands	r2, r1
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d940      	bls.n	800ba48 <_strtod_l+0xac8>
 800b9c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b9c8:	4a64      	ldr	r2, [pc, #400]	@ (800bb5c <_strtod_l+0xbdc>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d103      	bne.n	800b9d6 <_strtod_l+0xa56>
 800b9ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	d100      	bne.n	800b9d6 <_strtod_l+0xa56>
 800b9d4:	e518      	b.n	800b408 <_strtod_l+0x488>
 800b9d6:	2601      	movs	r6, #1
 800b9d8:	4f60      	ldr	r7, [pc, #384]	@ (800bb5c <_strtod_l+0xbdc>)
 800b9da:	4276      	negs	r6, r6
 800b9dc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b9de:	9805      	ldr	r0, [sp, #20]
 800b9e0:	f000 fff8 	bl	800c9d4 <_Bfree>
 800b9e4:	9908      	ldr	r1, [sp, #32]
 800b9e6:	9805      	ldr	r0, [sp, #20]
 800b9e8:	f000 fff4 	bl	800c9d4 <_Bfree>
 800b9ec:	9907      	ldr	r1, [sp, #28]
 800b9ee:	9805      	ldr	r0, [sp, #20]
 800b9f0:	f000 fff0 	bl	800c9d4 <_Bfree>
 800b9f4:	9906      	ldr	r1, [sp, #24]
 800b9f6:	9805      	ldr	r0, [sp, #20]
 800b9f8:	f000 ffec 	bl	800c9d4 <_Bfree>
 800b9fc:	e617      	b.n	800b62e <_strtod_l+0x6ae>
 800b9fe:	2e01      	cmp	r6, #1
 800ba00:	d103      	bne.n	800ba0a <_strtod_l+0xa8a>
 800ba02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d100      	bne.n	800ba0a <_strtod_l+0xa8a>
 800ba08:	e59a      	b.n	800b540 <_strtod_l+0x5c0>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	4c54      	ldr	r4, [pc, #336]	@ (800bb60 <_strtod_l+0xbe0>)
 800ba0e:	4d4d      	ldr	r5, [pc, #308]	@ (800bb44 <_strtod_l+0xbc4>)
 800ba10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba12:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba14:	2400      	movs	r4, #0
 800ba16:	e7b2      	b.n	800b97e <_strtod_l+0x9fe>
 800ba18:	2400      	movs	r4, #0
 800ba1a:	4d4b      	ldr	r5, [pc, #300]	@ (800bb48 <_strtod_l+0xbc8>)
 800ba1c:	e7aa      	b.n	800b974 <_strtod_l+0x9f4>
 800ba1e:	0020      	movs	r0, r4
 800ba20:	0029      	movs	r1, r5
 800ba22:	4b49      	ldr	r3, [pc, #292]	@ (800bb48 <_strtod_l+0xbc8>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	f7f6 ff27 	bl	8002878 <__aeabi_dmul>
 800ba2a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba2c:	0004      	movs	r4, r0
 800ba2e:	000d      	movs	r5, r1
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d09f      	beq.n	800b974 <_strtod_l+0x9f4>
 800ba34:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba36:	950b      	str	r5, [sp, #44]	@ 0x2c
 800ba38:	e7a1      	b.n	800b97e <_strtod_l+0x9fe>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	4c41      	ldr	r4, [pc, #260]	@ (800bb44 <_strtod_l+0xbc4>)
 800ba3e:	0025      	movs	r5, r4
 800ba40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba42:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba44:	001c      	movs	r4, r3
 800ba46:	e79a      	b.n	800b97e <_strtod_l+0x9fe>
 800ba48:	23d4      	movs	r3, #212	@ 0xd4
 800ba4a:	049b      	lsls	r3, r3, #18
 800ba4c:	18cf      	adds	r7, r1, r3
 800ba4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba50:	9710      	str	r7, [sp, #64]	@ 0x40
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1c2      	bne.n	800b9dc <_strtod_l+0xa5c>
 800ba56:	4b3d      	ldr	r3, [pc, #244]	@ (800bb4c <_strtod_l+0xbcc>)
 800ba58:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ba5a:	403b      	ands	r3, r7
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d1bd      	bne.n	800b9dc <_strtod_l+0xa5c>
 800ba60:	0020      	movs	r0, r4
 800ba62:	0029      	movs	r1, r5
 800ba64:	f7f4 fdb8 	bl	80005d8 <__aeabi_d2lz>
 800ba68:	f7f4 fdf0 	bl	800064c <__aeabi_l2d>
 800ba6c:	0002      	movs	r2, r0
 800ba6e:	000b      	movs	r3, r1
 800ba70:	0020      	movs	r0, r4
 800ba72:	0029      	movs	r1, r5
 800ba74:	f7f7 f9e6 	bl	8002e44 <__aeabi_dsub>
 800ba78:	033c      	lsls	r4, r7, #12
 800ba7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba7c:	0b24      	lsrs	r4, r4, #12
 800ba7e:	4334      	orrs	r4, r6
 800ba80:	900e      	str	r0, [sp, #56]	@ 0x38
 800ba82:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ba84:	4a37      	ldr	r2, [pc, #220]	@ (800bb64 <_strtod_l+0xbe4>)
 800ba86:	431c      	orrs	r4, r3
 800ba88:	d052      	beq.n	800bb30 <_strtod_l+0xbb0>
 800ba8a:	4b37      	ldr	r3, [pc, #220]	@ (800bb68 <_strtod_l+0xbe8>)
 800ba8c:	f7f4 fcec 	bl	8000468 <__aeabi_dcmplt>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d000      	beq.n	800ba96 <_strtod_l+0xb16>
 800ba94:	e4c1      	b.n	800b41a <_strtod_l+0x49a>
 800ba96:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ba98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ba9a:	4a34      	ldr	r2, [pc, #208]	@ (800bb6c <_strtod_l+0xbec>)
 800ba9c:	4b2a      	ldr	r3, [pc, #168]	@ (800bb48 <_strtod_l+0xbc8>)
 800ba9e:	f7f4 fcf7 	bl	8000490 <__aeabi_dcmpgt>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d09a      	beq.n	800b9dc <_strtod_l+0xa5c>
 800baa6:	e4b8      	b.n	800b41a <_strtod_l+0x49a>
 800baa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d02a      	beq.n	800bb04 <_strtod_l+0xb84>
 800baae:	23d4      	movs	r3, #212	@ 0xd4
 800bab0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bab2:	04db      	lsls	r3, r3, #19
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d825      	bhi.n	800bb04 <_strtod_l+0xb84>
 800bab8:	0020      	movs	r0, r4
 800baba:	0029      	movs	r1, r5
 800babc:	4a2c      	ldr	r2, [pc, #176]	@ (800bb70 <_strtod_l+0xbf0>)
 800babe:	4b2d      	ldr	r3, [pc, #180]	@ (800bb74 <_strtod_l+0xbf4>)
 800bac0:	f7f4 fcdc 	bl	800047c <__aeabi_dcmple>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d016      	beq.n	800baf6 <_strtod_l+0xb76>
 800bac8:	0020      	movs	r0, r4
 800baca:	0029      	movs	r1, r5
 800bacc:	f7f4 fd66 	bl	800059c <__aeabi_d2uiz>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d100      	bne.n	800bad6 <_strtod_l+0xb56>
 800bad4:	3001      	adds	r0, #1
 800bad6:	f7f7 fe29 	bl	800372c <__aeabi_ui2d>
 800bada:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800badc:	0004      	movs	r4, r0
 800bade:	000d      	movs	r5, r1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d122      	bne.n	800bb2a <_strtod_l+0xbaa>
 800bae4:	2380      	movs	r3, #128	@ 0x80
 800bae6:	061b      	lsls	r3, r3, #24
 800bae8:	18cb      	adds	r3, r1, r3
 800baea:	9018      	str	r0, [sp, #96]	@ 0x60
 800baec:	9319      	str	r3, [sp, #100]	@ 0x64
 800baee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800baf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baf2:	9216      	str	r2, [sp, #88]	@ 0x58
 800baf4:	9317      	str	r3, [sp, #92]	@ 0x5c
 800baf6:	22d6      	movs	r2, #214	@ 0xd6
 800baf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bafa:	04d2      	lsls	r2, r2, #19
 800bafc:	189b      	adds	r3, r3, r2
 800bafe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bb00:	1a9b      	subs	r3, r3, r2
 800bb02:	9317      	str	r3, [sp, #92]	@ 0x5c
 800bb04:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bb06:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bb08:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800bb0a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800bb0c:	f001 faa6 	bl	800d05c <__ulp>
 800bb10:	0002      	movs	r2, r0
 800bb12:	000b      	movs	r3, r1
 800bb14:	0030      	movs	r0, r6
 800bb16:	0039      	movs	r1, r7
 800bb18:	f7f6 feae 	bl	8002878 <__aeabi_dmul>
 800bb1c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bb1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb20:	f7f5 feaa 	bl	8001878 <__aeabi_dadd>
 800bb24:	0006      	movs	r6, r0
 800bb26:	000f      	movs	r7, r1
 800bb28:	e791      	b.n	800ba4e <_strtod_l+0xace>
 800bb2a:	9418      	str	r4, [sp, #96]	@ 0x60
 800bb2c:	9519      	str	r5, [sp, #100]	@ 0x64
 800bb2e:	e7de      	b.n	800baee <_strtod_l+0xb6e>
 800bb30:	4b11      	ldr	r3, [pc, #68]	@ (800bb78 <_strtod_l+0xbf8>)
 800bb32:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800bb34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bb36:	f7f4 fc97 	bl	8000468 <__aeabi_dcmplt>
 800bb3a:	e7b2      	b.n	800baa2 <_strtod_l+0xb22>
 800bb3c:	fff00000 	.word	0xfff00000
 800bb40:	000fffff 	.word	0x000fffff
 800bb44:	3ff00000 	.word	0x3ff00000
 800bb48:	3fe00000 	.word	0x3fe00000
 800bb4c:	7ff00000 	.word	0x7ff00000
 800bb50:	7fe00000 	.word	0x7fe00000
 800bb54:	fcb00000 	.word	0xfcb00000
 800bb58:	7c9fffff 	.word	0x7c9fffff
 800bb5c:	7fefffff 	.word	0x7fefffff
 800bb60:	bff00000 	.word	0xbff00000
 800bb64:	94a03595 	.word	0x94a03595
 800bb68:	3fdfffff 	.word	0x3fdfffff
 800bb6c:	35afe535 	.word	0x35afe535
 800bb70:	ffc00000 	.word	0xffc00000
 800bb74:	41dfffff 	.word	0x41dfffff
 800bb78:	3fcfffff 	.word	0x3fcfffff

0800bb7c <strtod>:
 800bb7c:	b510      	push	{r4, lr}
 800bb7e:	4c04      	ldr	r4, [pc, #16]	@ (800bb90 <strtod+0x14>)
 800bb80:	000a      	movs	r2, r1
 800bb82:	0001      	movs	r1, r0
 800bb84:	4b03      	ldr	r3, [pc, #12]	@ (800bb94 <strtod+0x18>)
 800bb86:	6820      	ldr	r0, [r4, #0]
 800bb88:	f7ff f9fa 	bl	800af80 <_strtod_l>
 800bb8c:	bd10      	pop	{r4, pc}
 800bb8e:	46c0      	nop			@ (mov r8, r8)
 800bb90:	20000184 	.word	0x20000184
 800bb94:	20000018 	.word	0x20000018

0800bb98 <std>:
 800bb98:	2300      	movs	r3, #0
 800bb9a:	b510      	push	{r4, lr}
 800bb9c:	0004      	movs	r4, r0
 800bb9e:	6003      	str	r3, [r0, #0]
 800bba0:	6043      	str	r3, [r0, #4]
 800bba2:	6083      	str	r3, [r0, #8]
 800bba4:	8181      	strh	r1, [r0, #12]
 800bba6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bba8:	81c2      	strh	r2, [r0, #14]
 800bbaa:	6103      	str	r3, [r0, #16]
 800bbac:	6143      	str	r3, [r0, #20]
 800bbae:	6183      	str	r3, [r0, #24]
 800bbb0:	0019      	movs	r1, r3
 800bbb2:	2208      	movs	r2, #8
 800bbb4:	305c      	adds	r0, #92	@ 0x5c
 800bbb6:	f000 f935 	bl	800be24 <memset>
 800bbba:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe8 <std+0x50>)
 800bbbc:	6224      	str	r4, [r4, #32]
 800bbbe:	6263      	str	r3, [r4, #36]	@ 0x24
 800bbc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbec <std+0x54>)
 800bbc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bbc4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf0 <std+0x58>)
 800bbc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bbc8:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf4 <std+0x5c>)
 800bbca:	6323      	str	r3, [r4, #48]	@ 0x30
 800bbcc:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf8 <std+0x60>)
 800bbce:	429c      	cmp	r4, r3
 800bbd0:	d005      	beq.n	800bbde <std+0x46>
 800bbd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbfc <std+0x64>)
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	d002      	beq.n	800bbde <std+0x46>
 800bbd8:	4b09      	ldr	r3, [pc, #36]	@ (800bc00 <std+0x68>)
 800bbda:	429c      	cmp	r4, r3
 800bbdc:	d103      	bne.n	800bbe6 <std+0x4e>
 800bbde:	0020      	movs	r0, r4
 800bbe0:	3058      	adds	r0, #88	@ 0x58
 800bbe2:	f000 fa11 	bl	800c008 <__retarget_lock_init_recursive>
 800bbe6:	bd10      	pop	{r4, pc}
 800bbe8:	0800bd8d 	.word	0x0800bd8d
 800bbec:	0800bdb5 	.word	0x0800bdb5
 800bbf0:	0800bded 	.word	0x0800bded
 800bbf4:	0800be19 	.word	0x0800be19
 800bbf8:	20000448 	.word	0x20000448
 800bbfc:	200004b0 	.word	0x200004b0
 800bc00:	20000518 	.word	0x20000518

0800bc04 <stdio_exit_handler>:
 800bc04:	b510      	push	{r4, lr}
 800bc06:	4a03      	ldr	r2, [pc, #12]	@ (800bc14 <stdio_exit_handler+0x10>)
 800bc08:	4903      	ldr	r1, [pc, #12]	@ (800bc18 <stdio_exit_handler+0x14>)
 800bc0a:	4804      	ldr	r0, [pc, #16]	@ (800bc1c <stdio_exit_handler+0x18>)
 800bc0c:	f000 f86c 	bl	800bce8 <_fwalk_sglue>
 800bc10:	bd10      	pop	{r4, pc}
 800bc12:	46c0      	nop			@ (mov r8, r8)
 800bc14:	2000000c 	.word	0x2000000c
 800bc18:	0800d9ad 	.word	0x0800d9ad
 800bc1c:	20000188 	.word	0x20000188

0800bc20 <cleanup_stdio>:
 800bc20:	6841      	ldr	r1, [r0, #4]
 800bc22:	4b0b      	ldr	r3, [pc, #44]	@ (800bc50 <cleanup_stdio+0x30>)
 800bc24:	b510      	push	{r4, lr}
 800bc26:	0004      	movs	r4, r0
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	d001      	beq.n	800bc30 <cleanup_stdio+0x10>
 800bc2c:	f001 febe 	bl	800d9ac <_fflush_r>
 800bc30:	68a1      	ldr	r1, [r4, #8]
 800bc32:	4b08      	ldr	r3, [pc, #32]	@ (800bc54 <cleanup_stdio+0x34>)
 800bc34:	4299      	cmp	r1, r3
 800bc36:	d002      	beq.n	800bc3e <cleanup_stdio+0x1e>
 800bc38:	0020      	movs	r0, r4
 800bc3a:	f001 feb7 	bl	800d9ac <_fflush_r>
 800bc3e:	68e1      	ldr	r1, [r4, #12]
 800bc40:	4b05      	ldr	r3, [pc, #20]	@ (800bc58 <cleanup_stdio+0x38>)
 800bc42:	4299      	cmp	r1, r3
 800bc44:	d002      	beq.n	800bc4c <cleanup_stdio+0x2c>
 800bc46:	0020      	movs	r0, r4
 800bc48:	f001 feb0 	bl	800d9ac <_fflush_r>
 800bc4c:	bd10      	pop	{r4, pc}
 800bc4e:	46c0      	nop			@ (mov r8, r8)
 800bc50:	20000448 	.word	0x20000448
 800bc54:	200004b0 	.word	0x200004b0
 800bc58:	20000518 	.word	0x20000518

0800bc5c <global_stdio_init.part.0>:
 800bc5c:	b510      	push	{r4, lr}
 800bc5e:	4b09      	ldr	r3, [pc, #36]	@ (800bc84 <global_stdio_init.part.0+0x28>)
 800bc60:	4a09      	ldr	r2, [pc, #36]	@ (800bc88 <global_stdio_init.part.0+0x2c>)
 800bc62:	2104      	movs	r1, #4
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	4809      	ldr	r0, [pc, #36]	@ (800bc8c <global_stdio_init.part.0+0x30>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f7ff ff95 	bl	800bb98 <std>
 800bc6e:	2201      	movs	r2, #1
 800bc70:	2109      	movs	r1, #9
 800bc72:	4807      	ldr	r0, [pc, #28]	@ (800bc90 <global_stdio_init.part.0+0x34>)
 800bc74:	f7ff ff90 	bl	800bb98 <std>
 800bc78:	2202      	movs	r2, #2
 800bc7a:	2112      	movs	r1, #18
 800bc7c:	4805      	ldr	r0, [pc, #20]	@ (800bc94 <global_stdio_init.part.0+0x38>)
 800bc7e:	f7ff ff8b 	bl	800bb98 <std>
 800bc82:	bd10      	pop	{r4, pc}
 800bc84:	20000580 	.word	0x20000580
 800bc88:	0800bc05 	.word	0x0800bc05
 800bc8c:	20000448 	.word	0x20000448
 800bc90:	200004b0 	.word	0x200004b0
 800bc94:	20000518 	.word	0x20000518

0800bc98 <__sfp_lock_acquire>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	4802      	ldr	r0, [pc, #8]	@ (800bca4 <__sfp_lock_acquire+0xc>)
 800bc9c:	f000 f9b5 	bl	800c00a <__retarget_lock_acquire_recursive>
 800bca0:	bd10      	pop	{r4, pc}
 800bca2:	46c0      	nop			@ (mov r8, r8)
 800bca4:	20000589 	.word	0x20000589

0800bca8 <__sfp_lock_release>:
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	4802      	ldr	r0, [pc, #8]	@ (800bcb4 <__sfp_lock_release+0xc>)
 800bcac:	f000 f9ae 	bl	800c00c <__retarget_lock_release_recursive>
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	46c0      	nop			@ (mov r8, r8)
 800bcb4:	20000589 	.word	0x20000589

0800bcb8 <__sinit>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	0004      	movs	r4, r0
 800bcbc:	f7ff ffec 	bl	800bc98 <__sfp_lock_acquire>
 800bcc0:	6a23      	ldr	r3, [r4, #32]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d002      	beq.n	800bccc <__sinit+0x14>
 800bcc6:	f7ff ffef 	bl	800bca8 <__sfp_lock_release>
 800bcca:	bd10      	pop	{r4, pc}
 800bccc:	4b04      	ldr	r3, [pc, #16]	@ (800bce0 <__sinit+0x28>)
 800bcce:	6223      	str	r3, [r4, #32]
 800bcd0:	4b04      	ldr	r3, [pc, #16]	@ (800bce4 <__sinit+0x2c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1f6      	bne.n	800bcc6 <__sinit+0xe>
 800bcd8:	f7ff ffc0 	bl	800bc5c <global_stdio_init.part.0>
 800bcdc:	e7f3      	b.n	800bcc6 <__sinit+0xe>
 800bcde:	46c0      	nop			@ (mov r8, r8)
 800bce0:	0800bc21 	.word	0x0800bc21
 800bce4:	20000580 	.word	0x20000580

0800bce8 <_fwalk_sglue>:
 800bce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcea:	0014      	movs	r4, r2
 800bcec:	2600      	movs	r6, #0
 800bcee:	9000      	str	r0, [sp, #0]
 800bcf0:	9101      	str	r1, [sp, #4]
 800bcf2:	68a5      	ldr	r5, [r4, #8]
 800bcf4:	6867      	ldr	r7, [r4, #4]
 800bcf6:	3f01      	subs	r7, #1
 800bcf8:	d504      	bpl.n	800bd04 <_fwalk_sglue+0x1c>
 800bcfa:	6824      	ldr	r4, [r4, #0]
 800bcfc:	2c00      	cmp	r4, #0
 800bcfe:	d1f8      	bne.n	800bcf2 <_fwalk_sglue+0xa>
 800bd00:	0030      	movs	r0, r6
 800bd02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd04:	89ab      	ldrh	r3, [r5, #12]
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d908      	bls.n	800bd1c <_fwalk_sglue+0x34>
 800bd0a:	220e      	movs	r2, #14
 800bd0c:	5eab      	ldrsh	r3, [r5, r2]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	d004      	beq.n	800bd1c <_fwalk_sglue+0x34>
 800bd12:	0029      	movs	r1, r5
 800bd14:	9800      	ldr	r0, [sp, #0]
 800bd16:	9b01      	ldr	r3, [sp, #4]
 800bd18:	4798      	blx	r3
 800bd1a:	4306      	orrs	r6, r0
 800bd1c:	3568      	adds	r5, #104	@ 0x68
 800bd1e:	e7ea      	b.n	800bcf6 <_fwalk_sglue+0xe>

0800bd20 <sniprintf>:
 800bd20:	b40c      	push	{r2, r3}
 800bd22:	b530      	push	{r4, r5, lr}
 800bd24:	4b18      	ldr	r3, [pc, #96]	@ (800bd88 <sniprintf+0x68>)
 800bd26:	000c      	movs	r4, r1
 800bd28:	681d      	ldr	r5, [r3, #0]
 800bd2a:	b09d      	sub	sp, #116	@ 0x74
 800bd2c:	2900      	cmp	r1, #0
 800bd2e:	da08      	bge.n	800bd42 <sniprintf+0x22>
 800bd30:	238b      	movs	r3, #139	@ 0x8b
 800bd32:	2001      	movs	r0, #1
 800bd34:	602b      	str	r3, [r5, #0]
 800bd36:	4240      	negs	r0, r0
 800bd38:	b01d      	add	sp, #116	@ 0x74
 800bd3a:	bc30      	pop	{r4, r5}
 800bd3c:	bc08      	pop	{r3}
 800bd3e:	b002      	add	sp, #8
 800bd40:	4718      	bx	r3
 800bd42:	2382      	movs	r3, #130	@ 0x82
 800bd44:	466a      	mov	r2, sp
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	8293      	strh	r3, [r2, #20]
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	9002      	str	r0, [sp, #8]
 800bd4e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bd50:	9006      	str	r0, [sp, #24]
 800bd52:	4299      	cmp	r1, r3
 800bd54:	d000      	beq.n	800bd58 <sniprintf+0x38>
 800bd56:	1e4b      	subs	r3, r1, #1
 800bd58:	9304      	str	r3, [sp, #16]
 800bd5a:	9307      	str	r3, [sp, #28]
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	466a      	mov	r2, sp
 800bd60:	425b      	negs	r3, r3
 800bd62:	82d3      	strh	r3, [r2, #22]
 800bd64:	0028      	movs	r0, r5
 800bd66:	ab21      	add	r3, sp, #132	@ 0x84
 800bd68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bd6a:	a902      	add	r1, sp, #8
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	f001 fb1d 	bl	800d3ac <_svfiprintf_r>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	da01      	bge.n	800bd7a <sniprintf+0x5a>
 800bd76:	238b      	movs	r3, #139	@ 0x8b
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	2c00      	cmp	r4, #0
 800bd7c:	d0dc      	beq.n	800bd38 <sniprintf+0x18>
 800bd7e:	2200      	movs	r2, #0
 800bd80:	9b02      	ldr	r3, [sp, #8]
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	e7d8      	b.n	800bd38 <sniprintf+0x18>
 800bd86:	46c0      	nop			@ (mov r8, r8)
 800bd88:	20000184 	.word	0x20000184

0800bd8c <__sread>:
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	000c      	movs	r4, r1
 800bd90:	250e      	movs	r5, #14
 800bd92:	5f49      	ldrsh	r1, [r1, r5]
 800bd94:	f000 f8e6 	bl	800bf64 <_read_r>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	db03      	blt.n	800bda4 <__sread+0x18>
 800bd9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bd9e:	181b      	adds	r3, r3, r0
 800bda0:	6563      	str	r3, [r4, #84]	@ 0x54
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	4a02      	ldr	r2, [pc, #8]	@ (800bdb0 <__sread+0x24>)
 800bda8:	4013      	ands	r3, r2
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	e7f9      	b.n	800bda2 <__sread+0x16>
 800bdae:	46c0      	nop			@ (mov r8, r8)
 800bdb0:	ffffefff 	.word	0xffffefff

0800bdb4 <__swrite>:
 800bdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb6:	001f      	movs	r7, r3
 800bdb8:	898b      	ldrh	r3, [r1, #12]
 800bdba:	0005      	movs	r5, r0
 800bdbc:	000c      	movs	r4, r1
 800bdbe:	0016      	movs	r6, r2
 800bdc0:	05db      	lsls	r3, r3, #23
 800bdc2:	d505      	bpl.n	800bdd0 <__swrite+0x1c>
 800bdc4:	230e      	movs	r3, #14
 800bdc6:	5ec9      	ldrsh	r1, [r1, r3]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2302      	movs	r3, #2
 800bdcc:	f000 f8b6 	bl	800bf3c <_lseek_r>
 800bdd0:	89a3      	ldrh	r3, [r4, #12]
 800bdd2:	4a05      	ldr	r2, [pc, #20]	@ (800bde8 <__swrite+0x34>)
 800bdd4:	0028      	movs	r0, r5
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	81a3      	strh	r3, [r4, #12]
 800bdda:	0032      	movs	r2, r6
 800bddc:	230e      	movs	r3, #14
 800bdde:	5ee1      	ldrsh	r1, [r4, r3]
 800bde0:	003b      	movs	r3, r7
 800bde2:	f000 f8d3 	bl	800bf8c <_write_r>
 800bde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde8:	ffffefff 	.word	0xffffefff

0800bdec <__sseek>:
 800bdec:	b570      	push	{r4, r5, r6, lr}
 800bdee:	000c      	movs	r4, r1
 800bdf0:	250e      	movs	r5, #14
 800bdf2:	5f49      	ldrsh	r1, [r1, r5]
 800bdf4:	f000 f8a2 	bl	800bf3c <_lseek_r>
 800bdf8:	89a3      	ldrh	r3, [r4, #12]
 800bdfa:	1c42      	adds	r2, r0, #1
 800bdfc:	d103      	bne.n	800be06 <__sseek+0x1a>
 800bdfe:	4a05      	ldr	r2, [pc, #20]	@ (800be14 <__sseek+0x28>)
 800be00:	4013      	ands	r3, r2
 800be02:	81a3      	strh	r3, [r4, #12]
 800be04:	bd70      	pop	{r4, r5, r6, pc}
 800be06:	2280      	movs	r2, #128	@ 0x80
 800be08:	0152      	lsls	r2, r2, #5
 800be0a:	4313      	orrs	r3, r2
 800be0c:	81a3      	strh	r3, [r4, #12]
 800be0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800be10:	e7f8      	b.n	800be04 <__sseek+0x18>
 800be12:	46c0      	nop			@ (mov r8, r8)
 800be14:	ffffefff 	.word	0xffffefff

0800be18 <__sclose>:
 800be18:	b510      	push	{r4, lr}
 800be1a:	230e      	movs	r3, #14
 800be1c:	5ec9      	ldrsh	r1, [r1, r3]
 800be1e:	f000 f87b 	bl	800bf18 <_close_r>
 800be22:	bd10      	pop	{r4, pc}

0800be24 <memset>:
 800be24:	0003      	movs	r3, r0
 800be26:	1882      	adds	r2, r0, r2
 800be28:	4293      	cmp	r3, r2
 800be2a:	d100      	bne.n	800be2e <memset+0xa>
 800be2c:	4770      	bx	lr
 800be2e:	7019      	strb	r1, [r3, #0]
 800be30:	3301      	adds	r3, #1
 800be32:	e7f9      	b.n	800be28 <memset+0x4>

0800be34 <strncmp>:
 800be34:	b530      	push	{r4, r5, lr}
 800be36:	0005      	movs	r5, r0
 800be38:	1e10      	subs	r0, r2, #0
 800be3a:	d00b      	beq.n	800be54 <strncmp+0x20>
 800be3c:	2400      	movs	r4, #0
 800be3e:	3a01      	subs	r2, #1
 800be40:	5d2b      	ldrb	r3, [r5, r4]
 800be42:	5d08      	ldrb	r0, [r1, r4]
 800be44:	4283      	cmp	r3, r0
 800be46:	d104      	bne.n	800be52 <strncmp+0x1e>
 800be48:	4294      	cmp	r4, r2
 800be4a:	d002      	beq.n	800be52 <strncmp+0x1e>
 800be4c:	3401      	adds	r4, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1f6      	bne.n	800be40 <strncmp+0xc>
 800be52:	1a18      	subs	r0, r3, r0
 800be54:	bd30      	pop	{r4, r5, pc}
	...

0800be58 <strtok>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	4b16      	ldr	r3, [pc, #88]	@ (800beb4 <strtok+0x5c>)
 800be5c:	0005      	movs	r5, r0
 800be5e:	681f      	ldr	r7, [r3, #0]
 800be60:	000e      	movs	r6, r1
 800be62:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800be64:	2c00      	cmp	r4, #0
 800be66:	d11d      	bne.n	800bea4 <strtok+0x4c>
 800be68:	2050      	movs	r0, #80	@ 0x50
 800be6a:	f000 fca1 	bl	800c7b0 <malloc>
 800be6e:	1e02      	subs	r2, r0, #0
 800be70:	6478      	str	r0, [r7, #68]	@ 0x44
 800be72:	d104      	bne.n	800be7e <strtok+0x26>
 800be74:	215b      	movs	r1, #91	@ 0x5b
 800be76:	4b10      	ldr	r3, [pc, #64]	@ (800beb8 <strtok+0x60>)
 800be78:	4810      	ldr	r0, [pc, #64]	@ (800bebc <strtok+0x64>)
 800be7a:	f000 f8d7 	bl	800c02c <__assert_func>
 800be7e:	6004      	str	r4, [r0, #0]
 800be80:	6044      	str	r4, [r0, #4]
 800be82:	6084      	str	r4, [r0, #8]
 800be84:	60c4      	str	r4, [r0, #12]
 800be86:	6104      	str	r4, [r0, #16]
 800be88:	6144      	str	r4, [r0, #20]
 800be8a:	6184      	str	r4, [r0, #24]
 800be8c:	6284      	str	r4, [r0, #40]	@ 0x28
 800be8e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 800be90:	6304      	str	r4, [r0, #48]	@ 0x30
 800be92:	6344      	str	r4, [r0, #52]	@ 0x34
 800be94:	6384      	str	r4, [r0, #56]	@ 0x38
 800be96:	63c4      	str	r4, [r0, #60]	@ 0x3c
 800be98:	6404      	str	r4, [r0, #64]	@ 0x40
 800be9a:	6444      	str	r4, [r0, #68]	@ 0x44
 800be9c:	6484      	str	r4, [r0, #72]	@ 0x48
 800be9e:	64c4      	str	r4, [r0, #76]	@ 0x4c
 800bea0:	7704      	strb	r4, [r0, #28]
 800bea2:	6244      	str	r4, [r0, #36]	@ 0x24
 800bea4:	0031      	movs	r1, r6
 800bea6:	0028      	movs	r0, r5
 800bea8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800beaa:	2301      	movs	r3, #1
 800beac:	f000 f808 	bl	800bec0 <__strtok_r>
 800beb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb2:	46c0      	nop			@ (mov r8, r8)
 800beb4:	20000184 	.word	0x20000184
 800beb8:	0800edbe 	.word	0x0800edbe
 800bebc:	0800edd5 	.word	0x0800edd5

0800bec0 <__strtok_r>:
 800bec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bec2:	1e04      	subs	r4, r0, #0
 800bec4:	d102      	bne.n	800becc <__strtok_r+0xc>
 800bec6:	6814      	ldr	r4, [r2, #0]
 800bec8:	2c00      	cmp	r4, #0
 800beca:	d009      	beq.n	800bee0 <__strtok_r+0x20>
 800becc:	0020      	movs	r0, r4
 800bece:	000e      	movs	r6, r1
 800bed0:	7805      	ldrb	r5, [r0, #0]
 800bed2:	3401      	adds	r4, #1
 800bed4:	7837      	ldrb	r7, [r6, #0]
 800bed6:	2f00      	cmp	r7, #0
 800bed8:	d104      	bne.n	800bee4 <__strtok_r+0x24>
 800beda:	2d00      	cmp	r5, #0
 800bedc:	d10d      	bne.n	800befa <__strtok_r+0x3a>
 800bede:	6015      	str	r5, [r2, #0]
 800bee0:	2000      	movs	r0, #0
 800bee2:	e006      	b.n	800bef2 <__strtok_r+0x32>
 800bee4:	3601      	adds	r6, #1
 800bee6:	42bd      	cmp	r5, r7
 800bee8:	d1f4      	bne.n	800bed4 <__strtok_r+0x14>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1ee      	bne.n	800becc <__strtok_r+0xc>
 800beee:	6014      	str	r4, [r2, #0]
 800bef0:	7003      	strb	r3, [r0, #0]
 800bef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bef4:	3301      	adds	r3, #1
 800bef6:	2d00      	cmp	r5, #0
 800bef8:	d103      	bne.n	800bf02 <__strtok_r+0x42>
 800befa:	0026      	movs	r6, r4
 800befc:	000b      	movs	r3, r1
 800befe:	7837      	ldrb	r7, [r6, #0]
 800bf00:	3401      	adds	r4, #1
 800bf02:	781d      	ldrb	r5, [r3, #0]
 800bf04:	42af      	cmp	r7, r5
 800bf06:	d1f5      	bne.n	800bef4 <__strtok_r+0x34>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	0019      	movs	r1, r3
 800bf0c:	429f      	cmp	r7, r3
 800bf0e:	d001      	beq.n	800bf14 <__strtok_r+0x54>
 800bf10:	0023      	movs	r3, r4
 800bf12:	7031      	strb	r1, [r6, #0]
 800bf14:	6013      	str	r3, [r2, #0]
 800bf16:	e7ec      	b.n	800bef2 <__strtok_r+0x32>

0800bf18 <_close_r>:
 800bf18:	2300      	movs	r3, #0
 800bf1a:	b570      	push	{r4, r5, r6, lr}
 800bf1c:	4d06      	ldr	r5, [pc, #24]	@ (800bf38 <_close_r+0x20>)
 800bf1e:	0004      	movs	r4, r0
 800bf20:	0008      	movs	r0, r1
 800bf22:	602b      	str	r3, [r5, #0]
 800bf24:	f7fb ff31 	bl	8007d8a <_close>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d103      	bne.n	800bf34 <_close_r+0x1c>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d000      	beq.n	800bf34 <_close_r+0x1c>
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	bd70      	pop	{r4, r5, r6, pc}
 800bf36:	46c0      	nop			@ (mov r8, r8)
 800bf38:	20000584 	.word	0x20000584

0800bf3c <_lseek_r>:
 800bf3c:	b570      	push	{r4, r5, r6, lr}
 800bf3e:	0004      	movs	r4, r0
 800bf40:	0008      	movs	r0, r1
 800bf42:	0011      	movs	r1, r2
 800bf44:	001a      	movs	r2, r3
 800bf46:	2300      	movs	r3, #0
 800bf48:	4d05      	ldr	r5, [pc, #20]	@ (800bf60 <_lseek_r+0x24>)
 800bf4a:	602b      	str	r3, [r5, #0]
 800bf4c:	f7fb ff3e 	bl	8007dcc <_lseek>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d103      	bne.n	800bf5c <_lseek_r+0x20>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d000      	beq.n	800bf5c <_lseek_r+0x20>
 800bf5a:	6023      	str	r3, [r4, #0]
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
 800bf5e:	46c0      	nop			@ (mov r8, r8)
 800bf60:	20000584 	.word	0x20000584

0800bf64 <_read_r>:
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	0004      	movs	r4, r0
 800bf68:	0008      	movs	r0, r1
 800bf6a:	0011      	movs	r1, r2
 800bf6c:	001a      	movs	r2, r3
 800bf6e:	2300      	movs	r3, #0
 800bf70:	4d05      	ldr	r5, [pc, #20]	@ (800bf88 <_read_r+0x24>)
 800bf72:	602b      	str	r3, [r5, #0]
 800bf74:	f7fb fed0 	bl	8007d18 <_read>
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d103      	bne.n	800bf84 <_read_r+0x20>
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d000      	beq.n	800bf84 <_read_r+0x20>
 800bf82:	6023      	str	r3, [r4, #0]
 800bf84:	bd70      	pop	{r4, r5, r6, pc}
 800bf86:	46c0      	nop			@ (mov r8, r8)
 800bf88:	20000584 	.word	0x20000584

0800bf8c <_write_r>:
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	0004      	movs	r4, r0
 800bf90:	0008      	movs	r0, r1
 800bf92:	0011      	movs	r1, r2
 800bf94:	001a      	movs	r2, r3
 800bf96:	2300      	movs	r3, #0
 800bf98:	4d05      	ldr	r5, [pc, #20]	@ (800bfb0 <_write_r+0x24>)
 800bf9a:	602b      	str	r3, [r5, #0]
 800bf9c:	f7fb fed9 	bl	8007d52 <_write>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d103      	bne.n	800bfac <_write_r+0x20>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d000      	beq.n	800bfac <_write_r+0x20>
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	bd70      	pop	{r4, r5, r6, pc}
 800bfae:	46c0      	nop			@ (mov r8, r8)
 800bfb0:	20000584 	.word	0x20000584

0800bfb4 <__errno>:
 800bfb4:	4b01      	ldr	r3, [pc, #4]	@ (800bfbc <__errno+0x8>)
 800bfb6:	6818      	ldr	r0, [r3, #0]
 800bfb8:	4770      	bx	lr
 800bfba:	46c0      	nop			@ (mov r8, r8)
 800bfbc:	20000184 	.word	0x20000184

0800bfc0 <__libc_init_array>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	2600      	movs	r6, #0
 800bfc4:	4c0c      	ldr	r4, [pc, #48]	@ (800bff8 <__libc_init_array+0x38>)
 800bfc6:	4d0d      	ldr	r5, [pc, #52]	@ (800bffc <__libc_init_array+0x3c>)
 800bfc8:	1b64      	subs	r4, r4, r5
 800bfca:	10a4      	asrs	r4, r4, #2
 800bfcc:	42a6      	cmp	r6, r4
 800bfce:	d109      	bne.n	800bfe4 <__libc_init_array+0x24>
 800bfd0:	2600      	movs	r6, #0
 800bfd2:	f002 f87f 	bl	800e0d4 <_init>
 800bfd6:	4c0a      	ldr	r4, [pc, #40]	@ (800c000 <__libc_init_array+0x40>)
 800bfd8:	4d0a      	ldr	r5, [pc, #40]	@ (800c004 <__libc_init_array+0x44>)
 800bfda:	1b64      	subs	r4, r4, r5
 800bfdc:	10a4      	asrs	r4, r4, #2
 800bfde:	42a6      	cmp	r6, r4
 800bfe0:	d105      	bne.n	800bfee <__libc_init_array+0x2e>
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}
 800bfe4:	00b3      	lsls	r3, r6, #2
 800bfe6:	58eb      	ldr	r3, [r5, r3]
 800bfe8:	4798      	blx	r3
 800bfea:	3601      	adds	r6, #1
 800bfec:	e7ee      	b.n	800bfcc <__libc_init_array+0xc>
 800bfee:	00b3      	lsls	r3, r6, #2
 800bff0:	58eb      	ldr	r3, [r5, r3]
 800bff2:	4798      	blx	r3
 800bff4:	3601      	adds	r6, #1
 800bff6:	e7f2      	b.n	800bfde <__libc_init_array+0x1e>
 800bff8:	0800f1cc 	.word	0x0800f1cc
 800bffc:	0800f1cc 	.word	0x0800f1cc
 800c000:	0800f1d0 	.word	0x0800f1d0
 800c004:	0800f1cc 	.word	0x0800f1cc

0800c008 <__retarget_lock_init_recursive>:
 800c008:	4770      	bx	lr

0800c00a <__retarget_lock_acquire_recursive>:
 800c00a:	4770      	bx	lr

0800c00c <__retarget_lock_release_recursive>:
 800c00c:	4770      	bx	lr

0800c00e <memcpy>:
 800c00e:	2300      	movs	r3, #0
 800c010:	b510      	push	{r4, lr}
 800c012:	429a      	cmp	r2, r3
 800c014:	d100      	bne.n	800c018 <memcpy+0xa>
 800c016:	bd10      	pop	{r4, pc}
 800c018:	5ccc      	ldrb	r4, [r1, r3]
 800c01a:	54c4      	strb	r4, [r0, r3]
 800c01c:	3301      	adds	r3, #1
 800c01e:	e7f8      	b.n	800c012 <memcpy+0x4>

0800c020 <nan>:
 800c020:	2000      	movs	r0, #0
 800c022:	4901      	ldr	r1, [pc, #4]	@ (800c028 <nan+0x8>)
 800c024:	4770      	bx	lr
 800c026:	46c0      	nop			@ (mov r8, r8)
 800c028:	7ff80000 	.word	0x7ff80000

0800c02c <__assert_func>:
 800c02c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c02e:	0014      	movs	r4, r2
 800c030:	001a      	movs	r2, r3
 800c032:	4b09      	ldr	r3, [pc, #36]	@ (800c058 <__assert_func+0x2c>)
 800c034:	0005      	movs	r5, r0
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	000e      	movs	r6, r1
 800c03a:	68d8      	ldr	r0, [r3, #12]
 800c03c:	4b07      	ldr	r3, [pc, #28]	@ (800c05c <__assert_func+0x30>)
 800c03e:	2c00      	cmp	r4, #0
 800c040:	d101      	bne.n	800c046 <__assert_func+0x1a>
 800c042:	4b07      	ldr	r3, [pc, #28]	@ (800c060 <__assert_func+0x34>)
 800c044:	001c      	movs	r4, r3
 800c046:	4907      	ldr	r1, [pc, #28]	@ (800c064 <__assert_func+0x38>)
 800c048:	9301      	str	r3, [sp, #4]
 800c04a:	9402      	str	r4, [sp, #8]
 800c04c:	002b      	movs	r3, r5
 800c04e:	9600      	str	r6, [sp, #0]
 800c050:	f001 fcd8 	bl	800da04 <fiprintf>
 800c054:	f001 fd15 	bl	800da82 <abort>
 800c058:	20000184 	.word	0x20000184
 800c05c:	0800ee37 	.word	0x0800ee37
 800c060:	0800ee72 	.word	0x0800ee72
 800c064:	0800ee44 	.word	0x0800ee44

0800c068 <_free_r>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	0005      	movs	r5, r0
 800c06c:	1e0c      	subs	r4, r1, #0
 800c06e:	d010      	beq.n	800c092 <_free_r+0x2a>
 800c070:	3c04      	subs	r4, #4
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	da00      	bge.n	800c07a <_free_r+0x12>
 800c078:	18e4      	adds	r4, r4, r3
 800c07a:	0028      	movs	r0, r5
 800c07c:	f000 fc56 	bl	800c92c <__malloc_lock>
 800c080:	4a1d      	ldr	r2, [pc, #116]	@ (800c0f8 <_free_r+0x90>)
 800c082:	6813      	ldr	r3, [r2, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d105      	bne.n	800c094 <_free_r+0x2c>
 800c088:	6063      	str	r3, [r4, #4]
 800c08a:	6014      	str	r4, [r2, #0]
 800c08c:	0028      	movs	r0, r5
 800c08e:	f000 fc55 	bl	800c93c <__malloc_unlock>
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	42a3      	cmp	r3, r4
 800c096:	d908      	bls.n	800c0aa <_free_r+0x42>
 800c098:	6820      	ldr	r0, [r4, #0]
 800c09a:	1821      	adds	r1, r4, r0
 800c09c:	428b      	cmp	r3, r1
 800c09e:	d1f3      	bne.n	800c088 <_free_r+0x20>
 800c0a0:	6819      	ldr	r1, [r3, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	1809      	adds	r1, r1, r0
 800c0a6:	6021      	str	r1, [r4, #0]
 800c0a8:	e7ee      	b.n	800c088 <_free_r+0x20>
 800c0aa:	001a      	movs	r2, r3
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d001      	beq.n	800c0b6 <_free_r+0x4e>
 800c0b2:	42a3      	cmp	r3, r4
 800c0b4:	d9f9      	bls.n	800c0aa <_free_r+0x42>
 800c0b6:	6811      	ldr	r1, [r2, #0]
 800c0b8:	1850      	adds	r0, r2, r1
 800c0ba:	42a0      	cmp	r0, r4
 800c0bc:	d10b      	bne.n	800c0d6 <_free_r+0x6e>
 800c0be:	6820      	ldr	r0, [r4, #0]
 800c0c0:	1809      	adds	r1, r1, r0
 800c0c2:	1850      	adds	r0, r2, r1
 800c0c4:	6011      	str	r1, [r2, #0]
 800c0c6:	4283      	cmp	r3, r0
 800c0c8:	d1e0      	bne.n	800c08c <_free_r+0x24>
 800c0ca:	6818      	ldr	r0, [r3, #0]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	1841      	adds	r1, r0, r1
 800c0d0:	6011      	str	r1, [r2, #0]
 800c0d2:	6053      	str	r3, [r2, #4]
 800c0d4:	e7da      	b.n	800c08c <_free_r+0x24>
 800c0d6:	42a0      	cmp	r0, r4
 800c0d8:	d902      	bls.n	800c0e0 <_free_r+0x78>
 800c0da:	230c      	movs	r3, #12
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	e7d5      	b.n	800c08c <_free_r+0x24>
 800c0e0:	6820      	ldr	r0, [r4, #0]
 800c0e2:	1821      	adds	r1, r4, r0
 800c0e4:	428b      	cmp	r3, r1
 800c0e6:	d103      	bne.n	800c0f0 <_free_r+0x88>
 800c0e8:	6819      	ldr	r1, [r3, #0]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	1809      	adds	r1, r1, r0
 800c0ee:	6021      	str	r1, [r4, #0]
 800c0f0:	6063      	str	r3, [r4, #4]
 800c0f2:	6054      	str	r4, [r2, #4]
 800c0f4:	e7ca      	b.n	800c08c <_free_r+0x24>
 800c0f6:	46c0      	nop			@ (mov r8, r8)
 800c0f8:	20000590 	.word	0x20000590

0800c0fc <rshift>:
 800c0fc:	0002      	movs	r2, r0
 800c0fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c100:	6904      	ldr	r4, [r0, #16]
 800c102:	b085      	sub	sp, #20
 800c104:	3214      	adds	r2, #20
 800c106:	114b      	asrs	r3, r1, #5
 800c108:	0016      	movs	r6, r2
 800c10a:	9302      	str	r3, [sp, #8]
 800c10c:	429c      	cmp	r4, r3
 800c10e:	dd31      	ble.n	800c174 <rshift+0x78>
 800c110:	261f      	movs	r6, #31
 800c112:	000f      	movs	r7, r1
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	00a5      	lsls	r5, r4, #2
 800c118:	18d3      	adds	r3, r2, r3
 800c11a:	4037      	ands	r7, r6
 800c11c:	1955      	adds	r5, r2, r5
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	9701      	str	r7, [sp, #4]
 800c122:	4231      	tst	r1, r6
 800c124:	d10d      	bne.n	800c142 <rshift+0x46>
 800c126:	0016      	movs	r6, r2
 800c128:	0019      	movs	r1, r3
 800c12a:	428d      	cmp	r5, r1
 800c12c:	d836      	bhi.n	800c19c <rshift+0xa0>
 800c12e:	9b00      	ldr	r3, [sp, #0]
 800c130:	2600      	movs	r6, #0
 800c132:	3b03      	subs	r3, #3
 800c134:	429d      	cmp	r5, r3
 800c136:	d302      	bcc.n	800c13e <rshift+0x42>
 800c138:	9b02      	ldr	r3, [sp, #8]
 800c13a:	1ae4      	subs	r4, r4, r3
 800c13c:	00a6      	lsls	r6, r4, #2
 800c13e:	1996      	adds	r6, r2, r6
 800c140:	e018      	b.n	800c174 <rshift+0x78>
 800c142:	2120      	movs	r1, #32
 800c144:	9e01      	ldr	r6, [sp, #4]
 800c146:	9f01      	ldr	r7, [sp, #4]
 800c148:	1b89      	subs	r1, r1, r6
 800c14a:	9e00      	ldr	r6, [sp, #0]
 800c14c:	9103      	str	r1, [sp, #12]
 800c14e:	ce02      	ldmia	r6!, {r1}
 800c150:	4694      	mov	ip, r2
 800c152:	40f9      	lsrs	r1, r7
 800c154:	42b5      	cmp	r5, r6
 800c156:	d816      	bhi.n	800c186 <rshift+0x8a>
 800c158:	9b00      	ldr	r3, [sp, #0]
 800c15a:	2600      	movs	r6, #0
 800c15c:	3301      	adds	r3, #1
 800c15e:	429d      	cmp	r5, r3
 800c160:	d303      	bcc.n	800c16a <rshift+0x6e>
 800c162:	9b02      	ldr	r3, [sp, #8]
 800c164:	1ae4      	subs	r4, r4, r3
 800c166:	00a6      	lsls	r6, r4, #2
 800c168:	3e04      	subs	r6, #4
 800c16a:	1996      	adds	r6, r2, r6
 800c16c:	6031      	str	r1, [r6, #0]
 800c16e:	2900      	cmp	r1, #0
 800c170:	d000      	beq.n	800c174 <rshift+0x78>
 800c172:	3604      	adds	r6, #4
 800c174:	1ab1      	subs	r1, r6, r2
 800c176:	1089      	asrs	r1, r1, #2
 800c178:	6101      	str	r1, [r0, #16]
 800c17a:	4296      	cmp	r6, r2
 800c17c:	d101      	bne.n	800c182 <rshift+0x86>
 800c17e:	2300      	movs	r3, #0
 800c180:	6143      	str	r3, [r0, #20]
 800c182:	b005      	add	sp, #20
 800c184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c186:	6837      	ldr	r7, [r6, #0]
 800c188:	9b03      	ldr	r3, [sp, #12]
 800c18a:	409f      	lsls	r7, r3
 800c18c:	430f      	orrs	r7, r1
 800c18e:	4661      	mov	r1, ip
 800c190:	c180      	stmia	r1!, {r7}
 800c192:	468c      	mov	ip, r1
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	ce02      	ldmia	r6!, {r1}
 800c198:	40d9      	lsrs	r1, r3
 800c19a:	e7db      	b.n	800c154 <rshift+0x58>
 800c19c:	c980      	ldmia	r1!, {r7}
 800c19e:	c680      	stmia	r6!, {r7}
 800c1a0:	e7c3      	b.n	800c12a <rshift+0x2e>

0800c1a2 <__hexdig_fun>:
 800c1a2:	0002      	movs	r2, r0
 800c1a4:	3a30      	subs	r2, #48	@ 0x30
 800c1a6:	0003      	movs	r3, r0
 800c1a8:	2a09      	cmp	r2, #9
 800c1aa:	d802      	bhi.n	800c1b2 <__hexdig_fun+0x10>
 800c1ac:	3b20      	subs	r3, #32
 800c1ae:	b2d8      	uxtb	r0, r3
 800c1b0:	4770      	bx	lr
 800c1b2:	0002      	movs	r2, r0
 800c1b4:	3a61      	subs	r2, #97	@ 0x61
 800c1b6:	2a05      	cmp	r2, #5
 800c1b8:	d801      	bhi.n	800c1be <__hexdig_fun+0x1c>
 800c1ba:	3b47      	subs	r3, #71	@ 0x47
 800c1bc:	e7f7      	b.n	800c1ae <__hexdig_fun+0xc>
 800c1be:	001a      	movs	r2, r3
 800c1c0:	3a41      	subs	r2, #65	@ 0x41
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	2a05      	cmp	r2, #5
 800c1c6:	d8f3      	bhi.n	800c1b0 <__hexdig_fun+0xe>
 800c1c8:	3b27      	subs	r3, #39	@ 0x27
 800c1ca:	e7f0      	b.n	800c1ae <__hexdig_fun+0xc>

0800c1cc <__gethex>:
 800c1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ce:	b089      	sub	sp, #36	@ 0x24
 800c1d0:	9307      	str	r3, [sp, #28]
 800c1d2:	680b      	ldr	r3, [r1, #0]
 800c1d4:	9201      	str	r2, [sp, #4]
 800c1d6:	9003      	str	r0, [sp, #12]
 800c1d8:	9106      	str	r1, [sp, #24]
 800c1da:	1c9a      	adds	r2, r3, #2
 800c1dc:	0011      	movs	r1, r2
 800c1de:	3201      	adds	r2, #1
 800c1e0:	1e50      	subs	r0, r2, #1
 800c1e2:	7800      	ldrb	r0, [r0, #0]
 800c1e4:	2830      	cmp	r0, #48	@ 0x30
 800c1e6:	d0f9      	beq.n	800c1dc <__gethex+0x10>
 800c1e8:	1acb      	subs	r3, r1, r3
 800c1ea:	3b02      	subs	r3, #2
 800c1ec:	9305      	str	r3, [sp, #20]
 800c1ee:	9100      	str	r1, [sp, #0]
 800c1f0:	f7ff ffd7 	bl	800c1a2 <__hexdig_fun>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	001d      	movs	r5, r3
 800c1f8:	9302      	str	r3, [sp, #8]
 800c1fa:	4298      	cmp	r0, r3
 800c1fc:	d11e      	bne.n	800c23c <__gethex+0x70>
 800c1fe:	2201      	movs	r2, #1
 800c200:	49a6      	ldr	r1, [pc, #664]	@ (800c49c <__gethex+0x2d0>)
 800c202:	9800      	ldr	r0, [sp, #0]
 800c204:	f7ff fe16 	bl	800be34 <strncmp>
 800c208:	0007      	movs	r7, r0
 800c20a:	42a8      	cmp	r0, r5
 800c20c:	d000      	beq.n	800c210 <__gethex+0x44>
 800c20e:	e06a      	b.n	800c2e6 <__gethex+0x11a>
 800c210:	9b00      	ldr	r3, [sp, #0]
 800c212:	7858      	ldrb	r0, [r3, #1]
 800c214:	1c5c      	adds	r4, r3, #1
 800c216:	f7ff ffc4 	bl	800c1a2 <__hexdig_fun>
 800c21a:	2301      	movs	r3, #1
 800c21c:	9302      	str	r3, [sp, #8]
 800c21e:	42a8      	cmp	r0, r5
 800c220:	d02f      	beq.n	800c282 <__gethex+0xb6>
 800c222:	9400      	str	r4, [sp, #0]
 800c224:	9b00      	ldr	r3, [sp, #0]
 800c226:	7818      	ldrb	r0, [r3, #0]
 800c228:	2830      	cmp	r0, #48	@ 0x30
 800c22a:	d009      	beq.n	800c240 <__gethex+0x74>
 800c22c:	f7ff ffb9 	bl	800c1a2 <__hexdig_fun>
 800c230:	4242      	negs	r2, r0
 800c232:	4142      	adcs	r2, r0
 800c234:	2301      	movs	r3, #1
 800c236:	0025      	movs	r5, r4
 800c238:	9202      	str	r2, [sp, #8]
 800c23a:	9305      	str	r3, [sp, #20]
 800c23c:	9c00      	ldr	r4, [sp, #0]
 800c23e:	e004      	b.n	800c24a <__gethex+0x7e>
 800c240:	9b00      	ldr	r3, [sp, #0]
 800c242:	3301      	adds	r3, #1
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	e7ed      	b.n	800c224 <__gethex+0x58>
 800c248:	3401      	adds	r4, #1
 800c24a:	7820      	ldrb	r0, [r4, #0]
 800c24c:	f7ff ffa9 	bl	800c1a2 <__hexdig_fun>
 800c250:	1e07      	subs	r7, r0, #0
 800c252:	d1f9      	bne.n	800c248 <__gethex+0x7c>
 800c254:	2201      	movs	r2, #1
 800c256:	0020      	movs	r0, r4
 800c258:	4990      	ldr	r1, [pc, #576]	@ (800c49c <__gethex+0x2d0>)
 800c25a:	f7ff fdeb 	bl	800be34 <strncmp>
 800c25e:	2800      	cmp	r0, #0
 800c260:	d10d      	bne.n	800c27e <__gethex+0xb2>
 800c262:	2d00      	cmp	r5, #0
 800c264:	d106      	bne.n	800c274 <__gethex+0xa8>
 800c266:	3401      	adds	r4, #1
 800c268:	0025      	movs	r5, r4
 800c26a:	7820      	ldrb	r0, [r4, #0]
 800c26c:	f7ff ff99 	bl	800c1a2 <__hexdig_fun>
 800c270:	2800      	cmp	r0, #0
 800c272:	d102      	bne.n	800c27a <__gethex+0xae>
 800c274:	1b2d      	subs	r5, r5, r4
 800c276:	00af      	lsls	r7, r5, #2
 800c278:	e003      	b.n	800c282 <__gethex+0xb6>
 800c27a:	3401      	adds	r4, #1
 800c27c:	e7f5      	b.n	800c26a <__gethex+0x9e>
 800c27e:	2d00      	cmp	r5, #0
 800c280:	d1f8      	bne.n	800c274 <__gethex+0xa8>
 800c282:	2220      	movs	r2, #32
 800c284:	7823      	ldrb	r3, [r4, #0]
 800c286:	0026      	movs	r6, r4
 800c288:	4393      	bics	r3, r2
 800c28a:	2b50      	cmp	r3, #80	@ 0x50
 800c28c:	d11d      	bne.n	800c2ca <__gethex+0xfe>
 800c28e:	7863      	ldrb	r3, [r4, #1]
 800c290:	2b2b      	cmp	r3, #43	@ 0x2b
 800c292:	d02d      	beq.n	800c2f0 <__gethex+0x124>
 800c294:	2b2d      	cmp	r3, #45	@ 0x2d
 800c296:	d02f      	beq.n	800c2f8 <__gethex+0x12c>
 800c298:	2300      	movs	r3, #0
 800c29a:	1c66      	adds	r6, r4, #1
 800c29c:	9304      	str	r3, [sp, #16]
 800c29e:	7830      	ldrb	r0, [r6, #0]
 800c2a0:	f7ff ff7f 	bl	800c1a2 <__hexdig_fun>
 800c2a4:	1e43      	subs	r3, r0, #1
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	0005      	movs	r5, r0
 800c2aa:	2b18      	cmp	r3, #24
 800c2ac:	d82a      	bhi.n	800c304 <__gethex+0x138>
 800c2ae:	7870      	ldrb	r0, [r6, #1]
 800c2b0:	f7ff ff77 	bl	800c1a2 <__hexdig_fun>
 800c2b4:	1e43      	subs	r3, r0, #1
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	3601      	adds	r6, #1
 800c2ba:	3d10      	subs	r5, #16
 800c2bc:	2b18      	cmp	r3, #24
 800c2be:	d91d      	bls.n	800c2fc <__gethex+0x130>
 800c2c0:	9b04      	ldr	r3, [sp, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d000      	beq.n	800c2c8 <__gethex+0xfc>
 800c2c6:	426d      	negs	r5, r5
 800c2c8:	197f      	adds	r7, r7, r5
 800c2ca:	9b06      	ldr	r3, [sp, #24]
 800c2cc:	601e      	str	r6, [r3, #0]
 800c2ce:	9b02      	ldr	r3, [sp, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d019      	beq.n	800c308 <__gethex+0x13c>
 800c2d4:	9b05      	ldr	r3, [sp, #20]
 800c2d6:	2606      	movs	r6, #6
 800c2d8:	425a      	negs	r2, r3
 800c2da:	4153      	adcs	r3, r2
 800c2dc:	425b      	negs	r3, r3
 800c2de:	401e      	ands	r6, r3
 800c2e0:	0030      	movs	r0, r6
 800c2e2:	b009      	add	sp, #36	@ 0x24
 800c2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	2700      	movs	r7, #0
 800c2ea:	9c00      	ldr	r4, [sp, #0]
 800c2ec:	9302      	str	r3, [sp, #8]
 800c2ee:	e7c8      	b.n	800c282 <__gethex+0xb6>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	9304      	str	r3, [sp, #16]
 800c2f4:	1ca6      	adds	r6, r4, #2
 800c2f6:	e7d2      	b.n	800c29e <__gethex+0xd2>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e7fa      	b.n	800c2f2 <__gethex+0x126>
 800c2fc:	230a      	movs	r3, #10
 800c2fe:	435d      	muls	r5, r3
 800c300:	182d      	adds	r5, r5, r0
 800c302:	e7d4      	b.n	800c2ae <__gethex+0xe2>
 800c304:	0026      	movs	r6, r4
 800c306:	e7e0      	b.n	800c2ca <__gethex+0xfe>
 800c308:	9b00      	ldr	r3, [sp, #0]
 800c30a:	9902      	ldr	r1, [sp, #8]
 800c30c:	1ae3      	subs	r3, r4, r3
 800c30e:	3b01      	subs	r3, #1
 800c310:	2b07      	cmp	r3, #7
 800c312:	dc0a      	bgt.n	800c32a <__gethex+0x15e>
 800c314:	9803      	ldr	r0, [sp, #12]
 800c316:	f000 fb19 	bl	800c94c <_Balloc>
 800c31a:	1e05      	subs	r5, r0, #0
 800c31c:	d108      	bne.n	800c330 <__gethex+0x164>
 800c31e:	002a      	movs	r2, r5
 800c320:	21e4      	movs	r1, #228	@ 0xe4
 800c322:	4b5f      	ldr	r3, [pc, #380]	@ (800c4a0 <__gethex+0x2d4>)
 800c324:	485f      	ldr	r0, [pc, #380]	@ (800c4a4 <__gethex+0x2d8>)
 800c326:	f7ff fe81 	bl	800c02c <__assert_func>
 800c32a:	3101      	adds	r1, #1
 800c32c:	105b      	asrs	r3, r3, #1
 800c32e:	e7ef      	b.n	800c310 <__gethex+0x144>
 800c330:	0003      	movs	r3, r0
 800c332:	3314      	adds	r3, #20
 800c334:	9302      	str	r3, [sp, #8]
 800c336:	9305      	str	r3, [sp, #20]
 800c338:	2300      	movs	r3, #0
 800c33a:	001e      	movs	r6, r3
 800c33c:	9304      	str	r3, [sp, #16]
 800c33e:	9b00      	ldr	r3, [sp, #0]
 800c340:	42a3      	cmp	r3, r4
 800c342:	d338      	bcc.n	800c3b6 <__gethex+0x1ea>
 800c344:	9c05      	ldr	r4, [sp, #20]
 800c346:	9b02      	ldr	r3, [sp, #8]
 800c348:	c440      	stmia	r4!, {r6}
 800c34a:	1ae4      	subs	r4, r4, r3
 800c34c:	10a4      	asrs	r4, r4, #2
 800c34e:	0030      	movs	r0, r6
 800c350:	612c      	str	r4, [r5, #16]
 800c352:	f000 fbf3 	bl	800cb3c <__hi0bits>
 800c356:	9b01      	ldr	r3, [sp, #4]
 800c358:	0164      	lsls	r4, r4, #5
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	1a26      	subs	r6, r4, r0
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	429e      	cmp	r6, r3
 800c362:	dd52      	ble.n	800c40a <__gethex+0x23e>
 800c364:	1af6      	subs	r6, r6, r3
 800c366:	0031      	movs	r1, r6
 800c368:	0028      	movs	r0, r5
 800c36a:	f000 ff8e 	bl	800d28a <__any_on>
 800c36e:	1e04      	subs	r4, r0, #0
 800c370:	d00f      	beq.n	800c392 <__gethex+0x1c6>
 800c372:	2401      	movs	r4, #1
 800c374:	211f      	movs	r1, #31
 800c376:	0020      	movs	r0, r4
 800c378:	1e73      	subs	r3, r6, #1
 800c37a:	4019      	ands	r1, r3
 800c37c:	4088      	lsls	r0, r1
 800c37e:	0001      	movs	r1, r0
 800c380:	115a      	asrs	r2, r3, #5
 800c382:	9802      	ldr	r0, [sp, #8]
 800c384:	0092      	lsls	r2, r2, #2
 800c386:	5812      	ldr	r2, [r2, r0]
 800c388:	420a      	tst	r2, r1
 800c38a:	d002      	beq.n	800c392 <__gethex+0x1c6>
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	dc34      	bgt.n	800c3fa <__gethex+0x22e>
 800c390:	2402      	movs	r4, #2
 800c392:	0031      	movs	r1, r6
 800c394:	0028      	movs	r0, r5
 800c396:	f7ff feb1 	bl	800c0fc <rshift>
 800c39a:	19bf      	adds	r7, r7, r6
 800c39c:	9b01      	ldr	r3, [sp, #4]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	42bb      	cmp	r3, r7
 800c3a2:	da42      	bge.n	800c42a <__gethex+0x25e>
 800c3a4:	0029      	movs	r1, r5
 800c3a6:	9803      	ldr	r0, [sp, #12]
 800c3a8:	f000 fb14 	bl	800c9d4 <_Bfree>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3b0:	26a3      	movs	r6, #163	@ 0xa3
 800c3b2:	6013      	str	r3, [r2, #0]
 800c3b4:	e794      	b.n	800c2e0 <__gethex+0x114>
 800c3b6:	3c01      	subs	r4, #1
 800c3b8:	7823      	ldrb	r3, [r4, #0]
 800c3ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3bc:	d012      	beq.n	800c3e4 <__gethex+0x218>
 800c3be:	9b04      	ldr	r3, [sp, #16]
 800c3c0:	2b20      	cmp	r3, #32
 800c3c2:	d104      	bne.n	800c3ce <__gethex+0x202>
 800c3c4:	9b05      	ldr	r3, [sp, #20]
 800c3c6:	c340      	stmia	r3!, {r6}
 800c3c8:	2600      	movs	r6, #0
 800c3ca:	9305      	str	r3, [sp, #20]
 800c3cc:	9604      	str	r6, [sp, #16]
 800c3ce:	7820      	ldrb	r0, [r4, #0]
 800c3d0:	f7ff fee7 	bl	800c1a2 <__hexdig_fun>
 800c3d4:	230f      	movs	r3, #15
 800c3d6:	4018      	ands	r0, r3
 800c3d8:	9b04      	ldr	r3, [sp, #16]
 800c3da:	4098      	lsls	r0, r3
 800c3dc:	3304      	adds	r3, #4
 800c3de:	4306      	orrs	r6, r0
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	e7ac      	b.n	800c33e <__gethex+0x172>
 800c3e4:	9b00      	ldr	r3, [sp, #0]
 800c3e6:	42a3      	cmp	r3, r4
 800c3e8:	d8e9      	bhi.n	800c3be <__gethex+0x1f2>
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	0020      	movs	r0, r4
 800c3ee:	492b      	ldr	r1, [pc, #172]	@ (800c49c <__gethex+0x2d0>)
 800c3f0:	f7ff fd20 	bl	800be34 <strncmp>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d1e2      	bne.n	800c3be <__gethex+0x1f2>
 800c3f8:	e7a1      	b.n	800c33e <__gethex+0x172>
 800c3fa:	0028      	movs	r0, r5
 800c3fc:	1eb1      	subs	r1, r6, #2
 800c3fe:	f000 ff44 	bl	800d28a <__any_on>
 800c402:	2800      	cmp	r0, #0
 800c404:	d0c4      	beq.n	800c390 <__gethex+0x1c4>
 800c406:	2403      	movs	r4, #3
 800c408:	e7c3      	b.n	800c392 <__gethex+0x1c6>
 800c40a:	9b00      	ldr	r3, [sp, #0]
 800c40c:	2400      	movs	r4, #0
 800c40e:	429e      	cmp	r6, r3
 800c410:	dac4      	bge.n	800c39c <__gethex+0x1d0>
 800c412:	1b9e      	subs	r6, r3, r6
 800c414:	0029      	movs	r1, r5
 800c416:	0032      	movs	r2, r6
 800c418:	9803      	ldr	r0, [sp, #12]
 800c41a:	f000 fcfd 	bl	800ce18 <__lshift>
 800c41e:	0003      	movs	r3, r0
 800c420:	3314      	adds	r3, #20
 800c422:	0005      	movs	r5, r0
 800c424:	1bbf      	subs	r7, r7, r6
 800c426:	9302      	str	r3, [sp, #8]
 800c428:	e7b8      	b.n	800c39c <__gethex+0x1d0>
 800c42a:	9b01      	ldr	r3, [sp, #4]
 800c42c:	685e      	ldr	r6, [r3, #4]
 800c42e:	42be      	cmp	r6, r7
 800c430:	dd6f      	ble.n	800c512 <__gethex+0x346>
 800c432:	9b00      	ldr	r3, [sp, #0]
 800c434:	1bf6      	subs	r6, r6, r7
 800c436:	42b3      	cmp	r3, r6
 800c438:	dc36      	bgt.n	800c4a8 <__gethex+0x2dc>
 800c43a:	9b01      	ldr	r3, [sp, #4]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d024      	beq.n	800c48c <__gethex+0x2c0>
 800c442:	2b03      	cmp	r3, #3
 800c444:	d026      	beq.n	800c494 <__gethex+0x2c8>
 800c446:	2b01      	cmp	r3, #1
 800c448:	d117      	bne.n	800c47a <__gethex+0x2ae>
 800c44a:	9b00      	ldr	r3, [sp, #0]
 800c44c:	42b3      	cmp	r3, r6
 800c44e:	d114      	bne.n	800c47a <__gethex+0x2ae>
 800c450:	2b01      	cmp	r3, #1
 800c452:	d10b      	bne.n	800c46c <__gethex+0x2a0>
 800c454:	9b01      	ldr	r3, [sp, #4]
 800c456:	9a07      	ldr	r2, [sp, #28]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	2662      	movs	r6, #98	@ 0x62
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	2301      	movs	r3, #1
 800c460:	9a02      	ldr	r2, [sp, #8]
 800c462:	612b      	str	r3, [r5, #16]
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c468:	601d      	str	r5, [r3, #0]
 800c46a:	e739      	b.n	800c2e0 <__gethex+0x114>
 800c46c:	9900      	ldr	r1, [sp, #0]
 800c46e:	0028      	movs	r0, r5
 800c470:	3901      	subs	r1, #1
 800c472:	f000 ff0a 	bl	800d28a <__any_on>
 800c476:	2800      	cmp	r0, #0
 800c478:	d1ec      	bne.n	800c454 <__gethex+0x288>
 800c47a:	0029      	movs	r1, r5
 800c47c:	9803      	ldr	r0, [sp, #12]
 800c47e:	f000 faa9 	bl	800c9d4 <_Bfree>
 800c482:	2300      	movs	r3, #0
 800c484:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c486:	2650      	movs	r6, #80	@ 0x50
 800c488:	6013      	str	r3, [r2, #0]
 800c48a:	e729      	b.n	800c2e0 <__gethex+0x114>
 800c48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1f3      	bne.n	800c47a <__gethex+0x2ae>
 800c492:	e7df      	b.n	800c454 <__gethex+0x288>
 800c494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1dc      	bne.n	800c454 <__gethex+0x288>
 800c49a:	e7ee      	b.n	800c47a <__gethex+0x2ae>
 800c49c:	0800edb0 	.word	0x0800edb0
 800c4a0:	0800ee73 	.word	0x0800ee73
 800c4a4:	0800ee84 	.word	0x0800ee84
 800c4a8:	1e77      	subs	r7, r6, #1
 800c4aa:	2c00      	cmp	r4, #0
 800c4ac:	d12f      	bne.n	800c50e <__gethex+0x342>
 800c4ae:	2f00      	cmp	r7, #0
 800c4b0:	d004      	beq.n	800c4bc <__gethex+0x2f0>
 800c4b2:	0039      	movs	r1, r7
 800c4b4:	0028      	movs	r0, r5
 800c4b6:	f000 fee8 	bl	800d28a <__any_on>
 800c4ba:	0004      	movs	r4, r0
 800c4bc:	231f      	movs	r3, #31
 800c4be:	117a      	asrs	r2, r7, #5
 800c4c0:	401f      	ands	r7, r3
 800c4c2:	3b1e      	subs	r3, #30
 800c4c4:	40bb      	lsls	r3, r7
 800c4c6:	9902      	ldr	r1, [sp, #8]
 800c4c8:	0092      	lsls	r2, r2, #2
 800c4ca:	5852      	ldr	r2, [r2, r1]
 800c4cc:	421a      	tst	r2, r3
 800c4ce:	d001      	beq.n	800c4d4 <__gethex+0x308>
 800c4d0:	2302      	movs	r3, #2
 800c4d2:	431c      	orrs	r4, r3
 800c4d4:	9b00      	ldr	r3, [sp, #0]
 800c4d6:	0031      	movs	r1, r6
 800c4d8:	1b9b      	subs	r3, r3, r6
 800c4da:	2602      	movs	r6, #2
 800c4dc:	0028      	movs	r0, r5
 800c4de:	9300      	str	r3, [sp, #0]
 800c4e0:	f7ff fe0c 	bl	800c0fc <rshift>
 800c4e4:	9b01      	ldr	r3, [sp, #4]
 800c4e6:	685f      	ldr	r7, [r3, #4]
 800c4e8:	2c00      	cmp	r4, #0
 800c4ea:	d03f      	beq.n	800c56c <__gethex+0x3a0>
 800c4ec:	9b01      	ldr	r3, [sp, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d010      	beq.n	800c516 <__gethex+0x34a>
 800c4f4:	2b03      	cmp	r3, #3
 800c4f6:	d012      	beq.n	800c51e <__gethex+0x352>
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d106      	bne.n	800c50a <__gethex+0x33e>
 800c4fc:	07a2      	lsls	r2, r4, #30
 800c4fe:	d504      	bpl.n	800c50a <__gethex+0x33e>
 800c500:	9a02      	ldr	r2, [sp, #8]
 800c502:	6812      	ldr	r2, [r2, #0]
 800c504:	4314      	orrs	r4, r2
 800c506:	421c      	tst	r4, r3
 800c508:	d10c      	bne.n	800c524 <__gethex+0x358>
 800c50a:	2310      	movs	r3, #16
 800c50c:	e02d      	b.n	800c56a <__gethex+0x39e>
 800c50e:	2401      	movs	r4, #1
 800c510:	e7d4      	b.n	800c4bc <__gethex+0x2f0>
 800c512:	2601      	movs	r6, #1
 800c514:	e7e8      	b.n	800c4e8 <__gethex+0x31c>
 800c516:	2301      	movs	r3, #1
 800c518:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c51a:	1a9b      	subs	r3, r3, r2
 800c51c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c51e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c520:	2b00      	cmp	r3, #0
 800c522:	d0f2      	beq.n	800c50a <__gethex+0x33e>
 800c524:	692b      	ldr	r3, [r5, #16]
 800c526:	2000      	movs	r0, #0
 800c528:	9302      	str	r3, [sp, #8]
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	9304      	str	r3, [sp, #16]
 800c52e:	002b      	movs	r3, r5
 800c530:	9a04      	ldr	r2, [sp, #16]
 800c532:	3314      	adds	r3, #20
 800c534:	1899      	adds	r1, r3, r2
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	1c54      	adds	r4, r2, #1
 800c53a:	d01c      	beq.n	800c576 <__gethex+0x3aa>
 800c53c:	3201      	adds	r2, #1
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	002b      	movs	r3, r5
 800c542:	3314      	adds	r3, #20
 800c544:	2e02      	cmp	r6, #2
 800c546:	d13f      	bne.n	800c5c8 <__gethex+0x3fc>
 800c548:	9a01      	ldr	r2, [sp, #4]
 800c54a:	9900      	ldr	r1, [sp, #0]
 800c54c:	6812      	ldr	r2, [r2, #0]
 800c54e:	3a01      	subs	r2, #1
 800c550:	428a      	cmp	r2, r1
 800c552:	d109      	bne.n	800c568 <__gethex+0x39c>
 800c554:	000a      	movs	r2, r1
 800c556:	201f      	movs	r0, #31
 800c558:	4010      	ands	r0, r2
 800c55a:	2201      	movs	r2, #1
 800c55c:	4082      	lsls	r2, r0
 800c55e:	1149      	asrs	r1, r1, #5
 800c560:	0089      	lsls	r1, r1, #2
 800c562:	58cb      	ldr	r3, [r1, r3]
 800c564:	4213      	tst	r3, r2
 800c566:	d13d      	bne.n	800c5e4 <__gethex+0x418>
 800c568:	2320      	movs	r3, #32
 800c56a:	431e      	orrs	r6, r3
 800c56c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c56e:	601d      	str	r5, [r3, #0]
 800c570:	9b07      	ldr	r3, [sp, #28]
 800c572:	601f      	str	r7, [r3, #0]
 800c574:	e6b4      	b.n	800c2e0 <__gethex+0x114>
 800c576:	c301      	stmia	r3!, {r0}
 800c578:	4299      	cmp	r1, r3
 800c57a:	d8dc      	bhi.n	800c536 <__gethex+0x36a>
 800c57c:	68ab      	ldr	r3, [r5, #8]
 800c57e:	9a02      	ldr	r2, [sp, #8]
 800c580:	429a      	cmp	r2, r3
 800c582:	db18      	blt.n	800c5b6 <__gethex+0x3ea>
 800c584:	6869      	ldr	r1, [r5, #4]
 800c586:	9803      	ldr	r0, [sp, #12]
 800c588:	3101      	adds	r1, #1
 800c58a:	f000 f9df 	bl	800c94c <_Balloc>
 800c58e:	1e04      	subs	r4, r0, #0
 800c590:	d104      	bne.n	800c59c <__gethex+0x3d0>
 800c592:	0022      	movs	r2, r4
 800c594:	2184      	movs	r1, #132	@ 0x84
 800c596:	4b1d      	ldr	r3, [pc, #116]	@ (800c60c <__gethex+0x440>)
 800c598:	481d      	ldr	r0, [pc, #116]	@ (800c610 <__gethex+0x444>)
 800c59a:	e6c4      	b.n	800c326 <__gethex+0x15a>
 800c59c:	0029      	movs	r1, r5
 800c59e:	692a      	ldr	r2, [r5, #16]
 800c5a0:	310c      	adds	r1, #12
 800c5a2:	3202      	adds	r2, #2
 800c5a4:	0092      	lsls	r2, r2, #2
 800c5a6:	300c      	adds	r0, #12
 800c5a8:	f7ff fd31 	bl	800c00e <memcpy>
 800c5ac:	0029      	movs	r1, r5
 800c5ae:	9803      	ldr	r0, [sp, #12]
 800c5b0:	f000 fa10 	bl	800c9d4 <_Bfree>
 800c5b4:	0025      	movs	r5, r4
 800c5b6:	692b      	ldr	r3, [r5, #16]
 800c5b8:	1c5a      	adds	r2, r3, #1
 800c5ba:	612a      	str	r2, [r5, #16]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	3304      	adds	r3, #4
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	18eb      	adds	r3, r5, r3
 800c5c4:	605a      	str	r2, [r3, #4]
 800c5c6:	e7bb      	b.n	800c540 <__gethex+0x374>
 800c5c8:	692a      	ldr	r2, [r5, #16]
 800c5ca:	9902      	ldr	r1, [sp, #8]
 800c5cc:	428a      	cmp	r2, r1
 800c5ce:	dd0b      	ble.n	800c5e8 <__gethex+0x41c>
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	0028      	movs	r0, r5
 800c5d4:	f7ff fd92 	bl	800c0fc <rshift>
 800c5d8:	9b01      	ldr	r3, [sp, #4]
 800c5da:	3701      	adds	r7, #1
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	42bb      	cmp	r3, r7
 800c5e0:	da00      	bge.n	800c5e4 <__gethex+0x418>
 800c5e2:	e6df      	b.n	800c3a4 <__gethex+0x1d8>
 800c5e4:	2601      	movs	r6, #1
 800c5e6:	e7bf      	b.n	800c568 <__gethex+0x39c>
 800c5e8:	221f      	movs	r2, #31
 800c5ea:	9c00      	ldr	r4, [sp, #0]
 800c5ec:	9900      	ldr	r1, [sp, #0]
 800c5ee:	4014      	ands	r4, r2
 800c5f0:	4211      	tst	r1, r2
 800c5f2:	d0f7      	beq.n	800c5e4 <__gethex+0x418>
 800c5f4:	9a04      	ldr	r2, [sp, #16]
 800c5f6:	189b      	adds	r3, r3, r2
 800c5f8:	3b04      	subs	r3, #4
 800c5fa:	6818      	ldr	r0, [r3, #0]
 800c5fc:	f000 fa9e 	bl	800cb3c <__hi0bits>
 800c600:	2320      	movs	r3, #32
 800c602:	1b1b      	subs	r3, r3, r4
 800c604:	4298      	cmp	r0, r3
 800c606:	dbe3      	blt.n	800c5d0 <__gethex+0x404>
 800c608:	e7ec      	b.n	800c5e4 <__gethex+0x418>
 800c60a:	46c0      	nop			@ (mov r8, r8)
 800c60c:	0800ee73 	.word	0x0800ee73
 800c610:	0800ee84 	.word	0x0800ee84

0800c614 <L_shift>:
 800c614:	2308      	movs	r3, #8
 800c616:	b570      	push	{r4, r5, r6, lr}
 800c618:	2520      	movs	r5, #32
 800c61a:	1a9a      	subs	r2, r3, r2
 800c61c:	0092      	lsls	r2, r2, #2
 800c61e:	1aad      	subs	r5, r5, r2
 800c620:	6843      	ldr	r3, [r0, #4]
 800c622:	6804      	ldr	r4, [r0, #0]
 800c624:	001e      	movs	r6, r3
 800c626:	40ae      	lsls	r6, r5
 800c628:	40d3      	lsrs	r3, r2
 800c62a:	4334      	orrs	r4, r6
 800c62c:	6004      	str	r4, [r0, #0]
 800c62e:	6043      	str	r3, [r0, #4]
 800c630:	3004      	adds	r0, #4
 800c632:	4288      	cmp	r0, r1
 800c634:	d3f4      	bcc.n	800c620 <L_shift+0xc>
 800c636:	bd70      	pop	{r4, r5, r6, pc}

0800c638 <__match>:
 800c638:	b530      	push	{r4, r5, lr}
 800c63a:	6803      	ldr	r3, [r0, #0]
 800c63c:	780c      	ldrb	r4, [r1, #0]
 800c63e:	3301      	adds	r3, #1
 800c640:	2c00      	cmp	r4, #0
 800c642:	d102      	bne.n	800c64a <__match+0x12>
 800c644:	6003      	str	r3, [r0, #0]
 800c646:	2001      	movs	r0, #1
 800c648:	bd30      	pop	{r4, r5, pc}
 800c64a:	781a      	ldrb	r2, [r3, #0]
 800c64c:	0015      	movs	r5, r2
 800c64e:	3d41      	subs	r5, #65	@ 0x41
 800c650:	2d19      	cmp	r5, #25
 800c652:	d800      	bhi.n	800c656 <__match+0x1e>
 800c654:	3220      	adds	r2, #32
 800c656:	3101      	adds	r1, #1
 800c658:	42a2      	cmp	r2, r4
 800c65a:	d0ef      	beq.n	800c63c <__match+0x4>
 800c65c:	2000      	movs	r0, #0
 800c65e:	e7f3      	b.n	800c648 <__match+0x10>

0800c660 <__hexnan>:
 800c660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c662:	680b      	ldr	r3, [r1, #0]
 800c664:	b08b      	sub	sp, #44	@ 0x2c
 800c666:	9201      	str	r2, [sp, #4]
 800c668:	9901      	ldr	r1, [sp, #4]
 800c66a:	115a      	asrs	r2, r3, #5
 800c66c:	0092      	lsls	r2, r2, #2
 800c66e:	188a      	adds	r2, r1, r2
 800c670:	9202      	str	r2, [sp, #8]
 800c672:	0019      	movs	r1, r3
 800c674:	221f      	movs	r2, #31
 800c676:	4011      	ands	r1, r2
 800c678:	9008      	str	r0, [sp, #32]
 800c67a:	9106      	str	r1, [sp, #24]
 800c67c:	4213      	tst	r3, r2
 800c67e:	d002      	beq.n	800c686 <__hexnan+0x26>
 800c680:	9b02      	ldr	r3, [sp, #8]
 800c682:	3304      	adds	r3, #4
 800c684:	9302      	str	r3, [sp, #8]
 800c686:	9b02      	ldr	r3, [sp, #8]
 800c688:	2500      	movs	r5, #0
 800c68a:	1f1f      	subs	r7, r3, #4
 800c68c:	003e      	movs	r6, r7
 800c68e:	003c      	movs	r4, r7
 800c690:	9b08      	ldr	r3, [sp, #32]
 800c692:	603d      	str	r5, [r7, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	9507      	str	r5, [sp, #28]
 800c698:	9305      	str	r3, [sp, #20]
 800c69a:	9503      	str	r5, [sp, #12]
 800c69c:	9b05      	ldr	r3, [sp, #20]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6a2:	9b05      	ldr	r3, [sp, #20]
 800c6a4:	785b      	ldrb	r3, [r3, #1]
 800c6a6:	9304      	str	r3, [sp, #16]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d028      	beq.n	800c6fe <__hexnan+0x9e>
 800c6ac:	9804      	ldr	r0, [sp, #16]
 800c6ae:	f7ff fd78 	bl	800c1a2 <__hexdig_fun>
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	d155      	bne.n	800c762 <__hexnan+0x102>
 800c6b6:	9b04      	ldr	r3, [sp, #16]
 800c6b8:	2b20      	cmp	r3, #32
 800c6ba:	d819      	bhi.n	800c6f0 <__hexnan+0x90>
 800c6bc:	9b03      	ldr	r3, [sp, #12]
 800c6be:	9a07      	ldr	r2, [sp, #28]
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	dd12      	ble.n	800c6ea <__hexnan+0x8a>
 800c6c4:	42b4      	cmp	r4, r6
 800c6c6:	d206      	bcs.n	800c6d6 <__hexnan+0x76>
 800c6c8:	2d07      	cmp	r5, #7
 800c6ca:	dc04      	bgt.n	800c6d6 <__hexnan+0x76>
 800c6cc:	002a      	movs	r2, r5
 800c6ce:	0031      	movs	r1, r6
 800c6d0:	0020      	movs	r0, r4
 800c6d2:	f7ff ff9f 	bl	800c614 <L_shift>
 800c6d6:	9b01      	ldr	r3, [sp, #4]
 800c6d8:	2508      	movs	r5, #8
 800c6da:	429c      	cmp	r4, r3
 800c6dc:	d905      	bls.n	800c6ea <__hexnan+0x8a>
 800c6de:	1f26      	subs	r6, r4, #4
 800c6e0:	2500      	movs	r5, #0
 800c6e2:	0034      	movs	r4, r6
 800c6e4:	9b03      	ldr	r3, [sp, #12]
 800c6e6:	6035      	str	r5, [r6, #0]
 800c6e8:	9307      	str	r3, [sp, #28]
 800c6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ec:	9305      	str	r3, [sp, #20]
 800c6ee:	e7d5      	b.n	800c69c <__hexnan+0x3c>
 800c6f0:	9b04      	ldr	r3, [sp, #16]
 800c6f2:	2b29      	cmp	r3, #41	@ 0x29
 800c6f4:	d15a      	bne.n	800c7ac <__hexnan+0x14c>
 800c6f6:	9b05      	ldr	r3, [sp, #20]
 800c6f8:	9a08      	ldr	r2, [sp, #32]
 800c6fa:	3302      	adds	r3, #2
 800c6fc:	6013      	str	r3, [r2, #0]
 800c6fe:	9b03      	ldr	r3, [sp, #12]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d053      	beq.n	800c7ac <__hexnan+0x14c>
 800c704:	42b4      	cmp	r4, r6
 800c706:	d206      	bcs.n	800c716 <__hexnan+0xb6>
 800c708:	2d07      	cmp	r5, #7
 800c70a:	dc04      	bgt.n	800c716 <__hexnan+0xb6>
 800c70c:	002a      	movs	r2, r5
 800c70e:	0031      	movs	r1, r6
 800c710:	0020      	movs	r0, r4
 800c712:	f7ff ff7f 	bl	800c614 <L_shift>
 800c716:	9b01      	ldr	r3, [sp, #4]
 800c718:	429c      	cmp	r4, r3
 800c71a:	d936      	bls.n	800c78a <__hexnan+0x12a>
 800c71c:	001a      	movs	r2, r3
 800c71e:	0023      	movs	r3, r4
 800c720:	cb02      	ldmia	r3!, {r1}
 800c722:	c202      	stmia	r2!, {r1}
 800c724:	429f      	cmp	r7, r3
 800c726:	d2fb      	bcs.n	800c720 <__hexnan+0xc0>
 800c728:	9b02      	ldr	r3, [sp, #8]
 800c72a:	1c62      	adds	r2, r4, #1
 800c72c:	1ed9      	subs	r1, r3, #3
 800c72e:	2304      	movs	r3, #4
 800c730:	4291      	cmp	r1, r2
 800c732:	d305      	bcc.n	800c740 <__hexnan+0xe0>
 800c734:	9b02      	ldr	r3, [sp, #8]
 800c736:	3b04      	subs	r3, #4
 800c738:	1b1b      	subs	r3, r3, r4
 800c73a:	089b      	lsrs	r3, r3, #2
 800c73c:	3301      	adds	r3, #1
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	9a01      	ldr	r2, [sp, #4]
 800c742:	18d3      	adds	r3, r2, r3
 800c744:	2200      	movs	r2, #0
 800c746:	c304      	stmia	r3!, {r2}
 800c748:	429f      	cmp	r7, r3
 800c74a:	d2fc      	bcs.n	800c746 <__hexnan+0xe6>
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d104      	bne.n	800c75c <__hexnan+0xfc>
 800c752:	9b01      	ldr	r3, [sp, #4]
 800c754:	429f      	cmp	r7, r3
 800c756:	d127      	bne.n	800c7a8 <__hexnan+0x148>
 800c758:	2301      	movs	r3, #1
 800c75a:	603b      	str	r3, [r7, #0]
 800c75c:	2005      	movs	r0, #5
 800c75e:	b00b      	add	sp, #44	@ 0x2c
 800c760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	3501      	adds	r5, #1
 800c766:	3301      	adds	r3, #1
 800c768:	9303      	str	r3, [sp, #12]
 800c76a:	2d08      	cmp	r5, #8
 800c76c:	dd06      	ble.n	800c77c <__hexnan+0x11c>
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	429c      	cmp	r4, r3
 800c772:	d9ba      	bls.n	800c6ea <__hexnan+0x8a>
 800c774:	2300      	movs	r3, #0
 800c776:	2501      	movs	r5, #1
 800c778:	3c04      	subs	r4, #4
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	220f      	movs	r2, #15
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	4010      	ands	r0, r2
 800c782:	011b      	lsls	r3, r3, #4
 800c784:	4303      	orrs	r3, r0
 800c786:	6023      	str	r3, [r4, #0]
 800c788:	e7af      	b.n	800c6ea <__hexnan+0x8a>
 800c78a:	9b06      	ldr	r3, [sp, #24]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0dd      	beq.n	800c74c <__hexnan+0xec>
 800c790:	2320      	movs	r3, #32
 800c792:	9a06      	ldr	r2, [sp, #24]
 800c794:	9902      	ldr	r1, [sp, #8]
 800c796:	1a9b      	subs	r3, r3, r2
 800c798:	2201      	movs	r2, #1
 800c79a:	4252      	negs	r2, r2
 800c79c:	40da      	lsrs	r2, r3
 800c79e:	3904      	subs	r1, #4
 800c7a0:	680b      	ldr	r3, [r1, #0]
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	600b      	str	r3, [r1, #0]
 800c7a6:	e7d1      	b.n	800c74c <__hexnan+0xec>
 800c7a8:	3f04      	subs	r7, #4
 800c7aa:	e7cf      	b.n	800c74c <__hexnan+0xec>
 800c7ac:	2004      	movs	r0, #4
 800c7ae:	e7d6      	b.n	800c75e <__hexnan+0xfe>

0800c7b0 <malloc>:
 800c7b0:	b510      	push	{r4, lr}
 800c7b2:	4b03      	ldr	r3, [pc, #12]	@ (800c7c0 <malloc+0x10>)
 800c7b4:	0001      	movs	r1, r0
 800c7b6:	6818      	ldr	r0, [r3, #0]
 800c7b8:	f000 f826 	bl	800c808 <_malloc_r>
 800c7bc:	bd10      	pop	{r4, pc}
 800c7be:	46c0      	nop			@ (mov r8, r8)
 800c7c0:	20000184 	.word	0x20000184

0800c7c4 <sbrk_aligned>:
 800c7c4:	b570      	push	{r4, r5, r6, lr}
 800c7c6:	4e0f      	ldr	r6, [pc, #60]	@ (800c804 <sbrk_aligned+0x40>)
 800c7c8:	000d      	movs	r5, r1
 800c7ca:	6831      	ldr	r1, [r6, #0]
 800c7cc:	0004      	movs	r4, r0
 800c7ce:	2900      	cmp	r1, #0
 800c7d0:	d102      	bne.n	800c7d8 <sbrk_aligned+0x14>
 800c7d2:	f001 f939 	bl	800da48 <_sbrk_r>
 800c7d6:	6030      	str	r0, [r6, #0]
 800c7d8:	0029      	movs	r1, r5
 800c7da:	0020      	movs	r0, r4
 800c7dc:	f001 f934 	bl	800da48 <_sbrk_r>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d103      	bne.n	800c7ec <sbrk_aligned+0x28>
 800c7e4:	2501      	movs	r5, #1
 800c7e6:	426d      	negs	r5, r5
 800c7e8:	0028      	movs	r0, r5
 800c7ea:	bd70      	pop	{r4, r5, r6, pc}
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	1cc5      	adds	r5, r0, #3
 800c7f0:	439d      	bics	r5, r3
 800c7f2:	42a8      	cmp	r0, r5
 800c7f4:	d0f8      	beq.n	800c7e8 <sbrk_aligned+0x24>
 800c7f6:	1a29      	subs	r1, r5, r0
 800c7f8:	0020      	movs	r0, r4
 800c7fa:	f001 f925 	bl	800da48 <_sbrk_r>
 800c7fe:	3001      	adds	r0, #1
 800c800:	d1f2      	bne.n	800c7e8 <sbrk_aligned+0x24>
 800c802:	e7ef      	b.n	800c7e4 <sbrk_aligned+0x20>
 800c804:	2000058c 	.word	0x2000058c

0800c808 <_malloc_r>:
 800c808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c80a:	2203      	movs	r2, #3
 800c80c:	1ccb      	adds	r3, r1, #3
 800c80e:	4393      	bics	r3, r2
 800c810:	3308      	adds	r3, #8
 800c812:	0005      	movs	r5, r0
 800c814:	001f      	movs	r7, r3
 800c816:	2b0c      	cmp	r3, #12
 800c818:	d234      	bcs.n	800c884 <_malloc_r+0x7c>
 800c81a:	270c      	movs	r7, #12
 800c81c:	42b9      	cmp	r1, r7
 800c81e:	d833      	bhi.n	800c888 <_malloc_r+0x80>
 800c820:	0028      	movs	r0, r5
 800c822:	f000 f883 	bl	800c92c <__malloc_lock>
 800c826:	4e37      	ldr	r6, [pc, #220]	@ (800c904 <_malloc_r+0xfc>)
 800c828:	6833      	ldr	r3, [r6, #0]
 800c82a:	001c      	movs	r4, r3
 800c82c:	2c00      	cmp	r4, #0
 800c82e:	d12f      	bne.n	800c890 <_malloc_r+0x88>
 800c830:	0039      	movs	r1, r7
 800c832:	0028      	movs	r0, r5
 800c834:	f7ff ffc6 	bl	800c7c4 <sbrk_aligned>
 800c838:	0004      	movs	r4, r0
 800c83a:	1c43      	adds	r3, r0, #1
 800c83c:	d15f      	bne.n	800c8fe <_malloc_r+0xf6>
 800c83e:	6834      	ldr	r4, [r6, #0]
 800c840:	9400      	str	r4, [sp, #0]
 800c842:	9b00      	ldr	r3, [sp, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d14a      	bne.n	800c8de <_malloc_r+0xd6>
 800c848:	2c00      	cmp	r4, #0
 800c84a:	d052      	beq.n	800c8f2 <_malloc_r+0xea>
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	0028      	movs	r0, r5
 800c850:	18e3      	adds	r3, r4, r3
 800c852:	9900      	ldr	r1, [sp, #0]
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	f001 f8f7 	bl	800da48 <_sbrk_r>
 800c85a:	9b01      	ldr	r3, [sp, #4]
 800c85c:	4283      	cmp	r3, r0
 800c85e:	d148      	bne.n	800c8f2 <_malloc_r+0xea>
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	0028      	movs	r0, r5
 800c864:	1aff      	subs	r7, r7, r3
 800c866:	0039      	movs	r1, r7
 800c868:	f7ff ffac 	bl	800c7c4 <sbrk_aligned>
 800c86c:	3001      	adds	r0, #1
 800c86e:	d040      	beq.n	800c8f2 <_malloc_r+0xea>
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	19db      	adds	r3, r3, r7
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	6833      	ldr	r3, [r6, #0]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	2a00      	cmp	r2, #0
 800c87c:	d133      	bne.n	800c8e6 <_malloc_r+0xde>
 800c87e:	9b00      	ldr	r3, [sp, #0]
 800c880:	6033      	str	r3, [r6, #0]
 800c882:	e019      	b.n	800c8b8 <_malloc_r+0xb0>
 800c884:	2b00      	cmp	r3, #0
 800c886:	dac9      	bge.n	800c81c <_malloc_r+0x14>
 800c888:	230c      	movs	r3, #12
 800c88a:	602b      	str	r3, [r5, #0]
 800c88c:	2000      	movs	r0, #0
 800c88e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c890:	6821      	ldr	r1, [r4, #0]
 800c892:	1bc9      	subs	r1, r1, r7
 800c894:	d420      	bmi.n	800c8d8 <_malloc_r+0xd0>
 800c896:	290b      	cmp	r1, #11
 800c898:	d90a      	bls.n	800c8b0 <_malloc_r+0xa8>
 800c89a:	19e2      	adds	r2, r4, r7
 800c89c:	6027      	str	r7, [r4, #0]
 800c89e:	42a3      	cmp	r3, r4
 800c8a0:	d104      	bne.n	800c8ac <_malloc_r+0xa4>
 800c8a2:	6032      	str	r2, [r6, #0]
 800c8a4:	6863      	ldr	r3, [r4, #4]
 800c8a6:	6011      	str	r1, [r2, #0]
 800c8a8:	6053      	str	r3, [r2, #4]
 800c8aa:	e005      	b.n	800c8b8 <_malloc_r+0xb0>
 800c8ac:	605a      	str	r2, [r3, #4]
 800c8ae:	e7f9      	b.n	800c8a4 <_malloc_r+0x9c>
 800c8b0:	6862      	ldr	r2, [r4, #4]
 800c8b2:	42a3      	cmp	r3, r4
 800c8b4:	d10e      	bne.n	800c8d4 <_malloc_r+0xcc>
 800c8b6:	6032      	str	r2, [r6, #0]
 800c8b8:	0028      	movs	r0, r5
 800c8ba:	f000 f83f 	bl	800c93c <__malloc_unlock>
 800c8be:	0020      	movs	r0, r4
 800c8c0:	2207      	movs	r2, #7
 800c8c2:	300b      	adds	r0, #11
 800c8c4:	1d23      	adds	r3, r4, #4
 800c8c6:	4390      	bics	r0, r2
 800c8c8:	1ac2      	subs	r2, r0, r3
 800c8ca:	4298      	cmp	r0, r3
 800c8cc:	d0df      	beq.n	800c88e <_malloc_r+0x86>
 800c8ce:	1a1b      	subs	r3, r3, r0
 800c8d0:	50a3      	str	r3, [r4, r2]
 800c8d2:	e7dc      	b.n	800c88e <_malloc_r+0x86>
 800c8d4:	605a      	str	r2, [r3, #4]
 800c8d6:	e7ef      	b.n	800c8b8 <_malloc_r+0xb0>
 800c8d8:	0023      	movs	r3, r4
 800c8da:	6864      	ldr	r4, [r4, #4]
 800c8dc:	e7a6      	b.n	800c82c <_malloc_r+0x24>
 800c8de:	9c00      	ldr	r4, [sp, #0]
 800c8e0:	6863      	ldr	r3, [r4, #4]
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	e7ad      	b.n	800c842 <_malloc_r+0x3a>
 800c8e6:	001a      	movs	r2, r3
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	42a3      	cmp	r3, r4
 800c8ec:	d1fb      	bne.n	800c8e6 <_malloc_r+0xde>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e7da      	b.n	800c8a8 <_malloc_r+0xa0>
 800c8f2:	230c      	movs	r3, #12
 800c8f4:	0028      	movs	r0, r5
 800c8f6:	602b      	str	r3, [r5, #0]
 800c8f8:	f000 f820 	bl	800c93c <__malloc_unlock>
 800c8fc:	e7c6      	b.n	800c88c <_malloc_r+0x84>
 800c8fe:	6007      	str	r7, [r0, #0]
 800c900:	e7da      	b.n	800c8b8 <_malloc_r+0xb0>
 800c902:	46c0      	nop			@ (mov r8, r8)
 800c904:	20000590 	.word	0x20000590

0800c908 <__ascii_mbtowc>:
 800c908:	b082      	sub	sp, #8
 800c90a:	2900      	cmp	r1, #0
 800c90c:	d100      	bne.n	800c910 <__ascii_mbtowc+0x8>
 800c90e:	a901      	add	r1, sp, #4
 800c910:	1e10      	subs	r0, r2, #0
 800c912:	d006      	beq.n	800c922 <__ascii_mbtowc+0x1a>
 800c914:	2b00      	cmp	r3, #0
 800c916:	d006      	beq.n	800c926 <__ascii_mbtowc+0x1e>
 800c918:	7813      	ldrb	r3, [r2, #0]
 800c91a:	600b      	str	r3, [r1, #0]
 800c91c:	7810      	ldrb	r0, [r2, #0]
 800c91e:	1e43      	subs	r3, r0, #1
 800c920:	4198      	sbcs	r0, r3
 800c922:	b002      	add	sp, #8
 800c924:	4770      	bx	lr
 800c926:	2002      	movs	r0, #2
 800c928:	4240      	negs	r0, r0
 800c92a:	e7fa      	b.n	800c922 <__ascii_mbtowc+0x1a>

0800c92c <__malloc_lock>:
 800c92c:	b510      	push	{r4, lr}
 800c92e:	4802      	ldr	r0, [pc, #8]	@ (800c938 <__malloc_lock+0xc>)
 800c930:	f7ff fb6b 	bl	800c00a <__retarget_lock_acquire_recursive>
 800c934:	bd10      	pop	{r4, pc}
 800c936:	46c0      	nop			@ (mov r8, r8)
 800c938:	20000588 	.word	0x20000588

0800c93c <__malloc_unlock>:
 800c93c:	b510      	push	{r4, lr}
 800c93e:	4802      	ldr	r0, [pc, #8]	@ (800c948 <__malloc_unlock+0xc>)
 800c940:	f7ff fb64 	bl	800c00c <__retarget_lock_release_recursive>
 800c944:	bd10      	pop	{r4, pc}
 800c946:	46c0      	nop			@ (mov r8, r8)
 800c948:	20000588 	.word	0x20000588

0800c94c <_Balloc>:
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	69c5      	ldr	r5, [r0, #28]
 800c950:	0006      	movs	r6, r0
 800c952:	000c      	movs	r4, r1
 800c954:	2d00      	cmp	r5, #0
 800c956:	d10e      	bne.n	800c976 <_Balloc+0x2a>
 800c958:	2010      	movs	r0, #16
 800c95a:	f7ff ff29 	bl	800c7b0 <malloc>
 800c95e:	1e02      	subs	r2, r0, #0
 800c960:	61f0      	str	r0, [r6, #28]
 800c962:	d104      	bne.n	800c96e <_Balloc+0x22>
 800c964:	216b      	movs	r1, #107	@ 0x6b
 800c966:	4b19      	ldr	r3, [pc, #100]	@ (800c9cc <_Balloc+0x80>)
 800c968:	4819      	ldr	r0, [pc, #100]	@ (800c9d0 <_Balloc+0x84>)
 800c96a:	f7ff fb5f 	bl	800c02c <__assert_func>
 800c96e:	6045      	str	r5, [r0, #4]
 800c970:	6085      	str	r5, [r0, #8]
 800c972:	6005      	str	r5, [r0, #0]
 800c974:	60c5      	str	r5, [r0, #12]
 800c976:	69f5      	ldr	r5, [r6, #28]
 800c978:	68eb      	ldr	r3, [r5, #12]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d013      	beq.n	800c9a6 <_Balloc+0x5a>
 800c97e:	69f3      	ldr	r3, [r6, #28]
 800c980:	00a2      	lsls	r2, r4, #2
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	189b      	adds	r3, r3, r2
 800c986:	6818      	ldr	r0, [r3, #0]
 800c988:	2800      	cmp	r0, #0
 800c98a:	d118      	bne.n	800c9be <_Balloc+0x72>
 800c98c:	2101      	movs	r1, #1
 800c98e:	000d      	movs	r5, r1
 800c990:	40a5      	lsls	r5, r4
 800c992:	1d6a      	adds	r2, r5, #5
 800c994:	0030      	movs	r0, r6
 800c996:	0092      	lsls	r2, r2, #2
 800c998:	f001 f87a 	bl	800da90 <_calloc_r>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d00c      	beq.n	800c9ba <_Balloc+0x6e>
 800c9a0:	6044      	str	r4, [r0, #4]
 800c9a2:	6085      	str	r5, [r0, #8]
 800c9a4:	e00d      	b.n	800c9c2 <_Balloc+0x76>
 800c9a6:	2221      	movs	r2, #33	@ 0x21
 800c9a8:	2104      	movs	r1, #4
 800c9aa:	0030      	movs	r0, r6
 800c9ac:	f001 f870 	bl	800da90 <_calloc_r>
 800c9b0:	69f3      	ldr	r3, [r6, #28]
 800c9b2:	60e8      	str	r0, [r5, #12]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1e1      	bne.n	800c97e <_Balloc+0x32>
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	bd70      	pop	{r4, r5, r6, pc}
 800c9be:	6802      	ldr	r2, [r0, #0]
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	6103      	str	r3, [r0, #16]
 800c9c6:	60c3      	str	r3, [r0, #12]
 800c9c8:	e7f8      	b.n	800c9bc <_Balloc+0x70>
 800c9ca:	46c0      	nop			@ (mov r8, r8)
 800c9cc:	0800edbe 	.word	0x0800edbe
 800c9d0:	0800eee4 	.word	0x0800eee4

0800c9d4 <_Bfree>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	69c6      	ldr	r6, [r0, #28]
 800c9d8:	0005      	movs	r5, r0
 800c9da:	000c      	movs	r4, r1
 800c9dc:	2e00      	cmp	r6, #0
 800c9de:	d10e      	bne.n	800c9fe <_Bfree+0x2a>
 800c9e0:	2010      	movs	r0, #16
 800c9e2:	f7ff fee5 	bl	800c7b0 <malloc>
 800c9e6:	1e02      	subs	r2, r0, #0
 800c9e8:	61e8      	str	r0, [r5, #28]
 800c9ea:	d104      	bne.n	800c9f6 <_Bfree+0x22>
 800c9ec:	218f      	movs	r1, #143	@ 0x8f
 800c9ee:	4b09      	ldr	r3, [pc, #36]	@ (800ca14 <_Bfree+0x40>)
 800c9f0:	4809      	ldr	r0, [pc, #36]	@ (800ca18 <_Bfree+0x44>)
 800c9f2:	f7ff fb1b 	bl	800c02c <__assert_func>
 800c9f6:	6046      	str	r6, [r0, #4]
 800c9f8:	6086      	str	r6, [r0, #8]
 800c9fa:	6006      	str	r6, [r0, #0]
 800c9fc:	60c6      	str	r6, [r0, #12]
 800c9fe:	2c00      	cmp	r4, #0
 800ca00:	d007      	beq.n	800ca12 <_Bfree+0x3e>
 800ca02:	69eb      	ldr	r3, [r5, #28]
 800ca04:	6862      	ldr	r2, [r4, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	0092      	lsls	r2, r2, #2
 800ca0a:	189b      	adds	r3, r3, r2
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	6022      	str	r2, [r4, #0]
 800ca10:	601c      	str	r4, [r3, #0]
 800ca12:	bd70      	pop	{r4, r5, r6, pc}
 800ca14:	0800edbe 	.word	0x0800edbe
 800ca18:	0800eee4 	.word	0x0800eee4

0800ca1c <__multadd>:
 800ca1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca1e:	000f      	movs	r7, r1
 800ca20:	9001      	str	r0, [sp, #4]
 800ca22:	000c      	movs	r4, r1
 800ca24:	001e      	movs	r6, r3
 800ca26:	2000      	movs	r0, #0
 800ca28:	690d      	ldr	r5, [r1, #16]
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	3001      	adds	r0, #1
 800ca30:	b299      	uxth	r1, r3
 800ca32:	4351      	muls	r1, r2
 800ca34:	0c1b      	lsrs	r3, r3, #16
 800ca36:	4353      	muls	r3, r2
 800ca38:	1989      	adds	r1, r1, r6
 800ca3a:	0c0e      	lsrs	r6, r1, #16
 800ca3c:	199b      	adds	r3, r3, r6
 800ca3e:	0c1e      	lsrs	r6, r3, #16
 800ca40:	b289      	uxth	r1, r1
 800ca42:	041b      	lsls	r3, r3, #16
 800ca44:	185b      	adds	r3, r3, r1
 800ca46:	c708      	stmia	r7!, {r3}
 800ca48:	4285      	cmp	r5, r0
 800ca4a:	dcef      	bgt.n	800ca2c <__multadd+0x10>
 800ca4c:	2e00      	cmp	r6, #0
 800ca4e:	d022      	beq.n	800ca96 <__multadd+0x7a>
 800ca50:	68a3      	ldr	r3, [r4, #8]
 800ca52:	42ab      	cmp	r3, r5
 800ca54:	dc19      	bgt.n	800ca8a <__multadd+0x6e>
 800ca56:	6861      	ldr	r1, [r4, #4]
 800ca58:	9801      	ldr	r0, [sp, #4]
 800ca5a:	3101      	adds	r1, #1
 800ca5c:	f7ff ff76 	bl	800c94c <_Balloc>
 800ca60:	1e07      	subs	r7, r0, #0
 800ca62:	d105      	bne.n	800ca70 <__multadd+0x54>
 800ca64:	003a      	movs	r2, r7
 800ca66:	21ba      	movs	r1, #186	@ 0xba
 800ca68:	4b0c      	ldr	r3, [pc, #48]	@ (800ca9c <__multadd+0x80>)
 800ca6a:	480d      	ldr	r0, [pc, #52]	@ (800caa0 <__multadd+0x84>)
 800ca6c:	f7ff fade 	bl	800c02c <__assert_func>
 800ca70:	0021      	movs	r1, r4
 800ca72:	6922      	ldr	r2, [r4, #16]
 800ca74:	310c      	adds	r1, #12
 800ca76:	3202      	adds	r2, #2
 800ca78:	0092      	lsls	r2, r2, #2
 800ca7a:	300c      	adds	r0, #12
 800ca7c:	f7ff fac7 	bl	800c00e <memcpy>
 800ca80:	0021      	movs	r1, r4
 800ca82:	9801      	ldr	r0, [sp, #4]
 800ca84:	f7ff ffa6 	bl	800c9d4 <_Bfree>
 800ca88:	003c      	movs	r4, r7
 800ca8a:	1d2b      	adds	r3, r5, #4
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	18e3      	adds	r3, r4, r3
 800ca90:	3501      	adds	r5, #1
 800ca92:	605e      	str	r6, [r3, #4]
 800ca94:	6125      	str	r5, [r4, #16]
 800ca96:	0020      	movs	r0, r4
 800ca98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca9a:	46c0      	nop			@ (mov r8, r8)
 800ca9c:	0800ee73 	.word	0x0800ee73
 800caa0:	0800eee4 	.word	0x0800eee4

0800caa4 <__s2b>:
 800caa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caa6:	0007      	movs	r7, r0
 800caa8:	0018      	movs	r0, r3
 800caaa:	000c      	movs	r4, r1
 800caac:	3008      	adds	r0, #8
 800caae:	2109      	movs	r1, #9
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	0015      	movs	r5, r2
 800cab4:	f7f3 fbd6 	bl	8000264 <__divsi3>
 800cab8:	2301      	movs	r3, #1
 800caba:	2100      	movs	r1, #0
 800cabc:	4283      	cmp	r3, r0
 800cabe:	db0a      	blt.n	800cad6 <__s2b+0x32>
 800cac0:	0038      	movs	r0, r7
 800cac2:	f7ff ff43 	bl	800c94c <_Balloc>
 800cac6:	1e01      	subs	r1, r0, #0
 800cac8:	d108      	bne.n	800cadc <__s2b+0x38>
 800caca:	000a      	movs	r2, r1
 800cacc:	4b19      	ldr	r3, [pc, #100]	@ (800cb34 <__s2b+0x90>)
 800cace:	481a      	ldr	r0, [pc, #104]	@ (800cb38 <__s2b+0x94>)
 800cad0:	31d3      	adds	r1, #211	@ 0xd3
 800cad2:	f7ff faab 	bl	800c02c <__assert_func>
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	3101      	adds	r1, #1
 800cada:	e7ef      	b.n	800cabc <__s2b+0x18>
 800cadc:	9b08      	ldr	r3, [sp, #32]
 800cade:	6143      	str	r3, [r0, #20]
 800cae0:	2301      	movs	r3, #1
 800cae2:	6103      	str	r3, [r0, #16]
 800cae4:	2d09      	cmp	r5, #9
 800cae6:	dd18      	ble.n	800cb1a <__s2b+0x76>
 800cae8:	0023      	movs	r3, r4
 800caea:	3309      	adds	r3, #9
 800caec:	001e      	movs	r6, r3
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	1964      	adds	r4, r4, r5
 800caf2:	7833      	ldrb	r3, [r6, #0]
 800caf4:	220a      	movs	r2, #10
 800caf6:	0038      	movs	r0, r7
 800caf8:	3b30      	subs	r3, #48	@ 0x30
 800cafa:	f7ff ff8f 	bl	800ca1c <__multadd>
 800cafe:	3601      	adds	r6, #1
 800cb00:	0001      	movs	r1, r0
 800cb02:	42a6      	cmp	r6, r4
 800cb04:	d1f5      	bne.n	800caf2 <__s2b+0x4e>
 800cb06:	002c      	movs	r4, r5
 800cb08:	9b00      	ldr	r3, [sp, #0]
 800cb0a:	3c08      	subs	r4, #8
 800cb0c:	191c      	adds	r4, r3, r4
 800cb0e:	002e      	movs	r6, r5
 800cb10:	9b01      	ldr	r3, [sp, #4]
 800cb12:	429e      	cmp	r6, r3
 800cb14:	db04      	blt.n	800cb20 <__s2b+0x7c>
 800cb16:	0008      	movs	r0, r1
 800cb18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb1a:	2509      	movs	r5, #9
 800cb1c:	340a      	adds	r4, #10
 800cb1e:	e7f6      	b.n	800cb0e <__s2b+0x6a>
 800cb20:	1b63      	subs	r3, r4, r5
 800cb22:	5d9b      	ldrb	r3, [r3, r6]
 800cb24:	220a      	movs	r2, #10
 800cb26:	0038      	movs	r0, r7
 800cb28:	3b30      	subs	r3, #48	@ 0x30
 800cb2a:	f7ff ff77 	bl	800ca1c <__multadd>
 800cb2e:	3601      	adds	r6, #1
 800cb30:	0001      	movs	r1, r0
 800cb32:	e7ed      	b.n	800cb10 <__s2b+0x6c>
 800cb34:	0800ee73 	.word	0x0800ee73
 800cb38:	0800eee4 	.word	0x0800eee4

0800cb3c <__hi0bits>:
 800cb3c:	2280      	movs	r2, #128	@ 0x80
 800cb3e:	0003      	movs	r3, r0
 800cb40:	0252      	lsls	r2, r2, #9
 800cb42:	2000      	movs	r0, #0
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d201      	bcs.n	800cb4c <__hi0bits+0x10>
 800cb48:	041b      	lsls	r3, r3, #16
 800cb4a:	3010      	adds	r0, #16
 800cb4c:	2280      	movs	r2, #128	@ 0x80
 800cb4e:	0452      	lsls	r2, r2, #17
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d201      	bcs.n	800cb58 <__hi0bits+0x1c>
 800cb54:	3008      	adds	r0, #8
 800cb56:	021b      	lsls	r3, r3, #8
 800cb58:	2280      	movs	r2, #128	@ 0x80
 800cb5a:	0552      	lsls	r2, r2, #21
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d201      	bcs.n	800cb64 <__hi0bits+0x28>
 800cb60:	3004      	adds	r0, #4
 800cb62:	011b      	lsls	r3, r3, #4
 800cb64:	2280      	movs	r2, #128	@ 0x80
 800cb66:	05d2      	lsls	r2, r2, #23
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d201      	bcs.n	800cb70 <__hi0bits+0x34>
 800cb6c:	3002      	adds	r0, #2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	db03      	blt.n	800cb7c <__hi0bits+0x40>
 800cb74:	3001      	adds	r0, #1
 800cb76:	4213      	tst	r3, r2
 800cb78:	d100      	bne.n	800cb7c <__hi0bits+0x40>
 800cb7a:	2020      	movs	r0, #32
 800cb7c:	4770      	bx	lr

0800cb7e <__lo0bits>:
 800cb7e:	6803      	ldr	r3, [r0, #0]
 800cb80:	0001      	movs	r1, r0
 800cb82:	2207      	movs	r2, #7
 800cb84:	0018      	movs	r0, r3
 800cb86:	4010      	ands	r0, r2
 800cb88:	4213      	tst	r3, r2
 800cb8a:	d00d      	beq.n	800cba8 <__lo0bits+0x2a>
 800cb8c:	3a06      	subs	r2, #6
 800cb8e:	2000      	movs	r0, #0
 800cb90:	4213      	tst	r3, r2
 800cb92:	d105      	bne.n	800cba0 <__lo0bits+0x22>
 800cb94:	3002      	adds	r0, #2
 800cb96:	4203      	tst	r3, r0
 800cb98:	d003      	beq.n	800cba2 <__lo0bits+0x24>
 800cb9a:	40d3      	lsrs	r3, r2
 800cb9c:	0010      	movs	r0, r2
 800cb9e:	600b      	str	r3, [r1, #0]
 800cba0:	4770      	bx	lr
 800cba2:	089b      	lsrs	r3, r3, #2
 800cba4:	600b      	str	r3, [r1, #0]
 800cba6:	e7fb      	b.n	800cba0 <__lo0bits+0x22>
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	2a00      	cmp	r2, #0
 800cbac:	d101      	bne.n	800cbb2 <__lo0bits+0x34>
 800cbae:	2010      	movs	r0, #16
 800cbb0:	0c1b      	lsrs	r3, r3, #16
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	2a00      	cmp	r2, #0
 800cbb6:	d101      	bne.n	800cbbc <__lo0bits+0x3e>
 800cbb8:	3008      	adds	r0, #8
 800cbba:	0a1b      	lsrs	r3, r3, #8
 800cbbc:	071a      	lsls	r2, r3, #28
 800cbbe:	d101      	bne.n	800cbc4 <__lo0bits+0x46>
 800cbc0:	3004      	adds	r0, #4
 800cbc2:	091b      	lsrs	r3, r3, #4
 800cbc4:	079a      	lsls	r2, r3, #30
 800cbc6:	d101      	bne.n	800cbcc <__lo0bits+0x4e>
 800cbc8:	3002      	adds	r0, #2
 800cbca:	089b      	lsrs	r3, r3, #2
 800cbcc:	07da      	lsls	r2, r3, #31
 800cbce:	d4e9      	bmi.n	800cba4 <__lo0bits+0x26>
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	085b      	lsrs	r3, r3, #1
 800cbd4:	d1e6      	bne.n	800cba4 <__lo0bits+0x26>
 800cbd6:	2020      	movs	r0, #32
 800cbd8:	e7e2      	b.n	800cba0 <__lo0bits+0x22>
	...

0800cbdc <__i2b>:
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	000c      	movs	r4, r1
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	f7ff feb3 	bl	800c94c <_Balloc>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d107      	bne.n	800cbfa <__i2b+0x1e>
 800cbea:	2146      	movs	r1, #70	@ 0x46
 800cbec:	4c05      	ldr	r4, [pc, #20]	@ (800cc04 <__i2b+0x28>)
 800cbee:	0002      	movs	r2, r0
 800cbf0:	4b05      	ldr	r3, [pc, #20]	@ (800cc08 <__i2b+0x2c>)
 800cbf2:	0020      	movs	r0, r4
 800cbf4:	31ff      	adds	r1, #255	@ 0xff
 800cbf6:	f7ff fa19 	bl	800c02c <__assert_func>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	6144      	str	r4, [r0, #20]
 800cbfe:	6103      	str	r3, [r0, #16]
 800cc00:	bd10      	pop	{r4, pc}
 800cc02:	46c0      	nop			@ (mov r8, r8)
 800cc04:	0800eee4 	.word	0x0800eee4
 800cc08:	0800ee73 	.word	0x0800ee73

0800cc0c <__multiply>:
 800cc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0e:	0014      	movs	r4, r2
 800cc10:	690a      	ldr	r2, [r1, #16]
 800cc12:	6923      	ldr	r3, [r4, #16]
 800cc14:	000d      	movs	r5, r1
 800cc16:	b089      	sub	sp, #36	@ 0x24
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	db02      	blt.n	800cc22 <__multiply+0x16>
 800cc1c:	0023      	movs	r3, r4
 800cc1e:	000c      	movs	r4, r1
 800cc20:	001d      	movs	r5, r3
 800cc22:	6927      	ldr	r7, [r4, #16]
 800cc24:	692e      	ldr	r6, [r5, #16]
 800cc26:	6861      	ldr	r1, [r4, #4]
 800cc28:	19bb      	adds	r3, r7, r6
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	68a3      	ldr	r3, [r4, #8]
 800cc2e:	19ba      	adds	r2, r7, r6
 800cc30:	4293      	cmp	r3, r2
 800cc32:	da00      	bge.n	800cc36 <__multiply+0x2a>
 800cc34:	3101      	adds	r1, #1
 800cc36:	f7ff fe89 	bl	800c94c <_Balloc>
 800cc3a:	4684      	mov	ip, r0
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d106      	bne.n	800cc4e <__multiply+0x42>
 800cc40:	21b1      	movs	r1, #177	@ 0xb1
 800cc42:	4662      	mov	r2, ip
 800cc44:	4b44      	ldr	r3, [pc, #272]	@ (800cd58 <__multiply+0x14c>)
 800cc46:	4845      	ldr	r0, [pc, #276]	@ (800cd5c <__multiply+0x150>)
 800cc48:	0049      	lsls	r1, r1, #1
 800cc4a:	f7ff f9ef 	bl	800c02c <__assert_func>
 800cc4e:	0002      	movs	r2, r0
 800cc50:	19bb      	adds	r3, r7, r6
 800cc52:	3214      	adds	r2, #20
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	18d3      	adds	r3, r2, r3
 800cc58:	9301      	str	r3, [sp, #4]
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	0013      	movs	r3, r2
 800cc5e:	9801      	ldr	r0, [sp, #4]
 800cc60:	4283      	cmp	r3, r0
 800cc62:	d328      	bcc.n	800ccb6 <__multiply+0xaa>
 800cc64:	0023      	movs	r3, r4
 800cc66:	00bf      	lsls	r7, r7, #2
 800cc68:	3314      	adds	r3, #20
 800cc6a:	9304      	str	r3, [sp, #16]
 800cc6c:	3514      	adds	r5, #20
 800cc6e:	19db      	adds	r3, r3, r7
 800cc70:	00b6      	lsls	r6, r6, #2
 800cc72:	9302      	str	r3, [sp, #8]
 800cc74:	19ab      	adds	r3, r5, r6
 800cc76:	9307      	str	r3, [sp, #28]
 800cc78:	2304      	movs	r3, #4
 800cc7a:	9305      	str	r3, [sp, #20]
 800cc7c:	0023      	movs	r3, r4
 800cc7e:	9902      	ldr	r1, [sp, #8]
 800cc80:	3315      	adds	r3, #21
 800cc82:	4299      	cmp	r1, r3
 800cc84:	d305      	bcc.n	800cc92 <__multiply+0x86>
 800cc86:	1b0c      	subs	r4, r1, r4
 800cc88:	3c15      	subs	r4, #21
 800cc8a:	08a4      	lsrs	r4, r4, #2
 800cc8c:	3401      	adds	r4, #1
 800cc8e:	00a3      	lsls	r3, r4, #2
 800cc90:	9305      	str	r3, [sp, #20]
 800cc92:	9b07      	ldr	r3, [sp, #28]
 800cc94:	429d      	cmp	r5, r3
 800cc96:	d310      	bcc.n	800ccba <__multiply+0xae>
 800cc98:	9b00      	ldr	r3, [sp, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	dd05      	ble.n	800ccaa <__multiply+0x9e>
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	3b04      	subs	r3, #4
 800cca2:	9301      	str	r3, [sp, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d052      	beq.n	800cd50 <__multiply+0x144>
 800ccaa:	4663      	mov	r3, ip
 800ccac:	4660      	mov	r0, ip
 800ccae:	9a00      	ldr	r2, [sp, #0]
 800ccb0:	611a      	str	r2, [r3, #16]
 800ccb2:	b009      	add	sp, #36	@ 0x24
 800ccb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb6:	c302      	stmia	r3!, {r1}
 800ccb8:	e7d1      	b.n	800cc5e <__multiply+0x52>
 800ccba:	682c      	ldr	r4, [r5, #0]
 800ccbc:	b2a4      	uxth	r4, r4
 800ccbe:	2c00      	cmp	r4, #0
 800ccc0:	d01f      	beq.n	800cd02 <__multiply+0xf6>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	0017      	movs	r7, r2
 800ccc6:	9e04      	ldr	r6, [sp, #16]
 800ccc8:	9303      	str	r3, [sp, #12]
 800ccca:	ce08      	ldmia	r6!, {r3}
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	9306      	str	r3, [sp, #24]
 800ccd0:	466b      	mov	r3, sp
 800ccd2:	8b1b      	ldrh	r3, [r3, #24]
 800ccd4:	b288      	uxth	r0, r1
 800ccd6:	4363      	muls	r3, r4
 800ccd8:	181b      	adds	r3, r3, r0
 800ccda:	9803      	ldr	r0, [sp, #12]
 800ccdc:	0c09      	lsrs	r1, r1, #16
 800ccde:	181b      	adds	r3, r3, r0
 800cce0:	9806      	ldr	r0, [sp, #24]
 800cce2:	0c00      	lsrs	r0, r0, #16
 800cce4:	4360      	muls	r0, r4
 800cce6:	1840      	adds	r0, r0, r1
 800cce8:	0c19      	lsrs	r1, r3, #16
 800ccea:	1841      	adds	r1, r0, r1
 800ccec:	0c08      	lsrs	r0, r1, #16
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	0409      	lsls	r1, r1, #16
 800ccf2:	4319      	orrs	r1, r3
 800ccf4:	9b02      	ldr	r3, [sp, #8]
 800ccf6:	9003      	str	r0, [sp, #12]
 800ccf8:	c702      	stmia	r7!, {r1}
 800ccfa:	42b3      	cmp	r3, r6
 800ccfc:	d8e5      	bhi.n	800ccca <__multiply+0xbe>
 800ccfe:	9b05      	ldr	r3, [sp, #20]
 800cd00:	50d0      	str	r0, [r2, r3]
 800cd02:	682c      	ldr	r4, [r5, #0]
 800cd04:	0c24      	lsrs	r4, r4, #16
 800cd06:	d020      	beq.n	800cd4a <__multiply+0x13e>
 800cd08:	2100      	movs	r1, #0
 800cd0a:	0010      	movs	r0, r2
 800cd0c:	6813      	ldr	r3, [r2, #0]
 800cd0e:	9e04      	ldr	r6, [sp, #16]
 800cd10:	9103      	str	r1, [sp, #12]
 800cd12:	6831      	ldr	r1, [r6, #0]
 800cd14:	6807      	ldr	r7, [r0, #0]
 800cd16:	b289      	uxth	r1, r1
 800cd18:	4361      	muls	r1, r4
 800cd1a:	0c3f      	lsrs	r7, r7, #16
 800cd1c:	19c9      	adds	r1, r1, r7
 800cd1e:	9f03      	ldr	r7, [sp, #12]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	19c9      	adds	r1, r1, r7
 800cd24:	040f      	lsls	r7, r1, #16
 800cd26:	431f      	orrs	r7, r3
 800cd28:	6007      	str	r7, [r0, #0]
 800cd2a:	ce80      	ldmia	r6!, {r7}
 800cd2c:	6843      	ldr	r3, [r0, #4]
 800cd2e:	0c3f      	lsrs	r7, r7, #16
 800cd30:	4367      	muls	r7, r4
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	0c09      	lsrs	r1, r1, #16
 800cd36:	18fb      	adds	r3, r7, r3
 800cd38:	185b      	adds	r3, r3, r1
 800cd3a:	0c19      	lsrs	r1, r3, #16
 800cd3c:	9103      	str	r1, [sp, #12]
 800cd3e:	9902      	ldr	r1, [sp, #8]
 800cd40:	3004      	adds	r0, #4
 800cd42:	42b1      	cmp	r1, r6
 800cd44:	d8e5      	bhi.n	800cd12 <__multiply+0x106>
 800cd46:	9905      	ldr	r1, [sp, #20]
 800cd48:	5053      	str	r3, [r2, r1]
 800cd4a:	3504      	adds	r5, #4
 800cd4c:	3204      	adds	r2, #4
 800cd4e:	e7a0      	b.n	800cc92 <__multiply+0x86>
 800cd50:	9b00      	ldr	r3, [sp, #0]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	e79f      	b.n	800cc98 <__multiply+0x8c>
 800cd58:	0800ee73 	.word	0x0800ee73
 800cd5c:	0800eee4 	.word	0x0800eee4

0800cd60 <__pow5mult>:
 800cd60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd62:	2303      	movs	r3, #3
 800cd64:	0015      	movs	r5, r2
 800cd66:	0007      	movs	r7, r0
 800cd68:	000e      	movs	r6, r1
 800cd6a:	401a      	ands	r2, r3
 800cd6c:	421d      	tst	r5, r3
 800cd6e:	d008      	beq.n	800cd82 <__pow5mult+0x22>
 800cd70:	4925      	ldr	r1, [pc, #148]	@ (800ce08 <__pow5mult+0xa8>)
 800cd72:	3a01      	subs	r2, #1
 800cd74:	0092      	lsls	r2, r2, #2
 800cd76:	5852      	ldr	r2, [r2, r1]
 800cd78:	2300      	movs	r3, #0
 800cd7a:	0031      	movs	r1, r6
 800cd7c:	f7ff fe4e 	bl	800ca1c <__multadd>
 800cd80:	0006      	movs	r6, r0
 800cd82:	10ad      	asrs	r5, r5, #2
 800cd84:	d03d      	beq.n	800ce02 <__pow5mult+0xa2>
 800cd86:	69fc      	ldr	r4, [r7, #28]
 800cd88:	2c00      	cmp	r4, #0
 800cd8a:	d10f      	bne.n	800cdac <__pow5mult+0x4c>
 800cd8c:	2010      	movs	r0, #16
 800cd8e:	f7ff fd0f 	bl	800c7b0 <malloc>
 800cd92:	1e02      	subs	r2, r0, #0
 800cd94:	61f8      	str	r0, [r7, #28]
 800cd96:	d105      	bne.n	800cda4 <__pow5mult+0x44>
 800cd98:	21b4      	movs	r1, #180	@ 0xb4
 800cd9a:	4b1c      	ldr	r3, [pc, #112]	@ (800ce0c <__pow5mult+0xac>)
 800cd9c:	481c      	ldr	r0, [pc, #112]	@ (800ce10 <__pow5mult+0xb0>)
 800cd9e:	31ff      	adds	r1, #255	@ 0xff
 800cda0:	f7ff f944 	bl	800c02c <__assert_func>
 800cda4:	6044      	str	r4, [r0, #4]
 800cda6:	6084      	str	r4, [r0, #8]
 800cda8:	6004      	str	r4, [r0, #0]
 800cdaa:	60c4      	str	r4, [r0, #12]
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	689c      	ldr	r4, [r3, #8]
 800cdb0:	9301      	str	r3, [sp, #4]
 800cdb2:	2c00      	cmp	r4, #0
 800cdb4:	d108      	bne.n	800cdc8 <__pow5mult+0x68>
 800cdb6:	0038      	movs	r0, r7
 800cdb8:	4916      	ldr	r1, [pc, #88]	@ (800ce14 <__pow5mult+0xb4>)
 800cdba:	f7ff ff0f 	bl	800cbdc <__i2b>
 800cdbe:	9b01      	ldr	r3, [sp, #4]
 800cdc0:	0004      	movs	r4, r0
 800cdc2:	6098      	str	r0, [r3, #8]
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	6003      	str	r3, [r0, #0]
 800cdc8:	2301      	movs	r3, #1
 800cdca:	421d      	tst	r5, r3
 800cdcc:	d00a      	beq.n	800cde4 <__pow5mult+0x84>
 800cdce:	0031      	movs	r1, r6
 800cdd0:	0022      	movs	r2, r4
 800cdd2:	0038      	movs	r0, r7
 800cdd4:	f7ff ff1a 	bl	800cc0c <__multiply>
 800cdd8:	0031      	movs	r1, r6
 800cdda:	9001      	str	r0, [sp, #4]
 800cddc:	0038      	movs	r0, r7
 800cdde:	f7ff fdf9 	bl	800c9d4 <_Bfree>
 800cde2:	9e01      	ldr	r6, [sp, #4]
 800cde4:	106d      	asrs	r5, r5, #1
 800cde6:	d00c      	beq.n	800ce02 <__pow5mult+0xa2>
 800cde8:	6820      	ldr	r0, [r4, #0]
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d107      	bne.n	800cdfe <__pow5mult+0x9e>
 800cdee:	0022      	movs	r2, r4
 800cdf0:	0021      	movs	r1, r4
 800cdf2:	0038      	movs	r0, r7
 800cdf4:	f7ff ff0a 	bl	800cc0c <__multiply>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	6020      	str	r0, [r4, #0]
 800cdfc:	6003      	str	r3, [r0, #0]
 800cdfe:	0004      	movs	r4, r0
 800ce00:	e7e2      	b.n	800cdc8 <__pow5mult+0x68>
 800ce02:	0030      	movs	r0, r6
 800ce04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce06:	46c0      	nop			@ (mov r8, r8)
 800ce08:	0800efc0 	.word	0x0800efc0
 800ce0c:	0800edbe 	.word	0x0800edbe
 800ce10:	0800eee4 	.word	0x0800eee4
 800ce14:	00000271 	.word	0x00000271

0800ce18 <__lshift>:
 800ce18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce1a:	000c      	movs	r4, r1
 800ce1c:	0016      	movs	r6, r2
 800ce1e:	6923      	ldr	r3, [r4, #16]
 800ce20:	1157      	asrs	r7, r2, #5
 800ce22:	b085      	sub	sp, #20
 800ce24:	18fb      	adds	r3, r7, r3
 800ce26:	9301      	str	r3, [sp, #4]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	6849      	ldr	r1, [r1, #4]
 800ce2e:	68a3      	ldr	r3, [r4, #8]
 800ce30:	9002      	str	r0, [sp, #8]
 800ce32:	9a00      	ldr	r2, [sp, #0]
 800ce34:	4293      	cmp	r3, r2
 800ce36:	db10      	blt.n	800ce5a <__lshift+0x42>
 800ce38:	9802      	ldr	r0, [sp, #8]
 800ce3a:	f7ff fd87 	bl	800c94c <_Balloc>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	0001      	movs	r1, r0
 800ce42:	0005      	movs	r5, r0
 800ce44:	001a      	movs	r2, r3
 800ce46:	3114      	adds	r1, #20
 800ce48:	4298      	cmp	r0, r3
 800ce4a:	d10c      	bne.n	800ce66 <__lshift+0x4e>
 800ce4c:	21ef      	movs	r1, #239	@ 0xef
 800ce4e:	002a      	movs	r2, r5
 800ce50:	4b25      	ldr	r3, [pc, #148]	@ (800cee8 <__lshift+0xd0>)
 800ce52:	4826      	ldr	r0, [pc, #152]	@ (800ceec <__lshift+0xd4>)
 800ce54:	0049      	lsls	r1, r1, #1
 800ce56:	f7ff f8e9 	bl	800c02c <__assert_func>
 800ce5a:	3101      	adds	r1, #1
 800ce5c:	005b      	lsls	r3, r3, #1
 800ce5e:	e7e8      	b.n	800ce32 <__lshift+0x1a>
 800ce60:	0098      	lsls	r0, r3, #2
 800ce62:	500a      	str	r2, [r1, r0]
 800ce64:	3301      	adds	r3, #1
 800ce66:	42bb      	cmp	r3, r7
 800ce68:	dbfa      	blt.n	800ce60 <__lshift+0x48>
 800ce6a:	43fb      	mvns	r3, r7
 800ce6c:	17db      	asrs	r3, r3, #31
 800ce6e:	401f      	ands	r7, r3
 800ce70:	00bf      	lsls	r7, r7, #2
 800ce72:	0023      	movs	r3, r4
 800ce74:	201f      	movs	r0, #31
 800ce76:	19c9      	adds	r1, r1, r7
 800ce78:	0037      	movs	r7, r6
 800ce7a:	6922      	ldr	r2, [r4, #16]
 800ce7c:	3314      	adds	r3, #20
 800ce7e:	0092      	lsls	r2, r2, #2
 800ce80:	189a      	adds	r2, r3, r2
 800ce82:	4007      	ands	r7, r0
 800ce84:	4206      	tst	r6, r0
 800ce86:	d029      	beq.n	800cedc <__lshift+0xc4>
 800ce88:	3001      	adds	r0, #1
 800ce8a:	1bc0      	subs	r0, r0, r7
 800ce8c:	9003      	str	r0, [sp, #12]
 800ce8e:	468c      	mov	ip, r1
 800ce90:	2000      	movs	r0, #0
 800ce92:	681e      	ldr	r6, [r3, #0]
 800ce94:	40be      	lsls	r6, r7
 800ce96:	4306      	orrs	r6, r0
 800ce98:	4660      	mov	r0, ip
 800ce9a:	c040      	stmia	r0!, {r6}
 800ce9c:	4684      	mov	ip, r0
 800ce9e:	9e03      	ldr	r6, [sp, #12]
 800cea0:	cb01      	ldmia	r3!, {r0}
 800cea2:	40f0      	lsrs	r0, r6
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d8f4      	bhi.n	800ce92 <__lshift+0x7a>
 800cea8:	0026      	movs	r6, r4
 800ceaa:	3615      	adds	r6, #21
 800ceac:	2304      	movs	r3, #4
 800ceae:	42b2      	cmp	r2, r6
 800ceb0:	d304      	bcc.n	800cebc <__lshift+0xa4>
 800ceb2:	1b13      	subs	r3, r2, r4
 800ceb4:	3b15      	subs	r3, #21
 800ceb6:	089b      	lsrs	r3, r3, #2
 800ceb8:	3301      	adds	r3, #1
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	50c8      	str	r0, [r1, r3]
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d002      	beq.n	800cec8 <__lshift+0xb0>
 800cec2:	9b01      	ldr	r3, [sp, #4]
 800cec4:	3302      	adds	r3, #2
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	9b00      	ldr	r3, [sp, #0]
 800ceca:	9802      	ldr	r0, [sp, #8]
 800cecc:	3b01      	subs	r3, #1
 800cece:	0021      	movs	r1, r4
 800ced0:	612b      	str	r3, [r5, #16]
 800ced2:	f7ff fd7f 	bl	800c9d4 <_Bfree>
 800ced6:	0028      	movs	r0, r5
 800ced8:	b005      	add	sp, #20
 800ceda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cedc:	cb01      	ldmia	r3!, {r0}
 800cede:	c101      	stmia	r1!, {r0}
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d8fb      	bhi.n	800cedc <__lshift+0xc4>
 800cee4:	e7f0      	b.n	800cec8 <__lshift+0xb0>
 800cee6:	46c0      	nop			@ (mov r8, r8)
 800cee8:	0800ee73 	.word	0x0800ee73
 800ceec:	0800eee4 	.word	0x0800eee4

0800cef0 <__mcmp>:
 800cef0:	b530      	push	{r4, r5, lr}
 800cef2:	690b      	ldr	r3, [r1, #16]
 800cef4:	6904      	ldr	r4, [r0, #16]
 800cef6:	0002      	movs	r2, r0
 800cef8:	1ae0      	subs	r0, r4, r3
 800cefa:	429c      	cmp	r4, r3
 800cefc:	d10f      	bne.n	800cf1e <__mcmp+0x2e>
 800cefe:	3214      	adds	r2, #20
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	3114      	adds	r1, #20
 800cf04:	0014      	movs	r4, r2
 800cf06:	18c9      	adds	r1, r1, r3
 800cf08:	18d2      	adds	r2, r2, r3
 800cf0a:	3a04      	subs	r2, #4
 800cf0c:	3904      	subs	r1, #4
 800cf0e:	6815      	ldr	r5, [r2, #0]
 800cf10:	680b      	ldr	r3, [r1, #0]
 800cf12:	429d      	cmp	r5, r3
 800cf14:	d004      	beq.n	800cf20 <__mcmp+0x30>
 800cf16:	2001      	movs	r0, #1
 800cf18:	429d      	cmp	r5, r3
 800cf1a:	d200      	bcs.n	800cf1e <__mcmp+0x2e>
 800cf1c:	3802      	subs	r0, #2
 800cf1e:	bd30      	pop	{r4, r5, pc}
 800cf20:	4294      	cmp	r4, r2
 800cf22:	d3f2      	bcc.n	800cf0a <__mcmp+0x1a>
 800cf24:	e7fb      	b.n	800cf1e <__mcmp+0x2e>
	...

0800cf28 <__mdiff>:
 800cf28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf2a:	000c      	movs	r4, r1
 800cf2c:	b087      	sub	sp, #28
 800cf2e:	9000      	str	r0, [sp, #0]
 800cf30:	0011      	movs	r1, r2
 800cf32:	0020      	movs	r0, r4
 800cf34:	0017      	movs	r7, r2
 800cf36:	f7ff ffdb 	bl	800cef0 <__mcmp>
 800cf3a:	1e05      	subs	r5, r0, #0
 800cf3c:	d110      	bne.n	800cf60 <__mdiff+0x38>
 800cf3e:	0001      	movs	r1, r0
 800cf40:	9800      	ldr	r0, [sp, #0]
 800cf42:	f7ff fd03 	bl	800c94c <_Balloc>
 800cf46:	1e02      	subs	r2, r0, #0
 800cf48:	d104      	bne.n	800cf54 <__mdiff+0x2c>
 800cf4a:	4b40      	ldr	r3, [pc, #256]	@ (800d04c <__mdiff+0x124>)
 800cf4c:	4840      	ldr	r0, [pc, #256]	@ (800d050 <__mdiff+0x128>)
 800cf4e:	4941      	ldr	r1, [pc, #260]	@ (800d054 <__mdiff+0x12c>)
 800cf50:	f7ff f86c 	bl	800c02c <__assert_func>
 800cf54:	2301      	movs	r3, #1
 800cf56:	6145      	str	r5, [r0, #20]
 800cf58:	6103      	str	r3, [r0, #16]
 800cf5a:	0010      	movs	r0, r2
 800cf5c:	b007      	add	sp, #28
 800cf5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf60:	2600      	movs	r6, #0
 800cf62:	42b0      	cmp	r0, r6
 800cf64:	da03      	bge.n	800cf6e <__mdiff+0x46>
 800cf66:	0023      	movs	r3, r4
 800cf68:	003c      	movs	r4, r7
 800cf6a:	001f      	movs	r7, r3
 800cf6c:	3601      	adds	r6, #1
 800cf6e:	6861      	ldr	r1, [r4, #4]
 800cf70:	9800      	ldr	r0, [sp, #0]
 800cf72:	f7ff fceb 	bl	800c94c <_Balloc>
 800cf76:	1e02      	subs	r2, r0, #0
 800cf78:	d103      	bne.n	800cf82 <__mdiff+0x5a>
 800cf7a:	4b34      	ldr	r3, [pc, #208]	@ (800d04c <__mdiff+0x124>)
 800cf7c:	4834      	ldr	r0, [pc, #208]	@ (800d050 <__mdiff+0x128>)
 800cf7e:	4936      	ldr	r1, [pc, #216]	@ (800d058 <__mdiff+0x130>)
 800cf80:	e7e6      	b.n	800cf50 <__mdiff+0x28>
 800cf82:	6923      	ldr	r3, [r4, #16]
 800cf84:	3414      	adds	r4, #20
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	18e3      	adds	r3, r4, r3
 800cf8c:	0021      	movs	r1, r4
 800cf8e:	9401      	str	r4, [sp, #4]
 800cf90:	003c      	movs	r4, r7
 800cf92:	9302      	str	r3, [sp, #8]
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	3414      	adds	r4, #20
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	18e3      	adds	r3, r4, r3
 800cf9c:	9303      	str	r3, [sp, #12]
 800cf9e:	0003      	movs	r3, r0
 800cfa0:	60c6      	str	r6, [r0, #12]
 800cfa2:	468c      	mov	ip, r1
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	3314      	adds	r3, #20
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	9305      	str	r3, [sp, #20]
 800cfac:	4663      	mov	r3, ip
 800cfae:	cb20      	ldmia	r3!, {r5}
 800cfb0:	b2a9      	uxth	r1, r5
 800cfb2:	000e      	movs	r6, r1
 800cfb4:	469c      	mov	ip, r3
 800cfb6:	cc08      	ldmia	r4!, {r3}
 800cfb8:	0c2d      	lsrs	r5, r5, #16
 800cfba:	b299      	uxth	r1, r3
 800cfbc:	1a71      	subs	r1, r6, r1
 800cfbe:	1809      	adds	r1, r1, r0
 800cfc0:	0c1b      	lsrs	r3, r3, #16
 800cfc2:	1408      	asrs	r0, r1, #16
 800cfc4:	1aeb      	subs	r3, r5, r3
 800cfc6:	181b      	adds	r3, r3, r0
 800cfc8:	1418      	asrs	r0, r3, #16
 800cfca:	b289      	uxth	r1, r1
 800cfcc:	041b      	lsls	r3, r3, #16
 800cfce:	4319      	orrs	r1, r3
 800cfd0:	9b05      	ldr	r3, [sp, #20]
 800cfd2:	c302      	stmia	r3!, {r1}
 800cfd4:	9305      	str	r3, [sp, #20]
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	42a3      	cmp	r3, r4
 800cfda:	d8e7      	bhi.n	800cfac <__mdiff+0x84>
 800cfdc:	0039      	movs	r1, r7
 800cfde:	9c03      	ldr	r4, [sp, #12]
 800cfe0:	3115      	adds	r1, #21
 800cfe2:	2304      	movs	r3, #4
 800cfe4:	428c      	cmp	r4, r1
 800cfe6:	d304      	bcc.n	800cff2 <__mdiff+0xca>
 800cfe8:	1be3      	subs	r3, r4, r7
 800cfea:	3b15      	subs	r3, #21
 800cfec:	089b      	lsrs	r3, r3, #2
 800cfee:	3301      	adds	r3, #1
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	9901      	ldr	r1, [sp, #4]
 800cff4:	18cd      	adds	r5, r1, r3
 800cff6:	9904      	ldr	r1, [sp, #16]
 800cff8:	002e      	movs	r6, r5
 800cffa:	18cb      	adds	r3, r1, r3
 800cffc:	001f      	movs	r7, r3
 800cffe:	9902      	ldr	r1, [sp, #8]
 800d000:	428e      	cmp	r6, r1
 800d002:	d311      	bcc.n	800d028 <__mdiff+0x100>
 800d004:	9c02      	ldr	r4, [sp, #8]
 800d006:	1ee9      	subs	r1, r5, #3
 800d008:	2000      	movs	r0, #0
 800d00a:	428c      	cmp	r4, r1
 800d00c:	d304      	bcc.n	800d018 <__mdiff+0xf0>
 800d00e:	0021      	movs	r1, r4
 800d010:	3103      	adds	r1, #3
 800d012:	1b49      	subs	r1, r1, r5
 800d014:	0889      	lsrs	r1, r1, #2
 800d016:	0088      	lsls	r0, r1, #2
 800d018:	181b      	adds	r3, r3, r0
 800d01a:	3b04      	subs	r3, #4
 800d01c:	6819      	ldr	r1, [r3, #0]
 800d01e:	2900      	cmp	r1, #0
 800d020:	d010      	beq.n	800d044 <__mdiff+0x11c>
 800d022:	9b00      	ldr	r3, [sp, #0]
 800d024:	6113      	str	r3, [r2, #16]
 800d026:	e798      	b.n	800cf5a <__mdiff+0x32>
 800d028:	4684      	mov	ip, r0
 800d02a:	ce02      	ldmia	r6!, {r1}
 800d02c:	b288      	uxth	r0, r1
 800d02e:	4460      	add	r0, ip
 800d030:	1400      	asrs	r0, r0, #16
 800d032:	0c0c      	lsrs	r4, r1, #16
 800d034:	1904      	adds	r4, r0, r4
 800d036:	4461      	add	r1, ip
 800d038:	1420      	asrs	r0, r4, #16
 800d03a:	b289      	uxth	r1, r1
 800d03c:	0424      	lsls	r4, r4, #16
 800d03e:	4321      	orrs	r1, r4
 800d040:	c702      	stmia	r7!, {r1}
 800d042:	e7dc      	b.n	800cffe <__mdiff+0xd6>
 800d044:	9900      	ldr	r1, [sp, #0]
 800d046:	3901      	subs	r1, #1
 800d048:	9100      	str	r1, [sp, #0]
 800d04a:	e7e6      	b.n	800d01a <__mdiff+0xf2>
 800d04c:	0800ee73 	.word	0x0800ee73
 800d050:	0800eee4 	.word	0x0800eee4
 800d054:	00000237 	.word	0x00000237
 800d058:	00000245 	.word	0x00000245

0800d05c <__ulp>:
 800d05c:	b510      	push	{r4, lr}
 800d05e:	2400      	movs	r4, #0
 800d060:	4b0c      	ldr	r3, [pc, #48]	@ (800d094 <__ulp+0x38>)
 800d062:	4a0d      	ldr	r2, [pc, #52]	@ (800d098 <__ulp+0x3c>)
 800d064:	400b      	ands	r3, r1
 800d066:	189b      	adds	r3, r3, r2
 800d068:	42a3      	cmp	r3, r4
 800d06a:	dc06      	bgt.n	800d07a <__ulp+0x1e>
 800d06c:	425b      	negs	r3, r3
 800d06e:	151a      	asrs	r2, r3, #20
 800d070:	2a13      	cmp	r2, #19
 800d072:	dc05      	bgt.n	800d080 <__ulp+0x24>
 800d074:	2380      	movs	r3, #128	@ 0x80
 800d076:	031b      	lsls	r3, r3, #12
 800d078:	4113      	asrs	r3, r2
 800d07a:	0019      	movs	r1, r3
 800d07c:	0020      	movs	r0, r4
 800d07e:	bd10      	pop	{r4, pc}
 800d080:	3a14      	subs	r2, #20
 800d082:	2401      	movs	r4, #1
 800d084:	2a1e      	cmp	r2, #30
 800d086:	dc02      	bgt.n	800d08e <__ulp+0x32>
 800d088:	2480      	movs	r4, #128	@ 0x80
 800d08a:	0624      	lsls	r4, r4, #24
 800d08c:	40d4      	lsrs	r4, r2
 800d08e:	2300      	movs	r3, #0
 800d090:	e7f3      	b.n	800d07a <__ulp+0x1e>
 800d092:	46c0      	nop			@ (mov r8, r8)
 800d094:	7ff00000 	.word	0x7ff00000
 800d098:	fcc00000 	.word	0xfcc00000

0800d09c <__b2d>:
 800d09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d09e:	0006      	movs	r6, r0
 800d0a0:	6903      	ldr	r3, [r0, #16]
 800d0a2:	3614      	adds	r6, #20
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	18f3      	adds	r3, r6, r3
 800d0a8:	1f1d      	subs	r5, r3, #4
 800d0aa:	682c      	ldr	r4, [r5, #0]
 800d0ac:	000f      	movs	r7, r1
 800d0ae:	0020      	movs	r0, r4
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	f7ff fd43 	bl	800cb3c <__hi0bits>
 800d0b6:	2220      	movs	r2, #32
 800d0b8:	1a12      	subs	r2, r2, r0
 800d0ba:	603a      	str	r2, [r7, #0]
 800d0bc:	0003      	movs	r3, r0
 800d0be:	4a1c      	ldr	r2, [pc, #112]	@ (800d130 <__b2d+0x94>)
 800d0c0:	280a      	cmp	r0, #10
 800d0c2:	dc15      	bgt.n	800d0f0 <__b2d+0x54>
 800d0c4:	210b      	movs	r1, #11
 800d0c6:	0027      	movs	r7, r4
 800d0c8:	1a09      	subs	r1, r1, r0
 800d0ca:	40cf      	lsrs	r7, r1
 800d0cc:	433a      	orrs	r2, r7
 800d0ce:	468c      	mov	ip, r1
 800d0d0:	0011      	movs	r1, r2
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	42ae      	cmp	r6, r5
 800d0d6:	d202      	bcs.n	800d0de <__b2d+0x42>
 800d0d8:	9a01      	ldr	r2, [sp, #4]
 800d0da:	3a08      	subs	r2, #8
 800d0dc:	6812      	ldr	r2, [r2, #0]
 800d0de:	3315      	adds	r3, #21
 800d0e0:	409c      	lsls	r4, r3
 800d0e2:	4663      	mov	r3, ip
 800d0e4:	0027      	movs	r7, r4
 800d0e6:	40da      	lsrs	r2, r3
 800d0e8:	4317      	orrs	r7, r2
 800d0ea:	0038      	movs	r0, r7
 800d0ec:	b003      	add	sp, #12
 800d0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0f0:	2700      	movs	r7, #0
 800d0f2:	42ae      	cmp	r6, r5
 800d0f4:	d202      	bcs.n	800d0fc <__b2d+0x60>
 800d0f6:	9d01      	ldr	r5, [sp, #4]
 800d0f8:	3d08      	subs	r5, #8
 800d0fa:	682f      	ldr	r7, [r5, #0]
 800d0fc:	210b      	movs	r1, #11
 800d0fe:	4249      	negs	r1, r1
 800d100:	468c      	mov	ip, r1
 800d102:	449c      	add	ip, r3
 800d104:	2b0b      	cmp	r3, #11
 800d106:	d010      	beq.n	800d12a <__b2d+0x8e>
 800d108:	4661      	mov	r1, ip
 800d10a:	2320      	movs	r3, #32
 800d10c:	408c      	lsls	r4, r1
 800d10e:	1a5b      	subs	r3, r3, r1
 800d110:	0039      	movs	r1, r7
 800d112:	40d9      	lsrs	r1, r3
 800d114:	430c      	orrs	r4, r1
 800d116:	4322      	orrs	r2, r4
 800d118:	0011      	movs	r1, r2
 800d11a:	2200      	movs	r2, #0
 800d11c:	42b5      	cmp	r5, r6
 800d11e:	d901      	bls.n	800d124 <__b2d+0x88>
 800d120:	3d04      	subs	r5, #4
 800d122:	682a      	ldr	r2, [r5, #0]
 800d124:	4664      	mov	r4, ip
 800d126:	40a7      	lsls	r7, r4
 800d128:	e7dd      	b.n	800d0e6 <__b2d+0x4a>
 800d12a:	4322      	orrs	r2, r4
 800d12c:	0011      	movs	r1, r2
 800d12e:	e7dc      	b.n	800d0ea <__b2d+0x4e>
 800d130:	3ff00000 	.word	0x3ff00000

0800d134 <__d2b>:
 800d134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d136:	2101      	movs	r1, #1
 800d138:	0016      	movs	r6, r2
 800d13a:	001f      	movs	r7, r3
 800d13c:	f7ff fc06 	bl	800c94c <_Balloc>
 800d140:	1e04      	subs	r4, r0, #0
 800d142:	d105      	bne.n	800d150 <__d2b+0x1c>
 800d144:	0022      	movs	r2, r4
 800d146:	4b25      	ldr	r3, [pc, #148]	@ (800d1dc <__d2b+0xa8>)
 800d148:	4825      	ldr	r0, [pc, #148]	@ (800d1e0 <__d2b+0xac>)
 800d14a:	4926      	ldr	r1, [pc, #152]	@ (800d1e4 <__d2b+0xb0>)
 800d14c:	f7fe ff6e 	bl	800c02c <__assert_func>
 800d150:	033b      	lsls	r3, r7, #12
 800d152:	007d      	lsls	r5, r7, #1
 800d154:	0b1b      	lsrs	r3, r3, #12
 800d156:	0d6d      	lsrs	r5, r5, #21
 800d158:	d002      	beq.n	800d160 <__d2b+0x2c>
 800d15a:	2280      	movs	r2, #128	@ 0x80
 800d15c:	0352      	lsls	r2, r2, #13
 800d15e:	4313      	orrs	r3, r2
 800d160:	9301      	str	r3, [sp, #4]
 800d162:	2e00      	cmp	r6, #0
 800d164:	d025      	beq.n	800d1b2 <__d2b+0x7e>
 800d166:	4668      	mov	r0, sp
 800d168:	9600      	str	r6, [sp, #0]
 800d16a:	f7ff fd08 	bl	800cb7e <__lo0bits>
 800d16e:	9b01      	ldr	r3, [sp, #4]
 800d170:	9900      	ldr	r1, [sp, #0]
 800d172:	2800      	cmp	r0, #0
 800d174:	d01b      	beq.n	800d1ae <__d2b+0x7a>
 800d176:	2220      	movs	r2, #32
 800d178:	001e      	movs	r6, r3
 800d17a:	1a12      	subs	r2, r2, r0
 800d17c:	4096      	lsls	r6, r2
 800d17e:	0032      	movs	r2, r6
 800d180:	40c3      	lsrs	r3, r0
 800d182:	430a      	orrs	r2, r1
 800d184:	6162      	str	r2, [r4, #20]
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	9e01      	ldr	r6, [sp, #4]
 800d18a:	61a6      	str	r6, [r4, #24]
 800d18c:	1e73      	subs	r3, r6, #1
 800d18e:	419e      	sbcs	r6, r3
 800d190:	3601      	adds	r6, #1
 800d192:	6126      	str	r6, [r4, #16]
 800d194:	2d00      	cmp	r5, #0
 800d196:	d014      	beq.n	800d1c2 <__d2b+0x8e>
 800d198:	2635      	movs	r6, #53	@ 0x35
 800d19a:	4b13      	ldr	r3, [pc, #76]	@ (800d1e8 <__d2b+0xb4>)
 800d19c:	18ed      	adds	r5, r5, r3
 800d19e:	9b08      	ldr	r3, [sp, #32]
 800d1a0:	182d      	adds	r5, r5, r0
 800d1a2:	601d      	str	r5, [r3, #0]
 800d1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1a6:	1a36      	subs	r6, r6, r0
 800d1a8:	601e      	str	r6, [r3, #0]
 800d1aa:	0020      	movs	r0, r4
 800d1ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1ae:	6161      	str	r1, [r4, #20]
 800d1b0:	e7ea      	b.n	800d188 <__d2b+0x54>
 800d1b2:	a801      	add	r0, sp, #4
 800d1b4:	f7ff fce3 	bl	800cb7e <__lo0bits>
 800d1b8:	9b01      	ldr	r3, [sp, #4]
 800d1ba:	2601      	movs	r6, #1
 800d1bc:	6163      	str	r3, [r4, #20]
 800d1be:	3020      	adds	r0, #32
 800d1c0:	e7e7      	b.n	800d192 <__d2b+0x5e>
 800d1c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d1ec <__d2b+0xb8>)
 800d1c4:	18c0      	adds	r0, r0, r3
 800d1c6:	9b08      	ldr	r3, [sp, #32]
 800d1c8:	6018      	str	r0, [r3, #0]
 800d1ca:	4b09      	ldr	r3, [pc, #36]	@ (800d1f0 <__d2b+0xbc>)
 800d1cc:	18f3      	adds	r3, r6, r3
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	18e3      	adds	r3, r4, r3
 800d1d2:	6958      	ldr	r0, [r3, #20]
 800d1d4:	f7ff fcb2 	bl	800cb3c <__hi0bits>
 800d1d8:	0176      	lsls	r6, r6, #5
 800d1da:	e7e3      	b.n	800d1a4 <__d2b+0x70>
 800d1dc:	0800ee73 	.word	0x0800ee73
 800d1e0:	0800eee4 	.word	0x0800eee4
 800d1e4:	0000030f 	.word	0x0000030f
 800d1e8:	fffffbcd 	.word	0xfffffbcd
 800d1ec:	fffffbce 	.word	0xfffffbce
 800d1f0:	3fffffff 	.word	0x3fffffff

0800d1f4 <__ratio>:
 800d1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1f6:	b087      	sub	sp, #28
 800d1f8:	000f      	movs	r7, r1
 800d1fa:	a904      	add	r1, sp, #16
 800d1fc:	0006      	movs	r6, r0
 800d1fe:	f7ff ff4d 	bl	800d09c <__b2d>
 800d202:	9000      	str	r0, [sp, #0]
 800d204:	9101      	str	r1, [sp, #4]
 800d206:	9b00      	ldr	r3, [sp, #0]
 800d208:	9c01      	ldr	r4, [sp, #4]
 800d20a:	0038      	movs	r0, r7
 800d20c:	a905      	add	r1, sp, #20
 800d20e:	9302      	str	r3, [sp, #8]
 800d210:	9403      	str	r4, [sp, #12]
 800d212:	f7ff ff43 	bl	800d09c <__b2d>
 800d216:	000d      	movs	r5, r1
 800d218:	0002      	movs	r2, r0
 800d21a:	000b      	movs	r3, r1
 800d21c:	6930      	ldr	r0, [r6, #16]
 800d21e:	6939      	ldr	r1, [r7, #16]
 800d220:	9e04      	ldr	r6, [sp, #16]
 800d222:	1a40      	subs	r0, r0, r1
 800d224:	9905      	ldr	r1, [sp, #20]
 800d226:	0140      	lsls	r0, r0, #5
 800d228:	1a71      	subs	r1, r6, r1
 800d22a:	1841      	adds	r1, r0, r1
 800d22c:	0508      	lsls	r0, r1, #20
 800d22e:	2900      	cmp	r1, #0
 800d230:	dd08      	ble.n	800d244 <__ratio+0x50>
 800d232:	9901      	ldr	r1, [sp, #4]
 800d234:	1841      	adds	r1, r0, r1
 800d236:	9103      	str	r1, [sp, #12]
 800d238:	9802      	ldr	r0, [sp, #8]
 800d23a:	9903      	ldr	r1, [sp, #12]
 800d23c:	f7f4 fee2 	bl	8002004 <__aeabi_ddiv>
 800d240:	b007      	add	sp, #28
 800d242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d244:	1a2b      	subs	r3, r5, r0
 800d246:	e7f7      	b.n	800d238 <__ratio+0x44>

0800d248 <__copybits>:
 800d248:	b570      	push	{r4, r5, r6, lr}
 800d24a:	0014      	movs	r4, r2
 800d24c:	0005      	movs	r5, r0
 800d24e:	3901      	subs	r1, #1
 800d250:	6913      	ldr	r3, [r2, #16]
 800d252:	1149      	asrs	r1, r1, #5
 800d254:	3101      	adds	r1, #1
 800d256:	0089      	lsls	r1, r1, #2
 800d258:	3414      	adds	r4, #20
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	1841      	adds	r1, r0, r1
 800d25e:	18e3      	adds	r3, r4, r3
 800d260:	42a3      	cmp	r3, r4
 800d262:	d80d      	bhi.n	800d280 <__copybits+0x38>
 800d264:	0014      	movs	r4, r2
 800d266:	3411      	adds	r4, #17
 800d268:	2500      	movs	r5, #0
 800d26a:	42a3      	cmp	r3, r4
 800d26c:	d303      	bcc.n	800d276 <__copybits+0x2e>
 800d26e:	1a9b      	subs	r3, r3, r2
 800d270:	3b11      	subs	r3, #17
 800d272:	089b      	lsrs	r3, r3, #2
 800d274:	009d      	lsls	r5, r3, #2
 800d276:	2300      	movs	r3, #0
 800d278:	1940      	adds	r0, r0, r5
 800d27a:	4281      	cmp	r1, r0
 800d27c:	d803      	bhi.n	800d286 <__copybits+0x3e>
 800d27e:	bd70      	pop	{r4, r5, r6, pc}
 800d280:	cc40      	ldmia	r4!, {r6}
 800d282:	c540      	stmia	r5!, {r6}
 800d284:	e7ec      	b.n	800d260 <__copybits+0x18>
 800d286:	c008      	stmia	r0!, {r3}
 800d288:	e7f7      	b.n	800d27a <__copybits+0x32>

0800d28a <__any_on>:
 800d28a:	0002      	movs	r2, r0
 800d28c:	6900      	ldr	r0, [r0, #16]
 800d28e:	b510      	push	{r4, lr}
 800d290:	3214      	adds	r2, #20
 800d292:	114b      	asrs	r3, r1, #5
 800d294:	4298      	cmp	r0, r3
 800d296:	db13      	blt.n	800d2c0 <__any_on+0x36>
 800d298:	dd0c      	ble.n	800d2b4 <__any_on+0x2a>
 800d29a:	241f      	movs	r4, #31
 800d29c:	0008      	movs	r0, r1
 800d29e:	4020      	ands	r0, r4
 800d2a0:	4221      	tst	r1, r4
 800d2a2:	d007      	beq.n	800d2b4 <__any_on+0x2a>
 800d2a4:	0099      	lsls	r1, r3, #2
 800d2a6:	588c      	ldr	r4, [r1, r2]
 800d2a8:	0021      	movs	r1, r4
 800d2aa:	40c1      	lsrs	r1, r0
 800d2ac:	4081      	lsls	r1, r0
 800d2ae:	2001      	movs	r0, #1
 800d2b0:	428c      	cmp	r4, r1
 800d2b2:	d104      	bne.n	800d2be <__any_on+0x34>
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	18d3      	adds	r3, r2, r3
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d803      	bhi.n	800d2c4 <__any_on+0x3a>
 800d2bc:	2000      	movs	r0, #0
 800d2be:	bd10      	pop	{r4, pc}
 800d2c0:	0003      	movs	r3, r0
 800d2c2:	e7f7      	b.n	800d2b4 <__any_on+0x2a>
 800d2c4:	3b04      	subs	r3, #4
 800d2c6:	6819      	ldr	r1, [r3, #0]
 800d2c8:	2900      	cmp	r1, #0
 800d2ca:	d0f5      	beq.n	800d2b8 <__any_on+0x2e>
 800d2cc:	2001      	movs	r0, #1
 800d2ce:	e7f6      	b.n	800d2be <__any_on+0x34>

0800d2d0 <__ascii_wctomb>:
 800d2d0:	0003      	movs	r3, r0
 800d2d2:	1e08      	subs	r0, r1, #0
 800d2d4:	d005      	beq.n	800d2e2 <__ascii_wctomb+0x12>
 800d2d6:	2aff      	cmp	r2, #255	@ 0xff
 800d2d8:	d904      	bls.n	800d2e4 <__ascii_wctomb+0x14>
 800d2da:	228a      	movs	r2, #138	@ 0x8a
 800d2dc:	2001      	movs	r0, #1
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	4240      	negs	r0, r0
 800d2e2:	4770      	bx	lr
 800d2e4:	2001      	movs	r0, #1
 800d2e6:	700a      	strb	r2, [r1, #0]
 800d2e8:	e7fb      	b.n	800d2e2 <__ascii_wctomb+0x12>
	...

0800d2ec <__ssputs_r>:
 800d2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ee:	688e      	ldr	r6, [r1, #8]
 800d2f0:	b085      	sub	sp, #20
 800d2f2:	001f      	movs	r7, r3
 800d2f4:	000c      	movs	r4, r1
 800d2f6:	680b      	ldr	r3, [r1, #0]
 800d2f8:	9002      	str	r0, [sp, #8]
 800d2fa:	9203      	str	r2, [sp, #12]
 800d2fc:	42be      	cmp	r6, r7
 800d2fe:	d830      	bhi.n	800d362 <__ssputs_r+0x76>
 800d300:	210c      	movs	r1, #12
 800d302:	5e62      	ldrsh	r2, [r4, r1]
 800d304:	2190      	movs	r1, #144	@ 0x90
 800d306:	00c9      	lsls	r1, r1, #3
 800d308:	420a      	tst	r2, r1
 800d30a:	d028      	beq.n	800d35e <__ssputs_r+0x72>
 800d30c:	2003      	movs	r0, #3
 800d30e:	6921      	ldr	r1, [r4, #16]
 800d310:	1a5b      	subs	r3, r3, r1
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	6963      	ldr	r3, [r4, #20]
 800d316:	4343      	muls	r3, r0
 800d318:	9801      	ldr	r0, [sp, #4]
 800d31a:	0fdd      	lsrs	r5, r3, #31
 800d31c:	18ed      	adds	r5, r5, r3
 800d31e:	1c7b      	adds	r3, r7, #1
 800d320:	181b      	adds	r3, r3, r0
 800d322:	106d      	asrs	r5, r5, #1
 800d324:	42ab      	cmp	r3, r5
 800d326:	d900      	bls.n	800d32a <__ssputs_r+0x3e>
 800d328:	001d      	movs	r5, r3
 800d32a:	0552      	lsls	r2, r2, #21
 800d32c:	d528      	bpl.n	800d380 <__ssputs_r+0x94>
 800d32e:	0029      	movs	r1, r5
 800d330:	9802      	ldr	r0, [sp, #8]
 800d332:	f7ff fa69 	bl	800c808 <_malloc_r>
 800d336:	1e06      	subs	r6, r0, #0
 800d338:	d02c      	beq.n	800d394 <__ssputs_r+0xa8>
 800d33a:	9a01      	ldr	r2, [sp, #4]
 800d33c:	6921      	ldr	r1, [r4, #16]
 800d33e:	f7fe fe66 	bl	800c00e <memcpy>
 800d342:	89a2      	ldrh	r2, [r4, #12]
 800d344:	4b18      	ldr	r3, [pc, #96]	@ (800d3a8 <__ssputs_r+0xbc>)
 800d346:	401a      	ands	r2, r3
 800d348:	2380      	movs	r3, #128	@ 0x80
 800d34a:	4313      	orrs	r3, r2
 800d34c:	81a3      	strh	r3, [r4, #12]
 800d34e:	9b01      	ldr	r3, [sp, #4]
 800d350:	6126      	str	r6, [r4, #16]
 800d352:	18f6      	adds	r6, r6, r3
 800d354:	6026      	str	r6, [r4, #0]
 800d356:	003e      	movs	r6, r7
 800d358:	6165      	str	r5, [r4, #20]
 800d35a:	1aed      	subs	r5, r5, r3
 800d35c:	60a5      	str	r5, [r4, #8]
 800d35e:	42be      	cmp	r6, r7
 800d360:	d900      	bls.n	800d364 <__ssputs_r+0x78>
 800d362:	003e      	movs	r6, r7
 800d364:	0032      	movs	r2, r6
 800d366:	9903      	ldr	r1, [sp, #12]
 800d368:	6820      	ldr	r0, [r4, #0]
 800d36a:	f000 fb5b 	bl	800da24 <memmove>
 800d36e:	2000      	movs	r0, #0
 800d370:	68a3      	ldr	r3, [r4, #8]
 800d372:	1b9b      	subs	r3, r3, r6
 800d374:	60a3      	str	r3, [r4, #8]
 800d376:	6823      	ldr	r3, [r4, #0]
 800d378:	199b      	adds	r3, r3, r6
 800d37a:	6023      	str	r3, [r4, #0]
 800d37c:	b005      	add	sp, #20
 800d37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d380:	002a      	movs	r2, r5
 800d382:	9802      	ldr	r0, [sp, #8]
 800d384:	f000 fbb1 	bl	800daea <_realloc_r>
 800d388:	1e06      	subs	r6, r0, #0
 800d38a:	d1e0      	bne.n	800d34e <__ssputs_r+0x62>
 800d38c:	6921      	ldr	r1, [r4, #16]
 800d38e:	9802      	ldr	r0, [sp, #8]
 800d390:	f7fe fe6a 	bl	800c068 <_free_r>
 800d394:	230c      	movs	r3, #12
 800d396:	2001      	movs	r0, #1
 800d398:	9a02      	ldr	r2, [sp, #8]
 800d39a:	4240      	negs	r0, r0
 800d39c:	6013      	str	r3, [r2, #0]
 800d39e:	89a2      	ldrh	r2, [r4, #12]
 800d3a0:	3334      	adds	r3, #52	@ 0x34
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	81a3      	strh	r3, [r4, #12]
 800d3a6:	e7e9      	b.n	800d37c <__ssputs_r+0x90>
 800d3a8:	fffffb7f 	.word	0xfffffb7f

0800d3ac <_svfiprintf_r>:
 800d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ae:	b0a1      	sub	sp, #132	@ 0x84
 800d3b0:	9003      	str	r0, [sp, #12]
 800d3b2:	001d      	movs	r5, r3
 800d3b4:	898b      	ldrh	r3, [r1, #12]
 800d3b6:	000f      	movs	r7, r1
 800d3b8:	0016      	movs	r6, r2
 800d3ba:	061b      	lsls	r3, r3, #24
 800d3bc:	d511      	bpl.n	800d3e2 <_svfiprintf_r+0x36>
 800d3be:	690b      	ldr	r3, [r1, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d10e      	bne.n	800d3e2 <_svfiprintf_r+0x36>
 800d3c4:	2140      	movs	r1, #64	@ 0x40
 800d3c6:	f7ff fa1f 	bl	800c808 <_malloc_r>
 800d3ca:	6038      	str	r0, [r7, #0]
 800d3cc:	6138      	str	r0, [r7, #16]
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d105      	bne.n	800d3de <_svfiprintf_r+0x32>
 800d3d2:	230c      	movs	r3, #12
 800d3d4:	9a03      	ldr	r2, [sp, #12]
 800d3d6:	6013      	str	r3, [r2, #0]
 800d3d8:	2001      	movs	r0, #1
 800d3da:	4240      	negs	r0, r0
 800d3dc:	e0cf      	b.n	800d57e <_svfiprintf_r+0x1d2>
 800d3de:	2340      	movs	r3, #64	@ 0x40
 800d3e0:	617b      	str	r3, [r7, #20]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	ac08      	add	r4, sp, #32
 800d3e6:	6163      	str	r3, [r4, #20]
 800d3e8:	3320      	adds	r3, #32
 800d3ea:	7663      	strb	r3, [r4, #25]
 800d3ec:	3310      	adds	r3, #16
 800d3ee:	76a3      	strb	r3, [r4, #26]
 800d3f0:	9507      	str	r5, [sp, #28]
 800d3f2:	0035      	movs	r5, r6
 800d3f4:	782b      	ldrb	r3, [r5, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <_svfiprintf_r+0x52>
 800d3fa:	2b25      	cmp	r3, #37	@ 0x25
 800d3fc:	d148      	bne.n	800d490 <_svfiprintf_r+0xe4>
 800d3fe:	1bab      	subs	r3, r5, r6
 800d400:	9305      	str	r3, [sp, #20]
 800d402:	42b5      	cmp	r5, r6
 800d404:	d00b      	beq.n	800d41e <_svfiprintf_r+0x72>
 800d406:	0032      	movs	r2, r6
 800d408:	0039      	movs	r1, r7
 800d40a:	9803      	ldr	r0, [sp, #12]
 800d40c:	f7ff ff6e 	bl	800d2ec <__ssputs_r>
 800d410:	3001      	adds	r0, #1
 800d412:	d100      	bne.n	800d416 <_svfiprintf_r+0x6a>
 800d414:	e0ae      	b.n	800d574 <_svfiprintf_r+0x1c8>
 800d416:	6963      	ldr	r3, [r4, #20]
 800d418:	9a05      	ldr	r2, [sp, #20]
 800d41a:	189b      	adds	r3, r3, r2
 800d41c:	6163      	str	r3, [r4, #20]
 800d41e:	782b      	ldrb	r3, [r5, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d100      	bne.n	800d426 <_svfiprintf_r+0x7a>
 800d424:	e0a6      	b.n	800d574 <_svfiprintf_r+0x1c8>
 800d426:	2201      	movs	r2, #1
 800d428:	2300      	movs	r3, #0
 800d42a:	4252      	negs	r2, r2
 800d42c:	6062      	str	r2, [r4, #4]
 800d42e:	a904      	add	r1, sp, #16
 800d430:	3254      	adds	r2, #84	@ 0x54
 800d432:	1852      	adds	r2, r2, r1
 800d434:	1c6e      	adds	r6, r5, #1
 800d436:	6023      	str	r3, [r4, #0]
 800d438:	60e3      	str	r3, [r4, #12]
 800d43a:	60a3      	str	r3, [r4, #8]
 800d43c:	7013      	strb	r3, [r2, #0]
 800d43e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d440:	4b54      	ldr	r3, [pc, #336]	@ (800d594 <_svfiprintf_r+0x1e8>)
 800d442:	2205      	movs	r2, #5
 800d444:	0018      	movs	r0, r3
 800d446:	7831      	ldrb	r1, [r6, #0]
 800d448:	9305      	str	r3, [sp, #20]
 800d44a:	f000 fb0f 	bl	800da6c <memchr>
 800d44e:	1c75      	adds	r5, r6, #1
 800d450:	2800      	cmp	r0, #0
 800d452:	d11f      	bne.n	800d494 <_svfiprintf_r+0xe8>
 800d454:	6822      	ldr	r2, [r4, #0]
 800d456:	06d3      	lsls	r3, r2, #27
 800d458:	d504      	bpl.n	800d464 <_svfiprintf_r+0xb8>
 800d45a:	2353      	movs	r3, #83	@ 0x53
 800d45c:	a904      	add	r1, sp, #16
 800d45e:	185b      	adds	r3, r3, r1
 800d460:	2120      	movs	r1, #32
 800d462:	7019      	strb	r1, [r3, #0]
 800d464:	0713      	lsls	r3, r2, #28
 800d466:	d504      	bpl.n	800d472 <_svfiprintf_r+0xc6>
 800d468:	2353      	movs	r3, #83	@ 0x53
 800d46a:	a904      	add	r1, sp, #16
 800d46c:	185b      	adds	r3, r3, r1
 800d46e:	212b      	movs	r1, #43	@ 0x2b
 800d470:	7019      	strb	r1, [r3, #0]
 800d472:	7833      	ldrb	r3, [r6, #0]
 800d474:	2b2a      	cmp	r3, #42	@ 0x2a
 800d476:	d016      	beq.n	800d4a6 <_svfiprintf_r+0xfa>
 800d478:	0035      	movs	r5, r6
 800d47a:	2100      	movs	r1, #0
 800d47c:	200a      	movs	r0, #10
 800d47e:	68e3      	ldr	r3, [r4, #12]
 800d480:	782a      	ldrb	r2, [r5, #0]
 800d482:	1c6e      	adds	r6, r5, #1
 800d484:	3a30      	subs	r2, #48	@ 0x30
 800d486:	2a09      	cmp	r2, #9
 800d488:	d950      	bls.n	800d52c <_svfiprintf_r+0x180>
 800d48a:	2900      	cmp	r1, #0
 800d48c:	d111      	bne.n	800d4b2 <_svfiprintf_r+0x106>
 800d48e:	e017      	b.n	800d4c0 <_svfiprintf_r+0x114>
 800d490:	3501      	adds	r5, #1
 800d492:	e7af      	b.n	800d3f4 <_svfiprintf_r+0x48>
 800d494:	9b05      	ldr	r3, [sp, #20]
 800d496:	6822      	ldr	r2, [r4, #0]
 800d498:	1ac0      	subs	r0, r0, r3
 800d49a:	2301      	movs	r3, #1
 800d49c:	4083      	lsls	r3, r0
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	002e      	movs	r6, r5
 800d4a2:	6023      	str	r3, [r4, #0]
 800d4a4:	e7cc      	b.n	800d440 <_svfiprintf_r+0x94>
 800d4a6:	9b07      	ldr	r3, [sp, #28]
 800d4a8:	1d19      	adds	r1, r3, #4
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	9107      	str	r1, [sp, #28]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	db01      	blt.n	800d4b6 <_svfiprintf_r+0x10a>
 800d4b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4b4:	e004      	b.n	800d4c0 <_svfiprintf_r+0x114>
 800d4b6:	425b      	negs	r3, r3
 800d4b8:	60e3      	str	r3, [r4, #12]
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	782b      	ldrb	r3, [r5, #0]
 800d4c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4c4:	d10c      	bne.n	800d4e0 <_svfiprintf_r+0x134>
 800d4c6:	786b      	ldrb	r3, [r5, #1]
 800d4c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ca:	d134      	bne.n	800d536 <_svfiprintf_r+0x18a>
 800d4cc:	9b07      	ldr	r3, [sp, #28]
 800d4ce:	3502      	adds	r5, #2
 800d4d0:	1d1a      	adds	r2, r3, #4
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	9207      	str	r2, [sp, #28]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da01      	bge.n	800d4de <_svfiprintf_r+0x132>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	425b      	negs	r3, r3
 800d4de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4e0:	4e2d      	ldr	r6, [pc, #180]	@ (800d598 <_svfiprintf_r+0x1ec>)
 800d4e2:	2203      	movs	r2, #3
 800d4e4:	0030      	movs	r0, r6
 800d4e6:	7829      	ldrb	r1, [r5, #0]
 800d4e8:	f000 fac0 	bl	800da6c <memchr>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d006      	beq.n	800d4fe <_svfiprintf_r+0x152>
 800d4f0:	2340      	movs	r3, #64	@ 0x40
 800d4f2:	1b80      	subs	r0, r0, r6
 800d4f4:	4083      	lsls	r3, r0
 800d4f6:	6822      	ldr	r2, [r4, #0]
 800d4f8:	3501      	adds	r5, #1
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	6023      	str	r3, [r4, #0]
 800d4fe:	7829      	ldrb	r1, [r5, #0]
 800d500:	2206      	movs	r2, #6
 800d502:	4826      	ldr	r0, [pc, #152]	@ (800d59c <_svfiprintf_r+0x1f0>)
 800d504:	1c6e      	adds	r6, r5, #1
 800d506:	7621      	strb	r1, [r4, #24]
 800d508:	f000 fab0 	bl	800da6c <memchr>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d038      	beq.n	800d582 <_svfiprintf_r+0x1d6>
 800d510:	4b23      	ldr	r3, [pc, #140]	@ (800d5a0 <_svfiprintf_r+0x1f4>)
 800d512:	2b00      	cmp	r3, #0
 800d514:	d122      	bne.n	800d55c <_svfiprintf_r+0x1b0>
 800d516:	2207      	movs	r2, #7
 800d518:	9b07      	ldr	r3, [sp, #28]
 800d51a:	3307      	adds	r3, #7
 800d51c:	4393      	bics	r3, r2
 800d51e:	3308      	adds	r3, #8
 800d520:	9307      	str	r3, [sp, #28]
 800d522:	6963      	ldr	r3, [r4, #20]
 800d524:	9a04      	ldr	r2, [sp, #16]
 800d526:	189b      	adds	r3, r3, r2
 800d528:	6163      	str	r3, [r4, #20]
 800d52a:	e762      	b.n	800d3f2 <_svfiprintf_r+0x46>
 800d52c:	4343      	muls	r3, r0
 800d52e:	0035      	movs	r5, r6
 800d530:	2101      	movs	r1, #1
 800d532:	189b      	adds	r3, r3, r2
 800d534:	e7a4      	b.n	800d480 <_svfiprintf_r+0xd4>
 800d536:	2300      	movs	r3, #0
 800d538:	200a      	movs	r0, #10
 800d53a:	0019      	movs	r1, r3
 800d53c:	3501      	adds	r5, #1
 800d53e:	6063      	str	r3, [r4, #4]
 800d540:	782a      	ldrb	r2, [r5, #0]
 800d542:	1c6e      	adds	r6, r5, #1
 800d544:	3a30      	subs	r2, #48	@ 0x30
 800d546:	2a09      	cmp	r2, #9
 800d548:	d903      	bls.n	800d552 <_svfiprintf_r+0x1a6>
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d0c8      	beq.n	800d4e0 <_svfiprintf_r+0x134>
 800d54e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d550:	e7c6      	b.n	800d4e0 <_svfiprintf_r+0x134>
 800d552:	4341      	muls	r1, r0
 800d554:	0035      	movs	r5, r6
 800d556:	2301      	movs	r3, #1
 800d558:	1889      	adds	r1, r1, r2
 800d55a:	e7f1      	b.n	800d540 <_svfiprintf_r+0x194>
 800d55c:	aa07      	add	r2, sp, #28
 800d55e:	9200      	str	r2, [sp, #0]
 800d560:	0021      	movs	r1, r4
 800d562:	003a      	movs	r2, r7
 800d564:	4b0f      	ldr	r3, [pc, #60]	@ (800d5a4 <_svfiprintf_r+0x1f8>)
 800d566:	9803      	ldr	r0, [sp, #12]
 800d568:	e000      	b.n	800d56c <_svfiprintf_r+0x1c0>
 800d56a:	bf00      	nop
 800d56c:	9004      	str	r0, [sp, #16]
 800d56e:	9b04      	ldr	r3, [sp, #16]
 800d570:	3301      	adds	r3, #1
 800d572:	d1d6      	bne.n	800d522 <_svfiprintf_r+0x176>
 800d574:	89bb      	ldrh	r3, [r7, #12]
 800d576:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d578:	065b      	lsls	r3, r3, #25
 800d57a:	d500      	bpl.n	800d57e <_svfiprintf_r+0x1d2>
 800d57c:	e72c      	b.n	800d3d8 <_svfiprintf_r+0x2c>
 800d57e:	b021      	add	sp, #132	@ 0x84
 800d580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d582:	aa07      	add	r2, sp, #28
 800d584:	9200      	str	r2, [sp, #0]
 800d586:	0021      	movs	r1, r4
 800d588:	003a      	movs	r2, r7
 800d58a:	4b06      	ldr	r3, [pc, #24]	@ (800d5a4 <_svfiprintf_r+0x1f8>)
 800d58c:	9803      	ldr	r0, [sp, #12]
 800d58e:	f000 f87b 	bl	800d688 <_printf_i>
 800d592:	e7eb      	b.n	800d56c <_svfiprintf_r+0x1c0>
 800d594:	0800ef3d 	.word	0x0800ef3d
 800d598:	0800ef43 	.word	0x0800ef43
 800d59c:	0800ef47 	.word	0x0800ef47
 800d5a0:	00000000 	.word	0x00000000
 800d5a4:	0800d2ed 	.word	0x0800d2ed

0800d5a8 <_printf_common>:
 800d5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5aa:	0016      	movs	r6, r2
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	688a      	ldr	r2, [r1, #8]
 800d5b0:	690b      	ldr	r3, [r1, #16]
 800d5b2:	000c      	movs	r4, r1
 800d5b4:	9000      	str	r0, [sp, #0]
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	da00      	bge.n	800d5bc <_printf_common+0x14>
 800d5ba:	0013      	movs	r3, r2
 800d5bc:	0022      	movs	r2, r4
 800d5be:	6033      	str	r3, [r6, #0]
 800d5c0:	3243      	adds	r2, #67	@ 0x43
 800d5c2:	7812      	ldrb	r2, [r2, #0]
 800d5c4:	2a00      	cmp	r2, #0
 800d5c6:	d001      	beq.n	800d5cc <_printf_common+0x24>
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	6033      	str	r3, [r6, #0]
 800d5cc:	6823      	ldr	r3, [r4, #0]
 800d5ce:	069b      	lsls	r3, r3, #26
 800d5d0:	d502      	bpl.n	800d5d8 <_printf_common+0x30>
 800d5d2:	6833      	ldr	r3, [r6, #0]
 800d5d4:	3302      	adds	r3, #2
 800d5d6:	6033      	str	r3, [r6, #0]
 800d5d8:	6822      	ldr	r2, [r4, #0]
 800d5da:	2306      	movs	r3, #6
 800d5dc:	0015      	movs	r5, r2
 800d5de:	401d      	ands	r5, r3
 800d5e0:	421a      	tst	r2, r3
 800d5e2:	d027      	beq.n	800d634 <_printf_common+0x8c>
 800d5e4:	0023      	movs	r3, r4
 800d5e6:	3343      	adds	r3, #67	@ 0x43
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	1e5a      	subs	r2, r3, #1
 800d5ec:	4193      	sbcs	r3, r2
 800d5ee:	6822      	ldr	r2, [r4, #0]
 800d5f0:	0692      	lsls	r2, r2, #26
 800d5f2:	d430      	bmi.n	800d656 <_printf_common+0xae>
 800d5f4:	0022      	movs	r2, r4
 800d5f6:	9901      	ldr	r1, [sp, #4]
 800d5f8:	9800      	ldr	r0, [sp, #0]
 800d5fa:	9d08      	ldr	r5, [sp, #32]
 800d5fc:	3243      	adds	r2, #67	@ 0x43
 800d5fe:	47a8      	blx	r5
 800d600:	3001      	adds	r0, #1
 800d602:	d025      	beq.n	800d650 <_printf_common+0xa8>
 800d604:	2206      	movs	r2, #6
 800d606:	6823      	ldr	r3, [r4, #0]
 800d608:	2500      	movs	r5, #0
 800d60a:	4013      	ands	r3, r2
 800d60c:	2b04      	cmp	r3, #4
 800d60e:	d105      	bne.n	800d61c <_printf_common+0x74>
 800d610:	6833      	ldr	r3, [r6, #0]
 800d612:	68e5      	ldr	r5, [r4, #12]
 800d614:	1aed      	subs	r5, r5, r3
 800d616:	43eb      	mvns	r3, r5
 800d618:	17db      	asrs	r3, r3, #31
 800d61a:	401d      	ands	r5, r3
 800d61c:	68a3      	ldr	r3, [r4, #8]
 800d61e:	6922      	ldr	r2, [r4, #16]
 800d620:	4293      	cmp	r3, r2
 800d622:	dd01      	ble.n	800d628 <_printf_common+0x80>
 800d624:	1a9b      	subs	r3, r3, r2
 800d626:	18ed      	adds	r5, r5, r3
 800d628:	2600      	movs	r6, #0
 800d62a:	42b5      	cmp	r5, r6
 800d62c:	d120      	bne.n	800d670 <_printf_common+0xc8>
 800d62e:	2000      	movs	r0, #0
 800d630:	e010      	b.n	800d654 <_printf_common+0xac>
 800d632:	3501      	adds	r5, #1
 800d634:	68e3      	ldr	r3, [r4, #12]
 800d636:	6832      	ldr	r2, [r6, #0]
 800d638:	1a9b      	subs	r3, r3, r2
 800d63a:	42ab      	cmp	r3, r5
 800d63c:	ddd2      	ble.n	800d5e4 <_printf_common+0x3c>
 800d63e:	0022      	movs	r2, r4
 800d640:	2301      	movs	r3, #1
 800d642:	9901      	ldr	r1, [sp, #4]
 800d644:	9800      	ldr	r0, [sp, #0]
 800d646:	9f08      	ldr	r7, [sp, #32]
 800d648:	3219      	adds	r2, #25
 800d64a:	47b8      	blx	r7
 800d64c:	3001      	adds	r0, #1
 800d64e:	d1f0      	bne.n	800d632 <_printf_common+0x8a>
 800d650:	2001      	movs	r0, #1
 800d652:	4240      	negs	r0, r0
 800d654:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d656:	2030      	movs	r0, #48	@ 0x30
 800d658:	18e1      	adds	r1, r4, r3
 800d65a:	3143      	adds	r1, #67	@ 0x43
 800d65c:	7008      	strb	r0, [r1, #0]
 800d65e:	0021      	movs	r1, r4
 800d660:	1c5a      	adds	r2, r3, #1
 800d662:	3145      	adds	r1, #69	@ 0x45
 800d664:	7809      	ldrb	r1, [r1, #0]
 800d666:	18a2      	adds	r2, r4, r2
 800d668:	3243      	adds	r2, #67	@ 0x43
 800d66a:	3302      	adds	r3, #2
 800d66c:	7011      	strb	r1, [r2, #0]
 800d66e:	e7c1      	b.n	800d5f4 <_printf_common+0x4c>
 800d670:	0022      	movs	r2, r4
 800d672:	2301      	movs	r3, #1
 800d674:	9901      	ldr	r1, [sp, #4]
 800d676:	9800      	ldr	r0, [sp, #0]
 800d678:	9f08      	ldr	r7, [sp, #32]
 800d67a:	321a      	adds	r2, #26
 800d67c:	47b8      	blx	r7
 800d67e:	3001      	adds	r0, #1
 800d680:	d0e6      	beq.n	800d650 <_printf_common+0xa8>
 800d682:	3601      	adds	r6, #1
 800d684:	e7d1      	b.n	800d62a <_printf_common+0x82>
	...

0800d688 <_printf_i>:
 800d688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d68a:	b08b      	sub	sp, #44	@ 0x2c
 800d68c:	9206      	str	r2, [sp, #24]
 800d68e:	000a      	movs	r2, r1
 800d690:	3243      	adds	r2, #67	@ 0x43
 800d692:	9307      	str	r3, [sp, #28]
 800d694:	9005      	str	r0, [sp, #20]
 800d696:	9203      	str	r2, [sp, #12]
 800d698:	7e0a      	ldrb	r2, [r1, #24]
 800d69a:	000c      	movs	r4, r1
 800d69c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d69e:	2a78      	cmp	r2, #120	@ 0x78
 800d6a0:	d809      	bhi.n	800d6b6 <_printf_i+0x2e>
 800d6a2:	2a62      	cmp	r2, #98	@ 0x62
 800d6a4:	d80b      	bhi.n	800d6be <_printf_i+0x36>
 800d6a6:	2a00      	cmp	r2, #0
 800d6a8:	d100      	bne.n	800d6ac <_printf_i+0x24>
 800d6aa:	e0ba      	b.n	800d822 <_printf_i+0x19a>
 800d6ac:	497a      	ldr	r1, [pc, #488]	@ (800d898 <_printf_i+0x210>)
 800d6ae:	9104      	str	r1, [sp, #16]
 800d6b0:	2a58      	cmp	r2, #88	@ 0x58
 800d6b2:	d100      	bne.n	800d6b6 <_printf_i+0x2e>
 800d6b4:	e08e      	b.n	800d7d4 <_printf_i+0x14c>
 800d6b6:	0025      	movs	r5, r4
 800d6b8:	3542      	adds	r5, #66	@ 0x42
 800d6ba:	702a      	strb	r2, [r5, #0]
 800d6bc:	e022      	b.n	800d704 <_printf_i+0x7c>
 800d6be:	0010      	movs	r0, r2
 800d6c0:	3863      	subs	r0, #99	@ 0x63
 800d6c2:	2815      	cmp	r0, #21
 800d6c4:	d8f7      	bhi.n	800d6b6 <_printf_i+0x2e>
 800d6c6:	f7f2 fd39 	bl	800013c <__gnu_thumb1_case_shi>
 800d6ca:	0016      	.short	0x0016
 800d6cc:	fff6001f 	.word	0xfff6001f
 800d6d0:	fff6fff6 	.word	0xfff6fff6
 800d6d4:	001ffff6 	.word	0x001ffff6
 800d6d8:	fff6fff6 	.word	0xfff6fff6
 800d6dc:	fff6fff6 	.word	0xfff6fff6
 800d6e0:	0036009f 	.word	0x0036009f
 800d6e4:	fff6007e 	.word	0xfff6007e
 800d6e8:	00b0fff6 	.word	0x00b0fff6
 800d6ec:	0036fff6 	.word	0x0036fff6
 800d6f0:	fff6fff6 	.word	0xfff6fff6
 800d6f4:	0082      	.short	0x0082
 800d6f6:	0025      	movs	r5, r4
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	3542      	adds	r5, #66	@ 0x42
 800d6fc:	1d11      	adds	r1, r2, #4
 800d6fe:	6019      	str	r1, [r3, #0]
 800d700:	6813      	ldr	r3, [r2, #0]
 800d702:	702b      	strb	r3, [r5, #0]
 800d704:	2301      	movs	r3, #1
 800d706:	e09e      	b.n	800d846 <_printf_i+0x1be>
 800d708:	6818      	ldr	r0, [r3, #0]
 800d70a:	6809      	ldr	r1, [r1, #0]
 800d70c:	1d02      	adds	r2, r0, #4
 800d70e:	060d      	lsls	r5, r1, #24
 800d710:	d50b      	bpl.n	800d72a <_printf_i+0xa2>
 800d712:	6806      	ldr	r6, [r0, #0]
 800d714:	601a      	str	r2, [r3, #0]
 800d716:	2e00      	cmp	r6, #0
 800d718:	da03      	bge.n	800d722 <_printf_i+0x9a>
 800d71a:	232d      	movs	r3, #45	@ 0x2d
 800d71c:	9a03      	ldr	r2, [sp, #12]
 800d71e:	4276      	negs	r6, r6
 800d720:	7013      	strb	r3, [r2, #0]
 800d722:	4b5d      	ldr	r3, [pc, #372]	@ (800d898 <_printf_i+0x210>)
 800d724:	270a      	movs	r7, #10
 800d726:	9304      	str	r3, [sp, #16]
 800d728:	e018      	b.n	800d75c <_printf_i+0xd4>
 800d72a:	6806      	ldr	r6, [r0, #0]
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	0649      	lsls	r1, r1, #25
 800d730:	d5f1      	bpl.n	800d716 <_printf_i+0x8e>
 800d732:	b236      	sxth	r6, r6
 800d734:	e7ef      	b.n	800d716 <_printf_i+0x8e>
 800d736:	6808      	ldr	r0, [r1, #0]
 800d738:	6819      	ldr	r1, [r3, #0]
 800d73a:	c940      	ldmia	r1!, {r6}
 800d73c:	0605      	lsls	r5, r0, #24
 800d73e:	d402      	bmi.n	800d746 <_printf_i+0xbe>
 800d740:	0640      	lsls	r0, r0, #25
 800d742:	d500      	bpl.n	800d746 <_printf_i+0xbe>
 800d744:	b2b6      	uxth	r6, r6
 800d746:	6019      	str	r1, [r3, #0]
 800d748:	4b53      	ldr	r3, [pc, #332]	@ (800d898 <_printf_i+0x210>)
 800d74a:	270a      	movs	r7, #10
 800d74c:	9304      	str	r3, [sp, #16]
 800d74e:	2a6f      	cmp	r2, #111	@ 0x6f
 800d750:	d100      	bne.n	800d754 <_printf_i+0xcc>
 800d752:	3f02      	subs	r7, #2
 800d754:	0023      	movs	r3, r4
 800d756:	2200      	movs	r2, #0
 800d758:	3343      	adds	r3, #67	@ 0x43
 800d75a:	701a      	strb	r2, [r3, #0]
 800d75c:	6863      	ldr	r3, [r4, #4]
 800d75e:	60a3      	str	r3, [r4, #8]
 800d760:	2b00      	cmp	r3, #0
 800d762:	db06      	blt.n	800d772 <_printf_i+0xea>
 800d764:	2104      	movs	r1, #4
 800d766:	6822      	ldr	r2, [r4, #0]
 800d768:	9d03      	ldr	r5, [sp, #12]
 800d76a:	438a      	bics	r2, r1
 800d76c:	6022      	str	r2, [r4, #0]
 800d76e:	4333      	orrs	r3, r6
 800d770:	d00c      	beq.n	800d78c <_printf_i+0x104>
 800d772:	9d03      	ldr	r5, [sp, #12]
 800d774:	0030      	movs	r0, r6
 800d776:	0039      	movs	r1, r7
 800d778:	f7f2 fd70 	bl	800025c <__aeabi_uidivmod>
 800d77c:	9b04      	ldr	r3, [sp, #16]
 800d77e:	3d01      	subs	r5, #1
 800d780:	5c5b      	ldrb	r3, [r3, r1]
 800d782:	702b      	strb	r3, [r5, #0]
 800d784:	0033      	movs	r3, r6
 800d786:	0006      	movs	r6, r0
 800d788:	429f      	cmp	r7, r3
 800d78a:	d9f3      	bls.n	800d774 <_printf_i+0xec>
 800d78c:	2f08      	cmp	r7, #8
 800d78e:	d109      	bne.n	800d7a4 <_printf_i+0x11c>
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	07db      	lsls	r3, r3, #31
 800d794:	d506      	bpl.n	800d7a4 <_printf_i+0x11c>
 800d796:	6862      	ldr	r2, [r4, #4]
 800d798:	6923      	ldr	r3, [r4, #16]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	dc02      	bgt.n	800d7a4 <_printf_i+0x11c>
 800d79e:	2330      	movs	r3, #48	@ 0x30
 800d7a0:	3d01      	subs	r5, #1
 800d7a2:	702b      	strb	r3, [r5, #0]
 800d7a4:	9b03      	ldr	r3, [sp, #12]
 800d7a6:	1b5b      	subs	r3, r3, r5
 800d7a8:	6123      	str	r3, [r4, #16]
 800d7aa:	9b07      	ldr	r3, [sp, #28]
 800d7ac:	0021      	movs	r1, r4
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	9805      	ldr	r0, [sp, #20]
 800d7b2:	9b06      	ldr	r3, [sp, #24]
 800d7b4:	aa09      	add	r2, sp, #36	@ 0x24
 800d7b6:	f7ff fef7 	bl	800d5a8 <_printf_common>
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	d148      	bne.n	800d850 <_printf_i+0x1c8>
 800d7be:	2001      	movs	r0, #1
 800d7c0:	4240      	negs	r0, r0
 800d7c2:	b00b      	add	sp, #44	@ 0x2c
 800d7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c6:	2220      	movs	r2, #32
 800d7c8:	6809      	ldr	r1, [r1, #0]
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	6022      	str	r2, [r4, #0]
 800d7ce:	2278      	movs	r2, #120	@ 0x78
 800d7d0:	4932      	ldr	r1, [pc, #200]	@ (800d89c <_printf_i+0x214>)
 800d7d2:	9104      	str	r1, [sp, #16]
 800d7d4:	0021      	movs	r1, r4
 800d7d6:	3145      	adds	r1, #69	@ 0x45
 800d7d8:	700a      	strb	r2, [r1, #0]
 800d7da:	6819      	ldr	r1, [r3, #0]
 800d7dc:	6822      	ldr	r2, [r4, #0]
 800d7de:	c940      	ldmia	r1!, {r6}
 800d7e0:	0610      	lsls	r0, r2, #24
 800d7e2:	d402      	bmi.n	800d7ea <_printf_i+0x162>
 800d7e4:	0650      	lsls	r0, r2, #25
 800d7e6:	d500      	bpl.n	800d7ea <_printf_i+0x162>
 800d7e8:	b2b6      	uxth	r6, r6
 800d7ea:	6019      	str	r1, [r3, #0]
 800d7ec:	07d3      	lsls	r3, r2, #31
 800d7ee:	d502      	bpl.n	800d7f6 <_printf_i+0x16e>
 800d7f0:	2320      	movs	r3, #32
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	6023      	str	r3, [r4, #0]
 800d7f6:	2e00      	cmp	r6, #0
 800d7f8:	d001      	beq.n	800d7fe <_printf_i+0x176>
 800d7fa:	2710      	movs	r7, #16
 800d7fc:	e7aa      	b.n	800d754 <_printf_i+0xcc>
 800d7fe:	2220      	movs	r2, #32
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	4393      	bics	r3, r2
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	e7f8      	b.n	800d7fa <_printf_i+0x172>
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	680d      	ldr	r5, [r1, #0]
 800d80c:	1d10      	adds	r0, r2, #4
 800d80e:	6949      	ldr	r1, [r1, #20]
 800d810:	6018      	str	r0, [r3, #0]
 800d812:	6813      	ldr	r3, [r2, #0]
 800d814:	062e      	lsls	r6, r5, #24
 800d816:	d501      	bpl.n	800d81c <_printf_i+0x194>
 800d818:	6019      	str	r1, [r3, #0]
 800d81a:	e002      	b.n	800d822 <_printf_i+0x19a>
 800d81c:	066d      	lsls	r5, r5, #25
 800d81e:	d5fb      	bpl.n	800d818 <_printf_i+0x190>
 800d820:	8019      	strh	r1, [r3, #0]
 800d822:	2300      	movs	r3, #0
 800d824:	9d03      	ldr	r5, [sp, #12]
 800d826:	6123      	str	r3, [r4, #16]
 800d828:	e7bf      	b.n	800d7aa <_printf_i+0x122>
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	1d11      	adds	r1, r2, #4
 800d82e:	6019      	str	r1, [r3, #0]
 800d830:	6815      	ldr	r5, [r2, #0]
 800d832:	2100      	movs	r1, #0
 800d834:	0028      	movs	r0, r5
 800d836:	6862      	ldr	r2, [r4, #4]
 800d838:	f000 f918 	bl	800da6c <memchr>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d001      	beq.n	800d844 <_printf_i+0x1bc>
 800d840:	1b40      	subs	r0, r0, r5
 800d842:	6060      	str	r0, [r4, #4]
 800d844:	6863      	ldr	r3, [r4, #4]
 800d846:	6123      	str	r3, [r4, #16]
 800d848:	2300      	movs	r3, #0
 800d84a:	9a03      	ldr	r2, [sp, #12]
 800d84c:	7013      	strb	r3, [r2, #0]
 800d84e:	e7ac      	b.n	800d7aa <_printf_i+0x122>
 800d850:	002a      	movs	r2, r5
 800d852:	6923      	ldr	r3, [r4, #16]
 800d854:	9906      	ldr	r1, [sp, #24]
 800d856:	9805      	ldr	r0, [sp, #20]
 800d858:	9d07      	ldr	r5, [sp, #28]
 800d85a:	47a8      	blx	r5
 800d85c:	3001      	adds	r0, #1
 800d85e:	d0ae      	beq.n	800d7be <_printf_i+0x136>
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	079b      	lsls	r3, r3, #30
 800d864:	d415      	bmi.n	800d892 <_printf_i+0x20a>
 800d866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d868:	68e0      	ldr	r0, [r4, #12]
 800d86a:	4298      	cmp	r0, r3
 800d86c:	daa9      	bge.n	800d7c2 <_printf_i+0x13a>
 800d86e:	0018      	movs	r0, r3
 800d870:	e7a7      	b.n	800d7c2 <_printf_i+0x13a>
 800d872:	0022      	movs	r2, r4
 800d874:	2301      	movs	r3, #1
 800d876:	9906      	ldr	r1, [sp, #24]
 800d878:	9805      	ldr	r0, [sp, #20]
 800d87a:	9e07      	ldr	r6, [sp, #28]
 800d87c:	3219      	adds	r2, #25
 800d87e:	47b0      	blx	r6
 800d880:	3001      	adds	r0, #1
 800d882:	d09c      	beq.n	800d7be <_printf_i+0x136>
 800d884:	3501      	adds	r5, #1
 800d886:	68e3      	ldr	r3, [r4, #12]
 800d888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d88a:	1a9b      	subs	r3, r3, r2
 800d88c:	42ab      	cmp	r3, r5
 800d88e:	dcf0      	bgt.n	800d872 <_printf_i+0x1ea>
 800d890:	e7e9      	b.n	800d866 <_printf_i+0x1de>
 800d892:	2500      	movs	r5, #0
 800d894:	e7f7      	b.n	800d886 <_printf_i+0x1fe>
 800d896:	46c0      	nop			@ (mov r8, r8)
 800d898:	0800ef4e 	.word	0x0800ef4e
 800d89c:	0800ef5f 	.word	0x0800ef5f

0800d8a0 <__sflush_r>:
 800d8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8a2:	220c      	movs	r2, #12
 800d8a4:	5e8b      	ldrsh	r3, [r1, r2]
 800d8a6:	0005      	movs	r5, r0
 800d8a8:	000c      	movs	r4, r1
 800d8aa:	071a      	lsls	r2, r3, #28
 800d8ac:	d456      	bmi.n	800d95c <__sflush_r+0xbc>
 800d8ae:	684a      	ldr	r2, [r1, #4]
 800d8b0:	2a00      	cmp	r2, #0
 800d8b2:	dc02      	bgt.n	800d8ba <__sflush_r+0x1a>
 800d8b4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800d8b6:	2a00      	cmp	r2, #0
 800d8b8:	dd4e      	ble.n	800d958 <__sflush_r+0xb8>
 800d8ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d8bc:	2f00      	cmp	r7, #0
 800d8be:	d04b      	beq.n	800d958 <__sflush_r+0xb8>
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	2080      	movs	r0, #128	@ 0x80
 800d8c4:	682e      	ldr	r6, [r5, #0]
 800d8c6:	602a      	str	r2, [r5, #0]
 800d8c8:	001a      	movs	r2, r3
 800d8ca:	0140      	lsls	r0, r0, #5
 800d8cc:	6a21      	ldr	r1, [r4, #32]
 800d8ce:	4002      	ands	r2, r0
 800d8d0:	4203      	tst	r3, r0
 800d8d2:	d033      	beq.n	800d93c <__sflush_r+0x9c>
 800d8d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8d6:	89a3      	ldrh	r3, [r4, #12]
 800d8d8:	075b      	lsls	r3, r3, #29
 800d8da:	d506      	bpl.n	800d8ea <__sflush_r+0x4a>
 800d8dc:	6863      	ldr	r3, [r4, #4]
 800d8de:	1ad2      	subs	r2, r2, r3
 800d8e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d001      	beq.n	800d8ea <__sflush_r+0x4a>
 800d8e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8e8:	1ad2      	subs	r2, r2, r3
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	0028      	movs	r0, r5
 800d8ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d8f0:	6a21      	ldr	r1, [r4, #32]
 800d8f2:	47b8      	blx	r7
 800d8f4:	89a2      	ldrh	r2, [r4, #12]
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d106      	bne.n	800d908 <__sflush_r+0x68>
 800d8fa:	6829      	ldr	r1, [r5, #0]
 800d8fc:	291d      	cmp	r1, #29
 800d8fe:	d846      	bhi.n	800d98e <__sflush_r+0xee>
 800d900:	4b29      	ldr	r3, [pc, #164]	@ (800d9a8 <__sflush_r+0x108>)
 800d902:	40cb      	lsrs	r3, r1
 800d904:	07db      	lsls	r3, r3, #31
 800d906:	d542      	bpl.n	800d98e <__sflush_r+0xee>
 800d908:	2300      	movs	r3, #0
 800d90a:	6063      	str	r3, [r4, #4]
 800d90c:	6923      	ldr	r3, [r4, #16]
 800d90e:	6023      	str	r3, [r4, #0]
 800d910:	04d2      	lsls	r2, r2, #19
 800d912:	d505      	bpl.n	800d920 <__sflush_r+0x80>
 800d914:	1c43      	adds	r3, r0, #1
 800d916:	d102      	bne.n	800d91e <__sflush_r+0x7e>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d100      	bne.n	800d920 <__sflush_r+0x80>
 800d91e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d922:	602e      	str	r6, [r5, #0]
 800d924:	2900      	cmp	r1, #0
 800d926:	d017      	beq.n	800d958 <__sflush_r+0xb8>
 800d928:	0023      	movs	r3, r4
 800d92a:	3344      	adds	r3, #68	@ 0x44
 800d92c:	4299      	cmp	r1, r3
 800d92e:	d002      	beq.n	800d936 <__sflush_r+0x96>
 800d930:	0028      	movs	r0, r5
 800d932:	f7fe fb99 	bl	800c068 <_free_r>
 800d936:	2300      	movs	r3, #0
 800d938:	6363      	str	r3, [r4, #52]	@ 0x34
 800d93a:	e00d      	b.n	800d958 <__sflush_r+0xb8>
 800d93c:	2301      	movs	r3, #1
 800d93e:	0028      	movs	r0, r5
 800d940:	47b8      	blx	r7
 800d942:	0002      	movs	r2, r0
 800d944:	1c43      	adds	r3, r0, #1
 800d946:	d1c6      	bne.n	800d8d6 <__sflush_r+0x36>
 800d948:	682b      	ldr	r3, [r5, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d0c3      	beq.n	800d8d6 <__sflush_r+0x36>
 800d94e:	2b1d      	cmp	r3, #29
 800d950:	d001      	beq.n	800d956 <__sflush_r+0xb6>
 800d952:	2b16      	cmp	r3, #22
 800d954:	d11a      	bne.n	800d98c <__sflush_r+0xec>
 800d956:	602e      	str	r6, [r5, #0]
 800d958:	2000      	movs	r0, #0
 800d95a:	e01e      	b.n	800d99a <__sflush_r+0xfa>
 800d95c:	690e      	ldr	r6, [r1, #16]
 800d95e:	2e00      	cmp	r6, #0
 800d960:	d0fa      	beq.n	800d958 <__sflush_r+0xb8>
 800d962:	680f      	ldr	r7, [r1, #0]
 800d964:	600e      	str	r6, [r1, #0]
 800d966:	1bba      	subs	r2, r7, r6
 800d968:	9201      	str	r2, [sp, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	079b      	lsls	r3, r3, #30
 800d96e:	d100      	bne.n	800d972 <__sflush_r+0xd2>
 800d970:	694a      	ldr	r2, [r1, #20]
 800d972:	60a2      	str	r2, [r4, #8]
 800d974:	9b01      	ldr	r3, [sp, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	ddee      	ble.n	800d958 <__sflush_r+0xb8>
 800d97a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d97c:	0032      	movs	r2, r6
 800d97e:	001f      	movs	r7, r3
 800d980:	0028      	movs	r0, r5
 800d982:	9b01      	ldr	r3, [sp, #4]
 800d984:	6a21      	ldr	r1, [r4, #32]
 800d986:	47b8      	blx	r7
 800d988:	2800      	cmp	r0, #0
 800d98a:	dc07      	bgt.n	800d99c <__sflush_r+0xfc>
 800d98c:	89a2      	ldrh	r2, [r4, #12]
 800d98e:	2340      	movs	r3, #64	@ 0x40
 800d990:	2001      	movs	r0, #1
 800d992:	4313      	orrs	r3, r2
 800d994:	b21b      	sxth	r3, r3
 800d996:	81a3      	strh	r3, [r4, #12]
 800d998:	4240      	negs	r0, r0
 800d99a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d99c:	9b01      	ldr	r3, [sp, #4]
 800d99e:	1836      	adds	r6, r6, r0
 800d9a0:	1a1b      	subs	r3, r3, r0
 800d9a2:	9301      	str	r3, [sp, #4]
 800d9a4:	e7e6      	b.n	800d974 <__sflush_r+0xd4>
 800d9a6:	46c0      	nop			@ (mov r8, r8)
 800d9a8:	20400001 	.word	0x20400001

0800d9ac <_fflush_r>:
 800d9ac:	690b      	ldr	r3, [r1, #16]
 800d9ae:	b570      	push	{r4, r5, r6, lr}
 800d9b0:	0005      	movs	r5, r0
 800d9b2:	000c      	movs	r4, r1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <_fflush_r+0x12>
 800d9b8:	2500      	movs	r5, #0
 800d9ba:	0028      	movs	r0, r5
 800d9bc:	bd70      	pop	{r4, r5, r6, pc}
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d004      	beq.n	800d9cc <_fflush_r+0x20>
 800d9c2:	6a03      	ldr	r3, [r0, #32]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d101      	bne.n	800d9cc <_fflush_r+0x20>
 800d9c8:	f7fe f976 	bl	800bcb8 <__sinit>
 800d9cc:	220c      	movs	r2, #12
 800d9ce:	5ea3      	ldrsh	r3, [r4, r2]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d0f1      	beq.n	800d9b8 <_fflush_r+0xc>
 800d9d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9d6:	07d2      	lsls	r2, r2, #31
 800d9d8:	d404      	bmi.n	800d9e4 <_fflush_r+0x38>
 800d9da:	059b      	lsls	r3, r3, #22
 800d9dc:	d402      	bmi.n	800d9e4 <_fflush_r+0x38>
 800d9de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9e0:	f7fe fb13 	bl	800c00a <__retarget_lock_acquire_recursive>
 800d9e4:	0028      	movs	r0, r5
 800d9e6:	0021      	movs	r1, r4
 800d9e8:	f7ff ff5a 	bl	800d8a0 <__sflush_r>
 800d9ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9ee:	0005      	movs	r5, r0
 800d9f0:	07db      	lsls	r3, r3, #31
 800d9f2:	d4e2      	bmi.n	800d9ba <_fflush_r+0xe>
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	059b      	lsls	r3, r3, #22
 800d9f8:	d4df      	bmi.n	800d9ba <_fflush_r+0xe>
 800d9fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9fc:	f7fe fb06 	bl	800c00c <__retarget_lock_release_recursive>
 800da00:	e7db      	b.n	800d9ba <_fflush_r+0xe>
	...

0800da04 <fiprintf>:
 800da04:	b40e      	push	{r1, r2, r3}
 800da06:	b517      	push	{r0, r1, r2, r4, lr}
 800da08:	4c05      	ldr	r4, [pc, #20]	@ (800da20 <fiprintf+0x1c>)
 800da0a:	ab05      	add	r3, sp, #20
 800da0c:	cb04      	ldmia	r3!, {r2}
 800da0e:	0001      	movs	r1, r0
 800da10:	6820      	ldr	r0, [r4, #0]
 800da12:	9301      	str	r3, [sp, #4]
 800da14:	f000 f8c0 	bl	800db98 <_vfiprintf_r>
 800da18:	bc1e      	pop	{r1, r2, r3, r4}
 800da1a:	bc08      	pop	{r3}
 800da1c:	b003      	add	sp, #12
 800da1e:	4718      	bx	r3
 800da20:	20000184 	.word	0x20000184

0800da24 <memmove>:
 800da24:	b510      	push	{r4, lr}
 800da26:	4288      	cmp	r0, r1
 800da28:	d902      	bls.n	800da30 <memmove+0xc>
 800da2a:	188b      	adds	r3, r1, r2
 800da2c:	4298      	cmp	r0, r3
 800da2e:	d308      	bcc.n	800da42 <memmove+0x1e>
 800da30:	2300      	movs	r3, #0
 800da32:	429a      	cmp	r2, r3
 800da34:	d007      	beq.n	800da46 <memmove+0x22>
 800da36:	5ccc      	ldrb	r4, [r1, r3]
 800da38:	54c4      	strb	r4, [r0, r3]
 800da3a:	3301      	adds	r3, #1
 800da3c:	e7f9      	b.n	800da32 <memmove+0xe>
 800da3e:	5c8b      	ldrb	r3, [r1, r2]
 800da40:	5483      	strb	r3, [r0, r2]
 800da42:	3a01      	subs	r2, #1
 800da44:	d2fb      	bcs.n	800da3e <memmove+0x1a>
 800da46:	bd10      	pop	{r4, pc}

0800da48 <_sbrk_r>:
 800da48:	2300      	movs	r3, #0
 800da4a:	b570      	push	{r4, r5, r6, lr}
 800da4c:	4d06      	ldr	r5, [pc, #24]	@ (800da68 <_sbrk_r+0x20>)
 800da4e:	0004      	movs	r4, r0
 800da50:	0008      	movs	r0, r1
 800da52:	602b      	str	r3, [r5, #0]
 800da54:	f7fa f9c6 	bl	8007de4 <_sbrk>
 800da58:	1c43      	adds	r3, r0, #1
 800da5a:	d103      	bne.n	800da64 <_sbrk_r+0x1c>
 800da5c:	682b      	ldr	r3, [r5, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d000      	beq.n	800da64 <_sbrk_r+0x1c>
 800da62:	6023      	str	r3, [r4, #0]
 800da64:	bd70      	pop	{r4, r5, r6, pc}
 800da66:	46c0      	nop			@ (mov r8, r8)
 800da68:	20000584 	.word	0x20000584

0800da6c <memchr>:
 800da6c:	b2c9      	uxtb	r1, r1
 800da6e:	1882      	adds	r2, r0, r2
 800da70:	4290      	cmp	r0, r2
 800da72:	d101      	bne.n	800da78 <memchr+0xc>
 800da74:	2000      	movs	r0, #0
 800da76:	4770      	bx	lr
 800da78:	7803      	ldrb	r3, [r0, #0]
 800da7a:	428b      	cmp	r3, r1
 800da7c:	d0fb      	beq.n	800da76 <memchr+0xa>
 800da7e:	3001      	adds	r0, #1
 800da80:	e7f6      	b.n	800da70 <memchr+0x4>

0800da82 <abort>:
 800da82:	2006      	movs	r0, #6
 800da84:	b510      	push	{r4, lr}
 800da86:	f000 fa6d 	bl	800df64 <raise>
 800da8a:	2001      	movs	r0, #1
 800da8c:	f7fa f937 	bl	8007cfe <_exit>

0800da90 <_calloc_r>:
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	0c0b      	lsrs	r3, r1, #16
 800da94:	0c15      	lsrs	r5, r2, #16
 800da96:	2b00      	cmp	r3, #0
 800da98:	d11e      	bne.n	800dad8 <_calloc_r+0x48>
 800da9a:	2d00      	cmp	r5, #0
 800da9c:	d10c      	bne.n	800dab8 <_calloc_r+0x28>
 800da9e:	b289      	uxth	r1, r1
 800daa0:	b294      	uxth	r4, r2
 800daa2:	434c      	muls	r4, r1
 800daa4:	0021      	movs	r1, r4
 800daa6:	f7fe feaf 	bl	800c808 <_malloc_r>
 800daaa:	1e05      	subs	r5, r0, #0
 800daac:	d01b      	beq.n	800dae6 <_calloc_r+0x56>
 800daae:	0022      	movs	r2, r4
 800dab0:	2100      	movs	r1, #0
 800dab2:	f7fe f9b7 	bl	800be24 <memset>
 800dab6:	e016      	b.n	800dae6 <_calloc_r+0x56>
 800dab8:	1c2b      	adds	r3, r5, #0
 800daba:	1c0c      	adds	r4, r1, #0
 800dabc:	b289      	uxth	r1, r1
 800dabe:	b292      	uxth	r2, r2
 800dac0:	434a      	muls	r2, r1
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	b2a1      	uxth	r1, r4
 800dac6:	4359      	muls	r1, r3
 800dac8:	0c14      	lsrs	r4, r2, #16
 800daca:	190c      	adds	r4, r1, r4
 800dacc:	0c23      	lsrs	r3, r4, #16
 800dace:	d107      	bne.n	800dae0 <_calloc_r+0x50>
 800dad0:	0424      	lsls	r4, r4, #16
 800dad2:	b292      	uxth	r2, r2
 800dad4:	4314      	orrs	r4, r2
 800dad6:	e7e5      	b.n	800daa4 <_calloc_r+0x14>
 800dad8:	2d00      	cmp	r5, #0
 800dada:	d101      	bne.n	800dae0 <_calloc_r+0x50>
 800dadc:	1c14      	adds	r4, r2, #0
 800dade:	e7ed      	b.n	800dabc <_calloc_r+0x2c>
 800dae0:	230c      	movs	r3, #12
 800dae2:	2500      	movs	r5, #0
 800dae4:	6003      	str	r3, [r0, #0]
 800dae6:	0028      	movs	r0, r5
 800dae8:	bd70      	pop	{r4, r5, r6, pc}

0800daea <_realloc_r>:
 800daea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daec:	0006      	movs	r6, r0
 800daee:	000c      	movs	r4, r1
 800daf0:	0015      	movs	r5, r2
 800daf2:	2900      	cmp	r1, #0
 800daf4:	d105      	bne.n	800db02 <_realloc_r+0x18>
 800daf6:	0011      	movs	r1, r2
 800daf8:	f7fe fe86 	bl	800c808 <_malloc_r>
 800dafc:	0004      	movs	r4, r0
 800dafe:	0020      	movs	r0, r4
 800db00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db02:	2a00      	cmp	r2, #0
 800db04:	d103      	bne.n	800db0e <_realloc_r+0x24>
 800db06:	f7fe faaf 	bl	800c068 <_free_r>
 800db0a:	002c      	movs	r4, r5
 800db0c:	e7f7      	b.n	800dafe <_realloc_r+0x14>
 800db0e:	f000 fa49 	bl	800dfa4 <_malloc_usable_size_r>
 800db12:	0007      	movs	r7, r0
 800db14:	4285      	cmp	r5, r0
 800db16:	d802      	bhi.n	800db1e <_realloc_r+0x34>
 800db18:	0843      	lsrs	r3, r0, #1
 800db1a:	42ab      	cmp	r3, r5
 800db1c:	d3ef      	bcc.n	800dafe <_realloc_r+0x14>
 800db1e:	0029      	movs	r1, r5
 800db20:	0030      	movs	r0, r6
 800db22:	f7fe fe71 	bl	800c808 <_malloc_r>
 800db26:	9001      	str	r0, [sp, #4]
 800db28:	2800      	cmp	r0, #0
 800db2a:	d101      	bne.n	800db30 <_realloc_r+0x46>
 800db2c:	9c01      	ldr	r4, [sp, #4]
 800db2e:	e7e6      	b.n	800dafe <_realloc_r+0x14>
 800db30:	002a      	movs	r2, r5
 800db32:	42bd      	cmp	r5, r7
 800db34:	d900      	bls.n	800db38 <_realloc_r+0x4e>
 800db36:	003a      	movs	r2, r7
 800db38:	0021      	movs	r1, r4
 800db3a:	9801      	ldr	r0, [sp, #4]
 800db3c:	f7fe fa67 	bl	800c00e <memcpy>
 800db40:	0021      	movs	r1, r4
 800db42:	0030      	movs	r0, r6
 800db44:	f7fe fa90 	bl	800c068 <_free_r>
 800db48:	e7f0      	b.n	800db2c <_realloc_r+0x42>

0800db4a <__sfputc_r>:
 800db4a:	6893      	ldr	r3, [r2, #8]
 800db4c:	b510      	push	{r4, lr}
 800db4e:	3b01      	subs	r3, #1
 800db50:	6093      	str	r3, [r2, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	da04      	bge.n	800db60 <__sfputc_r+0x16>
 800db56:	6994      	ldr	r4, [r2, #24]
 800db58:	42a3      	cmp	r3, r4
 800db5a:	db07      	blt.n	800db6c <__sfputc_r+0x22>
 800db5c:	290a      	cmp	r1, #10
 800db5e:	d005      	beq.n	800db6c <__sfputc_r+0x22>
 800db60:	6813      	ldr	r3, [r2, #0]
 800db62:	1c58      	adds	r0, r3, #1
 800db64:	6010      	str	r0, [r2, #0]
 800db66:	7019      	strb	r1, [r3, #0]
 800db68:	0008      	movs	r0, r1
 800db6a:	bd10      	pop	{r4, pc}
 800db6c:	f000 f930 	bl	800ddd0 <__swbuf_r>
 800db70:	0001      	movs	r1, r0
 800db72:	e7f9      	b.n	800db68 <__sfputc_r+0x1e>

0800db74 <__sfputs_r>:
 800db74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db76:	0006      	movs	r6, r0
 800db78:	000f      	movs	r7, r1
 800db7a:	0014      	movs	r4, r2
 800db7c:	18d5      	adds	r5, r2, r3
 800db7e:	42ac      	cmp	r4, r5
 800db80:	d101      	bne.n	800db86 <__sfputs_r+0x12>
 800db82:	2000      	movs	r0, #0
 800db84:	e007      	b.n	800db96 <__sfputs_r+0x22>
 800db86:	7821      	ldrb	r1, [r4, #0]
 800db88:	003a      	movs	r2, r7
 800db8a:	0030      	movs	r0, r6
 800db8c:	f7ff ffdd 	bl	800db4a <__sfputc_r>
 800db90:	3401      	adds	r4, #1
 800db92:	1c43      	adds	r3, r0, #1
 800db94:	d1f3      	bne.n	800db7e <__sfputs_r+0xa>
 800db96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db98 <_vfiprintf_r>:
 800db98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db9a:	b0a1      	sub	sp, #132	@ 0x84
 800db9c:	000f      	movs	r7, r1
 800db9e:	0015      	movs	r5, r2
 800dba0:	001e      	movs	r6, r3
 800dba2:	9003      	str	r0, [sp, #12]
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d004      	beq.n	800dbb2 <_vfiprintf_r+0x1a>
 800dba8:	6a03      	ldr	r3, [r0, #32]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d101      	bne.n	800dbb2 <_vfiprintf_r+0x1a>
 800dbae:	f7fe f883 	bl	800bcb8 <__sinit>
 800dbb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dbb4:	07db      	lsls	r3, r3, #31
 800dbb6:	d405      	bmi.n	800dbc4 <_vfiprintf_r+0x2c>
 800dbb8:	89bb      	ldrh	r3, [r7, #12]
 800dbba:	059b      	lsls	r3, r3, #22
 800dbbc:	d402      	bmi.n	800dbc4 <_vfiprintf_r+0x2c>
 800dbbe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800dbc0:	f7fe fa23 	bl	800c00a <__retarget_lock_acquire_recursive>
 800dbc4:	89bb      	ldrh	r3, [r7, #12]
 800dbc6:	071b      	lsls	r3, r3, #28
 800dbc8:	d502      	bpl.n	800dbd0 <_vfiprintf_r+0x38>
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d113      	bne.n	800dbf8 <_vfiprintf_r+0x60>
 800dbd0:	0039      	movs	r1, r7
 800dbd2:	9803      	ldr	r0, [sp, #12]
 800dbd4:	f000 f93e 	bl	800de54 <__swsetup_r>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d00d      	beq.n	800dbf8 <_vfiprintf_r+0x60>
 800dbdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dbde:	07db      	lsls	r3, r3, #31
 800dbe0:	d503      	bpl.n	800dbea <_vfiprintf_r+0x52>
 800dbe2:	2001      	movs	r0, #1
 800dbe4:	4240      	negs	r0, r0
 800dbe6:	b021      	add	sp, #132	@ 0x84
 800dbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbea:	89bb      	ldrh	r3, [r7, #12]
 800dbec:	059b      	lsls	r3, r3, #22
 800dbee:	d4f8      	bmi.n	800dbe2 <_vfiprintf_r+0x4a>
 800dbf0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800dbf2:	f7fe fa0b 	bl	800c00c <__retarget_lock_release_recursive>
 800dbf6:	e7f4      	b.n	800dbe2 <_vfiprintf_r+0x4a>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	ac08      	add	r4, sp, #32
 800dbfc:	6163      	str	r3, [r4, #20]
 800dbfe:	3320      	adds	r3, #32
 800dc00:	7663      	strb	r3, [r4, #25]
 800dc02:	3310      	adds	r3, #16
 800dc04:	76a3      	strb	r3, [r4, #26]
 800dc06:	9607      	str	r6, [sp, #28]
 800dc08:	002e      	movs	r6, r5
 800dc0a:	7833      	ldrb	r3, [r6, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <_vfiprintf_r+0x7c>
 800dc10:	2b25      	cmp	r3, #37	@ 0x25
 800dc12:	d148      	bne.n	800dca6 <_vfiprintf_r+0x10e>
 800dc14:	1b73      	subs	r3, r6, r5
 800dc16:	9305      	str	r3, [sp, #20]
 800dc18:	42ae      	cmp	r6, r5
 800dc1a:	d00b      	beq.n	800dc34 <_vfiprintf_r+0x9c>
 800dc1c:	002a      	movs	r2, r5
 800dc1e:	0039      	movs	r1, r7
 800dc20:	9803      	ldr	r0, [sp, #12]
 800dc22:	f7ff ffa7 	bl	800db74 <__sfputs_r>
 800dc26:	3001      	adds	r0, #1
 800dc28:	d100      	bne.n	800dc2c <_vfiprintf_r+0x94>
 800dc2a:	e0ae      	b.n	800dd8a <_vfiprintf_r+0x1f2>
 800dc2c:	6963      	ldr	r3, [r4, #20]
 800dc2e:	9a05      	ldr	r2, [sp, #20]
 800dc30:	189b      	adds	r3, r3, r2
 800dc32:	6163      	str	r3, [r4, #20]
 800dc34:	7833      	ldrb	r3, [r6, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d100      	bne.n	800dc3c <_vfiprintf_r+0xa4>
 800dc3a:	e0a6      	b.n	800dd8a <_vfiprintf_r+0x1f2>
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	2300      	movs	r3, #0
 800dc40:	4252      	negs	r2, r2
 800dc42:	6062      	str	r2, [r4, #4]
 800dc44:	a904      	add	r1, sp, #16
 800dc46:	3254      	adds	r2, #84	@ 0x54
 800dc48:	1852      	adds	r2, r2, r1
 800dc4a:	1c75      	adds	r5, r6, #1
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	60e3      	str	r3, [r4, #12]
 800dc50:	60a3      	str	r3, [r4, #8]
 800dc52:	7013      	strb	r3, [r2, #0]
 800dc54:	65a3      	str	r3, [r4, #88]	@ 0x58
 800dc56:	4b59      	ldr	r3, [pc, #356]	@ (800ddbc <_vfiprintf_r+0x224>)
 800dc58:	2205      	movs	r2, #5
 800dc5a:	0018      	movs	r0, r3
 800dc5c:	7829      	ldrb	r1, [r5, #0]
 800dc5e:	9305      	str	r3, [sp, #20]
 800dc60:	f7ff ff04 	bl	800da6c <memchr>
 800dc64:	1c6e      	adds	r6, r5, #1
 800dc66:	2800      	cmp	r0, #0
 800dc68:	d11f      	bne.n	800dcaa <_vfiprintf_r+0x112>
 800dc6a:	6822      	ldr	r2, [r4, #0]
 800dc6c:	06d3      	lsls	r3, r2, #27
 800dc6e:	d504      	bpl.n	800dc7a <_vfiprintf_r+0xe2>
 800dc70:	2353      	movs	r3, #83	@ 0x53
 800dc72:	a904      	add	r1, sp, #16
 800dc74:	185b      	adds	r3, r3, r1
 800dc76:	2120      	movs	r1, #32
 800dc78:	7019      	strb	r1, [r3, #0]
 800dc7a:	0713      	lsls	r3, r2, #28
 800dc7c:	d504      	bpl.n	800dc88 <_vfiprintf_r+0xf0>
 800dc7e:	2353      	movs	r3, #83	@ 0x53
 800dc80:	a904      	add	r1, sp, #16
 800dc82:	185b      	adds	r3, r3, r1
 800dc84:	212b      	movs	r1, #43	@ 0x2b
 800dc86:	7019      	strb	r1, [r3, #0]
 800dc88:	782b      	ldrb	r3, [r5, #0]
 800dc8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc8c:	d016      	beq.n	800dcbc <_vfiprintf_r+0x124>
 800dc8e:	002e      	movs	r6, r5
 800dc90:	2100      	movs	r1, #0
 800dc92:	200a      	movs	r0, #10
 800dc94:	68e3      	ldr	r3, [r4, #12]
 800dc96:	7832      	ldrb	r2, [r6, #0]
 800dc98:	1c75      	adds	r5, r6, #1
 800dc9a:	3a30      	subs	r2, #48	@ 0x30
 800dc9c:	2a09      	cmp	r2, #9
 800dc9e:	d950      	bls.n	800dd42 <_vfiprintf_r+0x1aa>
 800dca0:	2900      	cmp	r1, #0
 800dca2:	d111      	bne.n	800dcc8 <_vfiprintf_r+0x130>
 800dca4:	e017      	b.n	800dcd6 <_vfiprintf_r+0x13e>
 800dca6:	3601      	adds	r6, #1
 800dca8:	e7af      	b.n	800dc0a <_vfiprintf_r+0x72>
 800dcaa:	9b05      	ldr	r3, [sp, #20]
 800dcac:	6822      	ldr	r2, [r4, #0]
 800dcae:	1ac0      	subs	r0, r0, r3
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	4083      	lsls	r3, r0
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	0035      	movs	r5, r6
 800dcb8:	6023      	str	r3, [r4, #0]
 800dcba:	e7cc      	b.n	800dc56 <_vfiprintf_r+0xbe>
 800dcbc:	9b07      	ldr	r3, [sp, #28]
 800dcbe:	1d19      	adds	r1, r3, #4
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	9107      	str	r1, [sp, #28]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	db01      	blt.n	800dccc <_vfiprintf_r+0x134>
 800dcc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcca:	e004      	b.n	800dcd6 <_vfiprintf_r+0x13e>
 800dccc:	425b      	negs	r3, r3
 800dcce:	60e3      	str	r3, [r4, #12]
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	7833      	ldrb	r3, [r6, #0]
 800dcd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcda:	d10c      	bne.n	800dcf6 <_vfiprintf_r+0x15e>
 800dcdc:	7873      	ldrb	r3, [r6, #1]
 800dcde:	2b2a      	cmp	r3, #42	@ 0x2a
 800dce0:	d134      	bne.n	800dd4c <_vfiprintf_r+0x1b4>
 800dce2:	9b07      	ldr	r3, [sp, #28]
 800dce4:	3602      	adds	r6, #2
 800dce6:	1d1a      	adds	r2, r3, #4
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	9207      	str	r2, [sp, #28]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	da01      	bge.n	800dcf4 <_vfiprintf_r+0x15c>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	425b      	negs	r3, r3
 800dcf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcf6:	4d32      	ldr	r5, [pc, #200]	@ (800ddc0 <_vfiprintf_r+0x228>)
 800dcf8:	2203      	movs	r2, #3
 800dcfa:	0028      	movs	r0, r5
 800dcfc:	7831      	ldrb	r1, [r6, #0]
 800dcfe:	f7ff feb5 	bl	800da6c <memchr>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d006      	beq.n	800dd14 <_vfiprintf_r+0x17c>
 800dd06:	2340      	movs	r3, #64	@ 0x40
 800dd08:	1b40      	subs	r0, r0, r5
 800dd0a:	4083      	lsls	r3, r0
 800dd0c:	6822      	ldr	r2, [r4, #0]
 800dd0e:	3601      	adds	r6, #1
 800dd10:	4313      	orrs	r3, r2
 800dd12:	6023      	str	r3, [r4, #0]
 800dd14:	7831      	ldrb	r1, [r6, #0]
 800dd16:	2206      	movs	r2, #6
 800dd18:	482a      	ldr	r0, [pc, #168]	@ (800ddc4 <_vfiprintf_r+0x22c>)
 800dd1a:	1c75      	adds	r5, r6, #1
 800dd1c:	7621      	strb	r1, [r4, #24]
 800dd1e:	f7ff fea5 	bl	800da6c <memchr>
 800dd22:	2800      	cmp	r0, #0
 800dd24:	d040      	beq.n	800dda8 <_vfiprintf_r+0x210>
 800dd26:	4b28      	ldr	r3, [pc, #160]	@ (800ddc8 <_vfiprintf_r+0x230>)
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d122      	bne.n	800dd72 <_vfiprintf_r+0x1da>
 800dd2c:	2207      	movs	r2, #7
 800dd2e:	9b07      	ldr	r3, [sp, #28]
 800dd30:	3307      	adds	r3, #7
 800dd32:	4393      	bics	r3, r2
 800dd34:	3308      	adds	r3, #8
 800dd36:	9307      	str	r3, [sp, #28]
 800dd38:	6963      	ldr	r3, [r4, #20]
 800dd3a:	9a04      	ldr	r2, [sp, #16]
 800dd3c:	189b      	adds	r3, r3, r2
 800dd3e:	6163      	str	r3, [r4, #20]
 800dd40:	e762      	b.n	800dc08 <_vfiprintf_r+0x70>
 800dd42:	4343      	muls	r3, r0
 800dd44:	002e      	movs	r6, r5
 800dd46:	2101      	movs	r1, #1
 800dd48:	189b      	adds	r3, r3, r2
 800dd4a:	e7a4      	b.n	800dc96 <_vfiprintf_r+0xfe>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	200a      	movs	r0, #10
 800dd50:	0019      	movs	r1, r3
 800dd52:	3601      	adds	r6, #1
 800dd54:	6063      	str	r3, [r4, #4]
 800dd56:	7832      	ldrb	r2, [r6, #0]
 800dd58:	1c75      	adds	r5, r6, #1
 800dd5a:	3a30      	subs	r2, #48	@ 0x30
 800dd5c:	2a09      	cmp	r2, #9
 800dd5e:	d903      	bls.n	800dd68 <_vfiprintf_r+0x1d0>
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d0c8      	beq.n	800dcf6 <_vfiprintf_r+0x15e>
 800dd64:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd66:	e7c6      	b.n	800dcf6 <_vfiprintf_r+0x15e>
 800dd68:	4341      	muls	r1, r0
 800dd6a:	002e      	movs	r6, r5
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	1889      	adds	r1, r1, r2
 800dd70:	e7f1      	b.n	800dd56 <_vfiprintf_r+0x1be>
 800dd72:	aa07      	add	r2, sp, #28
 800dd74:	9200      	str	r2, [sp, #0]
 800dd76:	0021      	movs	r1, r4
 800dd78:	003a      	movs	r2, r7
 800dd7a:	4b14      	ldr	r3, [pc, #80]	@ (800ddcc <_vfiprintf_r+0x234>)
 800dd7c:	9803      	ldr	r0, [sp, #12]
 800dd7e:	e000      	b.n	800dd82 <_vfiprintf_r+0x1ea>
 800dd80:	bf00      	nop
 800dd82:	9004      	str	r0, [sp, #16]
 800dd84:	9b04      	ldr	r3, [sp, #16]
 800dd86:	3301      	adds	r3, #1
 800dd88:	d1d6      	bne.n	800dd38 <_vfiprintf_r+0x1a0>
 800dd8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dd8c:	07db      	lsls	r3, r3, #31
 800dd8e:	d405      	bmi.n	800dd9c <_vfiprintf_r+0x204>
 800dd90:	89bb      	ldrh	r3, [r7, #12]
 800dd92:	059b      	lsls	r3, r3, #22
 800dd94:	d402      	bmi.n	800dd9c <_vfiprintf_r+0x204>
 800dd96:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800dd98:	f7fe f938 	bl	800c00c <__retarget_lock_release_recursive>
 800dd9c:	89bb      	ldrh	r3, [r7, #12]
 800dd9e:	065b      	lsls	r3, r3, #25
 800dda0:	d500      	bpl.n	800dda4 <_vfiprintf_r+0x20c>
 800dda2:	e71e      	b.n	800dbe2 <_vfiprintf_r+0x4a>
 800dda4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800dda6:	e71e      	b.n	800dbe6 <_vfiprintf_r+0x4e>
 800dda8:	aa07      	add	r2, sp, #28
 800ddaa:	9200      	str	r2, [sp, #0]
 800ddac:	0021      	movs	r1, r4
 800ddae:	003a      	movs	r2, r7
 800ddb0:	4b06      	ldr	r3, [pc, #24]	@ (800ddcc <_vfiprintf_r+0x234>)
 800ddb2:	9803      	ldr	r0, [sp, #12]
 800ddb4:	f7ff fc68 	bl	800d688 <_printf_i>
 800ddb8:	e7e3      	b.n	800dd82 <_vfiprintf_r+0x1ea>
 800ddba:	46c0      	nop			@ (mov r8, r8)
 800ddbc:	0800ef3d 	.word	0x0800ef3d
 800ddc0:	0800ef43 	.word	0x0800ef43
 800ddc4:	0800ef47 	.word	0x0800ef47
 800ddc8:	00000000 	.word	0x00000000
 800ddcc:	0800db75 	.word	0x0800db75

0800ddd0 <__swbuf_r>:
 800ddd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd2:	0006      	movs	r6, r0
 800ddd4:	000d      	movs	r5, r1
 800ddd6:	0014      	movs	r4, r2
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d004      	beq.n	800dde6 <__swbuf_r+0x16>
 800dddc:	6a03      	ldr	r3, [r0, #32]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d101      	bne.n	800dde6 <__swbuf_r+0x16>
 800dde2:	f7fd ff69 	bl	800bcb8 <__sinit>
 800dde6:	69a3      	ldr	r3, [r4, #24]
 800dde8:	60a3      	str	r3, [r4, #8]
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	071b      	lsls	r3, r3, #28
 800ddee:	d502      	bpl.n	800ddf6 <__swbuf_r+0x26>
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d109      	bne.n	800de0a <__swbuf_r+0x3a>
 800ddf6:	0021      	movs	r1, r4
 800ddf8:	0030      	movs	r0, r6
 800ddfa:	f000 f82b 	bl	800de54 <__swsetup_r>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d003      	beq.n	800de0a <__swbuf_r+0x3a>
 800de02:	2501      	movs	r5, #1
 800de04:	426d      	negs	r5, r5
 800de06:	0028      	movs	r0, r5
 800de08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de0a:	6923      	ldr	r3, [r4, #16]
 800de0c:	6820      	ldr	r0, [r4, #0]
 800de0e:	b2ef      	uxtb	r7, r5
 800de10:	1ac0      	subs	r0, r0, r3
 800de12:	6963      	ldr	r3, [r4, #20]
 800de14:	b2ed      	uxtb	r5, r5
 800de16:	4283      	cmp	r3, r0
 800de18:	dc05      	bgt.n	800de26 <__swbuf_r+0x56>
 800de1a:	0021      	movs	r1, r4
 800de1c:	0030      	movs	r0, r6
 800de1e:	f7ff fdc5 	bl	800d9ac <_fflush_r>
 800de22:	2800      	cmp	r0, #0
 800de24:	d1ed      	bne.n	800de02 <__swbuf_r+0x32>
 800de26:	68a3      	ldr	r3, [r4, #8]
 800de28:	3001      	adds	r0, #1
 800de2a:	3b01      	subs	r3, #1
 800de2c:	60a3      	str	r3, [r4, #8]
 800de2e:	6823      	ldr	r3, [r4, #0]
 800de30:	1c5a      	adds	r2, r3, #1
 800de32:	6022      	str	r2, [r4, #0]
 800de34:	701f      	strb	r7, [r3, #0]
 800de36:	6963      	ldr	r3, [r4, #20]
 800de38:	4283      	cmp	r3, r0
 800de3a:	d004      	beq.n	800de46 <__swbuf_r+0x76>
 800de3c:	89a3      	ldrh	r3, [r4, #12]
 800de3e:	07db      	lsls	r3, r3, #31
 800de40:	d5e1      	bpl.n	800de06 <__swbuf_r+0x36>
 800de42:	2d0a      	cmp	r5, #10
 800de44:	d1df      	bne.n	800de06 <__swbuf_r+0x36>
 800de46:	0021      	movs	r1, r4
 800de48:	0030      	movs	r0, r6
 800de4a:	f7ff fdaf 	bl	800d9ac <_fflush_r>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d0d9      	beq.n	800de06 <__swbuf_r+0x36>
 800de52:	e7d6      	b.n	800de02 <__swbuf_r+0x32>

0800de54 <__swsetup_r>:
 800de54:	4b2d      	ldr	r3, [pc, #180]	@ (800df0c <__swsetup_r+0xb8>)
 800de56:	b570      	push	{r4, r5, r6, lr}
 800de58:	0005      	movs	r5, r0
 800de5a:	6818      	ldr	r0, [r3, #0]
 800de5c:	000c      	movs	r4, r1
 800de5e:	2800      	cmp	r0, #0
 800de60:	d004      	beq.n	800de6c <__swsetup_r+0x18>
 800de62:	6a03      	ldr	r3, [r0, #32]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <__swsetup_r+0x18>
 800de68:	f7fd ff26 	bl	800bcb8 <__sinit>
 800de6c:	220c      	movs	r2, #12
 800de6e:	5ea3      	ldrsh	r3, [r4, r2]
 800de70:	071a      	lsls	r2, r3, #28
 800de72:	d423      	bmi.n	800debc <__swsetup_r+0x68>
 800de74:	06da      	lsls	r2, r3, #27
 800de76:	d407      	bmi.n	800de88 <__swsetup_r+0x34>
 800de78:	2209      	movs	r2, #9
 800de7a:	602a      	str	r2, [r5, #0]
 800de7c:	2240      	movs	r2, #64	@ 0x40
 800de7e:	2001      	movs	r0, #1
 800de80:	4313      	orrs	r3, r2
 800de82:	81a3      	strh	r3, [r4, #12]
 800de84:	4240      	negs	r0, r0
 800de86:	e03a      	b.n	800defe <__swsetup_r+0xaa>
 800de88:	075b      	lsls	r3, r3, #29
 800de8a:	d513      	bpl.n	800deb4 <__swsetup_r+0x60>
 800de8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de8e:	2900      	cmp	r1, #0
 800de90:	d008      	beq.n	800dea4 <__swsetup_r+0x50>
 800de92:	0023      	movs	r3, r4
 800de94:	3344      	adds	r3, #68	@ 0x44
 800de96:	4299      	cmp	r1, r3
 800de98:	d002      	beq.n	800dea0 <__swsetup_r+0x4c>
 800de9a:	0028      	movs	r0, r5
 800de9c:	f7fe f8e4 	bl	800c068 <_free_r>
 800dea0:	2300      	movs	r3, #0
 800dea2:	6363      	str	r3, [r4, #52]	@ 0x34
 800dea4:	2224      	movs	r2, #36	@ 0x24
 800dea6:	89a3      	ldrh	r3, [r4, #12]
 800dea8:	4393      	bics	r3, r2
 800deaa:	81a3      	strh	r3, [r4, #12]
 800deac:	2300      	movs	r3, #0
 800deae:	6063      	str	r3, [r4, #4]
 800deb0:	6923      	ldr	r3, [r4, #16]
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	2308      	movs	r3, #8
 800deb6:	89a2      	ldrh	r2, [r4, #12]
 800deb8:	4313      	orrs	r3, r2
 800deba:	81a3      	strh	r3, [r4, #12]
 800debc:	6923      	ldr	r3, [r4, #16]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d10b      	bne.n	800deda <__swsetup_r+0x86>
 800dec2:	21a0      	movs	r1, #160	@ 0xa0
 800dec4:	2280      	movs	r2, #128	@ 0x80
 800dec6:	89a3      	ldrh	r3, [r4, #12]
 800dec8:	0089      	lsls	r1, r1, #2
 800deca:	0092      	lsls	r2, r2, #2
 800decc:	400b      	ands	r3, r1
 800dece:	4293      	cmp	r3, r2
 800ded0:	d003      	beq.n	800deda <__swsetup_r+0x86>
 800ded2:	0021      	movs	r1, r4
 800ded4:	0028      	movs	r0, r5
 800ded6:	f000 f897 	bl	800e008 <__smakebuf_r>
 800deda:	220c      	movs	r2, #12
 800dedc:	5ea3      	ldrsh	r3, [r4, r2]
 800dede:	2101      	movs	r1, #1
 800dee0:	001a      	movs	r2, r3
 800dee2:	400a      	ands	r2, r1
 800dee4:	420b      	tst	r3, r1
 800dee6:	d00b      	beq.n	800df00 <__swsetup_r+0xac>
 800dee8:	2200      	movs	r2, #0
 800deea:	60a2      	str	r2, [r4, #8]
 800deec:	6962      	ldr	r2, [r4, #20]
 800deee:	4252      	negs	r2, r2
 800def0:	61a2      	str	r2, [r4, #24]
 800def2:	2000      	movs	r0, #0
 800def4:	6922      	ldr	r2, [r4, #16]
 800def6:	4282      	cmp	r2, r0
 800def8:	d101      	bne.n	800defe <__swsetup_r+0xaa>
 800defa:	061a      	lsls	r2, r3, #24
 800defc:	d4be      	bmi.n	800de7c <__swsetup_r+0x28>
 800defe:	bd70      	pop	{r4, r5, r6, pc}
 800df00:	0799      	lsls	r1, r3, #30
 800df02:	d400      	bmi.n	800df06 <__swsetup_r+0xb2>
 800df04:	6962      	ldr	r2, [r4, #20]
 800df06:	60a2      	str	r2, [r4, #8]
 800df08:	e7f3      	b.n	800def2 <__swsetup_r+0x9e>
 800df0a:	46c0      	nop			@ (mov r8, r8)
 800df0c:	20000184 	.word	0x20000184

0800df10 <_raise_r>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	0004      	movs	r4, r0
 800df14:	000d      	movs	r5, r1
 800df16:	291f      	cmp	r1, #31
 800df18:	d904      	bls.n	800df24 <_raise_r+0x14>
 800df1a:	2316      	movs	r3, #22
 800df1c:	6003      	str	r3, [r0, #0]
 800df1e:	2001      	movs	r0, #1
 800df20:	4240      	negs	r0, r0
 800df22:	bd70      	pop	{r4, r5, r6, pc}
 800df24:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800df26:	2b00      	cmp	r3, #0
 800df28:	d004      	beq.n	800df34 <_raise_r+0x24>
 800df2a:	008a      	lsls	r2, r1, #2
 800df2c:	189b      	adds	r3, r3, r2
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	2a00      	cmp	r2, #0
 800df32:	d108      	bne.n	800df46 <_raise_r+0x36>
 800df34:	0020      	movs	r0, r4
 800df36:	f000 f831 	bl	800df9c <_getpid_r>
 800df3a:	002a      	movs	r2, r5
 800df3c:	0001      	movs	r1, r0
 800df3e:	0020      	movs	r0, r4
 800df40:	f000 f81a 	bl	800df78 <_kill_r>
 800df44:	e7ed      	b.n	800df22 <_raise_r+0x12>
 800df46:	2a01      	cmp	r2, #1
 800df48:	d009      	beq.n	800df5e <_raise_r+0x4e>
 800df4a:	1c51      	adds	r1, r2, #1
 800df4c:	d103      	bne.n	800df56 <_raise_r+0x46>
 800df4e:	2316      	movs	r3, #22
 800df50:	6003      	str	r3, [r0, #0]
 800df52:	2001      	movs	r0, #1
 800df54:	e7e5      	b.n	800df22 <_raise_r+0x12>
 800df56:	2100      	movs	r1, #0
 800df58:	0028      	movs	r0, r5
 800df5a:	6019      	str	r1, [r3, #0]
 800df5c:	4790      	blx	r2
 800df5e:	2000      	movs	r0, #0
 800df60:	e7df      	b.n	800df22 <_raise_r+0x12>
	...

0800df64 <raise>:
 800df64:	b510      	push	{r4, lr}
 800df66:	4b03      	ldr	r3, [pc, #12]	@ (800df74 <raise+0x10>)
 800df68:	0001      	movs	r1, r0
 800df6a:	6818      	ldr	r0, [r3, #0]
 800df6c:	f7ff ffd0 	bl	800df10 <_raise_r>
 800df70:	bd10      	pop	{r4, pc}
 800df72:	46c0      	nop			@ (mov r8, r8)
 800df74:	20000184 	.word	0x20000184

0800df78 <_kill_r>:
 800df78:	2300      	movs	r3, #0
 800df7a:	b570      	push	{r4, r5, r6, lr}
 800df7c:	4d06      	ldr	r5, [pc, #24]	@ (800df98 <_kill_r+0x20>)
 800df7e:	0004      	movs	r4, r0
 800df80:	0008      	movs	r0, r1
 800df82:	0011      	movs	r1, r2
 800df84:	602b      	str	r3, [r5, #0]
 800df86:	f7f9 feaa 	bl	8007cde <_kill>
 800df8a:	1c43      	adds	r3, r0, #1
 800df8c:	d103      	bne.n	800df96 <_kill_r+0x1e>
 800df8e:	682b      	ldr	r3, [r5, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d000      	beq.n	800df96 <_kill_r+0x1e>
 800df94:	6023      	str	r3, [r4, #0]
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	20000584 	.word	0x20000584

0800df9c <_getpid_r>:
 800df9c:	b510      	push	{r4, lr}
 800df9e:	f7f9 fe98 	bl	8007cd2 <_getpid>
 800dfa2:	bd10      	pop	{r4, pc}

0800dfa4 <_malloc_usable_size_r>:
 800dfa4:	1f0b      	subs	r3, r1, #4
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	1f18      	subs	r0, r3, #4
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	da01      	bge.n	800dfb2 <_malloc_usable_size_r+0xe>
 800dfae:	580b      	ldr	r3, [r1, r0]
 800dfb0:	18c0      	adds	r0, r0, r3
 800dfb2:	4770      	bx	lr

0800dfb4 <__swhatbuf_r>:
 800dfb4:	b570      	push	{r4, r5, r6, lr}
 800dfb6:	000e      	movs	r6, r1
 800dfb8:	001d      	movs	r5, r3
 800dfba:	230e      	movs	r3, #14
 800dfbc:	5ec9      	ldrsh	r1, [r1, r3]
 800dfbe:	0014      	movs	r4, r2
 800dfc0:	b096      	sub	sp, #88	@ 0x58
 800dfc2:	2900      	cmp	r1, #0
 800dfc4:	da0c      	bge.n	800dfe0 <__swhatbuf_r+0x2c>
 800dfc6:	89b2      	ldrh	r2, [r6, #12]
 800dfc8:	2380      	movs	r3, #128	@ 0x80
 800dfca:	0011      	movs	r1, r2
 800dfcc:	4019      	ands	r1, r3
 800dfce:	421a      	tst	r2, r3
 800dfd0:	d114      	bne.n	800dffc <__swhatbuf_r+0x48>
 800dfd2:	2380      	movs	r3, #128	@ 0x80
 800dfd4:	00db      	lsls	r3, r3, #3
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	6029      	str	r1, [r5, #0]
 800dfda:	6023      	str	r3, [r4, #0]
 800dfdc:	b016      	add	sp, #88	@ 0x58
 800dfde:	bd70      	pop	{r4, r5, r6, pc}
 800dfe0:	466a      	mov	r2, sp
 800dfe2:	f000 f853 	bl	800e08c <_fstat_r>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	dbed      	blt.n	800dfc6 <__swhatbuf_r+0x12>
 800dfea:	23f0      	movs	r3, #240	@ 0xf0
 800dfec:	9901      	ldr	r1, [sp, #4]
 800dfee:	021b      	lsls	r3, r3, #8
 800dff0:	4019      	ands	r1, r3
 800dff2:	4b04      	ldr	r3, [pc, #16]	@ (800e004 <__swhatbuf_r+0x50>)
 800dff4:	18c9      	adds	r1, r1, r3
 800dff6:	424b      	negs	r3, r1
 800dff8:	4159      	adcs	r1, r3
 800dffa:	e7ea      	b.n	800dfd2 <__swhatbuf_r+0x1e>
 800dffc:	2100      	movs	r1, #0
 800dffe:	2340      	movs	r3, #64	@ 0x40
 800e000:	e7e9      	b.n	800dfd6 <__swhatbuf_r+0x22>
 800e002:	46c0      	nop			@ (mov r8, r8)
 800e004:	ffffe000 	.word	0xffffe000

0800e008 <__smakebuf_r>:
 800e008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e00a:	2602      	movs	r6, #2
 800e00c:	898b      	ldrh	r3, [r1, #12]
 800e00e:	0005      	movs	r5, r0
 800e010:	000c      	movs	r4, r1
 800e012:	b085      	sub	sp, #20
 800e014:	4233      	tst	r3, r6
 800e016:	d007      	beq.n	800e028 <__smakebuf_r+0x20>
 800e018:	0023      	movs	r3, r4
 800e01a:	3347      	adds	r3, #71	@ 0x47
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	6123      	str	r3, [r4, #16]
 800e020:	2301      	movs	r3, #1
 800e022:	6163      	str	r3, [r4, #20]
 800e024:	b005      	add	sp, #20
 800e026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e028:	ab03      	add	r3, sp, #12
 800e02a:	aa02      	add	r2, sp, #8
 800e02c:	f7ff ffc2 	bl	800dfb4 <__swhatbuf_r>
 800e030:	9f02      	ldr	r7, [sp, #8]
 800e032:	9001      	str	r0, [sp, #4]
 800e034:	0039      	movs	r1, r7
 800e036:	0028      	movs	r0, r5
 800e038:	f7fe fbe6 	bl	800c808 <_malloc_r>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d108      	bne.n	800e052 <__smakebuf_r+0x4a>
 800e040:	220c      	movs	r2, #12
 800e042:	5ea3      	ldrsh	r3, [r4, r2]
 800e044:	059a      	lsls	r2, r3, #22
 800e046:	d4ed      	bmi.n	800e024 <__smakebuf_r+0x1c>
 800e048:	2203      	movs	r2, #3
 800e04a:	4393      	bics	r3, r2
 800e04c:	431e      	orrs	r6, r3
 800e04e:	81a6      	strh	r6, [r4, #12]
 800e050:	e7e2      	b.n	800e018 <__smakebuf_r+0x10>
 800e052:	2380      	movs	r3, #128	@ 0x80
 800e054:	89a2      	ldrh	r2, [r4, #12]
 800e056:	6020      	str	r0, [r4, #0]
 800e058:	4313      	orrs	r3, r2
 800e05a:	81a3      	strh	r3, [r4, #12]
 800e05c:	9b03      	ldr	r3, [sp, #12]
 800e05e:	6120      	str	r0, [r4, #16]
 800e060:	6167      	str	r7, [r4, #20]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00c      	beq.n	800e080 <__smakebuf_r+0x78>
 800e066:	0028      	movs	r0, r5
 800e068:	230e      	movs	r3, #14
 800e06a:	5ee1      	ldrsh	r1, [r4, r3]
 800e06c:	f000 f820 	bl	800e0b0 <_isatty_r>
 800e070:	2800      	cmp	r0, #0
 800e072:	d005      	beq.n	800e080 <__smakebuf_r+0x78>
 800e074:	2303      	movs	r3, #3
 800e076:	89a2      	ldrh	r2, [r4, #12]
 800e078:	439a      	bics	r2, r3
 800e07a:	3b02      	subs	r3, #2
 800e07c:	4313      	orrs	r3, r2
 800e07e:	81a3      	strh	r3, [r4, #12]
 800e080:	89a3      	ldrh	r3, [r4, #12]
 800e082:	9a01      	ldr	r2, [sp, #4]
 800e084:	4313      	orrs	r3, r2
 800e086:	81a3      	strh	r3, [r4, #12]
 800e088:	e7cc      	b.n	800e024 <__smakebuf_r+0x1c>
	...

0800e08c <_fstat_r>:
 800e08c:	2300      	movs	r3, #0
 800e08e:	b570      	push	{r4, r5, r6, lr}
 800e090:	4d06      	ldr	r5, [pc, #24]	@ (800e0ac <_fstat_r+0x20>)
 800e092:	0004      	movs	r4, r0
 800e094:	0008      	movs	r0, r1
 800e096:	0011      	movs	r1, r2
 800e098:	602b      	str	r3, [r5, #0]
 800e09a:	f7f9 fe80 	bl	8007d9e <_fstat>
 800e09e:	1c43      	adds	r3, r0, #1
 800e0a0:	d103      	bne.n	800e0aa <_fstat_r+0x1e>
 800e0a2:	682b      	ldr	r3, [r5, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d000      	beq.n	800e0aa <_fstat_r+0x1e>
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}
 800e0ac:	20000584 	.word	0x20000584

0800e0b0 <_isatty_r>:
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	b570      	push	{r4, r5, r6, lr}
 800e0b4:	4d06      	ldr	r5, [pc, #24]	@ (800e0d0 <_isatty_r+0x20>)
 800e0b6:	0004      	movs	r4, r0
 800e0b8:	0008      	movs	r0, r1
 800e0ba:	602b      	str	r3, [r5, #0]
 800e0bc:	f7f9 fe7d 	bl	8007dba <_isatty>
 800e0c0:	1c43      	adds	r3, r0, #1
 800e0c2:	d103      	bne.n	800e0cc <_isatty_r+0x1c>
 800e0c4:	682b      	ldr	r3, [r5, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d000      	beq.n	800e0cc <_isatty_r+0x1c>
 800e0ca:	6023      	str	r3, [r4, #0]
 800e0cc:	bd70      	pop	{r4, r5, r6, pc}
 800e0ce:	46c0      	nop			@ (mov r8, r8)
 800e0d0:	20000584 	.word	0x20000584

0800e0d4 <_init>:
 800e0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d6:	46c0      	nop			@ (mov r8, r8)
 800e0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0da:	bc08      	pop	{r3}
 800e0dc:	469e      	mov	lr, r3
 800e0de:	4770      	bx	lr

0800e0e0 <_fini>:
 800e0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e2:	46c0      	nop			@ (mov r8, r8)
 800e0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0e6:	bc08      	pop	{r3}
 800e0e8:	469e      	mov	lr, r3
 800e0ea:	4770      	bx	lr
