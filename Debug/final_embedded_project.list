
final_embedded_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c90  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b64  08013d50  08013d50  00014d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080168b4  080168b4  000181f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080168b4  080168b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080168bc  080168bc  000181f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080168bc  080168bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080168c0  080168c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  080168c4  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200001f4  08016ab8  000181f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  08016ab8  0001861c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000181f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018edd  00000000  00000000  0001821c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c0  00000000  00000000  000310f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  000344c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f53  00000000  00000000  00035860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aedb  00000000  00000000  000367b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f8a  00000000  00000000  0005168e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3ce6  00000000  00000000  0006a618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e2fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f1c  00000000  00000000  0010e344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00114260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001f4 	.word	0x200001f4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08013d34 	.word	0x08013d34

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001f8 	.word	0x200001f8
 8000100:	08013d34 	.word	0x08013d34

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f9a5 	bl	800279c <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f002 f8e9 	bl	8002634 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f997 	bl	800279c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f98d 	bl	800279c <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f002 f913 	bl	80026bc <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f002 f909 	bl	80026bc <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fd1d 	bl	8000f00 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fca5 	bl	8000e20 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fd0f 	bl	8000f00 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fd05 	bl	8000f00 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fcb3 	bl	8000e70 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fca9 	bl	8000e70 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f88c 	bl	8000678 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	@ 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffd0 	bl	8000518 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f001 f8c5 	bl	800170c <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	@ 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fe5b 	bl	8001244 <__aeabi_fsub>
 800058e:	f001 f8bd 	bl	800170c <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	@ 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff7d 	bl	80004a4 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f003 f873 	bl	800369c <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f002 fc40 	bl	8002e44 <__aeabi_dsub>
 80005c4:	f003 f86a 	bl	800369c <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	@ 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__aeabi_d2lz>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	2200      	movs	r2, #0
 80005dc:	2300      	movs	r3, #0
 80005de:	0004      	movs	r4, r0
 80005e0:	000d      	movs	r5, r1
 80005e2:	f7ff ff41 	bl	8000468 <__aeabi_dcmplt>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	d108      	bne.n	80005fc <__aeabi_d2lz+0x24>
 80005ea:	0020      	movs	r0, r4
 80005ec:	0029      	movs	r1, r5
 80005ee:	f000 f80f 	bl	8000610 <__aeabi_d2ulz>
 80005f2:	0002      	movs	r2, r0
 80005f4:	000b      	movs	r3, r1
 80005f6:	0010      	movs	r0, r2
 80005f8:	0019      	movs	r1, r3
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	2380      	movs	r3, #128	@ 0x80
 80005fe:	061b      	lsls	r3, r3, #24
 8000600:	18e9      	adds	r1, r5, r3
 8000602:	0020      	movs	r0, r4
 8000604:	f000 f804 	bl	8000610 <__aeabi_d2ulz>
 8000608:	2300      	movs	r3, #0
 800060a:	4242      	negs	r2, r0
 800060c:	418b      	sbcs	r3, r1
 800060e:	e7f2      	b.n	80005f6 <__aeabi_d2lz+0x1e>

08000610 <__aeabi_d2ulz>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	2200      	movs	r2, #0
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <__aeabi_d2ulz+0x34>)
 8000616:	000d      	movs	r5, r1
 8000618:	0004      	movs	r4, r0
 800061a:	f002 f92d 	bl	8002878 <__aeabi_dmul>
 800061e:	f7ff ffbd 	bl	800059c <__aeabi_d2uiz>
 8000622:	0006      	movs	r6, r0
 8000624:	f003 f8a4 	bl	8003770 <__aeabi_ui2d>
 8000628:	2200      	movs	r2, #0
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <__aeabi_d2ulz+0x38>)
 800062c:	f002 f924 	bl	8002878 <__aeabi_dmul>
 8000630:	0002      	movs	r2, r0
 8000632:	000b      	movs	r3, r1
 8000634:	0020      	movs	r0, r4
 8000636:	0029      	movs	r1, r5
 8000638:	f002 fc04 	bl	8002e44 <__aeabi_dsub>
 800063c:	f7ff ffae 	bl	800059c <__aeabi_d2uiz>
 8000640:	0031      	movs	r1, r6
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	3df00000 	.word	0x3df00000
 8000648:	41f00000 	.word	0x41f00000

0800064c <__aeabi_l2d>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	0006      	movs	r6, r0
 8000650:	0008      	movs	r0, r1
 8000652:	f003 f85f 	bl	8003714 <__aeabi_i2d>
 8000656:	2200      	movs	r2, #0
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <__aeabi_l2d+0x28>)
 800065a:	f002 f90d 	bl	8002878 <__aeabi_dmul>
 800065e:	000d      	movs	r5, r1
 8000660:	0004      	movs	r4, r0
 8000662:	0030      	movs	r0, r6
 8000664:	f003 f884 	bl	8003770 <__aeabi_ui2d>
 8000668:	002b      	movs	r3, r5
 800066a:	0022      	movs	r2, r4
 800066c:	f001 f904 	bl	8001878 <__aeabi_dadd>
 8000670:	bd70      	pop	{r4, r5, r6, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	41f00000 	.word	0x41f00000

08000678 <__udivmoddi4>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	4657      	mov	r7, sl
 800067c:	464e      	mov	r6, r9
 800067e:	4645      	mov	r5, r8
 8000680:	46de      	mov	lr, fp
 8000682:	b5e0      	push	{r5, r6, r7, lr}
 8000684:	0004      	movs	r4, r0
 8000686:	000d      	movs	r5, r1
 8000688:	4692      	mov	sl, r2
 800068a:	4699      	mov	r9, r3
 800068c:	b083      	sub	sp, #12
 800068e:	428b      	cmp	r3, r1
 8000690:	d830      	bhi.n	80006f4 <__udivmoddi4+0x7c>
 8000692:	d02d      	beq.n	80006f0 <__udivmoddi4+0x78>
 8000694:	4649      	mov	r1, r9
 8000696:	4650      	mov	r0, sl
 8000698:	f003 f976 	bl	8003988 <__clzdi2>
 800069c:	0029      	movs	r1, r5
 800069e:	0006      	movs	r6, r0
 80006a0:	0020      	movs	r0, r4
 80006a2:	f003 f971 	bl	8003988 <__clzdi2>
 80006a6:	1a33      	subs	r3, r6, r0
 80006a8:	4698      	mov	r8, r3
 80006aa:	3b20      	subs	r3, #32
 80006ac:	d434      	bmi.n	8000718 <__udivmoddi4+0xa0>
 80006ae:	469b      	mov	fp, r3
 80006b0:	4653      	mov	r3, sl
 80006b2:	465a      	mov	r2, fp
 80006b4:	4093      	lsls	r3, r2
 80006b6:	4642      	mov	r2, r8
 80006b8:	001f      	movs	r7, r3
 80006ba:	4653      	mov	r3, sl
 80006bc:	4093      	lsls	r3, r2
 80006be:	001e      	movs	r6, r3
 80006c0:	42af      	cmp	r7, r5
 80006c2:	d83b      	bhi.n	800073c <__udivmoddi4+0xc4>
 80006c4:	42af      	cmp	r7, r5
 80006c6:	d100      	bne.n	80006ca <__udivmoddi4+0x52>
 80006c8:	e079      	b.n	80007be <__udivmoddi4+0x146>
 80006ca:	465b      	mov	r3, fp
 80006cc:	1ba4      	subs	r4, r4, r6
 80006ce:	41bd      	sbcs	r5, r7
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	da00      	bge.n	80006d6 <__udivmoddi4+0x5e>
 80006d4:	e076      	b.n	80007c4 <__udivmoddi4+0x14c>
 80006d6:	2200      	movs	r2, #0
 80006d8:	2300      	movs	r3, #0
 80006da:	9200      	str	r2, [sp, #0]
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	465a      	mov	r2, fp
 80006e2:	4093      	lsls	r3, r2
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2301      	movs	r3, #1
 80006e8:	4642      	mov	r2, r8
 80006ea:	4093      	lsls	r3, r2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	e029      	b.n	8000744 <__udivmoddi4+0xcc>
 80006f0:	4282      	cmp	r2, r0
 80006f2:	d9cf      	bls.n	8000694 <__udivmoddi4+0x1c>
 80006f4:	2200      	movs	r2, #0
 80006f6:	2300      	movs	r3, #0
 80006f8:	9200      	str	r2, [sp, #0]
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <__udivmoddi4+0x8e>
 8000702:	601c      	str	r4, [r3, #0]
 8000704:	605d      	str	r5, [r3, #4]
 8000706:	9800      	ldr	r0, [sp, #0]
 8000708:	9901      	ldr	r1, [sp, #4]
 800070a:	b003      	add	sp, #12
 800070c:	bcf0      	pop	{r4, r5, r6, r7}
 800070e:	46bb      	mov	fp, r7
 8000710:	46b2      	mov	sl, r6
 8000712:	46a9      	mov	r9, r5
 8000714:	46a0      	mov	r8, r4
 8000716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000718:	4642      	mov	r2, r8
 800071a:	469b      	mov	fp, r3
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	4652      	mov	r2, sl
 8000722:	40da      	lsrs	r2, r3
 8000724:	4641      	mov	r1, r8
 8000726:	0013      	movs	r3, r2
 8000728:	464a      	mov	r2, r9
 800072a:	408a      	lsls	r2, r1
 800072c:	0017      	movs	r7, r2
 800072e:	4642      	mov	r2, r8
 8000730:	431f      	orrs	r7, r3
 8000732:	4653      	mov	r3, sl
 8000734:	4093      	lsls	r3, r2
 8000736:	001e      	movs	r6, r3
 8000738:	42af      	cmp	r7, r5
 800073a:	d9c3      	bls.n	80006c4 <__udivmoddi4+0x4c>
 800073c:	2200      	movs	r2, #0
 800073e:	2300      	movs	r3, #0
 8000740:	9200      	str	r2, [sp, #0]
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	4643      	mov	r3, r8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0d8      	beq.n	80006fc <__udivmoddi4+0x84>
 800074a:	07fb      	lsls	r3, r7, #31
 800074c:	0872      	lsrs	r2, r6, #1
 800074e:	431a      	orrs	r2, r3
 8000750:	4646      	mov	r6, r8
 8000752:	087b      	lsrs	r3, r7, #1
 8000754:	e00e      	b.n	8000774 <__udivmoddi4+0xfc>
 8000756:	42ab      	cmp	r3, r5
 8000758:	d101      	bne.n	800075e <__udivmoddi4+0xe6>
 800075a:	42a2      	cmp	r2, r4
 800075c:	d80c      	bhi.n	8000778 <__udivmoddi4+0x100>
 800075e:	1aa4      	subs	r4, r4, r2
 8000760:	419d      	sbcs	r5, r3
 8000762:	2001      	movs	r0, #1
 8000764:	1924      	adds	r4, r4, r4
 8000766:	416d      	adcs	r5, r5
 8000768:	2100      	movs	r1, #0
 800076a:	3e01      	subs	r6, #1
 800076c:	1824      	adds	r4, r4, r0
 800076e:	414d      	adcs	r5, r1
 8000770:	2e00      	cmp	r6, #0
 8000772:	d006      	beq.n	8000782 <__udivmoddi4+0x10a>
 8000774:	42ab      	cmp	r3, r5
 8000776:	d9ee      	bls.n	8000756 <__udivmoddi4+0xde>
 8000778:	3e01      	subs	r6, #1
 800077a:	1924      	adds	r4, r4, r4
 800077c:	416d      	adcs	r5, r5
 800077e:	2e00      	cmp	r6, #0
 8000780:	d1f8      	bne.n	8000774 <__udivmoddi4+0xfc>
 8000782:	9800      	ldr	r0, [sp, #0]
 8000784:	9901      	ldr	r1, [sp, #4]
 8000786:	465b      	mov	r3, fp
 8000788:	1900      	adds	r0, r0, r4
 800078a:	4169      	adcs	r1, r5
 800078c:	2b00      	cmp	r3, #0
 800078e:	db24      	blt.n	80007da <__udivmoddi4+0x162>
 8000790:	002b      	movs	r3, r5
 8000792:	465a      	mov	r2, fp
 8000794:	4644      	mov	r4, r8
 8000796:	40d3      	lsrs	r3, r2
 8000798:	002a      	movs	r2, r5
 800079a:	40e2      	lsrs	r2, r4
 800079c:	001c      	movs	r4, r3
 800079e:	465b      	mov	r3, fp
 80007a0:	0015      	movs	r5, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	db2a      	blt.n	80007fc <__udivmoddi4+0x184>
 80007a6:	0026      	movs	r6, r4
 80007a8:	409e      	lsls	r6, r3
 80007aa:	0033      	movs	r3, r6
 80007ac:	0026      	movs	r6, r4
 80007ae:	4647      	mov	r7, r8
 80007b0:	40be      	lsls	r6, r7
 80007b2:	0032      	movs	r2, r6
 80007b4:	1a80      	subs	r0, r0, r2
 80007b6:	4199      	sbcs	r1, r3
 80007b8:	9000      	str	r0, [sp, #0]
 80007ba:	9101      	str	r1, [sp, #4]
 80007bc:	e79e      	b.n	80006fc <__udivmoddi4+0x84>
 80007be:	42a3      	cmp	r3, r4
 80007c0:	d8bc      	bhi.n	800073c <__udivmoddi4+0xc4>
 80007c2:	e782      	b.n	80006ca <__udivmoddi4+0x52>
 80007c4:	4642      	mov	r2, r8
 80007c6:	2320      	movs	r3, #32
 80007c8:	2100      	movs	r1, #0
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	9100      	str	r1, [sp, #0]
 80007d0:	9201      	str	r2, [sp, #4]
 80007d2:	2201      	movs	r2, #1
 80007d4:	40da      	lsrs	r2, r3
 80007d6:	9201      	str	r2, [sp, #4]
 80007d8:	e785      	b.n	80006e6 <__udivmoddi4+0x6e>
 80007da:	4642      	mov	r2, r8
 80007dc:	2320      	movs	r3, #32
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	002a      	movs	r2, r5
 80007e2:	4646      	mov	r6, r8
 80007e4:	409a      	lsls	r2, r3
 80007e6:	0023      	movs	r3, r4
 80007e8:	40f3      	lsrs	r3, r6
 80007ea:	4644      	mov	r4, r8
 80007ec:	4313      	orrs	r3, r2
 80007ee:	002a      	movs	r2, r5
 80007f0:	40e2      	lsrs	r2, r4
 80007f2:	001c      	movs	r4, r3
 80007f4:	465b      	mov	r3, fp
 80007f6:	0015      	movs	r5, r2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dad4      	bge.n	80007a6 <__udivmoddi4+0x12e>
 80007fc:	4642      	mov	r2, r8
 80007fe:	002f      	movs	r7, r5
 8000800:	2320      	movs	r3, #32
 8000802:	0026      	movs	r6, r4
 8000804:	4097      	lsls	r7, r2
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	40de      	lsrs	r6, r3
 800080a:	003b      	movs	r3, r7
 800080c:	4333      	orrs	r3, r6
 800080e:	e7cd      	b.n	80007ac <__udivmoddi4+0x134>

08000810 <__aeabi_fadd>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	024b      	lsls	r3, r1, #9
 8000814:	0a5a      	lsrs	r2, r3, #9
 8000816:	4694      	mov	ip, r2
 8000818:	004a      	lsls	r2, r1, #1
 800081a:	0fc9      	lsrs	r1, r1, #31
 800081c:	46ce      	mov	lr, r9
 800081e:	4647      	mov	r7, r8
 8000820:	4689      	mov	r9, r1
 8000822:	0045      	lsls	r5, r0, #1
 8000824:	0246      	lsls	r6, r0, #9
 8000826:	0e2d      	lsrs	r5, r5, #24
 8000828:	0e12      	lsrs	r2, r2, #24
 800082a:	b580      	push	{r7, lr}
 800082c:	0999      	lsrs	r1, r3, #6
 800082e:	0a77      	lsrs	r7, r6, #9
 8000830:	0fc4      	lsrs	r4, r0, #31
 8000832:	09b6      	lsrs	r6, r6, #6
 8000834:	1aab      	subs	r3, r5, r2
 8000836:	454c      	cmp	r4, r9
 8000838:	d020      	beq.n	800087c <__aeabi_fadd+0x6c>
 800083a:	2b00      	cmp	r3, #0
 800083c:	dd0c      	ble.n	8000858 <__aeabi_fadd+0x48>
 800083e:	2a00      	cmp	r2, #0
 8000840:	d134      	bne.n	80008ac <__aeabi_fadd+0x9c>
 8000842:	2900      	cmp	r1, #0
 8000844:	d02a      	beq.n	800089c <__aeabi_fadd+0x8c>
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	2b01      	cmp	r3, #1
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x3e>
 800084c:	e08f      	b.n	800096e <__aeabi_fadd+0x15e>
 800084e:	2bff      	cmp	r3, #255	@ 0xff
 8000850:	d100      	bne.n	8000854 <__aeabi_fadd+0x44>
 8000852:	e0cd      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 8000854:	0013      	movs	r3, r2
 8000856:	e02f      	b.n	80008b8 <__aeabi_fadd+0xa8>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d060      	beq.n	800091e <__aeabi_fadd+0x10e>
 800085c:	1b53      	subs	r3, r2, r5
 800085e:	2d00      	cmp	r5, #0
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x54>
 8000862:	e0ee      	b.n	8000a42 <__aeabi_fadd+0x232>
 8000864:	2e00      	cmp	r6, #0
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0x5a>
 8000868:	e13e      	b.n	8000ae8 <__aeabi_fadd+0x2d8>
 800086a:	1e5c      	subs	r4, r3, #1
 800086c:	2b01      	cmp	r3, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x62>
 8000870:	e16b      	b.n	8000b4a <__aeabi_fadd+0x33a>
 8000872:	2bff      	cmp	r3, #255	@ 0xff
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x68>
 8000876:	e0b9      	b.n	80009ec <__aeabi_fadd+0x1dc>
 8000878:	0023      	movs	r3, r4
 800087a:	e0e7      	b.n	8000a4c <__aeabi_fadd+0x23c>
 800087c:	2b00      	cmp	r3, #0
 800087e:	dc00      	bgt.n	8000882 <__aeabi_fadd+0x72>
 8000880:	e0a4      	b.n	80009cc <__aeabi_fadd+0x1bc>
 8000882:	2a00      	cmp	r2, #0
 8000884:	d069      	beq.n	800095a <__aeabi_fadd+0x14a>
 8000886:	2dff      	cmp	r5, #255	@ 0xff
 8000888:	d100      	bne.n	800088c <__aeabi_fadd+0x7c>
 800088a:	e0b1      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	04d2      	lsls	r2, r2, #19
 8000890:	4311      	orrs	r1, r2
 8000892:	2b1b      	cmp	r3, #27
 8000894:	dc00      	bgt.n	8000898 <__aeabi_fadd+0x88>
 8000896:	e0e9      	b.n	8000a6c <__aeabi_fadd+0x25c>
 8000898:	002b      	movs	r3, r5
 800089a:	3605      	adds	r6, #5
 800089c:	08f7      	lsrs	r7, r6, #3
 800089e:	2bff      	cmp	r3, #255	@ 0xff
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x94>
 80008a2:	e0a5      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 80008a4:	027a      	lsls	r2, r7, #9
 80008a6:	0a52      	lsrs	r2, r2, #9
 80008a8:	b2d8      	uxtb	r0, r3
 80008aa:	e030      	b.n	800090e <__aeabi_fadd+0xfe>
 80008ac:	2dff      	cmp	r5, #255	@ 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0xa2>
 80008b0:	e09e      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	04d2      	lsls	r2, r2, #19
 80008b6:	4311      	orrs	r1, r2
 80008b8:	2001      	movs	r0, #1
 80008ba:	2b1b      	cmp	r3, #27
 80008bc:	dc08      	bgt.n	80008d0 <__aeabi_fadd+0xc0>
 80008be:	0008      	movs	r0, r1
 80008c0:	2220      	movs	r2, #32
 80008c2:	40d8      	lsrs	r0, r3
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	4099      	lsls	r1, r3
 80008c8:	000b      	movs	r3, r1
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	4193      	sbcs	r3, r2
 80008ce:	4318      	orrs	r0, r3
 80008d0:	1a36      	subs	r6, r6, r0
 80008d2:	0173      	lsls	r3, r6, #5
 80008d4:	d400      	bmi.n	80008d8 <__aeabi_fadd+0xc8>
 80008d6:	e071      	b.n	80009bc <__aeabi_fadd+0x1ac>
 80008d8:	01b6      	lsls	r6, r6, #6
 80008da:	09b7      	lsrs	r7, r6, #6
 80008dc:	0038      	movs	r0, r7
 80008de:	f003 f835 	bl	800394c <__clzsi2>
 80008e2:	003b      	movs	r3, r7
 80008e4:	3805      	subs	r0, #5
 80008e6:	4083      	lsls	r3, r0
 80008e8:	4285      	cmp	r5, r0
 80008ea:	dd4d      	ble.n	8000988 <__aeabi_fadd+0x178>
 80008ec:	4eb4      	ldr	r6, [pc, #720]	@ (8000bc0 <__aeabi_fadd+0x3b0>)
 80008ee:	1a2d      	subs	r5, r5, r0
 80008f0:	401e      	ands	r6, r3
 80008f2:	075a      	lsls	r2, r3, #29
 80008f4:	d068      	beq.n	80009c8 <__aeabi_fadd+0x1b8>
 80008f6:	220f      	movs	r2, #15
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d064      	beq.n	80009c8 <__aeabi_fadd+0x1b8>
 80008fe:	3604      	adds	r6, #4
 8000900:	0173      	lsls	r3, r6, #5
 8000902:	d561      	bpl.n	80009c8 <__aeabi_fadd+0x1b8>
 8000904:	1c68      	adds	r0, r5, #1
 8000906:	2dfe      	cmp	r5, #254	@ 0xfe
 8000908:	d154      	bne.n	80009b4 <__aeabi_fadd+0x1a4>
 800090a:	20ff      	movs	r0, #255	@ 0xff
 800090c:	2200      	movs	r2, #0
 800090e:	05c0      	lsls	r0, r0, #23
 8000910:	4310      	orrs	r0, r2
 8000912:	07e4      	lsls	r4, r4, #31
 8000914:	4320      	orrs	r0, r4
 8000916:	bcc0      	pop	{r6, r7}
 8000918:	46b9      	mov	r9, r7
 800091a:	46b0      	mov	r8, r6
 800091c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800091e:	22fe      	movs	r2, #254	@ 0xfe
 8000920:	4690      	mov	r8, r2
 8000922:	1c68      	adds	r0, r5, #1
 8000924:	0002      	movs	r2, r0
 8000926:	4640      	mov	r0, r8
 8000928:	4210      	tst	r0, r2
 800092a:	d16b      	bne.n	8000a04 <__aeabi_fadd+0x1f4>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_fadd+0x122>
 8000930:	e0dd      	b.n	8000aee <__aeabi_fadd+0x2de>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x128>
 8000936:	e102      	b.n	8000b3e <__aeabi_fadd+0x32e>
 8000938:	2900      	cmp	r1, #0
 800093a:	d0b3      	beq.n	80008a4 <__aeabi_fadd+0x94>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	1a77      	subs	r7, r6, r1
 8000940:	04d2      	lsls	r2, r2, #19
 8000942:	4217      	tst	r7, r2
 8000944:	d100      	bne.n	8000948 <__aeabi_fadd+0x138>
 8000946:	e136      	b.n	8000bb6 <__aeabi_fadd+0x3a6>
 8000948:	464c      	mov	r4, r9
 800094a:	1b8e      	subs	r6, r1, r6
 800094c:	d061      	beq.n	8000a12 <__aeabi_fadd+0x202>
 800094e:	2001      	movs	r0, #1
 8000950:	4216      	tst	r6, r2
 8000952:	d130      	bne.n	80009b6 <__aeabi_fadd+0x1a6>
 8000954:	2300      	movs	r3, #0
 8000956:	08f7      	lsrs	r7, r6, #3
 8000958:	e7a4      	b.n	80008a4 <__aeabi_fadd+0x94>
 800095a:	2900      	cmp	r1, #0
 800095c:	d09e      	beq.n	800089c <__aeabi_fadd+0x8c>
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	2b01      	cmp	r3, #1
 8000962:	d100      	bne.n	8000966 <__aeabi_fadd+0x156>
 8000964:	e0ca      	b.n	8000afc <__aeabi_fadd+0x2ec>
 8000966:	2bff      	cmp	r3, #255	@ 0xff
 8000968:	d042      	beq.n	80009f0 <__aeabi_fadd+0x1e0>
 800096a:	0013      	movs	r3, r2
 800096c:	e791      	b.n	8000892 <__aeabi_fadd+0x82>
 800096e:	1a71      	subs	r1, r6, r1
 8000970:	014b      	lsls	r3, r1, #5
 8000972:	d400      	bmi.n	8000976 <__aeabi_fadd+0x166>
 8000974:	e0d1      	b.n	8000b1a <__aeabi_fadd+0x30a>
 8000976:	018f      	lsls	r7, r1, #6
 8000978:	09bf      	lsrs	r7, r7, #6
 800097a:	0038      	movs	r0, r7
 800097c:	f002 ffe6 	bl	800394c <__clzsi2>
 8000980:	003b      	movs	r3, r7
 8000982:	3805      	subs	r0, #5
 8000984:	4083      	lsls	r3, r0
 8000986:	2501      	movs	r5, #1
 8000988:	2220      	movs	r2, #32
 800098a:	1b40      	subs	r0, r0, r5
 800098c:	3001      	adds	r0, #1
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	001e      	movs	r6, r3
 8000992:	4093      	lsls	r3, r2
 8000994:	40c6      	lsrs	r6, r0
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	4193      	sbcs	r3, r2
 800099a:	431e      	orrs	r6, r3
 800099c:	d039      	beq.n	8000a12 <__aeabi_fadd+0x202>
 800099e:	0773      	lsls	r3, r6, #29
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fadd+0x194>
 80009a2:	e11b      	b.n	8000bdc <__aeabi_fadd+0x3cc>
 80009a4:	230f      	movs	r3, #15
 80009a6:	2500      	movs	r5, #0
 80009a8:	4033      	ands	r3, r6
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d1a7      	bne.n	80008fe <__aeabi_fadd+0xee>
 80009ae:	2001      	movs	r0, #1
 80009b0:	0172      	lsls	r2, r6, #5
 80009b2:	d57c      	bpl.n	8000aae <__aeabi_fadd+0x29e>
 80009b4:	b2c0      	uxtb	r0, r0
 80009b6:	01b2      	lsls	r2, r6, #6
 80009b8:	0a52      	lsrs	r2, r2, #9
 80009ba:	e7a8      	b.n	800090e <__aeabi_fadd+0xfe>
 80009bc:	0773      	lsls	r3, r6, #29
 80009be:	d003      	beq.n	80009c8 <__aeabi_fadd+0x1b8>
 80009c0:	230f      	movs	r3, #15
 80009c2:	4033      	ands	r3, r6
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d19a      	bne.n	80008fe <__aeabi_fadd+0xee>
 80009c8:	002b      	movs	r3, r5
 80009ca:	e767      	b.n	800089c <__aeabi_fadd+0x8c>
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d023      	beq.n	8000a18 <__aeabi_fadd+0x208>
 80009d0:	1b53      	subs	r3, r2, r5
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d17b      	bne.n	8000ace <__aeabi_fadd+0x2be>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_fadd+0x1cc>
 80009da:	e086      	b.n	8000aea <__aeabi_fadd+0x2da>
 80009dc:	1e5d      	subs	r5, r3, #1
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x1d4>
 80009e2:	e08b      	b.n	8000afc <__aeabi_fadd+0x2ec>
 80009e4:	2bff      	cmp	r3, #255	@ 0xff
 80009e6:	d002      	beq.n	80009ee <__aeabi_fadd+0x1de>
 80009e8:	002b      	movs	r3, r5
 80009ea:	e075      	b.n	8000ad8 <__aeabi_fadd+0x2c8>
 80009ec:	464c      	mov	r4, r9
 80009ee:	4667      	mov	r7, ip
 80009f0:	2f00      	cmp	r7, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fadd+0x1e6>
 80009f4:	e789      	b.n	800090a <__aeabi_fadd+0xfa>
 80009f6:	2280      	movs	r2, #128	@ 0x80
 80009f8:	03d2      	lsls	r2, r2, #15
 80009fa:	433a      	orrs	r2, r7
 80009fc:	0252      	lsls	r2, r2, #9
 80009fe:	20ff      	movs	r0, #255	@ 0xff
 8000a00:	0a52      	lsrs	r2, r2, #9
 8000a02:	e784      	b.n	800090e <__aeabi_fadd+0xfe>
 8000a04:	1a77      	subs	r7, r6, r1
 8000a06:	017b      	lsls	r3, r7, #5
 8000a08:	d46b      	bmi.n	8000ae2 <__aeabi_fadd+0x2d2>
 8000a0a:	2f00      	cmp	r7, #0
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fadd+0x200>
 8000a0e:	e765      	b.n	80008dc <__aeabi_fadd+0xcc>
 8000a10:	2400      	movs	r4, #0
 8000a12:	2000      	movs	r0, #0
 8000a14:	2200      	movs	r2, #0
 8000a16:	e77a      	b.n	800090e <__aeabi_fadd+0xfe>
 8000a18:	22fe      	movs	r2, #254	@ 0xfe
 8000a1a:	1c6b      	adds	r3, r5, #1
 8000a1c:	421a      	tst	r2, r3
 8000a1e:	d149      	bne.n	8000ab4 <__aeabi_fadd+0x2a4>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d000      	beq.n	8000a26 <__aeabi_fadd+0x216>
 8000a24:	e09f      	b.n	8000b66 <__aeabi_fadd+0x356>
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fadd+0x21c>
 8000a2a:	e0ba      	b.n	8000ba2 <__aeabi_fadd+0x392>
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_fadd+0x222>
 8000a30:	e0cf      	b.n	8000bd2 <__aeabi_fadd+0x3c2>
 8000a32:	1872      	adds	r2, r6, r1
 8000a34:	0153      	lsls	r3, r2, #5
 8000a36:	d400      	bmi.n	8000a3a <__aeabi_fadd+0x22a>
 8000a38:	e0cd      	b.n	8000bd6 <__aeabi_fadd+0x3c6>
 8000a3a:	0192      	lsls	r2, r2, #6
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	0a52      	lsrs	r2, r2, #9
 8000a40:	e765      	b.n	800090e <__aeabi_fadd+0xfe>
 8000a42:	2aff      	cmp	r2, #255	@ 0xff
 8000a44:	d0d2      	beq.n	80009ec <__aeabi_fadd+0x1dc>
 8000a46:	2080      	movs	r0, #128	@ 0x80
 8000a48:	04c0      	lsls	r0, r0, #19
 8000a4a:	4306      	orrs	r6, r0
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	2b1b      	cmp	r3, #27
 8000a50:	dc08      	bgt.n	8000a64 <__aeabi_fadd+0x254>
 8000a52:	0030      	movs	r0, r6
 8000a54:	2420      	movs	r4, #32
 8000a56:	40d8      	lsrs	r0, r3
 8000a58:	1ae3      	subs	r3, r4, r3
 8000a5a:	409e      	lsls	r6, r3
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	1e5c      	subs	r4, r3, #1
 8000a60:	41a3      	sbcs	r3, r4
 8000a62:	4318      	orrs	r0, r3
 8000a64:	464c      	mov	r4, r9
 8000a66:	0015      	movs	r5, r2
 8000a68:	1a0e      	subs	r6, r1, r0
 8000a6a:	e732      	b.n	80008d2 <__aeabi_fadd+0xc2>
 8000a6c:	0008      	movs	r0, r1
 8000a6e:	2220      	movs	r2, #32
 8000a70:	40d8      	lsrs	r0, r3
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	4099      	lsls	r1, r3
 8000a76:	000b      	movs	r3, r1
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	4193      	sbcs	r3, r2
 8000a7c:	4303      	orrs	r3, r0
 8000a7e:	18f6      	adds	r6, r6, r3
 8000a80:	0173      	lsls	r3, r6, #5
 8000a82:	d59b      	bpl.n	80009bc <__aeabi_fadd+0x1ac>
 8000a84:	3501      	adds	r5, #1
 8000a86:	2dff      	cmp	r5, #255	@ 0xff
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x27c>
 8000a8a:	e73e      	b.n	800090a <__aeabi_fadd+0xfa>
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	494d      	ldr	r1, [pc, #308]	@ (8000bc4 <__aeabi_fadd+0x3b4>)
 8000a90:	0872      	lsrs	r2, r6, #1
 8000a92:	4033      	ands	r3, r6
 8000a94:	400a      	ands	r2, r1
 8000a96:	431a      	orrs	r2, r3
 8000a98:	0016      	movs	r6, r2
 8000a9a:	0753      	lsls	r3, r2, #29
 8000a9c:	d004      	beq.n	8000aa8 <__aeabi_fadd+0x298>
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fadd+0x298>
 8000aa6:	e72a      	b.n	80008fe <__aeabi_fadd+0xee>
 8000aa8:	0173      	lsls	r3, r6, #5
 8000aaa:	d500      	bpl.n	8000aae <__aeabi_fadd+0x29e>
 8000aac:	e72a      	b.n	8000904 <__aeabi_fadd+0xf4>
 8000aae:	002b      	movs	r3, r5
 8000ab0:	08f7      	lsrs	r7, r6, #3
 8000ab2:	e6f7      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000ab4:	2bff      	cmp	r3, #255	@ 0xff
 8000ab6:	d100      	bne.n	8000aba <__aeabi_fadd+0x2aa>
 8000ab8:	e727      	b.n	800090a <__aeabi_fadd+0xfa>
 8000aba:	1871      	adds	r1, r6, r1
 8000abc:	0849      	lsrs	r1, r1, #1
 8000abe:	074a      	lsls	r2, r1, #29
 8000ac0:	d02f      	beq.n	8000b22 <__aeabi_fadd+0x312>
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	2a04      	cmp	r2, #4
 8000ac8:	d02b      	beq.n	8000b22 <__aeabi_fadd+0x312>
 8000aca:	1d0e      	adds	r6, r1, #4
 8000acc:	e6e6      	b.n	800089c <__aeabi_fadd+0x8c>
 8000ace:	2aff      	cmp	r2, #255	@ 0xff
 8000ad0:	d08d      	beq.n	80009ee <__aeabi_fadd+0x1de>
 8000ad2:	2080      	movs	r0, #128	@ 0x80
 8000ad4:	04c0      	lsls	r0, r0, #19
 8000ad6:	4306      	orrs	r6, r0
 8000ad8:	2b1b      	cmp	r3, #27
 8000ada:	dd24      	ble.n	8000b26 <__aeabi_fadd+0x316>
 8000adc:	0013      	movs	r3, r2
 8000ade:	1d4e      	adds	r6, r1, #5
 8000ae0:	e6dc      	b.n	800089c <__aeabi_fadd+0x8c>
 8000ae2:	464c      	mov	r4, r9
 8000ae4:	1b8f      	subs	r7, r1, r6
 8000ae6:	e6f9      	b.n	80008dc <__aeabi_fadd+0xcc>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	000e      	movs	r6, r1
 8000aec:	e6d6      	b.n	800089c <__aeabi_fadd+0x8c>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d149      	bne.n	8000b86 <__aeabi_fadd+0x376>
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d068      	beq.n	8000bc8 <__aeabi_fadd+0x3b8>
 8000af6:	4667      	mov	r7, ip
 8000af8:	464c      	mov	r4, r9
 8000afa:	e77c      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000afc:	1870      	adds	r0, r6, r1
 8000afe:	0143      	lsls	r3, r0, #5
 8000b00:	d574      	bpl.n	8000bec <__aeabi_fadd+0x3dc>
 8000b02:	4930      	ldr	r1, [pc, #192]	@ (8000bc4 <__aeabi_fadd+0x3b4>)
 8000b04:	0840      	lsrs	r0, r0, #1
 8000b06:	4001      	ands	r1, r0
 8000b08:	0743      	lsls	r3, r0, #29
 8000b0a:	d009      	beq.n	8000b20 <__aeabi_fadd+0x310>
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	4003      	ands	r3, r0
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d005      	beq.n	8000b20 <__aeabi_fadd+0x310>
 8000b14:	2302      	movs	r3, #2
 8000b16:	1d0e      	adds	r6, r1, #4
 8000b18:	e6c0      	b.n	800089c <__aeabi_fadd+0x8c>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	08cf      	lsrs	r7, r1, #3
 8000b1e:	e6c1      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000b20:	2302      	movs	r3, #2
 8000b22:	08cf      	lsrs	r7, r1, #3
 8000b24:	e6be      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000b26:	2520      	movs	r5, #32
 8000b28:	0030      	movs	r0, r6
 8000b2a:	40d8      	lsrs	r0, r3
 8000b2c:	1aeb      	subs	r3, r5, r3
 8000b2e:	409e      	lsls	r6, r3
 8000b30:	0033      	movs	r3, r6
 8000b32:	1e5d      	subs	r5, r3, #1
 8000b34:	41ab      	sbcs	r3, r5
 8000b36:	4303      	orrs	r3, r0
 8000b38:	0015      	movs	r5, r2
 8000b3a:	185e      	adds	r6, r3, r1
 8000b3c:	e7a0      	b.n	8000a80 <__aeabi_fadd+0x270>
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fadd+0x334>
 8000b42:	e765      	b.n	8000a10 <__aeabi_fadd+0x200>
 8000b44:	464c      	mov	r4, r9
 8000b46:	4667      	mov	r7, ip
 8000b48:	e6ac      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000b4a:	1b8f      	subs	r7, r1, r6
 8000b4c:	017b      	lsls	r3, r7, #5
 8000b4e:	d52e      	bpl.n	8000bae <__aeabi_fadd+0x39e>
 8000b50:	01bf      	lsls	r7, r7, #6
 8000b52:	09bf      	lsrs	r7, r7, #6
 8000b54:	0038      	movs	r0, r7
 8000b56:	f002 fef9 	bl	800394c <__clzsi2>
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	3805      	subs	r0, #5
 8000b5e:	4083      	lsls	r3, r0
 8000b60:	464c      	mov	r4, r9
 8000b62:	3501      	adds	r5, #1
 8000b64:	e710      	b.n	8000988 <__aeabi_fadd+0x178>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fadd+0x35c>
 8000b6a:	e740      	b.n	80009ee <__aeabi_fadd+0x1de>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fadd+0x362>
 8000b70:	e741      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b72:	2380      	movs	r3, #128	@ 0x80
 8000b74:	03db      	lsls	r3, r3, #15
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d200      	bcs.n	8000b7c <__aeabi_fadd+0x36c>
 8000b7a:	e73c      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b7c:	459c      	cmp	ip, r3
 8000b7e:	d300      	bcc.n	8000b82 <__aeabi_fadd+0x372>
 8000b80:	e739      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b82:	4667      	mov	r7, ip
 8000b84:	e737      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b86:	2900      	cmp	r1, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fadd+0x37c>
 8000b8a:	e734      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b8c:	2380      	movs	r3, #128	@ 0x80
 8000b8e:	03db      	lsls	r3, r3, #15
 8000b90:	429f      	cmp	r7, r3
 8000b92:	d200      	bcs.n	8000b96 <__aeabi_fadd+0x386>
 8000b94:	e72f      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b96:	459c      	cmp	ip, r3
 8000b98:	d300      	bcc.n	8000b9c <__aeabi_fadd+0x38c>
 8000b9a:	e72c      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b9c:	464c      	mov	r4, r9
 8000b9e:	4667      	mov	r7, ip
 8000ba0:	e729      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fadd+0x398>
 8000ba6:	e734      	b.n	8000a12 <__aeabi_fadd+0x202>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	08cf      	lsrs	r7, r1, #3
 8000bac:	e67a      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bae:	464c      	mov	r4, r9
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	08ff      	lsrs	r7, r7, #3
 8000bb4:	e676      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fadd+0x3ac>
 8000bba:	e729      	b.n	8000a10 <__aeabi_fadd+0x200>
 8000bbc:	08ff      	lsrs	r7, r7, #3
 8000bbe:	e671      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bc0:	fbffffff 	.word	0xfbffffff
 8000bc4:	7dffffff 	.word	0x7dffffff
 8000bc8:	2280      	movs	r2, #128	@ 0x80
 8000bca:	2400      	movs	r4, #0
 8000bcc:	20ff      	movs	r0, #255	@ 0xff
 8000bce:	03d2      	lsls	r2, r2, #15
 8000bd0:	e69d      	b.n	800090e <__aeabi_fadd+0xfe>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e666      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	08d7      	lsrs	r7, r2, #3
 8000bda:	e663      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bdc:	2001      	movs	r0, #1
 8000bde:	0172      	lsls	r2, r6, #5
 8000be0:	d500      	bpl.n	8000be4 <__aeabi_fadd+0x3d4>
 8000be2:	e6e7      	b.n	80009b4 <__aeabi_fadd+0x1a4>
 8000be4:	0031      	movs	r1, r6
 8000be6:	2300      	movs	r3, #0
 8000be8:	08cf      	lsrs	r7, r1, #3
 8000bea:	e65b      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bec:	2301      	movs	r3, #1
 8000bee:	08c7      	lsrs	r7, r0, #3
 8000bf0:	e658      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bf2:	46c0      	nop			@ (mov r8, r8)

08000bf4 <__aeabi_fdiv>:
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	4646      	mov	r6, r8
 8000bf8:	464f      	mov	r7, r9
 8000bfa:	46d6      	mov	lr, sl
 8000bfc:	0245      	lsls	r5, r0, #9
 8000bfe:	b5c0      	push	{r6, r7, lr}
 8000c00:	0fc3      	lsrs	r3, r0, #31
 8000c02:	0047      	lsls	r7, r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	1c0e      	adds	r6, r1, #0
 8000c08:	0a6d      	lsrs	r5, r5, #9
 8000c0a:	0e3f      	lsrs	r7, r7, #24
 8000c0c:	d05b      	beq.n	8000cc6 <__aeabi_fdiv+0xd2>
 8000c0e:	2fff      	cmp	r7, #255	@ 0xff
 8000c10:	d021      	beq.n	8000c56 <__aeabi_fdiv+0x62>
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	00ed      	lsls	r5, r5, #3
 8000c16:	04db      	lsls	r3, r3, #19
 8000c18:	431d      	orrs	r5, r3
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3f7f      	subs	r7, #127	@ 0x7f
 8000c22:	0274      	lsls	r4, r6, #9
 8000c24:	0073      	lsls	r3, r6, #1
 8000c26:	0a64      	lsrs	r4, r4, #9
 8000c28:	0e1b      	lsrs	r3, r3, #24
 8000c2a:	0ff6      	lsrs	r6, r6, #31
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d020      	beq.n	8000c72 <__aeabi_fdiv+0x7e>
 8000c30:	2bff      	cmp	r3, #255	@ 0xff
 8000c32:	d043      	beq.n	8000cbc <__aeabi_fdiv+0xc8>
 8000c34:	2280      	movs	r2, #128	@ 0x80
 8000c36:	2000      	movs	r0, #0
 8000c38:	00e4      	lsls	r4, r4, #3
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	4314      	orrs	r4, r2
 8000c3e:	3b7f      	subs	r3, #127	@ 0x7f
 8000c40:	4642      	mov	r2, r8
 8000c42:	1aff      	subs	r7, r7, r3
 8000c44:	464b      	mov	r3, r9
 8000c46:	4072      	eors	r2, r6
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d900      	bls.n	8000c4e <__aeabi_fdiv+0x5a>
 8000c4c:	e09d      	b.n	8000d8a <__aeabi_fdiv+0x196>
 8000c4e:	4971      	ldr	r1, [pc, #452]	@ (8000e14 <__aeabi_fdiv+0x220>)
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	58cb      	ldr	r3, [r1, r3]
 8000c54:	469f      	mov	pc, r3
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d15a      	bne.n	8000d10 <__aeabi_fdiv+0x11c>
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	4699      	mov	r9, r3
 8000c5e:	3b06      	subs	r3, #6
 8000c60:	0274      	lsls	r4, r6, #9
 8000c62:	469a      	mov	sl, r3
 8000c64:	0073      	lsls	r3, r6, #1
 8000c66:	27ff      	movs	r7, #255	@ 0xff
 8000c68:	0a64      	lsrs	r4, r4, #9
 8000c6a:	0e1b      	lsrs	r3, r3, #24
 8000c6c:	0ff6      	lsrs	r6, r6, #31
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1de      	bne.n	8000c30 <__aeabi_fdiv+0x3c>
 8000c72:	2c00      	cmp	r4, #0
 8000c74:	d13b      	bne.n	8000cee <__aeabi_fdiv+0xfa>
 8000c76:	2301      	movs	r3, #1
 8000c78:	4642      	mov	r2, r8
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	4072      	eors	r2, r6
 8000c7e:	4319      	orrs	r1, r3
 8000c80:	290e      	cmp	r1, #14
 8000c82:	d818      	bhi.n	8000cb6 <__aeabi_fdiv+0xc2>
 8000c84:	4864      	ldr	r0, [pc, #400]	@ (8000e18 <__aeabi_fdiv+0x224>)
 8000c86:	0089      	lsls	r1, r1, #2
 8000c88:	5841      	ldr	r1, [r0, r1]
 8000c8a:	468f      	mov	pc, r1
 8000c8c:	4653      	mov	r3, sl
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fdiv+0xa0>
 8000c92:	e0b8      	b.n	8000e06 <__aeabi_fdiv+0x212>
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d06e      	beq.n	8000d76 <__aeabi_fdiv+0x182>
 8000c98:	4642      	mov	r2, r8
 8000c9a:	002c      	movs	r4, r5
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d140      	bne.n	8000d22 <__aeabi_fdiv+0x12e>
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	05c0      	lsls	r0, r0, #23
 8000ca6:	4320      	orrs	r0, r4
 8000ca8:	07d2      	lsls	r2, r2, #31
 8000caa:	4310      	orrs	r0, r2
 8000cac:	bce0      	pop	{r5, r6, r7}
 8000cae:	46ba      	mov	sl, r7
 8000cb0:	46b1      	mov	r9, r6
 8000cb2:	46a8      	mov	r8, r5
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb6:	20ff      	movs	r0, #255	@ 0xff
 8000cb8:	2400      	movs	r4, #0
 8000cba:	e7f3      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d120      	bne.n	8000d02 <__aeabi_fdiv+0x10e>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	3fff      	subs	r7, #255	@ 0xff
 8000cc4:	e7d8      	b.n	8000c78 <__aeabi_fdiv+0x84>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d105      	bne.n	8000cd6 <__aeabi_fdiv+0xe2>
 8000cca:	2304      	movs	r3, #4
 8000ccc:	4699      	mov	r9, r3
 8000cce:	3b03      	subs	r3, #3
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	e7a5      	b.n	8000c22 <__aeabi_fdiv+0x2e>
 8000cd6:	0028      	movs	r0, r5
 8000cd8:	f002 fe38 	bl	800394c <__clzsi2>
 8000cdc:	2776      	movs	r7, #118	@ 0x76
 8000cde:	1f43      	subs	r3, r0, #5
 8000ce0:	409d      	lsls	r5, r3
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	427f      	negs	r7, r7
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	469a      	mov	sl, r3
 8000cea:	1a3f      	subs	r7, r7, r0
 8000cec:	e799      	b.n	8000c22 <__aeabi_fdiv+0x2e>
 8000cee:	0020      	movs	r0, r4
 8000cf0:	f002 fe2c 	bl	800394c <__clzsi2>
 8000cf4:	1f43      	subs	r3, r0, #5
 8000cf6:	409c      	lsls	r4, r3
 8000cf8:	2376      	movs	r3, #118	@ 0x76
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	1a1b      	subs	r3, r3, r0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	e79e      	b.n	8000c40 <__aeabi_fdiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	464a      	mov	r2, r9
 8000d06:	431a      	orrs	r2, r3
 8000d08:	4691      	mov	r9, r2
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	33fc      	adds	r3, #252	@ 0xfc
 8000d0e:	e797      	b.n	8000c40 <__aeabi_fdiv+0x4c>
 8000d10:	230c      	movs	r3, #12
 8000d12:	4699      	mov	r9, r3
 8000d14:	3b09      	subs	r3, #9
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	469a      	mov	sl, r3
 8000d1a:	e782      	b.n	8000c22 <__aeabi_fdiv+0x2e>
 8000d1c:	2803      	cmp	r0, #3
 8000d1e:	d02c      	beq.n	8000d7a <__aeabi_fdiv+0x186>
 8000d20:	0032      	movs	r2, r6
 8000d22:	0038      	movs	r0, r7
 8000d24:	307f      	adds	r0, #127	@ 0x7f
 8000d26:	2800      	cmp	r0, #0
 8000d28:	dd47      	ble.n	8000dba <__aeabi_fdiv+0x1c6>
 8000d2a:	0763      	lsls	r3, r4, #29
 8000d2c:	d004      	beq.n	8000d38 <__aeabi_fdiv+0x144>
 8000d2e:	230f      	movs	r3, #15
 8000d30:	4023      	ands	r3, r4
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d000      	beq.n	8000d38 <__aeabi_fdiv+0x144>
 8000d36:	3404      	adds	r4, #4
 8000d38:	0123      	lsls	r3, r4, #4
 8000d3a:	d503      	bpl.n	8000d44 <__aeabi_fdiv+0x150>
 8000d3c:	0038      	movs	r0, r7
 8000d3e:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <__aeabi_fdiv+0x228>)
 8000d40:	3080      	adds	r0, #128	@ 0x80
 8000d42:	401c      	ands	r4, r3
 8000d44:	28fe      	cmp	r0, #254	@ 0xfe
 8000d46:	dcb6      	bgt.n	8000cb6 <__aeabi_fdiv+0xc2>
 8000d48:	01a4      	lsls	r4, r4, #6
 8000d4a:	0a64      	lsrs	r4, r4, #9
 8000d4c:	b2c0      	uxtb	r0, r0
 8000d4e:	e7a9      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d50:	2480      	movs	r4, #128	@ 0x80
 8000d52:	2200      	movs	r2, #0
 8000d54:	20ff      	movs	r0, #255	@ 0xff
 8000d56:	03e4      	lsls	r4, r4, #15
 8000d58:	e7a4      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d5a:	2380      	movs	r3, #128	@ 0x80
 8000d5c:	03db      	lsls	r3, r3, #15
 8000d5e:	421d      	tst	r5, r3
 8000d60:	d001      	beq.n	8000d66 <__aeabi_fdiv+0x172>
 8000d62:	421c      	tst	r4, r3
 8000d64:	d00b      	beq.n	8000d7e <__aeabi_fdiv+0x18a>
 8000d66:	2480      	movs	r4, #128	@ 0x80
 8000d68:	03e4      	lsls	r4, r4, #15
 8000d6a:	432c      	orrs	r4, r5
 8000d6c:	0264      	lsls	r4, r4, #9
 8000d6e:	4642      	mov	r2, r8
 8000d70:	20ff      	movs	r0, #255	@ 0xff
 8000d72:	0a64      	lsrs	r4, r4, #9
 8000d74:	e796      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d76:	4646      	mov	r6, r8
 8000d78:	002c      	movs	r4, r5
 8000d7a:	2380      	movs	r3, #128	@ 0x80
 8000d7c:	03db      	lsls	r3, r3, #15
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	0264      	lsls	r4, r4, #9
 8000d82:	0032      	movs	r2, r6
 8000d84:	20ff      	movs	r0, #255	@ 0xff
 8000d86:	0a64      	lsrs	r4, r4, #9
 8000d88:	e78c      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d8a:	016d      	lsls	r5, r5, #5
 8000d8c:	0160      	lsls	r0, r4, #5
 8000d8e:	4285      	cmp	r5, r0
 8000d90:	d22d      	bcs.n	8000dee <__aeabi_fdiv+0x1fa>
 8000d92:	231b      	movs	r3, #27
 8000d94:	2400      	movs	r4, #0
 8000d96:	3f01      	subs	r7, #1
 8000d98:	2601      	movs	r6, #1
 8000d9a:	0029      	movs	r1, r5
 8000d9c:	0064      	lsls	r4, r4, #1
 8000d9e:	006d      	lsls	r5, r5, #1
 8000da0:	2900      	cmp	r1, #0
 8000da2:	db01      	blt.n	8000da8 <__aeabi_fdiv+0x1b4>
 8000da4:	4285      	cmp	r5, r0
 8000da6:	d301      	bcc.n	8000dac <__aeabi_fdiv+0x1b8>
 8000da8:	1a2d      	subs	r5, r5, r0
 8000daa:	4334      	orrs	r4, r6
 8000dac:	3b01      	subs	r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f3      	bne.n	8000d9a <__aeabi_fdiv+0x1a6>
 8000db2:	1e6b      	subs	r3, r5, #1
 8000db4:	419d      	sbcs	r5, r3
 8000db6:	432c      	orrs	r4, r5
 8000db8:	e7b3      	b.n	8000d22 <__aeabi_fdiv+0x12e>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	1a1b      	subs	r3, r3, r0
 8000dbe:	2b1b      	cmp	r3, #27
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_fdiv+0x1d0>
 8000dc2:	e76d      	b.n	8000ca0 <__aeabi_fdiv+0xac>
 8000dc4:	0021      	movs	r1, r4
 8000dc6:	379e      	adds	r7, #158	@ 0x9e
 8000dc8:	40d9      	lsrs	r1, r3
 8000dca:	40bc      	lsls	r4, r7
 8000dcc:	000b      	movs	r3, r1
 8000dce:	1e61      	subs	r1, r4, #1
 8000dd0:	418c      	sbcs	r4, r1
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	0759      	lsls	r1, r3, #29
 8000dd6:	d004      	beq.n	8000de2 <__aeabi_fdiv+0x1ee>
 8000dd8:	210f      	movs	r1, #15
 8000dda:	4019      	ands	r1, r3
 8000ddc:	2904      	cmp	r1, #4
 8000dde:	d000      	beq.n	8000de2 <__aeabi_fdiv+0x1ee>
 8000de0:	3304      	adds	r3, #4
 8000de2:	0159      	lsls	r1, r3, #5
 8000de4:	d413      	bmi.n	8000e0e <__aeabi_fdiv+0x21a>
 8000de6:	019b      	lsls	r3, r3, #6
 8000de8:	2000      	movs	r0, #0
 8000dea:	0a5c      	lsrs	r4, r3, #9
 8000dec:	e75a      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000dee:	231a      	movs	r3, #26
 8000df0:	2401      	movs	r4, #1
 8000df2:	1a2d      	subs	r5, r5, r0
 8000df4:	e7d0      	b.n	8000d98 <__aeabi_fdiv+0x1a4>
 8000df6:	1e98      	subs	r0, r3, #2
 8000df8:	4243      	negs	r3, r0
 8000dfa:	4158      	adcs	r0, r3
 8000dfc:	4240      	negs	r0, r0
 8000dfe:	0032      	movs	r2, r6
 8000e00:	2400      	movs	r4, #0
 8000e02:	b2c0      	uxtb	r0, r0
 8000e04:	e74e      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000e06:	4642      	mov	r2, r8
 8000e08:	20ff      	movs	r0, #255	@ 0xff
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	e74a      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	2400      	movs	r4, #0
 8000e12:	e747      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000e14:	080162d4 	.word	0x080162d4
 8000e18:	08016314 	.word	0x08016314
 8000e1c:	f7ffffff 	.word	0xf7ffffff

08000e20 <__eqsf2>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	0042      	lsls	r2, r0, #1
 8000e24:	024e      	lsls	r6, r1, #9
 8000e26:	004c      	lsls	r4, r1, #1
 8000e28:	0245      	lsls	r5, r0, #9
 8000e2a:	0a6d      	lsrs	r5, r5, #9
 8000e2c:	0e12      	lsrs	r2, r2, #24
 8000e2e:	0fc3      	lsrs	r3, r0, #31
 8000e30:	0a76      	lsrs	r6, r6, #9
 8000e32:	0e24      	lsrs	r4, r4, #24
 8000e34:	0fc9      	lsrs	r1, r1, #31
 8000e36:	2aff      	cmp	r2, #255	@ 0xff
 8000e38:	d010      	beq.n	8000e5c <__eqsf2+0x3c>
 8000e3a:	2cff      	cmp	r4, #255	@ 0xff
 8000e3c:	d00c      	beq.n	8000e58 <__eqsf2+0x38>
 8000e3e:	2001      	movs	r0, #1
 8000e40:	42a2      	cmp	r2, r4
 8000e42:	d10a      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e44:	42b5      	cmp	r5, r6
 8000e46:	d108      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d00f      	beq.n	8000e6c <__eqsf2+0x4c>
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d104      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e50:	0028      	movs	r0, r5
 8000e52:	1e43      	subs	r3, r0, #1
 8000e54:	4198      	sbcs	r0, r3
 8000e56:	e000      	b.n	8000e5a <__eqsf2+0x3a>
 8000e58:	2001      	movs	r0, #1
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	2cff      	cmp	r4, #255	@ 0xff
 8000e60:	d1fb      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e62:	4335      	orrs	r5, r6
 8000e64:	d1f9      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e66:	404b      	eors	r3, r1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	e7f6      	b.n	8000e5a <__eqsf2+0x3a>
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e7f4      	b.n	8000e5a <__eqsf2+0x3a>

08000e70 <__gesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d018      	beq.n	8000ebc <__gesf2+0x4c>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00a      	beq.n	8000ea4 <__gesf2+0x34>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__gesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10a      	bne.n	8000eac <__gesf2+0x3c>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d029      	beq.n	8000eee <__gesf2+0x7e>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d12d      	bne.n	8000efa <__gesf2+0x8a>
 8000e9e:	0048      	lsls	r0, r1, #1
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	bd30      	pop	{r4, r5, pc}
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	d125      	bne.n	8000ef4 <__gesf2+0x84>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d101      	bne.n	8000eb0 <__gesf2+0x40>
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d0f6      	beq.n	8000e9e <__gesf2+0x2e>
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d019      	beq.n	8000ee8 <__gesf2+0x78>
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	4318      	orrs	r0, r3
 8000eba:	e7f2      	b.n	8000ea2 <__gesf2+0x32>
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	d119      	bne.n	8000ef4 <__gesf2+0x84>
 8000ec0:	28ff      	cmp	r0, #255	@ 0xff
 8000ec2:	d1f7      	bne.n	8000eb4 <__gesf2+0x44>
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d115      	bne.n	8000ef4 <__gesf2+0x84>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d1f2      	bne.n	8000eb4 <__gesf2+0x44>
 8000ece:	e7e8      	b.n	8000ea2 <__gesf2+0x32>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0ef      	beq.n	8000eb4 <__gesf2+0x44>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1ed      	bne.n	8000eb4 <__gesf2+0x44>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dceb      	bgt.n	8000eb4 <__gesf2+0x44>
 8000edc:	db04      	blt.n	8000ee8 <__gesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8e8      	bhi.n	8000eb4 <__gesf2+0x44>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2dc      	bcs.n	8000ea2 <__gesf2+0x32>
 8000ee8:	0058      	lsls	r0, r3, #1
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7d9      	b.n	8000ea2 <__gesf2+0x32>
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	d0d7      	beq.n	8000ea2 <__gesf2+0x32>
 8000ef2:	e7df      	b.n	8000eb4 <__gesf2+0x44>
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	4240      	negs	r0, r0
 8000ef8:	e7d3      	b.n	8000ea2 <__gesf2+0x32>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d1da      	bne.n	8000eb4 <__gesf2+0x44>
 8000efe:	e7ee      	b.n	8000ede <__gesf2+0x6e>

08000f00 <__lesf2>:
 8000f00:	b530      	push	{r4, r5, lr}
 8000f02:	0042      	lsls	r2, r0, #1
 8000f04:	0244      	lsls	r4, r0, #9
 8000f06:	024d      	lsls	r5, r1, #9
 8000f08:	0fc3      	lsrs	r3, r0, #31
 8000f0a:	0048      	lsls	r0, r1, #1
 8000f0c:	0a64      	lsrs	r4, r4, #9
 8000f0e:	0e12      	lsrs	r2, r2, #24
 8000f10:	0a6d      	lsrs	r5, r5, #9
 8000f12:	0e00      	lsrs	r0, r0, #24
 8000f14:	0fc9      	lsrs	r1, r1, #31
 8000f16:	2aff      	cmp	r2, #255	@ 0xff
 8000f18:	d017      	beq.n	8000f4a <__lesf2+0x4a>
 8000f1a:	28ff      	cmp	r0, #255	@ 0xff
 8000f1c:	d00a      	beq.n	8000f34 <__lesf2+0x34>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d11b      	bne.n	8000f5a <__lesf2+0x5a>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d10a      	bne.n	8000f3c <__lesf2+0x3c>
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d01d      	beq.n	8000f66 <__lesf2+0x66>
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	d12d      	bne.n	8000f8a <__lesf2+0x8a>
 8000f2e:	0048      	lsls	r0, r1, #1
 8000f30:	3801      	subs	r0, #1
 8000f32:	e011      	b.n	8000f58 <__lesf2+0x58>
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d10e      	bne.n	8000f56 <__lesf2+0x56>
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d101      	bne.n	8000f40 <__lesf2+0x40>
 8000f3c:	2c00      	cmp	r4, #0
 8000f3e:	d0f6      	beq.n	8000f2e <__lesf2+0x2e>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d10c      	bne.n	8000f5e <__lesf2+0x5e>
 8000f44:	0058      	lsls	r0, r3, #1
 8000f46:	3801      	subs	r0, #1
 8000f48:	e006      	b.n	8000f58 <__lesf2+0x58>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d103      	bne.n	8000f56 <__lesf2+0x56>
 8000f4e:	28ff      	cmp	r0, #255	@ 0xff
 8000f50:	d105      	bne.n	8000f5e <__lesf2+0x5e>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	d015      	beq.n	8000f82 <__lesf2+0x82>
 8000f56:	2002      	movs	r0, #2
 8000f58:	bd30      	pop	{r4, r5, pc}
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d106      	bne.n	8000f6c <__lesf2+0x6c>
 8000f5e:	2001      	movs	r0, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	4318      	orrs	r0, r3
 8000f64:	e7f8      	b.n	8000f58 <__lesf2+0x58>
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	d0f6      	beq.n	8000f58 <__lesf2+0x58>
 8000f6a:	e7f8      	b.n	8000f5e <__lesf2+0x5e>
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d1f6      	bne.n	8000f5e <__lesf2+0x5e>
 8000f70:	4282      	cmp	r2, r0
 8000f72:	dcf4      	bgt.n	8000f5e <__lesf2+0x5e>
 8000f74:	dbe6      	blt.n	8000f44 <__lesf2+0x44>
 8000f76:	42ac      	cmp	r4, r5
 8000f78:	d8f1      	bhi.n	8000f5e <__lesf2+0x5e>
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	42ac      	cmp	r4, r5
 8000f7e:	d2eb      	bcs.n	8000f58 <__lesf2+0x58>
 8000f80:	e7e0      	b.n	8000f44 <__lesf2+0x44>
 8000f82:	2000      	movs	r0, #0
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ea      	bne.n	8000f5e <__lesf2+0x5e>
 8000f88:	e7e6      	b.n	8000f58 <__lesf2+0x58>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1e7      	bne.n	8000f5e <__lesf2+0x5e>
 8000f8e:	e7f2      	b.n	8000f76 <__lesf2+0x76>

08000f90 <__aeabi_fmul>:
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	464f      	mov	r7, r9
 8000f94:	4646      	mov	r6, r8
 8000f96:	46d6      	mov	lr, sl
 8000f98:	0044      	lsls	r4, r0, #1
 8000f9a:	b5c0      	push	{r6, r7, lr}
 8000f9c:	0246      	lsls	r6, r0, #9
 8000f9e:	1c0f      	adds	r7, r1, #0
 8000fa0:	0a76      	lsrs	r6, r6, #9
 8000fa2:	0e24      	lsrs	r4, r4, #24
 8000fa4:	0fc5      	lsrs	r5, r0, #31
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fmul+0x1c>
 8000faa:	e0da      	b.n	8001162 <__aeabi_fmul+0x1d2>
 8000fac:	2cff      	cmp	r4, #255	@ 0xff
 8000fae:	d074      	beq.n	800109a <__aeabi_fmul+0x10a>
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	00f6      	lsls	r6, r6, #3
 8000fb4:	04db      	lsls	r3, r3, #19
 8000fb6:	431e      	orrs	r6, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4699      	mov	r9, r3
 8000fbc:	469a      	mov	sl, r3
 8000fbe:	3c7f      	subs	r4, #127	@ 0x7f
 8000fc0:	027b      	lsls	r3, r7, #9
 8000fc2:	0a5b      	lsrs	r3, r3, #9
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	007b      	lsls	r3, r7, #1
 8000fc8:	0e1b      	lsrs	r3, r3, #24
 8000fca:	0fff      	lsrs	r7, r7, #31
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d074      	beq.n	80010ba <__aeabi_fmul+0x12a>
 8000fd0:	2bff      	cmp	r3, #255	@ 0xff
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fmul+0x46>
 8000fd4:	e08e      	b.n	80010f4 <__aeabi_fmul+0x164>
 8000fd6:	4642      	mov	r2, r8
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	00d2      	lsls	r2, r2, #3
 8000fdc:	04c9      	lsls	r1, r1, #19
 8000fde:	4311      	orrs	r1, r2
 8000fe0:	3b7f      	subs	r3, #127	@ 0x7f
 8000fe2:	002a      	movs	r2, r5
 8000fe4:	18e4      	adds	r4, r4, r3
 8000fe6:	464b      	mov	r3, r9
 8000fe8:	407a      	eors	r2, r7
 8000fea:	4688      	mov	r8, r1
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	2b0a      	cmp	r3, #10
 8000ff0:	dc75      	bgt.n	80010de <__aeabi_fmul+0x14e>
 8000ff2:	464b      	mov	r3, r9
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	dd0f      	ble.n	800101a <__aeabi_fmul+0x8a>
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	408b      	lsls	r3, r1
 8001000:	21a6      	movs	r1, #166	@ 0xa6
 8001002:	00c9      	lsls	r1, r1, #3
 8001004:	420b      	tst	r3, r1
 8001006:	d169      	bne.n	80010dc <__aeabi_fmul+0x14c>
 8001008:	2190      	movs	r1, #144	@ 0x90
 800100a:	0089      	lsls	r1, r1, #2
 800100c:	420b      	tst	r3, r1
 800100e:	d000      	beq.n	8001012 <__aeabi_fmul+0x82>
 8001010:	e100      	b.n	8001214 <__aeabi_fmul+0x284>
 8001012:	2188      	movs	r1, #136	@ 0x88
 8001014:	4219      	tst	r1, r3
 8001016:	d000      	beq.n	800101a <__aeabi_fmul+0x8a>
 8001018:	e0f5      	b.n	8001206 <__aeabi_fmul+0x276>
 800101a:	4641      	mov	r1, r8
 800101c:	0409      	lsls	r1, r1, #16
 800101e:	0c09      	lsrs	r1, r1, #16
 8001020:	4643      	mov	r3, r8
 8001022:	0008      	movs	r0, r1
 8001024:	0c35      	lsrs	r5, r6, #16
 8001026:	0436      	lsls	r6, r6, #16
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	0c36      	lsrs	r6, r6, #16
 800102c:	4370      	muls	r0, r6
 800102e:	4369      	muls	r1, r5
 8001030:	435e      	muls	r6, r3
 8001032:	435d      	muls	r5, r3
 8001034:	1876      	adds	r6, r6, r1
 8001036:	0c03      	lsrs	r3, r0, #16
 8001038:	199b      	adds	r3, r3, r6
 800103a:	4299      	cmp	r1, r3
 800103c:	d903      	bls.n	8001046 <__aeabi_fmul+0xb6>
 800103e:	2180      	movs	r1, #128	@ 0x80
 8001040:	0249      	lsls	r1, r1, #9
 8001042:	468c      	mov	ip, r1
 8001044:	4465      	add	r5, ip
 8001046:	0400      	lsls	r0, r0, #16
 8001048:	0419      	lsls	r1, r3, #16
 800104a:	0c00      	lsrs	r0, r0, #16
 800104c:	1809      	adds	r1, r1, r0
 800104e:	018e      	lsls	r6, r1, #6
 8001050:	1e70      	subs	r0, r6, #1
 8001052:	4186      	sbcs	r6, r0
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	0e89      	lsrs	r1, r1, #26
 8001058:	195b      	adds	r3, r3, r5
 800105a:	430e      	orrs	r6, r1
 800105c:	019b      	lsls	r3, r3, #6
 800105e:	431e      	orrs	r6, r3
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	d46c      	bmi.n	800113e <__aeabi_fmul+0x1ae>
 8001064:	0023      	movs	r3, r4
 8001066:	337f      	adds	r3, #127	@ 0x7f
 8001068:	2b00      	cmp	r3, #0
 800106a:	dc00      	bgt.n	800106e <__aeabi_fmul+0xde>
 800106c:	e0b1      	b.n	80011d2 <__aeabi_fmul+0x242>
 800106e:	0015      	movs	r5, r2
 8001070:	0771      	lsls	r1, r6, #29
 8001072:	d00b      	beq.n	800108c <__aeabi_fmul+0xfc>
 8001074:	200f      	movs	r0, #15
 8001076:	0021      	movs	r1, r4
 8001078:	4030      	ands	r0, r6
 800107a:	2804      	cmp	r0, #4
 800107c:	d006      	beq.n	800108c <__aeabi_fmul+0xfc>
 800107e:	3604      	adds	r6, #4
 8001080:	0132      	lsls	r2, r6, #4
 8001082:	d503      	bpl.n	800108c <__aeabi_fmul+0xfc>
 8001084:	4b6e      	ldr	r3, [pc, #440]	@ (8001240 <__aeabi_fmul+0x2b0>)
 8001086:	401e      	ands	r6, r3
 8001088:	000b      	movs	r3, r1
 800108a:	3380      	adds	r3, #128	@ 0x80
 800108c:	2bfe      	cmp	r3, #254	@ 0xfe
 800108e:	dd00      	ble.n	8001092 <__aeabi_fmul+0x102>
 8001090:	e0bd      	b.n	800120e <__aeabi_fmul+0x27e>
 8001092:	01b2      	lsls	r2, r6, #6
 8001094:	0a52      	lsrs	r2, r2, #9
 8001096:	b2db      	uxtb	r3, r3
 8001098:	e048      	b.n	800112c <__aeabi_fmul+0x19c>
 800109a:	2e00      	cmp	r6, #0
 800109c:	d000      	beq.n	80010a0 <__aeabi_fmul+0x110>
 800109e:	e092      	b.n	80011c6 <__aeabi_fmul+0x236>
 80010a0:	2308      	movs	r3, #8
 80010a2:	4699      	mov	r9, r3
 80010a4:	3b06      	subs	r3, #6
 80010a6:	469a      	mov	sl, r3
 80010a8:	027b      	lsls	r3, r7, #9
 80010aa:	0a5b      	lsrs	r3, r3, #9
 80010ac:	4698      	mov	r8, r3
 80010ae:	007b      	lsls	r3, r7, #1
 80010b0:	24ff      	movs	r4, #255	@ 0xff
 80010b2:	0e1b      	lsrs	r3, r3, #24
 80010b4:	0fff      	lsrs	r7, r7, #31
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d18a      	bne.n	8000fd0 <__aeabi_fmul+0x40>
 80010ba:	4642      	mov	r2, r8
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d164      	bne.n	800118a <__aeabi_fmul+0x1fa>
 80010c0:	4649      	mov	r1, r9
 80010c2:	3201      	adds	r2, #1
 80010c4:	4311      	orrs	r1, r2
 80010c6:	4689      	mov	r9, r1
 80010c8:	290a      	cmp	r1, #10
 80010ca:	dc08      	bgt.n	80010de <__aeabi_fmul+0x14e>
 80010cc:	407d      	eors	r5, r7
 80010ce:	2001      	movs	r0, #1
 80010d0:	b2ea      	uxtb	r2, r5
 80010d2:	2902      	cmp	r1, #2
 80010d4:	dc91      	bgt.n	8000ffa <__aeabi_fmul+0x6a>
 80010d6:	0015      	movs	r5, r2
 80010d8:	2200      	movs	r2, #0
 80010da:	e027      	b.n	800112c <__aeabi_fmul+0x19c>
 80010dc:	0015      	movs	r5, r2
 80010de:	4653      	mov	r3, sl
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fmul+0x156>
 80010e4:	e093      	b.n	800120e <__aeabi_fmul+0x27e>
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d01a      	beq.n	8001120 <__aeabi_fmul+0x190>
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d12c      	bne.n	8001148 <__aeabi_fmul+0x1b8>
 80010ee:	2300      	movs	r3, #0
 80010f0:	2200      	movs	r2, #0
 80010f2:	e01b      	b.n	800112c <__aeabi_fmul+0x19c>
 80010f4:	4643      	mov	r3, r8
 80010f6:	34ff      	adds	r4, #255	@ 0xff
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d055      	beq.n	80011a8 <__aeabi_fmul+0x218>
 80010fc:	2103      	movs	r1, #3
 80010fe:	464b      	mov	r3, r9
 8001100:	430b      	orrs	r3, r1
 8001102:	0019      	movs	r1, r3
 8001104:	2b0a      	cmp	r3, #10
 8001106:	dc00      	bgt.n	800110a <__aeabi_fmul+0x17a>
 8001108:	e092      	b.n	8001230 <__aeabi_fmul+0x2a0>
 800110a:	2b0f      	cmp	r3, #15
 800110c:	d000      	beq.n	8001110 <__aeabi_fmul+0x180>
 800110e:	e08c      	b.n	800122a <__aeabi_fmul+0x29a>
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	03d2      	lsls	r2, r2, #15
 8001114:	4216      	tst	r6, r2
 8001116:	d003      	beq.n	8001120 <__aeabi_fmul+0x190>
 8001118:	4643      	mov	r3, r8
 800111a:	4213      	tst	r3, r2
 800111c:	d100      	bne.n	8001120 <__aeabi_fmul+0x190>
 800111e:	e07d      	b.n	800121c <__aeabi_fmul+0x28c>
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	03d2      	lsls	r2, r2, #15
 8001124:	4332      	orrs	r2, r6
 8001126:	0252      	lsls	r2, r2, #9
 8001128:	0a52      	lsrs	r2, r2, #9
 800112a:	23ff      	movs	r3, #255	@ 0xff
 800112c:	05d8      	lsls	r0, r3, #23
 800112e:	07ed      	lsls	r5, r5, #31
 8001130:	4310      	orrs	r0, r2
 8001132:	4328      	orrs	r0, r5
 8001134:	bce0      	pop	{r5, r6, r7}
 8001136:	46ba      	mov	sl, r7
 8001138:	46b1      	mov	r9, r6
 800113a:	46a8      	mov	r8, r5
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113e:	2301      	movs	r3, #1
 8001140:	0015      	movs	r5, r2
 8001142:	0871      	lsrs	r1, r6, #1
 8001144:	401e      	ands	r6, r3
 8001146:	430e      	orrs	r6, r1
 8001148:	0023      	movs	r3, r4
 800114a:	3380      	adds	r3, #128	@ 0x80
 800114c:	1c61      	adds	r1, r4, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	dd41      	ble.n	80011d6 <__aeabi_fmul+0x246>
 8001152:	0772      	lsls	r2, r6, #29
 8001154:	d094      	beq.n	8001080 <__aeabi_fmul+0xf0>
 8001156:	220f      	movs	r2, #15
 8001158:	4032      	ands	r2, r6
 800115a:	2a04      	cmp	r2, #4
 800115c:	d000      	beq.n	8001160 <__aeabi_fmul+0x1d0>
 800115e:	e78e      	b.n	800107e <__aeabi_fmul+0xee>
 8001160:	e78e      	b.n	8001080 <__aeabi_fmul+0xf0>
 8001162:	2e00      	cmp	r6, #0
 8001164:	d105      	bne.n	8001172 <__aeabi_fmul+0x1e2>
 8001166:	2304      	movs	r3, #4
 8001168:	4699      	mov	r9, r3
 800116a:	3b03      	subs	r3, #3
 800116c:	2400      	movs	r4, #0
 800116e:	469a      	mov	sl, r3
 8001170:	e726      	b.n	8000fc0 <__aeabi_fmul+0x30>
 8001172:	0030      	movs	r0, r6
 8001174:	f002 fbea 	bl	800394c <__clzsi2>
 8001178:	2476      	movs	r4, #118	@ 0x76
 800117a:	1f43      	subs	r3, r0, #5
 800117c:	409e      	lsls	r6, r3
 800117e:	2300      	movs	r3, #0
 8001180:	4264      	negs	r4, r4
 8001182:	4699      	mov	r9, r3
 8001184:	469a      	mov	sl, r3
 8001186:	1a24      	subs	r4, r4, r0
 8001188:	e71a      	b.n	8000fc0 <__aeabi_fmul+0x30>
 800118a:	4640      	mov	r0, r8
 800118c:	f002 fbde 	bl	800394c <__clzsi2>
 8001190:	464b      	mov	r3, r9
 8001192:	1a24      	subs	r4, r4, r0
 8001194:	3c76      	subs	r4, #118	@ 0x76
 8001196:	2b0a      	cmp	r3, #10
 8001198:	dca1      	bgt.n	80010de <__aeabi_fmul+0x14e>
 800119a:	4643      	mov	r3, r8
 800119c:	3805      	subs	r0, #5
 800119e:	4083      	lsls	r3, r0
 80011a0:	407d      	eors	r5, r7
 80011a2:	4698      	mov	r8, r3
 80011a4:	b2ea      	uxtb	r2, r5
 80011a6:	e724      	b.n	8000ff2 <__aeabi_fmul+0x62>
 80011a8:	464a      	mov	r2, r9
 80011aa:	3302      	adds	r3, #2
 80011ac:	4313      	orrs	r3, r2
 80011ae:	002a      	movs	r2, r5
 80011b0:	407a      	eors	r2, r7
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc92      	bgt.n	80010de <__aeabi_fmul+0x14e>
 80011b8:	4649      	mov	r1, r9
 80011ba:	0015      	movs	r5, r2
 80011bc:	2900      	cmp	r1, #0
 80011be:	d026      	beq.n	800120e <__aeabi_fmul+0x27e>
 80011c0:	4699      	mov	r9, r3
 80011c2:	2002      	movs	r0, #2
 80011c4:	e719      	b.n	8000ffa <__aeabi_fmul+0x6a>
 80011c6:	230c      	movs	r3, #12
 80011c8:	4699      	mov	r9, r3
 80011ca:	3b09      	subs	r3, #9
 80011cc:	24ff      	movs	r4, #255	@ 0xff
 80011ce:	469a      	mov	sl, r3
 80011d0:	e6f6      	b.n	8000fc0 <__aeabi_fmul+0x30>
 80011d2:	0015      	movs	r5, r2
 80011d4:	0021      	movs	r1, r4
 80011d6:	2201      	movs	r2, #1
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b1b      	cmp	r3, #27
 80011dc:	dd00      	ble.n	80011e0 <__aeabi_fmul+0x250>
 80011de:	e786      	b.n	80010ee <__aeabi_fmul+0x15e>
 80011e0:	319e      	adds	r1, #158	@ 0x9e
 80011e2:	0032      	movs	r2, r6
 80011e4:	408e      	lsls	r6, r1
 80011e6:	40da      	lsrs	r2, r3
 80011e8:	1e73      	subs	r3, r6, #1
 80011ea:	419e      	sbcs	r6, r3
 80011ec:	4332      	orrs	r2, r6
 80011ee:	0753      	lsls	r3, r2, #29
 80011f0:	d004      	beq.n	80011fc <__aeabi_fmul+0x26c>
 80011f2:	230f      	movs	r3, #15
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d000      	beq.n	80011fc <__aeabi_fmul+0x26c>
 80011fa:	3204      	adds	r2, #4
 80011fc:	0153      	lsls	r3, r2, #5
 80011fe:	d510      	bpl.n	8001222 <__aeabi_fmul+0x292>
 8001200:	2301      	movs	r3, #1
 8001202:	2200      	movs	r2, #0
 8001204:	e792      	b.n	800112c <__aeabi_fmul+0x19c>
 8001206:	003d      	movs	r5, r7
 8001208:	4646      	mov	r6, r8
 800120a:	4682      	mov	sl, r0
 800120c:	e767      	b.n	80010de <__aeabi_fmul+0x14e>
 800120e:	23ff      	movs	r3, #255	@ 0xff
 8001210:	2200      	movs	r2, #0
 8001212:	e78b      	b.n	800112c <__aeabi_fmul+0x19c>
 8001214:	2280      	movs	r2, #128	@ 0x80
 8001216:	2500      	movs	r5, #0
 8001218:	03d2      	lsls	r2, r2, #15
 800121a:	e786      	b.n	800112a <__aeabi_fmul+0x19a>
 800121c:	003d      	movs	r5, r7
 800121e:	431a      	orrs	r2, r3
 8001220:	e783      	b.n	800112a <__aeabi_fmul+0x19a>
 8001222:	0192      	lsls	r2, r2, #6
 8001224:	2300      	movs	r3, #0
 8001226:	0a52      	lsrs	r2, r2, #9
 8001228:	e780      	b.n	800112c <__aeabi_fmul+0x19c>
 800122a:	003d      	movs	r5, r7
 800122c:	4646      	mov	r6, r8
 800122e:	e777      	b.n	8001120 <__aeabi_fmul+0x190>
 8001230:	002a      	movs	r2, r5
 8001232:	2301      	movs	r3, #1
 8001234:	407a      	eors	r2, r7
 8001236:	408b      	lsls	r3, r1
 8001238:	2003      	movs	r0, #3
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	e6e9      	b.n	8001012 <__aeabi_fmul+0x82>
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	f7ffffff 	.word	0xf7ffffff

08001244 <__aeabi_fsub>:
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	4647      	mov	r7, r8
 8001248:	46ce      	mov	lr, r9
 800124a:	0243      	lsls	r3, r0, #9
 800124c:	b580      	push	{r7, lr}
 800124e:	0a5f      	lsrs	r7, r3, #9
 8001250:	099b      	lsrs	r3, r3, #6
 8001252:	0045      	lsls	r5, r0, #1
 8001254:	004a      	lsls	r2, r1, #1
 8001256:	469c      	mov	ip, r3
 8001258:	024b      	lsls	r3, r1, #9
 800125a:	0fc4      	lsrs	r4, r0, #31
 800125c:	0fce      	lsrs	r6, r1, #31
 800125e:	0e2d      	lsrs	r5, r5, #24
 8001260:	0a58      	lsrs	r0, r3, #9
 8001262:	0e12      	lsrs	r2, r2, #24
 8001264:	0999      	lsrs	r1, r3, #6
 8001266:	2aff      	cmp	r2, #255	@ 0xff
 8001268:	d06b      	beq.n	8001342 <__aeabi_fsub+0xfe>
 800126a:	2301      	movs	r3, #1
 800126c:	405e      	eors	r6, r3
 800126e:	1aab      	subs	r3, r5, r2
 8001270:	42b4      	cmp	r4, r6
 8001272:	d04b      	beq.n	800130c <__aeabi_fsub+0xc8>
 8001274:	2b00      	cmp	r3, #0
 8001276:	dc00      	bgt.n	800127a <__aeabi_fsub+0x36>
 8001278:	e0ff      	b.n	800147a <__aeabi_fsub+0x236>
 800127a:	2a00      	cmp	r2, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_fsub+0x3c>
 800127e:	e088      	b.n	8001392 <__aeabi_fsub+0x14e>
 8001280:	2dff      	cmp	r5, #255	@ 0xff
 8001282:	d100      	bne.n	8001286 <__aeabi_fsub+0x42>
 8001284:	e0ef      	b.n	8001466 <__aeabi_fsub+0x222>
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	04d2      	lsls	r2, r2, #19
 800128a:	4311      	orrs	r1, r2
 800128c:	2001      	movs	r0, #1
 800128e:	2b1b      	cmp	r3, #27
 8001290:	dc08      	bgt.n	80012a4 <__aeabi_fsub+0x60>
 8001292:	0008      	movs	r0, r1
 8001294:	2220      	movs	r2, #32
 8001296:	40d8      	lsrs	r0, r3
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	4099      	lsls	r1, r3
 800129c:	000b      	movs	r3, r1
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	4193      	sbcs	r3, r2
 80012a2:	4318      	orrs	r0, r3
 80012a4:	4663      	mov	r3, ip
 80012a6:	1a1b      	subs	r3, r3, r0
 80012a8:	469c      	mov	ip, r3
 80012aa:	4663      	mov	r3, ip
 80012ac:	015b      	lsls	r3, r3, #5
 80012ae:	d400      	bmi.n	80012b2 <__aeabi_fsub+0x6e>
 80012b0:	e0cd      	b.n	800144e <__aeabi_fsub+0x20a>
 80012b2:	4663      	mov	r3, ip
 80012b4:	019f      	lsls	r7, r3, #6
 80012b6:	09bf      	lsrs	r7, r7, #6
 80012b8:	0038      	movs	r0, r7
 80012ba:	f002 fb47 	bl	800394c <__clzsi2>
 80012be:	003b      	movs	r3, r7
 80012c0:	3805      	subs	r0, #5
 80012c2:	4083      	lsls	r3, r0
 80012c4:	4285      	cmp	r5, r0
 80012c6:	dc00      	bgt.n	80012ca <__aeabi_fsub+0x86>
 80012c8:	e0a2      	b.n	8001410 <__aeabi_fsub+0x1cc>
 80012ca:	4ab7      	ldr	r2, [pc, #732]	@ (80015a8 <__aeabi_fsub+0x364>)
 80012cc:	1a2d      	subs	r5, r5, r0
 80012ce:	401a      	ands	r2, r3
 80012d0:	4694      	mov	ip, r2
 80012d2:	075a      	lsls	r2, r3, #29
 80012d4:	d100      	bne.n	80012d8 <__aeabi_fsub+0x94>
 80012d6:	e0c3      	b.n	8001460 <__aeabi_fsub+0x21c>
 80012d8:	220f      	movs	r2, #15
 80012da:	4013      	ands	r3, r2
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d100      	bne.n	80012e2 <__aeabi_fsub+0x9e>
 80012e0:	e0be      	b.n	8001460 <__aeabi_fsub+0x21c>
 80012e2:	2304      	movs	r3, #4
 80012e4:	4698      	mov	r8, r3
 80012e6:	44c4      	add	ip, r8
 80012e8:	4663      	mov	r3, ip
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	d400      	bmi.n	80012f0 <__aeabi_fsub+0xac>
 80012ee:	e0b7      	b.n	8001460 <__aeabi_fsub+0x21c>
 80012f0:	1c68      	adds	r0, r5, #1
 80012f2:	2dfe      	cmp	r5, #254	@ 0xfe
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0xb4>
 80012f6:	e0a5      	b.n	8001444 <__aeabi_fsub+0x200>
 80012f8:	20ff      	movs	r0, #255	@ 0xff
 80012fa:	2200      	movs	r2, #0
 80012fc:	05c0      	lsls	r0, r0, #23
 80012fe:	4310      	orrs	r0, r2
 8001300:	07e4      	lsls	r4, r4, #31
 8001302:	4320      	orrs	r0, r4
 8001304:	bcc0      	pop	{r6, r7}
 8001306:	46b9      	mov	r9, r7
 8001308:	46b0      	mov	r8, r6
 800130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130c:	2b00      	cmp	r3, #0
 800130e:	dc00      	bgt.n	8001312 <__aeabi_fsub+0xce>
 8001310:	e1eb      	b.n	80016ea <__aeabi_fsub+0x4a6>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d046      	beq.n	80013a4 <__aeabi_fsub+0x160>
 8001316:	2dff      	cmp	r5, #255	@ 0xff
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0xd8>
 800131a:	e0a4      	b.n	8001466 <__aeabi_fsub+0x222>
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	04d2      	lsls	r2, r2, #19
 8001320:	4311      	orrs	r1, r2
 8001322:	2b1b      	cmp	r3, #27
 8001324:	dc00      	bgt.n	8001328 <__aeabi_fsub+0xe4>
 8001326:	e0fb      	b.n	8001520 <__aeabi_fsub+0x2dc>
 8001328:	2305      	movs	r3, #5
 800132a:	4698      	mov	r8, r3
 800132c:	002b      	movs	r3, r5
 800132e:	44c4      	add	ip, r8
 8001330:	4662      	mov	r2, ip
 8001332:	08d7      	lsrs	r7, r2, #3
 8001334:	2bff      	cmp	r3, #255	@ 0xff
 8001336:	d100      	bne.n	800133a <__aeabi_fsub+0xf6>
 8001338:	e095      	b.n	8001466 <__aeabi_fsub+0x222>
 800133a:	027a      	lsls	r2, r7, #9
 800133c:	0a52      	lsrs	r2, r2, #9
 800133e:	b2d8      	uxtb	r0, r3
 8001340:	e7dc      	b.n	80012fc <__aeabi_fsub+0xb8>
 8001342:	002b      	movs	r3, r5
 8001344:	3bff      	subs	r3, #255	@ 0xff
 8001346:	4699      	mov	r9, r3
 8001348:	2900      	cmp	r1, #0
 800134a:	d118      	bne.n	800137e <__aeabi_fsub+0x13a>
 800134c:	2301      	movs	r3, #1
 800134e:	405e      	eors	r6, r3
 8001350:	42b4      	cmp	r4, r6
 8001352:	d100      	bne.n	8001356 <__aeabi_fsub+0x112>
 8001354:	e0ca      	b.n	80014ec <__aeabi_fsub+0x2a8>
 8001356:	464b      	mov	r3, r9
 8001358:	2b00      	cmp	r3, #0
 800135a:	d02d      	beq.n	80013b8 <__aeabi_fsub+0x174>
 800135c:	2d00      	cmp	r5, #0
 800135e:	d000      	beq.n	8001362 <__aeabi_fsub+0x11e>
 8001360:	e13c      	b.n	80015dc <__aeabi_fsub+0x398>
 8001362:	23ff      	movs	r3, #255	@ 0xff
 8001364:	4664      	mov	r4, ip
 8001366:	2c00      	cmp	r4, #0
 8001368:	d100      	bne.n	800136c <__aeabi_fsub+0x128>
 800136a:	e15f      	b.n	800162c <__aeabi_fsub+0x3e8>
 800136c:	1e5d      	subs	r5, r3, #1
 800136e:	2b01      	cmp	r3, #1
 8001370:	d100      	bne.n	8001374 <__aeabi_fsub+0x130>
 8001372:	e174      	b.n	800165e <__aeabi_fsub+0x41a>
 8001374:	0034      	movs	r4, r6
 8001376:	2bff      	cmp	r3, #255	@ 0xff
 8001378:	d074      	beq.n	8001464 <__aeabi_fsub+0x220>
 800137a:	002b      	movs	r3, r5
 800137c:	e103      	b.n	8001586 <__aeabi_fsub+0x342>
 800137e:	42b4      	cmp	r4, r6
 8001380:	d100      	bne.n	8001384 <__aeabi_fsub+0x140>
 8001382:	e09c      	b.n	80014be <__aeabi_fsub+0x27a>
 8001384:	2b00      	cmp	r3, #0
 8001386:	d017      	beq.n	80013b8 <__aeabi_fsub+0x174>
 8001388:	2d00      	cmp	r5, #0
 800138a:	d0ea      	beq.n	8001362 <__aeabi_fsub+0x11e>
 800138c:	0007      	movs	r7, r0
 800138e:	0034      	movs	r4, r6
 8001390:	e06c      	b.n	800146c <__aeabi_fsub+0x228>
 8001392:	2900      	cmp	r1, #0
 8001394:	d0cc      	beq.n	8001330 <__aeabi_fsub+0xec>
 8001396:	1e5a      	subs	r2, r3, #1
 8001398:	2b01      	cmp	r3, #1
 800139a:	d02b      	beq.n	80013f4 <__aeabi_fsub+0x1b0>
 800139c:	2bff      	cmp	r3, #255	@ 0xff
 800139e:	d062      	beq.n	8001466 <__aeabi_fsub+0x222>
 80013a0:	0013      	movs	r3, r2
 80013a2:	e773      	b.n	800128c <__aeabi_fsub+0x48>
 80013a4:	2900      	cmp	r1, #0
 80013a6:	d0c3      	beq.n	8001330 <__aeabi_fsub+0xec>
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d100      	bne.n	80013b0 <__aeabi_fsub+0x16c>
 80013ae:	e11e      	b.n	80015ee <__aeabi_fsub+0x3aa>
 80013b0:	2bff      	cmp	r3, #255	@ 0xff
 80013b2:	d058      	beq.n	8001466 <__aeabi_fsub+0x222>
 80013b4:	0013      	movs	r3, r2
 80013b6:	e7b4      	b.n	8001322 <__aeabi_fsub+0xde>
 80013b8:	22fe      	movs	r2, #254	@ 0xfe
 80013ba:	1c6b      	adds	r3, r5, #1
 80013bc:	421a      	tst	r2, r3
 80013be:	d10d      	bne.n	80013dc <__aeabi_fsub+0x198>
 80013c0:	2d00      	cmp	r5, #0
 80013c2:	d060      	beq.n	8001486 <__aeabi_fsub+0x242>
 80013c4:	4663      	mov	r3, ip
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d000      	beq.n	80013cc <__aeabi_fsub+0x188>
 80013ca:	e120      	b.n	800160e <__aeabi_fsub+0x3ca>
 80013cc:	2900      	cmp	r1, #0
 80013ce:	d000      	beq.n	80013d2 <__aeabi_fsub+0x18e>
 80013d0:	e128      	b.n	8001624 <__aeabi_fsub+0x3e0>
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	2400      	movs	r4, #0
 80013d6:	20ff      	movs	r0, #255	@ 0xff
 80013d8:	03d2      	lsls	r2, r2, #15
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xb8>
 80013dc:	4663      	mov	r3, ip
 80013de:	1a5f      	subs	r7, r3, r1
 80013e0:	017b      	lsls	r3, r7, #5
 80013e2:	d500      	bpl.n	80013e6 <__aeabi_fsub+0x1a2>
 80013e4:	e0fe      	b.n	80015e4 <__aeabi_fsub+0x3a0>
 80013e6:	2f00      	cmp	r7, #0
 80013e8:	d000      	beq.n	80013ec <__aeabi_fsub+0x1a8>
 80013ea:	e765      	b.n	80012b8 <__aeabi_fsub+0x74>
 80013ec:	2400      	movs	r4, #0
 80013ee:	2000      	movs	r0, #0
 80013f0:	2200      	movs	r2, #0
 80013f2:	e783      	b.n	80012fc <__aeabi_fsub+0xb8>
 80013f4:	4663      	mov	r3, ip
 80013f6:	1a59      	subs	r1, r3, r1
 80013f8:	014b      	lsls	r3, r1, #5
 80013fa:	d400      	bmi.n	80013fe <__aeabi_fsub+0x1ba>
 80013fc:	e119      	b.n	8001632 <__aeabi_fsub+0x3ee>
 80013fe:	018f      	lsls	r7, r1, #6
 8001400:	09bf      	lsrs	r7, r7, #6
 8001402:	0038      	movs	r0, r7
 8001404:	f002 faa2 	bl	800394c <__clzsi2>
 8001408:	003b      	movs	r3, r7
 800140a:	3805      	subs	r0, #5
 800140c:	4083      	lsls	r3, r0
 800140e:	2501      	movs	r5, #1
 8001410:	2220      	movs	r2, #32
 8001412:	1b40      	subs	r0, r0, r5
 8001414:	3001      	adds	r0, #1
 8001416:	1a12      	subs	r2, r2, r0
 8001418:	0019      	movs	r1, r3
 800141a:	4093      	lsls	r3, r2
 800141c:	40c1      	lsrs	r1, r0
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	4193      	sbcs	r3, r2
 8001422:	4319      	orrs	r1, r3
 8001424:	468c      	mov	ip, r1
 8001426:	1e0b      	subs	r3, r1, #0
 8001428:	d0e1      	beq.n	80013ee <__aeabi_fsub+0x1aa>
 800142a:	075b      	lsls	r3, r3, #29
 800142c:	d100      	bne.n	8001430 <__aeabi_fsub+0x1ec>
 800142e:	e152      	b.n	80016d6 <__aeabi_fsub+0x492>
 8001430:	230f      	movs	r3, #15
 8001432:	2500      	movs	r5, #0
 8001434:	400b      	ands	r3, r1
 8001436:	2b04      	cmp	r3, #4
 8001438:	d000      	beq.n	800143c <__aeabi_fsub+0x1f8>
 800143a:	e752      	b.n	80012e2 <__aeabi_fsub+0x9e>
 800143c:	2001      	movs	r0, #1
 800143e:	014a      	lsls	r2, r1, #5
 8001440:	d400      	bmi.n	8001444 <__aeabi_fsub+0x200>
 8001442:	e092      	b.n	800156a <__aeabi_fsub+0x326>
 8001444:	b2c0      	uxtb	r0, r0
 8001446:	4663      	mov	r3, ip
 8001448:	019a      	lsls	r2, r3, #6
 800144a:	0a52      	lsrs	r2, r2, #9
 800144c:	e756      	b.n	80012fc <__aeabi_fsub+0xb8>
 800144e:	4663      	mov	r3, ip
 8001450:	075b      	lsls	r3, r3, #29
 8001452:	d005      	beq.n	8001460 <__aeabi_fsub+0x21c>
 8001454:	230f      	movs	r3, #15
 8001456:	4662      	mov	r2, ip
 8001458:	4013      	ands	r3, r2
 800145a:	2b04      	cmp	r3, #4
 800145c:	d000      	beq.n	8001460 <__aeabi_fsub+0x21c>
 800145e:	e740      	b.n	80012e2 <__aeabi_fsub+0x9e>
 8001460:	002b      	movs	r3, r5
 8001462:	e765      	b.n	8001330 <__aeabi_fsub+0xec>
 8001464:	0007      	movs	r7, r0
 8001466:	2f00      	cmp	r7, #0
 8001468:	d100      	bne.n	800146c <__aeabi_fsub+0x228>
 800146a:	e745      	b.n	80012f8 <__aeabi_fsub+0xb4>
 800146c:	2280      	movs	r2, #128	@ 0x80
 800146e:	03d2      	lsls	r2, r2, #15
 8001470:	433a      	orrs	r2, r7
 8001472:	0252      	lsls	r2, r2, #9
 8001474:	20ff      	movs	r0, #255	@ 0xff
 8001476:	0a52      	lsrs	r2, r2, #9
 8001478:	e740      	b.n	80012fc <__aeabi_fsub+0xb8>
 800147a:	2b00      	cmp	r3, #0
 800147c:	d179      	bne.n	8001572 <__aeabi_fsub+0x32e>
 800147e:	22fe      	movs	r2, #254	@ 0xfe
 8001480:	1c6b      	adds	r3, r5, #1
 8001482:	421a      	tst	r2, r3
 8001484:	d1aa      	bne.n	80013dc <__aeabi_fsub+0x198>
 8001486:	4663      	mov	r3, ip
 8001488:	2b00      	cmp	r3, #0
 800148a:	d100      	bne.n	800148e <__aeabi_fsub+0x24a>
 800148c:	e0f5      	b.n	800167a <__aeabi_fsub+0x436>
 800148e:	2900      	cmp	r1, #0
 8001490:	d100      	bne.n	8001494 <__aeabi_fsub+0x250>
 8001492:	e0d1      	b.n	8001638 <__aeabi_fsub+0x3f4>
 8001494:	1a5f      	subs	r7, r3, r1
 8001496:	2380      	movs	r3, #128	@ 0x80
 8001498:	04db      	lsls	r3, r3, #19
 800149a:	421f      	tst	r7, r3
 800149c:	d100      	bne.n	80014a0 <__aeabi_fsub+0x25c>
 800149e:	e10e      	b.n	80016be <__aeabi_fsub+0x47a>
 80014a0:	4662      	mov	r2, ip
 80014a2:	2401      	movs	r4, #1
 80014a4:	1a8a      	subs	r2, r1, r2
 80014a6:	4694      	mov	ip, r2
 80014a8:	2000      	movs	r0, #0
 80014aa:	4034      	ands	r4, r6
 80014ac:	2a00      	cmp	r2, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_fsub+0x26e>
 80014b0:	e724      	b.n	80012fc <__aeabi_fsub+0xb8>
 80014b2:	2001      	movs	r0, #1
 80014b4:	421a      	tst	r2, r3
 80014b6:	d1c6      	bne.n	8001446 <__aeabi_fsub+0x202>
 80014b8:	2300      	movs	r3, #0
 80014ba:	08d7      	lsrs	r7, r2, #3
 80014bc:	e73d      	b.n	800133a <__aeabi_fsub+0xf6>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d017      	beq.n	80014f2 <__aeabi_fsub+0x2ae>
 80014c2:	2d00      	cmp	r5, #0
 80014c4:	d000      	beq.n	80014c8 <__aeabi_fsub+0x284>
 80014c6:	e0af      	b.n	8001628 <__aeabi_fsub+0x3e4>
 80014c8:	23ff      	movs	r3, #255	@ 0xff
 80014ca:	4665      	mov	r5, ip
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	d100      	bne.n	80014d2 <__aeabi_fsub+0x28e>
 80014d0:	e0ad      	b.n	800162e <__aeabi_fsub+0x3ea>
 80014d2:	1e5e      	subs	r6, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d100      	bne.n	80014da <__aeabi_fsub+0x296>
 80014d8:	e089      	b.n	80015ee <__aeabi_fsub+0x3aa>
 80014da:	2bff      	cmp	r3, #255	@ 0xff
 80014dc:	d0c2      	beq.n	8001464 <__aeabi_fsub+0x220>
 80014de:	2e1b      	cmp	r6, #27
 80014e0:	dc00      	bgt.n	80014e4 <__aeabi_fsub+0x2a0>
 80014e2:	e0ab      	b.n	800163c <__aeabi_fsub+0x3f8>
 80014e4:	1d4b      	adds	r3, r1, #5
 80014e6:	469c      	mov	ip, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	e721      	b.n	8001330 <__aeabi_fsub+0xec>
 80014ec:	464b      	mov	r3, r9
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d170      	bne.n	80015d4 <__aeabi_fsub+0x390>
 80014f2:	22fe      	movs	r2, #254	@ 0xfe
 80014f4:	1c6b      	adds	r3, r5, #1
 80014f6:	421a      	tst	r2, r3
 80014f8:	d15e      	bne.n	80015b8 <__aeabi_fsub+0x374>
 80014fa:	2d00      	cmp	r5, #0
 80014fc:	d000      	beq.n	8001500 <__aeabi_fsub+0x2bc>
 80014fe:	e0c3      	b.n	8001688 <__aeabi_fsub+0x444>
 8001500:	4663      	mov	r3, ip
 8001502:	2b00      	cmp	r3, #0
 8001504:	d100      	bne.n	8001508 <__aeabi_fsub+0x2c4>
 8001506:	e0d0      	b.n	80016aa <__aeabi_fsub+0x466>
 8001508:	2900      	cmp	r1, #0
 800150a:	d100      	bne.n	800150e <__aeabi_fsub+0x2ca>
 800150c:	e094      	b.n	8001638 <__aeabi_fsub+0x3f4>
 800150e:	000a      	movs	r2, r1
 8001510:	4462      	add	r2, ip
 8001512:	0153      	lsls	r3, r2, #5
 8001514:	d400      	bmi.n	8001518 <__aeabi_fsub+0x2d4>
 8001516:	e0d8      	b.n	80016ca <__aeabi_fsub+0x486>
 8001518:	0192      	lsls	r2, r2, #6
 800151a:	2001      	movs	r0, #1
 800151c:	0a52      	lsrs	r2, r2, #9
 800151e:	e6ed      	b.n	80012fc <__aeabi_fsub+0xb8>
 8001520:	0008      	movs	r0, r1
 8001522:	2220      	movs	r2, #32
 8001524:	40d8      	lsrs	r0, r3
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	4099      	lsls	r1, r3
 800152a:	000b      	movs	r3, r1
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	4193      	sbcs	r3, r2
 8001530:	4303      	orrs	r3, r0
 8001532:	449c      	add	ip, r3
 8001534:	4663      	mov	r3, ip
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	d589      	bpl.n	800144e <__aeabi_fsub+0x20a>
 800153a:	3501      	adds	r5, #1
 800153c:	2dff      	cmp	r5, #255	@ 0xff
 800153e:	d100      	bne.n	8001542 <__aeabi_fsub+0x2fe>
 8001540:	e6da      	b.n	80012f8 <__aeabi_fsub+0xb4>
 8001542:	4662      	mov	r2, ip
 8001544:	2301      	movs	r3, #1
 8001546:	4919      	ldr	r1, [pc, #100]	@ (80015ac <__aeabi_fsub+0x368>)
 8001548:	4013      	ands	r3, r2
 800154a:	0852      	lsrs	r2, r2, #1
 800154c:	400a      	ands	r2, r1
 800154e:	431a      	orrs	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	4694      	mov	ip, r2
 8001554:	075b      	lsls	r3, r3, #29
 8001556:	d004      	beq.n	8001562 <__aeabi_fsub+0x31e>
 8001558:	230f      	movs	r3, #15
 800155a:	4013      	ands	r3, r2
 800155c:	2b04      	cmp	r3, #4
 800155e:	d000      	beq.n	8001562 <__aeabi_fsub+0x31e>
 8001560:	e6bf      	b.n	80012e2 <__aeabi_fsub+0x9e>
 8001562:	4663      	mov	r3, ip
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	d500      	bpl.n	800156a <__aeabi_fsub+0x326>
 8001568:	e6c2      	b.n	80012f0 <__aeabi_fsub+0xac>
 800156a:	4663      	mov	r3, ip
 800156c:	08df      	lsrs	r7, r3, #3
 800156e:	002b      	movs	r3, r5
 8001570:	e6e3      	b.n	800133a <__aeabi_fsub+0xf6>
 8001572:	1b53      	subs	r3, r2, r5
 8001574:	2d00      	cmp	r5, #0
 8001576:	d100      	bne.n	800157a <__aeabi_fsub+0x336>
 8001578:	e6f4      	b.n	8001364 <__aeabi_fsub+0x120>
 800157a:	2080      	movs	r0, #128	@ 0x80
 800157c:	4664      	mov	r4, ip
 800157e:	04c0      	lsls	r0, r0, #19
 8001580:	4304      	orrs	r4, r0
 8001582:	46a4      	mov	ip, r4
 8001584:	0034      	movs	r4, r6
 8001586:	2001      	movs	r0, #1
 8001588:	2b1b      	cmp	r3, #27
 800158a:	dc09      	bgt.n	80015a0 <__aeabi_fsub+0x35c>
 800158c:	2520      	movs	r5, #32
 800158e:	4660      	mov	r0, ip
 8001590:	40d8      	lsrs	r0, r3
 8001592:	1aeb      	subs	r3, r5, r3
 8001594:	4665      	mov	r5, ip
 8001596:	409d      	lsls	r5, r3
 8001598:	002b      	movs	r3, r5
 800159a:	1e5d      	subs	r5, r3, #1
 800159c:	41ab      	sbcs	r3, r5
 800159e:	4318      	orrs	r0, r3
 80015a0:	1a0b      	subs	r3, r1, r0
 80015a2:	469c      	mov	ip, r3
 80015a4:	0015      	movs	r5, r2
 80015a6:	e680      	b.n	80012aa <__aeabi_fsub+0x66>
 80015a8:	fbffffff 	.word	0xfbffffff
 80015ac:	7dffffff 	.word	0x7dffffff
 80015b0:	22fe      	movs	r2, #254	@ 0xfe
 80015b2:	1c6b      	adds	r3, r5, #1
 80015b4:	4213      	tst	r3, r2
 80015b6:	d0a3      	beq.n	8001500 <__aeabi_fsub+0x2bc>
 80015b8:	2bff      	cmp	r3, #255	@ 0xff
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x37a>
 80015bc:	e69c      	b.n	80012f8 <__aeabi_fsub+0xb4>
 80015be:	4461      	add	r1, ip
 80015c0:	0849      	lsrs	r1, r1, #1
 80015c2:	074a      	lsls	r2, r1, #29
 80015c4:	d049      	beq.n	800165a <__aeabi_fsub+0x416>
 80015c6:	220f      	movs	r2, #15
 80015c8:	400a      	ands	r2, r1
 80015ca:	2a04      	cmp	r2, #4
 80015cc:	d045      	beq.n	800165a <__aeabi_fsub+0x416>
 80015ce:	1d0a      	adds	r2, r1, #4
 80015d0:	4694      	mov	ip, r2
 80015d2:	e6ad      	b.n	8001330 <__aeabi_fsub+0xec>
 80015d4:	2d00      	cmp	r5, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_fsub+0x396>
 80015d8:	e776      	b.n	80014c8 <__aeabi_fsub+0x284>
 80015da:	e68d      	b.n	80012f8 <__aeabi_fsub+0xb4>
 80015dc:	0034      	movs	r4, r6
 80015de:	20ff      	movs	r0, #255	@ 0xff
 80015e0:	2200      	movs	r2, #0
 80015e2:	e68b      	b.n	80012fc <__aeabi_fsub+0xb8>
 80015e4:	4663      	mov	r3, ip
 80015e6:	2401      	movs	r4, #1
 80015e8:	1acf      	subs	r7, r1, r3
 80015ea:	4034      	ands	r4, r6
 80015ec:	e664      	b.n	80012b8 <__aeabi_fsub+0x74>
 80015ee:	4461      	add	r1, ip
 80015f0:	014b      	lsls	r3, r1, #5
 80015f2:	d56d      	bpl.n	80016d0 <__aeabi_fsub+0x48c>
 80015f4:	0848      	lsrs	r0, r1, #1
 80015f6:	4944      	ldr	r1, [pc, #272]	@ (8001708 <__aeabi_fsub+0x4c4>)
 80015f8:	4001      	ands	r1, r0
 80015fa:	0743      	lsls	r3, r0, #29
 80015fc:	d02c      	beq.n	8001658 <__aeabi_fsub+0x414>
 80015fe:	230f      	movs	r3, #15
 8001600:	4003      	ands	r3, r0
 8001602:	2b04      	cmp	r3, #4
 8001604:	d028      	beq.n	8001658 <__aeabi_fsub+0x414>
 8001606:	1d0b      	adds	r3, r1, #4
 8001608:	469c      	mov	ip, r3
 800160a:	2302      	movs	r3, #2
 800160c:	e690      	b.n	8001330 <__aeabi_fsub+0xec>
 800160e:	2900      	cmp	r1, #0
 8001610:	d100      	bne.n	8001614 <__aeabi_fsub+0x3d0>
 8001612:	e72b      	b.n	800146c <__aeabi_fsub+0x228>
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	03db      	lsls	r3, r3, #15
 8001618:	429f      	cmp	r7, r3
 800161a:	d200      	bcs.n	800161e <__aeabi_fsub+0x3da>
 800161c:	e726      	b.n	800146c <__aeabi_fsub+0x228>
 800161e:	4298      	cmp	r0, r3
 8001620:	d300      	bcc.n	8001624 <__aeabi_fsub+0x3e0>
 8001622:	e723      	b.n	800146c <__aeabi_fsub+0x228>
 8001624:	2401      	movs	r4, #1
 8001626:	4034      	ands	r4, r6
 8001628:	0007      	movs	r7, r0
 800162a:	e71f      	b.n	800146c <__aeabi_fsub+0x228>
 800162c:	0034      	movs	r4, r6
 800162e:	468c      	mov	ip, r1
 8001630:	e67e      	b.n	8001330 <__aeabi_fsub+0xec>
 8001632:	2301      	movs	r3, #1
 8001634:	08cf      	lsrs	r7, r1, #3
 8001636:	e680      	b.n	800133a <__aeabi_fsub+0xf6>
 8001638:	2300      	movs	r3, #0
 800163a:	e67e      	b.n	800133a <__aeabi_fsub+0xf6>
 800163c:	2020      	movs	r0, #32
 800163e:	4665      	mov	r5, ip
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	4085      	lsls	r5, r0
 8001644:	4663      	mov	r3, ip
 8001646:	0028      	movs	r0, r5
 8001648:	40f3      	lsrs	r3, r6
 800164a:	1e45      	subs	r5, r0, #1
 800164c:	41a8      	sbcs	r0, r5
 800164e:	4303      	orrs	r3, r0
 8001650:	469c      	mov	ip, r3
 8001652:	0015      	movs	r5, r2
 8001654:	448c      	add	ip, r1
 8001656:	e76d      	b.n	8001534 <__aeabi_fsub+0x2f0>
 8001658:	2302      	movs	r3, #2
 800165a:	08cf      	lsrs	r7, r1, #3
 800165c:	e66d      	b.n	800133a <__aeabi_fsub+0xf6>
 800165e:	1b0f      	subs	r7, r1, r4
 8001660:	017b      	lsls	r3, r7, #5
 8001662:	d528      	bpl.n	80016b6 <__aeabi_fsub+0x472>
 8001664:	01bf      	lsls	r7, r7, #6
 8001666:	09bf      	lsrs	r7, r7, #6
 8001668:	0038      	movs	r0, r7
 800166a:	f002 f96f 	bl	800394c <__clzsi2>
 800166e:	003b      	movs	r3, r7
 8001670:	3805      	subs	r0, #5
 8001672:	4083      	lsls	r3, r0
 8001674:	0034      	movs	r4, r6
 8001676:	2501      	movs	r5, #1
 8001678:	e6ca      	b.n	8001410 <__aeabi_fsub+0x1cc>
 800167a:	2900      	cmp	r1, #0
 800167c:	d100      	bne.n	8001680 <__aeabi_fsub+0x43c>
 800167e:	e6b5      	b.n	80013ec <__aeabi_fsub+0x1a8>
 8001680:	2401      	movs	r4, #1
 8001682:	0007      	movs	r7, r0
 8001684:	4034      	ands	r4, r6
 8001686:	e658      	b.n	800133a <__aeabi_fsub+0xf6>
 8001688:	4663      	mov	r3, ip
 800168a:	2b00      	cmp	r3, #0
 800168c:	d100      	bne.n	8001690 <__aeabi_fsub+0x44c>
 800168e:	e6e9      	b.n	8001464 <__aeabi_fsub+0x220>
 8001690:	2900      	cmp	r1, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_fsub+0x452>
 8001694:	e6ea      	b.n	800146c <__aeabi_fsub+0x228>
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	03db      	lsls	r3, r3, #15
 800169a:	429f      	cmp	r7, r3
 800169c:	d200      	bcs.n	80016a0 <__aeabi_fsub+0x45c>
 800169e:	e6e5      	b.n	800146c <__aeabi_fsub+0x228>
 80016a0:	4298      	cmp	r0, r3
 80016a2:	d300      	bcc.n	80016a6 <__aeabi_fsub+0x462>
 80016a4:	e6e2      	b.n	800146c <__aeabi_fsub+0x228>
 80016a6:	0007      	movs	r7, r0
 80016a8:	e6e0      	b.n	800146c <__aeabi_fsub+0x228>
 80016aa:	2900      	cmp	r1, #0
 80016ac:	d100      	bne.n	80016b0 <__aeabi_fsub+0x46c>
 80016ae:	e69e      	b.n	80013ee <__aeabi_fsub+0x1aa>
 80016b0:	2300      	movs	r3, #0
 80016b2:	08cf      	lsrs	r7, r1, #3
 80016b4:	e641      	b.n	800133a <__aeabi_fsub+0xf6>
 80016b6:	0034      	movs	r4, r6
 80016b8:	2301      	movs	r3, #1
 80016ba:	08ff      	lsrs	r7, r7, #3
 80016bc:	e63d      	b.n	800133a <__aeabi_fsub+0xf6>
 80016be:	2f00      	cmp	r7, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x480>
 80016c2:	e693      	b.n	80013ec <__aeabi_fsub+0x1a8>
 80016c4:	2300      	movs	r3, #0
 80016c6:	08ff      	lsrs	r7, r7, #3
 80016c8:	e637      	b.n	800133a <__aeabi_fsub+0xf6>
 80016ca:	2300      	movs	r3, #0
 80016cc:	08d7      	lsrs	r7, r2, #3
 80016ce:	e634      	b.n	800133a <__aeabi_fsub+0xf6>
 80016d0:	2301      	movs	r3, #1
 80016d2:	08cf      	lsrs	r7, r1, #3
 80016d4:	e631      	b.n	800133a <__aeabi_fsub+0xf6>
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	000b      	movs	r3, r1
 80016da:	04d2      	lsls	r2, r2, #19
 80016dc:	2001      	movs	r0, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	4211      	tst	r1, r2
 80016e2:	d000      	beq.n	80016e6 <__aeabi_fsub+0x4a2>
 80016e4:	e6ae      	b.n	8001444 <__aeabi_fsub+0x200>
 80016e6:	08cf      	lsrs	r7, r1, #3
 80016e8:	e627      	b.n	800133a <__aeabi_fsub+0xf6>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <__aeabi_fsub+0x4ac>
 80016ee:	e75f      	b.n	80015b0 <__aeabi_fsub+0x36c>
 80016f0:	1b56      	subs	r6, r2, r5
 80016f2:	2d00      	cmp	r5, #0
 80016f4:	d101      	bne.n	80016fa <__aeabi_fsub+0x4b6>
 80016f6:	0033      	movs	r3, r6
 80016f8:	e6e7      	b.n	80014ca <__aeabi_fsub+0x286>
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	4660      	mov	r0, ip
 80016fe:	04db      	lsls	r3, r3, #19
 8001700:	4318      	orrs	r0, r3
 8001702:	4684      	mov	ip, r0
 8001704:	e6eb      	b.n	80014de <__aeabi_fsub+0x29a>
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	7dffffff 	.word	0x7dffffff

0800170c <__aeabi_f2iz>:
 800170c:	0241      	lsls	r1, r0, #9
 800170e:	0042      	lsls	r2, r0, #1
 8001710:	0fc3      	lsrs	r3, r0, #31
 8001712:	0a49      	lsrs	r1, r1, #9
 8001714:	2000      	movs	r0, #0
 8001716:	0e12      	lsrs	r2, r2, #24
 8001718:	2a7e      	cmp	r2, #126	@ 0x7e
 800171a:	dd03      	ble.n	8001724 <__aeabi_f2iz+0x18>
 800171c:	2a9d      	cmp	r2, #157	@ 0x9d
 800171e:	dd02      	ble.n	8001726 <__aeabi_f2iz+0x1a>
 8001720:	4a09      	ldr	r2, [pc, #36]	@ (8001748 <__aeabi_f2iz+0x3c>)
 8001722:	1898      	adds	r0, r3, r2
 8001724:	4770      	bx	lr
 8001726:	2080      	movs	r0, #128	@ 0x80
 8001728:	0400      	lsls	r0, r0, #16
 800172a:	4301      	orrs	r1, r0
 800172c:	2a95      	cmp	r2, #149	@ 0x95
 800172e:	dc07      	bgt.n	8001740 <__aeabi_f2iz+0x34>
 8001730:	2096      	movs	r0, #150	@ 0x96
 8001732:	1a82      	subs	r2, r0, r2
 8001734:	40d1      	lsrs	r1, r2
 8001736:	4248      	negs	r0, r1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f3      	bne.n	8001724 <__aeabi_f2iz+0x18>
 800173c:	0008      	movs	r0, r1
 800173e:	e7f1      	b.n	8001724 <__aeabi_f2iz+0x18>
 8001740:	3a96      	subs	r2, #150	@ 0x96
 8001742:	4091      	lsls	r1, r2
 8001744:	e7f7      	b.n	8001736 <__aeabi_f2iz+0x2a>
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	7fffffff 	.word	0x7fffffff

0800174c <__aeabi_i2f>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	2800      	cmp	r0, #0
 8001750:	d012      	beq.n	8001778 <__aeabi_i2f+0x2c>
 8001752:	17c3      	asrs	r3, r0, #31
 8001754:	18c5      	adds	r5, r0, r3
 8001756:	405d      	eors	r5, r3
 8001758:	0fc4      	lsrs	r4, r0, #31
 800175a:	0028      	movs	r0, r5
 800175c:	f002 f8f6 	bl	800394c <__clzsi2>
 8001760:	239e      	movs	r3, #158	@ 0x9e
 8001762:	1a1b      	subs	r3, r3, r0
 8001764:	2b96      	cmp	r3, #150	@ 0x96
 8001766:	dc0f      	bgt.n	8001788 <__aeabi_i2f+0x3c>
 8001768:	2808      	cmp	r0, #8
 800176a:	d038      	beq.n	80017de <__aeabi_i2f+0x92>
 800176c:	3808      	subs	r0, #8
 800176e:	4085      	lsls	r5, r0
 8001770:	026d      	lsls	r5, r5, #9
 8001772:	0a6d      	lsrs	r5, r5, #9
 8001774:	b2d8      	uxtb	r0, r3
 8001776:	e002      	b.n	800177e <__aeabi_i2f+0x32>
 8001778:	2400      	movs	r4, #0
 800177a:	2000      	movs	r0, #0
 800177c:	2500      	movs	r5, #0
 800177e:	05c0      	lsls	r0, r0, #23
 8001780:	4328      	orrs	r0, r5
 8001782:	07e4      	lsls	r4, r4, #31
 8001784:	4320      	orrs	r0, r4
 8001786:	bd70      	pop	{r4, r5, r6, pc}
 8001788:	2b99      	cmp	r3, #153	@ 0x99
 800178a:	dc14      	bgt.n	80017b6 <__aeabi_i2f+0x6a>
 800178c:	1f42      	subs	r2, r0, #5
 800178e:	4095      	lsls	r5, r2
 8001790:	002a      	movs	r2, r5
 8001792:	4915      	ldr	r1, [pc, #84]	@ (80017e8 <__aeabi_i2f+0x9c>)
 8001794:	4011      	ands	r1, r2
 8001796:	0755      	lsls	r5, r2, #29
 8001798:	d01c      	beq.n	80017d4 <__aeabi_i2f+0x88>
 800179a:	250f      	movs	r5, #15
 800179c:	402a      	ands	r2, r5
 800179e:	2a04      	cmp	r2, #4
 80017a0:	d018      	beq.n	80017d4 <__aeabi_i2f+0x88>
 80017a2:	3104      	adds	r1, #4
 80017a4:	08ca      	lsrs	r2, r1, #3
 80017a6:	0149      	lsls	r1, r1, #5
 80017a8:	d515      	bpl.n	80017d6 <__aeabi_i2f+0x8a>
 80017aa:	239f      	movs	r3, #159	@ 0x9f
 80017ac:	0252      	lsls	r2, r2, #9
 80017ae:	1a18      	subs	r0, r3, r0
 80017b0:	0a55      	lsrs	r5, r2, #9
 80017b2:	b2c0      	uxtb	r0, r0
 80017b4:	e7e3      	b.n	800177e <__aeabi_i2f+0x32>
 80017b6:	2205      	movs	r2, #5
 80017b8:	0029      	movs	r1, r5
 80017ba:	1a12      	subs	r2, r2, r0
 80017bc:	40d1      	lsrs	r1, r2
 80017be:	0002      	movs	r2, r0
 80017c0:	321b      	adds	r2, #27
 80017c2:	4095      	lsls	r5, r2
 80017c4:	002a      	movs	r2, r5
 80017c6:	1e55      	subs	r5, r2, #1
 80017c8:	41aa      	sbcs	r2, r5
 80017ca:	430a      	orrs	r2, r1
 80017cc:	4906      	ldr	r1, [pc, #24]	@ (80017e8 <__aeabi_i2f+0x9c>)
 80017ce:	4011      	ands	r1, r2
 80017d0:	0755      	lsls	r5, r2, #29
 80017d2:	d1e2      	bne.n	800179a <__aeabi_i2f+0x4e>
 80017d4:	08ca      	lsrs	r2, r1, #3
 80017d6:	0252      	lsls	r2, r2, #9
 80017d8:	0a55      	lsrs	r5, r2, #9
 80017da:	b2d8      	uxtb	r0, r3
 80017dc:	e7cf      	b.n	800177e <__aeabi_i2f+0x32>
 80017de:	026d      	lsls	r5, r5, #9
 80017e0:	0a6d      	lsrs	r5, r5, #9
 80017e2:	308e      	adds	r0, #142	@ 0x8e
 80017e4:	e7cb      	b.n	800177e <__aeabi_i2f+0x32>
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	fbffffff 	.word	0xfbffffff

080017ec <__aeabi_ui2f>:
 80017ec:	b510      	push	{r4, lr}
 80017ee:	1e04      	subs	r4, r0, #0
 80017f0:	d00d      	beq.n	800180e <__aeabi_ui2f+0x22>
 80017f2:	f002 f8ab 	bl	800394c <__clzsi2>
 80017f6:	239e      	movs	r3, #158	@ 0x9e
 80017f8:	1a1b      	subs	r3, r3, r0
 80017fa:	2b96      	cmp	r3, #150	@ 0x96
 80017fc:	dc0c      	bgt.n	8001818 <__aeabi_ui2f+0x2c>
 80017fe:	2808      	cmp	r0, #8
 8001800:	d034      	beq.n	800186c <__aeabi_ui2f+0x80>
 8001802:	3808      	subs	r0, #8
 8001804:	4084      	lsls	r4, r0
 8001806:	0264      	lsls	r4, r4, #9
 8001808:	0a64      	lsrs	r4, r4, #9
 800180a:	b2d8      	uxtb	r0, r3
 800180c:	e001      	b.n	8001812 <__aeabi_ui2f+0x26>
 800180e:	2000      	movs	r0, #0
 8001810:	2400      	movs	r4, #0
 8001812:	05c0      	lsls	r0, r0, #23
 8001814:	4320      	orrs	r0, r4
 8001816:	bd10      	pop	{r4, pc}
 8001818:	2b99      	cmp	r3, #153	@ 0x99
 800181a:	dc13      	bgt.n	8001844 <__aeabi_ui2f+0x58>
 800181c:	1f42      	subs	r2, r0, #5
 800181e:	4094      	lsls	r4, r2
 8001820:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <__aeabi_ui2f+0x88>)
 8001822:	4022      	ands	r2, r4
 8001824:	0761      	lsls	r1, r4, #29
 8001826:	d01c      	beq.n	8001862 <__aeabi_ui2f+0x76>
 8001828:	210f      	movs	r1, #15
 800182a:	4021      	ands	r1, r4
 800182c:	2904      	cmp	r1, #4
 800182e:	d018      	beq.n	8001862 <__aeabi_ui2f+0x76>
 8001830:	3204      	adds	r2, #4
 8001832:	08d4      	lsrs	r4, r2, #3
 8001834:	0152      	lsls	r2, r2, #5
 8001836:	d515      	bpl.n	8001864 <__aeabi_ui2f+0x78>
 8001838:	239f      	movs	r3, #159	@ 0x9f
 800183a:	0264      	lsls	r4, r4, #9
 800183c:	1a18      	subs	r0, r3, r0
 800183e:	0a64      	lsrs	r4, r4, #9
 8001840:	b2c0      	uxtb	r0, r0
 8001842:	e7e6      	b.n	8001812 <__aeabi_ui2f+0x26>
 8001844:	0002      	movs	r2, r0
 8001846:	0021      	movs	r1, r4
 8001848:	321b      	adds	r2, #27
 800184a:	4091      	lsls	r1, r2
 800184c:	000a      	movs	r2, r1
 800184e:	1e51      	subs	r1, r2, #1
 8001850:	418a      	sbcs	r2, r1
 8001852:	2105      	movs	r1, #5
 8001854:	1a09      	subs	r1, r1, r0
 8001856:	40cc      	lsrs	r4, r1
 8001858:	4314      	orrs	r4, r2
 800185a:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <__aeabi_ui2f+0x88>)
 800185c:	4022      	ands	r2, r4
 800185e:	0761      	lsls	r1, r4, #29
 8001860:	d1e2      	bne.n	8001828 <__aeabi_ui2f+0x3c>
 8001862:	08d4      	lsrs	r4, r2, #3
 8001864:	0264      	lsls	r4, r4, #9
 8001866:	0a64      	lsrs	r4, r4, #9
 8001868:	b2d8      	uxtb	r0, r3
 800186a:	e7d2      	b.n	8001812 <__aeabi_ui2f+0x26>
 800186c:	0264      	lsls	r4, r4, #9
 800186e:	0a64      	lsrs	r4, r4, #9
 8001870:	308e      	adds	r0, #142	@ 0x8e
 8001872:	e7ce      	b.n	8001812 <__aeabi_ui2f+0x26>
 8001874:	fbffffff 	.word	0xfbffffff

08001878 <__aeabi_dadd>:
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	464f      	mov	r7, r9
 800187c:	4646      	mov	r6, r8
 800187e:	46d6      	mov	lr, sl
 8001880:	b5c0      	push	{r6, r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	9000      	str	r0, [sp, #0]
 8001886:	9101      	str	r1, [sp, #4]
 8001888:	030e      	lsls	r6, r1, #12
 800188a:	004c      	lsls	r4, r1, #1
 800188c:	0fcd      	lsrs	r5, r1, #31
 800188e:	0a71      	lsrs	r1, r6, #9
 8001890:	9e00      	ldr	r6, [sp, #0]
 8001892:	005f      	lsls	r7, r3, #1
 8001894:	0f76      	lsrs	r6, r6, #29
 8001896:	430e      	orrs	r6, r1
 8001898:	9900      	ldr	r1, [sp, #0]
 800189a:	9200      	str	r2, [sp, #0]
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	00c9      	lsls	r1, r1, #3
 80018a0:	4689      	mov	r9, r1
 80018a2:	0319      	lsls	r1, r3, #12
 80018a4:	0d7b      	lsrs	r3, r7, #21
 80018a6:	4698      	mov	r8, r3
 80018a8:	9b01      	ldr	r3, [sp, #4]
 80018aa:	0a49      	lsrs	r1, r1, #9
 80018ac:	0fdb      	lsrs	r3, r3, #31
 80018ae:	469c      	mov	ip, r3
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	9a00      	ldr	r2, [sp, #0]
 80018b4:	0f5b      	lsrs	r3, r3, #29
 80018b6:	430b      	orrs	r3, r1
 80018b8:	4641      	mov	r1, r8
 80018ba:	0d64      	lsrs	r4, r4, #21
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	1a61      	subs	r1, r4, r1
 80018c0:	4565      	cmp	r5, ip
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x4e>
 80018c4:	e0a6      	b.n	8001a14 <__aeabi_dadd+0x19c>
 80018c6:	2900      	cmp	r1, #0
 80018c8:	dd72      	ble.n	80019b0 <__aeabi_dadd+0x138>
 80018ca:	4647      	mov	r7, r8
 80018cc:	2f00      	cmp	r7, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x5a>
 80018d0:	e0dd      	b.n	8001a8e <__aeabi_dadd+0x216>
 80018d2:	4fcc      	ldr	r7, [pc, #816]	@ (8001c04 <__aeabi_dadd+0x38c>)
 80018d4:	42bc      	cmp	r4, r7
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x62>
 80018d8:	e19a      	b.n	8001c10 <__aeabi_dadd+0x398>
 80018da:	2701      	movs	r7, #1
 80018dc:	2938      	cmp	r1, #56	@ 0x38
 80018de:	dc17      	bgt.n	8001910 <__aeabi_dadd+0x98>
 80018e0:	2780      	movs	r7, #128	@ 0x80
 80018e2:	043f      	lsls	r7, r7, #16
 80018e4:	433b      	orrs	r3, r7
 80018e6:	291f      	cmp	r1, #31
 80018e8:	dd00      	ble.n	80018ec <__aeabi_dadd+0x74>
 80018ea:	e1dd      	b.n	8001ca8 <__aeabi_dadd+0x430>
 80018ec:	2720      	movs	r7, #32
 80018ee:	1a78      	subs	r0, r7, r1
 80018f0:	001f      	movs	r7, r3
 80018f2:	4087      	lsls	r7, r0
 80018f4:	46ba      	mov	sl, r7
 80018f6:	0017      	movs	r7, r2
 80018f8:	40cf      	lsrs	r7, r1
 80018fa:	4684      	mov	ip, r0
 80018fc:	0038      	movs	r0, r7
 80018fe:	4657      	mov	r7, sl
 8001900:	4307      	orrs	r7, r0
 8001902:	4660      	mov	r0, ip
 8001904:	4082      	lsls	r2, r0
 8001906:	40cb      	lsrs	r3, r1
 8001908:	1e50      	subs	r0, r2, #1
 800190a:	4182      	sbcs	r2, r0
 800190c:	1af6      	subs	r6, r6, r3
 800190e:	4317      	orrs	r7, r2
 8001910:	464b      	mov	r3, r9
 8001912:	1bdf      	subs	r7, r3, r7
 8001914:	45b9      	cmp	r9, r7
 8001916:	4180      	sbcs	r0, r0
 8001918:	4240      	negs	r0, r0
 800191a:	1a36      	subs	r6, r6, r0
 800191c:	0233      	lsls	r3, r6, #8
 800191e:	d400      	bmi.n	8001922 <__aeabi_dadd+0xaa>
 8001920:	e0ff      	b.n	8001b22 <__aeabi_dadd+0x2aa>
 8001922:	0276      	lsls	r6, r6, #9
 8001924:	0a76      	lsrs	r6, r6, #9
 8001926:	2e00      	cmp	r6, #0
 8001928:	d100      	bne.n	800192c <__aeabi_dadd+0xb4>
 800192a:	e13c      	b.n	8001ba6 <__aeabi_dadd+0x32e>
 800192c:	0030      	movs	r0, r6
 800192e:	f002 f80d 	bl	800394c <__clzsi2>
 8001932:	0003      	movs	r3, r0
 8001934:	3b08      	subs	r3, #8
 8001936:	2120      	movs	r1, #32
 8001938:	0038      	movs	r0, r7
 800193a:	1aca      	subs	r2, r1, r3
 800193c:	40d0      	lsrs	r0, r2
 800193e:	409e      	lsls	r6, r3
 8001940:	0002      	movs	r2, r0
 8001942:	409f      	lsls	r7, r3
 8001944:	4332      	orrs	r2, r6
 8001946:	429c      	cmp	r4, r3
 8001948:	dd00      	ble.n	800194c <__aeabi_dadd+0xd4>
 800194a:	e1a6      	b.n	8001c9a <__aeabi_dadd+0x422>
 800194c:	1b18      	subs	r0, r3, r4
 800194e:	3001      	adds	r0, #1
 8001950:	1a09      	subs	r1, r1, r0
 8001952:	003e      	movs	r6, r7
 8001954:	408f      	lsls	r7, r1
 8001956:	40c6      	lsrs	r6, r0
 8001958:	1e7b      	subs	r3, r7, #1
 800195a:	419f      	sbcs	r7, r3
 800195c:	0013      	movs	r3, r2
 800195e:	408b      	lsls	r3, r1
 8001960:	4337      	orrs	r7, r6
 8001962:	431f      	orrs	r7, r3
 8001964:	40c2      	lsrs	r2, r0
 8001966:	003b      	movs	r3, r7
 8001968:	0016      	movs	r6, r2
 800196a:	2400      	movs	r4, #0
 800196c:	4313      	orrs	r3, r2
 800196e:	d100      	bne.n	8001972 <__aeabi_dadd+0xfa>
 8001970:	e1df      	b.n	8001d32 <__aeabi_dadd+0x4ba>
 8001972:	077b      	lsls	r3, r7, #29
 8001974:	d100      	bne.n	8001978 <__aeabi_dadd+0x100>
 8001976:	e332      	b.n	8001fde <__aeabi_dadd+0x766>
 8001978:	230f      	movs	r3, #15
 800197a:	003a      	movs	r2, r7
 800197c:	403b      	ands	r3, r7
 800197e:	2b04      	cmp	r3, #4
 8001980:	d004      	beq.n	800198c <__aeabi_dadd+0x114>
 8001982:	1d3a      	adds	r2, r7, #4
 8001984:	42ba      	cmp	r2, r7
 8001986:	41bf      	sbcs	r7, r7
 8001988:	427f      	negs	r7, r7
 800198a:	19f6      	adds	r6, r6, r7
 800198c:	0233      	lsls	r3, r6, #8
 800198e:	d400      	bmi.n	8001992 <__aeabi_dadd+0x11a>
 8001990:	e323      	b.n	8001fda <__aeabi_dadd+0x762>
 8001992:	4b9c      	ldr	r3, [pc, #624]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001994:	3401      	adds	r4, #1
 8001996:	429c      	cmp	r4, r3
 8001998:	d100      	bne.n	800199c <__aeabi_dadd+0x124>
 800199a:	e0b4      	b.n	8001b06 <__aeabi_dadd+0x28e>
 800199c:	4b9a      	ldr	r3, [pc, #616]	@ (8001c08 <__aeabi_dadd+0x390>)
 800199e:	0564      	lsls	r4, r4, #21
 80019a0:	401e      	ands	r6, r3
 80019a2:	0d64      	lsrs	r4, r4, #21
 80019a4:	0777      	lsls	r7, r6, #29
 80019a6:	08d2      	lsrs	r2, r2, #3
 80019a8:	0276      	lsls	r6, r6, #9
 80019aa:	4317      	orrs	r7, r2
 80019ac:	0b36      	lsrs	r6, r6, #12
 80019ae:	e0ac      	b.n	8001b0a <__aeabi_dadd+0x292>
 80019b0:	2900      	cmp	r1, #0
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x13e>
 80019b4:	e07e      	b.n	8001ab4 <__aeabi_dadd+0x23c>
 80019b6:	4641      	mov	r1, r8
 80019b8:	1b09      	subs	r1, r1, r4
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x148>
 80019be:	e160      	b.n	8001c82 <__aeabi_dadd+0x40a>
 80019c0:	0034      	movs	r4, r6
 80019c2:	4648      	mov	r0, r9
 80019c4:	4304      	orrs	r4, r0
 80019c6:	d100      	bne.n	80019ca <__aeabi_dadd+0x152>
 80019c8:	e1c9      	b.n	8001d5e <__aeabi_dadd+0x4e6>
 80019ca:	1e4c      	subs	r4, r1, #1
 80019cc:	2901      	cmp	r1, #1
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x15a>
 80019d0:	e22e      	b.n	8001e30 <__aeabi_dadd+0x5b8>
 80019d2:	4d8c      	ldr	r5, [pc, #560]	@ (8001c04 <__aeabi_dadd+0x38c>)
 80019d4:	42a9      	cmp	r1, r5
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x162>
 80019d8:	e224      	b.n	8001e24 <__aeabi_dadd+0x5ac>
 80019da:	2701      	movs	r7, #1
 80019dc:	2c38      	cmp	r4, #56	@ 0x38
 80019de:	dc11      	bgt.n	8001a04 <__aeabi_dadd+0x18c>
 80019e0:	0021      	movs	r1, r4
 80019e2:	291f      	cmp	r1, #31
 80019e4:	dd00      	ble.n	80019e8 <__aeabi_dadd+0x170>
 80019e6:	e20b      	b.n	8001e00 <__aeabi_dadd+0x588>
 80019e8:	2420      	movs	r4, #32
 80019ea:	0037      	movs	r7, r6
 80019ec:	4648      	mov	r0, r9
 80019ee:	1a64      	subs	r4, r4, r1
 80019f0:	40a7      	lsls	r7, r4
 80019f2:	40c8      	lsrs	r0, r1
 80019f4:	4307      	orrs	r7, r0
 80019f6:	4648      	mov	r0, r9
 80019f8:	40a0      	lsls	r0, r4
 80019fa:	40ce      	lsrs	r6, r1
 80019fc:	1e44      	subs	r4, r0, #1
 80019fe:	41a0      	sbcs	r0, r4
 8001a00:	1b9b      	subs	r3, r3, r6
 8001a02:	4307      	orrs	r7, r0
 8001a04:	1bd7      	subs	r7, r2, r7
 8001a06:	42ba      	cmp	r2, r7
 8001a08:	4192      	sbcs	r2, r2
 8001a0a:	4252      	negs	r2, r2
 8001a0c:	4665      	mov	r5, ip
 8001a0e:	4644      	mov	r4, r8
 8001a10:	1a9e      	subs	r6, r3, r2
 8001a12:	e783      	b.n	800191c <__aeabi_dadd+0xa4>
 8001a14:	2900      	cmp	r1, #0
 8001a16:	dc00      	bgt.n	8001a1a <__aeabi_dadd+0x1a2>
 8001a18:	e09c      	b.n	8001b54 <__aeabi_dadd+0x2dc>
 8001a1a:	4647      	mov	r7, r8
 8001a1c:	2f00      	cmp	r7, #0
 8001a1e:	d167      	bne.n	8001af0 <__aeabi_dadd+0x278>
 8001a20:	001f      	movs	r7, r3
 8001a22:	4317      	orrs	r7, r2
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dadd+0x1b0>
 8001a26:	e0e4      	b.n	8001bf2 <__aeabi_dadd+0x37a>
 8001a28:	1e48      	subs	r0, r1, #1
 8001a2a:	2901      	cmp	r1, #1
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dadd+0x1b8>
 8001a2e:	e19b      	b.n	8001d68 <__aeabi_dadd+0x4f0>
 8001a30:	4f74      	ldr	r7, [pc, #464]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001a32:	42b9      	cmp	r1, r7
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dadd+0x1c0>
 8001a36:	e0eb      	b.n	8001c10 <__aeabi_dadd+0x398>
 8001a38:	2701      	movs	r7, #1
 8001a3a:	0001      	movs	r1, r0
 8001a3c:	2838      	cmp	r0, #56	@ 0x38
 8001a3e:	dc11      	bgt.n	8001a64 <__aeabi_dadd+0x1ec>
 8001a40:	291f      	cmp	r1, #31
 8001a42:	dd00      	ble.n	8001a46 <__aeabi_dadd+0x1ce>
 8001a44:	e1c7      	b.n	8001dd6 <__aeabi_dadd+0x55e>
 8001a46:	2720      	movs	r7, #32
 8001a48:	1a78      	subs	r0, r7, r1
 8001a4a:	001f      	movs	r7, r3
 8001a4c:	4684      	mov	ip, r0
 8001a4e:	4087      	lsls	r7, r0
 8001a50:	0010      	movs	r0, r2
 8001a52:	40c8      	lsrs	r0, r1
 8001a54:	4307      	orrs	r7, r0
 8001a56:	4660      	mov	r0, ip
 8001a58:	4082      	lsls	r2, r0
 8001a5a:	40cb      	lsrs	r3, r1
 8001a5c:	1e50      	subs	r0, r2, #1
 8001a5e:	4182      	sbcs	r2, r0
 8001a60:	18f6      	adds	r6, r6, r3
 8001a62:	4317      	orrs	r7, r2
 8001a64:	444f      	add	r7, r9
 8001a66:	454f      	cmp	r7, r9
 8001a68:	4180      	sbcs	r0, r0
 8001a6a:	4240      	negs	r0, r0
 8001a6c:	1836      	adds	r6, r6, r0
 8001a6e:	0233      	lsls	r3, r6, #8
 8001a70:	d557      	bpl.n	8001b22 <__aeabi_dadd+0x2aa>
 8001a72:	4b64      	ldr	r3, [pc, #400]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001a74:	3401      	adds	r4, #1
 8001a76:	429c      	cmp	r4, r3
 8001a78:	d045      	beq.n	8001b06 <__aeabi_dadd+0x28e>
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4b62      	ldr	r3, [pc, #392]	@ (8001c08 <__aeabi_dadd+0x390>)
 8001a7e:	087a      	lsrs	r2, r7, #1
 8001a80:	401e      	ands	r6, r3
 8001a82:	4039      	ands	r1, r7
 8001a84:	430a      	orrs	r2, r1
 8001a86:	07f7      	lsls	r7, r6, #31
 8001a88:	4317      	orrs	r7, r2
 8001a8a:	0876      	lsrs	r6, r6, #1
 8001a8c:	e771      	b.n	8001972 <__aeabi_dadd+0xfa>
 8001a8e:	001f      	movs	r7, r3
 8001a90:	4317      	orrs	r7, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x21e>
 8001a94:	e0ad      	b.n	8001bf2 <__aeabi_dadd+0x37a>
 8001a96:	1e4f      	subs	r7, r1, #1
 8001a98:	46bc      	mov	ip, r7
 8001a9a:	2901      	cmp	r1, #1
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dadd+0x228>
 8001a9e:	e182      	b.n	8001da6 <__aeabi_dadd+0x52e>
 8001aa0:	4f58      	ldr	r7, [pc, #352]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001aa2:	42b9      	cmp	r1, r7
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dadd+0x230>
 8001aa6:	e190      	b.n	8001dca <__aeabi_dadd+0x552>
 8001aa8:	4661      	mov	r1, ip
 8001aaa:	2701      	movs	r7, #1
 8001aac:	2938      	cmp	r1, #56	@ 0x38
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dadd+0x23a>
 8001ab0:	e72e      	b.n	8001910 <__aeabi_dadd+0x98>
 8001ab2:	e718      	b.n	80018e6 <__aeabi_dadd+0x6e>
 8001ab4:	4f55      	ldr	r7, [pc, #340]	@ (8001c0c <__aeabi_dadd+0x394>)
 8001ab6:	1c61      	adds	r1, r4, #1
 8001ab8:	4239      	tst	r1, r7
 8001aba:	d000      	beq.n	8001abe <__aeabi_dadd+0x246>
 8001abc:	e0d0      	b.n	8001c60 <__aeabi_dadd+0x3e8>
 8001abe:	0031      	movs	r1, r6
 8001ac0:	4648      	mov	r0, r9
 8001ac2:	001f      	movs	r7, r3
 8001ac4:	4301      	orrs	r1, r0
 8001ac6:	4317      	orrs	r7, r2
 8001ac8:	2c00      	cmp	r4, #0
 8001aca:	d000      	beq.n	8001ace <__aeabi_dadd+0x256>
 8001acc:	e13d      	b.n	8001d4a <__aeabi_dadd+0x4d2>
 8001ace:	2900      	cmp	r1, #0
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x25c>
 8001ad2:	e1bc      	b.n	8001e4e <__aeabi_dadd+0x5d6>
 8001ad4:	2f00      	cmp	r7, #0
 8001ad6:	d000      	beq.n	8001ada <__aeabi_dadd+0x262>
 8001ad8:	e1bf      	b.n	8001e5a <__aeabi_dadd+0x5e2>
 8001ada:	464b      	mov	r3, r9
 8001adc:	2100      	movs	r1, #0
 8001ade:	08d8      	lsrs	r0, r3, #3
 8001ae0:	0777      	lsls	r7, r6, #29
 8001ae2:	4307      	orrs	r7, r0
 8001ae4:	08f0      	lsrs	r0, r6, #3
 8001ae6:	0306      	lsls	r6, r0, #12
 8001ae8:	054c      	lsls	r4, r1, #21
 8001aea:	0b36      	lsrs	r6, r6, #12
 8001aec:	0d64      	lsrs	r4, r4, #21
 8001aee:	e00c      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001af0:	4f44      	ldr	r7, [pc, #272]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001af2:	42bc      	cmp	r4, r7
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dadd+0x280>
 8001af6:	e08b      	b.n	8001c10 <__aeabi_dadd+0x398>
 8001af8:	2701      	movs	r7, #1
 8001afa:	2938      	cmp	r1, #56	@ 0x38
 8001afc:	dcb2      	bgt.n	8001a64 <__aeabi_dadd+0x1ec>
 8001afe:	2780      	movs	r7, #128	@ 0x80
 8001b00:	043f      	lsls	r7, r7, #16
 8001b02:	433b      	orrs	r3, r7
 8001b04:	e79c      	b.n	8001a40 <__aeabi_dadd+0x1c8>
 8001b06:	2600      	movs	r6, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	0524      	lsls	r4, r4, #20
 8001b0c:	4334      	orrs	r4, r6
 8001b0e:	07ed      	lsls	r5, r5, #31
 8001b10:	432c      	orrs	r4, r5
 8001b12:	0038      	movs	r0, r7
 8001b14:	0021      	movs	r1, r4
 8001b16:	b002      	add	sp, #8
 8001b18:	bce0      	pop	{r5, r6, r7}
 8001b1a:	46ba      	mov	sl, r7
 8001b1c:	46b1      	mov	r9, r6
 8001b1e:	46a8      	mov	r8, r5
 8001b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b22:	077b      	lsls	r3, r7, #29
 8001b24:	d004      	beq.n	8001b30 <__aeabi_dadd+0x2b8>
 8001b26:	230f      	movs	r3, #15
 8001b28:	403b      	ands	r3, r7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d000      	beq.n	8001b30 <__aeabi_dadd+0x2b8>
 8001b2e:	e728      	b.n	8001982 <__aeabi_dadd+0x10a>
 8001b30:	08f8      	lsrs	r0, r7, #3
 8001b32:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001b34:	0777      	lsls	r7, r6, #29
 8001b36:	4307      	orrs	r7, r0
 8001b38:	08f0      	lsrs	r0, r6, #3
 8001b3a:	429c      	cmp	r4, r3
 8001b3c:	d000      	beq.n	8001b40 <__aeabi_dadd+0x2c8>
 8001b3e:	e24a      	b.n	8001fd6 <__aeabi_dadd+0x75e>
 8001b40:	003b      	movs	r3, r7
 8001b42:	4303      	orrs	r3, r0
 8001b44:	d059      	beq.n	8001bfa <__aeabi_dadd+0x382>
 8001b46:	2680      	movs	r6, #128	@ 0x80
 8001b48:	0336      	lsls	r6, r6, #12
 8001b4a:	4306      	orrs	r6, r0
 8001b4c:	0336      	lsls	r6, r6, #12
 8001b4e:	4c2d      	ldr	r4, [pc, #180]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001b50:	0b36      	lsrs	r6, r6, #12
 8001b52:	e7da      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001b54:	2900      	cmp	r1, #0
 8001b56:	d061      	beq.n	8001c1c <__aeabi_dadd+0x3a4>
 8001b58:	4641      	mov	r1, r8
 8001b5a:	1b09      	subs	r1, r1, r4
 8001b5c:	2c00      	cmp	r4, #0
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dadd+0x2ea>
 8001b60:	e0b9      	b.n	8001cd6 <__aeabi_dadd+0x45e>
 8001b62:	4c28      	ldr	r4, [pc, #160]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001b64:	45a0      	cmp	r8, r4
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x2f2>
 8001b68:	e1a5      	b.n	8001eb6 <__aeabi_dadd+0x63e>
 8001b6a:	2701      	movs	r7, #1
 8001b6c:	2938      	cmp	r1, #56	@ 0x38
 8001b6e:	dc13      	bgt.n	8001b98 <__aeabi_dadd+0x320>
 8001b70:	2480      	movs	r4, #128	@ 0x80
 8001b72:	0424      	lsls	r4, r4, #16
 8001b74:	4326      	orrs	r6, r4
 8001b76:	291f      	cmp	r1, #31
 8001b78:	dd00      	ble.n	8001b7c <__aeabi_dadd+0x304>
 8001b7a:	e1c8      	b.n	8001f0e <__aeabi_dadd+0x696>
 8001b7c:	2420      	movs	r4, #32
 8001b7e:	0037      	movs	r7, r6
 8001b80:	4648      	mov	r0, r9
 8001b82:	1a64      	subs	r4, r4, r1
 8001b84:	40a7      	lsls	r7, r4
 8001b86:	40c8      	lsrs	r0, r1
 8001b88:	4307      	orrs	r7, r0
 8001b8a:	4648      	mov	r0, r9
 8001b8c:	40a0      	lsls	r0, r4
 8001b8e:	40ce      	lsrs	r6, r1
 8001b90:	1e44      	subs	r4, r0, #1
 8001b92:	41a0      	sbcs	r0, r4
 8001b94:	199b      	adds	r3, r3, r6
 8001b96:	4307      	orrs	r7, r0
 8001b98:	18bf      	adds	r7, r7, r2
 8001b9a:	4297      	cmp	r7, r2
 8001b9c:	4192      	sbcs	r2, r2
 8001b9e:	4252      	negs	r2, r2
 8001ba0:	4644      	mov	r4, r8
 8001ba2:	18d6      	adds	r6, r2, r3
 8001ba4:	e763      	b.n	8001a6e <__aeabi_dadd+0x1f6>
 8001ba6:	0038      	movs	r0, r7
 8001ba8:	f001 fed0 	bl	800394c <__clzsi2>
 8001bac:	0003      	movs	r3, r0
 8001bae:	3318      	adds	r3, #24
 8001bb0:	2b1f      	cmp	r3, #31
 8001bb2:	dc00      	bgt.n	8001bb6 <__aeabi_dadd+0x33e>
 8001bb4:	e6bf      	b.n	8001936 <__aeabi_dadd+0xbe>
 8001bb6:	003a      	movs	r2, r7
 8001bb8:	3808      	subs	r0, #8
 8001bba:	4082      	lsls	r2, r0
 8001bbc:	429c      	cmp	r4, r3
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dadd+0x34a>
 8001bc0:	e083      	b.n	8001cca <__aeabi_dadd+0x452>
 8001bc2:	1b1b      	subs	r3, r3, r4
 8001bc4:	1c58      	adds	r0, r3, #1
 8001bc6:	281f      	cmp	r0, #31
 8001bc8:	dc00      	bgt.n	8001bcc <__aeabi_dadd+0x354>
 8001bca:	e1b4      	b.n	8001f36 <__aeabi_dadd+0x6be>
 8001bcc:	0017      	movs	r7, r2
 8001bce:	3b1f      	subs	r3, #31
 8001bd0:	40df      	lsrs	r7, r3
 8001bd2:	2820      	cmp	r0, #32
 8001bd4:	d005      	beq.n	8001be2 <__aeabi_dadd+0x36a>
 8001bd6:	2340      	movs	r3, #64	@ 0x40
 8001bd8:	1a1b      	subs	r3, r3, r0
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	1e53      	subs	r3, r2, #1
 8001bde:	419a      	sbcs	r2, r3
 8001be0:	4317      	orrs	r7, r2
 8001be2:	2400      	movs	r4, #0
 8001be4:	2f00      	cmp	r7, #0
 8001be6:	d00a      	beq.n	8001bfe <__aeabi_dadd+0x386>
 8001be8:	077b      	lsls	r3, r7, #29
 8001bea:	d000      	beq.n	8001bee <__aeabi_dadd+0x376>
 8001bec:	e6c4      	b.n	8001978 <__aeabi_dadd+0x100>
 8001bee:	0026      	movs	r6, r4
 8001bf0:	e79e      	b.n	8001b30 <__aeabi_dadd+0x2b8>
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	000c      	movs	r4, r1
 8001bf6:	08d8      	lsrs	r0, r3, #3
 8001bf8:	e79b      	b.n	8001b32 <__aeabi_dadd+0x2ba>
 8001bfa:	2700      	movs	r7, #0
 8001bfc:	4c01      	ldr	r4, [pc, #4]	@ (8001c04 <__aeabi_dadd+0x38c>)
 8001bfe:	2600      	movs	r6, #0
 8001c00:	e783      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	000007ff 	.word	0x000007ff
 8001c08:	ff7fffff 	.word	0xff7fffff
 8001c0c:	000007fe 	.word	0x000007fe
 8001c10:	464b      	mov	r3, r9
 8001c12:	0777      	lsls	r7, r6, #29
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4307      	orrs	r7, r0
 8001c18:	08f0      	lsrs	r0, r6, #3
 8001c1a:	e791      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001c1c:	4fcd      	ldr	r7, [pc, #820]	@ (8001f54 <__aeabi_dadd+0x6dc>)
 8001c1e:	1c61      	adds	r1, r4, #1
 8001c20:	4239      	tst	r1, r7
 8001c22:	d16b      	bne.n	8001cfc <__aeabi_dadd+0x484>
 8001c24:	0031      	movs	r1, r6
 8001c26:	4648      	mov	r0, r9
 8001c28:	4301      	orrs	r1, r0
 8001c2a:	2c00      	cmp	r4, #0
 8001c2c:	d000      	beq.n	8001c30 <__aeabi_dadd+0x3b8>
 8001c2e:	e14b      	b.n	8001ec8 <__aeabi_dadd+0x650>
 8001c30:	001f      	movs	r7, r3
 8001c32:	4317      	orrs	r7, r2
 8001c34:	2900      	cmp	r1, #0
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dadd+0x3c2>
 8001c38:	e181      	b.n	8001f3e <__aeabi_dadd+0x6c6>
 8001c3a:	2f00      	cmp	r7, #0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dadd+0x3c8>
 8001c3e:	e74c      	b.n	8001ada <__aeabi_dadd+0x262>
 8001c40:	444a      	add	r2, r9
 8001c42:	454a      	cmp	r2, r9
 8001c44:	4180      	sbcs	r0, r0
 8001c46:	18f6      	adds	r6, r6, r3
 8001c48:	4240      	negs	r0, r0
 8001c4a:	1836      	adds	r6, r6, r0
 8001c4c:	0233      	lsls	r3, r6, #8
 8001c4e:	d500      	bpl.n	8001c52 <__aeabi_dadd+0x3da>
 8001c50:	e1b0      	b.n	8001fb4 <__aeabi_dadd+0x73c>
 8001c52:	0017      	movs	r7, r2
 8001c54:	4691      	mov	r9, r2
 8001c56:	4337      	orrs	r7, r6
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dadd+0x3e4>
 8001c5a:	e73e      	b.n	8001ada <__aeabi_dadd+0x262>
 8001c5c:	2600      	movs	r6, #0
 8001c5e:	e754      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001c60:	4649      	mov	r1, r9
 8001c62:	1a89      	subs	r1, r1, r2
 8001c64:	4688      	mov	r8, r1
 8001c66:	45c1      	cmp	r9, r8
 8001c68:	41bf      	sbcs	r7, r7
 8001c6a:	1af1      	subs	r1, r6, r3
 8001c6c:	427f      	negs	r7, r7
 8001c6e:	1bc9      	subs	r1, r1, r7
 8001c70:	020f      	lsls	r7, r1, #8
 8001c72:	d461      	bmi.n	8001d38 <__aeabi_dadd+0x4c0>
 8001c74:	4647      	mov	r7, r8
 8001c76:	430f      	orrs	r7, r1
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dadd+0x404>
 8001c7a:	e0bd      	b.n	8001df8 <__aeabi_dadd+0x580>
 8001c7c:	000e      	movs	r6, r1
 8001c7e:	4647      	mov	r7, r8
 8001c80:	e651      	b.n	8001926 <__aeabi_dadd+0xae>
 8001c82:	4cb5      	ldr	r4, [pc, #724]	@ (8001f58 <__aeabi_dadd+0x6e0>)
 8001c84:	45a0      	cmp	r8, r4
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dadd+0x412>
 8001c88:	e100      	b.n	8001e8c <__aeabi_dadd+0x614>
 8001c8a:	2701      	movs	r7, #1
 8001c8c:	2938      	cmp	r1, #56	@ 0x38
 8001c8e:	dd00      	ble.n	8001c92 <__aeabi_dadd+0x41a>
 8001c90:	e6b8      	b.n	8001a04 <__aeabi_dadd+0x18c>
 8001c92:	2480      	movs	r4, #128	@ 0x80
 8001c94:	0424      	lsls	r4, r4, #16
 8001c96:	4326      	orrs	r6, r4
 8001c98:	e6a3      	b.n	80019e2 <__aeabi_dadd+0x16a>
 8001c9a:	4eb0      	ldr	r6, [pc, #704]	@ (8001f5c <__aeabi_dadd+0x6e4>)
 8001c9c:	1ae4      	subs	r4, r4, r3
 8001c9e:	4016      	ands	r6, r2
 8001ca0:	077b      	lsls	r3, r7, #29
 8001ca2:	d000      	beq.n	8001ca6 <__aeabi_dadd+0x42e>
 8001ca4:	e73f      	b.n	8001b26 <__aeabi_dadd+0x2ae>
 8001ca6:	e743      	b.n	8001b30 <__aeabi_dadd+0x2b8>
 8001ca8:	000f      	movs	r7, r1
 8001caa:	0018      	movs	r0, r3
 8001cac:	3f20      	subs	r7, #32
 8001cae:	40f8      	lsrs	r0, r7
 8001cb0:	4684      	mov	ip, r0
 8001cb2:	2920      	cmp	r1, #32
 8001cb4:	d003      	beq.n	8001cbe <__aeabi_dadd+0x446>
 8001cb6:	2740      	movs	r7, #64	@ 0x40
 8001cb8:	1a79      	subs	r1, r7, r1
 8001cba:	408b      	lsls	r3, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	1e53      	subs	r3, r2, #1
 8001cc0:	419a      	sbcs	r2, r3
 8001cc2:	4663      	mov	r3, ip
 8001cc4:	0017      	movs	r7, r2
 8001cc6:	431f      	orrs	r7, r3
 8001cc8:	e622      	b.n	8001910 <__aeabi_dadd+0x98>
 8001cca:	48a4      	ldr	r0, [pc, #656]	@ (8001f5c <__aeabi_dadd+0x6e4>)
 8001ccc:	1ae1      	subs	r1, r4, r3
 8001cce:	4010      	ands	r0, r2
 8001cd0:	0747      	lsls	r7, r0, #29
 8001cd2:	08c0      	lsrs	r0, r0, #3
 8001cd4:	e707      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001cd6:	0034      	movs	r4, r6
 8001cd8:	4648      	mov	r0, r9
 8001cda:	4304      	orrs	r4, r0
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dadd+0x468>
 8001cde:	e0fa      	b.n	8001ed6 <__aeabi_dadd+0x65e>
 8001ce0:	1e4c      	subs	r4, r1, #1
 8001ce2:	2901      	cmp	r1, #1
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dadd+0x470>
 8001ce6:	e0d7      	b.n	8001e98 <__aeabi_dadd+0x620>
 8001ce8:	4f9b      	ldr	r7, [pc, #620]	@ (8001f58 <__aeabi_dadd+0x6e0>)
 8001cea:	42b9      	cmp	r1, r7
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dadd+0x478>
 8001cee:	e0e2      	b.n	8001eb6 <__aeabi_dadd+0x63e>
 8001cf0:	2701      	movs	r7, #1
 8001cf2:	2c38      	cmp	r4, #56	@ 0x38
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_dadd+0x480>
 8001cf6:	e74f      	b.n	8001b98 <__aeabi_dadd+0x320>
 8001cf8:	0021      	movs	r1, r4
 8001cfa:	e73c      	b.n	8001b76 <__aeabi_dadd+0x2fe>
 8001cfc:	4c96      	ldr	r4, [pc, #600]	@ (8001f58 <__aeabi_dadd+0x6e0>)
 8001cfe:	42a1      	cmp	r1, r4
 8001d00:	d100      	bne.n	8001d04 <__aeabi_dadd+0x48c>
 8001d02:	e0dd      	b.n	8001ec0 <__aeabi_dadd+0x648>
 8001d04:	444a      	add	r2, r9
 8001d06:	454a      	cmp	r2, r9
 8001d08:	4180      	sbcs	r0, r0
 8001d0a:	18f3      	adds	r3, r6, r3
 8001d0c:	4240      	negs	r0, r0
 8001d0e:	1818      	adds	r0, r3, r0
 8001d10:	07c7      	lsls	r7, r0, #31
 8001d12:	0852      	lsrs	r2, r2, #1
 8001d14:	4317      	orrs	r7, r2
 8001d16:	0846      	lsrs	r6, r0, #1
 8001d18:	0752      	lsls	r2, r2, #29
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dadd+0x4b0>
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	000c      	movs	r4, r1
 8001d20:	403a      	ands	r2, r7
 8001d22:	2a04      	cmp	r2, #4
 8001d24:	d000      	beq.n	8001d28 <__aeabi_dadd+0x4b0>
 8001d26:	e62c      	b.n	8001982 <__aeabi_dadd+0x10a>
 8001d28:	0776      	lsls	r6, r6, #29
 8001d2a:	08ff      	lsrs	r7, r7, #3
 8001d2c:	4337      	orrs	r7, r6
 8001d2e:	0900      	lsrs	r0, r0, #4
 8001d30:	e6d9      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001d32:	2700      	movs	r7, #0
 8001d34:	2600      	movs	r6, #0
 8001d36:	e6e8      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001d38:	4649      	mov	r1, r9
 8001d3a:	1a57      	subs	r7, r2, r1
 8001d3c:	42ba      	cmp	r2, r7
 8001d3e:	4192      	sbcs	r2, r2
 8001d40:	1b9e      	subs	r6, r3, r6
 8001d42:	4252      	negs	r2, r2
 8001d44:	4665      	mov	r5, ip
 8001d46:	1ab6      	subs	r6, r6, r2
 8001d48:	e5ed      	b.n	8001926 <__aeabi_dadd+0xae>
 8001d4a:	2900      	cmp	r1, #0
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dadd+0x4d8>
 8001d4e:	e0c6      	b.n	8001ede <__aeabi_dadd+0x666>
 8001d50:	2f00      	cmp	r7, #0
 8001d52:	d167      	bne.n	8001e24 <__aeabi_dadd+0x5ac>
 8001d54:	2680      	movs	r6, #128	@ 0x80
 8001d56:	2500      	movs	r5, #0
 8001d58:	4c7f      	ldr	r4, [pc, #508]	@ (8001f58 <__aeabi_dadd+0x6e0>)
 8001d5a:	0336      	lsls	r6, r6, #12
 8001d5c:	e6d5      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001d5e:	4665      	mov	r5, ip
 8001d60:	000c      	movs	r4, r1
 8001d62:	001e      	movs	r6, r3
 8001d64:	08d0      	lsrs	r0, r2, #3
 8001d66:	e6e4      	b.n	8001b32 <__aeabi_dadd+0x2ba>
 8001d68:	444a      	add	r2, r9
 8001d6a:	454a      	cmp	r2, r9
 8001d6c:	4180      	sbcs	r0, r0
 8001d6e:	18f3      	adds	r3, r6, r3
 8001d70:	4240      	negs	r0, r0
 8001d72:	1818      	adds	r0, r3, r0
 8001d74:	0011      	movs	r1, r2
 8001d76:	0203      	lsls	r3, r0, #8
 8001d78:	d400      	bmi.n	8001d7c <__aeabi_dadd+0x504>
 8001d7a:	e096      	b.n	8001eaa <__aeabi_dadd+0x632>
 8001d7c:	4b77      	ldr	r3, [pc, #476]	@ (8001f5c <__aeabi_dadd+0x6e4>)
 8001d7e:	0849      	lsrs	r1, r1, #1
 8001d80:	4018      	ands	r0, r3
 8001d82:	07c3      	lsls	r3, r0, #31
 8001d84:	430b      	orrs	r3, r1
 8001d86:	0844      	lsrs	r4, r0, #1
 8001d88:	0749      	lsls	r1, r1, #29
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dadd+0x516>
 8001d8c:	e129      	b.n	8001fe2 <__aeabi_dadd+0x76a>
 8001d8e:	220f      	movs	r2, #15
 8001d90:	401a      	ands	r2, r3
 8001d92:	2a04      	cmp	r2, #4
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dadd+0x520>
 8001d96:	e0ea      	b.n	8001f6e <__aeabi_dadd+0x6f6>
 8001d98:	1d1f      	adds	r7, r3, #4
 8001d9a:	429f      	cmp	r7, r3
 8001d9c:	41b6      	sbcs	r6, r6
 8001d9e:	4276      	negs	r6, r6
 8001da0:	1936      	adds	r6, r6, r4
 8001da2:	2402      	movs	r4, #2
 8001da4:	e6c4      	b.n	8001b30 <__aeabi_dadd+0x2b8>
 8001da6:	4649      	mov	r1, r9
 8001da8:	1a8f      	subs	r7, r1, r2
 8001daa:	45b9      	cmp	r9, r7
 8001dac:	4180      	sbcs	r0, r0
 8001dae:	1af6      	subs	r6, r6, r3
 8001db0:	4240      	negs	r0, r0
 8001db2:	1a36      	subs	r6, r6, r0
 8001db4:	0233      	lsls	r3, r6, #8
 8001db6:	d406      	bmi.n	8001dc6 <__aeabi_dadd+0x54e>
 8001db8:	0773      	lsls	r3, r6, #29
 8001dba:	08ff      	lsrs	r7, r7, #3
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	431f      	orrs	r7, r3
 8001dc0:	08f0      	lsrs	r0, r6, #3
 8001dc2:	e690      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001dc4:	4665      	mov	r5, ip
 8001dc6:	2401      	movs	r4, #1
 8001dc8:	e5ab      	b.n	8001922 <__aeabi_dadd+0xaa>
 8001dca:	464b      	mov	r3, r9
 8001dcc:	0777      	lsls	r7, r6, #29
 8001dce:	08d8      	lsrs	r0, r3, #3
 8001dd0:	4307      	orrs	r7, r0
 8001dd2:	08f0      	lsrs	r0, r6, #3
 8001dd4:	e6b4      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001dd6:	000f      	movs	r7, r1
 8001dd8:	0018      	movs	r0, r3
 8001dda:	3f20      	subs	r7, #32
 8001ddc:	40f8      	lsrs	r0, r7
 8001dde:	4684      	mov	ip, r0
 8001de0:	2920      	cmp	r1, #32
 8001de2:	d003      	beq.n	8001dec <__aeabi_dadd+0x574>
 8001de4:	2740      	movs	r7, #64	@ 0x40
 8001de6:	1a79      	subs	r1, r7, r1
 8001de8:	408b      	lsls	r3, r1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	1e53      	subs	r3, r2, #1
 8001dee:	419a      	sbcs	r2, r3
 8001df0:	4663      	mov	r3, ip
 8001df2:	0017      	movs	r7, r2
 8001df4:	431f      	orrs	r7, r3
 8001df6:	e635      	b.n	8001a64 <__aeabi_dadd+0x1ec>
 8001df8:	2500      	movs	r5, #0
 8001dfa:	2400      	movs	r4, #0
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	e684      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001e00:	000c      	movs	r4, r1
 8001e02:	0035      	movs	r5, r6
 8001e04:	3c20      	subs	r4, #32
 8001e06:	40e5      	lsrs	r5, r4
 8001e08:	2920      	cmp	r1, #32
 8001e0a:	d005      	beq.n	8001e18 <__aeabi_dadd+0x5a0>
 8001e0c:	2440      	movs	r4, #64	@ 0x40
 8001e0e:	1a61      	subs	r1, r4, r1
 8001e10:	408e      	lsls	r6, r1
 8001e12:	4649      	mov	r1, r9
 8001e14:	4331      	orrs	r1, r6
 8001e16:	4689      	mov	r9, r1
 8001e18:	4648      	mov	r0, r9
 8001e1a:	1e41      	subs	r1, r0, #1
 8001e1c:	4188      	sbcs	r0, r1
 8001e1e:	0007      	movs	r7, r0
 8001e20:	432f      	orrs	r7, r5
 8001e22:	e5ef      	b.n	8001a04 <__aeabi_dadd+0x18c>
 8001e24:	08d2      	lsrs	r2, r2, #3
 8001e26:	075f      	lsls	r7, r3, #29
 8001e28:	4665      	mov	r5, ip
 8001e2a:	4317      	orrs	r7, r2
 8001e2c:	08d8      	lsrs	r0, r3, #3
 8001e2e:	e687      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001e30:	1a17      	subs	r7, r2, r0
 8001e32:	42ba      	cmp	r2, r7
 8001e34:	4192      	sbcs	r2, r2
 8001e36:	1b9e      	subs	r6, r3, r6
 8001e38:	4252      	negs	r2, r2
 8001e3a:	1ab6      	subs	r6, r6, r2
 8001e3c:	0233      	lsls	r3, r6, #8
 8001e3e:	d4c1      	bmi.n	8001dc4 <__aeabi_dadd+0x54c>
 8001e40:	0773      	lsls	r3, r6, #29
 8001e42:	08ff      	lsrs	r7, r7, #3
 8001e44:	4665      	mov	r5, ip
 8001e46:	2101      	movs	r1, #1
 8001e48:	431f      	orrs	r7, r3
 8001e4a:	08f0      	lsrs	r0, r6, #3
 8001e4c:	e64b      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001e4e:	2f00      	cmp	r7, #0
 8001e50:	d07b      	beq.n	8001f4a <__aeabi_dadd+0x6d2>
 8001e52:	4665      	mov	r5, ip
 8001e54:	001e      	movs	r6, r3
 8001e56:	4691      	mov	r9, r2
 8001e58:	e63f      	b.n	8001ada <__aeabi_dadd+0x262>
 8001e5a:	1a81      	subs	r1, r0, r2
 8001e5c:	4688      	mov	r8, r1
 8001e5e:	45c1      	cmp	r9, r8
 8001e60:	41a4      	sbcs	r4, r4
 8001e62:	1af1      	subs	r1, r6, r3
 8001e64:	4264      	negs	r4, r4
 8001e66:	1b09      	subs	r1, r1, r4
 8001e68:	2480      	movs	r4, #128	@ 0x80
 8001e6a:	0424      	lsls	r4, r4, #16
 8001e6c:	4221      	tst	r1, r4
 8001e6e:	d077      	beq.n	8001f60 <__aeabi_dadd+0x6e8>
 8001e70:	1a10      	subs	r0, r2, r0
 8001e72:	4282      	cmp	r2, r0
 8001e74:	4192      	sbcs	r2, r2
 8001e76:	0007      	movs	r7, r0
 8001e78:	1b9e      	subs	r6, r3, r6
 8001e7a:	4252      	negs	r2, r2
 8001e7c:	1ab6      	subs	r6, r6, r2
 8001e7e:	4337      	orrs	r7, r6
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dadd+0x60c>
 8001e82:	e0a0      	b.n	8001fc6 <__aeabi_dadd+0x74e>
 8001e84:	4665      	mov	r5, ip
 8001e86:	2400      	movs	r4, #0
 8001e88:	2600      	movs	r6, #0
 8001e8a:	e63e      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001e8c:	075f      	lsls	r7, r3, #29
 8001e8e:	08d2      	lsrs	r2, r2, #3
 8001e90:	4665      	mov	r5, ip
 8001e92:	4317      	orrs	r7, r2
 8001e94:	08d8      	lsrs	r0, r3, #3
 8001e96:	e653      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001e98:	1881      	adds	r1, r0, r2
 8001e9a:	4291      	cmp	r1, r2
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	18f0      	adds	r0, r6, r3
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	1880      	adds	r0, r0, r2
 8001ea4:	0203      	lsls	r3, r0, #8
 8001ea6:	d500      	bpl.n	8001eaa <__aeabi_dadd+0x632>
 8001ea8:	e768      	b.n	8001d7c <__aeabi_dadd+0x504>
 8001eaa:	0747      	lsls	r7, r0, #29
 8001eac:	08c9      	lsrs	r1, r1, #3
 8001eae:	430f      	orrs	r7, r1
 8001eb0:	08c0      	lsrs	r0, r0, #3
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	e617      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001eb6:	08d2      	lsrs	r2, r2, #3
 8001eb8:	075f      	lsls	r7, r3, #29
 8001eba:	4317      	orrs	r7, r2
 8001ebc:	08d8      	lsrs	r0, r3, #3
 8001ebe:	e63f      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001ec0:	000c      	movs	r4, r1
 8001ec2:	2600      	movs	r6, #0
 8001ec4:	2700      	movs	r7, #0
 8001ec6:	e620      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d156      	bne.n	8001f7a <__aeabi_dadd+0x702>
 8001ecc:	075f      	lsls	r7, r3, #29
 8001ece:	08d2      	lsrs	r2, r2, #3
 8001ed0:	4317      	orrs	r7, r2
 8001ed2:	08d8      	lsrs	r0, r3, #3
 8001ed4:	e634      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001ed6:	000c      	movs	r4, r1
 8001ed8:	001e      	movs	r6, r3
 8001eda:	08d0      	lsrs	r0, r2, #3
 8001edc:	e629      	b.n	8001b32 <__aeabi_dadd+0x2ba>
 8001ede:	08c1      	lsrs	r1, r0, #3
 8001ee0:	0770      	lsls	r0, r6, #29
 8001ee2:	4301      	orrs	r1, r0
 8001ee4:	08f0      	lsrs	r0, r6, #3
 8001ee6:	2f00      	cmp	r7, #0
 8001ee8:	d062      	beq.n	8001fb0 <__aeabi_dadd+0x738>
 8001eea:	2480      	movs	r4, #128	@ 0x80
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	4220      	tst	r0, r4
 8001ef0:	d007      	beq.n	8001f02 <__aeabi_dadd+0x68a>
 8001ef2:	08de      	lsrs	r6, r3, #3
 8001ef4:	4226      	tst	r6, r4
 8001ef6:	d104      	bne.n	8001f02 <__aeabi_dadd+0x68a>
 8001ef8:	4665      	mov	r5, ip
 8001efa:	0030      	movs	r0, r6
 8001efc:	08d1      	lsrs	r1, r2, #3
 8001efe:	075b      	lsls	r3, r3, #29
 8001f00:	4319      	orrs	r1, r3
 8001f02:	0f4f      	lsrs	r7, r1, #29
 8001f04:	00c9      	lsls	r1, r1, #3
 8001f06:	08c9      	lsrs	r1, r1, #3
 8001f08:	077f      	lsls	r7, r7, #29
 8001f0a:	430f      	orrs	r7, r1
 8001f0c:	e618      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001f0e:	000c      	movs	r4, r1
 8001f10:	0030      	movs	r0, r6
 8001f12:	3c20      	subs	r4, #32
 8001f14:	40e0      	lsrs	r0, r4
 8001f16:	4684      	mov	ip, r0
 8001f18:	2920      	cmp	r1, #32
 8001f1a:	d005      	beq.n	8001f28 <__aeabi_dadd+0x6b0>
 8001f1c:	2440      	movs	r4, #64	@ 0x40
 8001f1e:	1a61      	subs	r1, r4, r1
 8001f20:	408e      	lsls	r6, r1
 8001f22:	4649      	mov	r1, r9
 8001f24:	4331      	orrs	r1, r6
 8001f26:	4689      	mov	r9, r1
 8001f28:	4648      	mov	r0, r9
 8001f2a:	1e41      	subs	r1, r0, #1
 8001f2c:	4188      	sbcs	r0, r1
 8001f2e:	4661      	mov	r1, ip
 8001f30:	0007      	movs	r7, r0
 8001f32:	430f      	orrs	r7, r1
 8001f34:	e630      	b.n	8001b98 <__aeabi_dadd+0x320>
 8001f36:	2120      	movs	r1, #32
 8001f38:	2700      	movs	r7, #0
 8001f3a:	1a09      	subs	r1, r1, r0
 8001f3c:	e50e      	b.n	800195c <__aeabi_dadd+0xe4>
 8001f3e:	001e      	movs	r6, r3
 8001f40:	2f00      	cmp	r7, #0
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dadd+0x6ce>
 8001f44:	e522      	b.n	800198c <__aeabi_dadd+0x114>
 8001f46:	2400      	movs	r4, #0
 8001f48:	e758      	b.n	8001dfc <__aeabi_dadd+0x584>
 8001f4a:	2500      	movs	r5, #0
 8001f4c:	2400      	movs	r4, #0
 8001f4e:	2600      	movs	r6, #0
 8001f50:	e5db      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	000007fe 	.word	0x000007fe
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	4647      	mov	r7, r8
 8001f62:	430f      	orrs	r7, r1
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dadd+0x6f0>
 8001f66:	e747      	b.n	8001df8 <__aeabi_dadd+0x580>
 8001f68:	000e      	movs	r6, r1
 8001f6a:	46c1      	mov	r9, r8
 8001f6c:	e5b5      	b.n	8001ada <__aeabi_dadd+0x262>
 8001f6e:	08df      	lsrs	r7, r3, #3
 8001f70:	0764      	lsls	r4, r4, #29
 8001f72:	2102      	movs	r1, #2
 8001f74:	4327      	orrs	r7, r4
 8001f76:	0900      	lsrs	r0, r0, #4
 8001f78:	e5b5      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	08c0      	lsrs	r0, r0, #3
 8001f7e:	0777      	lsls	r7, r6, #29
 8001f80:	4307      	orrs	r7, r0
 8001f82:	4311      	orrs	r1, r2
 8001f84:	08f0      	lsrs	r0, r6, #3
 8001f86:	2900      	cmp	r1, #0
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dadd+0x714>
 8001f8a:	e5d9      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001f8c:	2180      	movs	r1, #128	@ 0x80
 8001f8e:	0309      	lsls	r1, r1, #12
 8001f90:	4208      	tst	r0, r1
 8001f92:	d007      	beq.n	8001fa4 <__aeabi_dadd+0x72c>
 8001f94:	08dc      	lsrs	r4, r3, #3
 8001f96:	420c      	tst	r4, r1
 8001f98:	d104      	bne.n	8001fa4 <__aeabi_dadd+0x72c>
 8001f9a:	08d2      	lsrs	r2, r2, #3
 8001f9c:	075b      	lsls	r3, r3, #29
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	0017      	movs	r7, r2
 8001fa2:	0020      	movs	r0, r4
 8001fa4:	0f7b      	lsrs	r3, r7, #29
 8001fa6:	00ff      	lsls	r7, r7, #3
 8001fa8:	08ff      	lsrs	r7, r7, #3
 8001faa:	075b      	lsls	r3, r3, #29
 8001fac:	431f      	orrs	r7, r3
 8001fae:	e5c7      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001fb0:	000f      	movs	r7, r1
 8001fb2:	e5c5      	b.n	8001b40 <__aeabi_dadd+0x2c8>
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <__aeabi_dadd+0x788>)
 8001fb6:	08d2      	lsrs	r2, r2, #3
 8001fb8:	4033      	ands	r3, r6
 8001fba:	075f      	lsls	r7, r3, #29
 8001fbc:	025b      	lsls	r3, r3, #9
 8001fbe:	2401      	movs	r4, #1
 8001fc0:	4317      	orrs	r7, r2
 8001fc2:	0b1e      	lsrs	r6, r3, #12
 8001fc4:	e5a1      	b.n	8001b0a <__aeabi_dadd+0x292>
 8001fc6:	4226      	tst	r6, r4
 8001fc8:	d012      	beq.n	8001ff0 <__aeabi_dadd+0x778>
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <__aeabi_dadd+0x788>)
 8001fcc:	4665      	mov	r5, ip
 8001fce:	0002      	movs	r2, r0
 8001fd0:	2401      	movs	r4, #1
 8001fd2:	401e      	ands	r6, r3
 8001fd4:	e4e6      	b.n	80019a4 <__aeabi_dadd+0x12c>
 8001fd6:	0021      	movs	r1, r4
 8001fd8:	e585      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001fda:	0017      	movs	r7, r2
 8001fdc:	e5a8      	b.n	8001b30 <__aeabi_dadd+0x2b8>
 8001fde:	003a      	movs	r2, r7
 8001fe0:	e4d4      	b.n	800198c <__aeabi_dadd+0x114>
 8001fe2:	08db      	lsrs	r3, r3, #3
 8001fe4:	0764      	lsls	r4, r4, #29
 8001fe6:	431c      	orrs	r4, r3
 8001fe8:	0027      	movs	r7, r4
 8001fea:	2102      	movs	r1, #2
 8001fec:	0900      	lsrs	r0, r0, #4
 8001fee:	e57a      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001ff0:	08c0      	lsrs	r0, r0, #3
 8001ff2:	0777      	lsls	r7, r6, #29
 8001ff4:	4307      	orrs	r7, r0
 8001ff6:	4665      	mov	r5, ip
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	08f0      	lsrs	r0, r6, #3
 8001ffc:	e573      	b.n	8001ae6 <__aeabi_dadd+0x26e>
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	ff7fffff 	.word	0xff7fffff

08002004 <__aeabi_ddiv>:
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	46de      	mov	lr, fp
 8002008:	4645      	mov	r5, r8
 800200a:	4657      	mov	r7, sl
 800200c:	464e      	mov	r6, r9
 800200e:	b5e0      	push	{r5, r6, r7, lr}
 8002010:	b087      	sub	sp, #28
 8002012:	9200      	str	r2, [sp, #0]
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	030b      	lsls	r3, r1, #12
 8002018:	0b1b      	lsrs	r3, r3, #12
 800201a:	469b      	mov	fp, r3
 800201c:	0fca      	lsrs	r2, r1, #31
 800201e:	004b      	lsls	r3, r1, #1
 8002020:	0004      	movs	r4, r0
 8002022:	4680      	mov	r8, r0
 8002024:	0d5b      	lsrs	r3, r3, #21
 8002026:	9202      	str	r2, [sp, #8]
 8002028:	d100      	bne.n	800202c <__aeabi_ddiv+0x28>
 800202a:	e098      	b.n	800215e <__aeabi_ddiv+0x15a>
 800202c:	4a7c      	ldr	r2, [pc, #496]	@ (8002220 <__aeabi_ddiv+0x21c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d037      	beq.n	80020a2 <__aeabi_ddiv+0x9e>
 8002032:	4659      	mov	r1, fp
 8002034:	0f42      	lsrs	r2, r0, #29
 8002036:	00c9      	lsls	r1, r1, #3
 8002038:	430a      	orrs	r2, r1
 800203a:	2180      	movs	r1, #128	@ 0x80
 800203c:	0409      	lsls	r1, r1, #16
 800203e:	4311      	orrs	r1, r2
 8002040:	00c2      	lsls	r2, r0, #3
 8002042:	4690      	mov	r8, r2
 8002044:	4a77      	ldr	r2, [pc, #476]	@ (8002224 <__aeabi_ddiv+0x220>)
 8002046:	4689      	mov	r9, r1
 8002048:	4692      	mov	sl, r2
 800204a:	449a      	add	sl, r3
 800204c:	2300      	movs	r3, #0
 800204e:	2400      	movs	r4, #0
 8002050:	9303      	str	r3, [sp, #12]
 8002052:	9e00      	ldr	r6, [sp, #0]
 8002054:	9f01      	ldr	r7, [sp, #4]
 8002056:	033b      	lsls	r3, r7, #12
 8002058:	0b1b      	lsrs	r3, r3, #12
 800205a:	469b      	mov	fp, r3
 800205c:	007b      	lsls	r3, r7, #1
 800205e:	0030      	movs	r0, r6
 8002060:	0d5b      	lsrs	r3, r3, #21
 8002062:	0ffd      	lsrs	r5, r7, #31
 8002064:	2b00      	cmp	r3, #0
 8002066:	d059      	beq.n	800211c <__aeabi_ddiv+0x118>
 8002068:	4a6d      	ldr	r2, [pc, #436]	@ (8002220 <__aeabi_ddiv+0x21c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d048      	beq.n	8002100 <__aeabi_ddiv+0xfc>
 800206e:	4659      	mov	r1, fp
 8002070:	0f72      	lsrs	r2, r6, #29
 8002072:	00c9      	lsls	r1, r1, #3
 8002074:	430a      	orrs	r2, r1
 8002076:	2180      	movs	r1, #128	@ 0x80
 8002078:	0409      	lsls	r1, r1, #16
 800207a:	4311      	orrs	r1, r2
 800207c:	468b      	mov	fp, r1
 800207e:	4969      	ldr	r1, [pc, #420]	@ (8002224 <__aeabi_ddiv+0x220>)
 8002080:	00f2      	lsls	r2, r6, #3
 8002082:	468c      	mov	ip, r1
 8002084:	4651      	mov	r1, sl
 8002086:	4463      	add	r3, ip
 8002088:	1acb      	subs	r3, r1, r3
 800208a:	469a      	mov	sl, r3
 800208c:	2100      	movs	r1, #0
 800208e:	9e02      	ldr	r6, [sp, #8]
 8002090:	406e      	eors	r6, r5
 8002092:	b2f6      	uxtb	r6, r6
 8002094:	2c0f      	cmp	r4, #15
 8002096:	d900      	bls.n	800209a <__aeabi_ddiv+0x96>
 8002098:	e0ce      	b.n	8002238 <__aeabi_ddiv+0x234>
 800209a:	4b63      	ldr	r3, [pc, #396]	@ (8002228 <__aeabi_ddiv+0x224>)
 800209c:	00a4      	lsls	r4, r4, #2
 800209e:	591b      	ldr	r3, [r3, r4]
 80020a0:	469f      	mov	pc, r3
 80020a2:	465a      	mov	r2, fp
 80020a4:	4302      	orrs	r2, r0
 80020a6:	4691      	mov	r9, r2
 80020a8:	d000      	beq.n	80020ac <__aeabi_ddiv+0xa8>
 80020aa:	e090      	b.n	80021ce <__aeabi_ddiv+0x1ca>
 80020ac:	469a      	mov	sl, r3
 80020ae:	2302      	movs	r3, #2
 80020b0:	4690      	mov	r8, r2
 80020b2:	2408      	movs	r4, #8
 80020b4:	9303      	str	r3, [sp, #12]
 80020b6:	e7cc      	b.n	8002052 <__aeabi_ddiv+0x4e>
 80020b8:	46cb      	mov	fp, r9
 80020ba:	4642      	mov	r2, r8
 80020bc:	9d02      	ldr	r5, [sp, #8]
 80020be:	9903      	ldr	r1, [sp, #12]
 80020c0:	2902      	cmp	r1, #2
 80020c2:	d100      	bne.n	80020c6 <__aeabi_ddiv+0xc2>
 80020c4:	e1de      	b.n	8002484 <__aeabi_ddiv+0x480>
 80020c6:	2903      	cmp	r1, #3
 80020c8:	d100      	bne.n	80020cc <__aeabi_ddiv+0xc8>
 80020ca:	e08d      	b.n	80021e8 <__aeabi_ddiv+0x1e4>
 80020cc:	2901      	cmp	r1, #1
 80020ce:	d000      	beq.n	80020d2 <__aeabi_ddiv+0xce>
 80020d0:	e179      	b.n	80023c6 <__aeabi_ddiv+0x3c2>
 80020d2:	002e      	movs	r6, r5
 80020d4:	2200      	movs	r2, #0
 80020d6:	2300      	movs	r3, #0
 80020d8:	2400      	movs	r4, #0
 80020da:	4690      	mov	r8, r2
 80020dc:	051b      	lsls	r3, r3, #20
 80020de:	4323      	orrs	r3, r4
 80020e0:	07f6      	lsls	r6, r6, #31
 80020e2:	4333      	orrs	r3, r6
 80020e4:	4640      	mov	r0, r8
 80020e6:	0019      	movs	r1, r3
 80020e8:	b007      	add	sp, #28
 80020ea:	bcf0      	pop	{r4, r5, r6, r7}
 80020ec:	46bb      	mov	fp, r7
 80020ee:	46b2      	mov	sl, r6
 80020f0:	46a9      	mov	r9, r5
 80020f2:	46a0      	mov	r8, r4
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	2200      	movs	r2, #0
 80020f8:	2400      	movs	r4, #0
 80020fa:	4690      	mov	r8, r2
 80020fc:	4b48      	ldr	r3, [pc, #288]	@ (8002220 <__aeabi_ddiv+0x21c>)
 80020fe:	e7ed      	b.n	80020dc <__aeabi_ddiv+0xd8>
 8002100:	465a      	mov	r2, fp
 8002102:	9b00      	ldr	r3, [sp, #0]
 8002104:	431a      	orrs	r2, r3
 8002106:	4b49      	ldr	r3, [pc, #292]	@ (800222c <__aeabi_ddiv+0x228>)
 8002108:	469c      	mov	ip, r3
 800210a:	44e2      	add	sl, ip
 800210c:	2a00      	cmp	r2, #0
 800210e:	d159      	bne.n	80021c4 <__aeabi_ddiv+0x1c0>
 8002110:	2302      	movs	r3, #2
 8002112:	431c      	orrs	r4, r3
 8002114:	2300      	movs	r3, #0
 8002116:	2102      	movs	r1, #2
 8002118:	469b      	mov	fp, r3
 800211a:	e7b8      	b.n	800208e <__aeabi_ddiv+0x8a>
 800211c:	465a      	mov	r2, fp
 800211e:	9b00      	ldr	r3, [sp, #0]
 8002120:	431a      	orrs	r2, r3
 8002122:	d049      	beq.n	80021b8 <__aeabi_ddiv+0x1b4>
 8002124:	465b      	mov	r3, fp
 8002126:	2b00      	cmp	r3, #0
 8002128:	d100      	bne.n	800212c <__aeabi_ddiv+0x128>
 800212a:	e19c      	b.n	8002466 <__aeabi_ddiv+0x462>
 800212c:	4658      	mov	r0, fp
 800212e:	f001 fc0d 	bl	800394c <__clzsi2>
 8002132:	0002      	movs	r2, r0
 8002134:	0003      	movs	r3, r0
 8002136:	3a0b      	subs	r2, #11
 8002138:	271d      	movs	r7, #29
 800213a:	9e00      	ldr	r6, [sp, #0]
 800213c:	1aba      	subs	r2, r7, r2
 800213e:	0019      	movs	r1, r3
 8002140:	4658      	mov	r0, fp
 8002142:	40d6      	lsrs	r6, r2
 8002144:	3908      	subs	r1, #8
 8002146:	4088      	lsls	r0, r1
 8002148:	0032      	movs	r2, r6
 800214a:	4302      	orrs	r2, r0
 800214c:	4693      	mov	fp, r2
 800214e:	9a00      	ldr	r2, [sp, #0]
 8002150:	408a      	lsls	r2, r1
 8002152:	4937      	ldr	r1, [pc, #220]	@ (8002230 <__aeabi_ddiv+0x22c>)
 8002154:	4453      	add	r3, sl
 8002156:	468a      	mov	sl, r1
 8002158:	2100      	movs	r1, #0
 800215a:	449a      	add	sl, r3
 800215c:	e797      	b.n	800208e <__aeabi_ddiv+0x8a>
 800215e:	465b      	mov	r3, fp
 8002160:	4303      	orrs	r3, r0
 8002162:	4699      	mov	r9, r3
 8002164:	d021      	beq.n	80021aa <__aeabi_ddiv+0x1a6>
 8002166:	465b      	mov	r3, fp
 8002168:	2b00      	cmp	r3, #0
 800216a:	d100      	bne.n	800216e <__aeabi_ddiv+0x16a>
 800216c:	e169      	b.n	8002442 <__aeabi_ddiv+0x43e>
 800216e:	4658      	mov	r0, fp
 8002170:	f001 fbec 	bl	800394c <__clzsi2>
 8002174:	230b      	movs	r3, #11
 8002176:	425b      	negs	r3, r3
 8002178:	469c      	mov	ip, r3
 800217a:	0002      	movs	r2, r0
 800217c:	4484      	add	ip, r0
 800217e:	4666      	mov	r6, ip
 8002180:	231d      	movs	r3, #29
 8002182:	1b9b      	subs	r3, r3, r6
 8002184:	0026      	movs	r6, r4
 8002186:	0011      	movs	r1, r2
 8002188:	4658      	mov	r0, fp
 800218a:	40de      	lsrs	r6, r3
 800218c:	3908      	subs	r1, #8
 800218e:	4088      	lsls	r0, r1
 8002190:	0033      	movs	r3, r6
 8002192:	4303      	orrs	r3, r0
 8002194:	4699      	mov	r9, r3
 8002196:	0023      	movs	r3, r4
 8002198:	408b      	lsls	r3, r1
 800219a:	4698      	mov	r8, r3
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <__aeabi_ddiv+0x230>)
 800219e:	2400      	movs	r4, #0
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	469a      	mov	sl, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	9303      	str	r3, [sp, #12]
 80021a8:	e753      	b.n	8002052 <__aeabi_ddiv+0x4e>
 80021aa:	2300      	movs	r3, #0
 80021ac:	4698      	mov	r8, r3
 80021ae:	469a      	mov	sl, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	2404      	movs	r4, #4
 80021b4:	9303      	str	r3, [sp, #12]
 80021b6:	e74c      	b.n	8002052 <__aeabi_ddiv+0x4e>
 80021b8:	2301      	movs	r3, #1
 80021ba:	431c      	orrs	r4, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	2101      	movs	r1, #1
 80021c0:	469b      	mov	fp, r3
 80021c2:	e764      	b.n	800208e <__aeabi_ddiv+0x8a>
 80021c4:	2303      	movs	r3, #3
 80021c6:	0032      	movs	r2, r6
 80021c8:	2103      	movs	r1, #3
 80021ca:	431c      	orrs	r4, r3
 80021cc:	e75f      	b.n	800208e <__aeabi_ddiv+0x8a>
 80021ce:	469a      	mov	sl, r3
 80021d0:	2303      	movs	r3, #3
 80021d2:	46d9      	mov	r9, fp
 80021d4:	240c      	movs	r4, #12
 80021d6:	9303      	str	r3, [sp, #12]
 80021d8:	e73b      	b.n	8002052 <__aeabi_ddiv+0x4e>
 80021da:	2300      	movs	r3, #0
 80021dc:	2480      	movs	r4, #128	@ 0x80
 80021de:	4698      	mov	r8, r3
 80021e0:	2600      	movs	r6, #0
 80021e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <__aeabi_ddiv+0x21c>)
 80021e4:	0324      	lsls	r4, r4, #12
 80021e6:	e779      	b.n	80020dc <__aeabi_ddiv+0xd8>
 80021e8:	2480      	movs	r4, #128	@ 0x80
 80021ea:	465b      	mov	r3, fp
 80021ec:	0324      	lsls	r4, r4, #12
 80021ee:	431c      	orrs	r4, r3
 80021f0:	0324      	lsls	r4, r4, #12
 80021f2:	002e      	movs	r6, r5
 80021f4:	4690      	mov	r8, r2
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <__aeabi_ddiv+0x21c>)
 80021f8:	0b24      	lsrs	r4, r4, #12
 80021fa:	e76f      	b.n	80020dc <__aeabi_ddiv+0xd8>
 80021fc:	2480      	movs	r4, #128	@ 0x80
 80021fe:	464b      	mov	r3, r9
 8002200:	0324      	lsls	r4, r4, #12
 8002202:	4223      	tst	r3, r4
 8002204:	d002      	beq.n	800220c <__aeabi_ddiv+0x208>
 8002206:	465b      	mov	r3, fp
 8002208:	4223      	tst	r3, r4
 800220a:	d0f0      	beq.n	80021ee <__aeabi_ddiv+0x1ea>
 800220c:	2480      	movs	r4, #128	@ 0x80
 800220e:	464b      	mov	r3, r9
 8002210:	0324      	lsls	r4, r4, #12
 8002212:	431c      	orrs	r4, r3
 8002214:	0324      	lsls	r4, r4, #12
 8002216:	9e02      	ldr	r6, [sp, #8]
 8002218:	4b01      	ldr	r3, [pc, #4]	@ (8002220 <__aeabi_ddiv+0x21c>)
 800221a:	0b24      	lsrs	r4, r4, #12
 800221c:	e75e      	b.n	80020dc <__aeabi_ddiv+0xd8>
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	000007ff 	.word	0x000007ff
 8002224:	fffffc01 	.word	0xfffffc01
 8002228:	08016350 	.word	0x08016350
 800222c:	fffff801 	.word	0xfffff801
 8002230:	000003f3 	.word	0x000003f3
 8002234:	fffffc0d 	.word	0xfffffc0d
 8002238:	45cb      	cmp	fp, r9
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x23a>
 800223c:	e0f8      	b.n	8002430 <__aeabi_ddiv+0x42c>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x23e>
 8002240:	e0f3      	b.n	800242a <__aeabi_ddiv+0x426>
 8002242:	2301      	movs	r3, #1
 8002244:	425b      	negs	r3, r3
 8002246:	469c      	mov	ip, r3
 8002248:	4644      	mov	r4, r8
 800224a:	4648      	mov	r0, r9
 800224c:	2500      	movs	r5, #0
 800224e:	44e2      	add	sl, ip
 8002250:	465b      	mov	r3, fp
 8002252:	0e17      	lsrs	r7, r2, #24
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	431f      	orrs	r7, r3
 8002258:	0c19      	lsrs	r1, r3, #16
 800225a:	043b      	lsls	r3, r7, #16
 800225c:	0212      	lsls	r2, r2, #8
 800225e:	9700      	str	r7, [sp, #0]
 8002260:	0c1f      	lsrs	r7, r3, #16
 8002262:	4691      	mov	r9, r2
 8002264:	9102      	str	r1, [sp, #8]
 8002266:	9703      	str	r7, [sp, #12]
 8002268:	f7fd fff8 	bl	800025c <__aeabi_uidivmod>
 800226c:	0002      	movs	r2, r0
 800226e:	437a      	muls	r2, r7
 8002270:	040b      	lsls	r3, r1, #16
 8002272:	0c21      	lsrs	r1, r4, #16
 8002274:	4680      	mov	r8, r0
 8002276:	4319      	orrs	r1, r3
 8002278:	428a      	cmp	r2, r1
 800227a:	d909      	bls.n	8002290 <__aeabi_ddiv+0x28c>
 800227c:	9f00      	ldr	r7, [sp, #0]
 800227e:	2301      	movs	r3, #1
 8002280:	46bc      	mov	ip, r7
 8002282:	425b      	negs	r3, r3
 8002284:	4461      	add	r1, ip
 8002286:	469c      	mov	ip, r3
 8002288:	44e0      	add	r8, ip
 800228a:	428f      	cmp	r7, r1
 800228c:	d800      	bhi.n	8002290 <__aeabi_ddiv+0x28c>
 800228e:	e15c      	b.n	800254a <__aeabi_ddiv+0x546>
 8002290:	1a88      	subs	r0, r1, r2
 8002292:	9902      	ldr	r1, [sp, #8]
 8002294:	f7fd ffe2 	bl	800025c <__aeabi_uidivmod>
 8002298:	9a03      	ldr	r2, [sp, #12]
 800229a:	0424      	lsls	r4, r4, #16
 800229c:	4342      	muls	r2, r0
 800229e:	0409      	lsls	r1, r1, #16
 80022a0:	0c24      	lsrs	r4, r4, #16
 80022a2:	0003      	movs	r3, r0
 80022a4:	430c      	orrs	r4, r1
 80022a6:	42a2      	cmp	r2, r4
 80022a8:	d906      	bls.n	80022b8 <__aeabi_ddiv+0x2b4>
 80022aa:	9900      	ldr	r1, [sp, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	468c      	mov	ip, r1
 80022b0:	4464      	add	r4, ip
 80022b2:	42a1      	cmp	r1, r4
 80022b4:	d800      	bhi.n	80022b8 <__aeabi_ddiv+0x2b4>
 80022b6:	e142      	b.n	800253e <__aeabi_ddiv+0x53a>
 80022b8:	1aa0      	subs	r0, r4, r2
 80022ba:	4642      	mov	r2, r8
 80022bc:	0412      	lsls	r2, r2, #16
 80022be:	431a      	orrs	r2, r3
 80022c0:	4693      	mov	fp, r2
 80022c2:	464b      	mov	r3, r9
 80022c4:	4659      	mov	r1, fp
 80022c6:	0c1b      	lsrs	r3, r3, #16
 80022c8:	001f      	movs	r7, r3
 80022ca:	9304      	str	r3, [sp, #16]
 80022cc:	040b      	lsls	r3, r1, #16
 80022ce:	4649      	mov	r1, r9
 80022d0:	0409      	lsls	r1, r1, #16
 80022d2:	0c09      	lsrs	r1, r1, #16
 80022d4:	000c      	movs	r4, r1
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	435c      	muls	r4, r3
 80022da:	0c12      	lsrs	r2, r2, #16
 80022dc:	437b      	muls	r3, r7
 80022de:	4688      	mov	r8, r1
 80022e0:	4351      	muls	r1, r2
 80022e2:	437a      	muls	r2, r7
 80022e4:	0c27      	lsrs	r7, r4, #16
 80022e6:	46bc      	mov	ip, r7
 80022e8:	185b      	adds	r3, r3, r1
 80022ea:	4463      	add	r3, ip
 80022ec:	4299      	cmp	r1, r3
 80022ee:	d903      	bls.n	80022f8 <__aeabi_ddiv+0x2f4>
 80022f0:	2180      	movs	r1, #128	@ 0x80
 80022f2:	0249      	lsls	r1, r1, #9
 80022f4:	468c      	mov	ip, r1
 80022f6:	4462      	add	r2, ip
 80022f8:	0c19      	lsrs	r1, r3, #16
 80022fa:	0424      	lsls	r4, r4, #16
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	0c24      	lsrs	r4, r4, #16
 8002300:	188a      	adds	r2, r1, r2
 8002302:	191c      	adds	r4, r3, r4
 8002304:	4290      	cmp	r0, r2
 8002306:	d302      	bcc.n	800230e <__aeabi_ddiv+0x30a>
 8002308:	d116      	bne.n	8002338 <__aeabi_ddiv+0x334>
 800230a:	42a5      	cmp	r5, r4
 800230c:	d214      	bcs.n	8002338 <__aeabi_ddiv+0x334>
 800230e:	465b      	mov	r3, fp
 8002310:	9f00      	ldr	r7, [sp, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	444d      	add	r5, r9
 8002316:	9305      	str	r3, [sp, #20]
 8002318:	454d      	cmp	r5, r9
 800231a:	419b      	sbcs	r3, r3
 800231c:	46bc      	mov	ip, r7
 800231e:	425b      	negs	r3, r3
 8002320:	4463      	add	r3, ip
 8002322:	18c0      	adds	r0, r0, r3
 8002324:	4287      	cmp	r7, r0
 8002326:	d300      	bcc.n	800232a <__aeabi_ddiv+0x326>
 8002328:	e102      	b.n	8002530 <__aeabi_ddiv+0x52c>
 800232a:	4282      	cmp	r2, r0
 800232c:	d900      	bls.n	8002330 <__aeabi_ddiv+0x32c>
 800232e:	e129      	b.n	8002584 <__aeabi_ddiv+0x580>
 8002330:	d100      	bne.n	8002334 <__aeabi_ddiv+0x330>
 8002332:	e124      	b.n	800257e <__aeabi_ddiv+0x57a>
 8002334:	9b05      	ldr	r3, [sp, #20]
 8002336:	469b      	mov	fp, r3
 8002338:	1b2c      	subs	r4, r5, r4
 800233a:	42a5      	cmp	r5, r4
 800233c:	41ad      	sbcs	r5, r5
 800233e:	9b00      	ldr	r3, [sp, #0]
 8002340:	1a80      	subs	r0, r0, r2
 8002342:	426d      	negs	r5, r5
 8002344:	1b40      	subs	r0, r0, r5
 8002346:	4283      	cmp	r3, r0
 8002348:	d100      	bne.n	800234c <__aeabi_ddiv+0x348>
 800234a:	e10f      	b.n	800256c <__aeabi_ddiv+0x568>
 800234c:	9902      	ldr	r1, [sp, #8]
 800234e:	f7fd ff85 	bl	800025c <__aeabi_uidivmod>
 8002352:	9a03      	ldr	r2, [sp, #12]
 8002354:	040b      	lsls	r3, r1, #16
 8002356:	4342      	muls	r2, r0
 8002358:	0c21      	lsrs	r1, r4, #16
 800235a:	0005      	movs	r5, r0
 800235c:	4319      	orrs	r1, r3
 800235e:	428a      	cmp	r2, r1
 8002360:	d900      	bls.n	8002364 <__aeabi_ddiv+0x360>
 8002362:	e0cb      	b.n	80024fc <__aeabi_ddiv+0x4f8>
 8002364:	1a88      	subs	r0, r1, r2
 8002366:	9902      	ldr	r1, [sp, #8]
 8002368:	f7fd ff78 	bl	800025c <__aeabi_uidivmod>
 800236c:	9a03      	ldr	r2, [sp, #12]
 800236e:	0424      	lsls	r4, r4, #16
 8002370:	4342      	muls	r2, r0
 8002372:	0409      	lsls	r1, r1, #16
 8002374:	0c24      	lsrs	r4, r4, #16
 8002376:	0003      	movs	r3, r0
 8002378:	430c      	orrs	r4, r1
 800237a:	42a2      	cmp	r2, r4
 800237c:	d900      	bls.n	8002380 <__aeabi_ddiv+0x37c>
 800237e:	e0ca      	b.n	8002516 <__aeabi_ddiv+0x512>
 8002380:	4641      	mov	r1, r8
 8002382:	1aa4      	subs	r4, r4, r2
 8002384:	042a      	lsls	r2, r5, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	9f04      	ldr	r7, [sp, #16]
 800238a:	0413      	lsls	r3, r2, #16
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	4359      	muls	r1, r3
 8002390:	4640      	mov	r0, r8
 8002392:	437b      	muls	r3, r7
 8002394:	469c      	mov	ip, r3
 8002396:	0c15      	lsrs	r5, r2, #16
 8002398:	4368      	muls	r0, r5
 800239a:	0c0b      	lsrs	r3, r1, #16
 800239c:	4484      	add	ip, r0
 800239e:	4463      	add	r3, ip
 80023a0:	437d      	muls	r5, r7
 80023a2:	4298      	cmp	r0, r3
 80023a4:	d903      	bls.n	80023ae <__aeabi_ddiv+0x3aa>
 80023a6:	2080      	movs	r0, #128	@ 0x80
 80023a8:	0240      	lsls	r0, r0, #9
 80023aa:	4684      	mov	ip, r0
 80023ac:	4465      	add	r5, ip
 80023ae:	0c18      	lsrs	r0, r3, #16
 80023b0:	0409      	lsls	r1, r1, #16
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	0c09      	lsrs	r1, r1, #16
 80023b6:	1940      	adds	r0, r0, r5
 80023b8:	185b      	adds	r3, r3, r1
 80023ba:	4284      	cmp	r4, r0
 80023bc:	d327      	bcc.n	800240e <__aeabi_ddiv+0x40a>
 80023be:	d023      	beq.n	8002408 <__aeabi_ddiv+0x404>
 80023c0:	2301      	movs	r3, #1
 80023c2:	0035      	movs	r5, r6
 80023c4:	431a      	orrs	r2, r3
 80023c6:	4b94      	ldr	r3, [pc, #592]	@ (8002618 <__aeabi_ddiv+0x614>)
 80023c8:	4453      	add	r3, sl
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	dd60      	ble.n	8002490 <__aeabi_ddiv+0x48c>
 80023ce:	0751      	lsls	r1, r2, #29
 80023d0:	d000      	beq.n	80023d4 <__aeabi_ddiv+0x3d0>
 80023d2:	e086      	b.n	80024e2 <__aeabi_ddiv+0x4de>
 80023d4:	002e      	movs	r6, r5
 80023d6:	08d1      	lsrs	r1, r2, #3
 80023d8:	465a      	mov	r2, fp
 80023da:	01d2      	lsls	r2, r2, #7
 80023dc:	d506      	bpl.n	80023ec <__aeabi_ddiv+0x3e8>
 80023de:	465a      	mov	r2, fp
 80023e0:	4b8e      	ldr	r3, [pc, #568]	@ (800261c <__aeabi_ddiv+0x618>)
 80023e2:	401a      	ands	r2, r3
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	4693      	mov	fp, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4453      	add	r3, sl
 80023ec:	4a8c      	ldr	r2, [pc, #560]	@ (8002620 <__aeabi_ddiv+0x61c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	dd00      	ble.n	80023f4 <__aeabi_ddiv+0x3f0>
 80023f2:	e680      	b.n	80020f6 <__aeabi_ddiv+0xf2>
 80023f4:	465a      	mov	r2, fp
 80023f6:	0752      	lsls	r2, r2, #29
 80023f8:	430a      	orrs	r2, r1
 80023fa:	4690      	mov	r8, r2
 80023fc:	465a      	mov	r2, fp
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	0254      	lsls	r4, r2, #9
 8002402:	0b24      	lsrs	r4, r4, #12
 8002404:	0d5b      	lsrs	r3, r3, #21
 8002406:	e669      	b.n	80020dc <__aeabi_ddiv+0xd8>
 8002408:	0035      	movs	r5, r6
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0db      	beq.n	80023c6 <__aeabi_ddiv+0x3c2>
 800240e:	9d00      	ldr	r5, [sp, #0]
 8002410:	1e51      	subs	r1, r2, #1
 8002412:	46ac      	mov	ip, r5
 8002414:	4464      	add	r4, ip
 8002416:	42ac      	cmp	r4, r5
 8002418:	d200      	bcs.n	800241c <__aeabi_ddiv+0x418>
 800241a:	e09e      	b.n	800255a <__aeabi_ddiv+0x556>
 800241c:	4284      	cmp	r4, r0
 800241e:	d200      	bcs.n	8002422 <__aeabi_ddiv+0x41e>
 8002420:	e0e1      	b.n	80025e6 <__aeabi_ddiv+0x5e2>
 8002422:	d100      	bne.n	8002426 <__aeabi_ddiv+0x422>
 8002424:	e0ee      	b.n	8002604 <__aeabi_ddiv+0x600>
 8002426:	000a      	movs	r2, r1
 8002428:	e7ca      	b.n	80023c0 <__aeabi_ddiv+0x3bc>
 800242a:	4542      	cmp	r2, r8
 800242c:	d900      	bls.n	8002430 <__aeabi_ddiv+0x42c>
 800242e:	e708      	b.n	8002242 <__aeabi_ddiv+0x23e>
 8002430:	464b      	mov	r3, r9
 8002432:	07dc      	lsls	r4, r3, #31
 8002434:	0858      	lsrs	r0, r3, #1
 8002436:	4643      	mov	r3, r8
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	431c      	orrs	r4, r3
 800243c:	4643      	mov	r3, r8
 800243e:	07dd      	lsls	r5, r3, #31
 8002440:	e706      	b.n	8002250 <__aeabi_ddiv+0x24c>
 8002442:	f001 fa83 	bl	800394c <__clzsi2>
 8002446:	2315      	movs	r3, #21
 8002448:	469c      	mov	ip, r3
 800244a:	4484      	add	ip, r0
 800244c:	0002      	movs	r2, r0
 800244e:	4663      	mov	r3, ip
 8002450:	3220      	adds	r2, #32
 8002452:	2b1c      	cmp	r3, #28
 8002454:	dc00      	bgt.n	8002458 <__aeabi_ddiv+0x454>
 8002456:	e692      	b.n	800217e <__aeabi_ddiv+0x17a>
 8002458:	0023      	movs	r3, r4
 800245a:	3808      	subs	r0, #8
 800245c:	4083      	lsls	r3, r0
 800245e:	4699      	mov	r9, r3
 8002460:	2300      	movs	r3, #0
 8002462:	4698      	mov	r8, r3
 8002464:	e69a      	b.n	800219c <__aeabi_ddiv+0x198>
 8002466:	f001 fa71 	bl	800394c <__clzsi2>
 800246a:	0002      	movs	r2, r0
 800246c:	0003      	movs	r3, r0
 800246e:	3215      	adds	r2, #21
 8002470:	3320      	adds	r3, #32
 8002472:	2a1c      	cmp	r2, #28
 8002474:	dc00      	bgt.n	8002478 <__aeabi_ddiv+0x474>
 8002476:	e65f      	b.n	8002138 <__aeabi_ddiv+0x134>
 8002478:	9900      	ldr	r1, [sp, #0]
 800247a:	3808      	subs	r0, #8
 800247c:	4081      	lsls	r1, r0
 800247e:	2200      	movs	r2, #0
 8002480:	468b      	mov	fp, r1
 8002482:	e666      	b.n	8002152 <__aeabi_ddiv+0x14e>
 8002484:	2200      	movs	r2, #0
 8002486:	002e      	movs	r6, r5
 8002488:	2400      	movs	r4, #0
 800248a:	4690      	mov	r8, r2
 800248c:	4b65      	ldr	r3, [pc, #404]	@ (8002624 <__aeabi_ddiv+0x620>)
 800248e:	e625      	b.n	80020dc <__aeabi_ddiv+0xd8>
 8002490:	002e      	movs	r6, r5
 8002492:	2101      	movs	r1, #1
 8002494:	1ac9      	subs	r1, r1, r3
 8002496:	2938      	cmp	r1, #56	@ 0x38
 8002498:	dd00      	ble.n	800249c <__aeabi_ddiv+0x498>
 800249a:	e61b      	b.n	80020d4 <__aeabi_ddiv+0xd0>
 800249c:	291f      	cmp	r1, #31
 800249e:	dc7e      	bgt.n	800259e <__aeabi_ddiv+0x59a>
 80024a0:	4861      	ldr	r0, [pc, #388]	@ (8002628 <__aeabi_ddiv+0x624>)
 80024a2:	0014      	movs	r4, r2
 80024a4:	4450      	add	r0, sl
 80024a6:	465b      	mov	r3, fp
 80024a8:	4082      	lsls	r2, r0
 80024aa:	4083      	lsls	r3, r0
 80024ac:	40cc      	lsrs	r4, r1
 80024ae:	1e50      	subs	r0, r2, #1
 80024b0:	4182      	sbcs	r2, r0
 80024b2:	4323      	orrs	r3, r4
 80024b4:	431a      	orrs	r2, r3
 80024b6:	465b      	mov	r3, fp
 80024b8:	40cb      	lsrs	r3, r1
 80024ba:	0751      	lsls	r1, r2, #29
 80024bc:	d009      	beq.n	80024d2 <__aeabi_ddiv+0x4ce>
 80024be:	210f      	movs	r1, #15
 80024c0:	4011      	ands	r1, r2
 80024c2:	2904      	cmp	r1, #4
 80024c4:	d005      	beq.n	80024d2 <__aeabi_ddiv+0x4ce>
 80024c6:	1d11      	adds	r1, r2, #4
 80024c8:	4291      	cmp	r1, r2
 80024ca:	4192      	sbcs	r2, r2
 80024cc:	4252      	negs	r2, r2
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	000a      	movs	r2, r1
 80024d2:	0219      	lsls	r1, r3, #8
 80024d4:	d400      	bmi.n	80024d8 <__aeabi_ddiv+0x4d4>
 80024d6:	e09b      	b.n	8002610 <__aeabi_ddiv+0x60c>
 80024d8:	2200      	movs	r2, #0
 80024da:	2301      	movs	r3, #1
 80024dc:	2400      	movs	r4, #0
 80024de:	4690      	mov	r8, r2
 80024e0:	e5fc      	b.n	80020dc <__aeabi_ddiv+0xd8>
 80024e2:	210f      	movs	r1, #15
 80024e4:	4011      	ands	r1, r2
 80024e6:	2904      	cmp	r1, #4
 80024e8:	d100      	bne.n	80024ec <__aeabi_ddiv+0x4e8>
 80024ea:	e773      	b.n	80023d4 <__aeabi_ddiv+0x3d0>
 80024ec:	1d11      	adds	r1, r2, #4
 80024ee:	4291      	cmp	r1, r2
 80024f0:	4192      	sbcs	r2, r2
 80024f2:	4252      	negs	r2, r2
 80024f4:	002e      	movs	r6, r5
 80024f6:	08c9      	lsrs	r1, r1, #3
 80024f8:	4493      	add	fp, r2
 80024fa:	e76d      	b.n	80023d8 <__aeabi_ddiv+0x3d4>
 80024fc:	9b00      	ldr	r3, [sp, #0]
 80024fe:	3d01      	subs	r5, #1
 8002500:	469c      	mov	ip, r3
 8002502:	4461      	add	r1, ip
 8002504:	428b      	cmp	r3, r1
 8002506:	d900      	bls.n	800250a <__aeabi_ddiv+0x506>
 8002508:	e72c      	b.n	8002364 <__aeabi_ddiv+0x360>
 800250a:	428a      	cmp	r2, r1
 800250c:	d800      	bhi.n	8002510 <__aeabi_ddiv+0x50c>
 800250e:	e729      	b.n	8002364 <__aeabi_ddiv+0x360>
 8002510:	1e85      	subs	r5, r0, #2
 8002512:	4461      	add	r1, ip
 8002514:	e726      	b.n	8002364 <__aeabi_ddiv+0x360>
 8002516:	9900      	ldr	r1, [sp, #0]
 8002518:	3b01      	subs	r3, #1
 800251a:	468c      	mov	ip, r1
 800251c:	4464      	add	r4, ip
 800251e:	42a1      	cmp	r1, r4
 8002520:	d900      	bls.n	8002524 <__aeabi_ddiv+0x520>
 8002522:	e72d      	b.n	8002380 <__aeabi_ddiv+0x37c>
 8002524:	42a2      	cmp	r2, r4
 8002526:	d800      	bhi.n	800252a <__aeabi_ddiv+0x526>
 8002528:	e72a      	b.n	8002380 <__aeabi_ddiv+0x37c>
 800252a:	1e83      	subs	r3, r0, #2
 800252c:	4464      	add	r4, ip
 800252e:	e727      	b.n	8002380 <__aeabi_ddiv+0x37c>
 8002530:	4287      	cmp	r7, r0
 8002532:	d000      	beq.n	8002536 <__aeabi_ddiv+0x532>
 8002534:	e6fe      	b.n	8002334 <__aeabi_ddiv+0x330>
 8002536:	45a9      	cmp	r9, r5
 8002538:	d900      	bls.n	800253c <__aeabi_ddiv+0x538>
 800253a:	e6fb      	b.n	8002334 <__aeabi_ddiv+0x330>
 800253c:	e6f5      	b.n	800232a <__aeabi_ddiv+0x326>
 800253e:	42a2      	cmp	r2, r4
 8002540:	d800      	bhi.n	8002544 <__aeabi_ddiv+0x540>
 8002542:	e6b9      	b.n	80022b8 <__aeabi_ddiv+0x2b4>
 8002544:	1e83      	subs	r3, r0, #2
 8002546:	4464      	add	r4, ip
 8002548:	e6b6      	b.n	80022b8 <__aeabi_ddiv+0x2b4>
 800254a:	428a      	cmp	r2, r1
 800254c:	d800      	bhi.n	8002550 <__aeabi_ddiv+0x54c>
 800254e:	e69f      	b.n	8002290 <__aeabi_ddiv+0x28c>
 8002550:	46bc      	mov	ip, r7
 8002552:	1e83      	subs	r3, r0, #2
 8002554:	4698      	mov	r8, r3
 8002556:	4461      	add	r1, ip
 8002558:	e69a      	b.n	8002290 <__aeabi_ddiv+0x28c>
 800255a:	000a      	movs	r2, r1
 800255c:	4284      	cmp	r4, r0
 800255e:	d000      	beq.n	8002562 <__aeabi_ddiv+0x55e>
 8002560:	e72e      	b.n	80023c0 <__aeabi_ddiv+0x3bc>
 8002562:	454b      	cmp	r3, r9
 8002564:	d000      	beq.n	8002568 <__aeabi_ddiv+0x564>
 8002566:	e72b      	b.n	80023c0 <__aeabi_ddiv+0x3bc>
 8002568:	0035      	movs	r5, r6
 800256a:	e72c      	b.n	80023c6 <__aeabi_ddiv+0x3c2>
 800256c:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <__aeabi_ddiv+0x614>)
 800256e:	4a2f      	ldr	r2, [pc, #188]	@ (800262c <__aeabi_ddiv+0x628>)
 8002570:	4453      	add	r3, sl
 8002572:	4592      	cmp	sl, r2
 8002574:	db43      	blt.n	80025fe <__aeabi_ddiv+0x5fa>
 8002576:	2201      	movs	r2, #1
 8002578:	2100      	movs	r1, #0
 800257a:	4493      	add	fp, r2
 800257c:	e72c      	b.n	80023d8 <__aeabi_ddiv+0x3d4>
 800257e:	42ac      	cmp	r4, r5
 8002580:	d800      	bhi.n	8002584 <__aeabi_ddiv+0x580>
 8002582:	e6d7      	b.n	8002334 <__aeabi_ddiv+0x330>
 8002584:	2302      	movs	r3, #2
 8002586:	425b      	negs	r3, r3
 8002588:	469c      	mov	ip, r3
 800258a:	9900      	ldr	r1, [sp, #0]
 800258c:	444d      	add	r5, r9
 800258e:	454d      	cmp	r5, r9
 8002590:	419b      	sbcs	r3, r3
 8002592:	44e3      	add	fp, ip
 8002594:	468c      	mov	ip, r1
 8002596:	425b      	negs	r3, r3
 8002598:	4463      	add	r3, ip
 800259a:	18c0      	adds	r0, r0, r3
 800259c:	e6cc      	b.n	8002338 <__aeabi_ddiv+0x334>
 800259e:	201f      	movs	r0, #31
 80025a0:	4240      	negs	r0, r0
 80025a2:	1ac3      	subs	r3, r0, r3
 80025a4:	4658      	mov	r0, fp
 80025a6:	40d8      	lsrs	r0, r3
 80025a8:	2920      	cmp	r1, #32
 80025aa:	d004      	beq.n	80025b6 <__aeabi_ddiv+0x5b2>
 80025ac:	4659      	mov	r1, fp
 80025ae:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <__aeabi_ddiv+0x62c>)
 80025b0:	4453      	add	r3, sl
 80025b2:	4099      	lsls	r1, r3
 80025b4:	430a      	orrs	r2, r1
 80025b6:	1e53      	subs	r3, r2, #1
 80025b8:	419a      	sbcs	r2, r3
 80025ba:	2307      	movs	r3, #7
 80025bc:	0019      	movs	r1, r3
 80025be:	4302      	orrs	r2, r0
 80025c0:	2400      	movs	r4, #0
 80025c2:	4011      	ands	r1, r2
 80025c4:	4213      	tst	r3, r2
 80025c6:	d009      	beq.n	80025dc <__aeabi_ddiv+0x5d8>
 80025c8:	3308      	adds	r3, #8
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d01d      	beq.n	800260c <__aeabi_ddiv+0x608>
 80025d0:	1d13      	adds	r3, r2, #4
 80025d2:	4293      	cmp	r3, r2
 80025d4:	4189      	sbcs	r1, r1
 80025d6:	001a      	movs	r2, r3
 80025d8:	4249      	negs	r1, r1
 80025da:	0749      	lsls	r1, r1, #29
 80025dc:	08d2      	lsrs	r2, r2, #3
 80025de:	430a      	orrs	r2, r1
 80025e0:	4690      	mov	r8, r2
 80025e2:	2300      	movs	r3, #0
 80025e4:	e57a      	b.n	80020dc <__aeabi_ddiv+0xd8>
 80025e6:	4649      	mov	r1, r9
 80025e8:	9f00      	ldr	r7, [sp, #0]
 80025ea:	004d      	lsls	r5, r1, #1
 80025ec:	454d      	cmp	r5, r9
 80025ee:	4189      	sbcs	r1, r1
 80025f0:	46bc      	mov	ip, r7
 80025f2:	4249      	negs	r1, r1
 80025f4:	4461      	add	r1, ip
 80025f6:	46a9      	mov	r9, r5
 80025f8:	3a02      	subs	r2, #2
 80025fa:	1864      	adds	r4, r4, r1
 80025fc:	e7ae      	b.n	800255c <__aeabi_ddiv+0x558>
 80025fe:	2201      	movs	r2, #1
 8002600:	4252      	negs	r2, r2
 8002602:	e746      	b.n	8002492 <__aeabi_ddiv+0x48e>
 8002604:	4599      	cmp	r9, r3
 8002606:	d3ee      	bcc.n	80025e6 <__aeabi_ddiv+0x5e2>
 8002608:	000a      	movs	r2, r1
 800260a:	e7aa      	b.n	8002562 <__aeabi_ddiv+0x55e>
 800260c:	2100      	movs	r1, #0
 800260e:	e7e5      	b.n	80025dc <__aeabi_ddiv+0x5d8>
 8002610:	0759      	lsls	r1, r3, #29
 8002612:	025b      	lsls	r3, r3, #9
 8002614:	0b1c      	lsrs	r4, r3, #12
 8002616:	e7e1      	b.n	80025dc <__aeabi_ddiv+0x5d8>
 8002618:	000003ff 	.word	0x000003ff
 800261c:	feffffff 	.word	0xfeffffff
 8002620:	000007fe 	.word	0x000007fe
 8002624:	000007ff 	.word	0x000007ff
 8002628:	0000041e 	.word	0x0000041e
 800262c:	fffffc02 	.word	0xfffffc02
 8002630:	0000043e 	.word	0x0000043e

08002634 <__eqdf2>:
 8002634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002636:	4657      	mov	r7, sl
 8002638:	46de      	mov	lr, fp
 800263a:	464e      	mov	r6, r9
 800263c:	4645      	mov	r5, r8
 800263e:	b5e0      	push	{r5, r6, r7, lr}
 8002640:	000d      	movs	r5, r1
 8002642:	0004      	movs	r4, r0
 8002644:	0fe8      	lsrs	r0, r5, #31
 8002646:	4683      	mov	fp, r0
 8002648:	0309      	lsls	r1, r1, #12
 800264a:	0fd8      	lsrs	r0, r3, #31
 800264c:	0b09      	lsrs	r1, r1, #12
 800264e:	4682      	mov	sl, r0
 8002650:	4819      	ldr	r0, [pc, #100]	@ (80026b8 <__eqdf2+0x84>)
 8002652:	468c      	mov	ip, r1
 8002654:	031f      	lsls	r7, r3, #12
 8002656:	0069      	lsls	r1, r5, #1
 8002658:	005e      	lsls	r6, r3, #1
 800265a:	0d49      	lsrs	r1, r1, #21
 800265c:	0b3f      	lsrs	r7, r7, #12
 800265e:	0d76      	lsrs	r6, r6, #21
 8002660:	4281      	cmp	r1, r0
 8002662:	d018      	beq.n	8002696 <__eqdf2+0x62>
 8002664:	4286      	cmp	r6, r0
 8002666:	d00f      	beq.n	8002688 <__eqdf2+0x54>
 8002668:	2001      	movs	r0, #1
 800266a:	42b1      	cmp	r1, r6
 800266c:	d10d      	bne.n	800268a <__eqdf2+0x56>
 800266e:	45bc      	cmp	ip, r7
 8002670:	d10b      	bne.n	800268a <__eqdf2+0x56>
 8002672:	4294      	cmp	r4, r2
 8002674:	d109      	bne.n	800268a <__eqdf2+0x56>
 8002676:	45d3      	cmp	fp, sl
 8002678:	d01c      	beq.n	80026b4 <__eqdf2+0x80>
 800267a:	2900      	cmp	r1, #0
 800267c:	d105      	bne.n	800268a <__eqdf2+0x56>
 800267e:	4660      	mov	r0, ip
 8002680:	4320      	orrs	r0, r4
 8002682:	1e43      	subs	r3, r0, #1
 8002684:	4198      	sbcs	r0, r3
 8002686:	e000      	b.n	800268a <__eqdf2+0x56>
 8002688:	2001      	movs	r0, #1
 800268a:	bcf0      	pop	{r4, r5, r6, r7}
 800268c:	46bb      	mov	fp, r7
 800268e:	46b2      	mov	sl, r6
 8002690:	46a9      	mov	r9, r5
 8002692:	46a0      	mov	r8, r4
 8002694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002696:	2001      	movs	r0, #1
 8002698:	428e      	cmp	r6, r1
 800269a:	d1f6      	bne.n	800268a <__eqdf2+0x56>
 800269c:	4661      	mov	r1, ip
 800269e:	4339      	orrs	r1, r7
 80026a0:	000f      	movs	r7, r1
 80026a2:	4317      	orrs	r7, r2
 80026a4:	4327      	orrs	r7, r4
 80026a6:	d1f0      	bne.n	800268a <__eqdf2+0x56>
 80026a8:	465b      	mov	r3, fp
 80026aa:	4652      	mov	r2, sl
 80026ac:	1a98      	subs	r0, r3, r2
 80026ae:	1e43      	subs	r3, r0, #1
 80026b0:	4198      	sbcs	r0, r3
 80026b2:	e7ea      	b.n	800268a <__eqdf2+0x56>
 80026b4:	2000      	movs	r0, #0
 80026b6:	e7e8      	b.n	800268a <__eqdf2+0x56>
 80026b8:	000007ff 	.word	0x000007ff

080026bc <__gedf2>:
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026be:	4657      	mov	r7, sl
 80026c0:	464e      	mov	r6, r9
 80026c2:	4645      	mov	r5, r8
 80026c4:	46de      	mov	lr, fp
 80026c6:	b5e0      	push	{r5, r6, r7, lr}
 80026c8:	000d      	movs	r5, r1
 80026ca:	030e      	lsls	r6, r1, #12
 80026cc:	0049      	lsls	r1, r1, #1
 80026ce:	0d49      	lsrs	r1, r1, #21
 80026d0:	468a      	mov	sl, r1
 80026d2:	0fdf      	lsrs	r7, r3, #31
 80026d4:	0fe9      	lsrs	r1, r5, #31
 80026d6:	46bc      	mov	ip, r7
 80026d8:	b083      	sub	sp, #12
 80026da:	4f2f      	ldr	r7, [pc, #188]	@ (8002798 <__gedf2+0xdc>)
 80026dc:	0004      	movs	r4, r0
 80026de:	4680      	mov	r8, r0
 80026e0:	9101      	str	r1, [sp, #4]
 80026e2:	0058      	lsls	r0, r3, #1
 80026e4:	0319      	lsls	r1, r3, #12
 80026e6:	4691      	mov	r9, r2
 80026e8:	0b36      	lsrs	r6, r6, #12
 80026ea:	0b09      	lsrs	r1, r1, #12
 80026ec:	0d40      	lsrs	r0, r0, #21
 80026ee:	45ba      	cmp	sl, r7
 80026f0:	d01d      	beq.n	800272e <__gedf2+0x72>
 80026f2:	42b8      	cmp	r0, r7
 80026f4:	d00d      	beq.n	8002712 <__gedf2+0x56>
 80026f6:	4657      	mov	r7, sl
 80026f8:	2f00      	cmp	r7, #0
 80026fa:	d12a      	bne.n	8002752 <__gedf2+0x96>
 80026fc:	4334      	orrs	r4, r6
 80026fe:	2800      	cmp	r0, #0
 8002700:	d124      	bne.n	800274c <__gedf2+0x90>
 8002702:	430a      	orrs	r2, r1
 8002704:	d036      	beq.n	8002774 <__gedf2+0xb8>
 8002706:	2c00      	cmp	r4, #0
 8002708:	d141      	bne.n	800278e <__gedf2+0xd2>
 800270a:	4663      	mov	r3, ip
 800270c:	0058      	lsls	r0, r3, #1
 800270e:	3801      	subs	r0, #1
 8002710:	e015      	b.n	800273e <__gedf2+0x82>
 8002712:	4311      	orrs	r1, r2
 8002714:	d138      	bne.n	8002788 <__gedf2+0xcc>
 8002716:	4653      	mov	r3, sl
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <__gedf2+0x64>
 800271c:	4326      	orrs	r6, r4
 800271e:	d0f4      	beq.n	800270a <__gedf2+0x4e>
 8002720:	9b01      	ldr	r3, [sp, #4]
 8002722:	4563      	cmp	r3, ip
 8002724:	d107      	bne.n	8002736 <__gedf2+0x7a>
 8002726:	9b01      	ldr	r3, [sp, #4]
 8002728:	0058      	lsls	r0, r3, #1
 800272a:	3801      	subs	r0, #1
 800272c:	e007      	b.n	800273e <__gedf2+0x82>
 800272e:	4326      	orrs	r6, r4
 8002730:	d12a      	bne.n	8002788 <__gedf2+0xcc>
 8002732:	4550      	cmp	r0, sl
 8002734:	d021      	beq.n	800277a <__gedf2+0xbe>
 8002736:	2001      	movs	r0, #1
 8002738:	9b01      	ldr	r3, [sp, #4]
 800273a:	425f      	negs	r7, r3
 800273c:	4338      	orrs	r0, r7
 800273e:	b003      	add	sp, #12
 8002740:	bcf0      	pop	{r4, r5, r6, r7}
 8002742:	46bb      	mov	fp, r7
 8002744:	46b2      	mov	sl, r6
 8002746:	46a9      	mov	r9, r5
 8002748:	46a0      	mov	r8, r4
 800274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274c:	2c00      	cmp	r4, #0
 800274e:	d0dc      	beq.n	800270a <__gedf2+0x4e>
 8002750:	e7e6      	b.n	8002720 <__gedf2+0x64>
 8002752:	2800      	cmp	r0, #0
 8002754:	d0ef      	beq.n	8002736 <__gedf2+0x7a>
 8002756:	9b01      	ldr	r3, [sp, #4]
 8002758:	4563      	cmp	r3, ip
 800275a:	d1ec      	bne.n	8002736 <__gedf2+0x7a>
 800275c:	4582      	cmp	sl, r0
 800275e:	dcea      	bgt.n	8002736 <__gedf2+0x7a>
 8002760:	dbe1      	blt.n	8002726 <__gedf2+0x6a>
 8002762:	428e      	cmp	r6, r1
 8002764:	d8e7      	bhi.n	8002736 <__gedf2+0x7a>
 8002766:	d1de      	bne.n	8002726 <__gedf2+0x6a>
 8002768:	45c8      	cmp	r8, r9
 800276a:	d8e4      	bhi.n	8002736 <__gedf2+0x7a>
 800276c:	2000      	movs	r0, #0
 800276e:	45c8      	cmp	r8, r9
 8002770:	d2e5      	bcs.n	800273e <__gedf2+0x82>
 8002772:	e7d8      	b.n	8002726 <__gedf2+0x6a>
 8002774:	2c00      	cmp	r4, #0
 8002776:	d0e2      	beq.n	800273e <__gedf2+0x82>
 8002778:	e7dd      	b.n	8002736 <__gedf2+0x7a>
 800277a:	4311      	orrs	r1, r2
 800277c:	d104      	bne.n	8002788 <__gedf2+0xcc>
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	4563      	cmp	r3, ip
 8002782:	d1d8      	bne.n	8002736 <__gedf2+0x7a>
 8002784:	2000      	movs	r0, #0
 8002786:	e7da      	b.n	800273e <__gedf2+0x82>
 8002788:	2002      	movs	r0, #2
 800278a:	4240      	negs	r0, r0
 800278c:	e7d7      	b.n	800273e <__gedf2+0x82>
 800278e:	9b01      	ldr	r3, [sp, #4]
 8002790:	4563      	cmp	r3, ip
 8002792:	d0e6      	beq.n	8002762 <__gedf2+0xa6>
 8002794:	e7cf      	b.n	8002736 <__gedf2+0x7a>
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	000007ff 	.word	0x000007ff

0800279c <__ledf2>:
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	4657      	mov	r7, sl
 80027a0:	464e      	mov	r6, r9
 80027a2:	4645      	mov	r5, r8
 80027a4:	46de      	mov	lr, fp
 80027a6:	b5e0      	push	{r5, r6, r7, lr}
 80027a8:	000d      	movs	r5, r1
 80027aa:	030e      	lsls	r6, r1, #12
 80027ac:	0049      	lsls	r1, r1, #1
 80027ae:	0d49      	lsrs	r1, r1, #21
 80027b0:	468a      	mov	sl, r1
 80027b2:	0fdf      	lsrs	r7, r3, #31
 80027b4:	0fe9      	lsrs	r1, r5, #31
 80027b6:	46bc      	mov	ip, r7
 80027b8:	b083      	sub	sp, #12
 80027ba:	4f2e      	ldr	r7, [pc, #184]	@ (8002874 <__ledf2+0xd8>)
 80027bc:	0004      	movs	r4, r0
 80027be:	4680      	mov	r8, r0
 80027c0:	9101      	str	r1, [sp, #4]
 80027c2:	0058      	lsls	r0, r3, #1
 80027c4:	0319      	lsls	r1, r3, #12
 80027c6:	4691      	mov	r9, r2
 80027c8:	0b36      	lsrs	r6, r6, #12
 80027ca:	0b09      	lsrs	r1, r1, #12
 80027cc:	0d40      	lsrs	r0, r0, #21
 80027ce:	45ba      	cmp	sl, r7
 80027d0:	d01e      	beq.n	8002810 <__ledf2+0x74>
 80027d2:	42b8      	cmp	r0, r7
 80027d4:	d00d      	beq.n	80027f2 <__ledf2+0x56>
 80027d6:	4657      	mov	r7, sl
 80027d8:	2f00      	cmp	r7, #0
 80027da:	d127      	bne.n	800282c <__ledf2+0x90>
 80027dc:	4334      	orrs	r4, r6
 80027de:	2800      	cmp	r0, #0
 80027e0:	d133      	bne.n	800284a <__ledf2+0xae>
 80027e2:	430a      	orrs	r2, r1
 80027e4:	d034      	beq.n	8002850 <__ledf2+0xb4>
 80027e6:	2c00      	cmp	r4, #0
 80027e8:	d140      	bne.n	800286c <__ledf2+0xd0>
 80027ea:	4663      	mov	r3, ip
 80027ec:	0058      	lsls	r0, r3, #1
 80027ee:	3801      	subs	r0, #1
 80027f0:	e015      	b.n	800281e <__ledf2+0x82>
 80027f2:	4311      	orrs	r1, r2
 80027f4:	d112      	bne.n	800281c <__ledf2+0x80>
 80027f6:	4653      	mov	r3, sl
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <__ledf2+0x64>
 80027fc:	4326      	orrs	r6, r4
 80027fe:	d0f4      	beq.n	80027ea <__ledf2+0x4e>
 8002800:	9b01      	ldr	r3, [sp, #4]
 8002802:	4563      	cmp	r3, ip
 8002804:	d01d      	beq.n	8002842 <__ledf2+0xa6>
 8002806:	2001      	movs	r0, #1
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	425f      	negs	r7, r3
 800280c:	4338      	orrs	r0, r7
 800280e:	e006      	b.n	800281e <__ledf2+0x82>
 8002810:	4326      	orrs	r6, r4
 8002812:	d103      	bne.n	800281c <__ledf2+0x80>
 8002814:	4550      	cmp	r0, sl
 8002816:	d1f6      	bne.n	8002806 <__ledf2+0x6a>
 8002818:	4311      	orrs	r1, r2
 800281a:	d01c      	beq.n	8002856 <__ledf2+0xba>
 800281c:	2002      	movs	r0, #2
 800281e:	b003      	add	sp, #12
 8002820:	bcf0      	pop	{r4, r5, r6, r7}
 8002822:	46bb      	mov	fp, r7
 8002824:	46b2      	mov	sl, r6
 8002826:	46a9      	mov	r9, r5
 8002828:	46a0      	mov	r8, r4
 800282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800282c:	2800      	cmp	r0, #0
 800282e:	d0ea      	beq.n	8002806 <__ledf2+0x6a>
 8002830:	9b01      	ldr	r3, [sp, #4]
 8002832:	4563      	cmp	r3, ip
 8002834:	d1e7      	bne.n	8002806 <__ledf2+0x6a>
 8002836:	4582      	cmp	sl, r0
 8002838:	dce5      	bgt.n	8002806 <__ledf2+0x6a>
 800283a:	db02      	blt.n	8002842 <__ledf2+0xa6>
 800283c:	428e      	cmp	r6, r1
 800283e:	d8e2      	bhi.n	8002806 <__ledf2+0x6a>
 8002840:	d00e      	beq.n	8002860 <__ledf2+0xc4>
 8002842:	9b01      	ldr	r3, [sp, #4]
 8002844:	0058      	lsls	r0, r3, #1
 8002846:	3801      	subs	r0, #1
 8002848:	e7e9      	b.n	800281e <__ledf2+0x82>
 800284a:	2c00      	cmp	r4, #0
 800284c:	d0cd      	beq.n	80027ea <__ledf2+0x4e>
 800284e:	e7d7      	b.n	8002800 <__ledf2+0x64>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e4      	beq.n	800281e <__ledf2+0x82>
 8002854:	e7d7      	b.n	8002806 <__ledf2+0x6a>
 8002856:	9b01      	ldr	r3, [sp, #4]
 8002858:	2000      	movs	r0, #0
 800285a:	4563      	cmp	r3, ip
 800285c:	d0df      	beq.n	800281e <__ledf2+0x82>
 800285e:	e7d2      	b.n	8002806 <__ledf2+0x6a>
 8002860:	45c8      	cmp	r8, r9
 8002862:	d8d0      	bhi.n	8002806 <__ledf2+0x6a>
 8002864:	2000      	movs	r0, #0
 8002866:	45c8      	cmp	r8, r9
 8002868:	d2d9      	bcs.n	800281e <__ledf2+0x82>
 800286a:	e7ea      	b.n	8002842 <__ledf2+0xa6>
 800286c:	9b01      	ldr	r3, [sp, #4]
 800286e:	4563      	cmp	r3, ip
 8002870:	d0e4      	beq.n	800283c <__ledf2+0xa0>
 8002872:	e7c8      	b.n	8002806 <__ledf2+0x6a>
 8002874:	000007ff 	.word	0x000007ff

08002878 <__aeabi_dmul>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	46de      	mov	lr, fp
 8002880:	4645      	mov	r5, r8
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	001f      	movs	r7, r3
 8002886:	030b      	lsls	r3, r1, #12
 8002888:	0b1b      	lsrs	r3, r3, #12
 800288a:	0016      	movs	r6, r2
 800288c:	469a      	mov	sl, r3
 800288e:	0fca      	lsrs	r2, r1, #31
 8002890:	004b      	lsls	r3, r1, #1
 8002892:	0004      	movs	r4, r0
 8002894:	4691      	mov	r9, r2
 8002896:	b085      	sub	sp, #20
 8002898:	0d5b      	lsrs	r3, r3, #21
 800289a:	d100      	bne.n	800289e <__aeabi_dmul+0x26>
 800289c:	e1cf      	b.n	8002c3e <__aeabi_dmul+0x3c6>
 800289e:	4acd      	ldr	r2, [pc, #820]	@ (8002bd4 <__aeabi_dmul+0x35c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d055      	beq.n	8002950 <__aeabi_dmul+0xd8>
 80028a4:	4651      	mov	r1, sl
 80028a6:	0f42      	lsrs	r2, r0, #29
 80028a8:	00c9      	lsls	r1, r1, #3
 80028aa:	430a      	orrs	r2, r1
 80028ac:	2180      	movs	r1, #128	@ 0x80
 80028ae:	0409      	lsls	r1, r1, #16
 80028b0:	4311      	orrs	r1, r2
 80028b2:	00c2      	lsls	r2, r0, #3
 80028b4:	4690      	mov	r8, r2
 80028b6:	4ac8      	ldr	r2, [pc, #800]	@ (8002bd8 <__aeabi_dmul+0x360>)
 80028b8:	468a      	mov	sl, r1
 80028ba:	4693      	mov	fp, r2
 80028bc:	449b      	add	fp, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	2500      	movs	r5, #0
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	033c      	lsls	r4, r7, #12
 80028c6:	007b      	lsls	r3, r7, #1
 80028c8:	0ffa      	lsrs	r2, r7, #31
 80028ca:	9601      	str	r6, [sp, #4]
 80028cc:	0b24      	lsrs	r4, r4, #12
 80028ce:	0d5b      	lsrs	r3, r3, #21
 80028d0:	9200      	str	r2, [sp, #0]
 80028d2:	d100      	bne.n	80028d6 <__aeabi_dmul+0x5e>
 80028d4:	e188      	b.n	8002be8 <__aeabi_dmul+0x370>
 80028d6:	4abf      	ldr	r2, [pc, #764]	@ (8002bd4 <__aeabi_dmul+0x35c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d100      	bne.n	80028de <__aeabi_dmul+0x66>
 80028dc:	e092      	b.n	8002a04 <__aeabi_dmul+0x18c>
 80028de:	4abe      	ldr	r2, [pc, #760]	@ (8002bd8 <__aeabi_dmul+0x360>)
 80028e0:	4694      	mov	ip, r2
 80028e2:	4463      	add	r3, ip
 80028e4:	449b      	add	fp, r3
 80028e6:	2d0a      	cmp	r5, #10
 80028e8:	dc42      	bgt.n	8002970 <__aeabi_dmul+0xf8>
 80028ea:	00e4      	lsls	r4, r4, #3
 80028ec:	0f73      	lsrs	r3, r6, #29
 80028ee:	4323      	orrs	r3, r4
 80028f0:	2480      	movs	r4, #128	@ 0x80
 80028f2:	4649      	mov	r1, r9
 80028f4:	0424      	lsls	r4, r4, #16
 80028f6:	431c      	orrs	r4, r3
 80028f8:	00f3      	lsls	r3, r6, #3
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	9b00      	ldr	r3, [sp, #0]
 80028fe:	2000      	movs	r0, #0
 8002900:	4059      	eors	r1, r3
 8002902:	b2cb      	uxtb	r3, r1
 8002904:	9303      	str	r3, [sp, #12]
 8002906:	2d02      	cmp	r5, #2
 8002908:	dc00      	bgt.n	800290c <__aeabi_dmul+0x94>
 800290a:	e094      	b.n	8002a36 <__aeabi_dmul+0x1be>
 800290c:	2301      	movs	r3, #1
 800290e:	40ab      	lsls	r3, r5
 8002910:	001d      	movs	r5, r3
 8002912:	23a6      	movs	r3, #166	@ 0xa6
 8002914:	002a      	movs	r2, r5
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	401a      	ands	r2, r3
 800291a:	421d      	tst	r5, r3
 800291c:	d000      	beq.n	8002920 <__aeabi_dmul+0xa8>
 800291e:	e229      	b.n	8002d74 <__aeabi_dmul+0x4fc>
 8002920:	2390      	movs	r3, #144	@ 0x90
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	421d      	tst	r5, r3
 8002926:	d100      	bne.n	800292a <__aeabi_dmul+0xb2>
 8002928:	e24d      	b.n	8002dc6 <__aeabi_dmul+0x54e>
 800292a:	2300      	movs	r3, #0
 800292c:	2480      	movs	r4, #128	@ 0x80
 800292e:	4699      	mov	r9, r3
 8002930:	0324      	lsls	r4, r4, #12
 8002932:	4ba8      	ldr	r3, [pc, #672]	@ (8002bd4 <__aeabi_dmul+0x35c>)
 8002934:	0010      	movs	r0, r2
 8002936:	464a      	mov	r2, r9
 8002938:	051b      	lsls	r3, r3, #20
 800293a:	4323      	orrs	r3, r4
 800293c:	07d2      	lsls	r2, r2, #31
 800293e:	4313      	orrs	r3, r2
 8002940:	0019      	movs	r1, r3
 8002942:	b005      	add	sp, #20
 8002944:	bcf0      	pop	{r4, r5, r6, r7}
 8002946:	46bb      	mov	fp, r7
 8002948:	46b2      	mov	sl, r6
 800294a:	46a9      	mov	r9, r5
 800294c:	46a0      	mov	r8, r4
 800294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002950:	4652      	mov	r2, sl
 8002952:	4302      	orrs	r2, r0
 8002954:	4690      	mov	r8, r2
 8002956:	d000      	beq.n	800295a <__aeabi_dmul+0xe2>
 8002958:	e1ac      	b.n	8002cb4 <__aeabi_dmul+0x43c>
 800295a:	469b      	mov	fp, r3
 800295c:	2302      	movs	r3, #2
 800295e:	4692      	mov	sl, r2
 8002960:	2508      	movs	r5, #8
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	e7ae      	b.n	80028c4 <__aeabi_dmul+0x4c>
 8002966:	9b00      	ldr	r3, [sp, #0]
 8002968:	46a2      	mov	sl, r4
 800296a:	4699      	mov	r9, r3
 800296c:	9b01      	ldr	r3, [sp, #4]
 800296e:	4698      	mov	r8, r3
 8002970:	9b02      	ldr	r3, [sp, #8]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d100      	bne.n	8002978 <__aeabi_dmul+0x100>
 8002976:	e1ca      	b.n	8002d0e <__aeabi_dmul+0x496>
 8002978:	2b03      	cmp	r3, #3
 800297a:	d100      	bne.n	800297e <__aeabi_dmul+0x106>
 800297c:	e192      	b.n	8002ca4 <__aeabi_dmul+0x42c>
 800297e:	2b01      	cmp	r3, #1
 8002980:	d110      	bne.n	80029a4 <__aeabi_dmul+0x12c>
 8002982:	2300      	movs	r3, #0
 8002984:	2400      	movs	r4, #0
 8002986:	2200      	movs	r2, #0
 8002988:	e7d4      	b.n	8002934 <__aeabi_dmul+0xbc>
 800298a:	2201      	movs	r2, #1
 800298c:	087b      	lsrs	r3, r7, #1
 800298e:	403a      	ands	r2, r7
 8002990:	4313      	orrs	r3, r2
 8002992:	4652      	mov	r2, sl
 8002994:	07d2      	lsls	r2, r2, #31
 8002996:	4313      	orrs	r3, r2
 8002998:	4698      	mov	r8, r3
 800299a:	4653      	mov	r3, sl
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	469a      	mov	sl, r3
 80029a0:	9b03      	ldr	r3, [sp, #12]
 80029a2:	4699      	mov	r9, r3
 80029a4:	465b      	mov	r3, fp
 80029a6:	1c58      	adds	r0, r3, #1
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	445b      	add	r3, fp
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dc00      	bgt.n	80029b4 <__aeabi_dmul+0x13c>
 80029b2:	e1b1      	b.n	8002d18 <__aeabi_dmul+0x4a0>
 80029b4:	4642      	mov	r2, r8
 80029b6:	0752      	lsls	r2, r2, #29
 80029b8:	d00b      	beq.n	80029d2 <__aeabi_dmul+0x15a>
 80029ba:	220f      	movs	r2, #15
 80029bc:	4641      	mov	r1, r8
 80029be:	400a      	ands	r2, r1
 80029c0:	2a04      	cmp	r2, #4
 80029c2:	d006      	beq.n	80029d2 <__aeabi_dmul+0x15a>
 80029c4:	4642      	mov	r2, r8
 80029c6:	1d11      	adds	r1, r2, #4
 80029c8:	4541      	cmp	r1, r8
 80029ca:	4192      	sbcs	r2, r2
 80029cc:	4688      	mov	r8, r1
 80029ce:	4252      	negs	r2, r2
 80029d0:	4492      	add	sl, r2
 80029d2:	4652      	mov	r2, sl
 80029d4:	01d2      	lsls	r2, r2, #7
 80029d6:	d506      	bpl.n	80029e6 <__aeabi_dmul+0x16e>
 80029d8:	4652      	mov	r2, sl
 80029da:	4b80      	ldr	r3, [pc, #512]	@ (8002bdc <__aeabi_dmul+0x364>)
 80029dc:	401a      	ands	r2, r3
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	4692      	mov	sl, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	18c3      	adds	r3, r0, r3
 80029e6:	4a7e      	ldr	r2, [pc, #504]	@ (8002be0 <__aeabi_dmul+0x368>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	dd00      	ble.n	80029ee <__aeabi_dmul+0x176>
 80029ec:	e18f      	b.n	8002d0e <__aeabi_dmul+0x496>
 80029ee:	4642      	mov	r2, r8
 80029f0:	08d1      	lsrs	r1, r2, #3
 80029f2:	4652      	mov	r2, sl
 80029f4:	0752      	lsls	r2, r2, #29
 80029f6:	430a      	orrs	r2, r1
 80029f8:	4651      	mov	r1, sl
 80029fa:	055b      	lsls	r3, r3, #21
 80029fc:	024c      	lsls	r4, r1, #9
 80029fe:	0b24      	lsrs	r4, r4, #12
 8002a00:	0d5b      	lsrs	r3, r3, #21
 8002a02:	e797      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002a04:	4b73      	ldr	r3, [pc, #460]	@ (8002bd4 <__aeabi_dmul+0x35c>)
 8002a06:	4326      	orrs	r6, r4
 8002a08:	469c      	mov	ip, r3
 8002a0a:	44e3      	add	fp, ip
 8002a0c:	2e00      	cmp	r6, #0
 8002a0e:	d100      	bne.n	8002a12 <__aeabi_dmul+0x19a>
 8002a10:	e16f      	b.n	8002cf2 <__aeabi_dmul+0x47a>
 8002a12:	2303      	movs	r3, #3
 8002a14:	4649      	mov	r1, r9
 8002a16:	431d      	orrs	r5, r3
 8002a18:	9b00      	ldr	r3, [sp, #0]
 8002a1a:	4059      	eors	r1, r3
 8002a1c:	b2cb      	uxtb	r3, r1
 8002a1e:	9303      	str	r3, [sp, #12]
 8002a20:	2d0a      	cmp	r5, #10
 8002a22:	dd00      	ble.n	8002a26 <__aeabi_dmul+0x1ae>
 8002a24:	e133      	b.n	8002c8e <__aeabi_dmul+0x416>
 8002a26:	2301      	movs	r3, #1
 8002a28:	40ab      	lsls	r3, r5
 8002a2a:	001d      	movs	r5, r3
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	9302      	str	r3, [sp, #8]
 8002a30:	2288      	movs	r2, #136	@ 0x88
 8002a32:	422a      	tst	r2, r5
 8002a34:	d197      	bne.n	8002966 <__aeabi_dmul+0xee>
 8002a36:	4642      	mov	r2, r8
 8002a38:	4643      	mov	r3, r8
 8002a3a:	0412      	lsls	r2, r2, #16
 8002a3c:	0c12      	lsrs	r2, r2, #16
 8002a3e:	0016      	movs	r6, r2
 8002a40:	9801      	ldr	r0, [sp, #4]
 8002a42:	0c1d      	lsrs	r5, r3, #16
 8002a44:	0c03      	lsrs	r3, r0, #16
 8002a46:	0400      	lsls	r0, r0, #16
 8002a48:	0c00      	lsrs	r0, r0, #16
 8002a4a:	4346      	muls	r6, r0
 8002a4c:	46b4      	mov	ip, r6
 8002a4e:	001e      	movs	r6, r3
 8002a50:	436e      	muls	r6, r5
 8002a52:	9600      	str	r6, [sp, #0]
 8002a54:	0016      	movs	r6, r2
 8002a56:	0007      	movs	r7, r0
 8002a58:	435e      	muls	r6, r3
 8002a5a:	4661      	mov	r1, ip
 8002a5c:	46b0      	mov	r8, r6
 8002a5e:	436f      	muls	r7, r5
 8002a60:	0c0e      	lsrs	r6, r1, #16
 8002a62:	44b8      	add	r8, r7
 8002a64:	4446      	add	r6, r8
 8002a66:	42b7      	cmp	r7, r6
 8002a68:	d905      	bls.n	8002a76 <__aeabi_dmul+0x1fe>
 8002a6a:	2180      	movs	r1, #128	@ 0x80
 8002a6c:	0249      	lsls	r1, r1, #9
 8002a6e:	4688      	mov	r8, r1
 8002a70:	9f00      	ldr	r7, [sp, #0]
 8002a72:	4447      	add	r7, r8
 8002a74:	9700      	str	r7, [sp, #0]
 8002a76:	4661      	mov	r1, ip
 8002a78:	0409      	lsls	r1, r1, #16
 8002a7a:	0c09      	lsrs	r1, r1, #16
 8002a7c:	0c37      	lsrs	r7, r6, #16
 8002a7e:	0436      	lsls	r6, r6, #16
 8002a80:	468c      	mov	ip, r1
 8002a82:	0031      	movs	r1, r6
 8002a84:	4461      	add	r1, ip
 8002a86:	9101      	str	r1, [sp, #4]
 8002a88:	0011      	movs	r1, r2
 8002a8a:	0c26      	lsrs	r6, r4, #16
 8002a8c:	0424      	lsls	r4, r4, #16
 8002a8e:	0c24      	lsrs	r4, r4, #16
 8002a90:	4361      	muls	r1, r4
 8002a92:	468c      	mov	ip, r1
 8002a94:	0021      	movs	r1, r4
 8002a96:	4369      	muls	r1, r5
 8002a98:	4689      	mov	r9, r1
 8002a9a:	4661      	mov	r1, ip
 8002a9c:	0c09      	lsrs	r1, r1, #16
 8002a9e:	4688      	mov	r8, r1
 8002aa0:	4372      	muls	r2, r6
 8002aa2:	444a      	add	r2, r9
 8002aa4:	4442      	add	r2, r8
 8002aa6:	4375      	muls	r5, r6
 8002aa8:	4591      	cmp	r9, r2
 8002aaa:	d903      	bls.n	8002ab4 <__aeabi_dmul+0x23c>
 8002aac:	2180      	movs	r1, #128	@ 0x80
 8002aae:	0249      	lsls	r1, r1, #9
 8002ab0:	4688      	mov	r8, r1
 8002ab2:	4445      	add	r5, r8
 8002ab4:	0c11      	lsrs	r1, r2, #16
 8002ab6:	4688      	mov	r8, r1
 8002ab8:	4661      	mov	r1, ip
 8002aba:	0409      	lsls	r1, r1, #16
 8002abc:	0c09      	lsrs	r1, r1, #16
 8002abe:	468c      	mov	ip, r1
 8002ac0:	0412      	lsls	r2, r2, #16
 8002ac2:	4462      	add	r2, ip
 8002ac4:	18b9      	adds	r1, r7, r2
 8002ac6:	9102      	str	r1, [sp, #8]
 8002ac8:	4651      	mov	r1, sl
 8002aca:	0c09      	lsrs	r1, r1, #16
 8002acc:	468c      	mov	ip, r1
 8002ace:	4651      	mov	r1, sl
 8002ad0:	040f      	lsls	r7, r1, #16
 8002ad2:	0c3f      	lsrs	r7, r7, #16
 8002ad4:	0039      	movs	r1, r7
 8002ad6:	4341      	muls	r1, r0
 8002ad8:	4445      	add	r5, r8
 8002ada:	4688      	mov	r8, r1
 8002adc:	4661      	mov	r1, ip
 8002ade:	4341      	muls	r1, r0
 8002ae0:	468a      	mov	sl, r1
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	4660      	mov	r0, ip
 8002ae6:	0c09      	lsrs	r1, r1, #16
 8002ae8:	4689      	mov	r9, r1
 8002aea:	4358      	muls	r0, r3
 8002aec:	437b      	muls	r3, r7
 8002aee:	4453      	add	r3, sl
 8002af0:	444b      	add	r3, r9
 8002af2:	459a      	cmp	sl, r3
 8002af4:	d903      	bls.n	8002afe <__aeabi_dmul+0x286>
 8002af6:	2180      	movs	r1, #128	@ 0x80
 8002af8:	0249      	lsls	r1, r1, #9
 8002afa:	4689      	mov	r9, r1
 8002afc:	4448      	add	r0, r9
 8002afe:	0c19      	lsrs	r1, r3, #16
 8002b00:	4689      	mov	r9, r1
 8002b02:	4641      	mov	r1, r8
 8002b04:	0409      	lsls	r1, r1, #16
 8002b06:	0c09      	lsrs	r1, r1, #16
 8002b08:	4688      	mov	r8, r1
 8002b0a:	0039      	movs	r1, r7
 8002b0c:	4361      	muls	r1, r4
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	4443      	add	r3, r8
 8002b12:	4688      	mov	r8, r1
 8002b14:	4661      	mov	r1, ip
 8002b16:	434c      	muls	r4, r1
 8002b18:	4371      	muls	r1, r6
 8002b1a:	468c      	mov	ip, r1
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	4377      	muls	r7, r6
 8002b20:	0c0e      	lsrs	r6, r1, #16
 8002b22:	193f      	adds	r7, r7, r4
 8002b24:	19f6      	adds	r6, r6, r7
 8002b26:	4448      	add	r0, r9
 8002b28:	42b4      	cmp	r4, r6
 8002b2a:	d903      	bls.n	8002b34 <__aeabi_dmul+0x2bc>
 8002b2c:	2180      	movs	r1, #128	@ 0x80
 8002b2e:	0249      	lsls	r1, r1, #9
 8002b30:	4689      	mov	r9, r1
 8002b32:	44cc      	add	ip, r9
 8002b34:	9902      	ldr	r1, [sp, #8]
 8002b36:	9f00      	ldr	r7, [sp, #0]
 8002b38:	4689      	mov	r9, r1
 8002b3a:	0431      	lsls	r1, r6, #16
 8002b3c:	444f      	add	r7, r9
 8002b3e:	4689      	mov	r9, r1
 8002b40:	4641      	mov	r1, r8
 8002b42:	4297      	cmp	r7, r2
 8002b44:	4192      	sbcs	r2, r2
 8002b46:	040c      	lsls	r4, r1, #16
 8002b48:	0c24      	lsrs	r4, r4, #16
 8002b4a:	444c      	add	r4, r9
 8002b4c:	18ff      	adds	r7, r7, r3
 8002b4e:	4252      	negs	r2, r2
 8002b50:	1964      	adds	r4, r4, r5
 8002b52:	18a1      	adds	r1, r4, r2
 8002b54:	429f      	cmp	r7, r3
 8002b56:	419b      	sbcs	r3, r3
 8002b58:	4688      	mov	r8, r1
 8002b5a:	4682      	mov	sl, r0
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	4699      	mov	r9, r3
 8002b60:	4590      	cmp	r8, r2
 8002b62:	4192      	sbcs	r2, r2
 8002b64:	42ac      	cmp	r4, r5
 8002b66:	41a4      	sbcs	r4, r4
 8002b68:	44c2      	add	sl, r8
 8002b6a:	44d1      	add	r9, sl
 8002b6c:	4252      	negs	r2, r2
 8002b6e:	4264      	negs	r4, r4
 8002b70:	4314      	orrs	r4, r2
 8002b72:	4599      	cmp	r9, r3
 8002b74:	419b      	sbcs	r3, r3
 8002b76:	4582      	cmp	sl, r0
 8002b78:	4192      	sbcs	r2, r2
 8002b7a:	425b      	negs	r3, r3
 8002b7c:	4252      	negs	r2, r2
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	464a      	mov	r2, r9
 8002b82:	0c36      	lsrs	r6, r6, #16
 8002b84:	19a4      	adds	r4, r4, r6
 8002b86:	18e3      	adds	r3, r4, r3
 8002b88:	4463      	add	r3, ip
 8002b8a:	025b      	lsls	r3, r3, #9
 8002b8c:	0dd2      	lsrs	r2, r2, #23
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	9901      	ldr	r1, [sp, #4]
 8002b92:	4692      	mov	sl, r2
 8002b94:	027a      	lsls	r2, r7, #9
 8002b96:	430a      	orrs	r2, r1
 8002b98:	1e50      	subs	r0, r2, #1
 8002b9a:	4182      	sbcs	r2, r0
 8002b9c:	0dff      	lsrs	r7, r7, #23
 8002b9e:	4317      	orrs	r7, r2
 8002ba0:	464a      	mov	r2, r9
 8002ba2:	0252      	lsls	r2, r2, #9
 8002ba4:	4317      	orrs	r7, r2
 8002ba6:	46b8      	mov	r8, r7
 8002ba8:	01db      	lsls	r3, r3, #7
 8002baa:	d500      	bpl.n	8002bae <__aeabi_dmul+0x336>
 8002bac:	e6ed      	b.n	800298a <__aeabi_dmul+0x112>
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <__aeabi_dmul+0x36c>)
 8002bb0:	9a03      	ldr	r2, [sp, #12]
 8002bb2:	445b      	add	r3, fp
 8002bb4:	4691      	mov	r9, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	dc00      	bgt.n	8002bbc <__aeabi_dmul+0x344>
 8002bba:	e0ac      	b.n	8002d16 <__aeabi_dmul+0x49e>
 8002bbc:	003a      	movs	r2, r7
 8002bbe:	0752      	lsls	r2, r2, #29
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dmul+0x34c>
 8002bc2:	e710      	b.n	80029e6 <__aeabi_dmul+0x16e>
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	4658      	mov	r0, fp
 8002bc8:	403a      	ands	r2, r7
 8002bca:	2a04      	cmp	r2, #4
 8002bcc:	d000      	beq.n	8002bd0 <__aeabi_dmul+0x358>
 8002bce:	e6f9      	b.n	80029c4 <__aeabi_dmul+0x14c>
 8002bd0:	e709      	b.n	80029e6 <__aeabi_dmul+0x16e>
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	000007ff 	.word	0x000007ff
 8002bd8:	fffffc01 	.word	0xfffffc01
 8002bdc:	feffffff 	.word	0xfeffffff
 8002be0:	000007fe 	.word	0x000007fe
 8002be4:	000003ff 	.word	0x000003ff
 8002be8:	0022      	movs	r2, r4
 8002bea:	4332      	orrs	r2, r6
 8002bec:	d06f      	beq.n	8002cce <__aeabi_dmul+0x456>
 8002bee:	2c00      	cmp	r4, #0
 8002bf0:	d100      	bne.n	8002bf4 <__aeabi_dmul+0x37c>
 8002bf2:	e0c2      	b.n	8002d7a <__aeabi_dmul+0x502>
 8002bf4:	0020      	movs	r0, r4
 8002bf6:	f000 fea9 	bl	800394c <__clzsi2>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	3a0b      	subs	r2, #11
 8002c00:	201d      	movs	r0, #29
 8002c02:	1a82      	subs	r2, r0, r2
 8002c04:	0030      	movs	r0, r6
 8002c06:	0019      	movs	r1, r3
 8002c08:	40d0      	lsrs	r0, r2
 8002c0a:	3908      	subs	r1, #8
 8002c0c:	408c      	lsls	r4, r1
 8002c0e:	0002      	movs	r2, r0
 8002c10:	4322      	orrs	r2, r4
 8002c12:	0034      	movs	r4, r6
 8002c14:	408c      	lsls	r4, r1
 8002c16:	4659      	mov	r1, fp
 8002c18:	1acb      	subs	r3, r1, r3
 8002c1a:	4986      	ldr	r1, [pc, #536]	@ (8002e34 <__aeabi_dmul+0x5bc>)
 8002c1c:	468b      	mov	fp, r1
 8002c1e:	449b      	add	fp, r3
 8002c20:	2d0a      	cmp	r5, #10
 8002c22:	dd00      	ble.n	8002c26 <__aeabi_dmul+0x3ae>
 8002c24:	e6a4      	b.n	8002970 <__aeabi_dmul+0xf8>
 8002c26:	4649      	mov	r1, r9
 8002c28:	9b00      	ldr	r3, [sp, #0]
 8002c2a:	9401      	str	r4, [sp, #4]
 8002c2c:	4059      	eors	r1, r3
 8002c2e:	b2cb      	uxtb	r3, r1
 8002c30:	0014      	movs	r4, r2
 8002c32:	2000      	movs	r0, #0
 8002c34:	9303      	str	r3, [sp, #12]
 8002c36:	2d02      	cmp	r5, #2
 8002c38:	dd00      	ble.n	8002c3c <__aeabi_dmul+0x3c4>
 8002c3a:	e667      	b.n	800290c <__aeabi_dmul+0x94>
 8002c3c:	e6fb      	b.n	8002a36 <__aeabi_dmul+0x1be>
 8002c3e:	4653      	mov	r3, sl
 8002c40:	4303      	orrs	r3, r0
 8002c42:	4698      	mov	r8, r3
 8002c44:	d03c      	beq.n	8002cc0 <__aeabi_dmul+0x448>
 8002c46:	4653      	mov	r3, sl
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d100      	bne.n	8002c4e <__aeabi_dmul+0x3d6>
 8002c4c:	e0a3      	b.n	8002d96 <__aeabi_dmul+0x51e>
 8002c4e:	4650      	mov	r0, sl
 8002c50:	f000 fe7c 	bl	800394c <__clzsi2>
 8002c54:	230b      	movs	r3, #11
 8002c56:	425b      	negs	r3, r3
 8002c58:	469c      	mov	ip, r3
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	4484      	add	ip, r0
 8002c5e:	0011      	movs	r1, r2
 8002c60:	4650      	mov	r0, sl
 8002c62:	3908      	subs	r1, #8
 8002c64:	4088      	lsls	r0, r1
 8002c66:	231d      	movs	r3, #29
 8002c68:	4680      	mov	r8, r0
 8002c6a:	4660      	mov	r0, ip
 8002c6c:	1a1b      	subs	r3, r3, r0
 8002c6e:	0020      	movs	r0, r4
 8002c70:	40d8      	lsrs	r0, r3
 8002c72:	0003      	movs	r3, r0
 8002c74:	4640      	mov	r0, r8
 8002c76:	4303      	orrs	r3, r0
 8002c78:	469a      	mov	sl, r3
 8002c7a:	0023      	movs	r3, r4
 8002c7c:	408b      	lsls	r3, r1
 8002c7e:	4698      	mov	r8, r3
 8002c80:	4b6c      	ldr	r3, [pc, #432]	@ (8002e34 <__aeabi_dmul+0x5bc>)
 8002c82:	2500      	movs	r5, #0
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	469b      	mov	fp, r3
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9302      	str	r3, [sp, #8]
 8002c8c:	e61a      	b.n	80028c4 <__aeabi_dmul+0x4c>
 8002c8e:	2d0f      	cmp	r5, #15
 8002c90:	d000      	beq.n	8002c94 <__aeabi_dmul+0x41c>
 8002c92:	e0c9      	b.n	8002e28 <__aeabi_dmul+0x5b0>
 8002c94:	2380      	movs	r3, #128	@ 0x80
 8002c96:	4652      	mov	r2, sl
 8002c98:	031b      	lsls	r3, r3, #12
 8002c9a:	421a      	tst	r2, r3
 8002c9c:	d002      	beq.n	8002ca4 <__aeabi_dmul+0x42c>
 8002c9e:	421c      	tst	r4, r3
 8002ca0:	d100      	bne.n	8002ca4 <__aeabi_dmul+0x42c>
 8002ca2:	e092      	b.n	8002dca <__aeabi_dmul+0x552>
 8002ca4:	2480      	movs	r4, #128	@ 0x80
 8002ca6:	4653      	mov	r3, sl
 8002ca8:	0324      	lsls	r4, r4, #12
 8002caa:	431c      	orrs	r4, r3
 8002cac:	0324      	lsls	r4, r4, #12
 8002cae:	4642      	mov	r2, r8
 8002cb0:	0b24      	lsrs	r4, r4, #12
 8002cb2:	e63e      	b.n	8002932 <__aeabi_dmul+0xba>
 8002cb4:	469b      	mov	fp, r3
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	4680      	mov	r8, r0
 8002cba:	250c      	movs	r5, #12
 8002cbc:	9302      	str	r3, [sp, #8]
 8002cbe:	e601      	b.n	80028c4 <__aeabi_dmul+0x4c>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	469a      	mov	sl, r3
 8002cc4:	469b      	mov	fp, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	2504      	movs	r5, #4
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	e5fa      	b.n	80028c4 <__aeabi_dmul+0x4c>
 8002cce:	2101      	movs	r1, #1
 8002cd0:	430d      	orrs	r5, r1
 8002cd2:	2d0a      	cmp	r5, #10
 8002cd4:	dd00      	ble.n	8002cd8 <__aeabi_dmul+0x460>
 8002cd6:	e64b      	b.n	8002970 <__aeabi_dmul+0xf8>
 8002cd8:	4649      	mov	r1, r9
 8002cda:	9800      	ldr	r0, [sp, #0]
 8002cdc:	4041      	eors	r1, r0
 8002cde:	b2c9      	uxtb	r1, r1
 8002ce0:	9103      	str	r1, [sp, #12]
 8002ce2:	2d02      	cmp	r5, #2
 8002ce4:	dc00      	bgt.n	8002ce8 <__aeabi_dmul+0x470>
 8002ce6:	e096      	b.n	8002e16 <__aeabi_dmul+0x59e>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2400      	movs	r4, #0
 8002cec:	2001      	movs	r0, #1
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	e60c      	b.n	800290c <__aeabi_dmul+0x94>
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	9a00      	ldr	r2, [sp, #0]
 8002cf8:	432b      	orrs	r3, r5
 8002cfa:	4051      	eors	r1, r2
 8002cfc:	b2ca      	uxtb	r2, r1
 8002cfe:	9203      	str	r2, [sp, #12]
 8002d00:	2b0a      	cmp	r3, #10
 8002d02:	dd00      	ble.n	8002d06 <__aeabi_dmul+0x48e>
 8002d04:	e634      	b.n	8002970 <__aeabi_dmul+0xf8>
 8002d06:	2d00      	cmp	r5, #0
 8002d08:	d157      	bne.n	8002dba <__aeabi_dmul+0x542>
 8002d0a:	9b03      	ldr	r3, [sp, #12]
 8002d0c:	4699      	mov	r9, r3
 8002d0e:	2400      	movs	r4, #0
 8002d10:	2200      	movs	r2, #0
 8002d12:	4b49      	ldr	r3, [pc, #292]	@ (8002e38 <__aeabi_dmul+0x5c0>)
 8002d14:	e60e      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002d16:	4658      	mov	r0, fp
 8002d18:	2101      	movs	r1, #1
 8002d1a:	1ac9      	subs	r1, r1, r3
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dmul+0x4aa>
 8002d20:	e62f      	b.n	8002982 <__aeabi_dmul+0x10a>
 8002d22:	291f      	cmp	r1, #31
 8002d24:	dd56      	ble.n	8002dd4 <__aeabi_dmul+0x55c>
 8002d26:	221f      	movs	r2, #31
 8002d28:	4654      	mov	r4, sl
 8002d2a:	4252      	negs	r2, r2
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	40dc      	lsrs	r4, r3
 8002d30:	2920      	cmp	r1, #32
 8002d32:	d007      	beq.n	8002d44 <__aeabi_dmul+0x4cc>
 8002d34:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <__aeabi_dmul+0x5c4>)
 8002d36:	4642      	mov	r2, r8
 8002d38:	469c      	mov	ip, r3
 8002d3a:	4653      	mov	r3, sl
 8002d3c:	4460      	add	r0, ip
 8002d3e:	4083      	lsls	r3, r0
 8002d40:	431a      	orrs	r2, r3
 8002d42:	4690      	mov	r8, r2
 8002d44:	4642      	mov	r2, r8
 8002d46:	2107      	movs	r1, #7
 8002d48:	1e53      	subs	r3, r2, #1
 8002d4a:	419a      	sbcs	r2, r3
 8002d4c:	000b      	movs	r3, r1
 8002d4e:	4322      	orrs	r2, r4
 8002d50:	4013      	ands	r3, r2
 8002d52:	2400      	movs	r4, #0
 8002d54:	4211      	tst	r1, r2
 8002d56:	d009      	beq.n	8002d6c <__aeabi_dmul+0x4f4>
 8002d58:	230f      	movs	r3, #15
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d05d      	beq.n	8002e1c <__aeabi_dmul+0x5a4>
 8002d60:	1d11      	adds	r1, r2, #4
 8002d62:	4291      	cmp	r1, r2
 8002d64:	419b      	sbcs	r3, r3
 8002d66:	000a      	movs	r2, r1
 8002d68:	425b      	negs	r3, r3
 8002d6a:	075b      	lsls	r3, r3, #29
 8002d6c:	08d2      	lsrs	r2, r2, #3
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	2300      	movs	r3, #0
 8002d72:	e5df      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002d74:	9b03      	ldr	r3, [sp, #12]
 8002d76:	4699      	mov	r9, r3
 8002d78:	e5fa      	b.n	8002970 <__aeabi_dmul+0xf8>
 8002d7a:	9801      	ldr	r0, [sp, #4]
 8002d7c:	f000 fde6 	bl	800394c <__clzsi2>
 8002d80:	0002      	movs	r2, r0
 8002d82:	0003      	movs	r3, r0
 8002d84:	3215      	adds	r2, #21
 8002d86:	3320      	adds	r3, #32
 8002d88:	2a1c      	cmp	r2, #28
 8002d8a:	dc00      	bgt.n	8002d8e <__aeabi_dmul+0x516>
 8002d8c:	e738      	b.n	8002c00 <__aeabi_dmul+0x388>
 8002d8e:	9a01      	ldr	r2, [sp, #4]
 8002d90:	3808      	subs	r0, #8
 8002d92:	4082      	lsls	r2, r0
 8002d94:	e73f      	b.n	8002c16 <__aeabi_dmul+0x39e>
 8002d96:	f000 fdd9 	bl	800394c <__clzsi2>
 8002d9a:	2315      	movs	r3, #21
 8002d9c:	469c      	mov	ip, r3
 8002d9e:	4484      	add	ip, r0
 8002da0:	0002      	movs	r2, r0
 8002da2:	4663      	mov	r3, ip
 8002da4:	3220      	adds	r2, #32
 8002da6:	2b1c      	cmp	r3, #28
 8002da8:	dc00      	bgt.n	8002dac <__aeabi_dmul+0x534>
 8002daa:	e758      	b.n	8002c5e <__aeabi_dmul+0x3e6>
 8002dac:	2300      	movs	r3, #0
 8002dae:	4698      	mov	r8, r3
 8002db0:	0023      	movs	r3, r4
 8002db2:	3808      	subs	r0, #8
 8002db4:	4083      	lsls	r3, r0
 8002db6:	469a      	mov	sl, r3
 8002db8:	e762      	b.n	8002c80 <__aeabi_dmul+0x408>
 8002dba:	001d      	movs	r5, r3
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2400      	movs	r4, #0
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	e5a2      	b.n	800290c <__aeabi_dmul+0x94>
 8002dc6:	9002      	str	r0, [sp, #8]
 8002dc8:	e632      	b.n	8002a30 <__aeabi_dmul+0x1b8>
 8002dca:	431c      	orrs	r4, r3
 8002dcc:	9b00      	ldr	r3, [sp, #0]
 8002dce:	9a01      	ldr	r2, [sp, #4]
 8002dd0:	4699      	mov	r9, r3
 8002dd2:	e5ae      	b.n	8002932 <__aeabi_dmul+0xba>
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e40 <__aeabi_dmul+0x5c8>)
 8002dd6:	4652      	mov	r2, sl
 8002dd8:	18c3      	adds	r3, r0, r3
 8002dda:	4640      	mov	r0, r8
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	40c8      	lsrs	r0, r1
 8002de0:	4302      	orrs	r2, r0
 8002de2:	4640      	mov	r0, r8
 8002de4:	4098      	lsls	r0, r3
 8002de6:	0003      	movs	r3, r0
 8002de8:	1e58      	subs	r0, r3, #1
 8002dea:	4183      	sbcs	r3, r0
 8002dec:	4654      	mov	r4, sl
 8002dee:	431a      	orrs	r2, r3
 8002df0:	40cc      	lsrs	r4, r1
 8002df2:	0753      	lsls	r3, r2, #29
 8002df4:	d009      	beq.n	8002e0a <__aeabi_dmul+0x592>
 8002df6:	230f      	movs	r3, #15
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d005      	beq.n	8002e0a <__aeabi_dmul+0x592>
 8002dfe:	1d13      	adds	r3, r2, #4
 8002e00:	4293      	cmp	r3, r2
 8002e02:	4192      	sbcs	r2, r2
 8002e04:	4252      	negs	r2, r2
 8002e06:	18a4      	adds	r4, r4, r2
 8002e08:	001a      	movs	r2, r3
 8002e0a:	0223      	lsls	r3, r4, #8
 8002e0c:	d508      	bpl.n	8002e20 <__aeabi_dmul+0x5a8>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	2400      	movs	r4, #0
 8002e12:	2200      	movs	r2, #0
 8002e14:	e58e      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002e16:	4689      	mov	r9, r1
 8002e18:	2400      	movs	r4, #0
 8002e1a:	e58b      	b.n	8002934 <__aeabi_dmul+0xbc>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e7a5      	b.n	8002d6c <__aeabi_dmul+0x4f4>
 8002e20:	0763      	lsls	r3, r4, #29
 8002e22:	0264      	lsls	r4, r4, #9
 8002e24:	0b24      	lsrs	r4, r4, #12
 8002e26:	e7a1      	b.n	8002d6c <__aeabi_dmul+0x4f4>
 8002e28:	9b00      	ldr	r3, [sp, #0]
 8002e2a:	46a2      	mov	sl, r4
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	9b01      	ldr	r3, [sp, #4]
 8002e30:	4698      	mov	r8, r3
 8002e32:	e737      	b.n	8002ca4 <__aeabi_dmul+0x42c>
 8002e34:	fffffc0d 	.word	0xfffffc0d
 8002e38:	000007ff 	.word	0x000007ff
 8002e3c:	0000043e 	.word	0x0000043e
 8002e40:	0000041e 	.word	0x0000041e

08002e44 <__aeabi_dsub>:
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	4657      	mov	r7, sl
 8002e48:	464e      	mov	r6, r9
 8002e4a:	4645      	mov	r5, r8
 8002e4c:	46de      	mov	lr, fp
 8002e4e:	b5e0      	push	{r5, r6, r7, lr}
 8002e50:	b083      	sub	sp, #12
 8002e52:	9000      	str	r0, [sp, #0]
 8002e54:	9101      	str	r1, [sp, #4]
 8002e56:	030c      	lsls	r4, r1, #12
 8002e58:	004d      	lsls	r5, r1, #1
 8002e5a:	0fce      	lsrs	r6, r1, #31
 8002e5c:	0a61      	lsrs	r1, r4, #9
 8002e5e:	9c00      	ldr	r4, [sp, #0]
 8002e60:	005f      	lsls	r7, r3, #1
 8002e62:	0f64      	lsrs	r4, r4, #29
 8002e64:	430c      	orrs	r4, r1
 8002e66:	9900      	ldr	r1, [sp, #0]
 8002e68:	9200      	str	r2, [sp, #0]
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	00c8      	lsls	r0, r1, #3
 8002e6e:	0319      	lsls	r1, r3, #12
 8002e70:	0d7b      	lsrs	r3, r7, #21
 8002e72:	4699      	mov	r9, r3
 8002e74:	9b01      	ldr	r3, [sp, #4]
 8002e76:	4fcc      	ldr	r7, [pc, #816]	@ (80031a8 <__aeabi_dsub+0x364>)
 8002e78:	0fdb      	lsrs	r3, r3, #31
 8002e7a:	469c      	mov	ip, r3
 8002e7c:	0a4b      	lsrs	r3, r1, #9
 8002e7e:	9900      	ldr	r1, [sp, #0]
 8002e80:	4680      	mov	r8, r0
 8002e82:	0f49      	lsrs	r1, r1, #29
 8002e84:	4319      	orrs	r1, r3
 8002e86:	9b00      	ldr	r3, [sp, #0]
 8002e88:	468b      	mov	fp, r1
 8002e8a:	00da      	lsls	r2, r3, #3
 8002e8c:	4692      	mov	sl, r2
 8002e8e:	0d6d      	lsrs	r5, r5, #21
 8002e90:	45b9      	cmp	r9, r7
 8002e92:	d100      	bne.n	8002e96 <__aeabi_dsub+0x52>
 8002e94:	e0bf      	b.n	8003016 <__aeabi_dsub+0x1d2>
 8002e96:	2301      	movs	r3, #1
 8002e98:	4661      	mov	r1, ip
 8002e9a:	4059      	eors	r1, r3
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	468c      	mov	ip, r1
 8002ea0:	1aeb      	subs	r3, r5, r3
 8002ea2:	428e      	cmp	r6, r1
 8002ea4:	d075      	beq.n	8002f92 <__aeabi_dsub+0x14e>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	dc00      	bgt.n	8002eac <__aeabi_dsub+0x68>
 8002eaa:	e2a3      	b.n	80033f4 <__aeabi_dsub+0x5b0>
 8002eac:	4649      	mov	r1, r9
 8002eae:	2900      	cmp	r1, #0
 8002eb0:	d100      	bne.n	8002eb4 <__aeabi_dsub+0x70>
 8002eb2:	e0ce      	b.n	8003052 <__aeabi_dsub+0x20e>
 8002eb4:	42bd      	cmp	r5, r7
 8002eb6:	d100      	bne.n	8002eba <__aeabi_dsub+0x76>
 8002eb8:	e200      	b.n	80032bc <__aeabi_dsub+0x478>
 8002eba:	2701      	movs	r7, #1
 8002ebc:	2b38      	cmp	r3, #56	@ 0x38
 8002ebe:	dc19      	bgt.n	8002ef4 <__aeabi_dsub+0xb0>
 8002ec0:	2780      	movs	r7, #128	@ 0x80
 8002ec2:	4659      	mov	r1, fp
 8002ec4:	043f      	lsls	r7, r7, #16
 8002ec6:	4339      	orrs	r1, r7
 8002ec8:	468b      	mov	fp, r1
 8002eca:	2b1f      	cmp	r3, #31
 8002ecc:	dd00      	ble.n	8002ed0 <__aeabi_dsub+0x8c>
 8002ece:	e1fa      	b.n	80032c6 <__aeabi_dsub+0x482>
 8002ed0:	2720      	movs	r7, #32
 8002ed2:	1af9      	subs	r1, r7, r3
 8002ed4:	468c      	mov	ip, r1
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	4667      	mov	r7, ip
 8002eda:	40b9      	lsls	r1, r7
 8002edc:	000f      	movs	r7, r1
 8002ede:	0011      	movs	r1, r2
 8002ee0:	40d9      	lsrs	r1, r3
 8002ee2:	430f      	orrs	r7, r1
 8002ee4:	4661      	mov	r1, ip
 8002ee6:	408a      	lsls	r2, r1
 8002ee8:	1e51      	subs	r1, r2, #1
 8002eea:	418a      	sbcs	r2, r1
 8002eec:	4659      	mov	r1, fp
 8002eee:	40d9      	lsrs	r1, r3
 8002ef0:	4317      	orrs	r7, r2
 8002ef2:	1a64      	subs	r4, r4, r1
 8002ef4:	1bc7      	subs	r7, r0, r7
 8002ef6:	42b8      	cmp	r0, r7
 8002ef8:	4180      	sbcs	r0, r0
 8002efa:	4240      	negs	r0, r0
 8002efc:	1a24      	subs	r4, r4, r0
 8002efe:	0223      	lsls	r3, r4, #8
 8002f00:	d400      	bmi.n	8002f04 <__aeabi_dsub+0xc0>
 8002f02:	e140      	b.n	8003186 <__aeabi_dsub+0x342>
 8002f04:	0264      	lsls	r4, r4, #9
 8002f06:	0a64      	lsrs	r4, r4, #9
 8002f08:	2c00      	cmp	r4, #0
 8002f0a:	d100      	bne.n	8002f0e <__aeabi_dsub+0xca>
 8002f0c:	e154      	b.n	80031b8 <__aeabi_dsub+0x374>
 8002f0e:	0020      	movs	r0, r4
 8002f10:	f000 fd1c 	bl	800394c <__clzsi2>
 8002f14:	0003      	movs	r3, r0
 8002f16:	3b08      	subs	r3, #8
 8002f18:	2120      	movs	r1, #32
 8002f1a:	0038      	movs	r0, r7
 8002f1c:	1aca      	subs	r2, r1, r3
 8002f1e:	40d0      	lsrs	r0, r2
 8002f20:	409c      	lsls	r4, r3
 8002f22:	0002      	movs	r2, r0
 8002f24:	409f      	lsls	r7, r3
 8002f26:	4322      	orrs	r2, r4
 8002f28:	429d      	cmp	r5, r3
 8002f2a:	dd00      	ble.n	8002f2e <__aeabi_dsub+0xea>
 8002f2c:	e1a6      	b.n	800327c <__aeabi_dsub+0x438>
 8002f2e:	1b58      	subs	r0, r3, r5
 8002f30:	3001      	adds	r0, #1
 8002f32:	1a09      	subs	r1, r1, r0
 8002f34:	003c      	movs	r4, r7
 8002f36:	408f      	lsls	r7, r1
 8002f38:	40c4      	lsrs	r4, r0
 8002f3a:	1e7b      	subs	r3, r7, #1
 8002f3c:	419f      	sbcs	r7, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	408b      	lsls	r3, r1
 8002f42:	4327      	orrs	r7, r4
 8002f44:	431f      	orrs	r7, r3
 8002f46:	40c2      	lsrs	r2, r0
 8002f48:	003b      	movs	r3, r7
 8002f4a:	0014      	movs	r4, r2
 8002f4c:	2500      	movs	r5, #0
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	d100      	bne.n	8002f54 <__aeabi_dsub+0x110>
 8002f52:	e1f7      	b.n	8003344 <__aeabi_dsub+0x500>
 8002f54:	077b      	lsls	r3, r7, #29
 8002f56:	d100      	bne.n	8002f5a <__aeabi_dsub+0x116>
 8002f58:	e377      	b.n	800364a <__aeabi_dsub+0x806>
 8002f5a:	230f      	movs	r3, #15
 8002f5c:	0038      	movs	r0, r7
 8002f5e:	403b      	ands	r3, r7
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d004      	beq.n	8002f6e <__aeabi_dsub+0x12a>
 8002f64:	1d38      	adds	r0, r7, #4
 8002f66:	42b8      	cmp	r0, r7
 8002f68:	41bf      	sbcs	r7, r7
 8002f6a:	427f      	negs	r7, r7
 8002f6c:	19e4      	adds	r4, r4, r7
 8002f6e:	0223      	lsls	r3, r4, #8
 8002f70:	d400      	bmi.n	8002f74 <__aeabi_dsub+0x130>
 8002f72:	e368      	b.n	8003646 <__aeabi_dsub+0x802>
 8002f74:	4b8c      	ldr	r3, [pc, #560]	@ (80031a8 <__aeabi_dsub+0x364>)
 8002f76:	3501      	adds	r5, #1
 8002f78:	429d      	cmp	r5, r3
 8002f7a:	d100      	bne.n	8002f7e <__aeabi_dsub+0x13a>
 8002f7c:	e0f4      	b.n	8003168 <__aeabi_dsub+0x324>
 8002f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80031ac <__aeabi_dsub+0x368>)
 8002f80:	056d      	lsls	r5, r5, #21
 8002f82:	401c      	ands	r4, r3
 8002f84:	0d6d      	lsrs	r5, r5, #21
 8002f86:	0767      	lsls	r7, r4, #29
 8002f88:	08c0      	lsrs	r0, r0, #3
 8002f8a:	0264      	lsls	r4, r4, #9
 8002f8c:	4307      	orrs	r7, r0
 8002f8e:	0b24      	lsrs	r4, r4, #12
 8002f90:	e0ec      	b.n	800316c <__aeabi_dsub+0x328>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	dc00      	bgt.n	8002f98 <__aeabi_dsub+0x154>
 8002f96:	e329      	b.n	80035ec <__aeabi_dsub+0x7a8>
 8002f98:	4649      	mov	r1, r9
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d000      	beq.n	8002fa0 <__aeabi_dsub+0x15c>
 8002f9e:	e0d6      	b.n	800314e <__aeabi_dsub+0x30a>
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	d100      	bne.n	8002fa8 <__aeabi_dsub+0x164>
 8002fa6:	e12e      	b.n	8003206 <__aeabi_dsub+0x3c2>
 8002fa8:	1e59      	subs	r1, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d100      	bne.n	8002fb0 <__aeabi_dsub+0x16c>
 8002fae:	e1e6      	b.n	800337e <__aeabi_dsub+0x53a>
 8002fb0:	42bb      	cmp	r3, r7
 8002fb2:	d100      	bne.n	8002fb6 <__aeabi_dsub+0x172>
 8002fb4:	e182      	b.n	80032bc <__aeabi_dsub+0x478>
 8002fb6:	2701      	movs	r7, #1
 8002fb8:	000b      	movs	r3, r1
 8002fba:	2938      	cmp	r1, #56	@ 0x38
 8002fbc:	dc14      	bgt.n	8002fe8 <__aeabi_dsub+0x1a4>
 8002fbe:	2b1f      	cmp	r3, #31
 8002fc0:	dd00      	ble.n	8002fc4 <__aeabi_dsub+0x180>
 8002fc2:	e23c      	b.n	800343e <__aeabi_dsub+0x5fa>
 8002fc4:	2720      	movs	r7, #32
 8002fc6:	1af9      	subs	r1, r7, r3
 8002fc8:	468c      	mov	ip, r1
 8002fca:	4659      	mov	r1, fp
 8002fcc:	4667      	mov	r7, ip
 8002fce:	40b9      	lsls	r1, r7
 8002fd0:	000f      	movs	r7, r1
 8002fd2:	0011      	movs	r1, r2
 8002fd4:	40d9      	lsrs	r1, r3
 8002fd6:	430f      	orrs	r7, r1
 8002fd8:	4661      	mov	r1, ip
 8002fda:	408a      	lsls	r2, r1
 8002fdc:	1e51      	subs	r1, r2, #1
 8002fde:	418a      	sbcs	r2, r1
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	40d9      	lsrs	r1, r3
 8002fe4:	4317      	orrs	r7, r2
 8002fe6:	1864      	adds	r4, r4, r1
 8002fe8:	183f      	adds	r7, r7, r0
 8002fea:	4287      	cmp	r7, r0
 8002fec:	4180      	sbcs	r0, r0
 8002fee:	4240      	negs	r0, r0
 8002ff0:	1824      	adds	r4, r4, r0
 8002ff2:	0223      	lsls	r3, r4, #8
 8002ff4:	d400      	bmi.n	8002ff8 <__aeabi_dsub+0x1b4>
 8002ff6:	e0c6      	b.n	8003186 <__aeabi_dsub+0x342>
 8002ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80031a8 <__aeabi_dsub+0x364>)
 8002ffa:	3501      	adds	r5, #1
 8002ffc:	429d      	cmp	r5, r3
 8002ffe:	d100      	bne.n	8003002 <__aeabi_dsub+0x1be>
 8003000:	e0b2      	b.n	8003168 <__aeabi_dsub+0x324>
 8003002:	2101      	movs	r1, #1
 8003004:	4b69      	ldr	r3, [pc, #420]	@ (80031ac <__aeabi_dsub+0x368>)
 8003006:	087a      	lsrs	r2, r7, #1
 8003008:	401c      	ands	r4, r3
 800300a:	4039      	ands	r1, r7
 800300c:	430a      	orrs	r2, r1
 800300e:	07e7      	lsls	r7, r4, #31
 8003010:	4317      	orrs	r7, r2
 8003012:	0864      	lsrs	r4, r4, #1
 8003014:	e79e      	b.n	8002f54 <__aeabi_dsub+0x110>
 8003016:	4b66      	ldr	r3, [pc, #408]	@ (80031b0 <__aeabi_dsub+0x36c>)
 8003018:	4311      	orrs	r1, r2
 800301a:	468a      	mov	sl, r1
 800301c:	18eb      	adds	r3, r5, r3
 800301e:	2900      	cmp	r1, #0
 8003020:	d028      	beq.n	8003074 <__aeabi_dsub+0x230>
 8003022:	4566      	cmp	r6, ip
 8003024:	d02c      	beq.n	8003080 <__aeabi_dsub+0x23c>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d05b      	beq.n	80030e2 <__aeabi_dsub+0x29e>
 800302a:	2d00      	cmp	r5, #0
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x1ec>
 800302e:	e12c      	b.n	800328a <__aeabi_dsub+0x446>
 8003030:	465b      	mov	r3, fp
 8003032:	4666      	mov	r6, ip
 8003034:	075f      	lsls	r7, r3, #29
 8003036:	08d2      	lsrs	r2, r2, #3
 8003038:	4317      	orrs	r7, r2
 800303a:	08dd      	lsrs	r5, r3, #3
 800303c:	003b      	movs	r3, r7
 800303e:	432b      	orrs	r3, r5
 8003040:	d100      	bne.n	8003044 <__aeabi_dsub+0x200>
 8003042:	e0e2      	b.n	800320a <__aeabi_dsub+0x3c6>
 8003044:	2480      	movs	r4, #128	@ 0x80
 8003046:	0324      	lsls	r4, r4, #12
 8003048:	432c      	orrs	r4, r5
 800304a:	0324      	lsls	r4, r4, #12
 800304c:	4d56      	ldr	r5, [pc, #344]	@ (80031a8 <__aeabi_dsub+0x364>)
 800304e:	0b24      	lsrs	r4, r4, #12
 8003050:	e08c      	b.n	800316c <__aeabi_dsub+0x328>
 8003052:	4659      	mov	r1, fp
 8003054:	4311      	orrs	r1, r2
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x216>
 8003058:	e0d5      	b.n	8003206 <__aeabi_dsub+0x3c2>
 800305a:	1e59      	subs	r1, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d100      	bne.n	8003062 <__aeabi_dsub+0x21e>
 8003060:	e1b9      	b.n	80033d6 <__aeabi_dsub+0x592>
 8003062:	42bb      	cmp	r3, r7
 8003064:	d100      	bne.n	8003068 <__aeabi_dsub+0x224>
 8003066:	e1b1      	b.n	80033cc <__aeabi_dsub+0x588>
 8003068:	2701      	movs	r7, #1
 800306a:	000b      	movs	r3, r1
 800306c:	2938      	cmp	r1, #56	@ 0x38
 800306e:	dd00      	ble.n	8003072 <__aeabi_dsub+0x22e>
 8003070:	e740      	b.n	8002ef4 <__aeabi_dsub+0xb0>
 8003072:	e72a      	b.n	8002eca <__aeabi_dsub+0x86>
 8003074:	4661      	mov	r1, ip
 8003076:	2701      	movs	r7, #1
 8003078:	4079      	eors	r1, r7
 800307a:	468c      	mov	ip, r1
 800307c:	4566      	cmp	r6, ip
 800307e:	d1d2      	bne.n	8003026 <__aeabi_dsub+0x1e2>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d100      	bne.n	8003086 <__aeabi_dsub+0x242>
 8003084:	e0c5      	b.n	8003212 <__aeabi_dsub+0x3ce>
 8003086:	2d00      	cmp	r5, #0
 8003088:	d000      	beq.n	800308c <__aeabi_dsub+0x248>
 800308a:	e155      	b.n	8003338 <__aeabi_dsub+0x4f4>
 800308c:	464b      	mov	r3, r9
 800308e:	0025      	movs	r5, r4
 8003090:	4305      	orrs	r5, r0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x252>
 8003094:	e212      	b.n	80034bc <__aeabi_dsub+0x678>
 8003096:	1e59      	subs	r1, r3, #1
 8003098:	468c      	mov	ip, r1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d100      	bne.n	80030a0 <__aeabi_dsub+0x25c>
 800309e:	e249      	b.n	8003534 <__aeabi_dsub+0x6f0>
 80030a0:	4d41      	ldr	r5, [pc, #260]	@ (80031a8 <__aeabi_dsub+0x364>)
 80030a2:	42ab      	cmp	r3, r5
 80030a4:	d100      	bne.n	80030a8 <__aeabi_dsub+0x264>
 80030a6:	e28f      	b.n	80035c8 <__aeabi_dsub+0x784>
 80030a8:	2701      	movs	r7, #1
 80030aa:	2938      	cmp	r1, #56	@ 0x38
 80030ac:	dc11      	bgt.n	80030d2 <__aeabi_dsub+0x28e>
 80030ae:	4663      	mov	r3, ip
 80030b0:	2b1f      	cmp	r3, #31
 80030b2:	dd00      	ble.n	80030b6 <__aeabi_dsub+0x272>
 80030b4:	e25b      	b.n	800356e <__aeabi_dsub+0x72a>
 80030b6:	4661      	mov	r1, ip
 80030b8:	2320      	movs	r3, #32
 80030ba:	0027      	movs	r7, r4
 80030bc:	1a5b      	subs	r3, r3, r1
 80030be:	0005      	movs	r5, r0
 80030c0:	4098      	lsls	r0, r3
 80030c2:	409f      	lsls	r7, r3
 80030c4:	40cd      	lsrs	r5, r1
 80030c6:	1e43      	subs	r3, r0, #1
 80030c8:	4198      	sbcs	r0, r3
 80030ca:	40cc      	lsrs	r4, r1
 80030cc:	432f      	orrs	r7, r5
 80030ce:	4307      	orrs	r7, r0
 80030d0:	44a3      	add	fp, r4
 80030d2:	18bf      	adds	r7, r7, r2
 80030d4:	4297      	cmp	r7, r2
 80030d6:	4192      	sbcs	r2, r2
 80030d8:	4252      	negs	r2, r2
 80030da:	445a      	add	r2, fp
 80030dc:	0014      	movs	r4, r2
 80030de:	464d      	mov	r5, r9
 80030e0:	e787      	b.n	8002ff2 <__aeabi_dsub+0x1ae>
 80030e2:	4f34      	ldr	r7, [pc, #208]	@ (80031b4 <__aeabi_dsub+0x370>)
 80030e4:	1c6b      	adds	r3, r5, #1
 80030e6:	423b      	tst	r3, r7
 80030e8:	d000      	beq.n	80030ec <__aeabi_dsub+0x2a8>
 80030ea:	e0b6      	b.n	800325a <__aeabi_dsub+0x416>
 80030ec:	4659      	mov	r1, fp
 80030ee:	0023      	movs	r3, r4
 80030f0:	4311      	orrs	r1, r2
 80030f2:	000f      	movs	r7, r1
 80030f4:	4303      	orrs	r3, r0
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	d000      	beq.n	80030fc <__aeabi_dsub+0x2b8>
 80030fa:	e126      	b.n	800334a <__aeabi_dsub+0x506>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d100      	bne.n	8003102 <__aeabi_dsub+0x2be>
 8003100:	e1c0      	b.n	8003484 <__aeabi_dsub+0x640>
 8003102:	2900      	cmp	r1, #0
 8003104:	d100      	bne.n	8003108 <__aeabi_dsub+0x2c4>
 8003106:	e0a1      	b.n	800324c <__aeabi_dsub+0x408>
 8003108:	1a83      	subs	r3, r0, r2
 800310a:	4698      	mov	r8, r3
 800310c:	465b      	mov	r3, fp
 800310e:	4540      	cmp	r0, r8
 8003110:	41ad      	sbcs	r5, r5
 8003112:	1ae3      	subs	r3, r4, r3
 8003114:	426d      	negs	r5, r5
 8003116:	1b5b      	subs	r3, r3, r5
 8003118:	2580      	movs	r5, #128	@ 0x80
 800311a:	042d      	lsls	r5, r5, #16
 800311c:	422b      	tst	r3, r5
 800311e:	d100      	bne.n	8003122 <__aeabi_dsub+0x2de>
 8003120:	e14b      	b.n	80033ba <__aeabi_dsub+0x576>
 8003122:	465b      	mov	r3, fp
 8003124:	1a10      	subs	r0, r2, r0
 8003126:	4282      	cmp	r2, r0
 8003128:	4192      	sbcs	r2, r2
 800312a:	1b1c      	subs	r4, r3, r4
 800312c:	0007      	movs	r7, r0
 800312e:	2601      	movs	r6, #1
 8003130:	4663      	mov	r3, ip
 8003132:	4252      	negs	r2, r2
 8003134:	1aa4      	subs	r4, r4, r2
 8003136:	4327      	orrs	r7, r4
 8003138:	401e      	ands	r6, r3
 800313a:	2f00      	cmp	r7, #0
 800313c:	d100      	bne.n	8003140 <__aeabi_dsub+0x2fc>
 800313e:	e142      	b.n	80033c6 <__aeabi_dsub+0x582>
 8003140:	422c      	tst	r4, r5
 8003142:	d100      	bne.n	8003146 <__aeabi_dsub+0x302>
 8003144:	e26d      	b.n	8003622 <__aeabi_dsub+0x7de>
 8003146:	4b19      	ldr	r3, [pc, #100]	@ (80031ac <__aeabi_dsub+0x368>)
 8003148:	2501      	movs	r5, #1
 800314a:	401c      	ands	r4, r3
 800314c:	e71b      	b.n	8002f86 <__aeabi_dsub+0x142>
 800314e:	42bd      	cmp	r5, r7
 8003150:	d100      	bne.n	8003154 <__aeabi_dsub+0x310>
 8003152:	e13b      	b.n	80033cc <__aeabi_dsub+0x588>
 8003154:	2701      	movs	r7, #1
 8003156:	2b38      	cmp	r3, #56	@ 0x38
 8003158:	dd00      	ble.n	800315c <__aeabi_dsub+0x318>
 800315a:	e745      	b.n	8002fe8 <__aeabi_dsub+0x1a4>
 800315c:	2780      	movs	r7, #128	@ 0x80
 800315e:	4659      	mov	r1, fp
 8003160:	043f      	lsls	r7, r7, #16
 8003162:	4339      	orrs	r1, r7
 8003164:	468b      	mov	fp, r1
 8003166:	e72a      	b.n	8002fbe <__aeabi_dsub+0x17a>
 8003168:	2400      	movs	r4, #0
 800316a:	2700      	movs	r7, #0
 800316c:	052d      	lsls	r5, r5, #20
 800316e:	4325      	orrs	r5, r4
 8003170:	07f6      	lsls	r6, r6, #31
 8003172:	4335      	orrs	r5, r6
 8003174:	0038      	movs	r0, r7
 8003176:	0029      	movs	r1, r5
 8003178:	b003      	add	sp, #12
 800317a:	bcf0      	pop	{r4, r5, r6, r7}
 800317c:	46bb      	mov	fp, r7
 800317e:	46b2      	mov	sl, r6
 8003180:	46a9      	mov	r9, r5
 8003182:	46a0      	mov	r8, r4
 8003184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003186:	077b      	lsls	r3, r7, #29
 8003188:	d004      	beq.n	8003194 <__aeabi_dsub+0x350>
 800318a:	230f      	movs	r3, #15
 800318c:	403b      	ands	r3, r7
 800318e:	2b04      	cmp	r3, #4
 8003190:	d000      	beq.n	8003194 <__aeabi_dsub+0x350>
 8003192:	e6e7      	b.n	8002f64 <__aeabi_dsub+0x120>
 8003194:	002b      	movs	r3, r5
 8003196:	08f8      	lsrs	r0, r7, #3
 8003198:	4a03      	ldr	r2, [pc, #12]	@ (80031a8 <__aeabi_dsub+0x364>)
 800319a:	0767      	lsls	r7, r4, #29
 800319c:	4307      	orrs	r7, r0
 800319e:	08e5      	lsrs	r5, r4, #3
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d100      	bne.n	80031a6 <__aeabi_dsub+0x362>
 80031a4:	e74a      	b.n	800303c <__aeabi_dsub+0x1f8>
 80031a6:	e0a5      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 80031a8:	000007ff 	.word	0x000007ff
 80031ac:	ff7fffff 	.word	0xff7fffff
 80031b0:	fffff801 	.word	0xfffff801
 80031b4:	000007fe 	.word	0x000007fe
 80031b8:	0038      	movs	r0, r7
 80031ba:	f000 fbc7 	bl	800394c <__clzsi2>
 80031be:	0003      	movs	r3, r0
 80031c0:	3318      	adds	r3, #24
 80031c2:	2b1f      	cmp	r3, #31
 80031c4:	dc00      	bgt.n	80031c8 <__aeabi_dsub+0x384>
 80031c6:	e6a7      	b.n	8002f18 <__aeabi_dsub+0xd4>
 80031c8:	003a      	movs	r2, r7
 80031ca:	3808      	subs	r0, #8
 80031cc:	4082      	lsls	r2, r0
 80031ce:	429d      	cmp	r5, r3
 80031d0:	dd00      	ble.n	80031d4 <__aeabi_dsub+0x390>
 80031d2:	e08a      	b.n	80032ea <__aeabi_dsub+0x4a6>
 80031d4:	1b5b      	subs	r3, r3, r5
 80031d6:	1c58      	adds	r0, r3, #1
 80031d8:	281f      	cmp	r0, #31
 80031da:	dc00      	bgt.n	80031de <__aeabi_dsub+0x39a>
 80031dc:	e1d8      	b.n	8003590 <__aeabi_dsub+0x74c>
 80031de:	0017      	movs	r7, r2
 80031e0:	3b1f      	subs	r3, #31
 80031e2:	40df      	lsrs	r7, r3
 80031e4:	2820      	cmp	r0, #32
 80031e6:	d005      	beq.n	80031f4 <__aeabi_dsub+0x3b0>
 80031e8:	2340      	movs	r3, #64	@ 0x40
 80031ea:	1a1b      	subs	r3, r3, r0
 80031ec:	409a      	lsls	r2, r3
 80031ee:	1e53      	subs	r3, r2, #1
 80031f0:	419a      	sbcs	r2, r3
 80031f2:	4317      	orrs	r7, r2
 80031f4:	2500      	movs	r5, #0
 80031f6:	2f00      	cmp	r7, #0
 80031f8:	d100      	bne.n	80031fc <__aeabi_dsub+0x3b8>
 80031fa:	e0e5      	b.n	80033c8 <__aeabi_dsub+0x584>
 80031fc:	077b      	lsls	r3, r7, #29
 80031fe:	d000      	beq.n	8003202 <__aeabi_dsub+0x3be>
 8003200:	e6ab      	b.n	8002f5a <__aeabi_dsub+0x116>
 8003202:	002c      	movs	r4, r5
 8003204:	e7c6      	b.n	8003194 <__aeabi_dsub+0x350>
 8003206:	08c0      	lsrs	r0, r0, #3
 8003208:	e7c6      	b.n	8003198 <__aeabi_dsub+0x354>
 800320a:	2700      	movs	r7, #0
 800320c:	2400      	movs	r4, #0
 800320e:	4dd1      	ldr	r5, [pc, #836]	@ (8003554 <__aeabi_dsub+0x710>)
 8003210:	e7ac      	b.n	800316c <__aeabi_dsub+0x328>
 8003212:	4fd1      	ldr	r7, [pc, #836]	@ (8003558 <__aeabi_dsub+0x714>)
 8003214:	1c6b      	adds	r3, r5, #1
 8003216:	423b      	tst	r3, r7
 8003218:	d171      	bne.n	80032fe <__aeabi_dsub+0x4ba>
 800321a:	0023      	movs	r3, r4
 800321c:	4303      	orrs	r3, r0
 800321e:	2d00      	cmp	r5, #0
 8003220:	d000      	beq.n	8003224 <__aeabi_dsub+0x3e0>
 8003222:	e14e      	b.n	80034c2 <__aeabi_dsub+0x67e>
 8003224:	4657      	mov	r7, sl
 8003226:	2b00      	cmp	r3, #0
 8003228:	d100      	bne.n	800322c <__aeabi_dsub+0x3e8>
 800322a:	e1b5      	b.n	8003598 <__aeabi_dsub+0x754>
 800322c:	2f00      	cmp	r7, #0
 800322e:	d00d      	beq.n	800324c <__aeabi_dsub+0x408>
 8003230:	1883      	adds	r3, r0, r2
 8003232:	4283      	cmp	r3, r0
 8003234:	4180      	sbcs	r0, r0
 8003236:	445c      	add	r4, fp
 8003238:	4240      	negs	r0, r0
 800323a:	1824      	adds	r4, r4, r0
 800323c:	0222      	lsls	r2, r4, #8
 800323e:	d500      	bpl.n	8003242 <__aeabi_dsub+0x3fe>
 8003240:	e1c8      	b.n	80035d4 <__aeabi_dsub+0x790>
 8003242:	001f      	movs	r7, r3
 8003244:	4698      	mov	r8, r3
 8003246:	4327      	orrs	r7, r4
 8003248:	d100      	bne.n	800324c <__aeabi_dsub+0x408>
 800324a:	e0bc      	b.n	80033c6 <__aeabi_dsub+0x582>
 800324c:	4643      	mov	r3, r8
 800324e:	0767      	lsls	r7, r4, #29
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	431f      	orrs	r7, r3
 8003254:	08e5      	lsrs	r5, r4, #3
 8003256:	2300      	movs	r3, #0
 8003258:	e04c      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 800325a:	1a83      	subs	r3, r0, r2
 800325c:	4698      	mov	r8, r3
 800325e:	465b      	mov	r3, fp
 8003260:	4540      	cmp	r0, r8
 8003262:	41bf      	sbcs	r7, r7
 8003264:	1ae3      	subs	r3, r4, r3
 8003266:	427f      	negs	r7, r7
 8003268:	1bdb      	subs	r3, r3, r7
 800326a:	021f      	lsls	r7, r3, #8
 800326c:	d47c      	bmi.n	8003368 <__aeabi_dsub+0x524>
 800326e:	4647      	mov	r7, r8
 8003270:	431f      	orrs	r7, r3
 8003272:	d100      	bne.n	8003276 <__aeabi_dsub+0x432>
 8003274:	e0a6      	b.n	80033c4 <__aeabi_dsub+0x580>
 8003276:	001c      	movs	r4, r3
 8003278:	4647      	mov	r7, r8
 800327a:	e645      	b.n	8002f08 <__aeabi_dsub+0xc4>
 800327c:	4cb7      	ldr	r4, [pc, #732]	@ (800355c <__aeabi_dsub+0x718>)
 800327e:	1aed      	subs	r5, r5, r3
 8003280:	4014      	ands	r4, r2
 8003282:	077b      	lsls	r3, r7, #29
 8003284:	d000      	beq.n	8003288 <__aeabi_dsub+0x444>
 8003286:	e780      	b.n	800318a <__aeabi_dsub+0x346>
 8003288:	e784      	b.n	8003194 <__aeabi_dsub+0x350>
 800328a:	464b      	mov	r3, r9
 800328c:	0025      	movs	r5, r4
 800328e:	4305      	orrs	r5, r0
 8003290:	d066      	beq.n	8003360 <__aeabi_dsub+0x51c>
 8003292:	1e5f      	subs	r7, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d100      	bne.n	800329a <__aeabi_dsub+0x456>
 8003298:	e0fc      	b.n	8003494 <__aeabi_dsub+0x650>
 800329a:	4dae      	ldr	r5, [pc, #696]	@ (8003554 <__aeabi_dsub+0x710>)
 800329c:	42ab      	cmp	r3, r5
 800329e:	d100      	bne.n	80032a2 <__aeabi_dsub+0x45e>
 80032a0:	e15e      	b.n	8003560 <__aeabi_dsub+0x71c>
 80032a2:	4666      	mov	r6, ip
 80032a4:	2f38      	cmp	r7, #56	@ 0x38
 80032a6:	dc00      	bgt.n	80032aa <__aeabi_dsub+0x466>
 80032a8:	e0b4      	b.n	8003414 <__aeabi_dsub+0x5d0>
 80032aa:	2001      	movs	r0, #1
 80032ac:	1a17      	subs	r7, r2, r0
 80032ae:	42ba      	cmp	r2, r7
 80032b0:	4192      	sbcs	r2, r2
 80032b2:	465b      	mov	r3, fp
 80032b4:	4252      	negs	r2, r2
 80032b6:	464d      	mov	r5, r9
 80032b8:	1a9c      	subs	r4, r3, r2
 80032ba:	e620      	b.n	8002efe <__aeabi_dsub+0xba>
 80032bc:	0767      	lsls	r7, r4, #29
 80032be:	08c0      	lsrs	r0, r0, #3
 80032c0:	4307      	orrs	r7, r0
 80032c2:	08e5      	lsrs	r5, r4, #3
 80032c4:	e6ba      	b.n	800303c <__aeabi_dsub+0x1f8>
 80032c6:	001f      	movs	r7, r3
 80032c8:	4659      	mov	r1, fp
 80032ca:	3f20      	subs	r7, #32
 80032cc:	40f9      	lsrs	r1, r7
 80032ce:	000f      	movs	r7, r1
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d005      	beq.n	80032e0 <__aeabi_dsub+0x49c>
 80032d4:	2140      	movs	r1, #64	@ 0x40
 80032d6:	1acb      	subs	r3, r1, r3
 80032d8:	4659      	mov	r1, fp
 80032da:	4099      	lsls	r1, r3
 80032dc:	430a      	orrs	r2, r1
 80032de:	4692      	mov	sl, r2
 80032e0:	4653      	mov	r3, sl
 80032e2:	1e5a      	subs	r2, r3, #1
 80032e4:	4193      	sbcs	r3, r2
 80032e6:	431f      	orrs	r7, r3
 80032e8:	e604      	b.n	8002ef4 <__aeabi_dsub+0xb0>
 80032ea:	1aeb      	subs	r3, r5, r3
 80032ec:	4d9b      	ldr	r5, [pc, #620]	@ (800355c <__aeabi_dsub+0x718>)
 80032ee:	4015      	ands	r5, r2
 80032f0:	076f      	lsls	r7, r5, #29
 80032f2:	08ed      	lsrs	r5, r5, #3
 80032f4:	032c      	lsls	r4, r5, #12
 80032f6:	055d      	lsls	r5, r3, #21
 80032f8:	0b24      	lsrs	r4, r4, #12
 80032fa:	0d6d      	lsrs	r5, r5, #21
 80032fc:	e736      	b.n	800316c <__aeabi_dsub+0x328>
 80032fe:	4d95      	ldr	r5, [pc, #596]	@ (8003554 <__aeabi_dsub+0x710>)
 8003300:	42ab      	cmp	r3, r5
 8003302:	d100      	bne.n	8003306 <__aeabi_dsub+0x4c2>
 8003304:	e0d6      	b.n	80034b4 <__aeabi_dsub+0x670>
 8003306:	1882      	adds	r2, r0, r2
 8003308:	0021      	movs	r1, r4
 800330a:	4282      	cmp	r2, r0
 800330c:	4180      	sbcs	r0, r0
 800330e:	4459      	add	r1, fp
 8003310:	4240      	negs	r0, r0
 8003312:	1808      	adds	r0, r1, r0
 8003314:	07c7      	lsls	r7, r0, #31
 8003316:	0852      	lsrs	r2, r2, #1
 8003318:	4317      	orrs	r7, r2
 800331a:	0844      	lsrs	r4, r0, #1
 800331c:	0752      	lsls	r2, r2, #29
 800331e:	d400      	bmi.n	8003322 <__aeabi_dsub+0x4de>
 8003320:	e185      	b.n	800362e <__aeabi_dsub+0x7ea>
 8003322:	220f      	movs	r2, #15
 8003324:	001d      	movs	r5, r3
 8003326:	403a      	ands	r2, r7
 8003328:	2a04      	cmp	r2, #4
 800332a:	d000      	beq.n	800332e <__aeabi_dsub+0x4ea>
 800332c:	e61a      	b.n	8002f64 <__aeabi_dsub+0x120>
 800332e:	08ff      	lsrs	r7, r7, #3
 8003330:	0764      	lsls	r4, r4, #29
 8003332:	4327      	orrs	r7, r4
 8003334:	0905      	lsrs	r5, r0, #4
 8003336:	e7dd      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 8003338:	465b      	mov	r3, fp
 800333a:	08d2      	lsrs	r2, r2, #3
 800333c:	075f      	lsls	r7, r3, #29
 800333e:	4317      	orrs	r7, r2
 8003340:	08dd      	lsrs	r5, r3, #3
 8003342:	e67b      	b.n	800303c <__aeabi_dsub+0x1f8>
 8003344:	2700      	movs	r7, #0
 8003346:	2400      	movs	r4, #0
 8003348:	e710      	b.n	800316c <__aeabi_dsub+0x328>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d000      	beq.n	8003350 <__aeabi_dsub+0x50c>
 800334e:	e0d6      	b.n	80034fe <__aeabi_dsub+0x6ba>
 8003350:	2900      	cmp	r1, #0
 8003352:	d000      	beq.n	8003356 <__aeabi_dsub+0x512>
 8003354:	e12f      	b.n	80035b6 <__aeabi_dsub+0x772>
 8003356:	2480      	movs	r4, #128	@ 0x80
 8003358:	2600      	movs	r6, #0
 800335a:	4d7e      	ldr	r5, [pc, #504]	@ (8003554 <__aeabi_dsub+0x710>)
 800335c:	0324      	lsls	r4, r4, #12
 800335e:	e705      	b.n	800316c <__aeabi_dsub+0x328>
 8003360:	4666      	mov	r6, ip
 8003362:	465c      	mov	r4, fp
 8003364:	08d0      	lsrs	r0, r2, #3
 8003366:	e717      	b.n	8003198 <__aeabi_dsub+0x354>
 8003368:	465b      	mov	r3, fp
 800336a:	1a17      	subs	r7, r2, r0
 800336c:	42ba      	cmp	r2, r7
 800336e:	4192      	sbcs	r2, r2
 8003370:	1b1c      	subs	r4, r3, r4
 8003372:	2601      	movs	r6, #1
 8003374:	4663      	mov	r3, ip
 8003376:	4252      	negs	r2, r2
 8003378:	1aa4      	subs	r4, r4, r2
 800337a:	401e      	ands	r6, r3
 800337c:	e5c4      	b.n	8002f08 <__aeabi_dsub+0xc4>
 800337e:	1883      	adds	r3, r0, r2
 8003380:	4283      	cmp	r3, r0
 8003382:	4180      	sbcs	r0, r0
 8003384:	445c      	add	r4, fp
 8003386:	4240      	negs	r0, r0
 8003388:	1825      	adds	r5, r4, r0
 800338a:	022a      	lsls	r2, r5, #8
 800338c:	d400      	bmi.n	8003390 <__aeabi_dsub+0x54c>
 800338e:	e0da      	b.n	8003546 <__aeabi_dsub+0x702>
 8003390:	4a72      	ldr	r2, [pc, #456]	@ (800355c <__aeabi_dsub+0x718>)
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	4015      	ands	r5, r2
 8003396:	07ea      	lsls	r2, r5, #31
 8003398:	431a      	orrs	r2, r3
 800339a:	0869      	lsrs	r1, r5, #1
 800339c:	075b      	lsls	r3, r3, #29
 800339e:	d400      	bmi.n	80033a2 <__aeabi_dsub+0x55e>
 80033a0:	e14a      	b.n	8003638 <__aeabi_dsub+0x7f4>
 80033a2:	230f      	movs	r3, #15
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d100      	bne.n	80033ac <__aeabi_dsub+0x568>
 80033aa:	e0fc      	b.n	80035a6 <__aeabi_dsub+0x762>
 80033ac:	1d17      	adds	r7, r2, #4
 80033ae:	4297      	cmp	r7, r2
 80033b0:	41a4      	sbcs	r4, r4
 80033b2:	4264      	negs	r4, r4
 80033b4:	2502      	movs	r5, #2
 80033b6:	1864      	adds	r4, r4, r1
 80033b8:	e6ec      	b.n	8003194 <__aeabi_dsub+0x350>
 80033ba:	4647      	mov	r7, r8
 80033bc:	001c      	movs	r4, r3
 80033be:	431f      	orrs	r7, r3
 80033c0:	d000      	beq.n	80033c4 <__aeabi_dsub+0x580>
 80033c2:	e743      	b.n	800324c <__aeabi_dsub+0x408>
 80033c4:	2600      	movs	r6, #0
 80033c6:	2500      	movs	r5, #0
 80033c8:	2400      	movs	r4, #0
 80033ca:	e6cf      	b.n	800316c <__aeabi_dsub+0x328>
 80033cc:	08c0      	lsrs	r0, r0, #3
 80033ce:	0767      	lsls	r7, r4, #29
 80033d0:	4307      	orrs	r7, r0
 80033d2:	08e5      	lsrs	r5, r4, #3
 80033d4:	e632      	b.n	800303c <__aeabi_dsub+0x1f8>
 80033d6:	1a87      	subs	r7, r0, r2
 80033d8:	465b      	mov	r3, fp
 80033da:	42b8      	cmp	r0, r7
 80033dc:	4180      	sbcs	r0, r0
 80033de:	1ae4      	subs	r4, r4, r3
 80033e0:	4240      	negs	r0, r0
 80033e2:	1a24      	subs	r4, r4, r0
 80033e4:	0223      	lsls	r3, r4, #8
 80033e6:	d428      	bmi.n	800343a <__aeabi_dsub+0x5f6>
 80033e8:	0763      	lsls	r3, r4, #29
 80033ea:	08ff      	lsrs	r7, r7, #3
 80033ec:	431f      	orrs	r7, r3
 80033ee:	08e5      	lsrs	r5, r4, #3
 80033f0:	2301      	movs	r3, #1
 80033f2:	e77f      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d100      	bne.n	80033fa <__aeabi_dsub+0x5b6>
 80033f8:	e673      	b.n	80030e2 <__aeabi_dsub+0x29e>
 80033fa:	464b      	mov	r3, r9
 80033fc:	1b5f      	subs	r7, r3, r5
 80033fe:	003b      	movs	r3, r7
 8003400:	2d00      	cmp	r5, #0
 8003402:	d100      	bne.n	8003406 <__aeabi_dsub+0x5c2>
 8003404:	e742      	b.n	800328c <__aeabi_dsub+0x448>
 8003406:	2f38      	cmp	r7, #56	@ 0x38
 8003408:	dd00      	ble.n	800340c <__aeabi_dsub+0x5c8>
 800340a:	e0ec      	b.n	80035e6 <__aeabi_dsub+0x7a2>
 800340c:	2380      	movs	r3, #128	@ 0x80
 800340e:	000e      	movs	r6, r1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431c      	orrs	r4, r3
 8003414:	2f1f      	cmp	r7, #31
 8003416:	dc25      	bgt.n	8003464 <__aeabi_dsub+0x620>
 8003418:	2520      	movs	r5, #32
 800341a:	0023      	movs	r3, r4
 800341c:	1bed      	subs	r5, r5, r7
 800341e:	0001      	movs	r1, r0
 8003420:	40a8      	lsls	r0, r5
 8003422:	40ab      	lsls	r3, r5
 8003424:	40f9      	lsrs	r1, r7
 8003426:	1e45      	subs	r5, r0, #1
 8003428:	41a8      	sbcs	r0, r5
 800342a:	430b      	orrs	r3, r1
 800342c:	40fc      	lsrs	r4, r7
 800342e:	4318      	orrs	r0, r3
 8003430:	465b      	mov	r3, fp
 8003432:	1b1b      	subs	r3, r3, r4
 8003434:	469b      	mov	fp, r3
 8003436:	e739      	b.n	80032ac <__aeabi_dsub+0x468>
 8003438:	4666      	mov	r6, ip
 800343a:	2501      	movs	r5, #1
 800343c:	e562      	b.n	8002f04 <__aeabi_dsub+0xc0>
 800343e:	001f      	movs	r7, r3
 8003440:	4659      	mov	r1, fp
 8003442:	3f20      	subs	r7, #32
 8003444:	40f9      	lsrs	r1, r7
 8003446:	468c      	mov	ip, r1
 8003448:	2b20      	cmp	r3, #32
 800344a:	d005      	beq.n	8003458 <__aeabi_dsub+0x614>
 800344c:	2740      	movs	r7, #64	@ 0x40
 800344e:	4659      	mov	r1, fp
 8003450:	1afb      	subs	r3, r7, r3
 8003452:	4099      	lsls	r1, r3
 8003454:	430a      	orrs	r2, r1
 8003456:	4692      	mov	sl, r2
 8003458:	4657      	mov	r7, sl
 800345a:	1e7b      	subs	r3, r7, #1
 800345c:	419f      	sbcs	r7, r3
 800345e:	4663      	mov	r3, ip
 8003460:	431f      	orrs	r7, r3
 8003462:	e5c1      	b.n	8002fe8 <__aeabi_dsub+0x1a4>
 8003464:	003b      	movs	r3, r7
 8003466:	0025      	movs	r5, r4
 8003468:	3b20      	subs	r3, #32
 800346a:	40dd      	lsrs	r5, r3
 800346c:	2f20      	cmp	r7, #32
 800346e:	d004      	beq.n	800347a <__aeabi_dsub+0x636>
 8003470:	2340      	movs	r3, #64	@ 0x40
 8003472:	1bdb      	subs	r3, r3, r7
 8003474:	409c      	lsls	r4, r3
 8003476:	4320      	orrs	r0, r4
 8003478:	4680      	mov	r8, r0
 800347a:	4640      	mov	r0, r8
 800347c:	1e43      	subs	r3, r0, #1
 800347e:	4198      	sbcs	r0, r3
 8003480:	4328      	orrs	r0, r5
 8003482:	e713      	b.n	80032ac <__aeabi_dsub+0x468>
 8003484:	2900      	cmp	r1, #0
 8003486:	d09d      	beq.n	80033c4 <__aeabi_dsub+0x580>
 8003488:	2601      	movs	r6, #1
 800348a:	4663      	mov	r3, ip
 800348c:	465c      	mov	r4, fp
 800348e:	4690      	mov	r8, r2
 8003490:	401e      	ands	r6, r3
 8003492:	e6db      	b.n	800324c <__aeabi_dsub+0x408>
 8003494:	1a17      	subs	r7, r2, r0
 8003496:	465b      	mov	r3, fp
 8003498:	42ba      	cmp	r2, r7
 800349a:	4192      	sbcs	r2, r2
 800349c:	1b1c      	subs	r4, r3, r4
 800349e:	4252      	negs	r2, r2
 80034a0:	1aa4      	subs	r4, r4, r2
 80034a2:	0223      	lsls	r3, r4, #8
 80034a4:	d4c8      	bmi.n	8003438 <__aeabi_dsub+0x5f4>
 80034a6:	0763      	lsls	r3, r4, #29
 80034a8:	08ff      	lsrs	r7, r7, #3
 80034aa:	431f      	orrs	r7, r3
 80034ac:	4666      	mov	r6, ip
 80034ae:	2301      	movs	r3, #1
 80034b0:	08e5      	lsrs	r5, r4, #3
 80034b2:	e71f      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 80034b4:	001d      	movs	r5, r3
 80034b6:	2400      	movs	r4, #0
 80034b8:	2700      	movs	r7, #0
 80034ba:	e657      	b.n	800316c <__aeabi_dsub+0x328>
 80034bc:	465c      	mov	r4, fp
 80034be:	08d0      	lsrs	r0, r2, #3
 80034c0:	e66a      	b.n	8003198 <__aeabi_dsub+0x354>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d100      	bne.n	80034c8 <__aeabi_dsub+0x684>
 80034c6:	e737      	b.n	8003338 <__aeabi_dsub+0x4f4>
 80034c8:	4653      	mov	r3, sl
 80034ca:	08c0      	lsrs	r0, r0, #3
 80034cc:	0767      	lsls	r7, r4, #29
 80034ce:	4307      	orrs	r7, r0
 80034d0:	08e5      	lsrs	r5, r4, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d100      	bne.n	80034d8 <__aeabi_dsub+0x694>
 80034d6:	e5b1      	b.n	800303c <__aeabi_dsub+0x1f8>
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	031b      	lsls	r3, r3, #12
 80034dc:	421d      	tst	r5, r3
 80034de:	d008      	beq.n	80034f2 <__aeabi_dsub+0x6ae>
 80034e0:	4659      	mov	r1, fp
 80034e2:	08c8      	lsrs	r0, r1, #3
 80034e4:	4218      	tst	r0, r3
 80034e6:	d104      	bne.n	80034f2 <__aeabi_dsub+0x6ae>
 80034e8:	08d2      	lsrs	r2, r2, #3
 80034ea:	0749      	lsls	r1, r1, #29
 80034ec:	430a      	orrs	r2, r1
 80034ee:	0017      	movs	r7, r2
 80034f0:	0005      	movs	r5, r0
 80034f2:	0f7b      	lsrs	r3, r7, #29
 80034f4:	00ff      	lsls	r7, r7, #3
 80034f6:	08ff      	lsrs	r7, r7, #3
 80034f8:	075b      	lsls	r3, r3, #29
 80034fa:	431f      	orrs	r7, r3
 80034fc:	e59e      	b.n	800303c <__aeabi_dsub+0x1f8>
 80034fe:	08c0      	lsrs	r0, r0, #3
 8003500:	0763      	lsls	r3, r4, #29
 8003502:	4318      	orrs	r0, r3
 8003504:	08e5      	lsrs	r5, r4, #3
 8003506:	2900      	cmp	r1, #0
 8003508:	d053      	beq.n	80035b2 <__aeabi_dsub+0x76e>
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	031b      	lsls	r3, r3, #12
 800350e:	421d      	tst	r5, r3
 8003510:	d00a      	beq.n	8003528 <__aeabi_dsub+0x6e4>
 8003512:	4659      	mov	r1, fp
 8003514:	08cc      	lsrs	r4, r1, #3
 8003516:	421c      	tst	r4, r3
 8003518:	d106      	bne.n	8003528 <__aeabi_dsub+0x6e4>
 800351a:	2601      	movs	r6, #1
 800351c:	4663      	mov	r3, ip
 800351e:	0025      	movs	r5, r4
 8003520:	08d0      	lsrs	r0, r2, #3
 8003522:	0749      	lsls	r1, r1, #29
 8003524:	4308      	orrs	r0, r1
 8003526:	401e      	ands	r6, r3
 8003528:	0f47      	lsrs	r7, r0, #29
 800352a:	00c0      	lsls	r0, r0, #3
 800352c:	08c0      	lsrs	r0, r0, #3
 800352e:	077f      	lsls	r7, r7, #29
 8003530:	4307      	orrs	r7, r0
 8003532:	e583      	b.n	800303c <__aeabi_dsub+0x1f8>
 8003534:	1883      	adds	r3, r0, r2
 8003536:	4293      	cmp	r3, r2
 8003538:	4192      	sbcs	r2, r2
 800353a:	445c      	add	r4, fp
 800353c:	4252      	negs	r2, r2
 800353e:	18a5      	adds	r5, r4, r2
 8003540:	022a      	lsls	r2, r5, #8
 8003542:	d500      	bpl.n	8003546 <__aeabi_dsub+0x702>
 8003544:	e724      	b.n	8003390 <__aeabi_dsub+0x54c>
 8003546:	076f      	lsls	r7, r5, #29
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	431f      	orrs	r7, r3
 800354c:	08ed      	lsrs	r5, r5, #3
 800354e:	2301      	movs	r3, #1
 8003550:	e6d0      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	000007ff 	.word	0x000007ff
 8003558:	000007fe 	.word	0x000007fe
 800355c:	ff7fffff 	.word	0xff7fffff
 8003560:	465b      	mov	r3, fp
 8003562:	08d2      	lsrs	r2, r2, #3
 8003564:	075f      	lsls	r7, r3, #29
 8003566:	4666      	mov	r6, ip
 8003568:	4317      	orrs	r7, r2
 800356a:	08dd      	lsrs	r5, r3, #3
 800356c:	e566      	b.n	800303c <__aeabi_dsub+0x1f8>
 800356e:	0025      	movs	r5, r4
 8003570:	3b20      	subs	r3, #32
 8003572:	40dd      	lsrs	r5, r3
 8003574:	4663      	mov	r3, ip
 8003576:	2b20      	cmp	r3, #32
 8003578:	d005      	beq.n	8003586 <__aeabi_dsub+0x742>
 800357a:	2340      	movs	r3, #64	@ 0x40
 800357c:	4661      	mov	r1, ip
 800357e:	1a5b      	subs	r3, r3, r1
 8003580:	409c      	lsls	r4, r3
 8003582:	4320      	orrs	r0, r4
 8003584:	4680      	mov	r8, r0
 8003586:	4647      	mov	r7, r8
 8003588:	1e7b      	subs	r3, r7, #1
 800358a:	419f      	sbcs	r7, r3
 800358c:	432f      	orrs	r7, r5
 800358e:	e5a0      	b.n	80030d2 <__aeabi_dsub+0x28e>
 8003590:	2120      	movs	r1, #32
 8003592:	2700      	movs	r7, #0
 8003594:	1a09      	subs	r1, r1, r0
 8003596:	e4d2      	b.n	8002f3e <__aeabi_dsub+0xfa>
 8003598:	2f00      	cmp	r7, #0
 800359a:	d100      	bne.n	800359e <__aeabi_dsub+0x75a>
 800359c:	e713      	b.n	80033c6 <__aeabi_dsub+0x582>
 800359e:	465c      	mov	r4, fp
 80035a0:	0017      	movs	r7, r2
 80035a2:	2500      	movs	r5, #0
 80035a4:	e5f6      	b.n	8003194 <__aeabi_dsub+0x350>
 80035a6:	08d7      	lsrs	r7, r2, #3
 80035a8:	0749      	lsls	r1, r1, #29
 80035aa:	2302      	movs	r3, #2
 80035ac:	430f      	orrs	r7, r1
 80035ae:	092d      	lsrs	r5, r5, #4
 80035b0:	e6a0      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 80035b2:	0007      	movs	r7, r0
 80035b4:	e542      	b.n	800303c <__aeabi_dsub+0x1f8>
 80035b6:	465b      	mov	r3, fp
 80035b8:	2601      	movs	r6, #1
 80035ba:	075f      	lsls	r7, r3, #29
 80035bc:	08dd      	lsrs	r5, r3, #3
 80035be:	4663      	mov	r3, ip
 80035c0:	08d2      	lsrs	r2, r2, #3
 80035c2:	4317      	orrs	r7, r2
 80035c4:	401e      	ands	r6, r3
 80035c6:	e539      	b.n	800303c <__aeabi_dsub+0x1f8>
 80035c8:	465b      	mov	r3, fp
 80035ca:	08d2      	lsrs	r2, r2, #3
 80035cc:	075f      	lsls	r7, r3, #29
 80035ce:	4317      	orrs	r7, r2
 80035d0:	08dd      	lsrs	r5, r3, #3
 80035d2:	e533      	b.n	800303c <__aeabi_dsub+0x1f8>
 80035d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003650 <__aeabi_dsub+0x80c>)
 80035d6:	08db      	lsrs	r3, r3, #3
 80035d8:	4022      	ands	r2, r4
 80035da:	0757      	lsls	r7, r2, #29
 80035dc:	0252      	lsls	r2, r2, #9
 80035de:	2501      	movs	r5, #1
 80035e0:	431f      	orrs	r7, r3
 80035e2:	0b14      	lsrs	r4, r2, #12
 80035e4:	e5c2      	b.n	800316c <__aeabi_dsub+0x328>
 80035e6:	000e      	movs	r6, r1
 80035e8:	2001      	movs	r0, #1
 80035ea:	e65f      	b.n	80032ac <__aeabi_dsub+0x468>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <__aeabi_dsub+0x7c8>
 80035f0:	464b      	mov	r3, r9
 80035f2:	1b5b      	subs	r3, r3, r5
 80035f4:	469c      	mov	ip, r3
 80035f6:	2d00      	cmp	r5, #0
 80035f8:	d100      	bne.n	80035fc <__aeabi_dsub+0x7b8>
 80035fa:	e548      	b.n	800308e <__aeabi_dsub+0x24a>
 80035fc:	2701      	movs	r7, #1
 80035fe:	2b38      	cmp	r3, #56	@ 0x38
 8003600:	dd00      	ble.n	8003604 <__aeabi_dsub+0x7c0>
 8003602:	e566      	b.n	80030d2 <__aeabi_dsub+0x28e>
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	431c      	orrs	r4, r3
 800360a:	e550      	b.n	80030ae <__aeabi_dsub+0x26a>
 800360c:	1c6b      	adds	r3, r5, #1
 800360e:	4d11      	ldr	r5, [pc, #68]	@ (8003654 <__aeabi_dsub+0x810>)
 8003610:	422b      	tst	r3, r5
 8003612:	d000      	beq.n	8003616 <__aeabi_dsub+0x7d2>
 8003614:	e673      	b.n	80032fe <__aeabi_dsub+0x4ba>
 8003616:	4659      	mov	r1, fp
 8003618:	0023      	movs	r3, r4
 800361a:	4311      	orrs	r1, r2
 800361c:	468a      	mov	sl, r1
 800361e:	4303      	orrs	r3, r0
 8003620:	e600      	b.n	8003224 <__aeabi_dsub+0x3e0>
 8003622:	0767      	lsls	r7, r4, #29
 8003624:	08c0      	lsrs	r0, r0, #3
 8003626:	2300      	movs	r3, #0
 8003628:	4307      	orrs	r7, r0
 800362a:	08e5      	lsrs	r5, r4, #3
 800362c:	e662      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 800362e:	0764      	lsls	r4, r4, #29
 8003630:	08ff      	lsrs	r7, r7, #3
 8003632:	4327      	orrs	r7, r4
 8003634:	0905      	lsrs	r5, r0, #4
 8003636:	e65d      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 8003638:	08d2      	lsrs	r2, r2, #3
 800363a:	0749      	lsls	r1, r1, #29
 800363c:	4311      	orrs	r1, r2
 800363e:	000f      	movs	r7, r1
 8003640:	2302      	movs	r3, #2
 8003642:	092d      	lsrs	r5, r5, #4
 8003644:	e656      	b.n	80032f4 <__aeabi_dsub+0x4b0>
 8003646:	0007      	movs	r7, r0
 8003648:	e5a4      	b.n	8003194 <__aeabi_dsub+0x350>
 800364a:	0038      	movs	r0, r7
 800364c:	e48f      	b.n	8002f6e <__aeabi_dsub+0x12a>
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	ff7fffff 	.word	0xff7fffff
 8003654:	000007fe 	.word	0x000007fe

08003658 <__aeabi_dcmpun>:
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	46c6      	mov	lr, r8
 800365c:	031e      	lsls	r6, r3, #12
 800365e:	0b36      	lsrs	r6, r6, #12
 8003660:	46b0      	mov	r8, r6
 8003662:	4e0d      	ldr	r6, [pc, #52]	@ (8003698 <__aeabi_dcmpun+0x40>)
 8003664:	030c      	lsls	r4, r1, #12
 8003666:	004d      	lsls	r5, r1, #1
 8003668:	005f      	lsls	r7, r3, #1
 800366a:	b500      	push	{lr}
 800366c:	0b24      	lsrs	r4, r4, #12
 800366e:	0d6d      	lsrs	r5, r5, #21
 8003670:	0d7f      	lsrs	r7, r7, #21
 8003672:	42b5      	cmp	r5, r6
 8003674:	d00b      	beq.n	800368e <__aeabi_dcmpun+0x36>
 8003676:	4908      	ldr	r1, [pc, #32]	@ (8003698 <__aeabi_dcmpun+0x40>)
 8003678:	2000      	movs	r0, #0
 800367a:	428f      	cmp	r7, r1
 800367c:	d104      	bne.n	8003688 <__aeabi_dcmpun+0x30>
 800367e:	4646      	mov	r6, r8
 8003680:	4316      	orrs	r6, r2
 8003682:	0030      	movs	r0, r6
 8003684:	1e43      	subs	r3, r0, #1
 8003686:	4198      	sbcs	r0, r3
 8003688:	bc80      	pop	{r7}
 800368a:	46b8      	mov	r8, r7
 800368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800368e:	4304      	orrs	r4, r0
 8003690:	2001      	movs	r0, #1
 8003692:	2c00      	cmp	r4, #0
 8003694:	d1f8      	bne.n	8003688 <__aeabi_dcmpun+0x30>
 8003696:	e7ee      	b.n	8003676 <__aeabi_dcmpun+0x1e>
 8003698:	000007ff 	.word	0x000007ff

0800369c <__aeabi_d2iz>:
 800369c:	000b      	movs	r3, r1
 800369e:	0002      	movs	r2, r0
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	4d16      	ldr	r5, [pc, #88]	@ (80036fc <__aeabi_d2iz+0x60>)
 80036a4:	030c      	lsls	r4, r1, #12
 80036a6:	b082      	sub	sp, #8
 80036a8:	0049      	lsls	r1, r1, #1
 80036aa:	2000      	movs	r0, #0
 80036ac:	9200      	str	r2, [sp, #0]
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	0b24      	lsrs	r4, r4, #12
 80036b2:	0d49      	lsrs	r1, r1, #21
 80036b4:	0fde      	lsrs	r6, r3, #31
 80036b6:	42a9      	cmp	r1, r5
 80036b8:	dd04      	ble.n	80036c4 <__aeabi_d2iz+0x28>
 80036ba:	4811      	ldr	r0, [pc, #68]	@ (8003700 <__aeabi_d2iz+0x64>)
 80036bc:	4281      	cmp	r1, r0
 80036be:	dd03      	ble.n	80036c8 <__aeabi_d2iz+0x2c>
 80036c0:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <__aeabi_d2iz+0x68>)
 80036c2:	18f0      	adds	r0, r6, r3
 80036c4:	b002      	add	sp, #8
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	2080      	movs	r0, #128	@ 0x80
 80036ca:	0340      	lsls	r0, r0, #13
 80036cc:	4320      	orrs	r0, r4
 80036ce:	4c0e      	ldr	r4, [pc, #56]	@ (8003708 <__aeabi_d2iz+0x6c>)
 80036d0:	1a64      	subs	r4, r4, r1
 80036d2:	2c1f      	cmp	r4, #31
 80036d4:	dd08      	ble.n	80036e8 <__aeabi_d2iz+0x4c>
 80036d6:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <__aeabi_d2iz+0x70>)
 80036d8:	1a5b      	subs	r3, r3, r1
 80036da:	40d8      	lsrs	r0, r3
 80036dc:	0003      	movs	r3, r0
 80036de:	4258      	negs	r0, r3
 80036e0:	2e00      	cmp	r6, #0
 80036e2:	d1ef      	bne.n	80036c4 <__aeabi_d2iz+0x28>
 80036e4:	0018      	movs	r0, r3
 80036e6:	e7ed      	b.n	80036c4 <__aeabi_d2iz+0x28>
 80036e8:	4b09      	ldr	r3, [pc, #36]	@ (8003710 <__aeabi_d2iz+0x74>)
 80036ea:	9a00      	ldr	r2, [sp, #0]
 80036ec:	469c      	mov	ip, r3
 80036ee:	0003      	movs	r3, r0
 80036f0:	4461      	add	r1, ip
 80036f2:	408b      	lsls	r3, r1
 80036f4:	40e2      	lsrs	r2, r4
 80036f6:	4313      	orrs	r3, r2
 80036f8:	e7f1      	b.n	80036de <__aeabi_d2iz+0x42>
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	000003fe 	.word	0x000003fe
 8003700:	0000041d 	.word	0x0000041d
 8003704:	7fffffff 	.word	0x7fffffff
 8003708:	00000433 	.word	0x00000433
 800370c:	00000413 	.word	0x00000413
 8003710:	fffffbed 	.word	0xfffffbed

08003714 <__aeabi_i2d>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	2800      	cmp	r0, #0
 8003718:	d016      	beq.n	8003748 <__aeabi_i2d+0x34>
 800371a:	17c3      	asrs	r3, r0, #31
 800371c:	18c5      	adds	r5, r0, r3
 800371e:	405d      	eors	r5, r3
 8003720:	0fc4      	lsrs	r4, r0, #31
 8003722:	0028      	movs	r0, r5
 8003724:	f000 f912 	bl	800394c <__clzsi2>
 8003728:	4b10      	ldr	r3, [pc, #64]	@ (800376c <__aeabi_i2d+0x58>)
 800372a:	1a1b      	subs	r3, r3, r0
 800372c:	055b      	lsls	r3, r3, #21
 800372e:	0d5b      	lsrs	r3, r3, #21
 8003730:	280a      	cmp	r0, #10
 8003732:	dc14      	bgt.n	800375e <__aeabi_i2d+0x4a>
 8003734:	0002      	movs	r2, r0
 8003736:	002e      	movs	r6, r5
 8003738:	3215      	adds	r2, #21
 800373a:	4096      	lsls	r6, r2
 800373c:	220b      	movs	r2, #11
 800373e:	1a12      	subs	r2, r2, r0
 8003740:	40d5      	lsrs	r5, r2
 8003742:	032d      	lsls	r5, r5, #12
 8003744:	0b2d      	lsrs	r5, r5, #12
 8003746:	e003      	b.n	8003750 <__aeabi_i2d+0x3c>
 8003748:	2400      	movs	r4, #0
 800374a:	2300      	movs	r3, #0
 800374c:	2500      	movs	r5, #0
 800374e:	2600      	movs	r6, #0
 8003750:	051b      	lsls	r3, r3, #20
 8003752:	432b      	orrs	r3, r5
 8003754:	07e4      	lsls	r4, r4, #31
 8003756:	4323      	orrs	r3, r4
 8003758:	0030      	movs	r0, r6
 800375a:	0019      	movs	r1, r3
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	380b      	subs	r0, #11
 8003760:	4085      	lsls	r5, r0
 8003762:	032d      	lsls	r5, r5, #12
 8003764:	2600      	movs	r6, #0
 8003766:	0b2d      	lsrs	r5, r5, #12
 8003768:	e7f2      	b.n	8003750 <__aeabi_i2d+0x3c>
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	0000041e 	.word	0x0000041e

08003770 <__aeabi_ui2d>:
 8003770:	b510      	push	{r4, lr}
 8003772:	1e04      	subs	r4, r0, #0
 8003774:	d010      	beq.n	8003798 <__aeabi_ui2d+0x28>
 8003776:	f000 f8e9 	bl	800394c <__clzsi2>
 800377a:	4b0e      	ldr	r3, [pc, #56]	@ (80037b4 <__aeabi_ui2d+0x44>)
 800377c:	1a1b      	subs	r3, r3, r0
 800377e:	055b      	lsls	r3, r3, #21
 8003780:	0d5b      	lsrs	r3, r3, #21
 8003782:	280a      	cmp	r0, #10
 8003784:	dc0f      	bgt.n	80037a6 <__aeabi_ui2d+0x36>
 8003786:	220b      	movs	r2, #11
 8003788:	0021      	movs	r1, r4
 800378a:	1a12      	subs	r2, r2, r0
 800378c:	40d1      	lsrs	r1, r2
 800378e:	3015      	adds	r0, #21
 8003790:	030a      	lsls	r2, r1, #12
 8003792:	4084      	lsls	r4, r0
 8003794:	0b12      	lsrs	r2, r2, #12
 8003796:	e001      	b.n	800379c <__aeabi_ui2d+0x2c>
 8003798:	2300      	movs	r3, #0
 800379a:	2200      	movs	r2, #0
 800379c:	051b      	lsls	r3, r3, #20
 800379e:	4313      	orrs	r3, r2
 80037a0:	0020      	movs	r0, r4
 80037a2:	0019      	movs	r1, r3
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	0022      	movs	r2, r4
 80037a8:	380b      	subs	r0, #11
 80037aa:	4082      	lsls	r2, r0
 80037ac:	0312      	lsls	r2, r2, #12
 80037ae:	2400      	movs	r4, #0
 80037b0:	0b12      	lsrs	r2, r2, #12
 80037b2:	e7f3      	b.n	800379c <__aeabi_ui2d+0x2c>
 80037b4:	0000041e 	.word	0x0000041e

080037b8 <__aeabi_f2d>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	0242      	lsls	r2, r0, #9
 80037bc:	0043      	lsls	r3, r0, #1
 80037be:	0fc4      	lsrs	r4, r0, #31
 80037c0:	20fe      	movs	r0, #254	@ 0xfe
 80037c2:	0e1b      	lsrs	r3, r3, #24
 80037c4:	1c59      	adds	r1, r3, #1
 80037c6:	0a55      	lsrs	r5, r2, #9
 80037c8:	4208      	tst	r0, r1
 80037ca:	d00c      	beq.n	80037e6 <__aeabi_f2d+0x2e>
 80037cc:	21e0      	movs	r1, #224	@ 0xe0
 80037ce:	0089      	lsls	r1, r1, #2
 80037d0:	468c      	mov	ip, r1
 80037d2:	076d      	lsls	r5, r5, #29
 80037d4:	0b12      	lsrs	r2, r2, #12
 80037d6:	4463      	add	r3, ip
 80037d8:	051b      	lsls	r3, r3, #20
 80037da:	4313      	orrs	r3, r2
 80037dc:	07e4      	lsls	r4, r4, #31
 80037de:	4323      	orrs	r3, r4
 80037e0:	0028      	movs	r0, r5
 80037e2:	0019      	movs	r1, r3
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d114      	bne.n	8003814 <__aeabi_f2d+0x5c>
 80037ea:	2d00      	cmp	r5, #0
 80037ec:	d01b      	beq.n	8003826 <__aeabi_f2d+0x6e>
 80037ee:	0028      	movs	r0, r5
 80037f0:	f000 f8ac 	bl	800394c <__clzsi2>
 80037f4:	280a      	cmp	r0, #10
 80037f6:	dc1c      	bgt.n	8003832 <__aeabi_f2d+0x7a>
 80037f8:	230b      	movs	r3, #11
 80037fa:	002a      	movs	r2, r5
 80037fc:	1a1b      	subs	r3, r3, r0
 80037fe:	40da      	lsrs	r2, r3
 8003800:	0003      	movs	r3, r0
 8003802:	3315      	adds	r3, #21
 8003804:	409d      	lsls	r5, r3
 8003806:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <__aeabi_f2d+0x88>)
 8003808:	0312      	lsls	r2, r2, #12
 800380a:	1a1b      	subs	r3, r3, r0
 800380c:	055b      	lsls	r3, r3, #21
 800380e:	0b12      	lsrs	r2, r2, #12
 8003810:	0d5b      	lsrs	r3, r3, #21
 8003812:	e7e1      	b.n	80037d8 <__aeabi_f2d+0x20>
 8003814:	2d00      	cmp	r5, #0
 8003816:	d009      	beq.n	800382c <__aeabi_f2d+0x74>
 8003818:	0b13      	lsrs	r3, r2, #12
 800381a:	2280      	movs	r2, #128	@ 0x80
 800381c:	0312      	lsls	r2, r2, #12
 800381e:	431a      	orrs	r2, r3
 8003820:	076d      	lsls	r5, r5, #29
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <__aeabi_f2d+0x8c>)
 8003824:	e7d8      	b.n	80037d8 <__aeabi_f2d+0x20>
 8003826:	2300      	movs	r3, #0
 8003828:	2200      	movs	r2, #0
 800382a:	e7d5      	b.n	80037d8 <__aeabi_f2d+0x20>
 800382c:	2200      	movs	r2, #0
 800382e:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <__aeabi_f2d+0x8c>)
 8003830:	e7d2      	b.n	80037d8 <__aeabi_f2d+0x20>
 8003832:	0003      	movs	r3, r0
 8003834:	002a      	movs	r2, r5
 8003836:	3b0b      	subs	r3, #11
 8003838:	409a      	lsls	r2, r3
 800383a:	2500      	movs	r5, #0
 800383c:	e7e3      	b.n	8003806 <__aeabi_f2d+0x4e>
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	00000389 	.word	0x00000389
 8003844:	000007ff 	.word	0x000007ff

08003848 <__aeabi_d2f>:
 8003848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384a:	004b      	lsls	r3, r1, #1
 800384c:	030f      	lsls	r7, r1, #12
 800384e:	0d5b      	lsrs	r3, r3, #21
 8003850:	4c3a      	ldr	r4, [pc, #232]	@ (800393c <__aeabi_d2f+0xf4>)
 8003852:	0f45      	lsrs	r5, r0, #29
 8003854:	b083      	sub	sp, #12
 8003856:	0a7f      	lsrs	r7, r7, #9
 8003858:	1c5e      	adds	r6, r3, #1
 800385a:	432f      	orrs	r7, r5
 800385c:	9000      	str	r0, [sp, #0]
 800385e:	9101      	str	r1, [sp, #4]
 8003860:	0fca      	lsrs	r2, r1, #31
 8003862:	00c5      	lsls	r5, r0, #3
 8003864:	4226      	tst	r6, r4
 8003866:	d00b      	beq.n	8003880 <__aeabi_d2f+0x38>
 8003868:	4935      	ldr	r1, [pc, #212]	@ (8003940 <__aeabi_d2f+0xf8>)
 800386a:	185c      	adds	r4, r3, r1
 800386c:	2cfe      	cmp	r4, #254	@ 0xfe
 800386e:	dd13      	ble.n	8003898 <__aeabi_d2f+0x50>
 8003870:	20ff      	movs	r0, #255	@ 0xff
 8003872:	2300      	movs	r3, #0
 8003874:	05c0      	lsls	r0, r0, #23
 8003876:	4318      	orrs	r0, r3
 8003878:	07d2      	lsls	r2, r2, #31
 800387a:	4310      	orrs	r0, r2
 800387c:	b003      	add	sp, #12
 800387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003880:	433d      	orrs	r5, r7
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <__aeabi_d2f+0x42>
 8003886:	2000      	movs	r0, #0
 8003888:	e7f4      	b.n	8003874 <__aeabi_d2f+0x2c>
 800388a:	2d00      	cmp	r5, #0
 800388c:	d0f0      	beq.n	8003870 <__aeabi_d2f+0x28>
 800388e:	2380      	movs	r3, #128	@ 0x80
 8003890:	03db      	lsls	r3, r3, #15
 8003892:	20ff      	movs	r0, #255	@ 0xff
 8003894:	433b      	orrs	r3, r7
 8003896:	e7ed      	b.n	8003874 <__aeabi_d2f+0x2c>
 8003898:	2c00      	cmp	r4, #0
 800389a:	dd0c      	ble.n	80038b6 <__aeabi_d2f+0x6e>
 800389c:	9b00      	ldr	r3, [sp, #0]
 800389e:	00ff      	lsls	r7, r7, #3
 80038a0:	019b      	lsls	r3, r3, #6
 80038a2:	1e58      	subs	r0, r3, #1
 80038a4:	4183      	sbcs	r3, r0
 80038a6:	0f69      	lsrs	r1, r5, #29
 80038a8:	433b      	orrs	r3, r7
 80038aa:	430b      	orrs	r3, r1
 80038ac:	0759      	lsls	r1, r3, #29
 80038ae:	d127      	bne.n	8003900 <__aeabi_d2f+0xb8>
 80038b0:	08db      	lsrs	r3, r3, #3
 80038b2:	b2e0      	uxtb	r0, r4
 80038b4:	e7de      	b.n	8003874 <__aeabi_d2f+0x2c>
 80038b6:	0021      	movs	r1, r4
 80038b8:	3117      	adds	r1, #23
 80038ba:	db31      	blt.n	8003920 <__aeabi_d2f+0xd8>
 80038bc:	2180      	movs	r1, #128	@ 0x80
 80038be:	201e      	movs	r0, #30
 80038c0:	0409      	lsls	r1, r1, #16
 80038c2:	4339      	orrs	r1, r7
 80038c4:	1b00      	subs	r0, r0, r4
 80038c6:	281f      	cmp	r0, #31
 80038c8:	dd2d      	ble.n	8003926 <__aeabi_d2f+0xde>
 80038ca:	2602      	movs	r6, #2
 80038cc:	4276      	negs	r6, r6
 80038ce:	1b34      	subs	r4, r6, r4
 80038d0:	000e      	movs	r6, r1
 80038d2:	40e6      	lsrs	r6, r4
 80038d4:	0034      	movs	r4, r6
 80038d6:	2820      	cmp	r0, #32
 80038d8:	d004      	beq.n	80038e4 <__aeabi_d2f+0x9c>
 80038da:	481a      	ldr	r0, [pc, #104]	@ (8003944 <__aeabi_d2f+0xfc>)
 80038dc:	4684      	mov	ip, r0
 80038de:	4463      	add	r3, ip
 80038e0:	4099      	lsls	r1, r3
 80038e2:	430d      	orrs	r5, r1
 80038e4:	002b      	movs	r3, r5
 80038e6:	1e59      	subs	r1, r3, #1
 80038e8:	418b      	sbcs	r3, r1
 80038ea:	4323      	orrs	r3, r4
 80038ec:	0759      	lsls	r1, r3, #29
 80038ee:	d003      	beq.n	80038f8 <__aeabi_d2f+0xb0>
 80038f0:	210f      	movs	r1, #15
 80038f2:	4019      	ands	r1, r3
 80038f4:	2904      	cmp	r1, #4
 80038f6:	d10b      	bne.n	8003910 <__aeabi_d2f+0xc8>
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	2000      	movs	r0, #0
 80038fc:	0a5b      	lsrs	r3, r3, #9
 80038fe:	e7b9      	b.n	8003874 <__aeabi_d2f+0x2c>
 8003900:	210f      	movs	r1, #15
 8003902:	4019      	ands	r1, r3
 8003904:	2904      	cmp	r1, #4
 8003906:	d104      	bne.n	8003912 <__aeabi_d2f+0xca>
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	0a5b      	lsrs	r3, r3, #9
 800390c:	b2e0      	uxtb	r0, r4
 800390e:	e7b1      	b.n	8003874 <__aeabi_d2f+0x2c>
 8003910:	2400      	movs	r4, #0
 8003912:	3304      	adds	r3, #4
 8003914:	0159      	lsls	r1, r3, #5
 8003916:	d5f7      	bpl.n	8003908 <__aeabi_d2f+0xc0>
 8003918:	3401      	adds	r4, #1
 800391a:	2300      	movs	r3, #0
 800391c:	b2e0      	uxtb	r0, r4
 800391e:	e7a9      	b.n	8003874 <__aeabi_d2f+0x2c>
 8003920:	2000      	movs	r0, #0
 8003922:	2300      	movs	r3, #0
 8003924:	e7a6      	b.n	8003874 <__aeabi_d2f+0x2c>
 8003926:	4c08      	ldr	r4, [pc, #32]	@ (8003948 <__aeabi_d2f+0x100>)
 8003928:	191c      	adds	r4, r3, r4
 800392a:	002b      	movs	r3, r5
 800392c:	40a5      	lsls	r5, r4
 800392e:	40c3      	lsrs	r3, r0
 8003930:	40a1      	lsls	r1, r4
 8003932:	1e68      	subs	r0, r5, #1
 8003934:	4185      	sbcs	r5, r0
 8003936:	4329      	orrs	r1, r5
 8003938:	430b      	orrs	r3, r1
 800393a:	e7d7      	b.n	80038ec <__aeabi_d2f+0xa4>
 800393c:	000007fe 	.word	0x000007fe
 8003940:	fffffc80 	.word	0xfffffc80
 8003944:	fffffca2 	.word	0xfffffca2
 8003948:	fffffc82 	.word	0xfffffc82

0800394c <__clzsi2>:
 800394c:	211c      	movs	r1, #28
 800394e:	2301      	movs	r3, #1
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	4298      	cmp	r0, r3
 8003954:	d301      	bcc.n	800395a <__clzsi2+0xe>
 8003956:	0c00      	lsrs	r0, r0, #16
 8003958:	3910      	subs	r1, #16
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	4298      	cmp	r0, r3
 800395e:	d301      	bcc.n	8003964 <__clzsi2+0x18>
 8003960:	0a00      	lsrs	r0, r0, #8
 8003962:	3908      	subs	r1, #8
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	4298      	cmp	r0, r3
 8003968:	d301      	bcc.n	800396e <__clzsi2+0x22>
 800396a:	0900      	lsrs	r0, r0, #4
 800396c:	3904      	subs	r1, #4
 800396e:	a202      	add	r2, pc, #8	@ (adr r2, 8003978 <__clzsi2+0x2c>)
 8003970:	5c10      	ldrb	r0, [r2, r0]
 8003972:	1840      	adds	r0, r0, r1
 8003974:	4770      	bx	lr
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	02020304 	.word	0x02020304
 800397c:	01010101 	.word	0x01010101
	...

08003988 <__clzdi2>:
 8003988:	b510      	push	{r4, lr}
 800398a:	2900      	cmp	r1, #0
 800398c:	d103      	bne.n	8003996 <__clzdi2+0xe>
 800398e:	f7ff ffdd 	bl	800394c <__clzsi2>
 8003992:	3020      	adds	r0, #32
 8003994:	e002      	b.n	800399c <__clzdi2+0x14>
 8003996:	0008      	movs	r0, r1
 8003998:	f7ff ffd8 	bl	800394c <__clzsi2>
 800399c:	bd10      	pop	{r4, pc}
 800399e:	46c0      	nop			@ (mov r8, r8)

080039a0 <debug_print>:

// BME680 device structure
struct bme68x_dev bme680_dev;

// Debug function to send message to both UARTs
void debug_print(const char* message) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7fc fbb4 	bl	8000118 <strlen>
 80039b0:	0003      	movs	r3, r0
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	2301      	movs	r3, #1
 80039b6:	425b      	negs	r3, r3
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4809      	ldr	r0, [pc, #36]	@ (80039e0 <debug_print+0x40>)
 80039bc:	f00a fffc 	bl	800e9b8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fc fba8 	bl	8000118 <strlen>
 80039c8:	0003      	movs	r3, r0
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	2301      	movs	r3, #1
 80039ce:	425b      	negs	r3, r3
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4804      	ldr	r0, [pc, #16]	@ (80039e4 <debug_print+0x44>)
 80039d4:	f00a fff0 	bl	800e9b8 <HAL_UART_Transmit>
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	200003a0 	.word	0x200003a0
 80039e4:	20000434 	.word	0x20000434

080039e8 <i2c_scan_bus>:

// I2C bus scanner function
void i2c_scan_bus(void) {
 80039e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ea:	b0a3      	sub	sp, #140	@ 0x8c
 80039ec:	af00      	add	r7, sp, #0
    uint8_t found_devices = 0;
 80039ee:	2387      	movs	r3, #135	@ 0x87
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
    char debug_msg[128];
    
    debug_print("Scanning I2C bus for devices...\r\n");
 80039f6:	4b29      	ldr	r3, [pc, #164]	@ (8003a9c <i2c_scan_bus+0xb4>)
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7ff ffd1 	bl	80039a0 <debug_print>
    
    for (uint8_t addr = 1; addr < 128; addr++) {
 80039fe:	2386      	movs	r3, #134	@ 0x86
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e029      	b.n	8003a5c <i2c_scan_bus+0x74>
        HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 2, 100);
 8003a08:	2586      	movs	r5, #134	@ 0x86
 8003a0a:	197b      	adds	r3, r7, r5
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	18db      	adds	r3, r3, r3
 8003a12:	b299      	uxth	r1, r3
 8003a14:	2685      	movs	r6, #133	@ 0x85
 8003a16:	19bc      	adds	r4, r7, r6
 8003a18:	4821      	ldr	r0, [pc, #132]	@ (8003aa0 <i2c_scan_bus+0xb8>)
 8003a1a:	2364      	movs	r3, #100	@ 0x64
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f008 fcfd 	bl	800c41c <HAL_I2C_IsDeviceReady>
 8003a22:	0003      	movs	r3, r0
 8003a24:	7023      	strb	r3, [r4, #0]
        if (status == HAL_OK) {
 8003a26:	19bb      	adds	r3, r7, r6
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d110      	bne.n	8003a50 <i2c_scan_bus+0x68>
            snprintf(debug_msg, sizeof(debug_msg), "Device found at address: 0x%02X\r\n", addr);
 8003a2e:	197b      	adds	r3, r7, r5
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa4 <i2c_scan_bus+0xbc>)
 8003a34:	1d38      	adds	r0, r7, #4
 8003a36:	2180      	movs	r1, #128	@ 0x80
 8003a38:	f00d faa2 	bl	8010f80 <sniprintf>
            debug_print(debug_msg);
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7ff ffae 	bl	80039a0 <debug_print>
            found_devices++;
 8003a44:	2187      	movs	r1, #135	@ 0x87
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	3201      	adds	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003a50:	2186      	movs	r1, #134	@ 0x86
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	3201      	adds	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	2386      	movs	r3, #134	@ 0x86
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	b25b      	sxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	dacf      	bge.n	8003a08 <i2c_scan_bus+0x20>
        }
    }
    
    if (found_devices == 0) {
 8003a68:	2387      	movs	r3, #135	@ 0x87
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <i2c_scan_bus+0x94>
        debug_print("No I2C devices found on bus!\r\n");
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <i2c_scan_bus+0xc0>)
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7ff ff93 	bl	80039a0 <debug_print>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Total devices found: %d\r\n", found_devices);
        debug_print(debug_msg);
    }
}
 8003a7a:	e00b      	b.n	8003a94 <i2c_scan_bus+0xac>
        snprintf(debug_msg, sizeof(debug_msg), "Total devices found: %d\r\n", found_devices);
 8003a7c:	2387      	movs	r3, #135	@ 0x87
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <i2c_scan_bus+0xc4>)
 8003a84:	1d38      	adds	r0, r7, #4
 8003a86:	2180      	movs	r1, #128	@ 0x80
 8003a88:	f00d fa7a 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f7ff ff86 	bl	80039a0 <debug_print>
}
 8003a94:	46c0      	nop			@ (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b023      	add	sp, #140	@ 0x8c
 8003a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a9c:	08013d50 	.word	0x08013d50
 8003aa0:	200002e8 	.word	0x200002e8
 8003aa4:	08013d74 	.word	0x08013d74
 8003aa8:	08013d98 	.word	0x08013d98
 8003aac:	08013db8 	.word	0x08013db8

08003ab0 <bme680_i2c_read>:

// Enhanced I2C read function for BME680 with detailed error reporting
int8_t bme680_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab2:	b0ab      	sub	sp, #172	@ 0xac
 8003ab4:	af04      	add	r7, sp, #16
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	240f      	movs	r4, #15
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	1c02      	adds	r2, r0, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;
    char debug_msg[128];
    
    // Debug: Print read attempt
    snprintf(debug_msg, sizeof(debug_msg), "I2C Read: Reg=0x%02X, Len=%lu\r\n", reg_addr, len);
 8003ac4:	193b      	adds	r3, r7, r4
 8003ac6:	7819      	ldrb	r1, [r3, #0]
 8003ac8:	4a22      	ldr	r2, [pc, #136]	@ (8003b54 <bme680_i2c_read+0xa4>)
 8003aca:	2514      	movs	r5, #20
 8003acc:	1978      	adds	r0, r7, r5
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	000b      	movs	r3, r1
 8003ad4:	2180      	movs	r1, #128	@ 0x80
 8003ad6:	f00d fa53 	bl	8010f80 <sniprintf>
    debug_print(debug_msg);
 8003ada:	197b      	adds	r3, r7, r5
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7ff ff5f 	bl	80039a0 <debug_print>
    
    // Read data from BME680 using I2C
    status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, reg_addr, 
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b299      	uxth	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2697      	movs	r6, #151	@ 0x97
 8003aee:	19bc      	adds	r4, r7, r6
 8003af0:	4819      	ldr	r0, [pc, #100]	@ (8003b58 <bme680_i2c_read+0xa8>)
 8003af2:	22fa      	movs	r2, #250	@ 0xfa
 8003af4:	0092      	lsls	r2, r2, #2
 8003af6:	9202      	str	r2, [sp, #8]
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2301      	movs	r3, #1
 8003b00:	000a      	movs	r2, r1
 8003b02:	21ec      	movs	r1, #236	@ 0xec
 8003b04:	f008 fb56 	bl	800c1b4 <HAL_I2C_Mem_Read>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	7023      	strb	r3, [r4, #0]
                              I2C_MEMADD_SIZE_8BIT, reg_data, len, 1000);
    
    if (status == HAL_OK) {
 8003b0c:	19bb      	adds	r3, r7, r6
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10c      	bne.n	8003b2e <bme680_i2c_read+0x7e>
        snprintf(debug_msg, sizeof(debug_msg), "I2C Read Success: Data[0]=0x%02X\r\n", reg_data[0]);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	4a10      	ldr	r2, [pc, #64]	@ (8003b5c <bme680_i2c_read+0xac>)
 8003b1a:	1978      	adds	r0, r7, r5
 8003b1c:	2180      	movs	r1, #128	@ 0x80
 8003b1e:	f00d fa2f 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8003b22:	197b      	adds	r3, r7, r5
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7ff ff3b 	bl	80039a0 <debug_print>
        return BME68X_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e00e      	b.n	8003b4c <bme680_i2c_read+0x9c>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "I2C Read Failed: Status=%d\r\n", status);
 8003b2e:	2397      	movs	r3, #151	@ 0x97
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <bme680_i2c_read+0xb0>)
 8003b36:	2414      	movs	r4, #20
 8003b38:	1938      	adds	r0, r7, r4
 8003b3a:	2180      	movs	r1, #128	@ 0x80
 8003b3c:	f00d fa20 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8003b40:	193b      	adds	r3, r7, r4
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7ff ff2c 	bl	80039a0 <debug_print>
        return BME68X_E_COM_FAIL;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	425b      	negs	r3, r3
    }
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b027      	add	sp, #156	@ 0x9c
 8003b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b54:	08013dd4 	.word	0x08013dd4
 8003b58:	200002e8 	.word	0x200002e8
 8003b5c:	08013df4 	.word	0x08013df4
 8003b60:	08013e18 	.word	0x08013e18

08003b64 <bme680_i2c_write>:

// Enhanced I2C write function for BME680 with detailed error reporting
int8_t bme680_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b66:	b0ab      	sub	sp, #172	@ 0xac
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	250f      	movs	r5, #15
 8003b72:	197b      	adds	r3, r7, r5
 8003b74:	1c02      	adds	r2, r0, #0
 8003b76:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;
    char debug_msg[128];
    
    // Debug: Print write attempt
    snprintf(debug_msg, sizeof(debug_msg), "I2C Write: Reg=0x%02X, Data[0]=0x%02X, Len=%lu\r\n", 
 8003b78:	197b      	adds	r3, r7, r5
 8003b7a:	7819      	ldrb	r1, [r3, #0]
             reg_addr, reg_data[0], len);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
    snprintf(debug_msg, sizeof(debug_msg), "I2C Write: Reg=0x%02X, Data[0]=0x%02X, Len=%lu\r\n", 
 8003b80:	001c      	movs	r4, r3
 8003b82:	4a20      	ldr	r2, [pc, #128]	@ (8003c04 <bme680_i2c_write+0xa0>)
 8003b84:	2614      	movs	r6, #20
 8003b86:	19b8      	adds	r0, r7, r6
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	9400      	str	r4, [sp, #0]
 8003b8e:	000b      	movs	r3, r1
 8003b90:	2180      	movs	r1, #128	@ 0x80
 8003b92:	f00d f9f5 	bl	8010f80 <sniprintf>
    debug_print(debug_msg);
 8003b96:	19bb      	adds	r3, r7, r6
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff ff01 	bl	80039a0 <debug_print>
    
    // Write data to BME680 using I2C
    status = HAL_I2C_Mem_Write(&hi2c1, BME68X_I2C_ADDR_LOW << 1, reg_addr, 
 8003b9e:	197b      	adds	r3, r7, r5
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	b299      	uxth	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2597      	movs	r5, #151	@ 0x97
 8003baa:	197c      	adds	r4, r7, r5
 8003bac:	4816      	ldr	r0, [pc, #88]	@ (8003c08 <bme680_i2c_write+0xa4>)
 8003bae:	22fa      	movs	r2, #250	@ 0xfa
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	9202      	str	r2, [sp, #8]
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	000a      	movs	r2, r1
 8003bbe:	21ec      	movs	r1, #236	@ 0xec
 8003bc0:	f008 f9ca 	bl	800bf58 <HAL_I2C_Mem_Write>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	7023      	strb	r3, [r4, #0]
                               I2C_MEMADD_SIZE_8BIT, (uint8_t*)reg_data, len, 1000);
    
    if (status == HAL_OK) {
 8003bc8:	197b      	adds	r3, r7, r5
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <bme680_i2c_write+0x78>
        debug_print("I2C Write Success\r\n");
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c0c <bme680_i2c_write+0xa8>)
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7ff fee4 	bl	80039a0 <debug_print>
        return BME68X_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e00e      	b.n	8003bfa <bme680_i2c_write+0x96>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "I2C Write Failed: Status=%d\r\n", status);
 8003bdc:	2397      	movs	r3, #151	@ 0x97
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	4a0b      	ldr	r2, [pc, #44]	@ (8003c10 <bme680_i2c_write+0xac>)
 8003be4:	2414      	movs	r4, #20
 8003be6:	1938      	adds	r0, r7, r4
 8003be8:	2180      	movs	r1, #128	@ 0x80
 8003bea:	f00d f9c9 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8003bee:	193b      	adds	r3, r7, r4
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7ff fed5 	bl	80039a0 <debug_print>
        return BME68X_E_COM_FAIL;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	425b      	negs	r3, r3
    }
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b027      	add	sp, #156	@ 0x9c
 8003c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	08013e38 	.word	0x08013e38
 8003c08:	200002e8 	.word	0x200002e8
 8003c0c:	08013e6c 	.word	0x08013e6c
 8003c10:	08013e80 	.word	0x08013e80

08003c14 <bme680_delay_us>:

// Delay function for BME680
void bme680_delay_us(uint32_t period, void *intf_ptr)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
    // For small delays, use a simple loop
    // For larger delays, use HAL_Delay
    if (period < 1000) {
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	23fa      	movs	r3, #250	@ 0xfa
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d20c      	bcs.n	8003c42 <bme680_delay_us+0x2e>
        // Simple microsecond delay loop
        volatile uint32_t i;
        for (i = 0; i < period * 16; i++) {
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	e003      	b.n	8003c36 <bme680_delay_us+0x22>
            __NOP();
 8003c2e:	46c0      	nop			@ (mov r8, r8)
        for (i = 0; i < period * 16; i++) {
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	011a      	lsls	r2, r3, #4
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d8f6      	bhi.n	8003c2e <bme680_delay_us+0x1a>
        }
    } else {
        // Convert microseconds to milliseconds for HAL_Delay
        HAL_Delay(period / 1000);
    }
}
 8003c40:	e009      	b.n	8003c56 <bme680_delay_us+0x42>
        HAL_Delay(period / 1000);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	22fa      	movs	r2, #250	@ 0xfa
 8003c46:	0091      	lsls	r1, r2, #2
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7fc fa81 	bl	8000150 <__udivsi3>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	0018      	movs	r0, r3
 8003c52:	f007 fe67 	bl	800b924 <HAL_Delay>
}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <bme680_check_sensor_presence>:

// Enhanced sensor presence check with multiple address attempts
int8_t bme680_check_sensor_presence(void)
{
 8003c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c62:	b0ab      	sub	sp, #172	@ 0xac
 8003c64:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t chip_id;
    char debug_msg[128];
    
    debug_print("Checking BME680 sensor presence...\r\n");
 8003c66:	4b67      	ldr	r3, [pc, #412]	@ (8003e04 <bme680_check_sensor_presence+0x1a4>)
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7ff fe99 	bl	80039a0 <debug_print>
    
    // Try both possible addresses
    uint8_t addresses[] = {BME68X_I2C_ADDR_LOW, BME68X_I2C_ADDR_HIGH};
 8003c6e:	230c      	movs	r3, #12
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	4a65      	ldr	r2, [pc, #404]	@ (8003e08 <bme680_check_sensor_presence+0x1a8>)
 8003c74:	801a      	strh	r2, [r3, #0]
    const char* addr_names[] = {"0x76", "0x77"};
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	4a64      	ldr	r2, [pc, #400]	@ (8003e0c <bme680_check_sensor_presence+0x1ac>)
 8003c7a:	ca03      	ldmia	r2!, {r0, r1}
 8003c7c:	c303      	stmia	r3!, {r0, r1}
    
    for (int i = 0; i < 2; i++) {
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2294      	movs	r2, #148	@ 0x94
 8003c82:	18ba      	adds	r2, r7, r2
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e0ad      	b.n	8003de4 <bme680_check_sensor_presence+0x184>
        snprintf(debug_msg, sizeof(debug_msg), "Trying address %s...\r\n", addr_names[i]);
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	2694      	movs	r6, #148	@ 0x94
 8003c8c:	19ba      	adds	r2, r7, r6
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	0092      	lsls	r2, r2, #2
 8003c92:	58d3      	ldr	r3, [r2, r3]
 8003c94:	4a5e      	ldr	r2, [pc, #376]	@ (8003e10 <bme680_check_sensor_presence+0x1b0>)
 8003c96:	2510      	movs	r5, #16
 8003c98:	1978      	adds	r0, r7, r5
 8003c9a:	2180      	movs	r1, #128	@ 0x80
 8003c9c:	f00d f970 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8003ca0:	197b      	adds	r3, r7, r5
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7ff fe7c 	bl	80039a0 <debug_print>
        
        // First check if device responds
        status = HAL_I2C_IsDeviceReady(&hi2c1, addresses[i] << 1, 3, 1000);
 8003ca8:	230c      	movs	r3, #12
 8003caa:	18fa      	adds	r2, r7, r3
 8003cac:	19b9      	adds	r1, r7, r6
 8003cae:	680b      	ldr	r3, [r1, #0]
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	18db      	adds	r3, r3, r3
 8003cb6:	b299      	uxth	r1, r3
 8003cb8:	2493      	movs	r4, #147	@ 0x93
 8003cba:	193c      	adds	r4, r7, r4
 8003cbc:	23fa      	movs	r3, #250	@ 0xfa
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4854      	ldr	r0, [pc, #336]	@ (8003e14 <bme680_check_sensor_presence+0x1b4>)
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	f008 fbaa 	bl	800c41c <HAL_I2C_IsDeviceReady>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	7023      	strb	r3, [r4, #0]
        if (status == HAL_OK) {
 8003ccc:	2493      	movs	r4, #147	@ 0x93
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d170      	bne.n	8003db8 <bme680_check_sensor_presence+0x158>
            snprintf(debug_msg, sizeof(debug_msg), "Device responds at address %s\r\n", addr_names[i]);
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	19ba      	adds	r2, r7, r6
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	0092      	lsls	r2, r2, #2
 8003cde:	58d3      	ldr	r3, [r2, r3]
 8003ce0:	4a4d      	ldr	r2, [pc, #308]	@ (8003e18 <bme680_check_sensor_presence+0x1b8>)
 8003ce2:	1978      	adds	r0, r7, r5
 8003ce4:	2180      	movs	r1, #128	@ 0x80
 8003ce6:	f00d f94b 	bl	8010f80 <sniprintf>
            debug_print(debug_msg);
 8003cea:	197b      	adds	r3, r7, r5
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff fe57 	bl	80039a0 <debug_print>
            
            // Try to read chip ID
            status = HAL_I2C_Mem_Read(&hi2c1, addresses[i] << 1, BME68X_REG_CHIP_ID, 
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	18fa      	adds	r2, r7, r3
 8003cf6:	19bb      	adds	r3, r7, r6
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	18d3      	adds	r3, r2, r3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	18db      	adds	r3, r3, r3
 8003d00:	b299      	uxth	r1, r3
 8003d02:	193c      	adds	r4, r7, r4
 8003d04:	4843      	ldr	r0, [pc, #268]	@ (8003e14 <bme680_check_sensor_presence+0x1b4>)
 8003d06:	23fa      	movs	r3, #250	@ 0xfa
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	9302      	str	r3, [sp, #8]
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	2392      	movs	r3, #146	@ 0x92
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2301      	movs	r3, #1
 8003d18:	22d0      	movs	r2, #208	@ 0xd0
 8003d1a:	f008 fa4b 	bl	800c1b4 <HAL_I2C_Mem_Read>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	7023      	strb	r3, [r4, #0]
                                      I2C_MEMADD_SIZE_8BIT, &chip_id, 1, 1000);
            
            if (status == HAL_OK) {
 8003d22:	2493      	movs	r4, #147	@ 0x93
 8003d24:	193b      	adds	r3, r7, r4
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d134      	bne.n	8003d96 <bme680_check_sensor_presence+0x136>
                snprintf(debug_msg, sizeof(debug_msg), "Chip ID read: 0x%02X (Expected: 0x%02X)\r\n", 
 8003d2c:	2492      	movs	r4, #146	@ 0x92
 8003d2e:	193b      	adds	r3, r7, r4
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	0019      	movs	r1, r3
 8003d34:	4a39      	ldr	r2, [pc, #228]	@ (8003e1c <bme680_check_sensor_presence+0x1bc>)
 8003d36:	1978      	adds	r0, r7, r5
 8003d38:	2361      	movs	r3, #97	@ 0x61
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	000b      	movs	r3, r1
 8003d3e:	2180      	movs	r1, #128	@ 0x80
 8003d40:	f00d f91e 	bl	8010f80 <sniprintf>
                         chip_id, BME68X_CHIP_ID);
                debug_print(debug_msg);
 8003d44:	197b      	adds	r3, r7, r5
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7ff fe2a 	bl	80039a0 <debug_print>
                
                if (chip_id == BME68X_CHIP_ID) {
 8003d4c:	193b      	adds	r3, r7, r4
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b61      	cmp	r3, #97	@ 0x61
 8003d52:	d10f      	bne.n	8003d74 <bme680_check_sensor_presence+0x114>
                    snprintf(debug_msg, sizeof(debug_msg), "✓ BME680 found at address %s\r\n", addr_names[i]);
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	19ba      	adds	r2, r7, r6
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	58d3      	ldr	r3, [r2, r3]
 8003d5e:	4a30      	ldr	r2, [pc, #192]	@ (8003e20 <bme680_check_sensor_presence+0x1c0>)
 8003d60:	1978      	adds	r0, r7, r5
 8003d62:	2180      	movs	r1, #128	@ 0x80
 8003d64:	f00d f90c 	bl	8010f80 <sniprintf>
                    debug_print(debug_msg);
 8003d68:	197b      	adds	r3, r7, r5
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff fe18 	bl	80039a0 <debug_print>
                    return BME68X_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e043      	b.n	8003dfc <bme680_check_sensor_presence+0x19c>
                } else {
                    snprintf(debug_msg, sizeof(debug_msg), "✗ Wrong chip ID at address %s\r\n", addr_names[i]);
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	2294      	movs	r2, #148	@ 0x94
 8003d78:	18ba      	adds	r2, r7, r2
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	0092      	lsls	r2, r2, #2
 8003d7e:	58d3      	ldr	r3, [r2, r3]
 8003d80:	4a28      	ldr	r2, [pc, #160]	@ (8003e24 <bme680_check_sensor_presence+0x1c4>)
 8003d82:	2410      	movs	r4, #16
 8003d84:	1938      	adds	r0, r7, r4
 8003d86:	2180      	movs	r1, #128	@ 0x80
 8003d88:	f00d f8fa 	bl	8010f80 <sniprintf>
                    debug_print(debug_msg);
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff fe06 	bl	80039a0 <debug_print>
 8003d94:	e020      	b.n	8003dd8 <bme680_check_sensor_presence+0x178>
                }
            } else {
                snprintf(debug_msg, sizeof(debug_msg), "✗ Failed to read chip ID at address %s\r\n", addr_names[i]);
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	2294      	movs	r2, #148	@ 0x94
 8003d9a:	18ba      	adds	r2, r7, r2
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	58d3      	ldr	r3, [r2, r3]
 8003da2:	4a21      	ldr	r2, [pc, #132]	@ (8003e28 <bme680_check_sensor_presence+0x1c8>)
 8003da4:	2410      	movs	r4, #16
 8003da6:	1938      	adds	r0, r7, r4
 8003da8:	2180      	movs	r1, #128	@ 0x80
 8003daa:	f00d f8e9 	bl	8010f80 <sniprintf>
                debug_print(debug_msg);
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff fdf5 	bl	80039a0 <debug_print>
 8003db6:	e00f      	b.n	8003dd8 <bme680_check_sensor_presence+0x178>
            }
        } else {
            snprintf(debug_msg, sizeof(debug_msg), "✗ No device at address %s\r\n", addr_names[i]);
 8003db8:	1d3b      	adds	r3, r7, #4
 8003dba:	2294      	movs	r2, #148	@ 0x94
 8003dbc:	18ba      	adds	r2, r7, r2
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	0092      	lsls	r2, r2, #2
 8003dc2:	58d3      	ldr	r3, [r2, r3]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	@ (8003e2c <bme680_check_sensor_presence+0x1cc>)
 8003dc6:	2410      	movs	r4, #16
 8003dc8:	1938      	adds	r0, r7, r4
 8003dca:	2180      	movs	r1, #128	@ 0x80
 8003dcc:	f00d f8d8 	bl	8010f80 <sniprintf>
            debug_print(debug_msg);
 8003dd0:	193b      	adds	r3, r7, r4
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7ff fde4 	bl	80039a0 <debug_print>
    for (int i = 0; i < 2; i++) {
 8003dd8:	2294      	movs	r2, #148	@ 0x94
 8003dda:	18bb      	adds	r3, r7, r2
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	18ba      	adds	r2, r7, r2
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	2394      	movs	r3, #148	@ 0x94
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	dc00      	bgt.n	8003df0 <bme680_check_sensor_presence+0x190>
 8003dee:	e74b      	b.n	8003c88 <bme680_check_sensor_presence+0x28>
        }
    }
    
    debug_print("✗ BME680 sensor not found on any address\r\n");
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <bme680_check_sensor_presence+0x1d0>)
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7ff fdd4 	bl	80039a0 <debug_print>
    return BME68X_E_DEV_NOT_FOUND;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	425b      	negs	r3, r3
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b027      	add	sp, #156	@ 0x9c
 8003e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e04:	08013ea0 	.word	0x08013ea0
 8003e08:	00007776 	.word	0x00007776
 8003e0c:	08014000 	.word	0x08014000
 8003e10:	08013ec8 	.word	0x08013ec8
 8003e14:	200002e8 	.word	0x200002e8
 8003e18:	08013ee0 	.word	0x08013ee0
 8003e1c:	08013f00 	.word	0x08013f00
 8003e20:	08013f2c 	.word	0x08013f2c
 8003e24:	08013f50 	.word	0x08013f50
 8003e28:	08013f74 	.word	0x08013f74
 8003e2c:	08013fa0 	.word	0x08013fa0
 8003e30:	08013fc0 	.word	0x08013fc0

08003e34 <bme680_init_sensor>:

// Enhanced sensor initialization with detailed error reporting
int8_t bme680_init_sensor(void)
{
 8003e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e36:	b0a9      	sub	sp, #164	@ 0xa4
 8003e38:	af00      	add	r7, sp, #0
    int8_t rslt;
    char debug_msg[128];
    
    debug_print("Initializing BME680 sensor...\r\n");
 8003e3a:	4b53      	ldr	r3, [pc, #332]	@ (8003f88 <bme680_init_sensor+0x154>)
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7ff fdaf 	bl	80039a0 <debug_print>
    
    // Initialize device structure
    bme680_dev.intf = BME68X_I2C_INTF;
 8003e42:	4b52      	ldr	r3, [pc, #328]	@ (8003f8c <bme680_init_sensor+0x158>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	731a      	strb	r2, [r3, #12]
    bme680_dev.read = bme680_i2c_read;
 8003e48:	4b50      	ldr	r3, [pc, #320]	@ (8003f8c <bme680_init_sensor+0x158>)
 8003e4a:	4a51      	ldr	r2, [pc, #324]	@ (8003f90 <bme680_init_sensor+0x15c>)
 8003e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    bme680_dev.write = bme680_i2c_write;
 8003e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8003f8c <bme680_init_sensor+0x158>)
 8003e50:	4a50      	ldr	r2, [pc, #320]	@ (8003f94 <bme680_init_sensor+0x160>)
 8003e52:	645a      	str	r2, [r3, #68]	@ 0x44
    bme680_dev.delay_us = bme680_delay_us;
 8003e54:	4b4d      	ldr	r3, [pc, #308]	@ (8003f8c <bme680_init_sensor+0x158>)
 8003e56:	4a50      	ldr	r2, [pc, #320]	@ (8003f98 <bme680_init_sensor+0x164>)
 8003e58:	649a      	str	r2, [r3, #72]	@ 0x48
    bme680_dev.intf_ptr = NULL;
 8003e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8003f8c <bme680_init_sensor+0x158>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	605a      	str	r2, [r3, #4]
    bme680_dev.amb_temp = 25;
 8003e60:	4b4a      	ldr	r3, [pc, #296]	@ (8003f8c <bme680_init_sensor+0x158>)
 8003e62:	2219      	movs	r2, #25
 8003e64:	739a      	strb	r2, [r3, #14]
    
    // Initialize the sensor
    rslt = bme68x_init(&bme680_dev);
 8003e66:	259f      	movs	r5, #159	@ 0x9f
 8003e68:	197c      	adds	r4, r7, r5
 8003e6a:	4b48      	ldr	r3, [pc, #288]	@ (8003f8c <bme680_init_sensor+0x158>)
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f001 fc7d 	bl	800576c <bme68x_init>
 8003e72:	0003      	movs	r3, r0
 8003e74:	7023      	strb	r3, [r4, #0]
    
    snprintf(debug_msg, sizeof(debug_msg), "BME68X Init Result: %d\r\n", rslt);
 8003e76:	002c      	movs	r4, r5
 8003e78:	193b      	adds	r3, r7, r4
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	b25b      	sxtb	r3, r3
 8003e7e:	4a47      	ldr	r2, [pc, #284]	@ (8003f9c <bme680_init_sensor+0x168>)
 8003e80:	261c      	movs	r6, #28
 8003e82:	19b8      	adds	r0, r7, r6
 8003e84:	2180      	movs	r1, #128	@ 0x80
 8003e86:	f00d f87b 	bl	8010f80 <sniprintf>
    debug_print(debug_msg);
 8003e8a:	19bb      	adds	r3, r7, r6
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff fd87 	bl	80039a0 <debug_print>
    
    if (rslt == BME68X_OK) {
 8003e92:	193b      	adds	r3, r7, r4
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d168      	bne.n	8003f6e <bme680_init_sensor+0x13a>
        debug_print("✓ BME68X library initialization successful\r\n");
 8003e9c:	4b40      	ldr	r3, [pc, #256]	@ (8003fa0 <bme680_init_sensor+0x16c>)
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7ff fd7e 	bl	80039a0 <debug_print>
        
        // Configure sensor settings
        struct bme68x_conf conf;
        conf.os_hum = BME68X_OS_1X;
 8003ea4:	2114      	movs	r1, #20
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
        conf.os_pres = BME68X_OS_1X;
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	2201      	movs	r2, #1
 8003eb0:	709a      	strb	r2, [r3, #2]
        conf.os_temp = BME68X_OS_1X;
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	705a      	strb	r2, [r3, #1]
        conf.filter = BME68X_FILTER_OFF;
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	2200      	movs	r2, #0
 8003ebc:	70da      	strb	r2, [r3, #3]
        conf.odr = BME68X_ODR_NONE;
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	711a      	strb	r2, [r3, #4]
        
        rslt = bme68x_set_conf(&conf, &bme680_dev);
 8003ec4:	0025      	movs	r5, r4
 8003ec6:	193c      	adds	r4, r7, r4
 8003ec8:	4a30      	ldr	r2, [pc, #192]	@ (8003f8c <bme680_init_sensor+0x158>)
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	0011      	movs	r1, r2
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f001 fde6 	bl	8005aa0 <bme68x_set_conf>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	7023      	strb	r3, [r4, #0]
        
        snprintf(debug_msg, sizeof(debug_msg), "BME68X Config Result: %d\r\n", rslt);
 8003ed8:	002c      	movs	r4, r5
 8003eda:	193b      	adds	r3, r7, r4
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b25b      	sxtb	r3, r3
 8003ee0:	4a30      	ldr	r2, [pc, #192]	@ (8003fa4 <bme680_init_sensor+0x170>)
 8003ee2:	19b8      	adds	r0, r7, r6
 8003ee4:	2180      	movs	r1, #128	@ 0x80
 8003ee6:	f00d f84b 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8003eea:	19bb      	adds	r3, r7, r6
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7ff fd57 	bl	80039a0 <debug_print>
        
        if (rslt == BME68X_OK) {
 8003ef2:	193b      	adds	r3, r7, r4
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d133      	bne.n	8003f64 <bme680_init_sensor+0x130>
            debug_print("✓ BME68X configuration successful\r\n");
 8003efc:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa8 <bme680_init_sensor+0x174>)
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fd4e 	bl	80039a0 <debug_print>
            
            // Configure gas sensor (optional - for gas resistance measurement)
            struct bme68x_heatr_conf heatr_conf;
            heatr_conf.enable = BME68X_DISABLE; // Disable gas sensor for now
 8003f04:	003b      	movs	r3, r7
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
            heatr_conf.heatr_temp = 300;
 8003f0a:	003b      	movs	r3, r7
 8003f0c:	2296      	movs	r2, #150	@ 0x96
 8003f0e:	0052      	lsls	r2, r2, #1
 8003f10:	805a      	strh	r2, [r3, #2]
            heatr_conf.heatr_dur = 100;
 8003f12:	003b      	movs	r3, r7
 8003f14:	2264      	movs	r2, #100	@ 0x64
 8003f16:	809a      	strh	r2, [r3, #4]
            
            rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme680_dev);
 8003f18:	0025      	movs	r5, r4
 8003f1a:	193c      	adds	r4, r7, r4
 8003f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f8c <bme680_init_sensor+0x158>)
 8003f1e:	003b      	movs	r3, r7
 8003f20:	0019      	movs	r1, r3
 8003f22:	2001      	movs	r0, #1
 8003f24:	f002 f96a 	bl	80061fc <bme68x_set_heatr_conf>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	7023      	strb	r3, [r4, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), "BME68X Gas Config Result: %d\r\n", rslt);
 8003f2c:	002c      	movs	r4, r5
 8003f2e:	193b      	adds	r3, r7, r4
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	4a1d      	ldr	r2, [pc, #116]	@ (8003fac <bme680_init_sensor+0x178>)
 8003f36:	19b8      	adds	r0, r7, r6
 8003f38:	2180      	movs	r1, #128	@ 0x80
 8003f3a:	f00d f821 	bl	8010f80 <sniprintf>
            debug_print(debug_msg);
 8003f3e:	19bb      	adds	r3, r7, r6
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff fd2d 	bl	80039a0 <debug_print>
            
            if (rslt == BME68X_OK) {
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d104      	bne.n	8003f5a <bme680_init_sensor+0x126>
                debug_print("✓ BME680 sensor fully initialized\r\n");
 8003f50:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <bme680_init_sensor+0x17c>)
 8003f52:	0018      	movs	r0, r3
 8003f54:	f7ff fd24 	bl	80039a0 <debug_print>
 8003f58:	e00d      	b.n	8003f76 <bme680_init_sensor+0x142>
            } else {
                debug_print("⚠ Gas sensor configuration failed, but sensor is usable\r\n");
 8003f5a:	4b16      	ldr	r3, [pc, #88]	@ (8003fb4 <bme680_init_sensor+0x180>)
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7ff fd1f 	bl	80039a0 <debug_print>
 8003f62:	e008      	b.n	8003f76 <bme680_init_sensor+0x142>
            }
        } else {
            debug_print("✗ BME68X configuration failed\r\n");
 8003f64:	4b14      	ldr	r3, [pc, #80]	@ (8003fb8 <bme680_init_sensor+0x184>)
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff fd1a 	bl	80039a0 <debug_print>
 8003f6c:	e003      	b.n	8003f76 <bme680_init_sensor+0x142>
        }
    } else {
        debug_print("✗ BME68X library initialization failed\r\n");
 8003f6e:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <bme680_init_sensor+0x188>)
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7ff fd15 	bl	80039a0 <debug_print>
    }
    
    return rslt;
 8003f76:	239f      	movs	r3, #159	@ 0x9f
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b25b      	sxtb	r3, r3
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b029      	add	sp, #164	@ 0xa4
 8003f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	08014008 	.word	0x08014008
 8003f8c:	20000210 	.word	0x20000210
 8003f90:	08003ab1 	.word	0x08003ab1
 8003f94:	08003b65 	.word	0x08003b65
 8003f98:	08003c15 	.word	0x08003c15
 8003f9c:	08014028 	.word	0x08014028
 8003fa0:	08014044 	.word	0x08014044
 8003fa4:	08014074 	.word	0x08014074
 8003fa8:	08014090 	.word	0x08014090
 8003fac:	080140b8 	.word	0x080140b8
 8003fb0:	080140d8 	.word	0x080140d8
 8003fb4:	08014100 	.word	0x08014100
 8003fb8:	0801413c 	.word	0x0801413c
 8003fbc:	08014160 	.word	0x08014160

08003fc0 <manual_decode_ieee754>:

// Manual IEEE 754 decoder for debugging
float manual_decode_ieee754(uint32_t hex_value) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
    // Extract sign, exponent, and mantissa
    uint32_t sign = (hex_value >> 31) & 0x1;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	0fdb      	lsrs	r3, r3, #31
 8003fcc:	617b      	str	r3, [r7, #20]
    uint32_t exponent = (hex_value >> 23) & 0xFF;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	0ddb      	lsrs	r3, r3, #23
 8003fd2:	22ff      	movs	r2, #255	@ 0xff
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
    uint32_t mantissa = hex_value & 0x7FFFFF;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	025b      	lsls	r3, r3, #9
 8003fdc:	0a5b      	lsrs	r3, r3, #9
 8003fde:	60fb      	str	r3, [r7, #12]
    
    // Handle special cases
    if (exponent == 0) {
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <manual_decode_ieee754+0x2a>
        return 0.0f; // Zero
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e069      	b.n	80040be <manual_decode_ieee754+0xfe>
    }
    if (exponent == 0xFF) {
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2bff      	cmp	r3, #255	@ 0xff
 8003fee:	d10c      	bne.n	800400a <manual_decode_ieee754+0x4a>
        if (mantissa == 0) {
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d107      	bne.n	8004006 <manual_decode_ieee754+0x46>
            return sign ? -INFINITY : INFINITY; // Infinity
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <manual_decode_ieee754+0x40>
 8003ffc:	4b32      	ldr	r3, [pc, #200]	@ (80040c8 <manual_decode_ieee754+0x108>)
 8003ffe:	e05e      	b.n	80040be <manual_decode_ieee754+0xfe>
 8004000:	23ff      	movs	r3, #255	@ 0xff
 8004002:	05db      	lsls	r3, r3, #23
 8004004:	e05b      	b.n	80040be <manual_decode_ieee754+0xfe>
        } else {
            return NAN; // NaN
 8004006:	4b31      	ldr	r3, [pc, #196]	@ (80040cc <manual_decode_ieee754+0x10c>)
 8004008:	e059      	b.n	80040be <manual_decode_ieee754+0xfe>
        }
    }
    
    // Normal case
    float result = 1.0f;
 800400a:	23fe      	movs	r3, #254	@ 0xfe
 800400c:	059b      	lsls	r3, r3, #22
 800400e:	61fb      	str	r3, [r7, #28]
    for (int i = 22; i >= 0; i--) {
 8004010:	2316      	movs	r3, #22
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	e020      	b.n	8004058 <manual_decode_ieee754+0x98>
        if (mantissa & (1 << i)) {
 8004016:	2201      	movs	r2, #1
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	409a      	lsls	r2, r3
 800401c:	0013      	movs	r3, r2
 800401e:	001a      	movs	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4013      	ands	r3, r2
 8004024:	d015      	beq.n	8004052 <manual_decode_ieee754+0x92>
            result += 1.0f / (1 << (23 - i));
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2217      	movs	r2, #23
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2201      	movs	r2, #1
 800402e:	409a      	lsls	r2, r3
 8004030:	0013      	movs	r3, r2
 8004032:	0018      	movs	r0, r3
 8004034:	f7fd fb8a 	bl	800174c <__aeabi_i2f>
 8004038:	1c03      	adds	r3, r0, #0
 800403a:	1c19      	adds	r1, r3, #0
 800403c:	20fe      	movs	r0, #254	@ 0xfe
 800403e:	0580      	lsls	r0, r0, #22
 8004040:	f7fc fdd8 	bl	8000bf4 <__aeabi_fdiv>
 8004044:	1c03      	adds	r3, r0, #0
 8004046:	1c19      	adds	r1, r3, #0
 8004048:	69f8      	ldr	r0, [r7, #28]
 800404a:	f7fc fbe1 	bl	8000810 <__aeabi_fadd>
 800404e:	1c03      	adds	r3, r0, #0
 8004050:	61fb      	str	r3, [r7, #28]
    for (int i = 22; i >= 0; i--) {
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	3b01      	subs	r3, #1
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	dadb      	bge.n	8004016 <manual_decode_ieee754+0x56>
        }
    }
    
    // Apply exponent
    int exp = (int)exponent - 127;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3b7f      	subs	r3, #127	@ 0x7f
 8004062:	60bb      	str	r3, [r7, #8]
    if (exp > 0) {
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	dd0e      	ble.n	8004088 <manual_decode_ieee754+0xc8>
        result *= (1 << exp);
 800406a:	2201      	movs	r2, #1
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	409a      	lsls	r2, r3
 8004070:	0013      	movs	r3, r2
 8004072:	0018      	movs	r0, r3
 8004074:	f7fd fb6a 	bl	800174c <__aeabi_i2f>
 8004078:	1c03      	adds	r3, r0, #0
 800407a:	1c19      	adds	r1, r3, #0
 800407c:	69f8      	ldr	r0, [r7, #28]
 800407e:	f7fc ff87 	bl	8000f90 <__aeabi_fmul>
 8004082:	1c03      	adds	r3, r0, #0
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	e011      	b.n	80040ac <manual_decode_ieee754+0xec>
    } else if (exp < 0) {
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	da0e      	bge.n	80040ac <manual_decode_ieee754+0xec>
        result /= (1 << (-exp));
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	425b      	negs	r3, r3
 8004092:	2201      	movs	r2, #1
 8004094:	409a      	lsls	r2, r3
 8004096:	0013      	movs	r3, r2
 8004098:	0018      	movs	r0, r3
 800409a:	f7fd fb57 	bl	800174c <__aeabi_i2f>
 800409e:	1c03      	adds	r3, r0, #0
 80040a0:	1c19      	adds	r1, r3, #0
 80040a2:	69f8      	ldr	r0, [r7, #28]
 80040a4:	f7fc fda6 	bl	8000bf4 <__aeabi_fdiv>
 80040a8:	1c03      	adds	r3, r0, #0
 80040aa:	61fb      	str	r3, [r7, #28]
    }
    
    // Apply sign
    return sign ? -result : result;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <manual_decode_ieee754+0xfc>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2280      	movs	r2, #128	@ 0x80
 80040b6:	0612      	lsls	r2, r2, #24
 80040b8:	4053      	eors	r3, r2
 80040ba:	e000      	b.n	80040be <manual_decode_ieee754+0xfe>
 80040bc:	69fb      	ldr	r3, [r7, #28]
}
 80040be:	1c18      	adds	r0, r3, #0
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b008      	add	sp, #32
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	ff800000 	.word	0xff800000
 80040cc:	7fc00000 	.word	0x7fc00000

080040d0 <decode_ieee754>:

// Decode IEEE 754 float value
float decode_ieee754(uint32_t hex_value) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
    union {
        uint32_t i;
        float f;
    } converter;
    converter.i = hex_value;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60fb      	str	r3, [r7, #12]
    return converter.f;
 80040dc:	68fb      	ldr	r3, [r7, #12]
}
 80040de:	1c18      	adds	r0, r3, #0
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b004      	add	sp, #16
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <is_float_invalid>:

// Check if float is NaN or infinite
int is_float_invalid(float value) {
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
    union {
        float f;
        uint32_t i;
    } converter;
    converter.f = value;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
    
    // Check for NaN (exponent all 1s, mantissa non-zero)
    if (((converter.i >> 23) & 0xFF) == 0xFF && (converter.i & 0x7FFFFF) != 0) {
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0ddb      	lsrs	r3, r3, #23
 80040f6:	22ff      	movs	r2, #255	@ 0xff
 80040f8:	4013      	ands	r3, r2
 80040fa:	2bff      	cmp	r3, #255	@ 0xff
 80040fc:	d105      	bne.n	800410a <is_float_invalid+0x24>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	025b      	lsls	r3, r3, #9
 8004102:	0a5b      	lsrs	r3, r3, #9
 8004104:	d001      	beq.n	800410a <is_float_invalid+0x24>
        return 1; // NaN
 8004106:	2301      	movs	r3, #1
 8004108:	e00c      	b.n	8004124 <is_float_invalid+0x3e>
    }
    
    // Check for infinite (exponent all 1s, mantissa zero)
    if (((converter.i >> 23) & 0xFF) == 0xFF && (converter.i & 0x7FFFFF) == 0) {
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	0ddb      	lsrs	r3, r3, #23
 800410e:	22ff      	movs	r2, #255	@ 0xff
 8004110:	4013      	ands	r3, r2
 8004112:	2bff      	cmp	r3, #255	@ 0xff
 8004114:	d105      	bne.n	8004122 <is_float_invalid+0x3c>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	025b      	lsls	r3, r3, #9
 800411a:	0a5b      	lsrs	r3, r3, #9
 800411c:	d101      	bne.n	8004122 <is_float_invalid+0x3c>
        return 2; // Infinite
 800411e:	2302      	movs	r3, #2
 8004120:	e000      	b.n	8004124 <is_float_invalid+0x3e>
    }
    
    return 0; // Valid
 8004122:	2300      	movs	r3, #0
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b004      	add	sp, #16
 800412a:	bd80      	pop	{r7, pc}

0800412c <bme680_read_sensor_data>:

// Read sensor data
int8_t bme680_read_sensor_data(struct bme68x_data *data)
{
 800412c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412e:	b0cd      	sub	sp, #308	@ 0x134
 8004130:	af06      	add	r7, sp, #24
 8004132:	60f8      	str	r0, [r7, #12]
    int8_t rslt;
    uint8_t n_data;
    char debug_msg[128];
    
    debug_print("Reading BME680 sensor data...\r\n");
 8004134:	4bf7      	ldr	r3, [pc, #988]	@ (8004514 <bme680_read_sensor_data+0x3e8>)
 8004136:	0018      	movs	r0, r3
 8004138:	f7ff fc32 	bl	80039a0 <debug_print>
    
    // Set operation mode to forced mode
    rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme680_dev);
 800413c:	2510      	movs	r5, #16
 800413e:	35ff      	adds	r5, #255	@ 0xff
 8004140:	2608      	movs	r6, #8
 8004142:	19ab      	adds	r3, r5, r6
 8004144:	19dc      	adds	r4, r3, r7
 8004146:	4bf4      	ldr	r3, [pc, #976]	@ (8004518 <bme680_read_sensor_data+0x3ec>)
 8004148:	0019      	movs	r1, r3
 800414a:	2001      	movs	r0, #1
 800414c:	f001 fdf8 	bl	8005d40 <bme68x_set_op_mode>
 8004150:	0003      	movs	r3, r0
 8004152:	7023      	strb	r3, [r4, #0]
    
    if (rslt == BME68X_OK) {
 8004154:	002c      	movs	r4, r5
 8004156:	0035      	movs	r5, r6
 8004158:	1963      	adds	r3, r4, r5
 800415a:	19db      	adds	r3, r3, r7
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	b25b      	sxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <bme680_read_sensor_data+0x3c>
 8004164:	f000 fd91 	bl	8004c8a <bme680_read_sensor_data+0xb5e>
        debug_print("✓ Forced mode set successfully\r\n");
 8004168:	4bec      	ldr	r3, [pc, #944]	@ (800451c <bme680_read_sensor_data+0x3f0>)
 800416a:	0018      	movs	r0, r3
 800416c:	f7ff fc18 	bl	80039a0 <debug_print>
        
        // Wait for measurement to complete
        uint32_t del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, NULL, &bme680_dev);
 8004170:	4be9      	ldr	r3, [pc, #932]	@ (8004518 <bme680_read_sensor_data+0x3ec>)
 8004172:	001a      	movs	r2, r3
 8004174:	2100      	movs	r1, #0
 8004176:	2001      	movs	r0, #1
 8004178:	f001 fe8a 	bl	8005e90 <bme68x_get_meas_dur>
 800417c:	0003      	movs	r3, r0
 800417e:	26f0      	movs	r6, #240	@ 0xf0
 8004180:	0029      	movs	r1, r5
 8004182:	1872      	adds	r2, r6, r1
 8004184:	19d2      	adds	r2, r2, r7
 8004186:	6013      	str	r3, [r2, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Measurement duration: %lu us\r\n", del_period);
 8004188:	1873      	adds	r3, r6, r1
 800418a:	19db      	adds	r3, r3, r7
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4ae4      	ldr	r2, [pc, #912]	@ (8004520 <bme680_read_sensor_data+0x3f4>)
 8004190:	2508      	movs	r5, #8
 8004192:	1868      	adds	r0, r5, r1
 8004194:	19c0      	adds	r0, r0, r7
 8004196:	2180      	movs	r1, #128	@ 0x80
 8004198:	f00c fef2 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 800419c:	2008      	movs	r0, #8
 800419e:	182b      	adds	r3, r5, r0
 80041a0:	19db      	adds	r3, r3, r7
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7ff fbfc 	bl	80039a0 <debug_print>
        
        bme680_dev.delay_us(del_period, bme680_dev.intf_ptr);
 80041a8:	4bdb      	ldr	r3, [pc, #876]	@ (8004518 <bme680_read_sensor_data+0x3ec>)
 80041aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041ac:	4bda      	ldr	r3, [pc, #872]	@ (8004518 <bme680_read_sensor_data+0x3ec>)
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	2008      	movs	r0, #8
 80041b2:	1833      	adds	r3, r6, r0
 80041b4:	19db      	adds	r3, r3, r7
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0018      	movs	r0, r3
 80041ba:	4790      	blx	r2
        
        // Read the data
        rslt = bme68x_get_data(BME68X_FORCED_MODE, data, &n_data, &bme680_dev);
 80041bc:	0026      	movs	r6, r4
 80041be:	2008      	movs	r0, #8
 80041c0:	1823      	adds	r3, r4, r0
 80041c2:	19dc      	adds	r4, r3, r7
 80041c4:	4bd4      	ldr	r3, [pc, #848]	@ (8004518 <bme680_read_sensor_data+0x3ec>)
 80041c6:	228b      	movs	r2, #139	@ 0x8b
 80041c8:	1812      	adds	r2, r2, r0
 80041ca:	19d2      	adds	r2, r2, r7
 80041cc:	68f9      	ldr	r1, [r7, #12]
 80041ce:	2001      	movs	r0, #1
 80041d0:	f001 fee2 	bl	8005f98 <bme68x_get_data>
 80041d4:	0003      	movs	r3, r0
 80041d6:	7023      	strb	r3, [r4, #0]
        
        snprintf(debug_msg, sizeof(debug_msg), "Data read result: %d, samples: %d\r\n", rslt, n_data);
 80041d8:	0034      	movs	r4, r6
 80041da:	2008      	movs	r0, #8
 80041dc:	1823      	adds	r3, r4, r0
 80041de:	19db      	adds	r3, r3, r7
 80041e0:	2100      	movs	r1, #0
 80041e2:	5659      	ldrsb	r1, [r3, r1]
 80041e4:	228b      	movs	r2, #139	@ 0x8b
 80041e6:	1813      	adds	r3, r2, r0
 80041e8:	19db      	adds	r3, r3, r7
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4acd      	ldr	r2, [pc, #820]	@ (8004524 <bme680_read_sensor_data+0x3f8>)
 80041ee:	182e      	adds	r6, r5, r0
 80041f0:	19f0      	adds	r0, r6, r7
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	000b      	movs	r3, r1
 80041f6:	2180      	movs	r1, #128	@ 0x80
 80041f8:	f00c fec2 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 80041fc:	002e      	movs	r6, r5
 80041fe:	2008      	movs	r0, #8
 8004200:	182b      	adds	r3, r5, r0
 8004202:	19db      	adds	r3, r3, r7
 8004204:	0018      	movs	r0, r3
 8004206:	f7ff fbcb 	bl	80039a0 <debug_print>
        
        if (rslt == BME68X_OK && n_data > 0) {
 800420a:	2008      	movs	r0, #8
 800420c:	1823      	adds	r3, r4, r0
 800420e:	19db      	adds	r3, r3, r7
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b25b      	sxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <bme680_read_sensor_data+0xf0>
 8004218:	f000 fd32 	bl	8004c80 <bme680_read_sensor_data+0xb54>
 800421c:	228b      	movs	r2, #139	@ 0x8b
 800421e:	1813      	adds	r3, r2, r0
 8004220:	19db      	adds	r3, r3, r7
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <bme680_read_sensor_data+0x100>
 8004228:	f000 fd2a 	bl	8004c80 <bme680_read_sensor_data+0xb54>
            debug_print("✓ Sensor data read successfully\r\n");
 800422c:	4bbe      	ldr	r3, [pc, #760]	@ (8004528 <bme680_read_sensor_data+0x3fc>)
 800422e:	0018      	movs	r0, r3
 8004230:	f7ff fbb6 	bl	80039a0 <debug_print>
            
            // Debug: Print raw values with more detail
            snprintf(debug_msg, sizeof(debug_msg), 
                     "Raw values - Temp: %.6f, Press: %.6f, Hum: %.6f\r\n",
                     data->temperature, data->pressure, data->humidity);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
            snprintf(debug_msg, sizeof(debug_msg), 
 8004238:	1c18      	adds	r0, r3, #0
 800423a:	f7ff fabd 	bl	80037b8 <__aeabi_f2d>
 800423e:	0004      	movs	r4, r0
 8004240:	000d      	movs	r5, r1
                     data->temperature, data->pressure, data->humidity);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
            snprintf(debug_msg, sizeof(debug_msg), 
 8004246:	1c18      	adds	r0, r3, #0
 8004248:	f7ff fab6 	bl	80037b8 <__aeabi_f2d>
 800424c:	6038      	str	r0, [r7, #0]
 800424e:	6079      	str	r1, [r7, #4]
                     data->temperature, data->pressure, data->humidity);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	691b      	ldr	r3, [r3, #16]
            snprintf(debug_msg, sizeof(debug_msg), 
 8004254:	1c18      	adds	r0, r3, #0
 8004256:	f7ff faaf 	bl	80037b8 <__aeabi_f2d>
 800425a:	0002      	movs	r2, r0
 800425c:	000b      	movs	r3, r1
 800425e:	49b3      	ldr	r1, [pc, #716]	@ (800452c <bme680_read_sensor_data+0x400>)
 8004260:	2008      	movs	r0, #8
 8004262:	1830      	adds	r0, r6, r0
 8004264:	19c0      	adds	r0, r0, r7
 8004266:	9204      	str	r2, [sp, #16]
 8004268:	9305      	str	r3, [sp, #20]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	9202      	str	r2, [sp, #8]
 8004270:	9303      	str	r3, [sp, #12]
 8004272:	9400      	str	r4, [sp, #0]
 8004274:	9501      	str	r5, [sp, #4]
 8004276:	000a      	movs	r2, r1
 8004278:	2180      	movs	r1, #128	@ 0x80
 800427a:	f00c fe81 	bl	8010f80 <sniprintf>
            debug_print(debug_msg);
 800427e:	2008      	movs	r0, #8
 8004280:	1833      	adds	r3, r6, r0
 8004282:	19db      	adds	r3, r3, r7
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff fb8b 	bl	80039a0 <debug_print>
            
            // Debug: Check if values are zero
            if (data->temperature == 0.0f && data->pressure == 0.0f && data->humidity == 0.0f) {
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2100      	movs	r1, #0
 8004290:	1c18      	adds	r0, r3, #0
 8004292:	f7fc f91d 	bl	80004d0 <__aeabi_fcmpeq>
 8004296:	1e03      	subs	r3, r0, #0
 8004298:	d013      	beq.n	80042c2 <bme680_read_sensor_data+0x196>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2100      	movs	r1, #0
 80042a0:	1c18      	adds	r0, r3, #0
 80042a2:	f7fc f915 	bl	80004d0 <__aeabi_fcmpeq>
 80042a6:	1e03      	subs	r3, r0, #0
 80042a8:	d00b      	beq.n	80042c2 <bme680_read_sensor_data+0x196>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2100      	movs	r1, #0
 80042b0:	1c18      	adds	r0, r3, #0
 80042b2:	f7fc f90d 	bl	80004d0 <__aeabi_fcmpeq>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d003      	beq.n	80042c2 <bme680_read_sensor_data+0x196>
                debug_print("⚠ All sensor values are zero - possible library issue\r\n");
 80042ba:	4b9d      	ldr	r3, [pc, #628]	@ (8004530 <bme680_read_sensor_data+0x404>)
 80042bc:	0018      	movs	r0, r3
 80042be:	f7ff fb6f 	bl	80039a0 <debug_print>
            }
            
            // Debug: Print memory representation and decoded values
            uint32_t temp_mem = *(uint32_t*)&data->temperature;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3308      	adds	r3, #8
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	25ec      	movs	r5, #236	@ 0xec
 80042ca:	2108      	movs	r1, #8
 80042cc:	186a      	adds	r2, r5, r1
 80042ce:	19d2      	adds	r2, r2, r7
 80042d0:	6013      	str	r3, [r2, #0]
            uint32_t press_mem = *(uint32_t*)&data->pressure;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	330c      	adds	r3, #12
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	26e8      	movs	r6, #232	@ 0xe8
 80042da:	1872      	adds	r2, r6, r1
 80042dc:	19d2      	adds	r2, r2, r7
 80042de:	6013      	str	r3, [r2, #0]
            uint32_t hum_mem = *(uint32_t*)&data->humidity;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3310      	adds	r3, #16
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	22e4      	movs	r2, #228	@ 0xe4
 80042e8:	0008      	movs	r0, r1
 80042ea:	1852      	adds	r2, r2, r1
 80042ec:	19d1      	adds	r1, r2, r7
 80042ee:	600b      	str	r3, [r1, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), 
 80042f0:	60bd      	str	r5, [r7, #8]
 80042f2:	0003      	movs	r3, r0
 80042f4:	18ea      	adds	r2, r5, r3
 80042f6:	19d1      	adds	r1, r2, r7
 80042f8:	6809      	ldr	r1, [r1, #0]
 80042fa:	4a8e      	ldr	r2, [pc, #568]	@ (8004534 <bme680_read_sensor_data+0x408>)
 80042fc:	2408      	movs	r4, #8
 80042fe:	001d      	movs	r5, r3
 8004300:	18e0      	adds	r0, r4, r3
 8004302:	19c0      	adds	r0, r0, r7
 8004304:	23e4      	movs	r3, #228	@ 0xe4
 8004306:	195d      	adds	r5, r3, r5
 8004308:	19eb      	adds	r3, r5, r7
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	2308      	movs	r3, #8
 8004310:	18f5      	adds	r5, r6, r3
 8004312:	19eb      	adds	r3, r5, r7
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	000b      	movs	r3, r1
 800431a:	2180      	movs	r1, #128	@ 0x80
 800431c:	f00c fe30 	bl	8010f80 <sniprintf>
                     "Memory dump - Temp: %08lX, Press: %08lX, Hum: %08lX\r\n",
                     temp_mem, press_mem, hum_mem);
            debug_print(debug_msg);
 8004320:	2208      	movs	r2, #8
 8004322:	18a1      	adds	r1, r4, r2
 8004324:	19cb      	adds	r3, r1, r7
 8004326:	0018      	movs	r0, r3
 8004328:	f7ff fb3a 	bl	80039a0 <debug_print>
            
            // Decode and show actual values using both methods
            float temp_decoded = decode_ieee754(temp_mem);
 800432c:	68bd      	ldr	r5, [r7, #8]
 800432e:	2208      	movs	r2, #8
 8004330:	18ab      	adds	r3, r5, r2
 8004332:	19d9      	adds	r1, r3, r7
 8004334:	680b      	ldr	r3, [r1, #0]
 8004336:	0018      	movs	r0, r3
 8004338:	f7ff feca 	bl	80040d0 <decode_ieee754>
 800433c:	1c03      	adds	r3, r0, #0
 800433e:	21e0      	movs	r1, #224	@ 0xe0
 8004340:	2208      	movs	r2, #8
 8004342:	1889      	adds	r1, r1, r2
 8004344:	19c8      	adds	r0, r1, r7
 8004346:	6003      	str	r3, [r0, #0]
            float press_decoded = decode_ieee754(press_mem);
 8004348:	18b3      	adds	r3, r6, r2
 800434a:	19d8      	adds	r0, r3, r7
 800434c:	6803      	ldr	r3, [r0, #0]
 800434e:	0018      	movs	r0, r3
 8004350:	f7ff febe 	bl	80040d0 <decode_ieee754>
 8004354:	1c03      	adds	r3, r0, #0
 8004356:	20dc      	movs	r0, #220	@ 0xdc
 8004358:	2108      	movs	r1, #8
 800435a:	1842      	adds	r2, r0, r1
 800435c:	19d2      	adds	r2, r2, r7
 800435e:	6013      	str	r3, [r2, #0]
            float hum_decoded = decode_ieee754(hum_mem);
 8004360:	23e4      	movs	r3, #228	@ 0xe4
 8004362:	185b      	adds	r3, r3, r1
 8004364:	19da      	adds	r2, r3, r7
 8004366:	6813      	ldr	r3, [r2, #0]
 8004368:	0018      	movs	r0, r3
 800436a:	f7ff feb1 	bl	80040d0 <decode_ieee754>
 800436e:	1c03      	adds	r3, r0, #0
 8004370:	22d8      	movs	r2, #216	@ 0xd8
 8004372:	2008      	movs	r0, #8
 8004374:	1812      	adds	r2, r2, r0
 8004376:	19d1      	adds	r1, r2, r7
 8004378:	600b      	str	r3, [r1, #0]
            
            // Manual decoding for comparison
            float temp_manual = manual_decode_ieee754(temp_mem);
 800437a:	182b      	adds	r3, r5, r0
 800437c:	19d9      	adds	r1, r3, r7
 800437e:	680b      	ldr	r3, [r1, #0]
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff fe1d 	bl	8003fc0 <manual_decode_ieee754>
 8004386:	1c03      	adds	r3, r0, #0
 8004388:	21d4      	movs	r1, #212	@ 0xd4
 800438a:	2208      	movs	r2, #8
 800438c:	1889      	adds	r1, r1, r2
 800438e:	19c8      	adds	r0, r1, r7
 8004390:	6003      	str	r3, [r0, #0]
            float press_manual = manual_decode_ieee754(press_mem);
 8004392:	18b3      	adds	r3, r6, r2
 8004394:	19de      	adds	r6, r3, r7
 8004396:	6833      	ldr	r3, [r6, #0]
 8004398:	0018      	movs	r0, r3
 800439a:	f7ff fe11 	bl	8003fc0 <manual_decode_ieee754>
 800439e:	1c03      	adds	r3, r0, #0
 80043a0:	26d0      	movs	r6, #208	@ 0xd0
 80043a2:	2108      	movs	r1, #8
 80043a4:	1872      	adds	r2, r6, r1
 80043a6:	19d0      	adds	r0, r2, r7
 80043a8:	6003      	str	r3, [r0, #0]
            float hum_manual = manual_decode_ieee754(hum_mem);
 80043aa:	22e4      	movs	r2, #228	@ 0xe4
 80043ac:	000e      	movs	r6, r1
 80043ae:	1853      	adds	r3, r2, r1
 80043b0:	19da      	adds	r2, r3, r7
 80043b2:	6813      	ldr	r3, [r2, #0]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7ff fe03 	bl	8003fc0 <manual_decode_ieee754>
 80043ba:	1c03      	adds	r3, r0, #0
 80043bc:	22cc      	movs	r2, #204	@ 0xcc
 80043be:	1992      	adds	r2, r2, r6
 80043c0:	19d0      	adds	r0, r2, r7
 80043c2:	6003      	str	r3, [r0, #0]
            
            // Debug: Show hex values and decoded values directly
            snprintf(debug_msg, sizeof(debug_msg), 
 80043c4:	0033      	movs	r3, r6
 80043c6:	19aa      	adds	r2, r5, r6
 80043c8:	19d0      	adds	r0, r2, r7
 80043ca:	6801      	ldr	r1, [r0, #0]
 80043cc:	4a5a      	ldr	r2, [pc, #360]	@ (8004538 <bme680_read_sensor_data+0x40c>)
 80043ce:	0026      	movs	r6, r4
 80043d0:	001d      	movs	r5, r3
 80043d2:	1973      	adds	r3, r6, r5
 80043d4:	19d8      	adds	r0, r3, r7
 80043d6:	24e4      	movs	r4, #228	@ 0xe4
 80043d8:	1963      	adds	r3, r4, r5
 80043da:	19dc      	adds	r4, r3, r7
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	23e8      	movs	r3, #232	@ 0xe8
 80043e2:	195b      	adds	r3, r3, r5
 80043e4:	19dc      	adds	r4, r3, r7
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	000b      	movs	r3, r1
 80043ec:	2180      	movs	r1, #128	@ 0x80
 80043ee:	f00c fdc7 	bl	8010f80 <sniprintf>
                     "Hex values - Temp: 0x%08lX, Press: 0x%08lX, Hum: 0x%08lX\r\n",
                     temp_mem, press_mem, hum_mem);
            debug_print(debug_msg);
 80043f2:	1973      	adds	r3, r6, r5
 80043f4:	19db      	adds	r3, r3, r7
 80043f6:	0018      	movs	r0, r3
 80043f8:	f7ff fad2 	bl	80039a0 <debug_print>
            
            snprintf(debug_msg, sizeof(debug_msg), 
 80043fc:	21e0      	movs	r1, #224	@ 0xe0
 80043fe:	194b      	adds	r3, r1, r5
 8004400:	19dc      	adds	r4, r3, r7
 8004402:	6820      	ldr	r0, [r4, #0]
 8004404:	f7ff f9d8 	bl	80037b8 <__aeabi_f2d>
 8004408:	0004      	movs	r4, r0
 800440a:	000d      	movs	r5, r1
 800440c:	20dc      	movs	r0, #220	@ 0xdc
 800440e:	2208      	movs	r2, #8
 8004410:	1883      	adds	r3, r0, r2
 8004412:	19d8      	adds	r0, r3, r7
 8004414:	6800      	ldr	r0, [r0, #0]
 8004416:	f7ff f9cf 	bl	80037b8 <__aeabi_f2d>
 800441a:	6038      	str	r0, [r7, #0]
 800441c:	6079      	str	r1, [r7, #4]
 800441e:	23d8      	movs	r3, #216	@ 0xd8
 8004420:	2208      	movs	r2, #8
 8004422:	189b      	adds	r3, r3, r2
 8004424:	19d8      	adds	r0, r3, r7
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	f7ff f9c6 	bl	80037b8 <__aeabi_f2d>
 800442c:	0002      	movs	r2, r0
 800442e:	000b      	movs	r3, r1
 8004430:	4942      	ldr	r1, [pc, #264]	@ (800453c <bme680_read_sensor_data+0x410>)
 8004432:	2008      	movs	r0, #8
 8004434:	1830      	adds	r0, r6, r0
 8004436:	19c0      	adds	r0, r0, r7
 8004438:	9204      	str	r2, [sp, #16]
 800443a:	9305      	str	r3, [sp, #20]
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	9202      	str	r2, [sp, #8]
 8004442:	9303      	str	r3, [sp, #12]
 8004444:	9400      	str	r4, [sp, #0]
 8004446:	9501      	str	r5, [sp, #4]
 8004448:	000a      	movs	r2, r1
 800444a:	2180      	movs	r1, #128	@ 0x80
 800444c:	f00c fd98 	bl	8010f80 <sniprintf>
                     "Decoded values (union) - Temp: %.6f, Press: %.6f, Hum: %.6f\r\n",
                     temp_decoded, press_decoded, hum_decoded);
            debug_print(debug_msg);
 8004450:	2408      	movs	r4, #8
 8004452:	1933      	adds	r3, r6, r4
 8004454:	19db      	adds	r3, r3, r7
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff faa2 	bl	80039a0 <debug_print>
            
            snprintf(debug_msg, sizeof(debug_msg), 
 800445c:	23d4      	movs	r3, #212	@ 0xd4
 800445e:	191b      	adds	r3, r3, r4
 8004460:	19d8      	adds	r0, r3, r7
 8004462:	6800      	ldr	r0, [r0, #0]
 8004464:	f7ff f9a8 	bl	80037b8 <__aeabi_f2d>
 8004468:	0004      	movs	r4, r0
 800446a:	000d      	movs	r5, r1
 800446c:	23d0      	movs	r3, #208	@ 0xd0
 800446e:	2208      	movs	r2, #8
 8004470:	189b      	adds	r3, r3, r2
 8004472:	19d8      	adds	r0, r3, r7
 8004474:	6800      	ldr	r0, [r0, #0]
 8004476:	f7ff f99f 	bl	80037b8 <__aeabi_f2d>
 800447a:	6038      	str	r0, [r7, #0]
 800447c:	6079      	str	r1, [r7, #4]
 800447e:	23cc      	movs	r3, #204	@ 0xcc
 8004480:	2208      	movs	r2, #8
 8004482:	189b      	adds	r3, r3, r2
 8004484:	19db      	adds	r3, r3, r7
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	f7ff f996 	bl	80037b8 <__aeabi_f2d>
 800448c:	0002      	movs	r2, r0
 800448e:	000b      	movs	r3, r1
 8004490:	492b      	ldr	r1, [pc, #172]	@ (8004540 <bme680_read_sensor_data+0x414>)
 8004492:	2008      	movs	r0, #8
 8004494:	1830      	adds	r0, r6, r0
 8004496:	19c0      	adds	r0, r0, r7
 8004498:	9204      	str	r2, [sp, #16]
 800449a:	9305      	str	r3, [sp, #20]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	9202      	str	r2, [sp, #8]
 80044a2:	9303      	str	r3, [sp, #12]
 80044a4:	9400      	str	r4, [sp, #0]
 80044a6:	9501      	str	r5, [sp, #4]
 80044a8:	000a      	movs	r2, r1
 80044aa:	2180      	movs	r1, #128	@ 0x80
 80044ac:	f00c fd68 	bl	8010f80 <sniprintf>
                     "Decoded values (manual) - Temp: %.6f, Press: %.6f, Hum: %.6f\r\n",
                     temp_manual, press_manual, hum_manual);
            debug_print(debug_msg);
 80044b0:	2408      	movs	r4, #8
 80044b2:	1933      	adds	r3, r6, r4
 80044b4:	19db      	adds	r3, r3, r7
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7ff fa72 	bl	80039a0 <debug_print>
            
            // Debug: Show individual components
            snprintf(debug_msg, sizeof(debug_msg), 
 80044bc:	21e0      	movs	r1, #224	@ 0xe0
 80044be:	190b      	adds	r3, r1, r4
 80044c0:	19db      	adds	r3, r3, r7
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	f7ff f978 	bl	80037b8 <__aeabi_f2d>
 80044c8:	0002      	movs	r2, r0
 80044ca:	000b      	movs	r3, r1
 80044cc:	25ec      	movs	r5, #236	@ 0xec
 80044ce:	0020      	movs	r0, r4
 80044d0:	1829      	adds	r1, r5, r0
 80044d2:	19c9      	adds	r1, r1, r7
 80044d4:	680c      	ldr	r4, [r1, #0]
 80044d6:	491b      	ldr	r1, [pc, #108]	@ (8004544 <bme680_read_sensor_data+0x418>)
 80044d8:	1830      	adds	r0, r6, r0
 80044da:	19c0      	adds	r0, r0, r7
 80044dc:	9200      	str	r2, [sp, #0]
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	0023      	movs	r3, r4
 80044e2:	000a      	movs	r2, r1
 80044e4:	2180      	movs	r1, #128	@ 0x80
 80044e6:	f00c fd4b 	bl	8010f80 <sniprintf>
                     "Temp breakdown - Hex: 0x%08lX, Decoded: %.6f\r\n",
                     temp_mem, temp_decoded);
            debug_print(debug_msg);
 80044ea:	0034      	movs	r4, r6
 80044ec:	2008      	movs	r0, #8
 80044ee:	1833      	adds	r3, r6, r0
 80044f0:	19db      	adds	r3, r3, r7
 80044f2:	0018      	movs	r0, r3
 80044f4:	f7ff fa54 	bl	80039a0 <debug_print>
            
            // Direct IEEE 754 calculation for temperature
            uint32_t temp_sign = (temp_mem >> 31) & 0x1;
 80044f8:	2008      	movs	r0, #8
 80044fa:	182b      	adds	r3, r5, r0
 80044fc:	19db      	adds	r3, r3, r7
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	0fdb      	lsrs	r3, r3, #31
 8004502:	21c8      	movs	r1, #200	@ 0xc8
 8004504:	180a      	adds	r2, r1, r0
 8004506:	19d2      	adds	r2, r2, r7
 8004508:	6013      	str	r3, [r2, #0]
            uint32_t temp_exp = (temp_mem >> 23) & 0xFF;
 800450a:	182b      	adds	r3, r5, r0
 800450c:	19db      	adds	r3, r3, r7
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	0ddb      	lsrs	r3, r3, #23
 8004512:	e019      	b.n	8004548 <bme680_read_sensor_data+0x41c>
 8004514:	0801418c 	.word	0x0801418c
 8004518:	20000210 	.word	0x20000210
 800451c:	080141ac 	.word	0x080141ac
 8004520:	080141d0 	.word	0x080141d0
 8004524:	080141f0 	.word	0x080141f0
 8004528:	08014214 	.word	0x08014214
 800452c:	08014238 	.word	0x08014238
 8004530:	0801426c 	.word	0x0801426c
 8004534:	080142a8 	.word	0x080142a8
 8004538:	080142e0 	.word	0x080142e0
 800453c:	0801431c 	.word	0x0801431c
 8004540:	0801435c 	.word	0x0801435c
 8004544:	0801439c 	.word	0x0801439c
 8004548:	22ff      	movs	r2, #255	@ 0xff
 800454a:	4013      	ands	r3, r2
 800454c:	26c4      	movs	r6, #196	@ 0xc4
 800454e:	1832      	adds	r2, r6, r0
 8004550:	19d2      	adds	r2, r2, r7
 8004552:	6013      	str	r3, [r2, #0]
            uint32_t temp_mant = temp_mem & 0x7FFFFF;
 8004554:	0002      	movs	r2, r0
 8004556:	182b      	adds	r3, r5, r0
 8004558:	19db      	adds	r3, r3, r7
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	025b      	lsls	r3, r3, #9
 800455e:	0a5b      	lsrs	r3, r3, #9
 8004560:	25c0      	movs	r5, #192	@ 0xc0
 8004562:	0010      	movs	r0, r2
 8004564:	182a      	adds	r2, r5, r0
 8004566:	19d2      	adds	r2, r2, r7
 8004568:	6013      	str	r3, [r2, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), 
 800456a:	180b      	adds	r3, r1, r0
 800456c:	19db      	adds	r3, r3, r7
 800456e:	6819      	ldr	r1, [r3, #0]
 8004570:	4abe      	ldr	r2, [pc, #760]	@ (800486c <bme680_read_sensor_data+0x740>)
 8004572:	0003      	movs	r3, r0
 8004574:	18e0      	adds	r0, r4, r3
 8004576:	19c0      	adds	r0, r0, r7
 8004578:	18eb      	adds	r3, r5, r3
 800457a:	19db      	adds	r3, r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	2508      	movs	r5, #8
 8004582:	1973      	adds	r3, r6, r5
 8004584:	19db      	adds	r3, r3, r7
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	000b      	movs	r3, r1
 800458c:	2180      	movs	r1, #128	@ 0x80
 800458e:	f00c fcf7 	bl	8010f80 <sniprintf>
                     "Temp IEEE 754 - Sign: %lu, Exp: %lu, Mant: 0x%06lX\r\n",
                     temp_sign, temp_exp, temp_mant);
            debug_print(debug_msg);
 8004592:	1963      	adds	r3, r4, r5
 8004594:	19db      	adds	r3, r3, r7
 8004596:	0018      	movs	r0, r3
 8004598:	f7ff fa02 	bl	80039a0 <debug_print>
            
            if (temp_exp != 0 && temp_exp != 0xFF) {
 800459c:	002a      	movs	r2, r5
 800459e:	18b3      	adds	r3, r6, r2
 80045a0:	19db      	adds	r3, r3, r7
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d100      	bne.n	80045aa <bme680_read_sensor_data+0x47e>
 80045a8:	e0ca      	b.n	8004740 <bme680_read_sensor_data+0x614>
 80045aa:	18b3      	adds	r3, r6, r2
 80045ac:	19db      	adds	r3, r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2bff      	cmp	r3, #255	@ 0xff
 80045b2:	d100      	bne.n	80045b6 <bme680_read_sensor_data+0x48a>
 80045b4:	e0c4      	b.n	8004740 <bme680_read_sensor_data+0x614>
                int temp_exp_val = (int)temp_exp - 127;
 80045b6:	0011      	movs	r1, r2
 80045b8:	18b3      	adds	r3, r6, r2
 80045ba:	19db      	adds	r3, r3, r7
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3b7f      	subs	r3, #127	@ 0x7f
 80045c0:	22bc      	movs	r2, #188	@ 0xbc
 80045c2:	1852      	adds	r2, r2, r1
 80045c4:	19d2      	adds	r2, r2, r7
 80045c6:	6013      	str	r3, [r2, #0]
                float temp_result = 1.0f;
 80045c8:	23fe      	movs	r3, #254	@ 0xfe
 80045ca:	059b      	lsls	r3, r3, #22
 80045cc:	2284      	movs	r2, #132	@ 0x84
 80045ce:	0052      	lsls	r2, r2, #1
 80045d0:	1852      	adds	r2, r2, r1
 80045d2:	19d2      	adds	r2, r2, r7
 80045d4:	6013      	str	r3, [r2, #0]
                
                // Calculate mantissa (implicit 1.0 + fractional part)
                for (int i = 22; i >= 0; i--) {
 80045d6:	2316      	movs	r3, #22
 80045d8:	2286      	movs	r2, #134	@ 0x86
 80045da:	0052      	lsls	r2, r2, #1
 80045dc:	18ba      	adds	r2, r7, r2
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	e032      	b.n	8004648 <bme680_read_sensor_data+0x51c>
                    if (temp_mant & (1 << i)) {
 80045e2:	2201      	movs	r2, #1
 80045e4:	2186      	movs	r1, #134	@ 0x86
 80045e6:	0049      	lsls	r1, r1, #1
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	409a      	lsls	r2, r3
 80045ee:	0013      	movs	r3, r2
 80045f0:	001a      	movs	r2, r3
 80045f2:	23c0      	movs	r3, #192	@ 0xc0
 80045f4:	2508      	movs	r5, #8
 80045f6:	195b      	adds	r3, r3, r5
 80045f8:	19db      	adds	r3, r3, r7
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4013      	ands	r3, r2
 80045fe:	d01c      	beq.n	800463a <bme680_read_sensor_data+0x50e>
                        temp_result += 1.0f / (1 << (23 - i));
 8004600:	187b      	adds	r3, r7, r1
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2217      	movs	r2, #23
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2201      	movs	r2, #1
 800460a:	409a      	lsls	r2, r3
 800460c:	0013      	movs	r3, r2
 800460e:	0018      	movs	r0, r3
 8004610:	f7fd f89c 	bl	800174c <__aeabi_i2f>
 8004614:	1c03      	adds	r3, r0, #0
 8004616:	1c19      	adds	r1, r3, #0
 8004618:	20fe      	movs	r0, #254	@ 0xfe
 800461a:	0580      	lsls	r0, r0, #22
 800461c:	f7fc faea 	bl	8000bf4 <__aeabi_fdiv>
 8004620:	1c03      	adds	r3, r0, #0
 8004622:	1c19      	adds	r1, r3, #0
 8004624:	2484      	movs	r4, #132	@ 0x84
 8004626:	0064      	lsls	r4, r4, #1
 8004628:	1963      	adds	r3, r4, r5
 800462a:	19db      	adds	r3, r3, r7
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	f7fc f8ef 	bl	8000810 <__aeabi_fadd>
 8004632:	1c03      	adds	r3, r0, #0
 8004634:	1962      	adds	r2, r4, r5
 8004636:	19d2      	adds	r2, r2, r7
 8004638:	6013      	str	r3, [r2, #0]
                for (int i = 22; i >= 0; i--) {
 800463a:	2286      	movs	r2, #134	@ 0x86
 800463c:	0052      	lsls	r2, r2, #1
 800463e:	18bb      	adds	r3, r7, r2
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	18ba      	adds	r2, r7, r2
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	2386      	movs	r3, #134	@ 0x86
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	dac6      	bge.n	80045e2 <bme680_read_sensor_data+0x4b6>
                    }
                }
                
                // Apply exponent
                if (temp_exp_val > 0) {
 8004654:	21bc      	movs	r1, #188	@ 0xbc
 8004656:	2508      	movs	r5, #8
 8004658:	194b      	adds	r3, r1, r5
 800465a:	19db      	adds	r3, r3, r7
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	dd16      	ble.n	8004690 <bme680_read_sensor_data+0x564>
                    temp_result *= (1 << temp_exp_val);
 8004662:	2201      	movs	r2, #1
 8004664:	194b      	adds	r3, r1, r5
 8004666:	19db      	adds	r3, r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	409a      	lsls	r2, r3
 800466c:	0013      	movs	r3, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f7fd f86c 	bl	800174c <__aeabi_i2f>
 8004674:	1c03      	adds	r3, r0, #0
 8004676:	1c19      	adds	r1, r3, #0
 8004678:	2484      	movs	r4, #132	@ 0x84
 800467a:	0064      	lsls	r4, r4, #1
 800467c:	1963      	adds	r3, r4, r5
 800467e:	19db      	adds	r3, r3, r7
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	f7fc fc85 	bl	8000f90 <__aeabi_fmul>
 8004686:	1c03      	adds	r3, r0, #0
 8004688:	1962      	adds	r2, r4, r5
 800468a:	19d2      	adds	r2, r2, r7
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e01d      	b.n	80046cc <bme680_read_sensor_data+0x5a0>
                } else if (temp_exp_val < 0) {
 8004690:	22bc      	movs	r2, #188	@ 0xbc
 8004692:	2508      	movs	r5, #8
 8004694:	1953      	adds	r3, r2, r5
 8004696:	19db      	adds	r3, r3, r7
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da16      	bge.n	80046cc <bme680_read_sensor_data+0x5a0>
                    temp_result /= (1 << (-temp_exp_val));
 800469e:	1953      	adds	r3, r2, r5
 80046a0:	19db      	adds	r3, r3, r7
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	425b      	negs	r3, r3
 80046a6:	2201      	movs	r2, #1
 80046a8:	409a      	lsls	r2, r3
 80046aa:	0013      	movs	r3, r2
 80046ac:	0018      	movs	r0, r3
 80046ae:	f7fd f84d 	bl	800174c <__aeabi_i2f>
 80046b2:	1c03      	adds	r3, r0, #0
 80046b4:	1c19      	adds	r1, r3, #0
 80046b6:	2484      	movs	r4, #132	@ 0x84
 80046b8:	0064      	lsls	r4, r4, #1
 80046ba:	1963      	adds	r3, r4, r5
 80046bc:	19db      	adds	r3, r3, r7
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	f7fc fa98 	bl	8000bf4 <__aeabi_fdiv>
 80046c4:	1c03      	adds	r3, r0, #0
 80046c6:	1962      	adds	r2, r4, r5
 80046c8:	19d2      	adds	r2, r2, r7
 80046ca:	6013      	str	r3, [r2, #0]
                }
                
                // Apply sign
                if (temp_sign) temp_result = -temp_result;
 80046cc:	23c8      	movs	r3, #200	@ 0xc8
 80046ce:	2008      	movs	r0, #8
 80046d0:	181b      	adds	r3, r3, r0
 80046d2:	19db      	adds	r3, r3, r7
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <bme680_read_sensor_data+0x5c4>
 80046da:	2184      	movs	r1, #132	@ 0x84
 80046dc:	0049      	lsls	r1, r1, #1
 80046de:	180b      	adds	r3, r1, r0
 80046e0:	19db      	adds	r3, r3, r7
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2280      	movs	r2, #128	@ 0x80
 80046e6:	0612      	lsls	r2, r2, #24
 80046e8:	4053      	eors	r3, r2
 80046ea:	180a      	adds	r2, r1, r0
 80046ec:	19d2      	adds	r2, r2, r7
 80046ee:	6013      	str	r3, [r2, #0]
                
                snprintf(debug_msg, sizeof(debug_msg), 
 80046f0:	2584      	movs	r5, #132	@ 0x84
 80046f2:	006d      	lsls	r5, r5, #1
 80046f4:	2408      	movs	r4, #8
 80046f6:	192b      	adds	r3, r5, r4
 80046f8:	19db      	adds	r3, r3, r7
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	f7ff f85c 	bl	80037b8 <__aeabi_f2d>
 8004700:	0002      	movs	r2, r0
 8004702:	000b      	movs	r3, r1
 8004704:	21bc      	movs	r1, #188	@ 0xbc
 8004706:	0020      	movs	r0, r4
 8004708:	1909      	adds	r1, r1, r4
 800470a:	19c9      	adds	r1, r1, r7
 800470c:	680c      	ldr	r4, [r1, #0]
 800470e:	4958      	ldr	r1, [pc, #352]	@ (8004870 <bme680_read_sensor_data+0x744>)
 8004710:	2608      	movs	r6, #8
 8004712:	1830      	adds	r0, r6, r0
 8004714:	19c0      	adds	r0, r0, r7
 8004716:	9200      	str	r2, [sp, #0]
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	0023      	movs	r3, r4
 800471c:	000a      	movs	r2, r1
 800471e:	2180      	movs	r1, #128	@ 0x80
 8004720:	f00c fc2e 	bl	8010f80 <sniprintf>
                         "Temp calculation - Exp_val: %d, Result: %.6f°C\r\n",
                         temp_exp_val, temp_result);
                debug_print(debug_msg);
 8004724:	2408      	movs	r4, #8
 8004726:	1933      	adds	r3, r6, r4
 8004728:	19db      	adds	r3, r3, r7
 800472a:	0018      	movs	r0, r3
 800472c:	f7ff f938 	bl	80039a0 <debug_print>
                
                // Use this calculated value
                temp_decoded = temp_result;
 8004730:	0021      	movs	r1, r4
 8004732:	186b      	adds	r3, r5, r1
 8004734:	19db      	adds	r3, r3, r7
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	22e0      	movs	r2, #224	@ 0xe0
 800473a:	1852      	adds	r2, r2, r1
 800473c:	19d2      	adds	r2, r2, r7
 800473e:	6013      	str	r3, [r2, #0]
            }
            
            // Also calculate pressure and humidity
            uint32_t press_sign = (press_mem >> 31) & 0x1;
 8004740:	21e8      	movs	r1, #232	@ 0xe8
 8004742:	2008      	movs	r0, #8
 8004744:	180b      	adds	r3, r1, r0
 8004746:	19db      	adds	r3, r3, r7
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	0fdb      	lsrs	r3, r3, #31
 800474c:	22b8      	movs	r2, #184	@ 0xb8
 800474e:	1812      	adds	r2, r2, r0
 8004750:	19d2      	adds	r2, r2, r7
 8004752:	6013      	str	r3, [r2, #0]
            uint32_t press_exp = (press_mem >> 23) & 0xFF;
 8004754:	180b      	adds	r3, r1, r0
 8004756:	19db      	adds	r3, r3, r7
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	0ddb      	lsrs	r3, r3, #23
 800475c:	22ff      	movs	r2, #255	@ 0xff
 800475e:	4013      	ands	r3, r2
 8004760:	22b4      	movs	r2, #180	@ 0xb4
 8004762:	0004      	movs	r4, r0
 8004764:	1810      	adds	r0, r2, r0
 8004766:	19c0      	adds	r0, r0, r7
 8004768:	6003      	str	r3, [r0, #0]
            uint32_t press_mant = press_mem & 0x7FFFFF;
 800476a:	0020      	movs	r0, r4
 800476c:	180b      	adds	r3, r1, r0
 800476e:	19db      	adds	r3, r3, r7
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	025b      	lsls	r3, r3, #9
 8004774:	0a5b      	lsrs	r3, r3, #9
 8004776:	21b0      	movs	r1, #176	@ 0xb0
 8004778:	1809      	adds	r1, r1, r0
 800477a:	19c9      	adds	r1, r1, r7
 800477c:	600b      	str	r3, [r1, #0]
            
            if (press_exp != 0 && press_exp != 0xFF) {
 800477e:	0001      	movs	r1, r0
 8004780:	1853      	adds	r3, r2, r1
 8004782:	19db      	adds	r3, r3, r7
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d100      	bne.n	800478c <bme680_read_sensor_data+0x660>
 800478a:	e0a8      	b.n	80048de <bme680_read_sensor_data+0x7b2>
 800478c:	1853      	adds	r3, r2, r1
 800478e:	19db      	adds	r3, r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2bff      	cmp	r3, #255	@ 0xff
 8004794:	d100      	bne.n	8004798 <bme680_read_sensor_data+0x66c>
 8004796:	e0a2      	b.n	80048de <bme680_read_sensor_data+0x7b2>
                int press_exp_val = (int)press_exp - 127;
 8004798:	1853      	adds	r3, r2, r1
 800479a:	19db      	adds	r3, r3, r7
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3b7f      	subs	r3, #127	@ 0x7f
 80047a0:	22ac      	movs	r2, #172	@ 0xac
 80047a2:	1852      	adds	r2, r2, r1
 80047a4:	19d2      	adds	r2, r2, r7
 80047a6:	6013      	str	r3, [r2, #0]
                float press_result = 1.0f;
 80047a8:	23fe      	movs	r3, #254	@ 0xfe
 80047aa:	059b      	lsls	r3, r3, #22
 80047ac:	2284      	movs	r2, #132	@ 0x84
 80047ae:	0052      	lsls	r2, r2, #1
 80047b0:	18ba      	adds	r2, r7, r2
 80047b2:	6013      	str	r3, [r2, #0]
                
                for (int i = 22; i >= 0; i--) {
 80047b4:	2316      	movs	r3, #22
 80047b6:	22fc      	movs	r2, #252	@ 0xfc
 80047b8:	1852      	adds	r2, r2, r1
 80047ba:	19d2      	adds	r2, r2, r7
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e033      	b.n	8004828 <bme680_read_sensor_data+0x6fc>
                    if (press_mant & (1 << i)) {
 80047c0:	2201      	movs	r2, #1
 80047c2:	21fc      	movs	r1, #252	@ 0xfc
 80047c4:	2008      	movs	r0, #8
 80047c6:	180b      	adds	r3, r1, r0
 80047c8:	19db      	adds	r3, r3, r7
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	409a      	lsls	r2, r3
 80047ce:	0013      	movs	r3, r2
 80047d0:	001a      	movs	r2, r3
 80047d2:	23b0      	movs	r3, #176	@ 0xb0
 80047d4:	181b      	adds	r3, r3, r0
 80047d6:	19db      	adds	r3, r3, r7
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4013      	ands	r3, r2
 80047dc:	d01b      	beq.n	8004816 <bme680_read_sensor_data+0x6ea>
                        press_result += 1.0f / (1 << (23 - i));
 80047de:	180b      	adds	r3, r1, r0
 80047e0:	19db      	adds	r3, r3, r7
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2217      	movs	r2, #23
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2201      	movs	r2, #1
 80047ea:	409a      	lsls	r2, r3
 80047ec:	0013      	movs	r3, r2
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7fc ffac 	bl	800174c <__aeabi_i2f>
 80047f4:	1c03      	adds	r3, r0, #0
 80047f6:	1c19      	adds	r1, r3, #0
 80047f8:	20fe      	movs	r0, #254	@ 0xfe
 80047fa:	0580      	lsls	r0, r0, #22
 80047fc:	f7fc f9fa 	bl	8000bf4 <__aeabi_fdiv>
 8004800:	1c03      	adds	r3, r0, #0
 8004802:	1c19      	adds	r1, r3, #0
 8004804:	2484      	movs	r4, #132	@ 0x84
 8004806:	0064      	lsls	r4, r4, #1
 8004808:	193b      	adds	r3, r7, r4
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	f7fc f800 	bl	8000810 <__aeabi_fadd>
 8004810:	1c03      	adds	r3, r0, #0
 8004812:	193a      	adds	r2, r7, r4
 8004814:	6013      	str	r3, [r2, #0]
                for (int i = 22; i >= 0; i--) {
 8004816:	22fc      	movs	r2, #252	@ 0xfc
 8004818:	2108      	movs	r1, #8
 800481a:	1853      	adds	r3, r2, r1
 800481c:	19db      	adds	r3, r3, r7
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3b01      	subs	r3, #1
 8004822:	1852      	adds	r2, r2, r1
 8004824:	19d2      	adds	r2, r2, r7
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	23fc      	movs	r3, #252	@ 0xfc
 800482a:	2008      	movs	r0, #8
 800482c:	181b      	adds	r3, r3, r0
 800482e:	19db      	adds	r3, r3, r7
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	dac4      	bge.n	80047c0 <bme680_read_sensor_data+0x694>
                    }
                }
                
                if (press_exp_val > 0) {
 8004836:	21ac      	movs	r1, #172	@ 0xac
 8004838:	180b      	adds	r3, r1, r0
 800483a:	19db      	adds	r3, r3, r7
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	dd18      	ble.n	8004874 <bme680_read_sensor_data+0x748>
                    press_result *= (1 << press_exp_val);
 8004842:	2201      	movs	r2, #1
 8004844:	180b      	adds	r3, r1, r0
 8004846:	19db      	adds	r3, r3, r7
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	409a      	lsls	r2, r3
 800484c:	0013      	movs	r3, r2
 800484e:	0018      	movs	r0, r3
 8004850:	f7fc ff7c 	bl	800174c <__aeabi_i2f>
 8004854:	1c03      	adds	r3, r0, #0
 8004856:	1c19      	adds	r1, r3, #0
 8004858:	2484      	movs	r4, #132	@ 0x84
 800485a:	0064      	lsls	r4, r4, #1
 800485c:	193b      	adds	r3, r7, r4
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	f7fc fb96 	bl	8000f90 <__aeabi_fmul>
 8004864:	1c03      	adds	r3, r0, #0
 8004866:	193a      	adds	r2, r7, r4
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e01f      	b.n	80048ac <bme680_read_sensor_data+0x780>
 800486c:	080143cc 	.word	0x080143cc
 8004870:	08014404 	.word	0x08014404
                } else if (press_exp_val < 0) {
 8004874:	22ac      	movs	r2, #172	@ 0xac
 8004876:	2108      	movs	r1, #8
 8004878:	1853      	adds	r3, r2, r1
 800487a:	19db      	adds	r3, r3, r7
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	da14      	bge.n	80048ac <bme680_read_sensor_data+0x780>
                    press_result /= (1 << (-press_exp_val));
 8004882:	1853      	adds	r3, r2, r1
 8004884:	19db      	adds	r3, r3, r7
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	425b      	negs	r3, r3
 800488a:	2201      	movs	r2, #1
 800488c:	409a      	lsls	r2, r3
 800488e:	0013      	movs	r3, r2
 8004890:	0018      	movs	r0, r3
 8004892:	f7fc ff5b 	bl	800174c <__aeabi_i2f>
 8004896:	1c03      	adds	r3, r0, #0
 8004898:	1c19      	adds	r1, r3, #0
 800489a:	2484      	movs	r4, #132	@ 0x84
 800489c:	0064      	lsls	r4, r4, #1
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	f7fc f9a7 	bl	8000bf4 <__aeabi_fdiv>
 80048a6:	1c03      	adds	r3, r0, #0
 80048a8:	193a      	adds	r2, r7, r4
 80048aa:	6013      	str	r3, [r2, #0]
                }
                
                if (press_sign) press_result = -press_result;
 80048ac:	23b8      	movs	r3, #184	@ 0xb8
 80048ae:	2208      	movs	r2, #8
 80048b0:	189b      	adds	r3, r3, r2
 80048b2:	19db      	adds	r3, r3, r7
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <bme680_read_sensor_data+0x7a0>
 80048ba:	2184      	movs	r1, #132	@ 0x84
 80048bc:	0049      	lsls	r1, r1, #1
 80048be:	187b      	adds	r3, r7, r1
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2280      	movs	r2, #128	@ 0x80
 80048c4:	0612      	lsls	r2, r2, #24
 80048c6:	4053      	eors	r3, r2
 80048c8:	187a      	adds	r2, r7, r1
 80048ca:	6013      	str	r3, [r2, #0]
                press_decoded = press_result;
 80048cc:	2384      	movs	r3, #132	@ 0x84
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	22dc      	movs	r2, #220	@ 0xdc
 80048d6:	2108      	movs	r1, #8
 80048d8:	1852      	adds	r2, r2, r1
 80048da:	19d2      	adds	r2, r2, r7
 80048dc:	6013      	str	r3, [r2, #0]
            }
            
            uint32_t hum_sign = (hum_mem >> 31) & 0x1;
 80048de:	21e4      	movs	r1, #228	@ 0xe4
 80048e0:	2008      	movs	r0, #8
 80048e2:	180b      	adds	r3, r1, r0
 80048e4:	19db      	adds	r3, r3, r7
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	0fdb      	lsrs	r3, r3, #31
 80048ea:	22a8      	movs	r2, #168	@ 0xa8
 80048ec:	1812      	adds	r2, r2, r0
 80048ee:	19d2      	adds	r2, r2, r7
 80048f0:	6013      	str	r3, [r2, #0]
            uint32_t hum_exp = (hum_mem >> 23) & 0xFF;
 80048f2:	180b      	adds	r3, r1, r0
 80048f4:	19db      	adds	r3, r3, r7
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	0ddb      	lsrs	r3, r3, #23
 80048fa:	22ff      	movs	r2, #255	@ 0xff
 80048fc:	4013      	ands	r3, r2
 80048fe:	22a4      	movs	r2, #164	@ 0xa4
 8004900:	0004      	movs	r4, r0
 8004902:	1810      	adds	r0, r2, r0
 8004904:	19c0      	adds	r0, r0, r7
 8004906:	6003      	str	r3, [r0, #0]
            uint32_t hum_mant = hum_mem & 0x7FFFFF;
 8004908:	0020      	movs	r0, r4
 800490a:	180b      	adds	r3, r1, r0
 800490c:	19db      	adds	r3, r3, r7
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	025b      	lsls	r3, r3, #9
 8004912:	0a5b      	lsrs	r3, r3, #9
 8004914:	21a0      	movs	r1, #160	@ 0xa0
 8004916:	1809      	adds	r1, r1, r0
 8004918:	19c9      	adds	r1, r1, r7
 800491a:	600b      	str	r3, [r1, #0]
            
            if (hum_exp != 0 && hum_exp != 0xFF) {
 800491c:	0001      	movs	r1, r0
 800491e:	1853      	adds	r3, r2, r1
 8004920:	19db      	adds	r3, r3, r7
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d100      	bne.n	800492a <bme680_read_sensor_data+0x7fe>
 8004928:	e0a8      	b.n	8004a7c <bme680_read_sensor_data+0x950>
 800492a:	1853      	adds	r3, r2, r1
 800492c:	19db      	adds	r3, r3, r7
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2bff      	cmp	r3, #255	@ 0xff
 8004932:	d100      	bne.n	8004936 <bme680_read_sensor_data+0x80a>
 8004934:	e0a2      	b.n	8004a7c <bme680_read_sensor_data+0x950>
                int hum_exp_val = (int)hum_exp - 127;
 8004936:	1853      	adds	r3, r2, r1
 8004938:	19db      	adds	r3, r3, r7
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3b7f      	subs	r3, #127	@ 0x7f
 800493e:	229c      	movs	r2, #156	@ 0x9c
 8004940:	1852      	adds	r2, r2, r1
 8004942:	19d2      	adds	r2, r2, r7
 8004944:	6013      	str	r3, [r2, #0]
                float hum_result = 1.0f;
 8004946:	23fe      	movs	r3, #254	@ 0xfe
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	22f8      	movs	r2, #248	@ 0xf8
 800494c:	1852      	adds	r2, r2, r1
 800494e:	19d2      	adds	r2, r2, r7
 8004950:	6013      	str	r3, [r2, #0]
                
                for (int i = 22; i >= 0; i--) {
 8004952:	2316      	movs	r3, #22
 8004954:	22f4      	movs	r2, #244	@ 0xf4
 8004956:	1852      	adds	r2, r2, r1
 8004958:	19d2      	adds	r2, r2, r7
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e034      	b.n	80049c8 <bme680_read_sensor_data+0x89c>
                    if (hum_mant & (1 << i)) {
 800495e:	2201      	movs	r2, #1
 8004960:	21f4      	movs	r1, #244	@ 0xf4
 8004962:	2508      	movs	r5, #8
 8004964:	194b      	adds	r3, r1, r5
 8004966:	19db      	adds	r3, r3, r7
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	409a      	lsls	r2, r3
 800496c:	0013      	movs	r3, r2
 800496e:	001a      	movs	r2, r3
 8004970:	23a0      	movs	r3, #160	@ 0xa0
 8004972:	195b      	adds	r3, r3, r5
 8004974:	19db      	adds	r3, r3, r7
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4013      	ands	r3, r2
 800497a:	d01c      	beq.n	80049b6 <bme680_read_sensor_data+0x88a>
                        hum_result += 1.0f / (1 << (23 - i));
 800497c:	194b      	adds	r3, r1, r5
 800497e:	19db      	adds	r3, r3, r7
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2217      	movs	r2, #23
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2201      	movs	r2, #1
 8004988:	409a      	lsls	r2, r3
 800498a:	0013      	movs	r3, r2
 800498c:	0018      	movs	r0, r3
 800498e:	f7fc fedd 	bl	800174c <__aeabi_i2f>
 8004992:	1c03      	adds	r3, r0, #0
 8004994:	1c19      	adds	r1, r3, #0
 8004996:	20fe      	movs	r0, #254	@ 0xfe
 8004998:	0580      	lsls	r0, r0, #22
 800499a:	f7fc f92b 	bl	8000bf4 <__aeabi_fdiv>
 800499e:	1c03      	adds	r3, r0, #0
 80049a0:	1c19      	adds	r1, r3, #0
 80049a2:	24f8      	movs	r4, #248	@ 0xf8
 80049a4:	1963      	adds	r3, r4, r5
 80049a6:	19db      	adds	r3, r3, r7
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	f7fb ff31 	bl	8000810 <__aeabi_fadd>
 80049ae:	1c03      	adds	r3, r0, #0
 80049b0:	1962      	adds	r2, r4, r5
 80049b2:	19d2      	adds	r2, r2, r7
 80049b4:	6013      	str	r3, [r2, #0]
                for (int i = 22; i >= 0; i--) {
 80049b6:	22f4      	movs	r2, #244	@ 0xf4
 80049b8:	2108      	movs	r1, #8
 80049ba:	1853      	adds	r3, r2, r1
 80049bc:	19db      	adds	r3, r3, r7
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	1852      	adds	r2, r2, r1
 80049c4:	19d2      	adds	r2, r2, r7
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	23f4      	movs	r3, #244	@ 0xf4
 80049ca:	2508      	movs	r5, #8
 80049cc:	195b      	adds	r3, r3, r5
 80049ce:	19db      	adds	r3, r3, r7
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dac3      	bge.n	800495e <bme680_read_sensor_data+0x832>
                    }
                }
                
                if (hum_exp_val > 0) {
 80049d6:	219c      	movs	r1, #156	@ 0x9c
 80049d8:	194b      	adds	r3, r1, r5
 80049da:	19db      	adds	r3, r3, r7
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	dd15      	ble.n	8004a0e <bme680_read_sensor_data+0x8e2>
                    hum_result *= (1 << hum_exp_val);
 80049e2:	2201      	movs	r2, #1
 80049e4:	194b      	adds	r3, r1, r5
 80049e6:	19db      	adds	r3, r3, r7
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	409a      	lsls	r2, r3
 80049ec:	0013      	movs	r3, r2
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7fc feac 	bl	800174c <__aeabi_i2f>
 80049f4:	1c03      	adds	r3, r0, #0
 80049f6:	1c19      	adds	r1, r3, #0
 80049f8:	24f8      	movs	r4, #248	@ 0xf8
 80049fa:	1963      	adds	r3, r4, r5
 80049fc:	19db      	adds	r3, r3, r7
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	f7fc fac6 	bl	8000f90 <__aeabi_fmul>
 8004a04:	1c03      	adds	r3, r0, #0
 8004a06:	1962      	adds	r2, r4, r5
 8004a08:	19d2      	adds	r2, r2, r7
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	e01c      	b.n	8004a48 <bme680_read_sensor_data+0x91c>
                } else if (hum_exp_val < 0) {
 8004a0e:	229c      	movs	r2, #156	@ 0x9c
 8004a10:	2508      	movs	r5, #8
 8004a12:	1953      	adds	r3, r2, r5
 8004a14:	19db      	adds	r3, r3, r7
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da15      	bge.n	8004a48 <bme680_read_sensor_data+0x91c>
                    hum_result /= (1 << (-hum_exp_val));
 8004a1c:	1953      	adds	r3, r2, r5
 8004a1e:	19db      	adds	r3, r3, r7
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	425b      	negs	r3, r3
 8004a24:	2201      	movs	r2, #1
 8004a26:	409a      	lsls	r2, r3
 8004a28:	0013      	movs	r3, r2
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f7fc fe8e 	bl	800174c <__aeabi_i2f>
 8004a30:	1c03      	adds	r3, r0, #0
 8004a32:	1c19      	adds	r1, r3, #0
 8004a34:	24f8      	movs	r4, #248	@ 0xf8
 8004a36:	1963      	adds	r3, r4, r5
 8004a38:	19db      	adds	r3, r3, r7
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	f7fc f8da 	bl	8000bf4 <__aeabi_fdiv>
 8004a40:	1c03      	adds	r3, r0, #0
 8004a42:	1962      	adds	r2, r4, r5
 8004a44:	19d2      	adds	r2, r2, r7
 8004a46:	6013      	str	r3, [r2, #0]
                }
                
                if (hum_sign) hum_result = -hum_result;
 8004a48:	23a8      	movs	r3, #168	@ 0xa8
 8004a4a:	2008      	movs	r0, #8
 8004a4c:	181b      	adds	r3, r3, r0
 8004a4e:	19db      	adds	r3, r3, r7
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <bme680_read_sensor_data+0x93e>
 8004a56:	21f8      	movs	r1, #248	@ 0xf8
 8004a58:	180b      	adds	r3, r1, r0
 8004a5a:	19db      	adds	r3, r3, r7
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2280      	movs	r2, #128	@ 0x80
 8004a60:	0612      	lsls	r2, r2, #24
 8004a62:	4053      	eors	r3, r2
 8004a64:	180a      	adds	r2, r1, r0
 8004a66:	19d2      	adds	r2, r2, r7
 8004a68:	6013      	str	r3, [r2, #0]
                hum_decoded = hum_result;
 8004a6a:	23f8      	movs	r3, #248	@ 0xf8
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	185b      	adds	r3, r3, r1
 8004a70:	19db      	adds	r3, r3, r7
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	22d8      	movs	r2, #216	@ 0xd8
 8004a76:	1852      	adds	r2, r2, r1
 8004a78:	19d2      	adds	r2, r2, r7
 8004a7a:	6013      	str	r3, [r2, #0]
            }
            
            // Check validity of each value
            int temp_valid = is_float_invalid(data->temperature);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	1c18      	adds	r0, r3, #0
 8004a82:	f7ff fb30 	bl	80040e6 <is_float_invalid>
 8004a86:	0003      	movs	r3, r0
 8004a88:	2498      	movs	r4, #152	@ 0x98
 8004a8a:	2508      	movs	r5, #8
 8004a8c:	1962      	adds	r2, r4, r5
 8004a8e:	19d2      	adds	r2, r2, r7
 8004a90:	6013      	str	r3, [r2, #0]
            int press_valid = is_float_invalid(data->pressure);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	1c18      	adds	r0, r3, #0
 8004a98:	f7ff fb25 	bl	80040e6 <is_float_invalid>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	2294      	movs	r2, #148	@ 0x94
 8004aa0:	1952      	adds	r2, r2, r5
 8004aa2:	19d2      	adds	r2, r2, r7
 8004aa4:	6013      	str	r3, [r2, #0]
            int hum_valid = is_float_invalid(data->humidity);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	1c18      	adds	r0, r3, #0
 8004aac:	f7ff fb1b 	bl	80040e6 <is_float_invalid>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	2290      	movs	r2, #144	@ 0x90
 8004ab4:	1952      	adds	r2, r2, r5
 8004ab6:	19d2      	adds	r2, r2, r7
 8004ab8:	6013      	str	r3, [r2, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), 
 8004aba:	1963      	adds	r3, r4, r5
 8004abc:	19db      	adds	r3, r3, r7
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <bme680_read_sensor_data+0x9aa>
                     "Validity check - Temp: %s, Press: %s, Hum: %s\r\n",
                     temp_valid == 0 ? "Valid" : (temp_valid == 1 ? "NaN" : "Inf"),
 8004ac4:	1963      	adds	r3, r4, r5
 8004ac6:	19db      	adds	r3, r3, r7
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <bme680_read_sensor_data+0x9a6>
 8004ace:	4976      	ldr	r1, [pc, #472]	@ (8004ca8 <bme680_read_sensor_data+0xb7c>)
 8004ad0:	e002      	b.n	8004ad8 <bme680_read_sensor_data+0x9ac>
 8004ad2:	4976      	ldr	r1, [pc, #472]	@ (8004cac <bme680_read_sensor_data+0xb80>)
 8004ad4:	e000      	b.n	8004ad8 <bme680_read_sensor_data+0x9ac>
            snprintf(debug_msg, sizeof(debug_msg), 
 8004ad6:	4976      	ldr	r1, [pc, #472]	@ (8004cb0 <bme680_read_sensor_data+0xb84>)
 8004ad8:	2294      	movs	r2, #148	@ 0x94
 8004ada:	2008      	movs	r0, #8
 8004adc:	1813      	adds	r3, r2, r0
 8004ade:	19db      	adds	r3, r3, r7
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <bme680_read_sensor_data+0x9cc>
                     press_valid == 0 ? "Valid" : (press_valid == 1 ? "NaN" : "Inf"),
 8004ae6:	1813      	adds	r3, r2, r0
 8004ae8:	19db      	adds	r3, r3, r7
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <bme680_read_sensor_data+0x9c8>
 8004af0:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca8 <bme680_read_sensor_data+0xb7c>)
 8004af2:	e002      	b.n	8004afa <bme680_read_sensor_data+0x9ce>
 8004af4:	4b6d      	ldr	r3, [pc, #436]	@ (8004cac <bme680_read_sensor_data+0xb80>)
 8004af6:	e000      	b.n	8004afa <bme680_read_sensor_data+0x9ce>
            snprintf(debug_msg, sizeof(debug_msg), 
 8004af8:	4b6d      	ldr	r3, [pc, #436]	@ (8004cb0 <bme680_read_sensor_data+0xb84>)
 8004afa:	2090      	movs	r0, #144	@ 0x90
 8004afc:	2408      	movs	r4, #8
 8004afe:	1902      	adds	r2, r0, r4
 8004b00:	19d2      	adds	r2, r2, r7
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d008      	beq.n	8004b1a <bme680_read_sensor_data+0x9ee>
                     hum_valid == 0 ? "Valid" : (hum_valid == 1 ? "NaN" : "Inf"));
 8004b08:	1902      	adds	r2, r0, r4
 8004b0a:	19d2      	adds	r2, r2, r7
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	2a01      	cmp	r2, #1
 8004b10:	d101      	bne.n	8004b16 <bme680_read_sensor_data+0x9ea>
 8004b12:	4a65      	ldr	r2, [pc, #404]	@ (8004ca8 <bme680_read_sensor_data+0xb7c>)
 8004b14:	e002      	b.n	8004b1c <bme680_read_sensor_data+0x9f0>
 8004b16:	4a65      	ldr	r2, [pc, #404]	@ (8004cac <bme680_read_sensor_data+0xb80>)
 8004b18:	e000      	b.n	8004b1c <bme680_read_sensor_data+0x9f0>
            snprintf(debug_msg, sizeof(debug_msg), 
 8004b1a:	4a65      	ldr	r2, [pc, #404]	@ (8004cb0 <bme680_read_sensor_data+0xb84>)
 8004b1c:	4c65      	ldr	r4, [pc, #404]	@ (8004cb4 <bme680_read_sensor_data+0xb88>)
 8004b1e:	2508      	movs	r5, #8
 8004b20:	2608      	movs	r6, #8
 8004b22:	19a8      	adds	r0, r5, r6
 8004b24:	19c0      	adds	r0, r0, r7
 8004b26:	9201      	str	r2, [sp, #4]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	000b      	movs	r3, r1
 8004b2c:	0022      	movs	r2, r4
 8004b2e:	2180      	movs	r1, #128	@ 0x80
 8004b30:	f00c fa26 	bl	8010f80 <sniprintf>
            debug_print(debug_msg);
 8004b34:	19ab      	adds	r3, r5, r6
 8004b36:	19db      	adds	r3, r3, r7
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7fe ff31 	bl	80039a0 <debug_print>
            
            // Check if values are valid (not NaN or infinite)
            if (is_float_invalid(data->temperature) || is_float_invalid(data->pressure) || is_float_invalid(data->humidity)) {
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	1c18      	adds	r0, r3, #0
 8004b44:	f7ff facf 	bl	80040e6 <is_float_invalid>
 8004b48:	1e03      	subs	r3, r0, #0
 8004b4a:	d10d      	bne.n	8004b68 <bme680_read_sensor_data+0xa3c>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	1c18      	adds	r0, r3, #0
 8004b52:	f7ff fac8 	bl	80040e6 <is_float_invalid>
 8004b56:	1e03      	subs	r3, r0, #0
 8004b58:	d106      	bne.n	8004b68 <bme680_read_sensor_data+0xa3c>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	1c18      	adds	r0, r3, #0
 8004b60:	f7ff fac1 	bl	80040e6 <is_float_invalid>
 8004b64:	1e03      	subs	r3, r0, #0
 8004b66:	d006      	beq.n	8004b76 <bme680_read_sensor_data+0xa4a>
                debug_print("✗ Invalid sensor values detected (NaN or infinite)\r\n");
 8004b68:	4b53      	ldr	r3, [pc, #332]	@ (8004cb8 <bme680_read_sensor_data+0xb8c>)
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7fe ff18 	bl	80039a0 <debug_print>
                return BME68X_E_INVALID_LENGTH;
 8004b70:	2304      	movs	r3, #4
 8004b72:	425b      	negs	r3, r3
 8004b74:	e094      	b.n	8004ca0 <bme680_read_sensor_data+0xb74>
            }
            
            // Check if values are within reasonable ranges
            if (data->temperature < -40.0f || data->temperature > 85.0f ||
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	4950      	ldr	r1, [pc, #320]	@ (8004cbc <bme680_read_sensor_data+0xb90>)
 8004b7c:	1c18      	adds	r0, r3, #0
 8004b7e:	f7fb fcad 	bl	80004dc <__aeabi_fcmplt>
 8004b82:	1e03      	subs	r3, r0, #0
 8004b84:	d127      	bne.n	8004bd6 <bme680_read_sensor_data+0xaaa>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	494d      	ldr	r1, [pc, #308]	@ (8004cc0 <bme680_read_sensor_data+0xb94>)
 8004b8c:	1c18      	adds	r0, r3, #0
 8004b8e:	f7fb fcb9 	bl	8000504 <__aeabi_fcmpgt>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d11f      	bne.n	8004bd6 <bme680_read_sensor_data+0xaaa>
                data->pressure < 30000.0f || data->pressure > 125000.0f ||
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68db      	ldr	r3, [r3, #12]
            if (data->temperature < -40.0f || data->temperature > 85.0f ||
 8004b9a:	494a      	ldr	r1, [pc, #296]	@ (8004cc4 <bme680_read_sensor_data+0xb98>)
 8004b9c:	1c18      	adds	r0, r3, #0
 8004b9e:	f7fb fc9d 	bl	80004dc <__aeabi_fcmplt>
 8004ba2:	1e03      	subs	r3, r0, #0
 8004ba4:	d117      	bne.n	8004bd6 <bme680_read_sensor_data+0xaaa>
                data->pressure < 30000.0f || data->pressure > 125000.0f ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	4947      	ldr	r1, [pc, #284]	@ (8004cc8 <bme680_read_sensor_data+0xb9c>)
 8004bac:	1c18      	adds	r0, r3, #0
 8004bae:	f7fb fca9 	bl	8000504 <__aeabi_fcmpgt>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d10f      	bne.n	8004bd6 <bme680_read_sensor_data+0xaaa>
                data->humidity < 0.0f || data->humidity > 100.0f) {
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	691b      	ldr	r3, [r3, #16]
                data->pressure < 30000.0f || data->pressure > 125000.0f ||
 8004bba:	2100      	movs	r1, #0
 8004bbc:	1c18      	adds	r0, r3, #0
 8004bbe:	f7fb fc8d 	bl	80004dc <__aeabi_fcmplt>
 8004bc2:	1e03      	subs	r3, r0, #0
 8004bc4:	d107      	bne.n	8004bd6 <bme680_read_sensor_data+0xaaa>
                data->humidity < 0.0f || data->humidity > 100.0f) {
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	4940      	ldr	r1, [pc, #256]	@ (8004ccc <bme680_read_sensor_data+0xba0>)
 8004bcc:	1c18      	adds	r0, r3, #0
 8004bce:	f7fb fc99 	bl	8000504 <__aeabi_fcmpgt>
 8004bd2:	1e03      	subs	r3, r0, #0
 8004bd4:	d02b      	beq.n	8004c2e <bme680_read_sensor_data+0xb02>
                snprintf(debug_msg, sizeof(debug_msg), 
                         "⚠ Values out of expected range - Temp: %.2f, Press: %.2f, Hum: %.2f\r\n",
                         data->temperature, data->pressure, data->humidity);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
                snprintf(debug_msg, sizeof(debug_msg), 
 8004bda:	1c18      	adds	r0, r3, #0
 8004bdc:	f7fe fdec 	bl	80037b8 <__aeabi_f2d>
 8004be0:	0004      	movs	r4, r0
 8004be2:	000d      	movs	r5, r1
                         data->temperature, data->pressure, data->humidity);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68db      	ldr	r3, [r3, #12]
                snprintf(debug_msg, sizeof(debug_msg), 
 8004be8:	1c18      	adds	r0, r3, #0
 8004bea:	f7fe fde5 	bl	80037b8 <__aeabi_f2d>
 8004bee:	6038      	str	r0, [r7, #0]
 8004bf0:	6079      	str	r1, [r7, #4]
                         data->temperature, data->pressure, data->humidity);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	691b      	ldr	r3, [r3, #16]
                snprintf(debug_msg, sizeof(debug_msg), 
 8004bf6:	1c18      	adds	r0, r3, #0
 8004bf8:	f7fe fdde 	bl	80037b8 <__aeabi_f2d>
 8004bfc:	0002      	movs	r2, r0
 8004bfe:	000b      	movs	r3, r1
 8004c00:	4933      	ldr	r1, [pc, #204]	@ (8004cd0 <bme680_read_sensor_data+0xba4>)
 8004c02:	2608      	movs	r6, #8
 8004c04:	2008      	movs	r0, #8
 8004c06:	1830      	adds	r0, r6, r0
 8004c08:	19c0      	adds	r0, r0, r7
 8004c0a:	9204      	str	r2, [sp, #16]
 8004c0c:	9305      	str	r3, [sp, #20]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	9202      	str	r2, [sp, #8]
 8004c14:	9303      	str	r3, [sp, #12]
 8004c16:	9400      	str	r4, [sp, #0]
 8004c18:	9501      	str	r5, [sp, #4]
 8004c1a:	000a      	movs	r2, r1
 8004c1c:	2180      	movs	r1, #128	@ 0x80
 8004c1e:	f00c f9af 	bl	8010f80 <sniprintf>
                debug_print(debug_msg);
 8004c22:	2308      	movs	r3, #8
 8004c24:	18f3      	adds	r3, r6, r3
 8004c26:	19db      	adds	r3, r3, r7
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fe feb9 	bl	80039a0 <debug_print>
            }
            
            // Apply temperature offset correction if needed
            // The BME680 might have a factory offset that needs correction
            float temp_offset = -9.5f; // Adjust this value based on your testing
 8004c2e:	4b29      	ldr	r3, [pc, #164]	@ (8004cd4 <bme680_read_sensor_data+0xba8>)
 8004c30:	228c      	movs	r2, #140	@ 0x8c
 8004c32:	2508      	movs	r5, #8
 8004c34:	1951      	adds	r1, r2, r5
 8004c36:	19c9      	adds	r1, r1, r7
 8004c38:	600b      	str	r3, [r1, #0]
            data->temperature += temp_offset;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	1952      	adds	r2, r2, r5
 8004c40:	19d2      	adds	r2, r2, r7
 8004c42:	6811      	ldr	r1, [r2, #0]
 8004c44:	1c18      	adds	r0, r3, #0
 8004c46:	f7fb fde3 	bl	8000810 <__aeabi_fadd>
 8004c4a:	1c03      	adds	r3, r0, #0
 8004c4c:	1c1a      	adds	r2, r3, #0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	609a      	str	r2, [r3, #8]
            
            snprintf(debug_msg, sizeof(debug_msg), 
                     "Temperature after offset correction: %.2f°C\r\n",
                     data->temperature);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
            snprintf(debug_msg, sizeof(debug_msg), 
 8004c56:	1c18      	adds	r0, r3, #0
 8004c58:	f7fe fdae 	bl	80037b8 <__aeabi_f2d>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	000b      	movs	r3, r1
 8004c60:	491d      	ldr	r1, [pc, #116]	@ (8004cd8 <bme680_read_sensor_data+0xbac>)
 8004c62:	2408      	movs	r4, #8
 8004c64:	1960      	adds	r0, r4, r5
 8004c66:	19c0      	adds	r0, r0, r7
 8004c68:	9200      	str	r2, [sp, #0]
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	000a      	movs	r2, r1
 8004c6e:	2180      	movs	r1, #128	@ 0x80
 8004c70:	f00c f986 	bl	8010f80 <sniprintf>
            debug_print(debug_msg);
 8004c74:	1963      	adds	r3, r4, r5
 8004c76:	19db      	adds	r3, r3, r7
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7fe fe91 	bl	80039a0 <debug_print>
        if (rslt == BME68X_OK && n_data > 0) {
 8004c7e:	e008      	b.n	8004c92 <bme680_read_sensor_data+0xb66>
        } else {
            debug_print("✗ Failed to read sensor data\r\n");
 8004c80:	4b16      	ldr	r3, [pc, #88]	@ (8004cdc <bme680_read_sensor_data+0xbb0>)
 8004c82:	0018      	movs	r0, r3
 8004c84:	f7fe fe8c 	bl	80039a0 <debug_print>
 8004c88:	e003      	b.n	8004c92 <bme680_read_sensor_data+0xb66>
        }
    } else {
        debug_print("✗ Failed to set forced mode\r\n");
 8004c8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ce0 <bme680_read_sensor_data+0xbb4>)
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fe fe87 	bl	80039a0 <debug_print>
    }
    
    return rslt;
 8004c92:	2310      	movs	r3, #16
 8004c94:	33ff      	adds	r3, #255	@ 0xff
 8004c96:	2208      	movs	r2, #8
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	19db      	adds	r3, r3, r7
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	b25b      	sxtb	r3, r3
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b047      	add	sp, #284	@ 0x11c
 8004ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca8:	08014438 	.word	0x08014438
 8004cac:	0801443c 	.word	0x0801443c
 8004cb0:	08014440 	.word	0x08014440
 8004cb4:	08014448 	.word	0x08014448
 8004cb8:	08014478 	.word	0x08014478
 8004cbc:	c2200000 	.word	0xc2200000
 8004cc0:	42aa0000 	.word	0x42aa0000
 8004cc4:	46ea6000 	.word	0x46ea6000
 8004cc8:	47f42400 	.word	0x47f42400
 8004ccc:	42c80000 	.word	0x42c80000
 8004cd0:	080144b0 	.word	0x080144b0
 8004cd4:	c1180000 	.word	0xc1180000
 8004cd8:	080144f8 	.word	0x080144f8
 8004cdc:	08014528 	.word	0x08014528
 8004ce0:	0801454c 	.word	0x0801454c

08004ce4 <bme680_check_calibration_data>:
    HAL_UART_Transmit(&huart4, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

// Check BME680 calibration data
void bme680_check_calibration_data(void)
{
 8004ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce6:	b0b1      	sub	sp, #196	@ 0xc4
 8004ce8:	af04      	add	r7, sp, #16
    uint8_t calib_data[41];
    char debug_msg[128];
    
    debug_print("Reading BME680 calibration data...\r\n");
 8004cea:	4b47      	ldr	r3, [pc, #284]	@ (8004e08 <bme680_check_calibration_data+0x124>)
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7fe fe57 	bl	80039a0 <debug_print>
    
    // Read calibration data from registers 0xE1 to 0xF0 and 0x8A to 0xA1
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0xE1, 
 8004cf2:	25af      	movs	r5, #175	@ 0xaf
 8004cf4:	197c      	adds	r4, r7, r5
 8004cf6:	4845      	ldr	r0, [pc, #276]	@ (8004e0c <bme680_check_calibration_data+0x128>)
 8004cf8:	23fa      	movs	r3, #250	@ 0xfa
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	9302      	str	r3, [sp, #8]
 8004cfe:	2310      	movs	r3, #16
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	2684      	movs	r6, #132	@ 0x84
 8004d04:	19bb      	adds	r3, r7, r6
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	2301      	movs	r3, #1
 8004d0a:	22e1      	movs	r2, #225	@ 0xe1
 8004d0c:	21ec      	movs	r1, #236	@ 0xec
 8004d0e:	f007 fa51 	bl	800c1b4 <HAL_I2C_Mem_Read>
 8004d12:	0003      	movs	r3, r0
 8004d14:	7023      	strb	r3, [r4, #0]
                                                I2C_MEMADD_SIZE_8BIT, calib_data, 16, 1000);
    
    if (status == HAL_OK) {
 8004d16:	197b      	adds	r3, r7, r5
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d110      	bne.n	8004d40 <bme680_check_calibration_data+0x5c>
        status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0x8A, 
 8004d1e:	197c      	adds	r4, r7, r5
 8004d20:	483a      	ldr	r0, [pc, #232]	@ (8004e0c <bme680_check_calibration_data+0x128>)
 8004d22:	23fa      	movs	r3, #250	@ 0xfa
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	9302      	str	r3, [sp, #8]
 8004d28:	2319      	movs	r3, #25
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	19bb      	adds	r3, r7, r6
 8004d2e:	3310      	adds	r3, #16
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	2301      	movs	r3, #1
 8004d34:	228a      	movs	r2, #138	@ 0x8a
 8004d36:	21ec      	movs	r1, #236	@ 0xec
 8004d38:	f007 fa3c 	bl	800c1b4 <HAL_I2C_Mem_Read>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	7023      	strb	r3, [r4, #0]
                                  I2C_MEMADD_SIZE_8BIT, &calib_data[16], 25, 1000);
    }
    
    if (status == HAL_OK) {
 8004d40:	23af      	movs	r3, #175	@ 0xaf
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d155      	bne.n	8004df6 <bme680_check_calibration_data+0x112>
        debug_print("✓ Calibration data read successfully\r\n");
 8004d4a:	4b31      	ldr	r3, [pc, #196]	@ (8004e10 <bme680_check_calibration_data+0x12c>)
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7fe fe27 	bl	80039a0 <debug_print>
        
        // Display some key calibration values
        snprintf(debug_msg, sizeof(debug_msg), 
                 "T1: 0x%04X, T2: 0x%04X, T3: 0x%02X\r\n",
                 (calib_data[1] << 8) | calib_data[0],
 8004d52:	2084      	movs	r0, #132	@ 0x84
 8004d54:	183b      	adds	r3, r7, r0
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	183a      	adds	r2, r7, r0
 8004d5c:	7812      	ldrb	r2, [r2, #0]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	0019      	movs	r1, r3
                 (calib_data[3] << 8) | calib_data[2],
 8004d62:	0005      	movs	r5, r0
 8004d64:	197b      	adds	r3, r7, r5
 8004d66:	78db      	ldrb	r3, [r3, #3]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	197a      	adds	r2, r7, r5
 8004d6c:	7892      	ldrb	r2, [r2, #2]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004d6e:	4313      	orrs	r3, r2
                 calib_data[3]);
 8004d70:	197a      	adds	r2, r7, r5
 8004d72:	78d2      	ldrb	r2, [r2, #3]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004d74:	0014      	movs	r4, r2
 8004d76:	4a27      	ldr	r2, [pc, #156]	@ (8004e14 <bme680_check_calibration_data+0x130>)
 8004d78:	1d38      	adds	r0, r7, #4
 8004d7a:	9401      	str	r4, [sp, #4]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	000b      	movs	r3, r1
 8004d80:	2180      	movs	r1, #128	@ 0x80
 8004d82:	f00c f8fd 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f7fe fe09 	bl	80039a0 <debug_print>
        
        snprintf(debug_msg, sizeof(debug_msg), 
                 "P1: 0x%04X, P2: 0x%04X, P3: 0x%02X\r\n",
                 (calib_data[5] << 8) | calib_data[4],
 8004d8e:	0028      	movs	r0, r5
 8004d90:	183b      	adds	r3, r7, r0
 8004d92:	795b      	ldrb	r3, [r3, #5]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	183a      	adds	r2, r7, r0
 8004d98:	7912      	ldrb	r2, [r2, #4]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	0019      	movs	r1, r3
                 (calib_data[7] << 8) | calib_data[6],
 8004d9e:	0005      	movs	r5, r0
 8004da0:	197b      	adds	r3, r7, r5
 8004da2:	79db      	ldrb	r3, [r3, #7]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	197a      	adds	r2, r7, r5
 8004da8:	7992      	ldrb	r2, [r2, #6]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004daa:	4313      	orrs	r3, r2
                 calib_data[7]);
 8004dac:	197a      	adds	r2, r7, r5
 8004dae:	79d2      	ldrb	r2, [r2, #7]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004db0:	0014      	movs	r4, r2
 8004db2:	4a19      	ldr	r2, [pc, #100]	@ (8004e18 <bme680_check_calibration_data+0x134>)
 8004db4:	1d38      	adds	r0, r7, #4
 8004db6:	9401      	str	r4, [sp, #4]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	000b      	movs	r3, r1
 8004dbc:	2180      	movs	r1, #128	@ 0x80
 8004dbe:	f00c f8df 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7fe fdeb 	bl	80039a0 <debug_print>
        
        snprintf(debug_msg, sizeof(debug_msg), 
                 "H1: 0x%02X, H2: 0x%04X\r\n",
                 calib_data[25],
 8004dca:	002a      	movs	r2, r5
 8004dcc:	18bb      	adds	r3, r7, r2
 8004dce:	7e5b      	ldrb	r3, [r3, #25]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004dd0:	0019      	movs	r1, r3
                 (calib_data[26] << 8) | calib_data[27]);
 8004dd2:	18bb      	adds	r3, r7, r2
 8004dd4:	7e9b      	ldrb	r3, [r3, #26]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	18ba      	adds	r2, r7, r2
 8004dda:	7ed2      	ldrb	r2, [r2, #27]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	4a0f      	ldr	r2, [pc, #60]	@ (8004e1c <bme680_check_calibration_data+0x138>)
 8004de0:	1d38      	adds	r0, r7, #4
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	000b      	movs	r3, r1
 8004de6:	2180      	movs	r1, #128	@ 0x80
 8004de8:	f00c f8ca 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8004dec:	1d3b      	adds	r3, r7, #4
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fe fdd6 	bl	80039a0 <debug_print>
    } else {
        debug_print("✗ Failed to read calibration data\r\n");
    }
}
 8004df4:	e003      	b.n	8004dfe <bme680_check_calibration_data+0x11a>
        debug_print("✗ Failed to read calibration data\r\n");
 8004df6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e20 <bme680_check_calibration_data+0x13c>)
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fe fdd1 	bl	80039a0 <debug_print>
}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b02d      	add	sp, #180	@ 0xb4
 8004e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	080145a8 	.word	0x080145a8
 8004e0c:	200002e8 	.word	0x200002e8
 8004e10:	080145d0 	.word	0x080145d0
 8004e14:	080145fc 	.word	0x080145fc
 8004e18:	08014624 	.word	0x08014624
 8004e1c:	0801464c 	.word	0x0801464c
 8004e20:	08014668 	.word	0x08014668

08004e24 <bme680_read_raw_adc_values>:

// Read raw ADC values directly from BME680
void bme680_read_raw_adc_values(void)
{
 8004e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e26:	b0ad      	sub	sp, #180	@ 0xb4
 8004e28:	af04      	add	r7, sp, #16
    uint8_t raw_data[8];
    char debug_msg[128];
    
    debug_print("Reading raw BME680 ADC values...\r\n");
 8004e2a:	4b55      	ldr	r3, [pc, #340]	@ (8004f80 <bme680_read_raw_adc_values+0x15c>)
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f7fe fdb7 	bl	80039a0 <debug_print>
    
    // Read raw temperature, pressure, and humidity ADC values
    // Temperature: registers 0x22-0x24
    // Pressure: registers 0x1F-0x21  
    // Humidity: registers 0x25-0x26
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0x1F, 
 8004e32:	269f      	movs	r6, #159	@ 0x9f
 8004e34:	19bc      	adds	r4, r7, r6
 8004e36:	4853      	ldr	r0, [pc, #332]	@ (8004f84 <bme680_read_raw_adc_values+0x160>)
 8004e38:	23fa      	movs	r3, #250	@ 0xfa
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	9302      	str	r3, [sp, #8]
 8004e3e:	2308      	movs	r3, #8
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	2584      	movs	r5, #132	@ 0x84
 8004e44:	197b      	adds	r3, r7, r5
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2301      	movs	r3, #1
 8004e4a:	221f      	movs	r2, #31
 8004e4c:	21ec      	movs	r1, #236	@ 0xec
 8004e4e:	f007 f9b1 	bl	800c1b4 <HAL_I2C_Mem_Read>
 8004e52:	0003      	movs	r3, r0
 8004e54:	7023      	strb	r3, [r4, #0]
                                                I2C_MEMADD_SIZE_8BIT, raw_data, 8, 1000);
    
    if (status == HAL_OK) {
 8004e56:	0034      	movs	r4, r6
 8004e58:	193b      	adds	r3, r7, r4
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d000      	beq.n	8004e62 <bme680_read_raw_adc_values+0x3e>
 8004e60:	e086      	b.n	8004f70 <bme680_read_raw_adc_values+0x14c>
        // Extract raw ADC values
        uint32_t raw_temp = ((uint32_t)raw_data[3] << 12) | ((uint32_t)raw_data[4] << 4) | ((uint32_t)raw_data[5] >> 4);
 8004e62:	0029      	movs	r1, r5
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	78db      	ldrb	r3, [r3, #3]
 8004e68:	031a      	lsls	r2, r3, #12
 8004e6a:	187b      	adds	r3, r7, r1
 8004e6c:	791b      	ldrb	r3, [r3, #4]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	4313      	orrs	r3, r2
 8004e72:	187a      	adds	r2, r7, r1
 8004e74:	7952      	ldrb	r2, [r2, #5]
 8004e76:	0912      	lsrs	r2, r2, #4
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	2098      	movs	r0, #152	@ 0x98
 8004e7e:	183a      	adds	r2, r7, r0
 8004e80:	6013      	str	r3, [r2, #0]
        uint32_t raw_press = ((uint32_t)raw_data[0] << 12) | ((uint32_t)raw_data[1] << 4) | ((uint32_t)raw_data[2] >> 4);
 8004e82:	187b      	adds	r3, r7, r1
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	031a      	lsls	r2, r3, #12
 8004e88:	187b      	adds	r3, r7, r1
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	187a      	adds	r2, r7, r1
 8004e92:	7892      	ldrb	r2, [r2, #2]
 8004e94:	0912      	lsrs	r2, r2, #4
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	2594      	movs	r5, #148	@ 0x94
 8004e9c:	197a      	adds	r2, r7, r5
 8004e9e:	6013      	str	r3, [r2, #0]
        uint16_t raw_hum = ((uint16_t)raw_data[6] << 8) | raw_data[7];
 8004ea0:	187b      	adds	r3, r7, r1
 8004ea2:	799b      	ldrb	r3, [r3, #6]
 8004ea4:	b21b      	sxth	r3, r3
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	b21a      	sxth	r2, r3
 8004eaa:	187b      	adds	r3, r7, r1
 8004eac:	79db      	ldrb	r3, [r3, #7]
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	b21a      	sxth	r2, r3
 8004eb4:	2192      	movs	r1, #146	@ 0x92
 8004eb6:	187b      	adds	r3, r7, r1
 8004eb8:	801a      	strh	r2, [r3, #0]
        
        snprintf(debug_msg, sizeof(debug_msg), 
 8004eba:	187b      	adds	r3, r7, r1
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	183a      	adds	r2, r7, r0
 8004ec0:	6811      	ldr	r1, [r2, #0]
 8004ec2:	4a31      	ldr	r2, [pc, #196]	@ (8004f88 <bme680_read_raw_adc_values+0x164>)
 8004ec4:	1d38      	adds	r0, r7, #4
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	197b      	adds	r3, r7, r5
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	000b      	movs	r3, r1
 8004ed0:	2180      	movs	r1, #128	@ 0x80
 8004ed2:	f00c f855 	bl	8010f80 <sniprintf>
                 "Raw ADC values - Temp: %lu, Press: %lu, Hum: %u\r\n",
                 raw_temp, raw_press, raw_hum);
        debug_print(debug_msg);
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7fe fd61 	bl	80039a0 <debug_print>
        
        // Also read the calibration data to understand the conversion
        uint8_t calib_temp[3];
        status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0xE1, 
 8004ede:	0025      	movs	r5, r4
 8004ee0:	193c      	adds	r4, r7, r4
 8004ee2:	4828      	ldr	r0, [pc, #160]	@ (8004f84 <bme680_read_raw_adc_values+0x160>)
 8004ee4:	23fa      	movs	r3, #250	@ 0xfa
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	9302      	str	r3, [sp, #8]
 8004eea:	2303      	movs	r3, #3
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	003b      	movs	r3, r7
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	22e1      	movs	r2, #225	@ 0xe1
 8004ef6:	21ec      	movs	r1, #236	@ 0xec
 8004ef8:	f007 f95c 	bl	800c1b4 <HAL_I2C_Mem_Read>
 8004efc:	0003      	movs	r3, r0
 8004efe:	7023      	strb	r3, [r4, #0]
                                  I2C_MEMADD_SIZE_8BIT, calib_temp, 3, 1000);
        
        if (status == HAL_OK) {
 8004f00:	197b      	adds	r3, r7, r5
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d137      	bne.n	8004f78 <bme680_read_raw_adc_values+0x154>
            uint16_t T1 = (calib_temp[1] << 8) | calib_temp[0];
 8004f08:	003b      	movs	r3, r7
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	b21b      	sxth	r3, r3
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	b21a      	sxth	r2, r3
 8004f12:	003b      	movs	r3, r7
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b21b      	sxth	r3, r3
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	b21a      	sxth	r2, r3
 8004f1c:	2090      	movs	r0, #144	@ 0x90
 8004f1e:	183b      	adds	r3, r7, r0
 8004f20:	801a      	strh	r2, [r3, #0]
            int16_t T2 = (int16_t)((calib_temp[3] << 8) | calib_temp[2]);
 8004f22:	003b      	movs	r3, r7
 8004f24:	78db      	ldrb	r3, [r3, #3]
 8004f26:	b21b      	sxth	r3, r3
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	b219      	sxth	r1, r3
 8004f2c:	003b      	movs	r3, r7
 8004f2e:	789b      	ldrb	r3, [r3, #2]
 8004f30:	b21a      	sxth	r2, r3
 8004f32:	258e      	movs	r5, #142	@ 0x8e
 8004f34:	197b      	adds	r3, r7, r5
 8004f36:	430a      	orrs	r2, r1
 8004f38:	801a      	strh	r2, [r3, #0]
            int8_t T3 = (int8_t)calib_temp[4];
 8004f3a:	003b      	movs	r3, r7
 8004f3c:	791a      	ldrb	r2, [r3, #4]
 8004f3e:	218d      	movs	r1, #141	@ 0x8d
 8004f40:	187b      	adds	r3, r7, r1
 8004f42:	701a      	strb	r2, [r3, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), 
 8004f44:	183b      	adds	r3, r7, r0
 8004f46:	881c      	ldrh	r4, [r3, #0]
 8004f48:	197b      	adds	r3, r7, r5
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	5e9b      	ldrsh	r3, [r3, r2]
 8004f4e:	187a      	adds	r2, r7, r1
 8004f50:	7812      	ldrb	r2, [r2, #0]
 8004f52:	b252      	sxtb	r2, r2
 8004f54:	490d      	ldr	r1, [pc, #52]	@ (8004f8c <bme680_read_raw_adc_values+0x168>)
 8004f56:	1d38      	adds	r0, r7, #4
 8004f58:	9201      	str	r2, [sp, #4]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	0023      	movs	r3, r4
 8004f5e:	000a      	movs	r2, r1
 8004f60:	2180      	movs	r1, #128	@ 0x80
 8004f62:	f00c f80d 	bl	8010f80 <sniprintf>
                     "Temp calibration - T1: %u, T2: %d, T3: %d\r\n",
                     T1, T2, T3);
            debug_print(debug_msg);
 8004f66:	1d3b      	adds	r3, r7, #4
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f7fe fd19 	bl	80039a0 <debug_print>
        }
    } else {
        debug_print("✗ Failed to read raw ADC values\r\n");
    }
}
 8004f6e:	e003      	b.n	8004f78 <bme680_read_raw_adc_values+0x154>
        debug_print("✗ Failed to read raw ADC values\r\n");
 8004f70:	4b07      	ldr	r3, [pc, #28]	@ (8004f90 <bme680_read_raw_adc_values+0x16c>)
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7fe fd14 	bl	80039a0 <debug_print>
}
 8004f78:	46c0      	nop			@ (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b029      	add	sp, #164	@ 0xa4
 8004f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f80:	08014690 	.word	0x08014690
 8004f84:	200002e8 	.word	0x200002e8
 8004f88:	080146b4 	.word	0x080146b4
 8004f8c:	080146e8 	.word	0x080146e8
 8004f90:	08014714 	.word	0x08014714

08004f94 <bme680_read_raw_registers>:

// Simple direct register reading test
void bme680_read_raw_registers(void)
{
 8004f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f96:	b0ab      	sub	sp, #172	@ 0xac
 8004f98:	af04      	add	r7, sp, #16
    uint8_t raw_data[8];
    char debug_msg[128];
    
    debug_print("Reading raw BME680 registers...\r\n");
 8004f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80050d4 <bme680_read_raw_registers+0x140>)
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7fe fcff 	bl	80039a0 <debug_print>
    
    // Read temperature, pressure, and humidity registers (0x22-0x26)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0x22, 
 8004fa2:	2697      	movs	r6, #151	@ 0x97
 8004fa4:	19bc      	adds	r4, r7, r6
 8004fa6:	484c      	ldr	r0, [pc, #304]	@ (80050d8 <bme680_read_raw_registers+0x144>)
 8004fa8:	23fa      	movs	r3, #250	@ 0xfa
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	9302      	str	r3, [sp, #8]
 8004fae:	2308      	movs	r3, #8
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	2580      	movs	r5, #128	@ 0x80
 8004fb4:	197b      	adds	r3, r7, r5
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	2301      	movs	r3, #1
 8004fba:	2222      	movs	r2, #34	@ 0x22
 8004fbc:	21ec      	movs	r1, #236	@ 0xec
 8004fbe:	f007 f8f9 	bl	800c1b4 <HAL_I2C_Mem_Read>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	7023      	strb	r3, [r4, #0]
                                                I2C_MEMADD_SIZE_8BIT, raw_data, 8, 1000);
    
    if (status == HAL_OK) {
 8004fc6:	19bb      	adds	r3, r7, r6
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d179      	bne.n	80050c2 <bme680_read_raw_registers+0x12e>
        snprintf(debug_msg, sizeof(debug_msg), 
                 "Raw registers: 0x22=0x%02X, 0x23=0x%02X, 0x24=0x%02X, 0x25=0x%02X, 0x26=0x%02X\r\n",
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 8004fce:	002a      	movs	r2, r5
 8004fd0:	18bb      	adds	r3, r7, r2
 8004fd2:	781b      	ldrb	r3, [r3, #0]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004fd4:	001e      	movs	r6, r3
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 8004fd6:	18bb      	adds	r3, r7, r2
 8004fd8:	785b      	ldrb	r3, [r3, #1]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004fda:	0019      	movs	r1, r3
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 8004fdc:	18bb      	adds	r3, r7, r2
 8004fde:	789b      	ldrb	r3, [r3, #2]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004fe0:	001c      	movs	r4, r3
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 8004fe2:	18bb      	adds	r3, r7, r2
 8004fe4:	78db      	ldrb	r3, [r3, #3]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004fe6:	001d      	movs	r5, r3
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 8004fe8:	18bb      	adds	r3, r7, r2
 8004fea:	791b      	ldrb	r3, [r3, #4]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004fec:	4a3b      	ldr	r2, [pc, #236]	@ (80050dc <bme680_read_raw_registers+0x148>)
 8004fee:	0038      	movs	r0, r7
 8004ff0:	9303      	str	r3, [sp, #12]
 8004ff2:	9502      	str	r5, [sp, #8]
 8004ff4:	9401      	str	r4, [sp, #4]
 8004ff6:	9100      	str	r1, [sp, #0]
 8004ff8:	0033      	movs	r3, r6
 8004ffa:	2180      	movs	r1, #128	@ 0x80
 8004ffc:	f00b ffc0 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8005000:	003b      	movs	r3, r7
 8005002:	0018      	movs	r0, r3
 8005004:	f7fe fccc 	bl	80039a0 <debug_print>
        
        // Calculate raw temperature (24-bit value)
        uint32_t temp_raw = ((uint32_t)raw_data[0] << 12) | ((uint32_t)raw_data[1] << 4) | ((uint32_t)raw_data[2] >> 4);
 8005008:	2480      	movs	r4, #128	@ 0x80
 800500a:	193b      	adds	r3, r7, r4
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	031a      	lsls	r2, r3, #12
 8005010:	193b      	adds	r3, r7, r4
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	4313      	orrs	r3, r2
 8005018:	193a      	adds	r2, r7, r4
 800501a:	7892      	ldrb	r2, [r2, #2]
 800501c:	0912      	lsrs	r2, r2, #4
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	4313      	orrs	r3, r2
 8005022:	2290      	movs	r2, #144	@ 0x90
 8005024:	18b9      	adds	r1, r7, r2
 8005026:	600b      	str	r3, [r1, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Raw temperature value: 0x%06lX (%lu)\r\n", temp_raw, temp_raw);
 8005028:	0013      	movs	r3, r2
 800502a:	18fa      	adds	r2, r7, r3
 800502c:	6811      	ldr	r1, [r2, #0]
 800502e:	4a2c      	ldr	r2, [pc, #176]	@ (80050e0 <bme680_read_raw_registers+0x14c>)
 8005030:	0038      	movs	r0, r7
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	000b      	movs	r3, r1
 800503a:	2180      	movs	r1, #128	@ 0x80
 800503c:	f00b ffa0 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 8005040:	003b      	movs	r3, r7
 8005042:	0018      	movs	r0, r3
 8005044:	f7fe fcac 	bl	80039a0 <debug_print>
        
        // Calculate raw pressure (24-bit value)
        uint32_t press_raw = ((uint32_t)raw_data[3] << 12) | ((uint32_t)raw_data[4] << 4) | ((uint32_t)raw_data[5] >> 4);
 8005048:	193b      	adds	r3, r7, r4
 800504a:	78db      	ldrb	r3, [r3, #3]
 800504c:	031a      	lsls	r2, r3, #12
 800504e:	193b      	adds	r3, r7, r4
 8005050:	791b      	ldrb	r3, [r3, #4]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	4313      	orrs	r3, r2
 8005056:	193a      	adds	r2, r7, r4
 8005058:	7952      	ldrb	r2, [r2, #5]
 800505a:	0912      	lsrs	r2, r2, #4
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	4313      	orrs	r3, r2
 8005060:	228c      	movs	r2, #140	@ 0x8c
 8005062:	18b9      	adds	r1, r7, r2
 8005064:	600b      	str	r3, [r1, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Raw pressure value: 0x%06lX (%lu)\r\n", press_raw, press_raw);
 8005066:	0013      	movs	r3, r2
 8005068:	18fa      	adds	r2, r7, r3
 800506a:	6811      	ldr	r1, [r2, #0]
 800506c:	4a1d      	ldr	r2, [pc, #116]	@ (80050e4 <bme680_read_raw_registers+0x150>)
 800506e:	0038      	movs	r0, r7
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	000b      	movs	r3, r1
 8005078:	2180      	movs	r1, #128	@ 0x80
 800507a:	f00b ff81 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 800507e:	003b      	movs	r3, r7
 8005080:	0018      	movs	r0, r3
 8005082:	f7fe fc8d 	bl	80039a0 <debug_print>
        
        // Calculate raw humidity (16-bit value)
        uint16_t hum_raw = ((uint16_t)raw_data[6] << 8) | raw_data[7];
 8005086:	193b      	adds	r3, r7, r4
 8005088:	799b      	ldrb	r3, [r3, #6]
 800508a:	b21b      	sxth	r3, r3
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	b21a      	sxth	r2, r3
 8005090:	193b      	adds	r3, r7, r4
 8005092:	79db      	ldrb	r3, [r3, #7]
 8005094:	b21b      	sxth	r3, r3
 8005096:	4313      	orrs	r3, r2
 8005098:	b21a      	sxth	r2, r3
 800509a:	218a      	movs	r1, #138	@ 0x8a
 800509c:	187b      	adds	r3, r7, r1
 800509e:	801a      	strh	r2, [r3, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Raw humidity value: 0x%04X (%u)\r\n", hum_raw, hum_raw);
 80050a0:	000a      	movs	r2, r1
 80050a2:	18bb      	adds	r3, r7, r2
 80050a4:	8819      	ldrh	r1, [r3, #0]
 80050a6:	18bb      	adds	r3, r7, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	4a0f      	ldr	r2, [pc, #60]	@ (80050e8 <bme680_read_raw_registers+0x154>)
 80050ac:	0038      	movs	r0, r7
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	000b      	movs	r3, r1
 80050b2:	2180      	movs	r1, #128	@ 0x80
 80050b4:	f00b ff64 	bl	8010f80 <sniprintf>
        debug_print(debug_msg);
 80050b8:	003b      	movs	r3, r7
 80050ba:	0018      	movs	r0, r3
 80050bc:	f7fe fc70 	bl	80039a0 <debug_print>
    } else {
        debug_print("Failed to read raw registers\r\n");
    }
}
 80050c0:	e003      	b.n	80050ca <bme680_read_raw_registers+0x136>
        debug_print("Failed to read raw registers\r\n");
 80050c2:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <bme680_read_raw_registers+0x158>)
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7fe fc6b 	bl	80039a0 <debug_print>
}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b027      	add	sp, #156	@ 0x9c
 80050d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	08014738 	.word	0x08014738
 80050d8:	200002e8 	.word	0x200002e8
 80050dc:	0801475c 	.word	0x0801475c
 80050e0:	080147b0 	.word	0x080147b0
 80050e4:	080147d8 	.word	0x080147d8
 80050e8:	080147fc 	.word	0x080147fc
 80050ec:	08014820 	.word	0x08014820

080050f0 <bme680_test_sensor>:

// Test BME680 sensor
void bme680_test_sensor(void)
{
 80050f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f2:	b0e7      	sub	sp, #412	@ 0x19c
 80050f4:	af06      	add	r7, sp, #24
    struct bme68x_data sensor_data;
    char test_msg[256];
    
    debug_print("Testing BME680 sensor...\r\n");
 80050f6:	4bdf      	ldr	r3, [pc, #892]	@ (8005474 <bme680_test_sensor+0x384>)
 80050f8:	0018      	movs	r0, r3
 80050fa:	f7fe fc51 	bl	80039a0 <debug_print>
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 80050fe:	2484      	movs	r4, #132	@ 0x84
 8005100:	0064      	lsls	r4, r4, #1
 8005102:	193b      	adds	r3, r7, r4
 8005104:	0018      	movs	r0, r3
 8005106:	f7ff f811 	bl	800412c <bme680_read_sensor_data>
 800510a:	1e03      	subs	r3, r0, #0
 800510c:	d000      	beq.n	8005110 <bme680_test_sensor+0x20>
 800510e:	e300      	b.n	8005712 <bme680_test_sensor+0x622>
        // Decode all sensor values
        uint32_t temp_mem = *(uint32_t*)&sensor_data.temperature;
 8005110:	193b      	adds	r3, r7, r4
 8005112:	3308      	adds	r3, #8
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	22a8      	movs	r2, #168	@ 0xa8
 8005118:	0052      	lsls	r2, r2, #1
 800511a:	2008      	movs	r0, #8
 800511c:	1811      	adds	r1, r2, r0
 800511e:	19c9      	adds	r1, r1, r7
 8005120:	600b      	str	r3, [r1, #0]
        uint32_t press_mem = *(uint32_t*)&sensor_data.pressure;
 8005122:	193b      	adds	r3, r7, r4
 8005124:	330c      	adds	r3, #12
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	21a6      	movs	r1, #166	@ 0xa6
 800512a:	0049      	lsls	r1, r1, #1
 800512c:	1809      	adds	r1, r1, r0
 800512e:	19c9      	adds	r1, r1, r7
 8005130:	600b      	str	r3, [r1, #0]
        uint32_t hum_mem = *(uint32_t*)&sensor_data.humidity;
 8005132:	193b      	adds	r3, r7, r4
 8005134:	3310      	adds	r3, #16
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	21a4      	movs	r1, #164	@ 0xa4
 800513a:	0049      	lsls	r1, r1, #1
 800513c:	1809      	adds	r1, r1, r0
 800513e:	19c9      	adds	r1, r1, r7
 8005140:	600b      	str	r3, [r1, #0]
        
        float temp_decoded = 0.0f, press_decoded = 0.0f, hum_decoded = 0.0f;
 8005142:	2300      	movs	r3, #0
 8005144:	21ba      	movs	r1, #186	@ 0xba
 8005146:	0049      	lsls	r1, r1, #1
 8005148:	1809      	adds	r1, r1, r0
 800514a:	19c9      	adds	r1, r1, r7
 800514c:	600b      	str	r3, [r1, #0]
 800514e:	2300      	movs	r3, #0
 8005150:	21b8      	movs	r1, #184	@ 0xb8
 8005152:	0049      	lsls	r1, r1, #1
 8005154:	1809      	adds	r1, r1, r0
 8005156:	19c9      	adds	r1, r1, r7
 8005158:	600b      	str	r3, [r1, #0]
 800515a:	2300      	movs	r3, #0
 800515c:	21b6      	movs	r1, #182	@ 0xb6
 800515e:	0049      	lsls	r1, r1, #1
 8005160:	1809      	adds	r1, r1, r0
 8005162:	19c9      	adds	r1, r1, r7
 8005164:	600b      	str	r3, [r1, #0]
        
        // Decode temperature
        uint32_t temp_sign = (temp_mem >> 31) & 0x1;
 8005166:	1813      	adds	r3, r2, r0
 8005168:	19db      	adds	r3, r3, r7
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	0fdb      	lsrs	r3, r3, #31
 800516e:	21a2      	movs	r1, #162	@ 0xa2
 8005170:	0049      	lsls	r1, r1, #1
 8005172:	1809      	adds	r1, r1, r0
 8005174:	19c9      	adds	r1, r1, r7
 8005176:	600b      	str	r3, [r1, #0]
        uint32_t temp_exp = (temp_mem >> 23) & 0xFF;
 8005178:	0011      	movs	r1, r2
 800517a:	1813      	adds	r3, r2, r0
 800517c:	19db      	adds	r3, r3, r7
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	0ddb      	lsrs	r3, r3, #23
 8005182:	22ff      	movs	r2, #255	@ 0xff
 8005184:	4013      	ands	r3, r2
 8005186:	22a0      	movs	r2, #160	@ 0xa0
 8005188:	0052      	lsls	r2, r2, #1
 800518a:	0004      	movs	r4, r0
 800518c:	1810      	adds	r0, r2, r0
 800518e:	19c0      	adds	r0, r0, r7
 8005190:	6003      	str	r3, [r0, #0]
        uint32_t temp_mant = temp_mem & 0x7FFFFF;
 8005192:	0020      	movs	r0, r4
 8005194:	180b      	adds	r3, r1, r0
 8005196:	19db      	adds	r3, r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	025b      	lsls	r3, r3, #9
 800519c:	0a5b      	lsrs	r3, r3, #9
 800519e:	219e      	movs	r1, #158	@ 0x9e
 80051a0:	0049      	lsls	r1, r1, #1
 80051a2:	1809      	adds	r1, r1, r0
 80051a4:	19c9      	adds	r1, r1, r7
 80051a6:	600b      	str	r3, [r1, #0]
        
        if (temp_exp != 0 && temp_exp != 0xFF) {
 80051a8:	0001      	movs	r1, r0
 80051aa:	1853      	adds	r3, r2, r1
 80051ac:	19db      	adds	r3, r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d100      	bne.n	80051b6 <bme680_test_sensor+0xc6>
 80051b4:	e0b8      	b.n	8005328 <bme680_test_sensor+0x238>
 80051b6:	1853      	adds	r3, r2, r1
 80051b8:	19db      	adds	r3, r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2bff      	cmp	r3, #255	@ 0xff
 80051be:	d100      	bne.n	80051c2 <bme680_test_sensor+0xd2>
 80051c0:	e0b2      	b.n	8005328 <bme680_test_sensor+0x238>
            int temp_exp_val = (int)temp_exp - 127;
 80051c2:	1853      	adds	r3, r2, r1
 80051c4:	19db      	adds	r3, r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3b7f      	subs	r3, #127	@ 0x7f
 80051ca:	229c      	movs	r2, #156	@ 0x9c
 80051cc:	0052      	lsls	r2, r2, #1
 80051ce:	1852      	adds	r2, r2, r1
 80051d0:	19d2      	adds	r2, r2, r7
 80051d2:	6013      	str	r3, [r2, #0]
            float temp_result = 1.0f;
 80051d4:	23fe      	movs	r3, #254	@ 0xfe
 80051d6:	059b      	lsls	r3, r3, #22
 80051d8:	22b4      	movs	r2, #180	@ 0xb4
 80051da:	0052      	lsls	r2, r2, #1
 80051dc:	1852      	adds	r2, r2, r1
 80051de:	19d2      	adds	r2, r2, r7
 80051e0:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80051e2:	2316      	movs	r3, #22
 80051e4:	22b2      	movs	r2, #178	@ 0xb2
 80051e6:	0052      	lsls	r2, r2, #1
 80051e8:	1852      	adds	r2, r2, r1
 80051ea:	19d2      	adds	r2, r2, r7
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	e038      	b.n	8005262 <bme680_test_sensor+0x172>
                if (temp_mant & (1 << i)) {
 80051f0:	2201      	movs	r2, #1
 80051f2:	21b2      	movs	r1, #178	@ 0xb2
 80051f4:	0049      	lsls	r1, r1, #1
 80051f6:	2508      	movs	r5, #8
 80051f8:	194b      	adds	r3, r1, r5
 80051fa:	19db      	adds	r3, r3, r7
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	409a      	lsls	r2, r3
 8005200:	0013      	movs	r3, r2
 8005202:	001a      	movs	r2, r3
 8005204:	239e      	movs	r3, #158	@ 0x9e
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	195b      	adds	r3, r3, r5
 800520a:	19db      	adds	r3, r3, r7
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4013      	ands	r3, r2
 8005210:	d01d      	beq.n	800524e <bme680_test_sensor+0x15e>
                    temp_result += 1.0f / (1 << (23 - i));
 8005212:	194b      	adds	r3, r1, r5
 8005214:	19db      	adds	r3, r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2217      	movs	r2, #23
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2201      	movs	r2, #1
 800521e:	409a      	lsls	r2, r3
 8005220:	0013      	movs	r3, r2
 8005222:	0018      	movs	r0, r3
 8005224:	f7fc fa92 	bl	800174c <__aeabi_i2f>
 8005228:	1c03      	adds	r3, r0, #0
 800522a:	1c19      	adds	r1, r3, #0
 800522c:	20fe      	movs	r0, #254	@ 0xfe
 800522e:	0580      	lsls	r0, r0, #22
 8005230:	f7fb fce0 	bl	8000bf4 <__aeabi_fdiv>
 8005234:	1c03      	adds	r3, r0, #0
 8005236:	1c19      	adds	r1, r3, #0
 8005238:	24b4      	movs	r4, #180	@ 0xb4
 800523a:	0064      	lsls	r4, r4, #1
 800523c:	1963      	adds	r3, r4, r5
 800523e:	19db      	adds	r3, r3, r7
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	f7fb fae5 	bl	8000810 <__aeabi_fadd>
 8005246:	1c03      	adds	r3, r0, #0
 8005248:	1962      	adds	r2, r4, r5
 800524a:	19d2      	adds	r2, r2, r7
 800524c:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 800524e:	22b2      	movs	r2, #178	@ 0xb2
 8005250:	0052      	lsls	r2, r2, #1
 8005252:	2108      	movs	r1, #8
 8005254:	1853      	adds	r3, r2, r1
 8005256:	19db      	adds	r3, r3, r7
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3b01      	subs	r3, #1
 800525c:	1852      	adds	r2, r2, r1
 800525e:	19d2      	adds	r2, r2, r7
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	23b2      	movs	r3, #178	@ 0xb2
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	2508      	movs	r5, #8
 8005268:	195b      	adds	r3, r3, r5
 800526a:	19db      	adds	r3, r3, r7
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	dabe      	bge.n	80051f0 <bme680_test_sensor+0x100>
                }
            }
            if (temp_exp_val > 0) temp_result *= (1 << temp_exp_val);
 8005272:	219c      	movs	r1, #156	@ 0x9c
 8005274:	0049      	lsls	r1, r1, #1
 8005276:	194b      	adds	r3, r1, r5
 8005278:	19db      	adds	r3, r3, r7
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	dd16      	ble.n	80052ae <bme680_test_sensor+0x1be>
 8005280:	2201      	movs	r2, #1
 8005282:	194b      	adds	r3, r1, r5
 8005284:	19db      	adds	r3, r3, r7
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	409a      	lsls	r2, r3
 800528a:	0013      	movs	r3, r2
 800528c:	0018      	movs	r0, r3
 800528e:	f7fc fa5d 	bl	800174c <__aeabi_i2f>
 8005292:	1c03      	adds	r3, r0, #0
 8005294:	1c19      	adds	r1, r3, #0
 8005296:	24b4      	movs	r4, #180	@ 0xb4
 8005298:	0064      	lsls	r4, r4, #1
 800529a:	1963      	adds	r3, r4, r5
 800529c:	19db      	adds	r3, r3, r7
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	f7fb fe76 	bl	8000f90 <__aeabi_fmul>
 80052a4:	1c03      	adds	r3, r0, #0
 80052a6:	1962      	adds	r2, r4, r5
 80052a8:	19d2      	adds	r2, r2, r7
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e01e      	b.n	80052ec <bme680_test_sensor+0x1fc>
            else if (temp_exp_val < 0) temp_result /= (1 << (-temp_exp_val));
 80052ae:	229c      	movs	r2, #156	@ 0x9c
 80052b0:	0052      	lsls	r2, r2, #1
 80052b2:	2508      	movs	r5, #8
 80052b4:	1953      	adds	r3, r2, r5
 80052b6:	19db      	adds	r3, r3, r7
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	da16      	bge.n	80052ec <bme680_test_sensor+0x1fc>
 80052be:	1953      	adds	r3, r2, r5
 80052c0:	19db      	adds	r3, r3, r7
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	425b      	negs	r3, r3
 80052c6:	2201      	movs	r2, #1
 80052c8:	409a      	lsls	r2, r3
 80052ca:	0013      	movs	r3, r2
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7fc fa3d 	bl	800174c <__aeabi_i2f>
 80052d2:	1c03      	adds	r3, r0, #0
 80052d4:	1c19      	adds	r1, r3, #0
 80052d6:	24b4      	movs	r4, #180	@ 0xb4
 80052d8:	0064      	lsls	r4, r4, #1
 80052da:	1963      	adds	r3, r4, r5
 80052dc:	19db      	adds	r3, r3, r7
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	f7fb fc88 	bl	8000bf4 <__aeabi_fdiv>
 80052e4:	1c03      	adds	r3, r0, #0
 80052e6:	1962      	adds	r2, r4, r5
 80052e8:	19d2      	adds	r2, r2, r7
 80052ea:	6013      	str	r3, [r2, #0]
            if (temp_sign) temp_result = -temp_result;
 80052ec:	23a2      	movs	r3, #162	@ 0xa2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	2008      	movs	r0, #8
 80052f2:	181b      	adds	r3, r3, r0
 80052f4:	19db      	adds	r3, r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <bme680_test_sensor+0x222>
 80052fc:	21b4      	movs	r1, #180	@ 0xb4
 80052fe:	0049      	lsls	r1, r1, #1
 8005300:	180b      	adds	r3, r1, r0
 8005302:	19db      	adds	r3, r3, r7
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2280      	movs	r2, #128	@ 0x80
 8005308:	0612      	lsls	r2, r2, #24
 800530a:	4053      	eors	r3, r2
 800530c:	180a      	adds	r2, r1, r0
 800530e:	19d2      	adds	r2, r2, r7
 8005310:	6013      	str	r3, [r2, #0]
            temp_decoded = temp_result;
 8005312:	23b4      	movs	r3, #180	@ 0xb4
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	2108      	movs	r1, #8
 8005318:	185b      	adds	r3, r3, r1
 800531a:	19db      	adds	r3, r3, r7
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	22ba      	movs	r2, #186	@ 0xba
 8005320:	0052      	lsls	r2, r2, #1
 8005322:	1852      	adds	r2, r2, r1
 8005324:	19d2      	adds	r2, r2, r7
 8005326:	6013      	str	r3, [r2, #0]
        }
        
        // Decode pressure
        uint32_t press_sign = (press_mem >> 31) & 0x1;
 8005328:	21a6      	movs	r1, #166	@ 0xa6
 800532a:	0049      	lsls	r1, r1, #1
 800532c:	2008      	movs	r0, #8
 800532e:	180b      	adds	r3, r1, r0
 8005330:	19db      	adds	r3, r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	0fdb      	lsrs	r3, r3, #31
 8005336:	229a      	movs	r2, #154	@ 0x9a
 8005338:	0052      	lsls	r2, r2, #1
 800533a:	1812      	adds	r2, r2, r0
 800533c:	19d2      	adds	r2, r2, r7
 800533e:	6013      	str	r3, [r2, #0]
        uint32_t press_exp = (press_mem >> 23) & 0xFF;
 8005340:	180b      	adds	r3, r1, r0
 8005342:	19db      	adds	r3, r3, r7
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	0ddb      	lsrs	r3, r3, #23
 8005348:	22ff      	movs	r2, #255	@ 0xff
 800534a:	4013      	ands	r3, r2
 800534c:	2298      	movs	r2, #152	@ 0x98
 800534e:	0052      	lsls	r2, r2, #1
 8005350:	0004      	movs	r4, r0
 8005352:	1810      	adds	r0, r2, r0
 8005354:	19c0      	adds	r0, r0, r7
 8005356:	6003      	str	r3, [r0, #0]
        uint32_t press_mant = press_mem & 0x7FFFFF;
 8005358:	0020      	movs	r0, r4
 800535a:	180b      	adds	r3, r1, r0
 800535c:	19db      	adds	r3, r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	025b      	lsls	r3, r3, #9
 8005362:	0a5b      	lsrs	r3, r3, #9
 8005364:	2196      	movs	r1, #150	@ 0x96
 8005366:	0049      	lsls	r1, r1, #1
 8005368:	1809      	adds	r1, r1, r0
 800536a:	19c9      	adds	r1, r1, r7
 800536c:	600b      	str	r3, [r1, #0]
        
        if (press_exp != 0 && press_exp != 0xFF) {
 800536e:	0001      	movs	r1, r0
 8005370:	1853      	adds	r3, r2, r1
 8005372:	19db      	adds	r3, r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d100      	bne.n	800537c <bme680_test_sensor+0x28c>
 800537a:	e0ba      	b.n	80054f2 <bme680_test_sensor+0x402>
 800537c:	1853      	adds	r3, r2, r1
 800537e:	19db      	adds	r3, r3, r7
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2bff      	cmp	r3, #255	@ 0xff
 8005384:	d100      	bne.n	8005388 <bme680_test_sensor+0x298>
 8005386:	e0b4      	b.n	80054f2 <bme680_test_sensor+0x402>
            int press_exp_val = (int)press_exp - 127;
 8005388:	1853      	adds	r3, r2, r1
 800538a:	19db      	adds	r3, r3, r7
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3b7f      	subs	r3, #127	@ 0x7f
 8005390:	2294      	movs	r2, #148	@ 0x94
 8005392:	0052      	lsls	r2, r2, #1
 8005394:	1852      	adds	r2, r2, r1
 8005396:	19d2      	adds	r2, r2, r7
 8005398:	6013      	str	r3, [r2, #0]
            float press_result = 1.0f;
 800539a:	23fe      	movs	r3, #254	@ 0xfe
 800539c:	059b      	lsls	r3, r3, #22
 800539e:	22b0      	movs	r2, #176	@ 0xb0
 80053a0:	0052      	lsls	r2, r2, #1
 80053a2:	1852      	adds	r2, r2, r1
 80053a4:	19d2      	adds	r2, r2, r7
 80053a6:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80053a8:	2316      	movs	r3, #22
 80053aa:	22ae      	movs	r2, #174	@ 0xae
 80053ac:	0052      	lsls	r2, r2, #1
 80053ae:	1852      	adds	r2, r2, r1
 80053b0:	19d2      	adds	r2, r2, r7
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	e038      	b.n	8005428 <bme680_test_sensor+0x338>
                if (press_mant & (1 << i)) {
 80053b6:	2201      	movs	r2, #1
 80053b8:	21ae      	movs	r1, #174	@ 0xae
 80053ba:	0049      	lsls	r1, r1, #1
 80053bc:	2508      	movs	r5, #8
 80053be:	194b      	adds	r3, r1, r5
 80053c0:	19db      	adds	r3, r3, r7
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	409a      	lsls	r2, r3
 80053c6:	0013      	movs	r3, r2
 80053c8:	001a      	movs	r2, r3
 80053ca:	2396      	movs	r3, #150	@ 0x96
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	195b      	adds	r3, r3, r5
 80053d0:	19db      	adds	r3, r3, r7
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4013      	ands	r3, r2
 80053d6:	d01d      	beq.n	8005414 <bme680_test_sensor+0x324>
                    press_result += 1.0f / (1 << (23 - i));
 80053d8:	194b      	adds	r3, r1, r5
 80053da:	19db      	adds	r3, r3, r7
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2217      	movs	r2, #23
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2201      	movs	r2, #1
 80053e4:	409a      	lsls	r2, r3
 80053e6:	0013      	movs	r3, r2
 80053e8:	0018      	movs	r0, r3
 80053ea:	f7fc f9af 	bl	800174c <__aeabi_i2f>
 80053ee:	1c03      	adds	r3, r0, #0
 80053f0:	1c19      	adds	r1, r3, #0
 80053f2:	20fe      	movs	r0, #254	@ 0xfe
 80053f4:	0580      	lsls	r0, r0, #22
 80053f6:	f7fb fbfd 	bl	8000bf4 <__aeabi_fdiv>
 80053fa:	1c03      	adds	r3, r0, #0
 80053fc:	1c19      	adds	r1, r3, #0
 80053fe:	24b0      	movs	r4, #176	@ 0xb0
 8005400:	0064      	lsls	r4, r4, #1
 8005402:	1963      	adds	r3, r4, r5
 8005404:	19db      	adds	r3, r3, r7
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	f7fb fa02 	bl	8000810 <__aeabi_fadd>
 800540c:	1c03      	adds	r3, r0, #0
 800540e:	1962      	adds	r2, r4, r5
 8005410:	19d2      	adds	r2, r2, r7
 8005412:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 8005414:	22ae      	movs	r2, #174	@ 0xae
 8005416:	0052      	lsls	r2, r2, #1
 8005418:	2108      	movs	r1, #8
 800541a:	1853      	adds	r3, r2, r1
 800541c:	19db      	adds	r3, r3, r7
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3b01      	subs	r3, #1
 8005422:	1852      	adds	r2, r2, r1
 8005424:	19d2      	adds	r2, r2, r7
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	23ae      	movs	r3, #174	@ 0xae
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	2508      	movs	r5, #8
 800542e:	195b      	adds	r3, r3, r5
 8005430:	19db      	adds	r3, r3, r7
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	dabe      	bge.n	80053b6 <bme680_test_sensor+0x2c6>
                }
            }
            if (press_exp_val > 0) press_result *= (1 << press_exp_val);
 8005438:	2194      	movs	r1, #148	@ 0x94
 800543a:	0049      	lsls	r1, r1, #1
 800543c:	194b      	adds	r3, r1, r5
 800543e:	19db      	adds	r3, r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	dd18      	ble.n	8005478 <bme680_test_sensor+0x388>
 8005446:	2201      	movs	r2, #1
 8005448:	194b      	adds	r3, r1, r5
 800544a:	19db      	adds	r3, r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	409a      	lsls	r2, r3
 8005450:	0013      	movs	r3, r2
 8005452:	0018      	movs	r0, r3
 8005454:	f7fc f97a 	bl	800174c <__aeabi_i2f>
 8005458:	1c03      	adds	r3, r0, #0
 800545a:	1c19      	adds	r1, r3, #0
 800545c:	24b0      	movs	r4, #176	@ 0xb0
 800545e:	0064      	lsls	r4, r4, #1
 8005460:	1963      	adds	r3, r4, r5
 8005462:	19db      	adds	r3, r3, r7
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	f7fb fd93 	bl	8000f90 <__aeabi_fmul>
 800546a:	1c03      	adds	r3, r0, #0
 800546c:	1962      	adds	r2, r4, r5
 800546e:	19d2      	adds	r2, r2, r7
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e020      	b.n	80054b6 <bme680_test_sensor+0x3c6>
 8005474:	08014840 	.word	0x08014840
            else if (press_exp_val < 0) press_result /= (1 << (-press_exp_val));
 8005478:	2294      	movs	r2, #148	@ 0x94
 800547a:	0052      	lsls	r2, r2, #1
 800547c:	2508      	movs	r5, #8
 800547e:	1953      	adds	r3, r2, r5
 8005480:	19db      	adds	r3, r3, r7
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	da16      	bge.n	80054b6 <bme680_test_sensor+0x3c6>
 8005488:	1953      	adds	r3, r2, r5
 800548a:	19db      	adds	r3, r3, r7
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	425b      	negs	r3, r3
 8005490:	2201      	movs	r2, #1
 8005492:	409a      	lsls	r2, r3
 8005494:	0013      	movs	r3, r2
 8005496:	0018      	movs	r0, r3
 8005498:	f7fc f958 	bl	800174c <__aeabi_i2f>
 800549c:	1c03      	adds	r3, r0, #0
 800549e:	1c19      	adds	r1, r3, #0
 80054a0:	24b0      	movs	r4, #176	@ 0xb0
 80054a2:	0064      	lsls	r4, r4, #1
 80054a4:	1963      	adds	r3, r4, r5
 80054a6:	19db      	adds	r3, r3, r7
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f7fb fba3 	bl	8000bf4 <__aeabi_fdiv>
 80054ae:	1c03      	adds	r3, r0, #0
 80054b0:	1962      	adds	r2, r4, r5
 80054b2:	19d2      	adds	r2, r2, r7
 80054b4:	6013      	str	r3, [r2, #0]
            if (press_sign) press_result = -press_result;
 80054b6:	239a      	movs	r3, #154	@ 0x9a
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	2008      	movs	r0, #8
 80054bc:	181b      	adds	r3, r3, r0
 80054be:	19db      	adds	r3, r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <bme680_test_sensor+0x3ec>
 80054c6:	21b0      	movs	r1, #176	@ 0xb0
 80054c8:	0049      	lsls	r1, r1, #1
 80054ca:	180b      	adds	r3, r1, r0
 80054cc:	19db      	adds	r3, r3, r7
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2280      	movs	r2, #128	@ 0x80
 80054d2:	0612      	lsls	r2, r2, #24
 80054d4:	4053      	eors	r3, r2
 80054d6:	180a      	adds	r2, r1, r0
 80054d8:	19d2      	adds	r2, r2, r7
 80054da:	6013      	str	r3, [r2, #0]
            press_decoded = press_result;
 80054dc:	23b0      	movs	r3, #176	@ 0xb0
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	2108      	movs	r1, #8
 80054e2:	185b      	adds	r3, r3, r1
 80054e4:	19db      	adds	r3, r3, r7
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	22b8      	movs	r2, #184	@ 0xb8
 80054ea:	0052      	lsls	r2, r2, #1
 80054ec:	1852      	adds	r2, r2, r1
 80054ee:	19d2      	adds	r2, r2, r7
 80054f0:	6013      	str	r3, [r2, #0]
        }
        
        // Decode humidity
        uint32_t hum_sign = (hum_mem >> 31) & 0x1;
 80054f2:	21a4      	movs	r1, #164	@ 0xa4
 80054f4:	0049      	lsls	r1, r1, #1
 80054f6:	2008      	movs	r0, #8
 80054f8:	180b      	adds	r3, r1, r0
 80054fa:	19db      	adds	r3, r3, r7
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	0fdb      	lsrs	r3, r3, #31
 8005500:	2292      	movs	r2, #146	@ 0x92
 8005502:	0052      	lsls	r2, r2, #1
 8005504:	1812      	adds	r2, r2, r0
 8005506:	19d2      	adds	r2, r2, r7
 8005508:	6013      	str	r3, [r2, #0]
        uint32_t hum_exp = (hum_mem >> 23) & 0xFF;
 800550a:	180b      	adds	r3, r1, r0
 800550c:	19db      	adds	r3, r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	0ddb      	lsrs	r3, r3, #23
 8005512:	22ff      	movs	r2, #255	@ 0xff
 8005514:	4013      	ands	r3, r2
 8005516:	2290      	movs	r2, #144	@ 0x90
 8005518:	0052      	lsls	r2, r2, #1
 800551a:	0004      	movs	r4, r0
 800551c:	1810      	adds	r0, r2, r0
 800551e:	19c0      	adds	r0, r0, r7
 8005520:	6003      	str	r3, [r0, #0]
        uint32_t hum_mant = hum_mem & 0x7FFFFF;
 8005522:	0020      	movs	r0, r4
 8005524:	180b      	adds	r3, r1, r0
 8005526:	19db      	adds	r3, r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	025b      	lsls	r3, r3, #9
 800552c:	0a5b      	lsrs	r3, r3, #9
 800552e:	218e      	movs	r1, #142	@ 0x8e
 8005530:	0049      	lsls	r1, r1, #1
 8005532:	1809      	adds	r1, r1, r0
 8005534:	19c9      	adds	r1, r1, r7
 8005536:	600b      	str	r3, [r1, #0]
        
        if (hum_exp != 0 && hum_exp != 0xFF) {
 8005538:	0001      	movs	r1, r0
 800553a:	1853      	adds	r3, r2, r1
 800553c:	19db      	adds	r3, r3, r7
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d100      	bne.n	8005546 <bme680_test_sensor+0x456>
 8005544:	e0b8      	b.n	80056b8 <bme680_test_sensor+0x5c8>
 8005546:	1853      	adds	r3, r2, r1
 8005548:	19db      	adds	r3, r3, r7
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2bff      	cmp	r3, #255	@ 0xff
 800554e:	d100      	bne.n	8005552 <bme680_test_sensor+0x462>
 8005550:	e0b2      	b.n	80056b8 <bme680_test_sensor+0x5c8>
            int hum_exp_val = (int)hum_exp - 127;
 8005552:	1853      	adds	r3, r2, r1
 8005554:	19db      	adds	r3, r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3b7f      	subs	r3, #127	@ 0x7f
 800555a:	228c      	movs	r2, #140	@ 0x8c
 800555c:	0052      	lsls	r2, r2, #1
 800555e:	1852      	adds	r2, r2, r1
 8005560:	19d2      	adds	r2, r2, r7
 8005562:	6013      	str	r3, [r2, #0]
            float hum_result = 1.0f;
 8005564:	23fe      	movs	r3, #254	@ 0xfe
 8005566:	059b      	lsls	r3, r3, #22
 8005568:	22ac      	movs	r2, #172	@ 0xac
 800556a:	0052      	lsls	r2, r2, #1
 800556c:	1852      	adds	r2, r2, r1
 800556e:	19d2      	adds	r2, r2, r7
 8005570:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 8005572:	2316      	movs	r3, #22
 8005574:	22aa      	movs	r2, #170	@ 0xaa
 8005576:	0052      	lsls	r2, r2, #1
 8005578:	1852      	adds	r2, r2, r1
 800557a:	19d2      	adds	r2, r2, r7
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e038      	b.n	80055f2 <bme680_test_sensor+0x502>
                if (hum_mant & (1 << i)) {
 8005580:	2201      	movs	r2, #1
 8005582:	21aa      	movs	r1, #170	@ 0xaa
 8005584:	0049      	lsls	r1, r1, #1
 8005586:	2508      	movs	r5, #8
 8005588:	194b      	adds	r3, r1, r5
 800558a:	19db      	adds	r3, r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	409a      	lsls	r2, r3
 8005590:	0013      	movs	r3, r2
 8005592:	001a      	movs	r2, r3
 8005594:	238e      	movs	r3, #142	@ 0x8e
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	195b      	adds	r3, r3, r5
 800559a:	19db      	adds	r3, r3, r7
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4013      	ands	r3, r2
 80055a0:	d01d      	beq.n	80055de <bme680_test_sensor+0x4ee>
                    hum_result += 1.0f / (1 << (23 - i));
 80055a2:	194b      	adds	r3, r1, r5
 80055a4:	19db      	adds	r3, r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2217      	movs	r2, #23
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2201      	movs	r2, #1
 80055ae:	409a      	lsls	r2, r3
 80055b0:	0013      	movs	r3, r2
 80055b2:	0018      	movs	r0, r3
 80055b4:	f7fc f8ca 	bl	800174c <__aeabi_i2f>
 80055b8:	1c03      	adds	r3, r0, #0
 80055ba:	1c19      	adds	r1, r3, #0
 80055bc:	20fe      	movs	r0, #254	@ 0xfe
 80055be:	0580      	lsls	r0, r0, #22
 80055c0:	f7fb fb18 	bl	8000bf4 <__aeabi_fdiv>
 80055c4:	1c03      	adds	r3, r0, #0
 80055c6:	1c19      	adds	r1, r3, #0
 80055c8:	24ac      	movs	r4, #172	@ 0xac
 80055ca:	0064      	lsls	r4, r4, #1
 80055cc:	1963      	adds	r3, r4, r5
 80055ce:	19db      	adds	r3, r3, r7
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	f7fb f91d 	bl	8000810 <__aeabi_fadd>
 80055d6:	1c03      	adds	r3, r0, #0
 80055d8:	1962      	adds	r2, r4, r5
 80055da:	19d2      	adds	r2, r2, r7
 80055dc:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80055de:	22aa      	movs	r2, #170	@ 0xaa
 80055e0:	0052      	lsls	r2, r2, #1
 80055e2:	2108      	movs	r1, #8
 80055e4:	1853      	adds	r3, r2, r1
 80055e6:	19db      	adds	r3, r3, r7
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	1852      	adds	r2, r2, r1
 80055ee:	19d2      	adds	r2, r2, r7
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	23aa      	movs	r3, #170	@ 0xaa
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	2508      	movs	r5, #8
 80055f8:	195b      	adds	r3, r3, r5
 80055fa:	19db      	adds	r3, r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	dabe      	bge.n	8005580 <bme680_test_sensor+0x490>
                }
            }
            if (hum_exp_val > 0) hum_result *= (1 << hum_exp_val);
 8005602:	218c      	movs	r1, #140	@ 0x8c
 8005604:	0049      	lsls	r1, r1, #1
 8005606:	194b      	adds	r3, r1, r5
 8005608:	19db      	adds	r3, r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	dd16      	ble.n	800563e <bme680_test_sensor+0x54e>
 8005610:	2201      	movs	r2, #1
 8005612:	194b      	adds	r3, r1, r5
 8005614:	19db      	adds	r3, r3, r7
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	409a      	lsls	r2, r3
 800561a:	0013      	movs	r3, r2
 800561c:	0018      	movs	r0, r3
 800561e:	f7fc f895 	bl	800174c <__aeabi_i2f>
 8005622:	1c03      	adds	r3, r0, #0
 8005624:	1c19      	adds	r1, r3, #0
 8005626:	24ac      	movs	r4, #172	@ 0xac
 8005628:	0064      	lsls	r4, r4, #1
 800562a:	1963      	adds	r3, r4, r5
 800562c:	19db      	adds	r3, r3, r7
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	f7fb fcae 	bl	8000f90 <__aeabi_fmul>
 8005634:	1c03      	adds	r3, r0, #0
 8005636:	1962      	adds	r2, r4, r5
 8005638:	19d2      	adds	r2, r2, r7
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	e01e      	b.n	800567c <bme680_test_sensor+0x58c>
            else if (hum_exp_val < 0) hum_result /= (1 << (-hum_exp_val));
 800563e:	228c      	movs	r2, #140	@ 0x8c
 8005640:	0052      	lsls	r2, r2, #1
 8005642:	2508      	movs	r5, #8
 8005644:	1953      	adds	r3, r2, r5
 8005646:	19db      	adds	r3, r3, r7
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	da16      	bge.n	800567c <bme680_test_sensor+0x58c>
 800564e:	1953      	adds	r3, r2, r5
 8005650:	19db      	adds	r3, r3, r7
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	425b      	negs	r3, r3
 8005656:	2201      	movs	r2, #1
 8005658:	409a      	lsls	r2, r3
 800565a:	0013      	movs	r3, r2
 800565c:	0018      	movs	r0, r3
 800565e:	f7fc f875 	bl	800174c <__aeabi_i2f>
 8005662:	1c03      	adds	r3, r0, #0
 8005664:	1c19      	adds	r1, r3, #0
 8005666:	24ac      	movs	r4, #172	@ 0xac
 8005668:	0064      	lsls	r4, r4, #1
 800566a:	1963      	adds	r3, r4, r5
 800566c:	19db      	adds	r3, r3, r7
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	f7fb fac0 	bl	8000bf4 <__aeabi_fdiv>
 8005674:	1c03      	adds	r3, r0, #0
 8005676:	1962      	adds	r2, r4, r5
 8005678:	19d2      	adds	r2, r2, r7
 800567a:	6013      	str	r3, [r2, #0]
            if (hum_sign) hum_result = -hum_result;
 800567c:	2392      	movs	r3, #146	@ 0x92
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	2008      	movs	r0, #8
 8005682:	181b      	adds	r3, r3, r0
 8005684:	19db      	adds	r3, r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <bme680_test_sensor+0x5b2>
 800568c:	21ac      	movs	r1, #172	@ 0xac
 800568e:	0049      	lsls	r1, r1, #1
 8005690:	180b      	adds	r3, r1, r0
 8005692:	19db      	adds	r3, r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2280      	movs	r2, #128	@ 0x80
 8005698:	0612      	lsls	r2, r2, #24
 800569a:	4053      	eors	r3, r2
 800569c:	180a      	adds	r2, r1, r0
 800569e:	19d2      	adds	r2, r2, r7
 80056a0:	6013      	str	r3, [r2, #0]
            hum_decoded = hum_result;
 80056a2:	23ac      	movs	r3, #172	@ 0xac
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	2108      	movs	r1, #8
 80056a8:	185b      	adds	r3, r3, r1
 80056aa:	19db      	adds	r3, r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	22b6      	movs	r2, #182	@ 0xb6
 80056b0:	0052      	lsls	r2, r2, #1
 80056b2:	1852      	adds	r2, r2, r1
 80056b4:	19d2      	adds	r2, r2, r7
 80056b6:	6013      	str	r3, [r2, #0]
        }
        
        snprintf(test_msg, sizeof(test_msg), 
 80056b8:	23ba      	movs	r3, #186	@ 0xba
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	2608      	movs	r6, #8
 80056be:	199b      	adds	r3, r3, r6
 80056c0:	19db      	adds	r3, r3, r7
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	f7fe f878 	bl	80037b8 <__aeabi_f2d>
 80056c8:	0004      	movs	r4, r0
 80056ca:	000d      	movs	r5, r1
 80056cc:	23b8      	movs	r3, #184	@ 0xb8
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	199b      	adds	r3, r3, r6
 80056d2:	19db      	adds	r3, r3, r7
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	f7fe f86f 	bl	80037b8 <__aeabi_f2d>
 80056da:	6038      	str	r0, [r7, #0]
 80056dc:	6079      	str	r1, [r7, #4]
 80056de:	23b6      	movs	r3, #182	@ 0xb6
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	199b      	adds	r3, r3, r6
 80056e4:	19db      	adds	r3, r3, r7
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	f7fe f866 	bl	80037b8 <__aeabi_f2d>
 80056ec:	0002      	movs	r2, r0
 80056ee:	000b      	movs	r3, r1
 80056f0:	4e1a      	ldr	r6, [pc, #104]	@ (800575c <bme680_test_sensor+0x66c>)
 80056f2:	2180      	movs	r1, #128	@ 0x80
 80056f4:	0049      	lsls	r1, r1, #1
 80056f6:	2008      	movs	r0, #8
 80056f8:	1838      	adds	r0, r7, r0
 80056fa:	9204      	str	r2, [sp, #16]
 80056fc:	9305      	str	r3, [sp, #20]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	9202      	str	r2, [sp, #8]
 8005704:	9303      	str	r3, [sp, #12]
 8005706:	9400      	str	r4, [sp, #0]
 8005708:	9501      	str	r5, [sp, #4]
 800570a:	0032      	movs	r2, r6
 800570c:	f00b fc38 	bl	8010f80 <sniprintf>
 8005710:	e007      	b.n	8005722 <bme680_test_sensor+0x632>
                 "Test successful!\r\nTemperature: %.2f°C\r\nPressure: %.2f Pa\r\nHumidity: %.2f%%\r\n",
                 temp_decoded, press_decoded, hum_decoded);
    } else {
        snprintf(test_msg, sizeof(test_msg), "Test failed! Error reading sensor data.\r\n");
 8005712:	4a13      	ldr	r2, [pc, #76]	@ (8005760 <bme680_test_sensor+0x670>)
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	0059      	lsls	r1, r3, #1
 8005718:	2308      	movs	r3, #8
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	0018      	movs	r0, r3
 800571e:	f00b fc2f 	bl	8010f80 <sniprintf>
    }
    
    HAL_UART_Transmit(&huart2, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 8005722:	2408      	movs	r4, #8
 8005724:	193b      	adds	r3, r7, r4
 8005726:	0018      	movs	r0, r3
 8005728:	f7fa fcf6 	bl	8000118 <strlen>
 800572c:	0003      	movs	r3, r0
 800572e:	b29a      	uxth	r2, r3
 8005730:	2301      	movs	r3, #1
 8005732:	425b      	negs	r3, r3
 8005734:	1939      	adds	r1, r7, r4
 8005736:	480b      	ldr	r0, [pc, #44]	@ (8005764 <bme680_test_sensor+0x674>)
 8005738:	f009 f93e 	bl	800e9b8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 800573c:	193b      	adds	r3, r7, r4
 800573e:	0018      	movs	r0, r3
 8005740:	f7fa fcea 	bl	8000118 <strlen>
 8005744:	0003      	movs	r3, r0
 8005746:	b29a      	uxth	r2, r3
 8005748:	2301      	movs	r3, #1
 800574a:	425b      	negs	r3, r3
 800574c:	1939      	adds	r1, r7, r4
 800574e:	4806      	ldr	r0, [pc, #24]	@ (8005768 <bme680_test_sensor+0x678>)
 8005750:	f009 f932 	bl	800e9b8 <HAL_UART_Transmit>
 8005754:	46c0      	nop			@ (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b061      	add	sp, #388	@ 0x184
 800575a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800575c:	0801485c 	.word	0x0801485c
 8005760:	080148ac 	.word	0x080148ac
 8005764:	200003a0 	.word	0x200003a0
 8005768:	20000434 	.word	0x20000434

0800576c <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 800576c:	b5b0      	push	{r4, r5, r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f000 f93a 	bl	80059f0 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	250f      	movs	r5, #15
 8005780:	197c      	adds	r4, r7, r5
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	20d0      	movs	r0, #208	@ 0xd0
 8005788:	f000 f8d8 	bl	800593c <bme68x_get_regs>
 800578c:	0003      	movs	r3, r0
 800578e:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8005790:	197b      	adds	r3, r7, r5
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	b25b      	sxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d11b      	bne.n	80057d2 <bme68x_init+0x66>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b61      	cmp	r3, #97	@ 0x61
 80057a0:	d113      	bne.n	80057ca <bme68x_init+0x5e>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 80057a2:	197c      	adds	r4, r7, r5
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	0018      	movs	r0, r3
 80057a8:	f002 fae8 	bl	8007d7c <read_variant_id>
 80057ac:	0003      	movs	r3, r0
 80057ae:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 80057b0:	197b      	adds	r3, r7, r5
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	b25b      	sxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <bme68x_init+0x66>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 80057ba:	197c      	adds	r4, r7, r5
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	0018      	movs	r0, r3
 80057c0:	f002 f9a5 	bl	8007b0e <get_calib_data>
 80057c4:	0003      	movs	r3, r0
 80057c6:	7023      	strb	r3, [r4, #0]
 80057c8:	e003      	b.n	80057d2 <bme68x_init+0x66>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 80057ca:	230f      	movs	r3, #15
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	22fd      	movs	r2, #253	@ 0xfd
 80057d0:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 80057d2:	230f      	movs	r3, #15
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	b25b      	sxtb	r3, r3
}
 80057da:	0018      	movs	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	b004      	add	sp, #16
 80057e0:	bdb0      	pop	{r4, r5, r7, pc}

080057e2 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80057e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e4:	b08b      	sub	sp, #44	@ 0x2c
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 80057f0:	2310      	movs	r3, #16
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	0018      	movs	r0, r3
 80057f6:	2314      	movs	r3, #20
 80057f8:	001a      	movs	r2, r3
 80057fa:	2100      	movs	r1, #0
 80057fc:	f00b fc42 	bl	8011084 <memset>
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8005800:	2527      	movs	r5, #39	@ 0x27
 8005802:	197c      	adds	r4, r7, r5
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	0018      	movs	r0, r3
 8005808:	f001 feff 	bl	800760a <null_ptr_check>
 800580c:	0003      	movs	r3, r0
 800580e:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8005810:	197b      	adds	r3, r7, r5
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	b25b      	sxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d000      	beq.n	800581c <bme68x_set_regs+0x3a>
 800581a:	e083      	b.n	8005924 <bme68x_set_regs+0x142>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d100      	bne.n	8005824 <bme68x_set_regs+0x42>
 8005822:	e07f      	b.n	8005924 <bme68x_set_regs+0x142>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d100      	bne.n	800582c <bme68x_set_regs+0x4a>
 800582a:	e07b      	b.n	8005924 <bme68x_set_regs+0x142>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d100      	bne.n	8005834 <bme68x_set_regs+0x52>
 8005832:	e070      	b.n	8005916 <bme68x_set_regs+0x134>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b0a      	cmp	r3, #10
 8005838:	d900      	bls.n	800583c <bme68x_set_regs+0x5a>
 800583a:	e06c      	b.n	8005916 <bme68x_set_regs+0x134>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 800583c:	2324      	movs	r3, #36	@ 0x24
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	2200      	movs	r2, #0
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	e03f      	b.n	80058c6 <bme68x_set_regs+0xe4>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	7b1b      	ldrb	r3, [r3, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11d      	bne.n	800588a <bme68x_set_regs+0xa8>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 800584e:	2524      	movs	r5, #36	@ 0x24
 8005850:	197b      	adds	r3, r7, r5
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	18d3      	adds	r3, r2, r3
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2227      	movs	r2, #39	@ 0x27
 800585c:	18bc      	adds	r4, r7, r2
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	0011      	movs	r1, r2
 8005862:	0018      	movs	r0, r3
 8005864:	f001 fde3 	bl	800742e <set_mem_page>
 8005868:	0003      	movs	r3, r0
 800586a:	7023      	strb	r3, [r4, #0]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800586c:	197b      	adds	r3, r7, r5
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	18d3      	adds	r3, r2, r3
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	197b      	adds	r3, r7, r5
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	217f      	movs	r1, #127	@ 0x7f
 800587e:	400a      	ands	r2, r1
 8005880:	b2d1      	uxtb	r1, r2
 8005882:	2210      	movs	r2, #16
 8005884:	18ba      	adds	r2, r7, r2
 8005886:	54d1      	strb	r1, [r2, r3]
 8005888:	e00b      	b.n	80058a2 <bme68x_set_regs+0xc0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 800588a:	2124      	movs	r1, #36	@ 0x24
 800588c:	187b      	adds	r3, r7, r1
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	18d2      	adds	r2, r2, r3
 8005894:	187b      	adds	r3, r7, r1
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	7811      	ldrb	r1, [r2, #0]
 800589c:	2210      	movs	r2, #16
 800589e:	18ba      	adds	r2, r7, r2
 80058a0:	54d1      	strb	r1, [r2, r3]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 80058a2:	2024      	movs	r0, #36	@ 0x24
 80058a4:	183b      	adds	r3, r7, r0
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	18d2      	adds	r2, r2, r3
 80058ac:	183b      	adds	r3, r7, r0
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	3301      	adds	r3, #1
 80058b4:	7811      	ldrb	r1, [r2, #0]
 80058b6:	2210      	movs	r2, #16
 80058b8:	18ba      	adds	r2, r7, r2
 80058ba:	54d1      	strb	r1, [r2, r3]
            for (index = 0; index < len; index++)
 80058bc:	183b      	adds	r3, r7, r0
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	183b      	adds	r3, r7, r0
 80058c2:	3201      	adds	r2, #1
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	2324      	movs	r3, #36	@ 0x24
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d8b9      	bhi.n	8005846 <bme68x_set_regs+0x64>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 80058d2:	2627      	movs	r6, #39	@ 0x27
 80058d4:	19bb      	adds	r3, r7, r6
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	b25b      	sxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d120      	bne.n	8005920 <bme68x_set_regs+0x13e>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80058e2:	2110      	movs	r1, #16
 80058e4:	187b      	adds	r3, r7, r1
 80058e6:	7818      	ldrb	r0, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	1e5a      	subs	r2, r3, #1
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685d      	ldr	r5, [r3, #4]
 80058f2:	187b      	adds	r3, r7, r1
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	002b      	movs	r3, r5
 80058f8:	47a0      	blx	r4
 80058fa:	0003      	movs	r3, r0
 80058fc:	0019      	movs	r1, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	224c      	movs	r2, #76	@ 0x4c
 8005902:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	224c      	movs	r2, #76	@ 0x4c
 8005908:	569b      	ldrsb	r3, [r3, r2]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <bme68x_set_regs+0x13e>
                {
                    rslt = BME68X_E_COM_FAIL;
 800590e:	19bb      	adds	r3, r7, r6
 8005910:	22fe      	movs	r2, #254	@ 0xfe
 8005912:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8005914:	e004      	b.n	8005920 <bme68x_set_regs+0x13e>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8005916:	2327      	movs	r3, #39	@ 0x27
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	22fc      	movs	r2, #252	@ 0xfc
 800591c:	701a      	strb	r2, [r3, #0]
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800591e:	e005      	b.n	800592c <bme68x_set_regs+0x14a>
            if (rslt == BME68X_OK)
 8005920:	46c0      	nop			@ (mov r8, r8)
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8005922:	e003      	b.n	800592c <bme68x_set_regs+0x14a>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8005924:	2327      	movs	r3, #39	@ 0x27
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	22ff      	movs	r2, #255	@ 0xff
 800592a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800592c:	2327      	movs	r3, #39	@ 0x27
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b25b      	sxtb	r3, r3
}
 8005934:	0018      	movs	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	b00b      	add	sp, #44	@ 0x2c
 800593a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800593c <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 800593c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	250f      	movs	r5, #15
 800594a:	197b      	adds	r3, r7, r5
 800594c:	1c02      	adds	r2, r0, #0
 800594e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8005950:	2617      	movs	r6, #23
 8005952:	19bc      	adds	r4, r7, r6
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	0018      	movs	r0, r3
 8005958:	f001 fe57 	bl	800760a <null_ptr_check>
 800595c:	0003      	movs	r3, r0
 800595e:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_data)
 8005960:	19bb      	adds	r3, r7, r6
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	b25b      	sxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d136      	bne.n	80059d8 <bme68x_get_regs+0x9c>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d033      	beq.n	80059d8 <bme68x_get_regs+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	7b1b      	ldrb	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d115      	bne.n	80059a4 <bme68x_get_regs+0x68>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8005978:	19bc      	adds	r4, r7, r6
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	197b      	adds	r3, r7, r5
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	0011      	movs	r1, r2
 8005982:	0018      	movs	r0, r3
 8005984:	f001 fd53 	bl	800742e <set_mem_page>
 8005988:	0003      	movs	r3, r0
 800598a:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 800598c:	19bb      	adds	r3, r7, r6
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b25b      	sxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <bme68x_get_regs+0x68>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8005996:	197b      	adds	r3, r7, r5
 8005998:	197a      	adds	r2, r7, r5
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	2180      	movs	r1, #128	@ 0x80
 800599e:	4249      	negs	r1, r1
 80059a0:	430a      	orrs	r2, r1
 80059a2:	701a      	strb	r2, [r3, #0]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685d      	ldr	r5, [r3, #4]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	230f      	movs	r3, #15
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	7818      	ldrb	r0, [r3, #0]
 80059b6:	002b      	movs	r3, r5
 80059b8:	47a0      	blx	r4
 80059ba:	0003      	movs	r3, r0
 80059bc:	0019      	movs	r1, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	224c      	movs	r2, #76	@ 0x4c
 80059c2:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	224c      	movs	r2, #76	@ 0x4c
 80059c8:	569b      	ldrsb	r3, [r3, r2]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <bme68x_get_regs+0xa4>
        {
            rslt = BME68X_E_COM_FAIL;
 80059ce:	2317      	movs	r3, #23
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	22fe      	movs	r2, #254	@ 0xfe
 80059d4:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != 0)
 80059d6:	e003      	b.n	80059e0 <bme68x_get_regs+0xa4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80059d8:	2317      	movs	r3, #23
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	22ff      	movs	r2, #255	@ 0xff
 80059de:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80059e0:	2317      	movs	r3, #23
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	b25b      	sxtb	r3, r3
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b007      	add	sp, #28
 80059ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059f0 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80059f8:	230e      	movs	r3, #14
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	22e0      	movs	r2, #224	@ 0xe0
 80059fe:	701a      	strb	r2, [r3, #0]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8005a00:	230d      	movs	r3, #13
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	22b6      	movs	r2, #182	@ 0xb6
 8005a06:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8005a08:	250f      	movs	r5, #15
 8005a0a:	197c      	adds	r4, r7, r5
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f001 fdfb 	bl	800760a <null_ptr_check>
 8005a14:	0003      	movs	r3, r0
 8005a16:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8005a18:	002a      	movs	r2, r5
 8005a1a:	18bb      	adds	r3, r7, r2
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d133      	bne.n	8005a8c <bme68x_soft_reset+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7b1b      	ldrb	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <bme68x_soft_reset+0x4a>
        {
            rslt = get_mem_page(dev);
 8005a2c:	18bc      	adds	r4, r7, r2
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	0018      	movs	r0, r3
 8005a32:	f001 fd79 	bl	8007528 <get_mem_page>
 8005a36:	0003      	movs	r3, r0
 8005a38:	7023      	strb	r3, [r4, #0]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8005a3a:	250f      	movs	r5, #15
 8005a3c:	197b      	adds	r3, r7, r5
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b25b      	sxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d122      	bne.n	8005a8c <bme68x_soft_reset+0x9c>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8005a46:	197c      	adds	r4, r7, r5
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	220d      	movs	r2, #13
 8005a4c:	18b9      	adds	r1, r7, r2
 8005a4e:	220e      	movs	r2, #14
 8005a50:	18b8      	adds	r0, r7, r2
 8005a52:	2201      	movs	r2, #1
 8005a54:	f7ff fec5 	bl	80057e2 <bme68x_set_regs>
 8005a58:	0003      	movs	r3, r0
 8005a5a:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8005a5c:	002c      	movs	r4, r5
 8005a5e:	193b      	adds	r3, r7, r4
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d111      	bne.n	8005a8c <bme68x_soft_reset+0x9c>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	480a      	ldr	r0, [pc, #40]	@ (8005a9c <bme68x_soft_reset+0xac>)
 8005a72:	0019      	movs	r1, r3
 8005a74:	4790      	blx	r2

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	7b1b      	ldrb	r3, [r3, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <bme68x_soft_reset+0x9c>
                {
                    rslt = get_mem_page(dev);
 8005a7e:	193c      	adds	r4, r7, r4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f001 fd50 	bl	8007528 <get_mem_page>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 8005a8c:	230f      	movs	r3, #15
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	b25b      	sxtb	r3, r3
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b004      	add	sp, #16
 8005a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a9c:	00002710 	.word	0x00002710

08005aa0 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8005aa0:	b5b0      	push	{r4, r5, r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8005aaa:	231e      	movs	r3, #30
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	231d      	movs	r3, #29
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	701a      	strb	r2, [r3, #0]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8005aba:	2314      	movs	r3, #20
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	4a9f      	ldr	r2, [pc, #636]	@ (8005d3c <bme68x_set_conf+0x29c>)
 8005ac0:	6811      	ldr	r1, [r2, #0]
 8005ac2:	6019      	str	r1, [r3, #0]
 8005ac4:	7912      	ldrb	r2, [r2, #4]
 8005ac6:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8005ac8:	230c      	movs	r3, #12
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	0018      	movs	r0, r3
 8005ace:	2305      	movs	r3, #5
 8005ad0:	001a      	movs	r2, r3
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	f00b fad6 	bl	8011084 <memset>

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8005ad8:	251f      	movs	r5, #31
 8005ada:	197c      	adds	r4, r7, r5
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	231c      	movs	r3, #28
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	0011      	movs	r1, r2
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f000 f9ab 	bl	8005e40 <bme68x_get_op_mode>
 8005aea:	0003      	movs	r3, r0
 8005aec:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8005aee:	197b      	adds	r3, r7, r5
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d107      	bne.n	8005b08 <bme68x_set_conf+0x68>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8005af8:	197c      	adds	r4, r7, r5
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	0019      	movs	r1, r3
 8005afe:	2000      	movs	r0, #0
 8005b00:	f000 f91e 	bl	8005d40 <bme68x_set_op_mode>
 8005b04:	0003      	movs	r3, r0
 8005b06:	7023      	strb	r3, [r4, #0]
    }

    if (conf == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <bme68x_set_conf+0x78>
    {
        rslt = BME68X_E_NULL_PTR;
 8005b0e:	231f      	movs	r3, #31
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	22ff      	movs	r2, #255	@ 0xff
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	e0e2      	b.n	8005cde <bme68x_set_conf+0x23e>
    }
    else if (rslt == BME68X_OK)
 8005b18:	251f      	movs	r5, #31
 8005b1a:	197b      	adds	r3, r7, r5
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d000      	beq.n	8005b26 <bme68x_set_conf+0x86>
 8005b24:	e0db      	b.n	8005cde <bme68x_set_conf+0x23e>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8005b26:	2314      	movs	r3, #20
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	7818      	ldrb	r0, [r3, #0]
 8005b2c:	197c      	adds	r4, r7, r5
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	220c      	movs	r2, #12
 8005b32:	18b9      	adds	r1, r7, r2
 8005b34:	2205      	movs	r2, #5
 8005b36:	f7ff ff01 	bl	800593c <bme68x_get_regs>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	7023      	strb	r3, [r4, #0]
        dev->info_msg = BME68X_OK;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	224d      	movs	r2, #77	@ 0x4d
 8005b42:	2100      	movs	r1, #0
 8005b44:	5499      	strb	r1, [r3, r2]
        if (rslt == BME68X_OK)
 8005b46:	197b      	adds	r3, r7, r5
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <bme68x_set_conf+0xc4>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3303      	adds	r3, #3
 8005b54:	197c      	adds	r4, r7, r5
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	2107      	movs	r1, #7
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f001 fd1c 	bl	8007598 <boundary_check>
 8005b60:	0003      	movs	r3, r0
 8005b62:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8005b64:	221f      	movs	r2, #31
 8005b66:	18bb      	adds	r3, r7, r2
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	b25b      	sxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d109      	bne.n	8005b84 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3301      	adds	r3, #1
 8005b74:	18bc      	adds	r4, r7, r2
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	2105      	movs	r1, #5
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f001 fd0c 	bl	8007598 <boundary_check>
 8005b80:	0003      	movs	r3, r0
 8005b82:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8005b84:	221f      	movs	r2, #31
 8005b86:	18bb      	adds	r3, r7, r2
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	b25b      	sxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d109      	bne.n	8005ba4 <bme68x_set_conf+0x104>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3302      	adds	r3, #2
 8005b94:	18bc      	adds	r4, r7, r2
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	2105      	movs	r1, #5
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f001 fcfc 	bl	8007598 <boundary_check>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8005ba4:	221f      	movs	r2, #31
 8005ba6:	18bb      	adds	r3, r7, r2
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <bme68x_set_conf+0x122>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	18bc      	adds	r4, r7, r2
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	2105      	movs	r1, #5
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f001 fced 	bl	8007598 <boundary_check>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8005bc2:	221f      	movs	r2, #31
 8005bc4:	18bb      	adds	r3, r7, r2
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	b25b      	sxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <bme68x_set_conf+0x142>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	18bc      	adds	r4, r7, r2
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	2108      	movs	r1, #8
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f001 fcdd 	bl	8007598 <boundary_check>
 8005bde:	0003      	movs	r3, r0
 8005be0:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8005be2:	231f      	movs	r3, #31
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d177      	bne.n	8005cde <bme68x_set_conf+0x23e>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8005bee:	200c      	movs	r0, #12
 8005bf0:	183b      	adds	r3, r7, r0
 8005bf2:	791b      	ldrb	r3, [r3, #4]
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	221c      	movs	r2, #28
 8005bf8:	4393      	bics	r3, r2
 8005bfa:	b25a      	sxtb	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	78db      	ldrb	r3, [r3, #3]
 8005c00:	b25b      	sxtb	r3, r3
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	b25b      	sxtb	r3, r3
 8005c06:	211c      	movs	r1, #28
 8005c08:	400b      	ands	r3, r1
 8005c0a:	b25b      	sxtb	r3, r3
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	b25b      	sxtb	r3, r3
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	183b      	adds	r3, r7, r0
 8005c14:	711a      	strb	r2, [r3, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8005c16:	183b      	adds	r3, r7, r0
 8005c18:	78db      	ldrb	r3, [r3, #3]
 8005c1a:	b25b      	sxtb	r3, r3
 8005c1c:	221f      	movs	r2, #31
 8005c1e:	4013      	ands	r3, r2
 8005c20:	b25a      	sxtb	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	015b      	lsls	r3, r3, #5
 8005c2a:	b25b      	sxtb	r3, r3
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	b25b      	sxtb	r3, r3
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	183b      	adds	r3, r7, r0
 8005c34:	70da      	strb	r2, [r3, #3]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8005c36:	183b      	adds	r3, r7, r0
 8005c38:	78db      	ldrb	r3, [r3, #3]
 8005c3a:	b25b      	sxtb	r3, r3
 8005c3c:	221c      	movs	r2, #28
 8005c3e:	4393      	bics	r3, r2
 8005c40:	b25a      	sxtb	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	789b      	ldrb	r3, [r3, #2]
 8005c46:	b25b      	sxtb	r3, r3
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	211c      	movs	r1, #28
 8005c4e:	400b      	ands	r3, r1
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	4313      	orrs	r3, r2
 8005c54:	b25b      	sxtb	r3, r3
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	183b      	adds	r3, r7, r0
 8005c5a:	70da      	strb	r2, [r3, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8005c5c:	183b      	adds	r3, r7, r0
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	b25b      	sxtb	r3, r3
 8005c62:	2207      	movs	r2, #7
 8005c64:	4393      	bics	r3, r2
 8005c66:	b25a      	sxtb	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	b25b      	sxtb	r3, r3
 8005c6e:	2107      	movs	r1, #7
 8005c70:	400b      	ands	r3, r1
 8005c72:	b25b      	sxtb	r3, r3
 8005c74:	4313      	orrs	r3, r2
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	183b      	adds	r3, r7, r0
 8005c7c:	705a      	strb	r2, [r3, #1]
            if (conf->odr != BME68X_ODR_NONE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	791b      	ldrb	r3, [r3, #4]
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d008      	beq.n	8005c98 <bme68x_set_conf+0x1f8>
            {
                odr20 = conf->odr;
 8005c86:	231e      	movs	r3, #30
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	7912      	ldrb	r2, [r2, #4]
 8005c8e:	701a      	strb	r2, [r3, #0]
                odr3 = 0;
 8005c90:	231d      	movs	r3, #29
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8005c98:	210c      	movs	r1, #12
 8005c9a:	187b      	adds	r3, r7, r1
 8005c9c:	791b      	ldrb	r3, [r3, #4]
 8005c9e:	b25b      	sxtb	r3, r3
 8005ca0:	221f      	movs	r2, #31
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	b25a      	sxtb	r2, r3
 8005ca6:	231e      	movs	r3, #30
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	b25b      	sxtb	r3, r3
 8005cae:	015b      	lsls	r3, r3, #5
 8005cb0:	b25b      	sxtb	r3, r3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	b25b      	sxtb	r3, r3
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	187b      	adds	r3, r7, r1
 8005cba:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8005cbc:	187b      	adds	r3, r7, r1
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b25b      	sxtb	r3, r3
 8005cc2:	227f      	movs	r2, #127	@ 0x7f
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	b25a      	sxtb	r2, r3
 8005cc8:	231d      	movs	r3, #29
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	b25b      	sxtb	r3, r3
 8005cd0:	01db      	lsls	r3, r3, #7
 8005cd2:	b25b      	sxtb	r3, r3
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	b25b      	sxtb	r3, r3
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	187b      	adds	r3, r7, r1
 8005cdc:	701a      	strb	r2, [r3, #0]
        }
    }

    if (rslt == BME68X_OK)
 8005cde:	221f      	movs	r2, #31
 8005ce0:	18bb      	adds	r3, r7, r2
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	b25b      	sxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <bme68x_set_conf+0x260>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8005cea:	18bc      	adds	r4, r7, r2
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	220c      	movs	r2, #12
 8005cf0:	18b9      	adds	r1, r7, r2
 8005cf2:	2214      	movs	r2, #20
 8005cf4:	18b8      	adds	r0, r7, r2
 8005cf6:	2205      	movs	r2, #5
 8005cf8:	f7ff fd73 	bl	80057e2 <bme68x_set_regs>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	7023      	strb	r3, [r4, #0]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8005d00:	221c      	movs	r2, #28
 8005d02:	18bb      	adds	r3, r7, r2
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00f      	beq.n	8005d2a <bme68x_set_conf+0x28a>
 8005d0a:	211f      	movs	r1, #31
 8005d0c:	187b      	adds	r3, r7, r1
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b25b      	sxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <bme68x_set_conf+0x28a>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8005d16:	18bb      	adds	r3, r7, r2
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	187c      	adds	r4, r7, r1
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	0011      	movs	r1, r2
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 f80d 	bl	8005d40 <bme68x_set_op_mode>
 8005d26:	0003      	movs	r3, r0
 8005d28:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8005d2a:	231f      	movs	r3, #31
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b25b      	sxtb	r3, r3
}
 8005d32:	0018      	movs	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b008      	add	sp, #32
 8005d38:	bdb0      	pop	{r4, r5, r7, pc}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	080148d8 	.word	0x080148d8

08005d40 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	0002      	movs	r2, r0
 8005d48:	6039      	str	r1, [r7, #0]
 8005d4a:	1dfb      	adds	r3, r7, #7
 8005d4c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8005d4e:	230e      	movs	r3, #14
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8005d56:	230c      	movs	r3, #12
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2274      	movs	r2, #116	@ 0x74
 8005d5c:	701a      	strb	r2, [r3, #0]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8005d5e:	260f      	movs	r6, #15
 8005d60:	19bc      	adds	r4, r7, r6
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	250d      	movs	r5, #13
 8005d66:	1979      	adds	r1, r7, r5
 8005d68:	2201      	movs	r2, #1
 8005d6a:	2074      	movs	r0, #116	@ 0x74
 8005d6c:	f7ff fde6 	bl	800593c <bme68x_get_regs>
 8005d70:	0003      	movs	r3, r0
 8005d72:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8005d74:	0034      	movs	r4, r6
 8005d76:	193b      	adds	r3, r7, r4
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d123      	bne.n	8005dc8 <bme68x_set_op_mode+0x88>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8005d80:	0028      	movs	r0, r5
 8005d82:	183b      	adds	r3, r7, r0
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	250e      	movs	r5, #14
 8005d88:	197b      	adds	r3, r7, r5
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	400a      	ands	r2, r1
 8005d8e:	701a      	strb	r2, [r3, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
 8005d90:	197b      	adds	r3, r7, r5
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d017      	beq.n	8005dc8 <bme68x_set_op_mode+0x88>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8005d98:	183b      	adds	r3, r7, r0
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	4393      	bics	r3, r2
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	183b      	adds	r3, r7, r0
 8005da4:	701a      	strb	r2, [r3, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8005da6:	193c      	adds	r4, r7, r4
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	1839      	adds	r1, r7, r0
 8005dac:	220c      	movs	r2, #12
 8005dae:	18b8      	adds	r0, r7, r2
 8005db0:	2201      	movs	r2, #1
 8005db2:	f7ff fd16 	bl	80057e2 <bme68x_set_regs>
 8005db6:	0003      	movs	r3, r0
 8005db8:	7023      	strb	r3, [r4, #0]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	481e      	ldr	r0, [pc, #120]	@ (8005e3c <bme68x_set_op_mode+0xfc>)
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	4790      	blx	r2
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8005dc8:	230e      	movs	r3, #14
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <bme68x_set_op_mode+0x9e>
 8005dd2:	230f      	movs	r3, #15
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	b25b      	sxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0bf      	beq.n	8005d5e <bme68x_set_op_mode+0x1e>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8005dde:	1dfb      	adds	r3, r7, #7
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d021      	beq.n	8005e2a <bme68x_set_op_mode+0xea>
 8005de6:	240f      	movs	r4, #15
 8005de8:	193b      	adds	r3, r7, r4
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b25b      	sxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d11b      	bne.n	8005e2a <bme68x_set_op_mode+0xea>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8005df2:	200d      	movs	r0, #13
 8005df4:	183b      	adds	r3, r7, r0
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	4393      	bics	r3, r2
 8005dfe:	b25a      	sxtb	r2, r3
 8005e00:	1dfb      	adds	r3, r7, #7
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	b25b      	sxtb	r3, r3
 8005e06:	2103      	movs	r1, #3
 8005e08:	400b      	ands	r3, r1
 8005e0a:	b25b      	sxtb	r3, r3
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	b25b      	sxtb	r3, r3
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	183b      	adds	r3, r7, r0
 8005e14:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8005e16:	193c      	adds	r4, r7, r4
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	1839      	adds	r1, r7, r0
 8005e1c:	220c      	movs	r2, #12
 8005e1e:	18b8      	adds	r0, r7, r2
 8005e20:	2201      	movs	r2, #1
 8005e22:	f7ff fcde 	bl	80057e2 <bme68x_set_regs>
 8005e26:	0003      	movs	r3, r0
 8005e28:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8005e2a:	230f      	movs	r3, #15
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b25b      	sxtb	r3, r3
}
 8005e32:	0018      	movs	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b005      	add	sp, #20
 8005e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	00002710 	.word	0x00002710

08005e40 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8005e40:	b5b0      	push	{r4, r5, r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d012      	beq.n	8005e76 <bme68x_get_op_mode+0x36>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8005e50:	230f      	movs	r3, #15
 8005e52:	18fc      	adds	r4, r7, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	250e      	movs	r5, #14
 8005e58:	1979      	adds	r1, r7, r5
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	2074      	movs	r0, #116	@ 0x74
 8005e5e:	f7ff fd6d 	bl	800593c <bme68x_get_regs>
 8005e62:	0003      	movs	r3, r0
 8005e64:	7023      	strb	r3, [r4, #0]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8005e66:	197b      	adds	r3, r7, r5
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	e003      	b.n	8005e7e <bme68x_get_op_mode+0x3e>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8005e76:	230f      	movs	r3, #15
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	22ff      	movs	r2, #255	@ 0xff
 8005e7c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8005e7e:	230f      	movs	r3, #15
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b25b      	sxtb	r3, r3
}
 8005e86:	0018      	movs	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b004      	add	sp, #16
 8005e8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005e90 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8005e90:	b5b0      	push	{r4, r5, r7, lr}
 8005e92:	b08a      	sub	sp, #40	@ 0x28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	230f      	movs	r3, #15
 8005e9c:	18fb      	adds	r3, r7, r3
 8005e9e:	1c02      	adds	r2, r0, #0
 8005ea0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8005ea6:	2314      	movs	r3, #20
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	4a37      	ldr	r2, [pc, #220]	@ (8005f88 <bme68x_get_meas_dur+0xf8>)
 8005eac:	6811      	ldr	r1, [r2, #0]
 8005eae:	6019      	str	r1, [r3, #0]
 8005eb0:	8892      	ldrh	r2, [r2, #4]
 8005eb2:	809a      	strh	r2, [r3, #4]

    if (conf != NULL)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d061      	beq.n	8005f7e <bme68x_get_meas_dur+0xee>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	2527      	movs	r5, #39	@ 0x27
 8005ec0:	197c      	adds	r4, r7, r5
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	2105      	movs	r1, #5
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f001 fb66 	bl	8007598 <boundary_check>
 8005ecc:	0003      	movs	r3, r0
 8005ece:	7023      	strb	r3, [r4, #0]

        if (rslt == BME68X_OK)
 8005ed0:	002a      	movs	r2, r5
 8005ed2:	18bb      	adds	r3, r7, r2
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	b25b      	sxtb	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <bme68x_get_meas_dur+0x60>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	3302      	adds	r3, #2
 8005ee0:	18bc      	adds	r4, r7, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	2105      	movs	r1, #5
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f001 fb56 	bl	8007598 <boundary_check>
 8005eec:	0003      	movs	r3, r0
 8005eee:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8005ef0:	2227      	movs	r2, #39	@ 0x27
 8005ef2:	18bb      	adds	r3, r7, r2
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b25b      	sxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d108      	bne.n	8005f0e <bme68x_get_meas_dur+0x7e>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	18bc      	adds	r4, r7, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	2105      	movs	r1, #5
 8005f04:	0018      	movs	r0, r3
 8005f06:	f001 fb47 	bl	8007598 <boundary_check>
 8005f0a:	0003      	movs	r3, r0
 8005f0c:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8005f0e:	2327      	movs	r3, #39	@ 0x27
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	b25b      	sxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d131      	bne.n	8005f7e <bme68x_get_meas_dur+0xee>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	001a      	movs	r2, r3
 8005f20:	2114      	movs	r1, #20
 8005f22:	187b      	adds	r3, r7, r1
 8005f24:	5c9b      	ldrb	r3, [r3, r2]
 8005f26:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	789b      	ldrb	r3, [r3, #2]
 8005f2c:	001a      	movs	r2, r3
 8005f2e:	187b      	adds	r3, r7, r1
 8005f30:	5c9b      	ldrb	r3, [r3, r2]
 8005f32:	001a      	movs	r2, r3
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	189b      	adds	r3, r3, r2
 8005f38:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	001a      	movs	r2, r3
 8005f40:	187b      	adds	r3, r7, r1
 8005f42:	5c9b      	ldrb	r3, [r3, r2]
 8005f44:	001a      	movs	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8005f8c <bme68x_get_meas_dur+0xfc>)
 8005f50:	4353      	muls	r3, r2
 8005f52:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	4a0e      	ldr	r2, [pc, #56]	@ (8005f90 <bme68x_get_meas_dur+0x100>)
 8005f58:	4694      	mov	ip, r2
 8005f5a:	4463      	add	r3, ip
 8005f5c:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	4a0c      	ldr	r2, [pc, #48]	@ (8005f94 <bme68x_get_meas_dur+0x104>)
 8005f62:	4694      	mov	ip, r2
 8005f64:	4463      	add	r3, ip
 8005f66:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8005f68:	230f      	movs	r3, #15
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d005      	beq.n	8005f7e <bme68x_get_meas_dur+0xee>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	22fa      	movs	r2, #250	@ 0xfa
 8005f76:	0092      	lsls	r2, r2, #2
 8005f78:	4694      	mov	ip, r2
 8005f7a:	4463      	add	r3, ip
 8005f7c:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b00a      	add	sp, #40	@ 0x28
 8005f86:	bdb0      	pop	{r4, r5, r7, pc}
 8005f88:	080148e0 	.word	0x080148e0
 8005f8c:	000007ab 	.word	0x000007ab
 8005f90:	00000774 	.word	0x00000774
 8005f94:	00000951 	.word	0x00000951

08005f98 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8005f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f9a:	b09b      	sub	sp, #108	@ 0x6c
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	260f      	movs	r6, #15
 8005fa6:	19bb      	adds	r3, r7, r6
 8005fa8:	1c02      	adds	r2, r0, #0
 8005faa:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8005fac:	2366      	movs	r3, #102	@ 0x66
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	2365      	movs	r3, #101	@ 0x65
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	2364      	movs	r3, #100	@ 0x64
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *field_ptr[3] = { 0 };
 8005fc4:	2458      	movs	r4, #88	@ 0x58
 8005fc6:	193b      	adds	r3, r7, r4
 8005fc8:	0018      	movs	r0, r3
 8005fca:	230c      	movs	r3, #12
 8005fcc:	001a      	movs	r2, r3
 8005fce:	2100      	movs	r1, #0
 8005fd0:	f00b f858 	bl	8011084 <memset>
    struct bme68x_data field_data[3] = { { 0 } };
 8005fd4:	2510      	movs	r5, #16
 8005fd6:	197b      	adds	r3, r7, r5
 8005fd8:	0018      	movs	r0, r3
 8005fda:	2348      	movs	r3, #72	@ 0x48
 8005fdc:	001a      	movs	r2, r3
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f00b f850 	bl	8011084 <memset>

    field_ptr[0] = &field_data[0];
 8005fe4:	193b      	adds	r3, r7, r4
 8005fe6:	0029      	movs	r1, r5
 8005fe8:	187a      	adds	r2, r7, r1
 8005fea:	601a      	str	r2, [r3, #0]
    field_ptr[1] = &field_data[1];
 8005fec:	193b      	adds	r3, r7, r4
 8005fee:	187a      	adds	r2, r7, r1
 8005ff0:	3218      	adds	r2, #24
 8005ff2:	605a      	str	r2, [r3, #4]
    field_ptr[2] = &field_data[2];
 8005ff4:	193b      	adds	r3, r7, r4
 8005ff6:	187a      	adds	r2, r7, r1
 8005ff8:	3230      	adds	r2, #48	@ 0x30
 8005ffa:	609a      	str	r2, [r3, #8]

    rslt = null_ptr_check(dev);
 8005ffc:	2567      	movs	r5, #103	@ 0x67
 8005ffe:	197c      	adds	r4, r7, r5
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	0018      	movs	r0, r3
 8006004:	f001 fb01 	bl	800760a <null_ptr_check>
 8006008:	0003      	movs	r3, r0
 800600a:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && (data != NULL))
 800600c:	002a      	movs	r2, r5
 800600e:	18bb      	adds	r3, r7, r2
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b25b      	sxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d000      	beq.n	800601a <bme68x_get_data+0x82>
 8006018:	e0e3      	b.n	80061e2 <bme68x_get_data+0x24a>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d100      	bne.n	8006022 <bme68x_get_data+0x8a>
 8006020:	e0df      	b.n	80061e2 <bme68x_get_data+0x24a>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8006022:	19bb      	adds	r3, r7, r6
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d122      	bne.n	8006070 <bme68x_get_data+0xd8>
        {
            rslt = read_field_data(0, data, dev);
 800602a:	0015      	movs	r5, r2
 800602c:	18bc      	adds	r4, r7, r2
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	0019      	movs	r1, r3
 8006034:	2000      	movs	r0, #0
 8006036:	f000 fe67 	bl	8006d08 <read_field_data>
 800603a:	0003      	movs	r3, r0
 800603c:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 800603e:	197b      	adds	r3, r7, r5
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	b25b      	sxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d000      	beq.n	800604a <bme68x_get_data+0xb2>
 8006048:	e0bd      	b.n	80061c6 <bme68x_get_data+0x22e>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	b25b      	sxtb	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	da04      	bge.n	800605e <bme68x_get_data+0xc6>
                {
                    new_fields = 1;
 8006054:	2364      	movs	r3, #100	@ 0x64
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	2201      	movs	r2, #1
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e0b3      	b.n	80061c6 <bme68x_get_data+0x22e>
                }
                else
                {
                    new_fields = 0;
 800605e:	2364      	movs	r3, #100	@ 0x64
 8006060:	18fb      	adds	r3, r7, r3
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
                    rslt = BME68X_W_NO_NEW_DATA;
 8006066:	2367      	movs	r3, #103	@ 0x67
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	2202      	movs	r2, #2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	e0aa      	b.n	80061c6 <bme68x_get_data+0x22e>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8006070:	220f      	movs	r2, #15
 8006072:	18bb      	adds	r3, r7, r2
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d004      	beq.n	8006084 <bme68x_get_data+0xec>
 800607a:	18bb      	adds	r3, r7, r2
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d000      	beq.n	8006084 <bme68x_get_data+0xec>
 8006082:	e09c      	b.n	80061be <bme68x_get_data+0x226>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8006084:	2367      	movs	r3, #103	@ 0x67
 8006086:	18fc      	adds	r4, r7, r3
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	2358      	movs	r3, #88	@ 0x58
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	0011      	movs	r1, r2
 8006090:	0018      	movs	r0, r3
 8006092:	f000 ffb9 	bl	8007008 <read_all_field_data>
 8006096:	0003      	movs	r3, r0
 8006098:	7023      	strb	r3, [r4, #0]

            new_fields = 0;
 800609a:	2364      	movs	r3, #100	@ 0x64
 800609c:	18fb      	adds	r3, r7, r3
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80060a2:	2366      	movs	r3, #102	@ 0x66
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e016      	b.n	80060da <bme68x_get_data+0x142>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 80060ac:	2366      	movs	r3, #102	@ 0x66
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	2358      	movs	r3, #88	@ 0x58
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	0092      	lsls	r2, r2, #2
 80060b8:	58d3      	ldr	r3, [r2, r3]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da05      	bge.n	80060ce <bme68x_get_data+0x136>
                {
                    new_fields++;
 80060c2:	2164      	movs	r1, #100	@ 0x64
 80060c4:	187b      	adds	r3, r7, r1
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	187b      	adds	r3, r7, r1
 80060ca:	3201      	adds	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80060ce:	2166      	movs	r1, #102	@ 0x66
 80060d0:	187b      	adds	r3, r7, r1
 80060d2:	781a      	ldrb	r2, [r3, #0]
 80060d4:	187b      	adds	r3, r7, r1
 80060d6:	3201      	adds	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	2366      	movs	r3, #102	@ 0x66
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d805      	bhi.n	80060f0 <bme68x_get_data+0x158>
 80060e4:	2367      	movs	r3, #103	@ 0x67
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	b25b      	sxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0dd      	beq.n	80060ac <bme68x_get_data+0x114>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80060f0:	2366      	movs	r3, #102	@ 0x66
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e022      	b.n	8006140 <bme68x_get_data+0x1a8>
            {
                for (j = i + 1; j < 3; j++)
 80060fa:	2365      	movs	r3, #101	@ 0x65
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	2266      	movs	r2, #102	@ 0x66
 8006100:	18ba      	adds	r2, r7, r2
 8006102:	7812      	ldrb	r2, [r2, #0]
 8006104:	3201      	adds	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e00f      	b.n	800612a <bme68x_get_data+0x192>
                {
                    sort_sensor_data(i, j, field_ptr);
 800610a:	2358      	movs	r3, #88	@ 0x58
 800610c:	18fa      	adds	r2, r7, r3
 800610e:	2465      	movs	r4, #101	@ 0x65
 8006110:	193b      	adds	r3, r7, r4
 8006112:	7819      	ldrb	r1, [r3, #0]
 8006114:	2366      	movs	r3, #102	@ 0x66
 8006116:	18fb      	adds	r3, r7, r3
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	0018      	movs	r0, r3
 800611c:	f001 fc62 	bl	80079e4 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8006120:	193b      	adds	r3, r7, r4
 8006122:	781a      	ldrb	r2, [r3, #0]
 8006124:	193b      	adds	r3, r7, r4
 8006126:	3201      	adds	r2, #1
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	2365      	movs	r3, #101	@ 0x65
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d9ea      	bls.n	800610a <bme68x_get_data+0x172>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8006134:	2166      	movs	r1, #102	@ 0x66
 8006136:	187b      	adds	r3, r7, r1
 8006138:	781a      	ldrb	r2, [r3, #0]
 800613a:	187b      	adds	r3, r7, r1
 800613c:	3201      	adds	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	2366      	movs	r3, #102	@ 0x66
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d805      	bhi.n	8006156 <bme68x_get_data+0x1be>
 800614a:	2367      	movs	r3, #103	@ 0x67
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	b25b      	sxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0d1      	beq.n	80060fa <bme68x_get_data+0x162>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8006156:	2366      	movs	r3, #102	@ 0x66
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	2200      	movs	r2, #0
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	e019      	b.n	8006194 <bme68x_get_data+0x1fc>
            {
                data[i] = *field_ptr[i];
 8006160:	2566      	movs	r5, #102	@ 0x66
 8006162:	197b      	adds	r3, r7, r5
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	2358      	movs	r3, #88	@ 0x58
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	0092      	lsls	r2, r2, #2
 800616c:	58d1      	ldr	r1, [r2, r3]
 800616e:	197b      	adds	r3, r7, r5
 8006170:	781a      	ldrb	r2, [r3, #0]
 8006172:	0013      	movs	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	189b      	adds	r3, r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	001a      	movs	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	189b      	adds	r3, r3, r2
 8006180:	000a      	movs	r2, r1
 8006182:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006184:	c313      	stmia	r3!, {r0, r1, r4}
 8006186:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006188:	c313      	stmia	r3!, {r0, r1, r4}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800618a:	197b      	adds	r3, r7, r5
 800618c:	781a      	ldrb	r2, [r3, #0]
 800618e:	197b      	adds	r3, r7, r5
 8006190:	3201      	adds	r2, #1
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	2366      	movs	r3, #102	@ 0x66
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d805      	bhi.n	80061aa <bme68x_get_data+0x212>
 800619e:	2367      	movs	r3, #103	@ 0x67
 80061a0:	18fb      	adds	r3, r7, r3
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	b25b      	sxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0da      	beq.n	8006160 <bme68x_get_data+0x1c8>
            }

            if (new_fields == 0)
 80061aa:	2364      	movs	r3, #100	@ 0x64
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d108      	bne.n	80061c6 <bme68x_get_data+0x22e>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 80061b4:	2367      	movs	r3, #103	@ 0x67
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	2202      	movs	r2, #2
 80061ba:	701a      	strb	r2, [r3, #0]
            if (new_fields == 0)
 80061bc:	e003      	b.n	80061c6 <bme68x_get_data+0x22e>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 80061be:	2367      	movs	r3, #103	@ 0x67
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]
        }

        if (n_data == NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <bme68x_get_data+0x23e>
        {
            rslt = BME68X_E_NULL_PTR;
 80061cc:	2367      	movs	r3, #103	@ 0x67
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	22ff      	movs	r2, #255	@ 0xff
 80061d2:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80061d4:	e009      	b.n	80061ea <bme68x_get_data+0x252>
        }
        else
        {
            *n_data = new_fields;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2264      	movs	r2, #100	@ 0x64
 80061da:	18ba      	adds	r2, r7, r2
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80061e0:	e003      	b.n	80061ea <bme68x_get_data+0x252>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80061e2:	2367      	movs	r3, #103	@ 0x67
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	22ff      	movs	r2, #255	@ 0xff
 80061e8:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80061ea:	2367      	movs	r3, #103	@ 0x67
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	b25b      	sxtb	r3, r3
}
 80061f2:	0018      	movs	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b01b      	add	sp, #108	@ 0x6c
 80061f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080061fc <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80061fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061fe:	b089      	sub	sp, #36	@ 0x24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	260f      	movs	r6, #15
 8006208:	19bb      	adds	r3, r7, r6
 800620a:	1c02      	adds	r2, r0, #0
 800620c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t nb_conv = 0;
 800620e:	231c      	movs	r3, #28
 8006210:	18fb      	adds	r3, r7, r3
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
    uint8_t hctrl, run_gas = 0;
 8006216:	221d      	movs	r2, #29
 8006218:	18bb      	adds	r3, r7, r2
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 800621e:	2214      	movs	r2, #20
 8006220:	18bb      	adds	r3, r7, r2
 8006222:	4a53      	ldr	r2, [pc, #332]	@ (8006370 <bme68x_set_heatr_conf+0x174>)
 8006224:	801a      	strh	r2, [r3, #0]

    if (conf != NULL)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d100      	bne.n	800622e <bme68x_set_heatr_conf+0x32>
 800622c:	e094      	b.n	8006358 <bme68x_set_heatr_conf+0x15c>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800622e:	251f      	movs	r5, #31
 8006230:	197c      	adds	r4, r7, r5
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	0019      	movs	r1, r3
 8006236:	2000      	movs	r0, #0
 8006238:	f7ff fd82 	bl	8005d40 <bme68x_set_op_mode>
 800623c:	0003      	movs	r3, r0
 800623e:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8006240:	197b      	adds	r3, r7, r5
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	b25b      	sxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <bme68x_set_heatr_conf+0x66>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800624a:	197c      	adds	r4, r7, r5
 800624c:	687d      	ldr	r5, [r7, #4]
 800624e:	231c      	movs	r3, #28
 8006250:	18fa      	adds	r2, r7, r3
 8006252:	19bb      	adds	r3, r7, r6
 8006254:	7819      	ldrb	r1, [r3, #0]
 8006256:	68b8      	ldr	r0, [r7, #8]
 8006258:	002b      	movs	r3, r5
 800625a:	f001 f9f9 	bl	8007650 <set_conf>
 800625e:	0003      	movs	r3, r0
 8006260:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8006262:	251f      	movs	r5, #31
 8006264:	197b      	adds	r3, r7, r5
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b25b      	sxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d000      	beq.n	8006270 <bme68x_set_heatr_conf+0x74>
 800626e:	e077      	b.n	8006360 <bme68x_set_heatr_conf+0x164>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8006270:	197c      	adds	r4, r7, r5
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2218      	movs	r2, #24
 8006276:	18b9      	adds	r1, r7, r2
 8006278:	2202      	movs	r2, #2
 800627a:	2070      	movs	r0, #112	@ 0x70
 800627c:	f7ff fb5e 	bl	800593c <bme68x_get_regs>
 8006280:	0003      	movs	r3, r0
 8006282:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8006284:	197b      	adds	r3, r7, r5
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	b25b      	sxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d168      	bne.n	8006360 <bme68x_set_heatr_conf+0x164>
            {
                if (conf->enable == BME68X_ENABLE)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d111      	bne.n	80062ba <bme68x_set_heatr_conf+0xbe>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8006296:	231e      	movs	r3, #30
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d104      	bne.n	80062b0 <bme68x_set_heatr_conf+0xb4>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80062a6:	231d      	movs	r3, #29
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e00c      	b.n	80062ca <bme68x_set_heatr_conf+0xce>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 80062b0:	231d      	movs	r3, #29
 80062b2:	18fb      	adds	r3, r7, r3
 80062b4:	2201      	movs	r2, #1
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	e007      	b.n	80062ca <bme68x_set_heatr_conf+0xce>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 80062ba:	231e      	movs	r3, #30
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	2201      	movs	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 80062c2:	231d      	movs	r3, #29
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 80062ca:	2018      	movs	r0, #24
 80062cc:	183b      	adds	r3, r7, r0
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b25b      	sxtb	r3, r3
 80062d2:	2208      	movs	r2, #8
 80062d4:	4393      	bics	r3, r2
 80062d6:	b25a      	sxtb	r2, r3
 80062d8:	231e      	movs	r3, #30
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	b25b      	sxtb	r3, r3
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	2108      	movs	r1, #8
 80062e6:	400b      	ands	r3, r1
 80062e8:	b25b      	sxtb	r3, r3
 80062ea:	4313      	orrs	r3, r2
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	183b      	adds	r3, r7, r0
 80062f2:	701a      	strb	r2, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 80062f4:	183b      	adds	r3, r7, r0
 80062f6:	785b      	ldrb	r3, [r3, #1]
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	220f      	movs	r2, #15
 80062fc:	4393      	bics	r3, r2
 80062fe:	b25a      	sxtb	r2, r3
 8006300:	231c      	movs	r3, #28
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b25b      	sxtb	r3, r3
 8006308:	210f      	movs	r1, #15
 800630a:	400b      	ands	r3, r1
 800630c:	b25b      	sxtb	r3, r3
 800630e:	4313      	orrs	r3, r2
 8006310:	b25b      	sxtb	r3, r3
 8006312:	b2da      	uxtb	r2, r3
 8006314:	183b      	adds	r3, r7, r0
 8006316:	705a      	strb	r2, [r3, #1]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8006318:	183b      	adds	r3, r7, r0
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	b25b      	sxtb	r3, r3
 800631e:	2230      	movs	r2, #48	@ 0x30
 8006320:	4393      	bics	r3, r2
 8006322:	b25a      	sxtb	r2, r3
 8006324:	231d      	movs	r3, #29
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	b25b      	sxtb	r3, r3
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	b25b      	sxtb	r3, r3
 8006330:	2130      	movs	r1, #48	@ 0x30
 8006332:	400b      	ands	r3, r1
 8006334:	b25b      	sxtb	r3, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	b25b      	sxtb	r3, r3
 800633a:	b2da      	uxtb	r2, r3
 800633c:	183b      	adds	r3, r7, r0
 800633e:	705a      	strb	r2, [r3, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8006340:	231f      	movs	r3, #31
 8006342:	18fc      	adds	r4, r7, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	1839      	adds	r1, r7, r0
 8006348:	2214      	movs	r2, #20
 800634a:	18b8      	adds	r0, r7, r2
 800634c:	2202      	movs	r2, #2
 800634e:	f7ff fa48 	bl	80057e2 <bme68x_set_regs>
 8006352:	0003      	movs	r3, r0
 8006354:	7023      	strb	r3, [r4, #0]
 8006356:	e003      	b.n	8006360 <bme68x_set_heatr_conf+0x164>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006358:	231f      	movs	r3, #31
 800635a:	18fb      	adds	r3, r7, r3
 800635c:	22ff      	movs	r2, #255	@ 0xff
 800635e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8006360:	231f      	movs	r3, #31
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	b25b      	sxtb	r3, r3
}
 8006368:	0018      	movs	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	b009      	add	sp, #36	@ 0x24
 800636e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006370:	00007170 	.word	0x00007170

08006374 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8006374:	b5b0      	push	{r4, r5, r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fb fa34 	bl	80017ec <__aeabi_ui2f>
 8006384:	1c03      	adds	r3, r0, #0
 8006386:	218d      	movs	r1, #141	@ 0x8d
 8006388:	05c9      	lsls	r1, r1, #23
 800638a:	1c18      	adds	r0, r3, #0
 800638c:	f7fa fc32 	bl	8000bf4 <__aeabi_fdiv>
 8006390:	1c03      	adds	r3, r0, #0
 8006392:	1c1c      	adds	r4, r3, #0
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	8bdb      	ldrh	r3, [r3, #30]
 8006398:	0018      	movs	r0, r3
 800639a:	f7fb fa27 	bl	80017ec <__aeabi_ui2f>
 800639e:	1c03      	adds	r3, r0, #0
 80063a0:	2189      	movs	r1, #137	@ 0x89
 80063a2:	05c9      	lsls	r1, r1, #23
 80063a4:	1c18      	adds	r0, r3, #0
 80063a6:	f7fa fc25 	bl	8000bf4 <__aeabi_fdiv>
 80063aa:	1c03      	adds	r3, r0, #0
 80063ac:	1c19      	adds	r1, r3, #0
 80063ae:	1c20      	adds	r0, r4, #0
 80063b0:	f7fa ff48 	bl	8001244 <__aeabi_fsub>
 80063b4:	1c03      	adds	r3, r0, #0
 80063b6:	1c1c      	adds	r4, r3, #0
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2220      	movs	r2, #32
 80063bc:	5e9b      	ldrsh	r3, [r3, r2]
 80063be:	0018      	movs	r0, r3
 80063c0:	f7fb f9c4 	bl	800174c <__aeabi_i2f>
 80063c4:	1c03      	adds	r3, r0, #0
 80063c6:	1c19      	adds	r1, r3, #0
 80063c8:	1c20      	adds	r0, r4, #0
 80063ca:	f7fa fde1 	bl	8000f90 <__aeabi_fmul>
 80063ce:	1c03      	adds	r3, r0, #0
 80063d0:	617b      	str	r3, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fb fa0a 	bl	80017ec <__aeabi_ui2f>
 80063d8:	1c03      	adds	r3, r0, #0
 80063da:	2190      	movs	r1, #144	@ 0x90
 80063dc:	05c9      	lsls	r1, r1, #23
 80063de:	1c18      	adds	r0, r3, #0
 80063e0:	f7fa fc08 	bl	8000bf4 <__aeabi_fdiv>
 80063e4:	1c03      	adds	r3, r0, #0
 80063e6:	1c1c      	adds	r4, r3, #0
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	8bdb      	ldrh	r3, [r3, #30]
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7fb f9fd 	bl	80017ec <__aeabi_ui2f>
 80063f2:	1c03      	adds	r3, r0, #0
 80063f4:	218c      	movs	r1, #140	@ 0x8c
 80063f6:	05c9      	lsls	r1, r1, #23
 80063f8:	1c18      	adds	r0, r3, #0
 80063fa:	f7fa fbfb 	bl	8000bf4 <__aeabi_fdiv>
 80063fe:	1c03      	adds	r3, r0, #0
 8006400:	1c19      	adds	r1, r3, #0
 8006402:	1c20      	adds	r0, r4, #0
 8006404:	f7fa ff1e 	bl	8001244 <__aeabi_fsub>
 8006408:	1c03      	adds	r3, r0, #0
 800640a:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7fb f9ed 	bl	80017ec <__aeabi_ui2f>
 8006412:	1c03      	adds	r3, r0, #0
 8006414:	2190      	movs	r1, #144	@ 0x90
 8006416:	05c9      	lsls	r1, r1, #23
 8006418:	1c18      	adds	r0, r3, #0
 800641a:	f7fa fbeb 	bl	8000bf4 <__aeabi_fdiv>
 800641e:	1c03      	adds	r3, r0, #0
 8006420:	1c1d      	adds	r5, r3, #0
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	8bdb      	ldrh	r3, [r3, #30]
 8006426:	0018      	movs	r0, r3
 8006428:	f7fb f9e0 	bl	80017ec <__aeabi_ui2f>
 800642c:	1c03      	adds	r3, r0, #0
 800642e:	218c      	movs	r1, #140	@ 0x8c
 8006430:	05c9      	lsls	r1, r1, #23
 8006432:	1c18      	adds	r0, r3, #0
 8006434:	f7fa fbde 	bl	8000bf4 <__aeabi_fdiv>
 8006438:	1c03      	adds	r3, r0, #0
 800643a:	1c19      	adds	r1, r3, #0
 800643c:	1c28      	adds	r0, r5, #0
 800643e:	f7fa ff01 	bl	8001244 <__aeabi_fsub>
 8006442:	1c03      	adds	r3, r0, #0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8006444:	1c19      	adds	r1, r3, #0
 8006446:	1c20      	adds	r0, r4, #0
 8006448:	f7fa fda2 	bl	8000f90 <__aeabi_fmul>
 800644c:	1c03      	adds	r3, r0, #0
 800644e:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2222      	movs	r2, #34	@ 0x22
 8006454:	569b      	ldrsb	r3, [r3, r2]
 8006456:	0018      	movs	r0, r3
 8006458:	f7fb f978 	bl	800174c <__aeabi_i2f>
 800645c:	1c03      	adds	r3, r0, #0
 800645e:	2183      	movs	r1, #131	@ 0x83
 8006460:	05c9      	lsls	r1, r1, #23
 8006462:	1c18      	adds	r0, r3, #0
 8006464:	f7fa fd94 	bl	8000f90 <__aeabi_fmul>
 8006468:	1c03      	adds	r3, r0, #0
    var2 =
 800646a:	1c19      	adds	r1, r3, #0
 800646c:	1c20      	adds	r0, r4, #0
 800646e:	f7fa fd8f 	bl	8000f90 <__aeabi_fmul>
 8006472:	1c03      	adds	r3, r0, #0
 8006474:	613b      	str	r3, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8006476:	6939      	ldr	r1, [r7, #16]
 8006478:	6978      	ldr	r0, [r7, #20]
 800647a:	f7fa f9c9 	bl	8000810 <__aeabi_fadd>
 800647e:	1c03      	adds	r3, r0, #0
 8006480:	1c1a      	adds	r2, r3, #0
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	639a      	str	r2, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648a:	4905      	ldr	r1, [pc, #20]	@ (80064a0 <calc_temperature+0x12c>)
 800648c:	1c18      	adds	r0, r3, #0
 800648e:	f7fa fbb1 	bl	8000bf4 <__aeabi_fdiv>
 8006492:	1c03      	adds	r3, r0, #0
 8006494:	60fb      	str	r3, [r7, #12]

    return calc_temp;
 8006496:	68fb      	ldr	r3, [r7, #12]
}
 8006498:	1c18      	adds	r0, r3, #0
 800649a:	46bd      	mov	sp, r7
 800649c:	b006      	add	sp, #24
 800649e:	bdb0      	pop	{r4, r5, r7, pc}
 80064a0:	45a00000 	.word	0x45a00000

080064a4 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	2180      	movs	r1, #128	@ 0x80
 80064b4:	05c9      	lsls	r1, r1, #23
 80064b6:	1c18      	adds	r0, r3, #0
 80064b8:	f7fa fb9c 	bl	8000bf4 <__aeabi_fdiv>
 80064bc:	1c03      	adds	r3, r0, #0
 80064be:	49a7      	ldr	r1, [pc, #668]	@ (800675c <calc_pressure+0x2b8>)
 80064c0:	1c18      	adds	r0, r3, #0
 80064c2:	f7fa febf 	bl	8001244 <__aeabi_fsub>
 80064c6:	1c03      	adds	r3, r0, #0
 80064c8:	613b      	str	r3, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 80064ca:	6939      	ldr	r1, [r7, #16]
 80064cc:	6938      	ldr	r0, [r7, #16]
 80064ce:	f7fa fd5f 	bl	8000f90 <__aeabi_fmul>
 80064d2:	1c03      	adds	r3, r0, #0
 80064d4:	1c1c      	adds	r4, r3, #0
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	222e      	movs	r2, #46	@ 0x2e
 80064da:	569b      	ldrsb	r3, [r3, r2]
 80064dc:	0018      	movs	r0, r3
 80064de:	f7fb f935 	bl	800174c <__aeabi_i2f>
 80064e2:	1c03      	adds	r3, r0, #0
 80064e4:	2190      	movs	r1, #144	@ 0x90
 80064e6:	05c9      	lsls	r1, r1, #23
 80064e8:	1c18      	adds	r0, r3, #0
 80064ea:	f7fa fb83 	bl	8000bf4 <__aeabi_fdiv>
 80064ee:	1c03      	adds	r3, r0, #0
 80064f0:	1c19      	adds	r1, r3, #0
 80064f2:	1c20      	adds	r0, r4, #0
 80064f4:	f7fa fd4c 	bl	8000f90 <__aeabi_fmul>
 80064f8:	1c03      	adds	r3, r0, #0
 80064fa:	60fb      	str	r3, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	222c      	movs	r2, #44	@ 0x2c
 8006500:	5e9b      	ldrsh	r3, [r3, r2]
 8006502:	0018      	movs	r0, r3
 8006504:	f7fb f922 	bl	800174c <__aeabi_i2f>
 8006508:	1c03      	adds	r3, r0, #0
 800650a:	6939      	ldr	r1, [r7, #16]
 800650c:	1c18      	adds	r0, r3, #0
 800650e:	f7fa fd3f 	bl	8000f90 <__aeabi_fmul>
 8006512:	1c03      	adds	r3, r0, #0
 8006514:	1c19      	adds	r1, r3, #0
 8006516:	1c18      	adds	r0, r3, #0
 8006518:	f7fa f97a 	bl	8000810 <__aeabi_fadd>
 800651c:	1c03      	adds	r3, r0, #0
 800651e:	1c19      	adds	r1, r3, #0
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7fa f975 	bl	8000810 <__aeabi_fadd>
 8006526:	1c03      	adds	r3, r0, #0
 8006528:	60fb      	str	r3, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 800652a:	2181      	movs	r1, #129	@ 0x81
 800652c:	05c9      	lsls	r1, r1, #23
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7fa fb60 	bl	8000bf4 <__aeabi_fdiv>
 8006534:	1c03      	adds	r3, r0, #0
 8006536:	1c1c      	adds	r4, r3, #0
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	222a      	movs	r2, #42	@ 0x2a
 800653c:	5e9b      	ldrsh	r3, [r3, r2]
 800653e:	0018      	movs	r0, r3
 8006540:	f7fb f904 	bl	800174c <__aeabi_i2f>
 8006544:	1c03      	adds	r3, r0, #0
 8006546:	218f      	movs	r1, #143	@ 0x8f
 8006548:	05c9      	lsls	r1, r1, #23
 800654a:	1c18      	adds	r0, r3, #0
 800654c:	f7fa fd20 	bl	8000f90 <__aeabi_fmul>
 8006550:	1c03      	adds	r3, r0, #0
 8006552:	1c19      	adds	r1, r3, #0
 8006554:	1c20      	adds	r0, r4, #0
 8006556:	f7fa f95b 	bl	8000810 <__aeabi_fadd>
 800655a:	1c03      	adds	r3, r0, #0
 800655c:	60fb      	str	r3, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2228      	movs	r2, #40	@ 0x28
 8006562:	569b      	ldrsb	r3, [r3, r2]
 8006564:	0018      	movs	r0, r3
 8006566:	f7fb f8f1 	bl	800174c <__aeabi_i2f>
 800656a:	1c03      	adds	r3, r0, #0
 800656c:	6939      	ldr	r1, [r7, #16]
 800656e:	1c18      	adds	r0, r3, #0
 8006570:	f7fa fd0e 	bl	8000f90 <__aeabi_fmul>
 8006574:	1c03      	adds	r3, r0, #0
 8006576:	6939      	ldr	r1, [r7, #16]
 8006578:	1c18      	adds	r0, r3, #0
 800657a:	f7fa fd09 	bl	8000f90 <__aeabi_fmul>
 800657e:	1c03      	adds	r3, r0, #0
 8006580:	218d      	movs	r1, #141	@ 0x8d
 8006582:	05c9      	lsls	r1, r1, #23
 8006584:	1c18      	adds	r0, r3, #0
 8006586:	f7fa fb35 	bl	8000bf4 <__aeabi_fdiv>
 800658a:	1c03      	adds	r3, r0, #0
 800658c:	1c1c      	adds	r4, r3, #0
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2226      	movs	r2, #38	@ 0x26
 8006592:	5e9b      	ldrsh	r3, [r3, r2]
 8006594:	0018      	movs	r0, r3
 8006596:	f7fb f8d9 	bl	800174c <__aeabi_i2f>
 800659a:	1c03      	adds	r3, r0, #0
 800659c:	6939      	ldr	r1, [r7, #16]
 800659e:	1c18      	adds	r0, r3, #0
 80065a0:	f7fa fcf6 	bl	8000f90 <__aeabi_fmul>
 80065a4:	1c03      	adds	r3, r0, #0
 80065a6:	1c19      	adds	r1, r3, #0
 80065a8:	1c20      	adds	r0, r4, #0
 80065aa:	f7fa f931 	bl	8000810 <__aeabi_fadd>
 80065ae:	1c03      	adds	r3, r0, #0
 80065b0:	2192      	movs	r1, #146	@ 0x92
 80065b2:	05c9      	lsls	r1, r1, #23
 80065b4:	1c18      	adds	r0, r3, #0
 80065b6:	f7fa fb1d 	bl	8000bf4 <__aeabi_fdiv>
 80065ba:	1c03      	adds	r3, r0, #0
 80065bc:	613b      	str	r3, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 80065be:	218e      	movs	r1, #142	@ 0x8e
 80065c0:	05c9      	lsls	r1, r1, #23
 80065c2:	6938      	ldr	r0, [r7, #16]
 80065c4:	f7fa fb16 	bl	8000bf4 <__aeabi_fdiv>
 80065c8:	1c03      	adds	r3, r0, #0
 80065ca:	21fe      	movs	r1, #254	@ 0xfe
 80065cc:	0589      	lsls	r1, r1, #22
 80065ce:	1c18      	adds	r0, r3, #0
 80065d0:	f7fa f91e 	bl	8000810 <__aeabi_fadd>
 80065d4:	1c03      	adds	r3, r0, #0
 80065d6:	1c1c      	adds	r4, r3, #0
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80065dc:	0018      	movs	r0, r3
 80065de:	f7fb f905 	bl	80017ec <__aeabi_ui2f>
 80065e2:	1c03      	adds	r3, r0, #0
 80065e4:	1c19      	adds	r1, r3, #0
 80065e6:	1c20      	adds	r0, r4, #0
 80065e8:	f7fa fcd2 	bl	8000f90 <__aeabi_fmul>
 80065ec:	1c03      	adds	r3, r0, #0
 80065ee:	613b      	str	r3, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fb f8fb 	bl	80017ec <__aeabi_ui2f>
 80065f6:	1c03      	adds	r3, r0, #0
 80065f8:	1c19      	adds	r1, r3, #0
 80065fa:	2093      	movs	r0, #147	@ 0x93
 80065fc:	05c0      	lsls	r0, r0, #23
 80065fe:	f7fa fe21 	bl	8001244 <__aeabi_fsub>
 8006602:	1c03      	adds	r3, r0, #0
 8006604:	617b      	str	r3, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8006606:	6938      	ldr	r0, [r7, #16]
 8006608:	f7fb f880 	bl	800170c <__aeabi_f2iz>
 800660c:	1e03      	subs	r3, r0, #0
 800660e:	d100      	bne.n	8006612 <calc_pressure+0x16e>
 8006610:	e09c      	b.n	800674c <calc_pressure+0x2a8>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8006612:	218b      	movs	r1, #139	@ 0x8b
 8006614:	05c9      	lsls	r1, r1, #23
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f7fa faec 	bl	8000bf4 <__aeabi_fdiv>
 800661c:	1c03      	adds	r3, r0, #0
 800661e:	1c19      	adds	r1, r3, #0
 8006620:	6978      	ldr	r0, [r7, #20]
 8006622:	f7fa fe0f 	bl	8001244 <__aeabi_fsub>
 8006626:	1c03      	adds	r3, r0, #0
 8006628:	494d      	ldr	r1, [pc, #308]	@ (8006760 <calc_pressure+0x2bc>)
 800662a:	1c18      	adds	r0, r3, #0
 800662c:	f7fa fcb0 	bl	8000f90 <__aeabi_fmul>
 8006630:	1c03      	adds	r3, r0, #0
 8006632:	6939      	ldr	r1, [r7, #16]
 8006634:	1c18      	adds	r0, r3, #0
 8006636:	f7fa fadd 	bl	8000bf4 <__aeabi_fdiv>
 800663a:	1c03      	adds	r3, r0, #0
 800663c:	617b      	str	r3, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2232      	movs	r2, #50	@ 0x32
 8006642:	5e9b      	ldrsh	r3, [r3, r2]
 8006644:	0018      	movs	r0, r3
 8006646:	f7fb f881 	bl	800174c <__aeabi_i2f>
 800664a:	1c03      	adds	r3, r0, #0
 800664c:	6979      	ldr	r1, [r7, #20]
 800664e:	1c18      	adds	r0, r3, #0
 8006650:	f7fa fc9e 	bl	8000f90 <__aeabi_fmul>
 8006654:	1c03      	adds	r3, r0, #0
 8006656:	6979      	ldr	r1, [r7, #20]
 8006658:	1c18      	adds	r0, r3, #0
 800665a:	f7fa fc99 	bl	8000f90 <__aeabi_fmul>
 800665e:	1c03      	adds	r3, r0, #0
 8006660:	219e      	movs	r1, #158	@ 0x9e
 8006662:	05c9      	lsls	r1, r1, #23
 8006664:	1c18      	adds	r0, r3, #0
 8006666:	f7fa fac5 	bl	8000bf4 <__aeabi_fdiv>
 800666a:	1c03      	adds	r3, r0, #0
 800666c:	613b      	str	r3, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2230      	movs	r2, #48	@ 0x30
 8006672:	5e9b      	ldrsh	r3, [r3, r2]
 8006674:	0018      	movs	r0, r3
 8006676:	f7fb f869 	bl	800174c <__aeabi_i2f>
 800667a:	1c03      	adds	r3, r0, #0
 800667c:	218e      	movs	r1, #142	@ 0x8e
 800667e:	05c9      	lsls	r1, r1, #23
 8006680:	1c18      	adds	r0, r3, #0
 8006682:	f7fa fab7 	bl	8000bf4 <__aeabi_fdiv>
 8006686:	1c03      	adds	r3, r0, #0
 8006688:	1c19      	adds	r1, r3, #0
 800668a:	6978      	ldr	r0, [r7, #20]
 800668c:	f7fa fc80 	bl	8000f90 <__aeabi_fmul>
 8006690:	1c03      	adds	r3, r0, #0
 8006692:	60fb      	str	r3, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8006694:	2187      	movs	r1, #135	@ 0x87
 8006696:	05c9      	lsls	r1, r1, #23
 8006698:	6978      	ldr	r0, [r7, #20]
 800669a:	f7fa faab 	bl	8000bf4 <__aeabi_fdiv>
 800669e:	1c03      	adds	r3, r0, #0
 80066a0:	1c1c      	adds	r4, r3, #0
 80066a2:	2187      	movs	r1, #135	@ 0x87
 80066a4:	05c9      	lsls	r1, r1, #23
 80066a6:	6978      	ldr	r0, [r7, #20]
 80066a8:	f7fa faa4 	bl	8000bf4 <__aeabi_fdiv>
 80066ac:	1c03      	adds	r3, r0, #0
 80066ae:	1c19      	adds	r1, r3, #0
 80066b0:	1c20      	adds	r0, r4, #0
 80066b2:	f7fa fc6d 	bl	8000f90 <__aeabi_fmul>
 80066b6:	1c03      	adds	r3, r0, #0
 80066b8:	1c1c      	adds	r4, r3, #0
 80066ba:	2187      	movs	r1, #135	@ 0x87
 80066bc:	05c9      	lsls	r1, r1, #23
 80066be:	6978      	ldr	r0, [r7, #20]
 80066c0:	f7fa fa98 	bl	8000bf4 <__aeabi_fdiv>
 80066c4:	1c03      	adds	r3, r0, #0
 80066c6:	1c19      	adds	r1, r3, #0
 80066c8:	1c20      	adds	r0, r4, #0
 80066ca:	f7fa fc61 	bl	8000f90 <__aeabi_fmul>
 80066ce:	1c03      	adds	r3, r0, #0
 80066d0:	1c1c      	adds	r4, r3, #0
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2234      	movs	r2, #52	@ 0x34
 80066d6:	5c9b      	ldrb	r3, [r3, r2]
 80066d8:	0018      	movs	r0, r3
 80066da:	f7fb f837 	bl	800174c <__aeabi_i2f>
 80066de:	1c03      	adds	r3, r0, #0
 80066e0:	2190      	movs	r1, #144	@ 0x90
 80066e2:	05c9      	lsls	r1, r1, #23
 80066e4:	1c18      	adds	r0, r3, #0
 80066e6:	f7fa fa85 	bl	8000bf4 <__aeabi_fdiv>
 80066ea:	1c03      	adds	r3, r0, #0
 80066ec:	1c19      	adds	r1, r3, #0
 80066ee:	1c20      	adds	r0, r4, #0
 80066f0:	f7fa fc4e 	bl	8000f90 <__aeabi_fmul>
 80066f4:	1c03      	adds	r3, r0, #0
 80066f6:	60bb      	str	r3, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	6938      	ldr	r0, [r7, #16]
 80066fc:	f7fa f888 	bl	8000810 <__aeabi_fadd>
 8006700:	1c03      	adds	r3, r0, #0
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	1c18      	adds	r0, r3, #0
 8006706:	f7fa f883 	bl	8000810 <__aeabi_fadd>
 800670a:	1c03      	adds	r3, r0, #0
 800670c:	1c1c      	adds	r4, r3, #0
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	222f      	movs	r2, #47	@ 0x2f
 8006712:	569b      	ldrsb	r3, [r3, r2]
 8006714:	0018      	movs	r0, r3
 8006716:	f7fb f819 	bl	800174c <__aeabi_i2f>
 800671a:	1c03      	adds	r3, r0, #0
 800671c:	2186      	movs	r1, #134	@ 0x86
 800671e:	05c9      	lsls	r1, r1, #23
 8006720:	1c18      	adds	r0, r3, #0
 8006722:	f7fa fc35 	bl	8000f90 <__aeabi_fmul>
 8006726:	1c03      	adds	r3, r0, #0
 8006728:	1c19      	adds	r1, r3, #0
 800672a:	1c20      	adds	r0, r4, #0
 800672c:	f7fa f870 	bl	8000810 <__aeabi_fadd>
 8006730:	1c03      	adds	r3, r0, #0
 8006732:	2183      	movs	r1, #131	@ 0x83
 8006734:	05c9      	lsls	r1, r1, #23
 8006736:	1c18      	adds	r0, r3, #0
 8006738:	f7fa fa5c 	bl	8000bf4 <__aeabi_fdiv>
 800673c:	1c03      	adds	r3, r0, #0
 800673e:	1c19      	adds	r1, r3, #0
 8006740:	6978      	ldr	r0, [r7, #20]
 8006742:	f7fa f865 	bl	8000810 <__aeabi_fadd>
 8006746:	1c03      	adds	r3, r0, #0
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	e001      	b.n	8006750 <calc_pressure+0x2ac>
    }
    else
    {
        calc_pres = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8006750:	697b      	ldr	r3, [r7, #20]
}
 8006752:	1c18      	adds	r0, r3, #0
 8006754:	46bd      	mov	sp, r7
 8006756:	b007      	add	sp, #28
 8006758:	bd90      	pop	{r4, r7, pc}
 800675a:	46c0      	nop			@ (mov r8, r8)
 800675c:	477a0000 	.word	0x477a0000
 8006760:	45c35000 	.word	0x45c35000

08006764 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8006764:	b5b0      	push	{r4, r5, r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	0002      	movs	r2, r0
 800676c:	6039      	str	r1, [r7, #0]
 800676e:	1dbb      	adds	r3, r7, #6
 8006770:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006776:	4967      	ldr	r1, [pc, #412]	@ (8006914 <calc_humidity+0x1b0>)
 8006778:	1c18      	adds	r0, r3, #0
 800677a:	f7fa fa3b 	bl	8000bf4 <__aeabi_fdiv>
 800677e:	1c03      	adds	r3, r0, #0
 8006780:	61bb      	str	r3, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8006782:	1dbb      	adds	r3, r7, #6
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	0018      	movs	r0, r3
 8006788:	f7fb f830 	bl	80017ec <__aeabi_ui2f>
 800678c:	1c04      	adds	r4, r0, #0
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	8a1b      	ldrh	r3, [r3, #16]
 8006792:	0018      	movs	r0, r3
 8006794:	f7fb f82a 	bl	80017ec <__aeabi_ui2f>
 8006798:	1c03      	adds	r3, r0, #0
 800679a:	2183      	movs	r1, #131	@ 0x83
 800679c:	05c9      	lsls	r1, r1, #23
 800679e:	1c18      	adds	r0, r3, #0
 80067a0:	f7fa fbf6 	bl	8000f90 <__aeabi_fmul>
 80067a4:	1c03      	adds	r3, r0, #0
 80067a6:	1c1d      	adds	r5, r3, #0
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	7d1b      	ldrb	r3, [r3, #20]
 80067ac:	b25b      	sxtb	r3, r3
 80067ae:	0018      	movs	r0, r3
 80067b0:	f7fa ffcc 	bl	800174c <__aeabi_i2f>
 80067b4:	1c03      	adds	r3, r0, #0
 80067b6:	2180      	movs	r1, #128	@ 0x80
 80067b8:	05c9      	lsls	r1, r1, #23
 80067ba:	1c18      	adds	r0, r3, #0
 80067bc:	f7fa fa1a 	bl	8000bf4 <__aeabi_fdiv>
 80067c0:	1c03      	adds	r3, r0, #0
 80067c2:	69b9      	ldr	r1, [r7, #24]
 80067c4:	1c18      	adds	r0, r3, #0
 80067c6:	f7fa fbe3 	bl	8000f90 <__aeabi_fmul>
 80067ca:	1c03      	adds	r3, r0, #0
 80067cc:	1c19      	adds	r1, r3, #0
 80067ce:	1c28      	adds	r0, r5, #0
 80067d0:	f7fa f81e 	bl	8000810 <__aeabi_fadd>
 80067d4:	1c03      	adds	r3, r0, #0
    var1 = (float)((float)hum_adc) -
 80067d6:	1c19      	adds	r1, r3, #0
 80067d8:	1c20      	adds	r0, r4, #0
 80067da:	f7fa fd33 	bl	8001244 <__aeabi_fsub>
 80067de:	1c03      	adds	r3, r0, #0
 80067e0:	617b      	str	r3, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	8a5b      	ldrh	r3, [r3, #18]
 80067e6:	0018      	movs	r0, r3
 80067e8:	f7fb f800 	bl	80017ec <__aeabi_ui2f>
 80067ec:	1c03      	adds	r3, r0, #0
 80067ee:	2191      	movs	r1, #145	@ 0x91
 80067f0:	05c9      	lsls	r1, r1, #23
 80067f2:	1c18      	adds	r0, r3, #0
 80067f4:	f7fa f9fe 	bl	8000bf4 <__aeabi_fdiv>
 80067f8:	1c03      	adds	r3, r0, #0
 80067fa:	1c1c      	adds	r4, r3, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	7d5b      	ldrb	r3, [r3, #21]
 8006800:	b25b      	sxtb	r3, r3
 8006802:	0018      	movs	r0, r3
 8006804:	f7fa ffa2 	bl	800174c <__aeabi_i2f>
 8006808:	1c03      	adds	r3, r0, #0
 800680a:	218d      	movs	r1, #141	@ 0x8d
 800680c:	05c9      	lsls	r1, r1, #23
 800680e:	1c18      	adds	r0, r3, #0
 8006810:	f7fa f9f0 	bl	8000bf4 <__aeabi_fdiv>
 8006814:	1c03      	adds	r3, r0, #0
 8006816:	69b9      	ldr	r1, [r7, #24]
 8006818:	1c18      	adds	r0, r3, #0
 800681a:	f7fa fbb9 	bl	8000f90 <__aeabi_fmul>
 800681e:	1c03      	adds	r3, r0, #0
 8006820:	21fe      	movs	r1, #254	@ 0xfe
 8006822:	0589      	lsls	r1, r1, #22
 8006824:	1c18      	adds	r0, r3, #0
 8006826:	f7f9 fff3 	bl	8000810 <__aeabi_fadd>
 800682a:	1c03      	adds	r3, r0, #0
 800682c:	1c1d      	adds	r5, r3, #0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	7d9b      	ldrb	r3, [r3, #22]
 8006832:	b25b      	sxtb	r3, r3
 8006834:	0018      	movs	r0, r3
 8006836:	f7fa ff89 	bl	800174c <__aeabi_i2f>
 800683a:	1c03      	adds	r3, r0, #0
 800683c:	2193      	movs	r1, #147	@ 0x93
 800683e:	05c9      	lsls	r1, r1, #23
 8006840:	1c18      	adds	r0, r3, #0
 8006842:	f7fa f9d7 	bl	8000bf4 <__aeabi_fdiv>
 8006846:	1c03      	adds	r3, r0, #0
 8006848:	69b9      	ldr	r1, [r7, #24]
 800684a:	1c18      	adds	r0, r3, #0
 800684c:	f7fa fba0 	bl	8000f90 <__aeabi_fmul>
 8006850:	1c03      	adds	r3, r0, #0
 8006852:	69b9      	ldr	r1, [r7, #24]
 8006854:	1c18      	adds	r0, r3, #0
 8006856:	f7fa fb9b 	bl	8000f90 <__aeabi_fmul>
 800685a:	1c03      	adds	r3, r0, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 800685c:	1c19      	adds	r1, r3, #0
 800685e:	1c28      	adds	r0, r5, #0
 8006860:	f7f9 ffd6 	bl	8000810 <__aeabi_fadd>
 8006864:	1c03      	adds	r3, r0, #0
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8006866:	1c19      	adds	r1, r3, #0
 8006868:	1c20      	adds	r0, r4, #0
 800686a:	f7fa fb91 	bl	8000f90 <__aeabi_fmul>
 800686e:	1c03      	adds	r3, r0, #0
    var2 = var1 *
 8006870:	1c19      	adds	r1, r3, #0
 8006872:	6978      	ldr	r0, [r7, #20]
 8006874:	f7fa fb8c 	bl	8000f90 <__aeabi_fmul>
 8006878:	1c03      	adds	r3, r0, #0
 800687a:	613b      	str	r3, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	7ddb      	ldrb	r3, [r3, #23]
 8006880:	0018      	movs	r0, r3
 8006882:	f7fa ffb3 	bl	80017ec <__aeabi_ui2f>
 8006886:	1c03      	adds	r3, r0, #0
 8006888:	218d      	movs	r1, #141	@ 0x8d
 800688a:	05c9      	lsls	r1, r1, #23
 800688c:	1c18      	adds	r0, r3, #0
 800688e:	f7fa f9b1 	bl	8000bf4 <__aeabi_fdiv>
 8006892:	1c03      	adds	r3, r0, #0
 8006894:	60fb      	str	r3, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	7e1b      	ldrb	r3, [r3, #24]
 800689a:	b25b      	sxtb	r3, r3
 800689c:	0018      	movs	r0, r3
 800689e:	f7fa ff55 	bl	800174c <__aeabi_i2f>
 80068a2:	1c03      	adds	r3, r0, #0
 80068a4:	2194      	movs	r1, #148	@ 0x94
 80068a6:	05c9      	lsls	r1, r1, #23
 80068a8:	1c18      	adds	r0, r3, #0
 80068aa:	f7fa f9a3 	bl	8000bf4 <__aeabi_fdiv>
 80068ae:	1c03      	adds	r3, r0, #0
 80068b0:	60bb      	str	r3, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80068b2:	69b9      	ldr	r1, [r7, #24]
 80068b4:	68b8      	ldr	r0, [r7, #8]
 80068b6:	f7fa fb6b 	bl	8000f90 <__aeabi_fmul>
 80068ba:	1c03      	adds	r3, r0, #0
 80068bc:	68f9      	ldr	r1, [r7, #12]
 80068be:	1c18      	adds	r0, r3, #0
 80068c0:	f7f9 ffa6 	bl	8000810 <__aeabi_fadd>
 80068c4:	1c03      	adds	r3, r0, #0
 80068c6:	6939      	ldr	r1, [r7, #16]
 80068c8:	1c18      	adds	r0, r3, #0
 80068ca:	f7fa fb61 	bl	8000f90 <__aeabi_fmul>
 80068ce:	1c03      	adds	r3, r0, #0
 80068d0:	6939      	ldr	r1, [r7, #16]
 80068d2:	1c18      	adds	r0, r3, #0
 80068d4:	f7fa fb5c 	bl	8000f90 <__aeabi_fmul>
 80068d8:	1c03      	adds	r3, r0, #0
 80068da:	1c19      	adds	r1, r3, #0
 80068dc:	6938      	ldr	r0, [r7, #16]
 80068de:	f7f9 ff97 	bl	8000810 <__aeabi_fadd>
 80068e2:	1c03      	adds	r3, r0, #0
 80068e4:	61fb      	str	r3, [r7, #28]
    if (calc_hum > 100.0f)
 80068e6:	490c      	ldr	r1, [pc, #48]	@ (8006918 <calc_humidity+0x1b4>)
 80068e8:	69f8      	ldr	r0, [r7, #28]
 80068ea:	f7f9 fe0b 	bl	8000504 <__aeabi_fcmpgt>
 80068ee:	1e03      	subs	r3, r0, #0
 80068f0:	d002      	beq.n	80068f8 <calc_humidity+0x194>
    {
        calc_hum = 100.0f;
 80068f2:	4b09      	ldr	r3, [pc, #36]	@ (8006918 <calc_humidity+0x1b4>)
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	e007      	b.n	8006908 <calc_humidity+0x1a4>
    }
    else if (calc_hum < 0.0f)
 80068f8:	2100      	movs	r1, #0
 80068fa:	69f8      	ldr	r0, [r7, #28]
 80068fc:	f7f9 fdee 	bl	80004dc <__aeabi_fcmplt>
 8006900:	1e03      	subs	r3, r0, #0
 8006902:	d001      	beq.n	8006908 <calc_humidity+0x1a4>
    {
        calc_hum = 0.0f;
 8006904:	2300      	movs	r3, #0
 8006906:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8006908:	69fb      	ldr	r3, [r7, #28]
}
 800690a:	1c18      	adds	r0, r3, #0
 800690c:	46bd      	mov	sp, r7
 800690e:	b008      	add	sp, #32
 8006910:	bdb0      	pop	{r4, r5, r7, pc}
 8006912:	46c0      	nop			@ (mov r8, r8)
 8006914:	45a00000 	.word	0x45a00000
 8006918:	42c80000 	.word	0x42c80000

0800691c <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	b0a9      	sub	sp, #164	@ 0xa4
 8006920:	af00      	add	r7, sp, #0
 8006922:	603a      	str	r2, [r7, #0]
 8006924:	1dbb      	adds	r3, r7, #6
 8006926:	1c02      	adds	r2, r0, #0
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	1d7b      	adds	r3, r7, #5
 800692c:	1c0a      	adds	r2, r1, #0
 800692e:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8006930:	1dbb      	adds	r3, r7, #6
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	0018      	movs	r0, r3
 8006936:	f7fa ff59 	bl	80017ec <__aeabi_ui2f>
 800693a:	1c03      	adds	r3, r0, #0
 800693c:	259c      	movs	r5, #156	@ 0x9c
 800693e:	197a      	adds	r2, r7, r5
 8006940:	6013      	str	r3, [r2, #0]
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8006942:	1d7b      	adds	r3, r7, #5
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2201      	movs	r2, #1
 8006948:	409a      	lsls	r2, r3
 800694a:	0013      	movs	r3, r2
 800694c:	0018      	movs	r0, r3
 800694e:	f7fa ff4d 	bl	80017ec <__aeabi_ui2f>
 8006952:	1c03      	adds	r3, r0, #0
 8006954:	2498      	movs	r4, #152	@ 0x98
 8006956:	193a      	adds	r2, r7, r4
 8006958:	6013      	str	r3, [r2, #0]
    const float lookup_k1_range[16] = {
 800695a:	2648      	movs	r6, #72	@ 0x48
 800695c:	19ba      	adds	r2, r7, r6
 800695e:	4b43      	ldr	r3, [pc, #268]	@ (8006a6c <calc_gas_resistance_low+0x150>)
 8006960:	0010      	movs	r0, r2
 8006962:	0019      	movs	r1, r3
 8006964:	2340      	movs	r3, #64	@ 0x40
 8006966:	001a      	movs	r2, r3
 8006968:	f00a fc90 	bl	801128c <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 800696c:	2308      	movs	r3, #8
 800696e:	18fa      	adds	r2, r7, r3
 8006970:	4b3f      	ldr	r3, [pc, #252]	@ (8006a70 <calc_gas_resistance_low+0x154>)
 8006972:	0010      	movs	r0, r2
 8006974:	0019      	movs	r1, r3
 8006976:	2340      	movs	r3, #64	@ 0x40
 8006978:	001a      	movs	r2, r3
 800697a:	f00a fc87 	bl	801128c <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	223e      	movs	r2, #62	@ 0x3e
 8006982:	569b      	ldrsb	r3, [r3, r2]
 8006984:	0018      	movs	r0, r3
 8006986:	f7fa fee1 	bl	800174c <__aeabi_i2f>
 800698a:	1c03      	adds	r3, r0, #0
 800698c:	4939      	ldr	r1, [pc, #228]	@ (8006a74 <calc_gas_resistance_low+0x158>)
 800698e:	1c18      	adds	r0, r3, #0
 8006990:	f7fa fafe 	bl	8000f90 <__aeabi_fmul>
 8006994:	1c03      	adds	r3, r0, #0
 8006996:	4938      	ldr	r1, [pc, #224]	@ (8006a78 <calc_gas_resistance_low+0x15c>)
 8006998:	1c18      	adds	r0, r3, #0
 800699a:	f7f9 ff39 	bl	8000810 <__aeabi_fadd>
 800699e:	1c03      	adds	r3, r0, #0
 80069a0:	2294      	movs	r2, #148	@ 0x94
 80069a2:	18b9      	adds	r1, r7, r2
 80069a4:	600b      	str	r3, [r1, #0]
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 80069a6:	1d7b      	adds	r3, r7, #5
 80069a8:	781a      	ldrb	r2, [r3, #0]
 80069aa:	19bb      	adds	r3, r7, r6
 80069ac:	0092      	lsls	r2, r2, #2
 80069ae:	58d3      	ldr	r3, [r2, r3]
 80069b0:	4932      	ldr	r1, [pc, #200]	@ (8006a7c <calc_gas_resistance_low+0x160>)
 80069b2:	1c18      	adds	r0, r3, #0
 80069b4:	f7fa f91e 	bl	8000bf4 <__aeabi_fdiv>
 80069b8:	1c03      	adds	r3, r0, #0
 80069ba:	21fe      	movs	r1, #254	@ 0xfe
 80069bc:	0589      	lsls	r1, r1, #22
 80069be:	1c18      	adds	r0, r3, #0
 80069c0:	f7f9 ff26 	bl	8000810 <__aeabi_fadd>
 80069c4:	1c03      	adds	r3, r0, #0
 80069c6:	1c19      	adds	r1, r3, #0
 80069c8:	2294      	movs	r2, #148	@ 0x94
 80069ca:	18ba      	adds	r2, r7, r2
 80069cc:	6810      	ldr	r0, [r2, #0]
 80069ce:	f7fa fadf 	bl	8000f90 <__aeabi_fmul>
 80069d2:	1c03      	adds	r3, r0, #0
 80069d4:	2690      	movs	r6, #144	@ 0x90
 80069d6:	19ba      	adds	r2, r7, r6
 80069d8:	6013      	str	r3, [r2, #0]
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80069da:	1d7b      	adds	r3, r7, #5
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	2308      	movs	r3, #8
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	0092      	lsls	r2, r2, #2
 80069e4:	58d3      	ldr	r3, [r2, r3]
 80069e6:	4925      	ldr	r1, [pc, #148]	@ (8006a7c <calc_gas_resistance_low+0x160>)
 80069e8:	1c18      	adds	r0, r3, #0
 80069ea:	f7fa f903 	bl	8000bf4 <__aeabi_fdiv>
 80069ee:	1c03      	adds	r3, r0, #0
 80069f0:	21fe      	movs	r1, #254	@ 0xfe
 80069f2:	0589      	lsls	r1, r1, #22
 80069f4:	1c18      	adds	r0, r3, #0
 80069f6:	f7f9 ff0b 	bl	8000810 <__aeabi_fadd>
 80069fa:	1c03      	adds	r3, r0, #0
 80069fc:	228c      	movs	r2, #140	@ 0x8c
 80069fe:	18b9      	adds	r1, r7, r2
 8006a00:	600b      	str	r3, [r1, #0]
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8006a02:	491f      	ldr	r1, [pc, #124]	@ (8006a80 <calc_gas_resistance_low+0x164>)
 8006a04:	18bb      	adds	r3, r7, r2
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	f7fa fac2 	bl	8000f90 <__aeabi_fmul>
 8006a0c:	1c03      	adds	r3, r0, #0
 8006a0e:	193a      	adds	r2, r7, r4
 8006a10:	6811      	ldr	r1, [r2, #0]
 8006a12:	1c18      	adds	r0, r3, #0
 8006a14:	f7fa fabc 	bl	8000f90 <__aeabi_fmul>
 8006a18:	1c03      	adds	r3, r0, #0
 8006a1a:	1c1c      	adds	r4, r3, #0
 8006a1c:	2188      	movs	r1, #136	@ 0x88
 8006a1e:	05c9      	lsls	r1, r1, #23
 8006a20:	197b      	adds	r3, r7, r5
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	f7fa fc0e 	bl	8001244 <__aeabi_fsub>
 8006a28:	1c03      	adds	r3, r0, #0
 8006a2a:	19ba      	adds	r2, r7, r6
 8006a2c:	6811      	ldr	r1, [r2, #0]
 8006a2e:	1c18      	adds	r0, r3, #0
 8006a30:	f7fa f8e0 	bl	8000bf4 <__aeabi_fdiv>
 8006a34:	1c03      	adds	r3, r0, #0
 8006a36:	21fe      	movs	r1, #254	@ 0xfe
 8006a38:	0589      	lsls	r1, r1, #22
 8006a3a:	1c18      	adds	r0, r3, #0
 8006a3c:	f7f9 fee8 	bl	8000810 <__aeabi_fadd>
 8006a40:	1c03      	adds	r3, r0, #0
 8006a42:	1c19      	adds	r1, r3, #0
 8006a44:	1c20      	adds	r0, r4, #0
 8006a46:	f7fa faa3 	bl	8000f90 <__aeabi_fmul>
 8006a4a:	1c03      	adds	r3, r0, #0
 8006a4c:	1c19      	adds	r1, r3, #0
 8006a4e:	20fe      	movs	r0, #254	@ 0xfe
 8006a50:	0580      	lsls	r0, r0, #22
 8006a52:	f7fa f8cf 	bl	8000bf4 <__aeabi_fdiv>
 8006a56:	1c03      	adds	r3, r0, #0
 8006a58:	2288      	movs	r2, #136	@ 0x88
 8006a5a:	18b9      	adds	r1, r7, r2
 8006a5c:	600b      	str	r3, [r1, #0]

    return calc_gas_res;
 8006a5e:	18bb      	adds	r3, r7, r2
 8006a60:	681b      	ldr	r3, [r3, #0]
}
 8006a62:	1c18      	adds	r0, r3, #0
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b029      	add	sp, #164	@ 0xa4
 8006a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	080148e8 	.word	0x080148e8
 8006a70:	08014928 	.word	0x08014928
 8006a74:	40a00000 	.word	0x40a00000
 8006a78:	44a78000 	.word	0x44a78000
 8006a7c:	42c80000 	.word	0x42c80000
 8006a80:	340637bd 	.word	0x340637bd

08006a84 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	0002      	movs	r2, r0
 8006a8c:	1dbb      	adds	r3, r7, #6
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	1d7b      	adds	r3, r7, #5
 8006a92:	1c0a      	adds	r2, r1, #0
 8006a94:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8006a96:	1d7b      	adds	r3, r7, #5
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2280      	movs	r2, #128	@ 0x80
 8006a9c:	02d2      	lsls	r2, r2, #11
 8006a9e:	40da      	lsrs	r2, r3
 8006aa0:	0013      	movs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8006aa4:	1dbb      	adds	r3, r7, #6
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	4a13      	ldr	r2, [pc, #76]	@ (8006af8 <calc_gas_resistance_high+0x74>)
 8006aaa:	4694      	mov	ip, r2
 8006aac:	4463      	add	r3, ip
 8006aae:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	0013      	movs	r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	189b      	adds	r3, r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2280      	movs	r2, #128	@ 0x80
 8006abe:	0152      	lsls	r2, r2, #5
 8006ac0:	4694      	mov	ip, r2
 8006ac2:	4463      	add	r3, ip
 8006ac4:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8006ac6:	6978      	ldr	r0, [r7, #20]
 8006ac8:	f7fa fe90 	bl	80017ec <__aeabi_ui2f>
 8006acc:	1c03      	adds	r3, r0, #0
 8006ace:	490b      	ldr	r1, [pc, #44]	@ (8006afc <calc_gas_resistance_high+0x78>)
 8006ad0:	1c18      	adds	r0, r3, #0
 8006ad2:	f7fa fa5d 	bl	8000f90 <__aeabi_fmul>
 8006ad6:	1c03      	adds	r3, r0, #0
 8006ad8:	1c1c      	adds	r4, r3, #0
 8006ada:	6938      	ldr	r0, [r7, #16]
 8006adc:	f7fa fe36 	bl	800174c <__aeabi_i2f>
 8006ae0:	1c03      	adds	r3, r0, #0
 8006ae2:	1c19      	adds	r1, r3, #0
 8006ae4:	1c20      	adds	r0, r4, #0
 8006ae6:	f7fa f885 	bl	8000bf4 <__aeabi_fdiv>
 8006aea:	1c03      	adds	r3, r0, #0
 8006aec:	60fb      	str	r3, [r7, #12]

    return calc_gas_res;
 8006aee:	68fb      	ldr	r3, [r7, #12]
}
 8006af0:	1c18      	adds	r0, r3, #0
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b007      	add	sp, #28
 8006af6:	bd90      	pop	{r4, r7, pc}
 8006af8:	fffffe00 	.word	0xfffffe00
 8006afc:	49742400 	.word	0x49742400

08006b00 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8006b00:	b5b0      	push	{r4, r5, r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	0002      	movs	r2, r0
 8006b08:	6039      	str	r1, [r7, #0]
 8006b0a:	1dbb      	adds	r3, r7, #6
 8006b0c:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8006b0e:	1dbb      	adds	r3, r7, #6
 8006b10:	881a      	ldrh	r2, [r3, #0]
 8006b12:	23c8      	movs	r3, #200	@ 0xc8
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d903      	bls.n	8006b22 <calc_res_heat+0x22>
    {
        temp = 400;
 8006b1a:	1dbb      	adds	r3, r7, #6
 8006b1c:	22c8      	movs	r2, #200	@ 0xc8
 8006b1e:	0052      	lsls	r2, r2, #1
 8006b20:	801a      	strh	r2, [r3, #0]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	7e5b      	ldrb	r3, [r3, #25]
 8006b26:	b25b      	sxtb	r3, r3
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7fa fe0f 	bl	800174c <__aeabi_i2f>
 8006b2e:	1c03      	adds	r3, r0, #0
 8006b30:	2183      	movs	r1, #131	@ 0x83
 8006b32:	05c9      	lsls	r1, r1, #23
 8006b34:	1c18      	adds	r0, r3, #0
 8006b36:	f7fa f85d 	bl	8000bf4 <__aeabi_fdiv>
 8006b3a:	1c03      	adds	r3, r0, #0
 8006b3c:	4950      	ldr	r1, [pc, #320]	@ (8006c80 <calc_res_heat+0x180>)
 8006b3e:	1c18      	adds	r0, r3, #0
 8006b40:	f7f9 fe66 	bl	8000810 <__aeabi_fadd>
 8006b44:	1c03      	adds	r3, r0, #0
 8006b46:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	221a      	movs	r2, #26
 8006b4c:	5e9b      	ldrsh	r3, [r3, r2]
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7fa fdfc 	bl	800174c <__aeabi_i2f>
 8006b54:	1c03      	adds	r3, r0, #0
 8006b56:	218e      	movs	r1, #142	@ 0x8e
 8006b58:	05c9      	lsls	r1, r1, #23
 8006b5a:	1c18      	adds	r0, r3, #0
 8006b5c:	f7fa f84a 	bl	8000bf4 <__aeabi_fdiv>
 8006b60:	1c03      	adds	r3, r0, #0
 8006b62:	4948      	ldr	r1, [pc, #288]	@ (8006c84 <calc_res_heat+0x184>)
 8006b64:	1c18      	adds	r0, r3, #0
 8006b66:	f7fa fa13 	bl	8000f90 <__aeabi_fmul>
 8006b6a:	1c03      	adds	r3, r0, #0
 8006b6c:	4946      	ldr	r1, [pc, #280]	@ (8006c88 <calc_res_heat+0x188>)
 8006b6e:	1c18      	adds	r0, r3, #0
 8006b70:	f7f9 fe4e 	bl	8000810 <__aeabi_fadd>
 8006b74:	1c03      	adds	r3, r0, #0
 8006b76:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	7f1b      	ldrb	r3, [r3, #28]
 8006b7c:	b25b      	sxtb	r3, r3
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f7fa fde4 	bl	800174c <__aeabi_i2f>
 8006b84:	1c03      	adds	r3, r0, #0
 8006b86:	2189      	movs	r1, #137	@ 0x89
 8006b88:	05c9      	lsls	r1, r1, #23
 8006b8a:	1c18      	adds	r0, r3, #0
 8006b8c:	f7fa f832 	bl	8000bf4 <__aeabi_fdiv>
 8006b90:	1c03      	adds	r3, r0, #0
 8006b92:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8006b94:	1dbb      	adds	r3, r7, #6
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7fa fe27 	bl	80017ec <__aeabi_ui2f>
 8006b9e:	1c03      	adds	r3, r0, #0
 8006ba0:	69b9      	ldr	r1, [r7, #24]
 8006ba2:	1c18      	adds	r0, r3, #0
 8006ba4:	f7fa f9f4 	bl	8000f90 <__aeabi_fmul>
 8006ba8:	1c03      	adds	r3, r0, #0
 8006baa:	21fe      	movs	r1, #254	@ 0xfe
 8006bac:	0589      	lsls	r1, r1, #22
 8006bae:	1c18      	adds	r0, r3, #0
 8006bb0:	f7f9 fe2e 	bl	8000810 <__aeabi_fadd>
 8006bb4:	1c03      	adds	r3, r0, #0
 8006bb6:	1c19      	adds	r1, r3, #0
 8006bb8:	69f8      	ldr	r0, [r7, #28]
 8006bba:	f7fa f9e9 	bl	8000f90 <__aeabi_fmul>
 8006bbe:	1c03      	adds	r3, r0, #0
 8006bc0:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	7b9b      	ldrb	r3, [r3, #14]
 8006bc6:	b25b      	sxtb	r3, r3
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f7fa fdbf 	bl	800174c <__aeabi_i2f>
 8006bce:	1c03      	adds	r3, r0, #0
 8006bd0:	6979      	ldr	r1, [r7, #20]
 8006bd2:	1c18      	adds	r0, r3, #0
 8006bd4:	f7fa f9dc 	bl	8000f90 <__aeabi_fmul>
 8006bd8:	1c03      	adds	r3, r0, #0
 8006bda:	1c19      	adds	r1, r3, #0
 8006bdc:	6938      	ldr	r0, [r7, #16]
 8006bde:	f7f9 fe17 	bl	8000810 <__aeabi_fadd>
 8006be2:	1c03      	adds	r3, r0, #0
 8006be4:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	223c      	movs	r2, #60	@ 0x3c
 8006bea:	5c9b      	ldrb	r3, [r3, r2]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f7fa fdfd 	bl	80017ec <__aeabi_ui2f>
 8006bf2:	1c03      	adds	r3, r0, #0
 8006bf4:	2181      	movs	r1, #129	@ 0x81
 8006bf6:	05c9      	lsls	r1, r1, #23
 8006bf8:	1c18      	adds	r0, r3, #0
 8006bfa:	f7f9 fe09 	bl	8000810 <__aeabi_fadd>
 8006bfe:	1c03      	adds	r3, r0, #0
 8006c00:	1c19      	adds	r1, r3, #0
 8006c02:	2081      	movs	r0, #129	@ 0x81
 8006c04:	05c0      	lsls	r0, r0, #23
 8006c06:	f7f9 fff5 	bl	8000bf4 <__aeabi_fdiv>
 8006c0a:	1c03      	adds	r3, r0, #0
 8006c0c:	68f9      	ldr	r1, [r7, #12]
 8006c0e:	1c18      	adds	r0, r3, #0
 8006c10:	f7fa f9be 	bl	8000f90 <__aeabi_fmul>
 8006c14:	1c03      	adds	r3, r0, #0
 8006c16:	1c1c      	adds	r4, r3, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	223d      	movs	r2, #61	@ 0x3d
 8006c1c:	569b      	ldrsb	r3, [r3, r2]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f7fa fd94 	bl	800174c <__aeabi_i2f>
 8006c24:	1c03      	adds	r3, r0, #0
 8006c26:	4919      	ldr	r1, [pc, #100]	@ (8006c8c <calc_res_heat+0x18c>)
 8006c28:	1c18      	adds	r0, r3, #0
 8006c2a:	f7fa f9b1 	bl	8000f90 <__aeabi_fmul>
 8006c2e:	1c03      	adds	r3, r0, #0
 8006c30:	21fe      	movs	r1, #254	@ 0xfe
 8006c32:	0589      	lsls	r1, r1, #22
 8006c34:	1c18      	adds	r0, r3, #0
 8006c36:	f7f9 fdeb 	bl	8000810 <__aeabi_fadd>
 8006c3a:	1c03      	adds	r3, r0, #0
 8006c3c:	1c19      	adds	r1, r3, #0
 8006c3e:	20fe      	movs	r0, #254	@ 0xfe
 8006c40:	0580      	lsls	r0, r0, #22
 8006c42:	f7f9 ffd7 	bl	8000bf4 <__aeabi_fdiv>
 8006c46:	1c03      	adds	r3, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8006c48:	1c19      	adds	r1, r3, #0
 8006c4a:	1c20      	adds	r0, r4, #0
 8006c4c:	f7fa f9a0 	bl	8000f90 <__aeabi_fmul>
 8006c50:	1c03      	adds	r3, r0, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8006c52:	490f      	ldr	r1, [pc, #60]	@ (8006c90 <calc_res_heat+0x190>)
 8006c54:	1c18      	adds	r0, r3, #0
 8006c56:	f7fa faf5 	bl	8001244 <__aeabi_fsub>
 8006c5a:	1c03      	adds	r3, r0, #0
        (uint8_t)(3.4f *
 8006c5c:	490d      	ldr	r1, [pc, #52]	@ (8006c94 <calc_res_heat+0x194>)
 8006c5e:	1c18      	adds	r0, r3, #0
 8006c60:	f7fa f996 	bl	8000f90 <__aeabi_fmul>
 8006c64:	1c03      	adds	r3, r0, #0
    res_heat =
 8006c66:	250b      	movs	r5, #11
 8006c68:	197c      	adds	r4, r7, r5
 8006c6a:	1c18      	adds	r0, r3, #0
 8006c6c:	f7f9 fc7e 	bl	800056c <__aeabi_f2uiz>
 8006c70:	0003      	movs	r3, r0
 8006c72:	7023      	strb	r3, [r4, #0]
                   25));

    return res_heat;
 8006c74:	197b      	adds	r3, r7, r5
 8006c76:	781b      	ldrb	r3, [r3, #0]
}
 8006c78:	0018      	movs	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b008      	add	sp, #32
 8006c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c80:	42440000 	.word	0x42440000
 8006c84:	3a03126f 	.word	0x3a03126f
 8006c88:	3b1a0275 	.word	0x3b1a0275
 8006c8c:	3b03126f 	.word	0x3b03126f
 8006c90:	41c80000 	.word	0x41c80000
 8006c94:	4059999a 	.word	0x4059999a

08006c98 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	0002      	movs	r2, r0
 8006ca0:	1dbb      	adds	r3, r7, #6
 8006ca2:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8006ca4:	230f      	movs	r3, #15
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
    uint8_t durval;

    if (dur >= 0xfc0)
 8006cac:	1dbb      	adds	r3, r7, #6
 8006cae:	881a      	ldrh	r2, [r3, #0]
 8006cb0:	23fc      	movs	r3, #252	@ 0xfc
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d30f      	bcc.n	8006cd8 <calc_gas_wait+0x40>
    {
        durval = 0xff; /* Max duration*/
 8006cb8:	230e      	movs	r3, #14
 8006cba:	18fb      	adds	r3, r7, r3
 8006cbc:	22ff      	movs	r2, #255	@ 0xff
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	e01a      	b.n	8006cf8 <calc_gas_wait+0x60>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8006cc2:	1dbb      	adds	r3, r7, #6
 8006cc4:	1dba      	adds	r2, r7, #6
 8006cc6:	8812      	ldrh	r2, [r2, #0]
 8006cc8:	0892      	lsrs	r2, r2, #2
 8006cca:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8006ccc:	220f      	movs	r2, #15
 8006cce:	18bb      	adds	r3, r7, r2
 8006cd0:	18ba      	adds	r2, r7, r2
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	3201      	adds	r2, #1
 8006cd6:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8006cd8:	1dbb      	adds	r3, r7, #6
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8006cde:	d8f0      	bhi.n	8006cc2 <calc_gas_wait+0x2a>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8006ce0:	1dbb      	adds	r3, r7, #6
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b2d9      	uxtb	r1, r3
 8006ce6:	230f      	movs	r3, #15
 8006ce8:	18fb      	adds	r3, r7, r3
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	019b      	lsls	r3, r3, #6
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	230e      	movs	r3, #14
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	188a      	adds	r2, r1, r2
 8006cf6:	701a      	strb	r2, [r3, #0]
    }

    return durval;
 8006cf8:	230e      	movs	r3, #14
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	781b      	ldrb	r3, [r3, #0]
}
 8006cfe:	0018      	movs	r0, r3
 8006d00:	46bd      	mov	sp, r7
 8006d02:	b004      	add	sp, #16
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8006d08:	b5b0      	push	{r4, r5, r7, lr}
 8006d0a:	b08e      	sub	sp, #56	@ 0x38
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	230f      	movs	r3, #15
 8006d14:	18fb      	adds	r3, r7, r3
 8006d16:	1c02      	adds	r2, r0, #0
 8006d18:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8006d1a:	2337      	movs	r3, #55	@ 0x37
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	2200      	movs	r2, #0
 8006d20:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8006d22:	2310      	movs	r3, #16
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	0018      	movs	r0, r3
 8006d28:	2311      	movs	r3, #17
 8006d2a:	001a      	movs	r2, r3
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	f00a f9a9 	bl	8011084 <memset>
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8006d32:	2336      	movs	r3, #54	@ 0x36
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	2205      	movs	r2, #5
 8006d38:	701a      	strb	r2, [r3, #0]

    while ((tries) && (rslt == BME68X_OK))
 8006d3a:	e14e      	b.n	8006fda <read_field_data+0x2d2>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8006d3c:	230f      	movs	r3, #15
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	1c1a      	adds	r2, r3, #0
 8006d44:	0112      	lsls	r2, r2, #4
 8006d46:	18d3      	adds	r3, r2, r3
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	331d      	adds	r3, #29
 8006d4c:	b2d8      	uxtb	r0, r3
 8006d4e:	2537      	movs	r5, #55	@ 0x37
 8006d50:	197c      	adds	r4, r7, r5
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2210      	movs	r2, #16
 8006d56:	18b9      	adds	r1, r7, r2
 8006d58:	2211      	movs	r2, #17
 8006d5a:	f7fe fdef 	bl	800593c <bme68x_get_regs>
 8006d5e:	0003      	movs	r3, r0
 8006d60:	7023      	strb	r3, [r4, #0]
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <read_field_data+0x68>
        {
            rslt = BME68X_E_NULL_PTR;
 8006d68:	197b      	adds	r3, r7, r5
 8006d6a:	22ff      	movs	r2, #255	@ 0xff
 8006d6c:	701a      	strb	r2, [r3, #0]
            break;
 8006d6e:	e140      	b.n	8006ff2 <read_field_data+0x2ea>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8006d70:	2010      	movs	r0, #16
 8006d72:	183b      	adds	r3, r7, r0
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	227f      	movs	r2, #127	@ 0x7f
 8006d78:	4393      	bics	r3, r2
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8006d80:	183b      	adds	r3, r7, r0
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	220f      	movs	r2, #15
 8006d86:	4013      	ands	r3, r2
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8006d8e:	183b      	adds	r3, r7, r0
 8006d90:	785a      	ldrb	r2, [r3, #1]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8006d96:	183b      	adds	r3, r7, r0
 8006d98:	789b      	ldrb	r3, [r3, #2]
 8006d9a:	031a      	lsls	r2, r3, #12
 8006d9c:	183b      	adds	r3, r7, r0
 8006d9e:	78db      	ldrb	r3, [r3, #3]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	4313      	orrs	r3, r2
 8006da4:	183a      	adds	r2, r7, r0
 8006da6:	7912      	ldrb	r2, [r2, #4]
 8006da8:	0912      	lsrs	r2, r2, #4
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	4313      	orrs	r3, r2
 8006dae:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8006db0:	183b      	adds	r3, r7, r0
 8006db2:	795b      	ldrb	r3, [r3, #5]
 8006db4:	031a      	lsls	r2, r3, #12
 8006db6:	183b      	adds	r3, r7, r0
 8006db8:	799b      	ldrb	r3, [r3, #6]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	183a      	adds	r2, r7, r0
 8006dc0:	79d2      	ldrb	r2, [r2, #7]
 8006dc2:	0912      	lsrs	r2, r2, #4
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8006dca:	183b      	adds	r3, r7, r0
 8006dcc:	7a1b      	ldrb	r3, [r3, #8]
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	183b      	adds	r3, r7, r0
 8006dd4:	7a5b      	ldrb	r3, [r3, #9]
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	232a      	movs	r3, #42	@ 0x2a
 8006dda:	18fb      	adds	r3, r7, r3
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8006de0:	183b      	adds	r3, r7, r0
 8006de2:	7b5b      	ldrb	r3, [r3, #13]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	183b      	adds	r3, r7, r0
 8006dea:	7b9b      	ldrb	r3, [r3, #14]
 8006dec:	099b      	lsrs	r3, r3, #6
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	0019      	movs	r1, r3
 8006df2:	2328      	movs	r3, #40	@ 0x28
 8006df4:	18fb      	adds	r3, r7, r3
 8006df6:	430a      	orrs	r2, r1
 8006df8:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8006dfa:	183b      	adds	r3, r7, r0
 8006dfc:	7bdb      	ldrb	r3, [r3, #15]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	183b      	adds	r3, r7, r0
 8006e04:	7c1b      	ldrb	r3, [r3, #16]
 8006e06:	099b      	lsrs	r3, r3, #6
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	0019      	movs	r1, r3
 8006e0c:	2326      	movs	r3, #38	@ 0x26
 8006e0e:	18fb      	adds	r3, r7, r3
 8006e10:	430a      	orrs	r2, r1
 8006e12:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8006e14:	183b      	adds	r3, r7, r0
 8006e16:	7b9a      	ldrb	r2, [r3, #14]
 8006e18:	2325      	movs	r3, #37	@ 0x25
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	210f      	movs	r1, #15
 8006e1e:	400a      	ands	r2, r1
 8006e20:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8006e22:	183b      	adds	r3, r7, r0
 8006e24:	7c1a      	ldrb	r2, [r3, #16]
 8006e26:	2324      	movs	r3, #36	@ 0x24
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	210f      	movs	r1, #15
 8006e2c:	400a      	ands	r2, r1
 8006e2e:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d11c      	bne.n	8006e72 <read_field_data+0x16a>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b25a      	sxtb	r2, r3
 8006e3e:	183b      	adds	r3, r7, r0
 8006e40:	7c1b      	ldrb	r3, [r3, #16]
 8006e42:	b25b      	sxtb	r3, r3
 8006e44:	2120      	movs	r1, #32
 8006e46:	400b      	ands	r3, r1
 8006e48:	b25b      	sxtb	r3, r3
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	b25a      	sxtb	r2, r3
 8006e5a:	183b      	adds	r3, r7, r0
 8006e5c:	7c1b      	ldrb	r3, [r3, #16]
 8006e5e:	b25b      	sxtb	r3, r3
 8006e60:	2110      	movs	r1, #16
 8006e62:	400b      	ands	r3, r1
 8006e64:	b25b      	sxtb	r3, r3
 8006e66:	4313      	orrs	r3, r2
 8006e68:	b25b      	sxtb	r3, r3
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e01c      	b.n	8006eac <read_field_data+0x1a4>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b25a      	sxtb	r2, r3
 8006e78:	2010      	movs	r0, #16
 8006e7a:	183b      	adds	r3, r7, r0
 8006e7c:	7b9b      	ldrb	r3, [r3, #14]
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	2120      	movs	r1, #32
 8006e82:	400b      	ands	r3, r1
 8006e84:	b25b      	sxtb	r3, r3
 8006e86:	4313      	orrs	r3, r2
 8006e88:	b25b      	sxtb	r3, r3
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b25a      	sxtb	r2, r3
 8006e96:	183b      	adds	r3, r7, r0
 8006e98:	7b9b      	ldrb	r3, [r3, #14]
 8006e9a:	b25b      	sxtb	r3, r3
 8006e9c:	2110      	movs	r1, #16
 8006e9e:	400b      	ands	r3, r1
 8006ea0:	b25b      	sxtb	r3, r3
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	b25b      	sxtb	r3, r3
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	b25b      	sxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	db00      	blt.n	8006eb8 <read_field_data+0x1b0>
 8006eb6:	e07d      	b.n	8006fb4 <read_field_data+0x2ac>
 8006eb8:	2237      	movs	r2, #55	@ 0x37
 8006eba:	18bb      	adds	r3, r7, r2
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	b25b      	sxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d000      	beq.n	8006ec6 <read_field_data+0x1be>
 8006ec4:	e076      	b.n	8006fb4 <read_field_data+0x2ac>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	335a      	adds	r3, #90	@ 0x5a
 8006ecc:	b2d8      	uxtb	r0, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	1cd9      	adds	r1, r3, #3
 8006ed2:	0015      	movs	r5, r2
 8006ed4:	18bc      	adds	r4, r7, r2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f7fe fd2f 	bl	800593c <bme68x_get_regs>
 8006ede:	0003      	movs	r3, r0
 8006ee0:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8006ee2:	002a      	movs	r2, r5
 8006ee4:	18bb      	adds	r3, r7, r2
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	b25b      	sxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10c      	bne.n	8006f08 <read_field_data+0x200>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	3350      	adds	r3, #80	@ 0x50
 8006ef4:	b2d8      	uxtb	r0, r3
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	1d19      	adds	r1, r3, #4
 8006efa:	18bc      	adds	r4, r7, r2
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f7fe fd1c 	bl	800593c <bme68x_get_regs>
 8006f04:	0003      	movs	r3, r0
 8006f06:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8006f08:	2237      	movs	r2, #55	@ 0x37
 8006f0a:	18bb      	adds	r3, r7, r2
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b25b      	sxtb	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10c      	bne.n	8006f2e <read_field_data+0x226>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	3364      	adds	r3, #100	@ 0x64
 8006f1a:	b2d8      	uxtb	r0, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	1d59      	adds	r1, r3, #5
 8006f20:	18bc      	adds	r4, r7, r2
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f7fe fd09 	bl	800593c <bme68x_get_regs>
 8006f2a:	0003      	movs	r3, r0
 8006f2c:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8006f2e:	2337      	movs	r3, #55	@ 0x37
 8006f30:	18fb      	adds	r3, r7, r3
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d13c      	bne.n	8006fb4 <read_field_data+0x2ac>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3e:	0011      	movs	r1, r2
 8006f40:	0018      	movs	r0, r3
 8006f42:	f7ff fa17 	bl	8006374 <calc_temperature>
 8006f46:	1c02      	adds	r2, r0, #0
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	609a      	str	r2, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	0011      	movs	r1, r2
 8006f52:	0018      	movs	r0, r3
 8006f54:	f7ff faa6 	bl	80064a4 <calc_pressure>
 8006f58:	1c02      	adds	r2, r0, #0
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	60da      	str	r2, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	232a      	movs	r3, #42	@ 0x2a
 8006f62:	18fb      	adds	r3, r7, r3
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	0011      	movs	r1, r2
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f7ff fbfb 	bl	8006764 <calc_humidity>
 8006f6e:	1c02      	adds	r2, r0, #0
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	611a      	str	r2, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d10d      	bne.n	8006f98 <read_field_data+0x290>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8006f7c:	2324      	movs	r3, #36	@ 0x24
 8006f7e:	18fb      	adds	r3, r7, r3
 8006f80:	781a      	ldrb	r2, [r3, #0]
 8006f82:	2326      	movs	r3, #38	@ 0x26
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	0011      	movs	r1, r2
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f7ff fd7a 	bl	8006a84 <calc_gas_resistance_high>
 8006f90:	1c02      	adds	r2, r0, #0
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	615a      	str	r2, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8006f96:	e02c      	b.n	8006ff2 <read_field_data+0x2ea>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	2325      	movs	r3, #37	@ 0x25
 8006f9c:	18fb      	adds	r3, r7, r3
 8006f9e:	7819      	ldrb	r1, [r3, #0]
 8006fa0:	2328      	movs	r3, #40	@ 0x28
 8006fa2:	18fb      	adds	r3, r7, r3
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	f7ff fcb8 	bl	800691c <calc_gas_resistance_low>
 8006fac:	1c02      	adds	r2, r0, #0
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	615a      	str	r2, [r3, #20]
                break;
 8006fb2:	e01e      	b.n	8006ff2 <read_field_data+0x2ea>
            }
        }

        if (rslt == BME68X_OK)
 8006fb4:	2337      	movs	r3, #55	@ 0x37
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	b25b      	sxtb	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d106      	bne.n	8006fce <read_field_data+0x2c6>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	480e      	ldr	r0, [pc, #56]	@ (8007004 <read_field_data+0x2fc>)
 8006fca:	0019      	movs	r1, r3
 8006fcc:	4790      	blx	r2
        }

        tries--;
 8006fce:	2136      	movs	r1, #54	@ 0x36
 8006fd0:	187b      	adds	r3, r7, r1
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	187b      	adds	r3, r7, r1
 8006fd6:	3a01      	subs	r2, #1
 8006fd8:	701a      	strb	r2, [r3, #0]
    while ((tries) && (rslt == BME68X_OK))
 8006fda:	2336      	movs	r3, #54	@ 0x36
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <read_field_data+0x2ea>
 8006fe4:	2337      	movs	r3, #55	@ 0x37
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d100      	bne.n	8006ff2 <read_field_data+0x2ea>
 8006ff0:	e6a4      	b.n	8006d3c <read_field_data+0x34>
    }

    return rslt;
 8006ff2:	2337      	movs	r3, #55	@ 0x37
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b25b      	sxtb	r3, r3
}
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b00e      	add	sp, #56	@ 0x38
 8007000:	bdb0      	pop	{r4, r5, r7, pc}
 8007002:	46c0      	nop			@ (mov r8, r8)
 8007004:	00002710 	.word	0x00002710

08007008 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8007008:	b5b0      	push	{r4, r5, r7, lr}
 800700a:	b09c      	sub	sp, #112	@ 0x70
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8007012:	246f      	movs	r4, #111	@ 0x6f
 8007014:	193b      	adds	r3, r7, r4
 8007016:	2200      	movs	r2, #0
 8007018:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800701a:	2328      	movs	r3, #40	@ 0x28
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	0018      	movs	r0, r3
 8007020:	2333      	movs	r3, #51	@ 0x33
 8007022:	001a      	movs	r2, r3
 8007024:	2100      	movs	r1, #0
 8007026:	f00a f82d 	bl	8011084 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 800702a:	2308      	movs	r3, #8
 800702c:	18fb      	adds	r3, r7, r3
 800702e:	0018      	movs	r0, r3
 8007030:	231e      	movs	r3, #30
 8007032:	001a      	movs	r2, r3
 8007034:	2100      	movs	r1, #0
 8007036:	f00a f825 	bl	8011084 <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10c      	bne.n	800705c <read_all_field_data+0x54>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3304      	adds	r3, #4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d107      	bne.n	800705c <read_all_field_data+0x54>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3308      	adds	r3, #8
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d102      	bne.n	800705c <read_all_field_data+0x54>
    {
        rslt = BME68X_E_NULL_PTR;
 8007056:	193b      	adds	r3, r7, r4
 8007058:	22ff      	movs	r2, #255	@ 0xff
 800705a:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BME68X_OK)
 800705c:	226f      	movs	r2, #111	@ 0x6f
 800705e:	18bb      	adds	r3, r7, r2
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	b25b      	sxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d109      	bne.n	800707c <read_all_field_data+0x74>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8007068:	18bc      	adds	r4, r7, r2
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2228      	movs	r2, #40	@ 0x28
 800706e:	18b9      	adds	r1, r7, r2
 8007070:	2233      	movs	r2, #51	@ 0x33
 8007072:	201d      	movs	r0, #29
 8007074:	f7fe fc62 	bl	800593c <bme68x_get_regs>
 8007078:	0003      	movs	r3, r0
 800707a:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 800707c:	226f      	movs	r2, #111	@ 0x6f
 800707e:	18bb      	adds	r3, r7, r2
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	b25b      	sxtb	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d109      	bne.n	800709c <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8007088:	18bc      	adds	r4, r7, r2
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2208      	movs	r2, #8
 800708e:	18b9      	adds	r1, r7, r2
 8007090:	221e      	movs	r2, #30
 8007092:	2050      	movs	r0, #80	@ 0x50
 8007094:	f7fe fc52 	bl	800593c <bme68x_get_regs>
 8007098:	0003      	movs	r3, r0
 800709a:	7023      	strb	r3, [r4, #0]
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800709c:	236e      	movs	r3, #110	@ 0x6e
 800709e:	18fb      	adds	r3, r7, r3
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e1af      	b.n	8007406 <read_all_field_data+0x3fe>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 80070a6:	206d      	movs	r0, #109	@ 0x6d
 80070a8:	183a      	adds	r2, r7, r0
 80070aa:	256e      	movs	r5, #110	@ 0x6e
 80070ac:	197b      	adds	r3, r7, r5
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	1c19      	adds	r1, r3, #0
 80070b2:	0109      	lsls	r1, r1, #4
 80070b4:	18cb      	adds	r3, r1, r3
 80070b6:	7013      	strb	r3, [r2, #0]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 80070b8:	183b      	adds	r3, r7, r0
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2428      	movs	r4, #40	@ 0x28
 80070be:	193a      	adds	r2, r7, r4
 80070c0:	5cd2      	ldrb	r2, [r2, r3]
 80070c2:	197b      	adds	r3, r7, r5
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	18cb      	adds	r3, r1, r3
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	217f      	movs	r1, #127	@ 0x7f
 80070d0:	438a      	bics	r2, r1
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 80070d6:	183b      	adds	r3, r7, r0
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	193a      	adds	r2, r7, r4
 80070dc:	5cd2      	ldrb	r2, [r2, r3]
 80070de:	197b      	adds	r3, r7, r5
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	18cb      	adds	r3, r1, r3
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	210f      	movs	r1, #15
 80070ec:	400a      	ands	r2, r1
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 80070f2:	183b      	adds	r3, r7, r0
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	197b      	adds	r3, r7, r5
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	18cb      	adds	r3, r1, r3
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	1939      	adds	r1, r7, r4
 8007106:	5c8a      	ldrb	r2, [r1, r2]
 8007108:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 800710a:	183b      	adds	r3, r7, r0
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	3302      	adds	r3, #2
 8007110:	193a      	adds	r2, r7, r4
 8007112:	5cd3      	ldrb	r3, [r2, r3]
 8007114:	031a      	lsls	r2, r3, #12
 8007116:	183b      	adds	r3, r7, r0
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	3303      	adds	r3, #3
 800711c:	1939      	adds	r1, r7, r4
 800711e:	5ccb      	ldrb	r3, [r1, r3]
 8007120:	011b      	lsls	r3, r3, #4
 8007122:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8007124:	183a      	adds	r2, r7, r0
 8007126:	7812      	ldrb	r2, [r2, #0]
 8007128:	3204      	adds	r2, #4
 800712a:	1939      	adds	r1, r7, r4
 800712c:	5c8a      	ldrb	r2, [r1, r2]
 800712e:	0912      	lsrs	r2, r2, #4
 8007130:	b2d2      	uxtb	r2, r2
        adc_pres =
 8007132:	4313      	orrs	r3, r2
 8007134:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8007136:	183b      	adds	r3, r7, r0
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	3305      	adds	r3, #5
 800713c:	193a      	adds	r2, r7, r4
 800713e:	5cd3      	ldrb	r3, [r2, r3]
 8007140:	031a      	lsls	r2, r3, #12
 8007142:	183b      	adds	r3, r7, r0
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	3306      	adds	r3, #6
 8007148:	1939      	adds	r1, r7, r4
 800714a:	5ccb      	ldrb	r3, [r1, r3]
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8007150:	183a      	adds	r2, r7, r0
 8007152:	7812      	ldrb	r2, [r2, #0]
 8007154:	3207      	adds	r2, #7
 8007156:	1939      	adds	r1, r7, r4
 8007158:	5c8a      	ldrb	r2, [r1, r2]
 800715a:	0912      	lsrs	r2, r2, #4
 800715c:	b2d2      	uxtb	r2, r2
        adc_temp =
 800715e:	4313      	orrs	r3, r2
 8007160:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8007162:	183b      	adds	r3, r7, r0
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	193a      	adds	r2, r7, r4
 800716a:	5cd3      	ldrb	r3, [r2, r3]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	b29a      	uxth	r2, r3
 8007170:	183b      	adds	r3, r7, r0
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	3309      	adds	r3, #9
 8007176:	1939      	adds	r1, r7, r4
 8007178:	5ccb      	ldrb	r3, [r1, r3]
 800717a:	0019      	movs	r1, r3
 800717c:	2362      	movs	r3, #98	@ 0x62
 800717e:	18fb      	adds	r3, r7, r3
 8007180:	430a      	orrs	r2, r1
 8007182:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8007184:	183b      	adds	r3, r7, r0
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	330d      	adds	r3, #13
 800718a:	193a      	adds	r2, r7, r4
 800718c:	5cd3      	ldrb	r3, [r2, r3]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	b29a      	uxth	r2, r3
 8007192:	183b      	adds	r3, r7, r0
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	330e      	adds	r3, #14
 8007198:	1939      	adds	r1, r7, r4
 800719a:	5ccb      	ldrb	r3, [r1, r3]
 800719c:	099b      	lsrs	r3, r3, #6
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	0019      	movs	r1, r3
 80071a2:	2360      	movs	r3, #96	@ 0x60
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	430a      	orrs	r2, r1
 80071a8:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 80071aa:	183b      	adds	r3, r7, r0
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	330f      	adds	r3, #15
 80071b0:	193a      	adds	r2, r7, r4
 80071b2:	5cd3      	ldrb	r3, [r2, r3]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	183b      	adds	r3, r7, r0
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	3310      	adds	r3, #16
 80071be:	1939      	adds	r1, r7, r4
 80071c0:	5ccb      	ldrb	r3, [r1, r3]
 80071c2:	099b      	lsrs	r3, r3, #6
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	0019      	movs	r1, r3
 80071c8:	235e      	movs	r3, #94	@ 0x5e
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	430a      	orrs	r2, r1
 80071ce:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 80071d0:	183b      	adds	r3, r7, r0
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	330e      	adds	r3, #14
 80071d6:	193a      	adds	r2, r7, r4
 80071d8:	5cd2      	ldrb	r2, [r2, r3]
 80071da:	235d      	movs	r3, #93	@ 0x5d
 80071dc:	18fb      	adds	r3, r7, r3
 80071de:	210f      	movs	r1, #15
 80071e0:	400a      	ands	r2, r1
 80071e2:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 80071e4:	183b      	adds	r3, r7, r0
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	3310      	adds	r3, #16
 80071ea:	193a      	adds	r2, r7, r4
 80071ec:	5cd2      	ldrb	r2, [r2, r3]
 80071ee:	235c      	movs	r3, #92	@ 0x5c
 80071f0:	18fb      	adds	r3, r7, r3
 80071f2:	210f      	movs	r1, #15
 80071f4:	400a      	ands	r2, r1
 80071f6:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d136      	bne.n	800726e <read_all_field_data+0x266>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8007200:	197b      	adds	r3, r7, r5
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	18d3      	adds	r3, r2, r3
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b25a      	sxtb	r2, r3
 8007210:	183b      	adds	r3, r7, r0
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	3310      	adds	r3, #16
 8007216:	1939      	adds	r1, r7, r4
 8007218:	5ccb      	ldrb	r3, [r1, r3]
 800721a:	b25b      	sxtb	r3, r3
 800721c:	2120      	movs	r1, #32
 800721e:	400b      	ands	r3, r1
 8007220:	b25b      	sxtb	r3, r3
 8007222:	4313      	orrs	r3, r2
 8007224:	b259      	sxtb	r1, r3
 8007226:	197b      	adds	r3, r7, r5
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	18d3      	adds	r3, r2, r3
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	b2ca      	uxtb	r2, r1
 8007234:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8007236:	197b      	adds	r3, r7, r5
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	18d3      	adds	r3, r2, r3
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	b25a      	sxtb	r2, r3
 8007246:	183b      	adds	r3, r7, r0
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	3310      	adds	r3, #16
 800724c:	1939      	adds	r1, r7, r4
 800724e:	5ccb      	ldrb	r3, [r1, r3]
 8007250:	b25b      	sxtb	r3, r3
 8007252:	2110      	movs	r1, #16
 8007254:	400b      	ands	r3, r1
 8007256:	b25b      	sxtb	r3, r3
 8007258:	4313      	orrs	r3, r2
 800725a:	b259      	sxtb	r1, r3
 800725c:	197b      	adds	r3, r7, r5
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	18d3      	adds	r3, r2, r3
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	b2ca      	uxtb	r2, r1
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e038      	b.n	80072e0 <read_all_field_data+0x2d8>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 800726e:	206e      	movs	r0, #110	@ 0x6e
 8007270:	183b      	adds	r3, r7, r0
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	18d3      	adds	r3, r2, r3
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	b25a      	sxtb	r2, r3
 8007280:	246d      	movs	r4, #109	@ 0x6d
 8007282:	193b      	adds	r3, r7, r4
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	330e      	adds	r3, #14
 8007288:	2528      	movs	r5, #40	@ 0x28
 800728a:	1979      	adds	r1, r7, r5
 800728c:	5ccb      	ldrb	r3, [r1, r3]
 800728e:	b25b      	sxtb	r3, r3
 8007290:	2120      	movs	r1, #32
 8007292:	400b      	ands	r3, r1
 8007294:	b25b      	sxtb	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b259      	sxtb	r1, r3
 800729a:	183b      	adds	r3, r7, r0
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	18d3      	adds	r3, r2, r3
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	b2ca      	uxtb	r2, r1
 80072a8:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80072aa:	183b      	adds	r3, r7, r0
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	18d3      	adds	r3, r2, r3
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	b25a      	sxtb	r2, r3
 80072ba:	193b      	adds	r3, r7, r4
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	330e      	adds	r3, #14
 80072c0:	1979      	adds	r1, r7, r5
 80072c2:	5ccb      	ldrb	r3, [r1, r3]
 80072c4:	b25b      	sxtb	r3, r3
 80072c6:	2110      	movs	r1, #16
 80072c8:	400b      	ands	r3, r1
 80072ca:	b25b      	sxtb	r3, r3
 80072cc:	4313      	orrs	r3, r2
 80072ce:	b259      	sxtb	r1, r3
 80072d0:	183b      	adds	r3, r7, r0
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	18d3      	adds	r3, r2, r3
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	b2ca      	uxtb	r2, r1
 80072de:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 80072e0:	256e      	movs	r5, #110	@ 0x6e
 80072e2:	197b      	adds	r3, r7, r5
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	18d3      	adds	r3, r2, r3
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	0019      	movs	r1, r3
 80072f2:	197b      	adds	r3, r7, r5
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	18d3      	adds	r3, r2, r3
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2008      	movs	r0, #8
 8007300:	183a      	adds	r2, r7, r0
 8007302:	5c52      	ldrb	r2, [r2, r1]
 8007304:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8007306:	197b      	adds	r3, r7, r5
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	18d3      	adds	r3, r2, r3
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	330a      	adds	r3, #10
 8007316:	001a      	movs	r2, r3
 8007318:	197b      	adds	r3, r7, r5
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	18cb      	adds	r3, r1, r3
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	1839      	adds	r1, r7, r0
 8007326:	5c8a      	ldrb	r2, [r1, r2]
 8007328:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 800732a:	197b      	adds	r3, r7, r5
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	18d3      	adds	r3, r2, r3
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	3314      	adds	r3, #20
 800733a:	001a      	movs	r2, r3
 800733c:	197b      	adds	r3, r7, r5
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	18cb      	adds	r3, r1, r3
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	1839      	adds	r1, r7, r0
 800734a:	5c8a      	ldrb	r2, [r1, r2]
 800734c:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 800734e:	197b      	adds	r3, r7, r5
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	18d3      	adds	r3, r2, r3
 8007358:	681c      	ldr	r4, [r3, #0]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800735e:	0011      	movs	r1, r2
 8007360:	0018      	movs	r0, r3
 8007362:	f7ff f807 	bl	8006374 <calc_temperature>
 8007366:	1c03      	adds	r3, r0, #0
 8007368:	60a3      	str	r3, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 800736a:	197b      	adds	r3, r7, r5
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	18d3      	adds	r3, r2, r3
 8007374:	681c      	ldr	r4, [r3, #0]
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800737a:	0011      	movs	r1, r2
 800737c:	0018      	movs	r0, r3
 800737e:	f7ff f891 	bl	80064a4 <calc_pressure>
 8007382:	1c03      	adds	r3, r0, #0
 8007384:	60e3      	str	r3, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8007386:	197b      	adds	r3, r7, r5
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	18d3      	adds	r3, r2, r3
 8007390:	681c      	ldr	r4, [r3, #0]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	2362      	movs	r3, #98	@ 0x62
 8007396:	18fb      	adds	r3, r7, r3
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	0011      	movs	r1, r2
 800739c:	0018      	movs	r0, r3
 800739e:	f7ff f9e1 	bl	8006764 <calc_humidity>
 80073a2:	1c03      	adds	r3, r0, #0
 80073a4:	6123      	str	r3, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d112      	bne.n	80073d4 <read_all_field_data+0x3cc>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80073ae:	197b      	adds	r3, r7, r5
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	18d3      	adds	r3, r2, r3
 80073b8:	681c      	ldr	r4, [r3, #0]
 80073ba:	235c      	movs	r3, #92	@ 0x5c
 80073bc:	18fb      	adds	r3, r7, r3
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	235e      	movs	r3, #94	@ 0x5e
 80073c2:	18fb      	adds	r3, r7, r3
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	0011      	movs	r1, r2
 80073c8:	0018      	movs	r0, r3
 80073ca:	f7ff fb5b 	bl	8006a84 <calc_gas_resistance_high>
 80073ce:	1c03      	adds	r3, r0, #0
 80073d0:	6163      	str	r3, [r4, #20]
 80073d2:	e012      	b.n	80073fa <read_all_field_data+0x3f2>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80073d4:	236e      	movs	r3, #110	@ 0x6e
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	18d3      	adds	r3, r2, r3
 80073e0:	681c      	ldr	r4, [r3, #0]
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	235d      	movs	r3, #93	@ 0x5d
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	7819      	ldrb	r1, [r3, #0]
 80073ea:	2360      	movs	r3, #96	@ 0x60
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	0018      	movs	r0, r3
 80073f2:	f7ff fa93 	bl	800691c <calc_gas_resistance_low>
 80073f6:	1c03      	adds	r3, r0, #0
 80073f8:	6163      	str	r3, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80073fa:	216e      	movs	r1, #110	@ 0x6e
 80073fc:	187b      	adds	r3, r7, r1
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	187b      	adds	r3, r7, r1
 8007402:	3201      	adds	r2, #1
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	236e      	movs	r3, #110	@ 0x6e
 8007408:	18fb      	adds	r3, r7, r3
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d806      	bhi.n	800741e <read_all_field_data+0x416>
 8007410:	236f      	movs	r3, #111	@ 0x6f
 8007412:	18fb      	adds	r3, r7, r3
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b25b      	sxtb	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d100      	bne.n	800741e <read_all_field_data+0x416>
 800741c:	e643      	b.n	80070a6 <read_all_field_data+0x9e>
        }
    }

    return rslt;
 800741e:	236f      	movs	r3, #111	@ 0x6f
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	b25b      	sxtb	r3, r3
}
 8007426:	0018      	movs	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	b01c      	add	sp, #112	@ 0x70
 800742c:	bdb0      	pop	{r4, r5, r7, pc}

0800742e <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800742e:	b5b0      	push	{r4, r5, r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	0002      	movs	r2, r0
 8007436:	6039      	str	r1, [r7, #0]
 8007438:	1dfb      	adds	r3, r7, #7
 800743a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800743c:	250f      	movs	r5, #15
 800743e:	197c      	adds	r4, r7, r5
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	0018      	movs	r0, r3
 8007444:	f000 f8e1 	bl	800760a <null_ptr_check>
 8007448:	0003      	movs	r3, r0
 800744a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 800744c:	197b      	adds	r3, r7, r5
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	b25b      	sxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d160      	bne.n	8007518 <set_mem_page+0xea>
    {
        if (reg_addr > 0x7f)
 8007456:	1dfb      	adds	r3, r7, #7
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b25b      	sxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	da04      	bge.n	800746a <set_mem_page+0x3c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8007460:	230e      	movs	r3, #14
 8007462:	18fb      	adds	r3, r7, r3
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	e003      	b.n	8007472 <set_mem_page+0x44>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800746a:	230e      	movs	r3, #14
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	2210      	movs	r2, #16
 8007470:	701a      	strb	r2, [r3, #0]
        }

        if (mem_page != dev->mem_page)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	7b5b      	ldrb	r3, [r3, #13]
 8007476:	210e      	movs	r1, #14
 8007478:	187a      	adds	r2, r7, r1
 800747a:	7812      	ldrb	r2, [r2, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d04b      	beq.n	8007518 <set_mem_page+0xea>
        {
            dev->mem_page = mem_page;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	187a      	adds	r2, r7, r1
 8007484:	7812      	ldrb	r2, [r2, #0]
 8007486:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	220d      	movs	r2, #13
 8007492:	18b9      	adds	r1, r7, r2
 8007494:	2201      	movs	r2, #1
 8007496:	20f3      	movs	r0, #243	@ 0xf3
 8007498:	47a0      	blx	r4
 800749a:	0003      	movs	r3, r0
 800749c:	0019      	movs	r1, r3
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	224c      	movs	r2, #76	@ 0x4c
 80074a2:	5499      	strb	r1, [r3, r2]
            if (dev->intf_rslt != 0)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	224c      	movs	r2, #76	@ 0x4c
 80074a8:	569b      	ldrsb	r3, [r3, r2]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <set_mem_page+0x88>
            {
                rslt = BME68X_E_COM_FAIL;
 80074ae:	230f      	movs	r3, #15
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	22fe      	movs	r2, #254	@ 0xfe
 80074b4:	701a      	strb	r2, [r3, #0]
            }

            if (rslt == BME68X_OK)
 80074b6:	250f      	movs	r5, #15
 80074b8:	197b      	adds	r3, r7, r5
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	b25b      	sxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d12a      	bne.n	8007518 <set_mem_page+0xea>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80074c2:	210d      	movs	r1, #13
 80074c4:	187b      	adds	r3, r7, r1
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2210      	movs	r2, #16
 80074ca:	4393      	bics	r3, r2
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	187b      	adds	r3, r7, r1
 80074d0:	701a      	strb	r2, [r3, #0]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	7b5b      	ldrb	r3, [r3, #13]
 80074d6:	b25b      	sxtb	r3, r3
 80074d8:	2210      	movs	r2, #16
 80074da:	4013      	ands	r3, r2
 80074dc:	b25a      	sxtb	r2, r3
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b25b      	sxtb	r3, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	b25b      	sxtb	r3, r3
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	187b      	adds	r3, r7, r1
 80074ec:	701a      	strb	r2, [r3, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	1879      	adds	r1, r7, r1
 80074f8:	2201      	movs	r2, #1
 80074fa:	2073      	movs	r0, #115	@ 0x73
 80074fc:	47a0      	blx	r4
 80074fe:	0003      	movs	r3, r0
 8007500:	0019      	movs	r1, r3
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	224c      	movs	r2, #76	@ 0x4c
 8007506:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	224c      	movs	r2, #76	@ 0x4c
 800750c:	569b      	ldrsb	r3, [r3, r2]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <set_mem_page+0xea>
                {
                    rslt = BME68X_E_COM_FAIL;
 8007512:	197b      	adds	r3, r7, r5
 8007514:	22fe      	movs	r2, #254	@ 0xfe
 8007516:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 8007518:	230f      	movs	r3, #15
 800751a:	18fb      	adds	r3, r7, r3
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b25b      	sxtb	r3, r3
}
 8007520:	0018      	movs	r0, r3
 8007522:	46bd      	mov	sp, r7
 8007524:	b004      	add	sp, #16
 8007526:	bdb0      	pop	{r4, r5, r7, pc}

08007528 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8007528:	b5b0      	push	{r4, r5, r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8007530:	250f      	movs	r5, #15
 8007532:	197c      	adds	r4, r7, r5
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	0018      	movs	r0, r3
 8007538:	f000 f867 	bl	800760a <null_ptr_check>
 800753c:	0003      	movs	r3, r0
 800753e:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8007540:	197b      	adds	r3, r7, r5
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	b25b      	sxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d11e      	bne.n	8007588 <get_mem_page+0x60>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	220e      	movs	r2, #14
 8007554:	18b9      	adds	r1, r7, r2
 8007556:	2201      	movs	r2, #1
 8007558:	20f3      	movs	r0, #243	@ 0xf3
 800755a:	47a0      	blx	r4
 800755c:	0003      	movs	r3, r0
 800755e:	0019      	movs	r1, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	224c      	movs	r2, #76	@ 0x4c
 8007564:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	224c      	movs	r2, #76	@ 0x4c
 800756a:	569b      	ldrsb	r3, [r3, r2]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <get_mem_page+0x50>
        {
            rslt = BME68X_E_COM_FAIL;
 8007570:	197b      	adds	r3, r7, r5
 8007572:	22fe      	movs	r2, #254	@ 0xfe
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	e007      	b.n	8007588 <get_mem_page+0x60>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8007578:	230e      	movs	r3, #14
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	2210      	movs	r2, #16
 8007580:	4013      	ands	r3, r2
 8007582:	b2da      	uxtb	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8007588:	230f      	movs	r3, #15
 800758a:	18fb      	adds	r3, r7, r3
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b25b      	sxtb	r3, r3
}
 8007590:	0018      	movs	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	b004      	add	sp, #16
 8007596:	bdb0      	pop	{r4, r5, r7, pc}

08007598 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8007598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	250b      	movs	r5, #11
 80075a4:	197b      	adds	r3, r7, r5
 80075a6:	1c0a      	adds	r2, r1, #0
 80075a8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80075aa:	2617      	movs	r6, #23
 80075ac:	19bc      	adds	r4, r7, r6
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 f82a 	bl	800760a <null_ptr_check>
 80075b6:	0003      	movs	r3, r0
 80075b8:	7023      	strb	r3, [r4, #0]
    if ((value != NULL) && (rslt == BME68X_OK))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d018      	beq.n	80075f2 <boundary_check+0x5a>
 80075c0:	19bb      	adds	r3, r7, r6
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b25b      	sxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d113      	bne.n	80075f2 <boundary_check+0x5a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	197a      	adds	r2, r7, r5
 80075d0:	7812      	ldrb	r2, [r2, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d211      	bcs.n	80075fa <boundary_check+0x62>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	197a      	adds	r2, r7, r5
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	224d      	movs	r2, #77	@ 0x4d
 80075e2:	5c9b      	ldrb	r3, [r3, r2]
 80075e4:	2201      	movs	r2, #1
 80075e6:	4313      	orrs	r3, r2
 80075e8:	b2d9      	uxtb	r1, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	224d      	movs	r2, #77	@ 0x4d
 80075ee:	5499      	strb	r1, [r3, r2]
        if (*value > max)
 80075f0:	e003      	b.n	80075fa <boundary_check+0x62>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80075f2:	2317      	movs	r3, #23
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	22ff      	movs	r2, #255	@ 0xff
 80075f8:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80075fa:	2317      	movs	r3, #23
 80075fc:	18fb      	adds	r3, r7, r3
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	b25b      	sxtb	r3, r3
}
 8007602:	0018      	movs	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	b007      	add	sp, #28
 8007608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800760a <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8007612:	230f      	movs	r3, #15
 8007614:	18fb      	adds	r3, r7, r3
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <null_ptr_check+0x2e>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <null_ptr_check+0x2e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <null_ptr_check+0x2e>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <null_ptr_check+0x36>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8007638:	230f      	movs	r3, #15
 800763a:	18fb      	adds	r3, r7, r3
 800763c:	22ff      	movs	r2, #255	@ 0xff
 800763e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8007640:	230f      	movs	r3, #15
 8007642:	18fb      	adds	r3, r7, r3
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b25b      	sxtb	r3, r3
}
 8007648:	0018      	movs	r0, r3
 800764a:	46bd      	mov	sp, r7
 800764c:	b004      	add	sp, #16
 800764e:	bd80      	pop	{r7, pc}

08007650 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8007650:	b5b0      	push	{r4, r5, r7, lr}
 8007652:	b092      	sub	sp, #72	@ 0x48
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	240b      	movs	r4, #11
 800765e:	193b      	adds	r3, r7, r4
 8007660:	1c0a      	adds	r2, r1, #0
 8007662:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8007664:	2347      	movs	r3, #71	@ 0x47
 8007666:	18fb      	adds	r3, r7, r3
 8007668:	2200      	movs	r2, #0
 800766a:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 800766c:	2345      	movs	r3, #69	@ 0x45
 800766e:	18fb      	adds	r3, r7, r3
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8007674:	2343      	movs	r3, #67	@ 0x43
 8007676:	18fb      	adds	r3, r7, r3
 8007678:	226e      	movs	r2, #110	@ 0x6e
 800767a:	701a      	strb	r2, [r3, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800767c:	2338      	movs	r3, #56	@ 0x38
 800767e:	18fb      	adds	r3, r7, r3
 8007680:	0018      	movs	r0, r3
 8007682:	230a      	movs	r3, #10
 8007684:	001a      	movs	r2, r3
 8007686:	2100      	movs	r1, #0
 8007688:	f009 fcfc 	bl	8011084 <memset>
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800768c:	232c      	movs	r3, #44	@ 0x2c
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	0018      	movs	r0, r3
 8007692:	230a      	movs	r3, #10
 8007694:	001a      	movs	r2, r3
 8007696:	2100      	movs	r1, #0
 8007698:	f009 fcf4 	bl	8011084 <memset>
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800769c:	2320      	movs	r3, #32
 800769e:	18fb      	adds	r3, r7, r3
 80076a0:	0018      	movs	r0, r3
 80076a2:	230a      	movs	r3, #10
 80076a4:	001a      	movs	r2, r3
 80076a6:	2100      	movs	r1, #0
 80076a8:	f009 fcec 	bl	8011084 <memset>
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80076ac:	2314      	movs	r3, #20
 80076ae:	18fb      	adds	r3, r7, r3
 80076b0:	0018      	movs	r0, r3
 80076b2:	230a      	movs	r3, #10
 80076b4:	001a      	movs	r2, r3
 80076b6:	2100      	movs	r1, #0
 80076b8:	f009 fce4 	bl	8011084 <memset>

    switch (op_mode)
 80076bc:	193b      	adds	r3, r7, r4
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d02d      	beq.n	8007720 <set_conf+0xd0>
 80076c4:	dd00      	ble.n	80076c8 <set_conf+0x78>
 80076c6:	e10c      	b.n	80078e2 <set_conf+0x292>
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d003      	beq.n	80076d4 <set_conf+0x84>
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d100      	bne.n	80076d2 <set_conf+0x82>
 80076d0:	e088      	b.n	80077e4 <set_conf+0x194>
 80076d2:	e106      	b.n	80078e2 <set_conf+0x292>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80076d4:	2338      	movs	r3, #56	@ 0x38
 80076d6:	18fb      	adds	r3, r7, r3
 80076d8:	225a      	movs	r2, #90	@ 0x5a
 80076da:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	885b      	ldrh	r3, [r3, #2]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	0011      	movs	r1, r2
 80076e4:	0018      	movs	r0, r3
 80076e6:	f7ff fa0b 	bl	8006b00 <calc_res_heat>
 80076ea:	0003      	movs	r3, r0
 80076ec:	001a      	movs	r2, r3
 80076ee:	232c      	movs	r3, #44	@ 0x2c
 80076f0:	18fb      	adds	r3, r7, r3
 80076f2:	701a      	strb	r2, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80076f4:	2320      	movs	r3, #32
 80076f6:	18fb      	adds	r3, r7, r3
 80076f8:	2264      	movs	r2, #100	@ 0x64
 80076fa:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	889b      	ldrh	r3, [r3, #4]
 8007700:	0018      	movs	r0, r3
 8007702:	f7ff fac9 	bl	8006c98 <calc_gas_wait>
 8007706:	0003      	movs	r3, r0
 8007708:	001a      	movs	r2, r3
 800770a:	2314      	movs	r3, #20
 800770c:	18fb      	adds	r3, r7, r3
 800770e:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8007716:	2345      	movs	r3, #69	@ 0x45
 8007718:	18fb      	adds	r3, r7, r3
 800771a:	2201      	movs	r2, #1
 800771c:	701a      	strb	r2, [r3, #0]
            break;
 800771e:	e0e6      	b.n	80078ee <set_conf+0x29e>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <set_conf+0xe0>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d104      	bne.n	800773a <set_conf+0xea>
            {
                rslt = BME68X_E_NULL_PTR;
 8007730:	2347      	movs	r3, #71	@ 0x47
 8007732:	18fb      	adds	r3, r7, r3
 8007734:	22ff      	movs	r2, #255	@ 0xff
 8007736:	701a      	strb	r2, [r3, #0]
                break;
 8007738:	e0d9      	b.n	80078ee <set_conf+0x29e>
            }

            for (i = 0; i < conf->profile_len; i++)
 800773a:	2346      	movs	r3, #70	@ 0x46
 800773c:	18fb      	adds	r3, r7, r3
 800773e:	2200      	movs	r2, #0
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	e03e      	b.n	80077c2 <set_conf+0x172>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8007744:	2046      	movs	r0, #70	@ 0x46
 8007746:	183b      	adds	r3, r7, r0
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	183a      	adds	r2, r7, r0
 800774c:	7812      	ldrb	r2, [r2, #0]
 800774e:	325a      	adds	r2, #90	@ 0x5a
 8007750:	b2d1      	uxtb	r1, r2
 8007752:	2238      	movs	r2, #56	@ 0x38
 8007754:	18ba      	adds	r2, r7, r2
 8007756:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	183b      	adds	r3, r7, r0
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	18d3      	adds	r3, r2, r3
 8007764:	881a      	ldrh	r2, [r3, #0]
 8007766:	0005      	movs	r5, r0
 8007768:	183b      	adds	r3, r7, r0
 800776a:	781c      	ldrb	r4, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	0019      	movs	r1, r3
 8007770:	0010      	movs	r0, r2
 8007772:	f7ff f9c5 	bl	8006b00 <calc_res_heat>
 8007776:	0003      	movs	r3, r0
 8007778:	001a      	movs	r2, r3
 800777a:	232c      	movs	r3, #44	@ 0x2c
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8007780:	0028      	movs	r0, r5
 8007782:	183b      	adds	r3, r7, r0
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	183a      	adds	r2, r7, r0
 8007788:	7812      	ldrb	r2, [r2, #0]
 800778a:	3264      	adds	r2, #100	@ 0x64
 800778c:	b2d1      	uxtb	r1, r2
 800778e:	2220      	movs	r2, #32
 8007790:	18ba      	adds	r2, r7, r2
 8007792:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	183b      	adds	r3, r7, r0
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	18d3      	adds	r3, r2, r3
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	0005      	movs	r5, r0
 80077a4:	183b      	adds	r3, r7, r0
 80077a6:	781c      	ldrb	r4, [r3, #0]
 80077a8:	0010      	movs	r0, r2
 80077aa:	f7ff fa75 	bl	8006c98 <calc_gas_wait>
 80077ae:	0003      	movs	r3, r0
 80077b0:	001a      	movs	r2, r3
 80077b2:	2314      	movs	r3, #20
 80077b4:	18fb      	adds	r3, r7, r3
 80077b6:	551a      	strb	r2, [r3, r4]
            for (i = 0; i < conf->profile_len; i++)
 80077b8:	197b      	adds	r3, r7, r5
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	197b      	adds	r3, r7, r5
 80077be:	3201      	adds	r2, #1
 80077c0:	701a      	strb	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	7c1b      	ldrb	r3, [r3, #16]
 80077c6:	2246      	movs	r2, #70	@ 0x46
 80077c8:	18ba      	adds	r2, r7, r2
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d3b9      	bcc.n	8007744 <set_conf+0xf4>
            }

            (*nb_conv) = conf->profile_len;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	7c1a      	ldrb	r2, [r3, #16]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80077d8:	2345      	movs	r3, #69	@ 0x45
 80077da:	18fb      	adds	r3, r7, r3
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	7c12      	ldrb	r2, [r2, #16]
 80077e0:	701a      	strb	r2, [r3, #0]
            break;
 80077e2:	e084      	b.n	80078ee <set_conf+0x29e>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <set_conf+0x1a4>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <set_conf+0x1ae>
            {
                rslt = BME68X_E_NULL_PTR;
 80077f4:	2347      	movs	r3, #71	@ 0x47
 80077f6:	18fb      	adds	r3, r7, r3
 80077f8:	22ff      	movs	r2, #255	@ 0xff
 80077fa:	701a      	strb	r2, [r3, #0]
                break;
 80077fc:	e077      	b.n	80078ee <set_conf+0x29e>
            }

            if (conf->shared_heatr_dur == 0)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8a5b      	ldrh	r3, [r3, #18]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <set_conf+0x1be>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8007806:	2347      	movs	r3, #71	@ 0x47
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	2203      	movs	r2, #3
 800780c:	701a      	strb	r2, [r3, #0]
            }

            for (i = 0; i < conf->profile_len; i++)
 800780e:	2346      	movs	r3, #70	@ 0x46
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	2200      	movs	r2, #0
 8007814:	701a      	strb	r2, [r3, #0]
 8007816:	e039      	b.n	800788c <set_conf+0x23c>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8007818:	2046      	movs	r0, #70	@ 0x46
 800781a:	183b      	adds	r3, r7, r0
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	183a      	adds	r2, r7, r0
 8007820:	7812      	ldrb	r2, [r2, #0]
 8007822:	325a      	adds	r2, #90	@ 0x5a
 8007824:	b2d1      	uxtb	r1, r2
 8007826:	2238      	movs	r2, #56	@ 0x38
 8007828:	18ba      	adds	r2, r7, r2
 800782a:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	183b      	adds	r3, r7, r0
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	18d3      	adds	r3, r2, r3
 8007838:	881a      	ldrh	r2, [r3, #0]
 800783a:	0005      	movs	r5, r0
 800783c:	183b      	adds	r3, r7, r0
 800783e:	781c      	ldrb	r4, [r3, #0]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	0019      	movs	r1, r3
 8007844:	0010      	movs	r0, r2
 8007846:	f7ff f95b 	bl	8006b00 <calc_res_heat>
 800784a:	0003      	movs	r3, r0
 800784c:	001a      	movs	r2, r3
 800784e:	232c      	movs	r3, #44	@ 0x2c
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8007854:	0028      	movs	r0, r5
 8007856:	183b      	adds	r3, r7, r0
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	183a      	adds	r2, r7, r0
 800785c:	7812      	ldrb	r2, [r2, #0]
 800785e:	3264      	adds	r2, #100	@ 0x64
 8007860:	b2d1      	uxtb	r1, r2
 8007862:	2220      	movs	r2, #32
 8007864:	18ba      	adds	r2, r7, r2
 8007866:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	183b      	adds	r3, r7, r0
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	18d3      	adds	r3, r2, r3
 8007874:	881a      	ldrh	r2, [r3, #0]
 8007876:	183b      	adds	r3, r7, r0
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b2d1      	uxtb	r1, r2
 800787c:	2214      	movs	r2, #20
 800787e:	18ba      	adds	r2, r7, r2
 8007880:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < conf->profile_len; i++)
 8007882:	183b      	adds	r3, r7, r0
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	183b      	adds	r3, r7, r0
 8007888:	3201      	adds	r2, #1
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	7c1b      	ldrb	r3, [r3, #16]
 8007890:	2246      	movs	r2, #70	@ 0x46
 8007892:	18ba      	adds	r2, r7, r2
 8007894:	7812      	ldrb	r2, [r2, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d3be      	bcc.n	8007818 <set_conf+0x1c8>
            }

            (*nb_conv) = conf->profile_len;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	7c1a      	ldrb	r2, [r3, #16]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80078a2:	2345      	movs	r3, #69	@ 0x45
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	7c12      	ldrb	r2, [r2, #16]
 80078aa:	701a      	strb	r2, [r3, #0]
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8a5b      	ldrh	r3, [r3, #18]
 80078b0:	0018      	movs	r0, r3
 80078b2:	f000 f84b 	bl	800794c <calc_heatr_dur_shared>
 80078b6:	0003      	movs	r3, r0
 80078b8:	001a      	movs	r2, r3
 80078ba:	2144      	movs	r1, #68	@ 0x44
 80078bc:	187b      	adds	r3, r7, r1
 80078be:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 80078c0:	2247      	movs	r2, #71	@ 0x47
 80078c2:	18bb      	adds	r3, r7, r2
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	b25b      	sxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <set_conf+0x29c>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 80078cc:	18bc      	adds	r4, r7, r2
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	1879      	adds	r1, r7, r1
 80078d2:	2243      	movs	r2, #67	@ 0x43
 80078d4:	18b8      	adds	r0, r7, r2
 80078d6:	2201      	movs	r2, #1
 80078d8:	f7fd ff83 	bl	80057e2 <bme68x_set_regs>
 80078dc:	0003      	movs	r3, r0
 80078de:	7023      	strb	r3, [r4, #0]
            }

            break;
 80078e0:	e004      	b.n	80078ec <set_conf+0x29c>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 80078e2:	2347      	movs	r3, #71	@ 0x47
 80078e4:	18fb      	adds	r3, r7, r3
 80078e6:	2201      	movs	r2, #1
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e000      	b.n	80078ee <set_conf+0x29e>
            break;
 80078ec:	46c0      	nop			@ (mov r8, r8)
    }

    if (rslt == BME68X_OK)
 80078ee:	2147      	movs	r1, #71	@ 0x47
 80078f0:	187b      	adds	r3, r7, r1
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b25b      	sxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10c      	bne.n	8007914 <set_conf+0x2c4>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 80078fa:	2345      	movs	r3, #69	@ 0x45
 80078fc:	18fb      	adds	r3, r7, r3
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	187c      	adds	r4, r7, r1
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	212c      	movs	r1, #44	@ 0x2c
 8007906:	1879      	adds	r1, r7, r1
 8007908:	2038      	movs	r0, #56	@ 0x38
 800790a:	1838      	adds	r0, r7, r0
 800790c:	f7fd ff69 	bl	80057e2 <bme68x_set_regs>
 8007910:	0003      	movs	r3, r0
 8007912:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8007914:	2147      	movs	r1, #71	@ 0x47
 8007916:	187b      	adds	r3, r7, r1
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b25b      	sxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10c      	bne.n	800793a <set_conf+0x2ea>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8007920:	2345      	movs	r3, #69	@ 0x45
 8007922:	18fb      	adds	r3, r7, r3
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	187c      	adds	r4, r7, r1
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2114      	movs	r1, #20
 800792c:	1879      	adds	r1, r7, r1
 800792e:	2020      	movs	r0, #32
 8007930:	1838      	adds	r0, r7, r0
 8007932:	f7fd ff56 	bl	80057e2 <bme68x_set_regs>
 8007936:	0003      	movs	r3, r0
 8007938:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800793a:	2347      	movs	r3, #71	@ 0x47
 800793c:	18fb      	adds	r3, r7, r3
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b25b      	sxtb	r3, r3
}
 8007942:	0018      	movs	r0, r3
 8007944:	46bd      	mov	sp, r7
 8007946:	b012      	add	sp, #72	@ 0x48
 8007948:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800794c <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	0002      	movs	r2, r0
 8007954:	1dbb      	adds	r3, r7, #6
 8007956:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8007958:	230f      	movs	r3, #15
 800795a:	18fb      	adds	r3, r7, r3
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8007960:	1dbb      	adds	r3, r7, #6
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	4a1e      	ldr	r2, [pc, #120]	@ (80079e0 <calc_heatr_dur_shared+0x94>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d904      	bls.n	8007974 <calc_heatr_dur_shared+0x28>
    {
        heatdurval = 0xff; /* Max duration */
 800796a:	230e      	movs	r3, #14
 800796c:	18fb      	adds	r3, r7, r3
 800796e:	22ff      	movs	r2, #255	@ 0xff
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	e02e      	b.n	80079d2 <calc_heatr_dur_shared+0x86>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8007974:	1dbb      	adds	r3, r7, #6
 8007976:	881a      	ldrh	r2, [r3, #0]
 8007978:	0013      	movs	r3, r2
 800797a:	015b      	lsls	r3, r3, #5
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	189b      	adds	r3, r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	001a      	movs	r2, r3
 8007986:	23de      	movs	r3, #222	@ 0xde
 8007988:	33ff      	adds	r3, #255	@ 0xff
 800798a:	0019      	movs	r1, r3
 800798c:	0010      	movs	r0, r2
 800798e:	f7f8 fbdf 	bl	8000150 <__udivsi3>
 8007992:	0003      	movs	r3, r0
 8007994:	001a      	movs	r2, r3
 8007996:	1dbb      	adds	r3, r7, #6
 8007998:	801a      	strh	r2, [r3, #0]
        while (dur > 0x3F)
 800799a:	e00a      	b.n	80079b2 <calc_heatr_dur_shared+0x66>
        {
            dur = dur >> 2;
 800799c:	1dbb      	adds	r3, r7, #6
 800799e:	1dba      	adds	r2, r7, #6
 80079a0:	8812      	ldrh	r2, [r2, #0]
 80079a2:	0892      	lsrs	r2, r2, #2
 80079a4:	801a      	strh	r2, [r3, #0]
            factor += 1;
 80079a6:	220f      	movs	r2, #15
 80079a8:	18bb      	adds	r3, r7, r2
 80079aa:	18ba      	adds	r2, r7, r2
 80079ac:	7812      	ldrb	r2, [r2, #0]
 80079ae:	3201      	adds	r2, #1
 80079b0:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 80079b2:	1dbb      	adds	r3, r7, #6
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80079b8:	d8f0      	bhi.n	800799c <calc_heatr_dur_shared+0x50>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 80079ba:	1dbb      	adds	r3, r7, #6
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b2d9      	uxtb	r1, r3
 80079c0:	230f      	movs	r3, #15
 80079c2:	18fb      	adds	r3, r7, r3
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	019b      	lsls	r3, r3, #6
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	230e      	movs	r3, #14
 80079cc:	18fb      	adds	r3, r7, r3
 80079ce:	188a      	adds	r2, r1, r2
 80079d0:	701a      	strb	r2, [r3, #0]
    }

    return heatdurval;
 80079d2:	230e      	movs	r3, #14
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	781b      	ldrb	r3, [r3, #0]
}
 80079d8:	0018      	movs	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	b004      	add	sp, #16
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	00000782 	.word	0x00000782

080079e4 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	603a      	str	r2, [r7, #0]
 80079ec:	1dfb      	adds	r3, r7, #7
 80079ee:	1c02      	adds	r2, r0, #0
 80079f0:	701a      	strb	r2, [r3, #0]
 80079f2:	1dbb      	adds	r3, r7, #6
 80079f4:	1c0a      	adds	r2, r1, #0
 80079f6:	701a      	strb	r2, [r3, #0]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 80079f8:	1dfb      	adds	r3, r7, #7
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	18d3      	adds	r3, r2, r3
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	789a      	ldrb	r2, [r3, #2]
 8007a06:	210e      	movs	r1, #14
 8007a08:	187b      	adds	r3, r7, r1
 8007a0a:	801a      	strh	r2, [r3, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8007a0c:	1dbb      	adds	r3, r7, #6
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	18d3      	adds	r3, r2, r3
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	789a      	ldrb	r2, [r3, #2]
 8007a1a:	200c      	movs	r0, #12
 8007a1c:	183b      	adds	r3, r7, r0
 8007a1e:	801a      	strh	r2, [r3, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8007a20:	1dfb      	adds	r3, r7, #7
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	18d3      	adds	r3, r2, r3
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	b25b      	sxtb	r3, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	da2c      	bge.n	8007a8e <sort_sensor_data+0xaa>
 8007a34:	1dbb      	adds	r3, r7, #6
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	18d3      	adds	r3, r2, r3
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	b25b      	sxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da22      	bge.n	8007a8e <sort_sensor_data+0xaa>
    {
        int16_t diff = meas_index2 - meas_index1;
 8007a48:	183b      	adds	r3, r7, r0
 8007a4a:	881a      	ldrh	r2, [r3, #0]
 8007a4c:	187b      	adds	r3, r7, r1
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	210a      	movs	r1, #10
 8007a56:	187b      	adds	r3, r7, r1
 8007a58:	801a      	strh	r2, [r3, #0]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8007a5a:	000a      	movs	r2, r1
 8007a5c:	18bb      	adds	r3, r7, r2
 8007a5e:	2100      	movs	r1, #0
 8007a60:	5e5b      	ldrsh	r3, [r3, r1]
 8007a62:	3302      	adds	r3, #2
 8007a64:	db04      	blt.n	8007a70 <sort_sensor_data+0x8c>
 8007a66:	18bb      	adds	r3, r7, r2
 8007a68:	2200      	movs	r2, #0
 8007a6a:	5e9b      	ldrsh	r3, [r3, r2]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	db05      	blt.n	8007a7c <sort_sensor_data+0x98>
 8007a70:	230a      	movs	r3, #10
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	2200      	movs	r2, #0
 8007a76:	5e9b      	ldrsh	r3, [r3, r2]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	dd1b      	ble.n	8007ab4 <sort_sensor_data+0xd0>
        {
            swap_fields(low_index, high_index, field);
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	1dbb      	adds	r3, r7, #6
 8007a80:	7819      	ldrb	r1, [r3, #0]
 8007a82:	1dfb      	adds	r3, r7, #7
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	0018      	movs	r0, r3
 8007a88:	f000 f819 	bl	8007abe <swap_fields>
    {
 8007a8c:	e012      	b.n	8007ab4 <sort_sensor_data+0xd0>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8007a8e:	1dbb      	adds	r3, r7, #6
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	18d3      	adds	r3, r2, r3
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	b25b      	sxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da09      	bge.n	8007ab6 <sort_sensor_data+0xd2>
    {
        swap_fields(low_index, high_index, field);
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	1dbb      	adds	r3, r7, #6
 8007aa6:	7819      	ldrb	r1, [r3, #0]
 8007aa8:	1dfb      	adds	r3, r7, #7
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	0018      	movs	r0, r3
 8007aae:	f000 f806 	bl	8007abe <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8007ab2:	e000      	b.n	8007ab6 <sort_sensor_data+0xd2>
    {
 8007ab4:	46c0      	nop			@ (mov r8, r8)
}
 8007ab6:	46c0      	nop			@ (mov r8, r8)
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	b004      	add	sp, #16
 8007abc:	bd80      	pop	{r7, pc}

08007abe <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	603a      	str	r2, [r7, #0]
 8007ac6:	1dfb      	adds	r3, r7, #7
 8007ac8:	1c02      	adds	r2, r0, #0
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	1dbb      	adds	r3, r7, #6
 8007ace:	1c0a      	adds	r2, r1, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *temp;

    temp = field[index1];
 8007ad2:	1dfb      	adds	r3, r7, #7
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	18d3      	adds	r3, r2, r3
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8007ae0:	1dbb      	adds	r3, r7, #6
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	18d2      	adds	r2, r2, r3
 8007aea:	1dfb      	adds	r3, r7, #7
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	18cb      	adds	r3, r1, r3
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8007af8:	1dbb      	adds	r3, r7, #6
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	18d3      	adds	r3, r2, r3
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	601a      	str	r2, [r3, #0]
}
 8007b06:	46c0      	nop			@ (mov r8, r8)
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	b004      	add	sp, #16
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8007b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b10:	b08f      	sub	sp, #60	@ 0x3c
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8007b16:	2537      	movs	r5, #55	@ 0x37
 8007b18:	197c      	adds	r4, r7, r5
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	260c      	movs	r6, #12
 8007b1e:	19b9      	adds	r1, r7, r6
 8007b20:	2217      	movs	r2, #23
 8007b22:	208a      	movs	r0, #138	@ 0x8a
 8007b24:	f7fd ff0a 	bl	800593c <bme68x_get_regs>
 8007b28:	0003      	movs	r3, r0
 8007b2a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8007b2c:	197b      	adds	r3, r7, r5
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	b25b      	sxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <get_calib_data+0x40>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8007b36:	197c      	adds	r4, r7, r5
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	19bb      	adds	r3, r7, r6
 8007b3c:	3317      	adds	r3, #23
 8007b3e:	0019      	movs	r1, r3
 8007b40:	0013      	movs	r3, r2
 8007b42:	220e      	movs	r2, #14
 8007b44:	20e1      	movs	r0, #225	@ 0xe1
 8007b46:	f7fd fef9 	bl	800593c <bme68x_get_regs>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8007b4e:	2237      	movs	r2, #55	@ 0x37
 8007b50:	18bb      	adds	r3, r7, r2
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	b25b      	sxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10c      	bne.n	8007b74 <get_calib_data+0x66>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8007b5a:	18bc      	adds	r4, r7, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	230c      	movs	r3, #12
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	3325      	adds	r3, #37	@ 0x25
 8007b64:	0019      	movs	r1, r3
 8007b66:	0013      	movs	r3, r2
 8007b68:	2205      	movs	r2, #5
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	f7fd fee6 	bl	800593c <bme68x_get_regs>
 8007b70:	0003      	movs	r3, r0
 8007b72:	7023      	strb	r3, [r4, #0]
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8007b74:	2337      	movs	r3, #55	@ 0x37
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b25b      	sxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d000      	beq.n	8007b82 <get_calib_data+0x74>
 8007b80:	e0f4      	b.n	8007d6c <get_calib_data+0x25e>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8007b82:	210c      	movs	r1, #12
 8007b84:	187b      	adds	r3, r7, r1
 8007b86:	2220      	movs	r2, #32
 8007b88:	5c9b      	ldrb	r3, [r3, r2]
 8007b8a:	b21b      	sxth	r3, r3
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	b21a      	sxth	r2, r3
 8007b90:	187b      	adds	r3, r7, r1
 8007b92:	7fdb      	ldrb	r3, [r3, #31]
 8007b94:	b21b      	sxth	r3, r3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	b21b      	sxth	r3, r3
 8007b9a:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8007ba0:	187b      	adds	r3, r7, r1
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	b21b      	sxth	r3, r3
 8007ba6:	021b      	lsls	r3, r3, #8
 8007ba8:	b21a      	sxth	r2, r3
 8007baa:	187b      	adds	r3, r7, r1
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b21b      	sxth	r3, r3
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8007bb8:	0008      	movs	r0, r1
 8007bba:	187b      	adds	r3, r7, r1
 8007bbc:	789b      	ldrb	r3, [r3, #2]
 8007bbe:	b259      	sxtb	r1, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2222      	movs	r2, #34	@ 0x22
 8007bc4:	5499      	strb	r1, [r3, r2]

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8007bc6:	0001      	movs	r1, r0
 8007bc8:	187b      	adds	r3, r7, r1
 8007bca:	795b      	ldrb	r3, [r3, #5]
 8007bcc:	b21b      	sxth	r3, r3
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	b21a      	sxth	r2, r3
 8007bd2:	187b      	adds	r3, r7, r1
 8007bd4:	791b      	ldrb	r3, [r3, #4]
 8007bd6:	b21b      	sxth	r3, r3
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	b21b      	sxth	r3, r3
 8007bdc:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8007be2:	187b      	adds	r3, r7, r1
 8007be4:	79db      	ldrb	r3, [r3, #7]
 8007be6:	b21b      	sxth	r3, r3
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	b21a      	sxth	r2, r3
 8007bec:	187b      	adds	r3, r7, r1
 8007bee:	799b      	ldrb	r3, [r3, #6]
 8007bf0:	b21b      	sxth	r3, r3
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8007bfa:	0008      	movs	r0, r1
 8007bfc:	187b      	adds	r3, r7, r1
 8007bfe:	7a1b      	ldrb	r3, [r3, #8]
 8007c00:	b259      	sxtb	r1, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2228      	movs	r2, #40	@ 0x28
 8007c06:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8007c08:	0001      	movs	r1, r0
 8007c0a:	187b      	adds	r3, r7, r1
 8007c0c:	7adb      	ldrb	r3, [r3, #11]
 8007c0e:	b21b      	sxth	r3, r3
 8007c10:	021b      	lsls	r3, r3, #8
 8007c12:	b21a      	sxth	r2, r3
 8007c14:	187b      	adds	r3, r7, r1
 8007c16:	7a9b      	ldrb	r3, [r3, #10]
 8007c18:	b21b      	sxth	r3, r3
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8007c22:	187b      	adds	r3, r7, r1
 8007c24:	7b5b      	ldrb	r3, [r3, #13]
 8007c26:	b21b      	sxth	r3, r3
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	b21a      	sxth	r2, r3
 8007c2c:	187b      	adds	r3, r7, r1
 8007c2e:	7b1b      	ldrb	r3, [r3, #12]
 8007c30:	b21b      	sxth	r3, r3
 8007c32:	4313      	orrs	r3, r2
 8007c34:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8007c3a:	0008      	movs	r0, r1
 8007c3c:	183b      	adds	r3, r7, r0
 8007c3e:	7bdb      	ldrb	r3, [r3, #15]
 8007c40:	b259      	sxtb	r1, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	222e      	movs	r2, #46	@ 0x2e
 8007c46:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8007c48:	183b      	adds	r3, r7, r0
 8007c4a:	7b9b      	ldrb	r3, [r3, #14]
 8007c4c:	b259      	sxtb	r1, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	222f      	movs	r2, #47	@ 0x2f
 8007c52:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8007c54:	183b      	adds	r3, r7, r0
 8007c56:	7cdb      	ldrb	r3, [r3, #19]
 8007c58:	b21b      	sxth	r3, r3
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	b21a      	sxth	r2, r3
 8007c5e:	183b      	adds	r3, r7, r0
 8007c60:	7c9b      	ldrb	r3, [r3, #18]
 8007c62:	b21b      	sxth	r3, r3
 8007c64:	4313      	orrs	r3, r2
 8007c66:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8007c6c:	183b      	adds	r3, r7, r0
 8007c6e:	7d5b      	ldrb	r3, [r3, #21]
 8007c70:	b21b      	sxth	r3, r3
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	b21a      	sxth	r2, r3
 8007c76:	183b      	adds	r3, r7, r0
 8007c78:	7d1b      	ldrb	r3, [r3, #20]
 8007c7a:	b21b      	sxth	r3, r3
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8007c84:	183b      	adds	r3, r7, r0
 8007c86:	7d99      	ldrb	r1, [r3, #22]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2234      	movs	r2, #52	@ 0x34
 8007c8c:	5499      	strb	r1, [r3, r2]

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8007c8e:	183b      	adds	r3, r7, r0
 8007c90:	7e5b      	ldrb	r3, [r3, #25]
 8007c92:	b21b      	sxth	r3, r3
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8007c98:	183b      	adds	r3, r7, r0
 8007c9a:	7e1b      	ldrb	r3, [r3, #24]
 8007c9c:	b21b      	sxth	r3, r3
 8007c9e:	210f      	movs	r1, #15
 8007ca0:	400b      	ands	r3, r1
 8007ca2:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8007cae:	183b      	adds	r3, r7, r0
 8007cb0:	7ddb      	ldrb	r3, [r3, #23]
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	011b      	lsls	r3, r3, #4
 8007cb6:	b21a      	sxth	r2, r3
 8007cb8:	183b      	adds	r3, r7, r0
 8007cba:	7e1b      	ldrb	r3, [r3, #24]
 8007cbc:	091b      	lsrs	r3, r3, #4
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	b21b      	sxth	r3, r3
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	b21b      	sxth	r3, r3
 8007cc6:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8007ccc:	183b      	adds	r3, r7, r0
 8007cce:	7e9b      	ldrb	r3, [r3, #26]
 8007cd0:	b25a      	sxtb	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8007cd6:	183b      	adds	r3, r7, r0
 8007cd8:	7edb      	ldrb	r3, [r3, #27]
 8007cda:	b25a      	sxtb	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8007ce0:	183b      	adds	r3, r7, r0
 8007ce2:	7f1b      	ldrb	r3, [r3, #28]
 8007ce4:	b25a      	sxtb	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8007cea:	183b      	adds	r3, r7, r0
 8007cec:	7f5a      	ldrb	r2, [r3, #29]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8007cf2:	183b      	adds	r3, r7, r0
 8007cf4:	7f9b      	ldrb	r3, [r3, #30]
 8007cf6:	b25a      	sxtb	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8007cfc:	183b      	adds	r3, r7, r0
 8007cfe:	2223      	movs	r2, #35	@ 0x23
 8007d00:	5c9b      	ldrb	r3, [r3, r2]
 8007d02:	b25a      	sxtb	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8007d08:	183b      	adds	r3, r7, r0
 8007d0a:	2222      	movs	r2, #34	@ 0x22
 8007d0c:	5c9b      	ldrb	r3, [r3, r2]
 8007d0e:	b21b      	sxth	r3, r3
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	b21a      	sxth	r2, r3
 8007d14:	183b      	adds	r3, r7, r0
 8007d16:	2121      	movs	r1, #33	@ 0x21
 8007d18:	5c5b      	ldrb	r3, [r3, r1]
 8007d1a:	b21b      	sxth	r3, r3
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8007d24:	183b      	adds	r3, r7, r0
 8007d26:	2224      	movs	r2, #36	@ 0x24
 8007d28:	5c9b      	ldrb	r3, [r3, r2]
 8007d2a:	b25a      	sxtb	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8007d30:	183b      	adds	r3, r7, r0
 8007d32:	2227      	movs	r2, #39	@ 0x27
 8007d34:	5c9b      	ldrb	r3, [r3, r2]
 8007d36:	001a      	movs	r2, r3
 8007d38:	2330      	movs	r3, #48	@ 0x30
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	d500      	bpl.n	8007d40 <get_calib_data+0x232>
 8007d3e:	330f      	adds	r3, #15
 8007d40:	111b      	asrs	r3, r3, #4
 8007d42:	b2d9      	uxtb	r1, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	223c      	movs	r2, #60	@ 0x3c
 8007d48:	5499      	strb	r1, [r3, r2]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8007d4a:	200c      	movs	r0, #12
 8007d4c:	183b      	adds	r3, r7, r0
 8007d4e:	2225      	movs	r2, #37	@ 0x25
 8007d50:	5c9b      	ldrb	r3, [r3, r2]
 8007d52:	b259      	sxtb	r1, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	223d      	movs	r2, #61	@ 0x3d
 8007d58:	5499      	strb	r1, [r3, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8007d5a:	183b      	adds	r3, r7, r0
 8007d5c:	2229      	movs	r2, #41	@ 0x29
 8007d5e:	5c9b      	ldrb	r3, [r3, r2]
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	111b      	asrs	r3, r3, #4
 8007d64:	b259      	sxtb	r1, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	223e      	movs	r2, #62	@ 0x3e
 8007d6a:	5499      	strb	r1, [r3, r2]
    }

    return rslt;
 8007d6c:	2337      	movs	r3, #55	@ 0x37
 8007d6e:	18fb      	adds	r3, r7, r3
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	b25b      	sxtb	r3, r3
}
 8007d74:	0018      	movs	r0, r3
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b00f      	add	sp, #60	@ 0x3c
 8007d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d7c <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8007d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8007d84:	250e      	movs	r5, #14
 8007d86:	197b      	adds	r3, r7, r5
 8007d88:	2200      	movs	r2, #0
 8007d8a:	701a      	strb	r2, [r3, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8007d8c:	260f      	movs	r6, #15
 8007d8e:	19bc      	adds	r4, r7, r6
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	1979      	adds	r1, r7, r5
 8007d94:	2201      	movs	r2, #1
 8007d96:	20f0      	movs	r0, #240	@ 0xf0
 8007d98:	f7fd fdd0 	bl	800593c <bme68x_get_regs>
 8007d9c:	0003      	movs	r3, r0
 8007d9e:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8007da0:	19bb      	adds	r3, r7, r6
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b25b      	sxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <read_variant_id+0x38>
    {
        dev->variant_id = reg_data;
 8007daa:	197b      	adds	r3, r7, r5
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	001a      	movs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8007db4:	230f      	movs	r3, #15
 8007db6:	18fb      	adds	r3, r7, r3
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	b25b      	sxtb	r3, r3
}
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	b005      	add	sp, #20
 8007dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dc4 <command_interface_init>:
static uint8_t system_started = 0;
static uint8_t system_started_usart4 = 0;

// Initialize command interface
void command_interface_init(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
    // Initialize USART2 command interface
    cmd_index = 0;
 8007dc8:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <command_interface_init+0x5c>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	701a      	strb	r2, [r3, #0]
    system_started = 0;
 8007dce:	4b15      	ldr	r3, [pc, #84]	@ (8007e24 <command_interface_init+0x60>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	701a      	strb	r2, [r3, #0]
    memset(cmd_buffer, 0, CMD_BUFFER_SIZE);
 8007dd4:	4b14      	ldr	r3, [pc, #80]	@ (8007e28 <command_interface_init+0x64>)
 8007dd6:	2240      	movs	r2, #64	@ 0x40
 8007dd8:	2100      	movs	r1, #0
 8007dda:	0018      	movs	r0, r3
 8007ddc:	f009 f952 	bl	8011084 <memset>
    
    // Initialize USART4 command interface
    cmd_index_usart4 = 0;
 8007de0:	4b12      	ldr	r3, [pc, #72]	@ (8007e2c <command_interface_init+0x68>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
    system_started_usart4 = 0;
 8007de6:	4b12      	ldr	r3, [pc, #72]	@ (8007e30 <command_interface_init+0x6c>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	701a      	strb	r2, [r3, #0]
    memset(cmd_buffer_usart4, 0, CMD_BUFFER_SIZE);
 8007dec:	4b11      	ldr	r3, [pc, #68]	@ (8007e34 <command_interface_init+0x70>)
 8007dee:	2240      	movs	r2, #64	@ 0x40
 8007df0:	2100      	movs	r1, #0
 8007df2:	0018      	movs	r0, r3
 8007df4:	f009 f946 	bl	8011084 <memset>
    
    // Send welcome message on both UARTs
    command_interface_send_response("IoT Prototype System Ready (USART2)\r\n");
 8007df8:	4b0f      	ldr	r3, [pc, #60]	@ (8007e38 <command_interface_init+0x74>)
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	f000 fb18 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("Type 'start' to begin\r\n");
 8007e00:	4b0e      	ldr	r3, [pc, #56]	@ (8007e3c <command_interface_init+0x78>)
 8007e02:	0018      	movs	r0, r3
 8007e04:	f000 fb14 	bl	8008430 <command_interface_send_response>
    
    command_interface_send_response_usart4("IoT Prototype System Ready (USART4)\r\n");
 8007e08:	4b0d      	ldr	r3, [pc, #52]	@ (8007e40 <command_interface_init+0x7c>)
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	f000 fb26 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("Type 'start' to begin\r\n");
 8007e10:	4b0a      	ldr	r3, [pc, #40]	@ (8007e3c <command_interface_init+0x78>)
 8007e12:	0018      	movs	r0, r3
 8007e14:	f000 fb22 	bl	800845c <command_interface_send_response_usart4>
}
 8007e18:	46c0      	nop			@ (mov r8, r8)
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	200002e0 	.word	0x200002e0
 8007e24:	200002e2 	.word	0x200002e2
 8007e28:	20000260 	.word	0x20000260
 8007e2c:	200002e1 	.word	0x200002e1
 8007e30:	200002e3 	.word	0x200002e3
 8007e34:	200002a0 	.word	0x200002a0
 8007e38:	08014968 	.word	0x08014968
 8007e3c:	08014990 	.word	0x08014990
 8007e40:	080149a8 	.word	0x080149a8

08007e44 <command_interface_process>:

// Process incoming commands
void command_interface_process(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
    uint8_t rx_byte;
    
    // Check if data is available on USART2
    if (HAL_UART_Receive(&huart2, &rx_byte, 1, 10) == HAL_OK) {
 8007e4a:	1df9      	adds	r1, r7, #7
 8007e4c:	486c      	ldr	r0, [pc, #432]	@ (8008000 <command_interface_process+0x1bc>)
 8007e4e:	230a      	movs	r3, #10
 8007e50:	2201      	movs	r2, #1
 8007e52:	f006 fe55 	bl	800eb00 <HAL_UART_Receive>
 8007e56:	1e03      	subs	r3, r0, #0
 8007e58:	d162      	bne.n	8007f20 <command_interface_process+0xdc>
        // Handle backspace
        if (rx_byte == '\b' || rx_byte == 127) {
 8007e5a:	1dfb      	adds	r3, r7, #7
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d003      	beq.n	8007e6a <command_interface_process+0x26>
 8007e62:	1dfb      	adds	r3, r7, #7
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e68:	d114      	bne.n	8007e94 <command_interface_process+0x50>
            if (cmd_index > 0) {
 8007e6a:	4b66      	ldr	r3, [pc, #408]	@ (8008004 <command_interface_process+0x1c0>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d056      	beq.n	8007f20 <command_interface_process+0xdc>
                cmd_index--;
 8007e72:	4b64      	ldr	r3, [pc, #400]	@ (8008004 <command_interface_process+0x1c0>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	4b62      	ldr	r3, [pc, #392]	@ (8008004 <command_interface_process+0x1c0>)
 8007e7c:	701a      	strb	r2, [r3, #0]
                cmd_buffer[cmd_index] = '\0';
 8007e7e:	4b61      	ldr	r3, [pc, #388]	@ (8008004 <command_interface_process+0x1c0>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	001a      	movs	r2, r3
 8007e84:	4b60      	ldr	r3, [pc, #384]	@ (8008008 <command_interface_process+0x1c4>)
 8007e86:	2100      	movs	r1, #0
 8007e88:	5499      	strb	r1, [r3, r2]
                command_interface_send_response("\b \b"); // Backspace, space, backspace
 8007e8a:	4b60      	ldr	r3, [pc, #384]	@ (800800c <command_interface_process+0x1c8>)
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f000 facf 	bl	8008430 <command_interface_send_response>
            if (cmd_index > 0) {
 8007e92:	e045      	b.n	8007f20 <command_interface_process+0xdc>
            }
        }
        // Handle enter key
        else if (rx_byte == '\r' || rx_byte == '\n') {
 8007e94:	1dfb      	adds	r3, r7, #7
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b0d      	cmp	r3, #13
 8007e9a:	d003      	beq.n	8007ea4 <command_interface_process+0x60>
 8007e9c:	1dfb      	adds	r3, r7, #7
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b0a      	cmp	r3, #10
 8007ea2:	d11f      	bne.n	8007ee4 <command_interface_process+0xa0>
            if (cmd_index > 0) {
 8007ea4:	4b57      	ldr	r3, [pc, #348]	@ (8008004 <command_interface_process+0x1c0>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d016      	beq.n	8007eda <command_interface_process+0x96>
                cmd_buffer[cmd_index] = '\0';
 8007eac:	4b55      	ldr	r3, [pc, #340]	@ (8008004 <command_interface_process+0x1c0>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	001a      	movs	r2, r3
 8007eb2:	4b55      	ldr	r3, [pc, #340]	@ (8008008 <command_interface_process+0x1c4>)
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	5499      	strb	r1, [r3, r2]
                command_interface_send_response("\r\n");
 8007eb8:	4b55      	ldr	r3, [pc, #340]	@ (8008010 <command_interface_process+0x1cc>)
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f000 fab8 	bl	8008430 <command_interface_send_response>
                
                // Process command
                command_interface_handle_command(cmd_buffer);
 8007ec0:	4b51      	ldr	r3, [pc, #324]	@ (8008008 <command_interface_process+0x1c4>)
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f000 f932 	bl	800812c <command_interface_handle_command>
                
                // Reset buffer
                cmd_index = 0;
 8007ec8:	4b4e      	ldr	r3, [pc, #312]	@ (8008004 <command_interface_process+0x1c0>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	701a      	strb	r2, [r3, #0]
                memset(cmd_buffer, 0, CMD_BUFFER_SIZE);
 8007ece:	4b4e      	ldr	r3, [pc, #312]	@ (8008008 <command_interface_process+0x1c4>)
 8007ed0:	2240      	movs	r2, #64	@ 0x40
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f009 f8d5 	bl	8011084 <memset>
            }
            command_interface_send_response("> ");
 8007eda:	4b4e      	ldr	r3, [pc, #312]	@ (8008014 <command_interface_process+0x1d0>)
 8007edc:	0018      	movs	r0, r3
 8007ede:	f000 faa7 	bl	8008430 <command_interface_send_response>
 8007ee2:	e01d      	b.n	8007f20 <command_interface_process+0xdc>
        }
        // Handle regular characters
        else if (cmd_index < CMD_BUFFER_SIZE - 1 && rx_byte >= 32 && rx_byte <= 126) {
 8007ee4:	4b47      	ldr	r3, [pc, #284]	@ (8008004 <command_interface_process+0x1c0>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007eea:	d819      	bhi.n	8007f20 <command_interface_process+0xdc>
 8007eec:	1dfb      	adds	r3, r7, #7
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b1f      	cmp	r3, #31
 8007ef2:	d915      	bls.n	8007f20 <command_interface_process+0xdc>
 8007ef4:	1dfb      	adds	r3, r7, #7
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b7e      	cmp	r3, #126	@ 0x7e
 8007efa:	d811      	bhi.n	8007f20 <command_interface_process+0xdc>
            cmd_buffer[cmd_index++] = rx_byte;
 8007efc:	4b41      	ldr	r3, [pc, #260]	@ (8008004 <command_interface_process+0x1c0>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	b2d1      	uxtb	r1, r2
 8007f04:	4a3f      	ldr	r2, [pc, #252]	@ (8008004 <command_interface_process+0x1c0>)
 8007f06:	7011      	strb	r1, [r2, #0]
 8007f08:	001a      	movs	r2, r3
 8007f0a:	1dfb      	adds	r3, r7, #7
 8007f0c:	7819      	ldrb	r1, [r3, #0]
 8007f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8008008 <command_interface_process+0x1c4>)
 8007f10:	5499      	strb	r1, [r3, r2]
            // Echo character back
            HAL_UART_Transmit(&huart2, &rx_byte, 1, HAL_MAX_DELAY);
 8007f12:	2301      	movs	r3, #1
 8007f14:	425b      	negs	r3, r3
 8007f16:	1df9      	adds	r1, r7, #7
 8007f18:	4839      	ldr	r0, [pc, #228]	@ (8008000 <command_interface_process+0x1bc>)
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f006 fd4c 	bl	800e9b8 <HAL_UART_Transmit>
        }
    }
    
    // Check if data is available on USART4
    if (HAL_UART_Receive(&huart4, &rx_byte, 1, 10) == HAL_OK) {
 8007f20:	1df9      	adds	r1, r7, #7
 8007f22:	483d      	ldr	r0, [pc, #244]	@ (8008018 <command_interface_process+0x1d4>)
 8007f24:	230a      	movs	r3, #10
 8007f26:	2201      	movs	r2, #1
 8007f28:	f006 fdea 	bl	800eb00 <HAL_UART_Receive>
 8007f2c:	1e03      	subs	r3, r0, #0
 8007f2e:	d163      	bne.n	8007ff8 <command_interface_process+0x1b4>
        // Handle backspace
        if (rx_byte == '\b' || rx_byte == 127) {
 8007f30:	1dfb      	adds	r3, r7, #7
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d003      	beq.n	8007f40 <command_interface_process+0xfc>
 8007f38:	1dfb      	adds	r3, r7, #7
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f3e:	d114      	bne.n	8007f6a <command_interface_process+0x126>
            if (cmd_index_usart4 > 0) {
 8007f40:	4b36      	ldr	r3, [pc, #216]	@ (800801c <command_interface_process+0x1d8>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d057      	beq.n	8007ff8 <command_interface_process+0x1b4>
                cmd_index_usart4--;
 8007f48:	4b34      	ldr	r3, [pc, #208]	@ (800801c <command_interface_process+0x1d8>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	4b32      	ldr	r3, [pc, #200]	@ (800801c <command_interface_process+0x1d8>)
 8007f52:	701a      	strb	r2, [r3, #0]
                cmd_buffer_usart4[cmd_index_usart4] = '\0';
 8007f54:	4b31      	ldr	r3, [pc, #196]	@ (800801c <command_interface_process+0x1d8>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	001a      	movs	r2, r3
 8007f5a:	4b31      	ldr	r3, [pc, #196]	@ (8008020 <command_interface_process+0x1dc>)
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	5499      	strb	r1, [r3, r2]
                command_interface_send_response_usart4("\b \b"); // Backspace, space, backspace
 8007f60:	4b2a      	ldr	r3, [pc, #168]	@ (800800c <command_interface_process+0x1c8>)
 8007f62:	0018      	movs	r0, r3
 8007f64:	f000 fa7a 	bl	800845c <command_interface_send_response_usart4>
            if (cmd_index_usart4 > 0) {
 8007f68:	e046      	b.n	8007ff8 <command_interface_process+0x1b4>
            }
        }
        // Handle enter key
        else if (rx_byte == '\r' || rx_byte == '\n') {
 8007f6a:	1dfb      	adds	r3, r7, #7
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b0d      	cmp	r3, #13
 8007f70:	d003      	beq.n	8007f7a <command_interface_process+0x136>
 8007f72:	1dfb      	adds	r3, r7, #7
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b0a      	cmp	r3, #10
 8007f78:	d11f      	bne.n	8007fba <command_interface_process+0x176>
            if (cmd_index_usart4 > 0) {
 8007f7a:	4b28      	ldr	r3, [pc, #160]	@ (800801c <command_interface_process+0x1d8>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d016      	beq.n	8007fb0 <command_interface_process+0x16c>
                cmd_buffer_usart4[cmd_index_usart4] = '\0';
 8007f82:	4b26      	ldr	r3, [pc, #152]	@ (800801c <command_interface_process+0x1d8>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	001a      	movs	r2, r3
 8007f88:	4b25      	ldr	r3, [pc, #148]	@ (8008020 <command_interface_process+0x1dc>)
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	5499      	strb	r1, [r3, r2]
                command_interface_send_response_usart4("\r\n");
 8007f8e:	4b20      	ldr	r3, [pc, #128]	@ (8008010 <command_interface_process+0x1cc>)
 8007f90:	0018      	movs	r0, r3
 8007f92:	f000 fa63 	bl	800845c <command_interface_send_response_usart4>
                
                // Process command
                command_interface_handle_command_usart4(cmd_buffer_usart4);
 8007f96:	4b22      	ldr	r3, [pc, #136]	@ (8008020 <command_interface_process+0x1dc>)
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f000 ffbb 	bl	8008f14 <command_interface_handle_command_usart4>
                
                // Reset buffer
                cmd_index_usart4 = 0;
 8007f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800801c <command_interface_process+0x1d8>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	701a      	strb	r2, [r3, #0]
                memset(cmd_buffer_usart4, 0, CMD_BUFFER_SIZE);
 8007fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8008020 <command_interface_process+0x1dc>)
 8007fa6:	2240      	movs	r2, #64	@ 0x40
 8007fa8:	2100      	movs	r1, #0
 8007faa:	0018      	movs	r0, r3
 8007fac:	f009 f86a 	bl	8011084 <memset>
            }
            command_interface_send_response_usart4("> ");
 8007fb0:	4b18      	ldr	r3, [pc, #96]	@ (8008014 <command_interface_process+0x1d0>)
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f000 fa52 	bl	800845c <command_interface_send_response_usart4>
 8007fb8:	e01e      	b.n	8007ff8 <command_interface_process+0x1b4>
        }
        // Handle regular characters
        else if (cmd_index_usart4 < CMD_BUFFER_SIZE - 1 && rx_byte >= 32 && rx_byte <= 126) {
 8007fba:	4b18      	ldr	r3, [pc, #96]	@ (800801c <command_interface_process+0x1d8>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fc0:	d81a      	bhi.n	8007ff8 <command_interface_process+0x1b4>
 8007fc2:	1dfb      	adds	r3, r7, #7
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b1f      	cmp	r3, #31
 8007fc8:	d916      	bls.n	8007ff8 <command_interface_process+0x1b4>
 8007fca:	1dfb      	adds	r3, r7, #7
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	2b7e      	cmp	r3, #126	@ 0x7e
 8007fd0:	d812      	bhi.n	8007ff8 <command_interface_process+0x1b4>
            cmd_buffer_usart4[cmd_index_usart4++] = rx_byte;
 8007fd2:	4b12      	ldr	r3, [pc, #72]	@ (800801c <command_interface_process+0x1d8>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	b2d1      	uxtb	r1, r2
 8007fda:	4a10      	ldr	r2, [pc, #64]	@ (800801c <command_interface_process+0x1d8>)
 8007fdc:	7011      	strb	r1, [r2, #0]
 8007fde:	001a      	movs	r2, r3
 8007fe0:	1dfb      	adds	r3, r7, #7
 8007fe2:	7819      	ldrb	r1, [r3, #0]
 8007fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8008020 <command_interface_process+0x1dc>)
 8007fe6:	5499      	strb	r1, [r3, r2]
            // Echo character back
            HAL_UART_Transmit(&huart4, &rx_byte, 1, HAL_MAX_DELAY);
 8007fe8:	2301      	movs	r3, #1
 8007fea:	425b      	negs	r3, r3
 8007fec:	1df9      	adds	r1, r7, #7
 8007fee:	480a      	ldr	r0, [pc, #40]	@ (8008018 <command_interface_process+0x1d4>)
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f006 fce1 	bl	800e9b8 <HAL_UART_Transmit>
        }
    }
}
 8007ff6:	e7ff      	b.n	8007ff8 <command_interface_process+0x1b4>
 8007ff8:	46c0      	nop			@ (mov r8, r8)
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b002      	add	sp, #8
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	200003a0 	.word	0x200003a0
 8008004:	200002e0 	.word	0x200002e0
 8008008:	20000260 	.word	0x20000260
 800800c:	080149d0 	.word	0x080149d0
 8008010:	080149d4 	.word	0x080149d4
 8008014:	080149d8 	.word	0x080149d8
 8008018:	20000434 	.word	0x20000434
 800801c:	200002e1 	.word	0x200002e1
 8008020:	200002a0 	.word	0x200002a0

08008024 <command_interface_show_help>:

// Show help menu
void command_interface_show_help(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
    command_interface_send_response("\r\n=== Available Commands ===\r\n");
 8008028:	4b2b      	ldr	r3, [pc, #172]	@ (80080d8 <command_interface_show_help+0xb4>)
 800802a:	0018      	movs	r0, r3
 800802c:	f000 fa00 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("Sensor Commands:\r\n");
 8008030:	4b2a      	ldr	r3, [pc, #168]	@ (80080dc <command_interface_show_help+0xb8>)
 8008032:	0018      	movs	r0, r3
 8008034:	f000 f9fc 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  read temperature (rt) - Read temperature from BME680\r\n");
 8008038:	4b29      	ldr	r3, [pc, #164]	@ (80080e0 <command_interface_show_help+0xbc>)
 800803a:	0018      	movs	r0, r3
 800803c:	f000 f9f8 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  read pressure (rp)    - Read pressure from BME680\r\n");
 8008040:	4b28      	ldr	r3, [pc, #160]	@ (80080e4 <command_interface_show_help+0xc0>)
 8008042:	0018      	movs	r0, r3
 8008044:	f000 f9f4 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  read humidity (rh)    - Read humidity from BME680\r\n");
 8008048:	4b27      	ldr	r3, [pc, #156]	@ (80080e8 <command_interface_show_help+0xc4>)
 800804a:	0018      	movs	r0, r3
 800804c:	f000 f9f0 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  test sensor (ts)      - Test BME680 sensor\r\n");
 8008050:	4b26      	ldr	r3, [pc, #152]	@ (80080ec <command_interface_show_help+0xc8>)
 8008052:	0018      	movs	r0, r3
 8008054:	f000 f9ec 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  raw registers (rr)    - Read raw BME680 registers\r\n");
 8008058:	4b25      	ldr	r3, [pc, #148]	@ (80080f0 <command_interface_show_help+0xcc>)
 800805a:	0018      	movs	r0, r3
 800805c:	f000 f9e8 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  raw adc (ra)          - Read raw BME680 ADC values\r\n");
 8008060:	4b24      	ldr	r3, [pc, #144]	@ (80080f4 <command_interface_show_help+0xd0>)
 8008062:	0018      	movs	r0, r3
 8008064:	f000 f9e4 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  calib data (cd)       - Check BME680 calibration data\r\n");
 8008068:	4b23      	ldr	r3, [pc, #140]	@ (80080f8 <command_interface_show_help+0xd4>)
 800806a:	0018      	movs	r0, r3
 800806c:	f000 f9e0 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  scan i2c (si)         - Scan I2C bus for devices\r\n");
 8008070:	4b22      	ldr	r3, [pc, #136]	@ (80080fc <command_interface_show_help+0xd8>)
 8008072:	0018      	movs	r0, r3
 8008074:	f000 f9dc 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  lora broadcast (lb)   - Broadcast sensor data via LoRa\r\n");
 8008078:	4b21      	ldr	r3, [pc, #132]	@ (8008100 <command_interface_show_help+0xdc>)
 800807a:	0018      	movs	r0, r3
 800807c:	f000 f9d8 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  lora config (lc)      - Show LoRa configuration\r\n");
 8008080:	4b20      	ldr	r3, [pc, #128]	@ (8008104 <command_interface_show_help+0xe0>)
 8008082:	0018      	movs	r0, r3
 8008084:	f000 f9d4 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  lora test (lt)        - Test LoRa transmission\r\n");
 8008088:	4b1f      	ldr	r3, [pc, #124]	@ (8008108 <command_interface_show_help+0xe4>)
 800808a:	0018      	movs	r0, r3
 800808c:	f000 f9d0 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("\r\nMath Operations:\r\n");
 8008090:	4b1e      	ldr	r3, [pc, #120]	@ (800810c <command_interface_show_help+0xe8>)
 8008092:	0018      	movs	r0, r3
 8008094:	f000 f9cc 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  sum <num1> <num2>     - Add two numbers\r\n");
 8008098:	4b1d      	ldr	r3, [pc, #116]	@ (8008110 <command_interface_show_help+0xec>)
 800809a:	0018      	movs	r0, r3
 800809c:	f000 f9c8 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  sub <num1> <num2>     - Subtract num2 from num1\r\n");
 80080a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008114 <command_interface_show_help+0xf0>)
 80080a2:	0018      	movs	r0, r3
 80080a4:	f000 f9c4 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  mul <num1> <num2>     - Multiply two numbers\r\n");
 80080a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008118 <command_interface_show_help+0xf4>)
 80080aa:	0018      	movs	r0, r3
 80080ac:	f000 f9c0 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  div <num1> <num2>     - Divide num1 by num2\r\n");
 80080b0:	4b1a      	ldr	r3, [pc, #104]	@ (800811c <command_interface_show_help+0xf8>)
 80080b2:	0018      	movs	r0, r3
 80080b4:	f000 f9bc 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("\r\nSystem:\r\n");
 80080b8:	4b19      	ldr	r3, [pc, #100]	@ (8008120 <command_interface_show_help+0xfc>)
 80080ba:	0018      	movs	r0, r3
 80080bc:	f000 f9b8 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  help                  - Show this help menu\r\n");
 80080c0:	4b18      	ldr	r3, [pc, #96]	@ (8008124 <command_interface_show_help+0x100>)
 80080c2:	0018      	movs	r0, r3
 80080c4:	f000 f9b4 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("========================\r\n");
 80080c8:	4b17      	ldr	r3, [pc, #92]	@ (8008128 <command_interface_show_help+0x104>)
 80080ca:	0018      	movs	r0, r3
 80080cc:	f000 f9b0 	bl	8008430 <command_interface_send_response>
}
 80080d0:	46c0      	nop			@ (mov r8, r8)
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	46c0      	nop			@ (mov r8, r8)
 80080d8:	080149dc 	.word	0x080149dc
 80080dc:	080149fc 	.word	0x080149fc
 80080e0:	08014a10 	.word	0x08014a10
 80080e4:	08014a4c 	.word	0x08014a4c
 80080e8:	08014a84 	.word	0x08014a84
 80080ec:	08014abc 	.word	0x08014abc
 80080f0:	08014aec 	.word	0x08014aec
 80080f4:	08014b24 	.word	0x08014b24
 80080f8:	08014b5c 	.word	0x08014b5c
 80080fc:	08014b98 	.word	0x08014b98
 8008100:	08014bd0 	.word	0x08014bd0
 8008104:	08014c0c 	.word	0x08014c0c
 8008108:	08014c40 	.word	0x08014c40
 800810c:	08014c74 	.word	0x08014c74
 8008110:	08014c8c 	.word	0x08014c8c
 8008114:	08014cb8 	.word	0x08014cb8
 8008118:	08014cec 	.word	0x08014cec
 800811c:	08014d20 	.word	0x08014d20
 8008120:	08014d50 	.word	0x08014d50
 8008124:	08014d5c 	.word	0x08014d5c
 8008128:	08014d8c 	.word	0x08014d8c

0800812c <command_interface_handle_command>:

// Handle incoming commands
void command_interface_handle_command(char* command)
{
 800812c:	b590      	push	{r4, r7, lr}
 800812e:	b0c3      	sub	sp, #268	@ 0x10c
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
    char response[256];
    
    // Check if system is started
    if (!system_started) {
 8008134:	4b9d      	ldr	r3, [pc, #628]	@ (80083ac <command_interface_handle_command+0x280>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d118      	bne.n	800816e <command_interface_handle_command+0x42>
        if (strcmp(command, "start") == 0) {
 800813c:	4a9c      	ldr	r2, [pc, #624]	@ (80083b0 <command_interface_handle_command+0x284>)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	0011      	movs	r1, r2
 8008142:	0018      	movs	r0, r3
 8008144:	f7f7 ffde 	bl	8000104 <strcmp>
 8008148:	1e03      	subs	r3, r0, #0
 800814a:	d10b      	bne.n	8008164 <command_interface_handle_command+0x38>
            system_started = 1;
 800814c:	4b97      	ldr	r3, [pc, #604]	@ (80083ac <command_interface_handle_command+0x280>)
 800814e:	2201      	movs	r2, #1
 8008150:	701a      	strb	r2, [r3, #0]
            command_interface_send_response("System started! Type 'help' for available commands.\r\n");
 8008152:	4b98      	ldr	r3, [pc, #608]	@ (80083b4 <command_interface_handle_command+0x288>)
 8008154:	0018      	movs	r0, r3
 8008156:	f000 f96b 	bl	8008430 <command_interface_send_response>
            command_interface_send_response("> ");
 800815a:	4b97      	ldr	r3, [pc, #604]	@ (80083b8 <command_interface_handle_command+0x28c>)
 800815c:	0018      	movs	r0, r3
 800815e:	f000 f967 	bl	8008430 <command_interface_send_response>
            return;
 8008162:	e120      	b.n	80083a6 <command_interface_handle_command+0x27a>
        } else {
            command_interface_send_response("Please type 'start' to begin.\r\n");
 8008164:	4b95      	ldr	r3, [pc, #596]	@ (80083bc <command_interface_handle_command+0x290>)
 8008166:	0018      	movs	r0, r3
 8008168:	f000 f962 	bl	8008430 <command_interface_send_response>
            return;
 800816c:	e11b      	b.n	80083a6 <command_interface_handle_command+0x27a>
        }
    }
    
    // Parse commands (full and abbreviated versions)
    if (strcmp(command, "read temperature") == 0 || strcmp(command, "rt") == 0) {
 800816e:	4a94      	ldr	r2, [pc, #592]	@ (80083c0 <command_interface_handle_command+0x294>)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	0011      	movs	r1, r2
 8008174:	0018      	movs	r0, r3
 8008176:	f7f7 ffc5 	bl	8000104 <strcmp>
 800817a:	1e03      	subs	r3, r0, #0
 800817c:	d007      	beq.n	800818e <command_interface_handle_command+0x62>
 800817e:	4a91      	ldr	r2, [pc, #580]	@ (80083c4 <command_interface_handle_command+0x298>)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	0011      	movs	r1, r2
 8008184:	0018      	movs	r0, r3
 8008186:	f7f7 ffbd 	bl	8000104 <strcmp>
 800818a:	1e03      	subs	r3, r0, #0
 800818c:	d102      	bne.n	8008194 <command_interface_handle_command+0x68>
        cmd_read_temperature();
 800818e:	f000 f97b 	bl	8008488 <cmd_read_temperature>
 8008192:	e108      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "read pressure") == 0 || strcmp(command, "rp") == 0) {
 8008194:	4a8c      	ldr	r2, [pc, #560]	@ (80083c8 <command_interface_handle_command+0x29c>)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	0011      	movs	r1, r2
 800819a:	0018      	movs	r0, r3
 800819c:	f7f7 ffb2 	bl	8000104 <strcmp>
 80081a0:	1e03      	subs	r3, r0, #0
 80081a2:	d007      	beq.n	80081b4 <command_interface_handle_command+0x88>
 80081a4:	4a89      	ldr	r2, [pc, #548]	@ (80083cc <command_interface_handle_command+0x2a0>)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	0011      	movs	r1, r2
 80081aa:	0018      	movs	r0, r3
 80081ac:	f7f7 ffaa 	bl	8000104 <strcmp>
 80081b0:	1e03      	subs	r3, r0, #0
 80081b2:	d102      	bne.n	80081ba <command_interface_handle_command+0x8e>
        cmd_read_pressure();
 80081b4:	f000 fa94 	bl	80086e0 <cmd_read_pressure>
 80081b8:	e0f5      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "read humidity") == 0 || strcmp(command, "rh") == 0) {
 80081ba:	4a85      	ldr	r2, [pc, #532]	@ (80083d0 <command_interface_handle_command+0x2a4>)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	0011      	movs	r1, r2
 80081c0:	0018      	movs	r0, r3
 80081c2:	f7f7 ff9f 	bl	8000104 <strcmp>
 80081c6:	1e03      	subs	r3, r0, #0
 80081c8:	d007      	beq.n	80081da <command_interface_handle_command+0xae>
 80081ca:	4a82      	ldr	r2, [pc, #520]	@ (80083d4 <command_interface_handle_command+0x2a8>)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	0011      	movs	r1, r2
 80081d0:	0018      	movs	r0, r3
 80081d2:	f7f7 ff97 	bl	8000104 <strcmp>
 80081d6:	1e03      	subs	r3, r0, #0
 80081d8:	d102      	bne.n	80081e0 <command_interface_handle_command+0xb4>
        cmd_read_humidity();
 80081da:	f000 fb6b 	bl	80088b4 <cmd_read_humidity>
 80081de:	e0e2      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "test sensor") == 0 || strcmp(command, "ts") == 0) {
 80081e0:	4a7d      	ldr	r2, [pc, #500]	@ (80083d8 <command_interface_handle_command+0x2ac>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	0011      	movs	r1, r2
 80081e6:	0018      	movs	r0, r3
 80081e8:	f7f7 ff8c 	bl	8000104 <strcmp>
 80081ec:	1e03      	subs	r3, r0, #0
 80081ee:	d007      	beq.n	8008200 <command_interface_handle_command+0xd4>
 80081f0:	4a7a      	ldr	r2, [pc, #488]	@ (80083dc <command_interface_handle_command+0x2b0>)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	0011      	movs	r1, r2
 80081f6:	0018      	movs	r0, r3
 80081f8:	f7f7 ff84 	bl	8000104 <strcmp>
 80081fc:	1e03      	subs	r3, r0, #0
 80081fe:	d102      	bne.n	8008206 <command_interface_handle_command+0xda>
        cmd_test_sensor();
 8008200:	f000 fc42 	bl	8008a88 <cmd_test_sensor>
 8008204:	e0cf      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "raw registers") == 0 || strcmp(command, "rr") == 0) {
 8008206:	4a76      	ldr	r2, [pc, #472]	@ (80083e0 <command_interface_handle_command+0x2b4>)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	0011      	movs	r1, r2
 800820c:	0018      	movs	r0, r3
 800820e:	f7f7 ff79 	bl	8000104 <strcmp>
 8008212:	1e03      	subs	r3, r0, #0
 8008214:	d007      	beq.n	8008226 <command_interface_handle_command+0xfa>
 8008216:	4a73      	ldr	r2, [pc, #460]	@ (80083e4 <command_interface_handle_command+0x2b8>)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	0011      	movs	r1, r2
 800821c:	0018      	movs	r0, r3
 800821e:	f7f7 ff71 	bl	8000104 <strcmp>
 8008222:	1e03      	subs	r3, r0, #0
 8008224:	d102      	bne.n	800822c <command_interface_handle_command+0x100>
        bme680_read_raw_registers();
 8008226:	f7fc feb5 	bl	8004f94 <bme680_read_raw_registers>
 800822a:	e0bc      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "raw adc") == 0 || strcmp(command, "ra") == 0) {
 800822c:	4a6e      	ldr	r2, [pc, #440]	@ (80083e8 <command_interface_handle_command+0x2bc>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	0011      	movs	r1, r2
 8008232:	0018      	movs	r0, r3
 8008234:	f7f7 ff66 	bl	8000104 <strcmp>
 8008238:	1e03      	subs	r3, r0, #0
 800823a:	d007      	beq.n	800824c <command_interface_handle_command+0x120>
 800823c:	4a6b      	ldr	r2, [pc, #428]	@ (80083ec <command_interface_handle_command+0x2c0>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	0011      	movs	r1, r2
 8008242:	0018      	movs	r0, r3
 8008244:	f7f7 ff5e 	bl	8000104 <strcmp>
 8008248:	1e03      	subs	r3, r0, #0
 800824a:	d102      	bne.n	8008252 <command_interface_handle_command+0x126>
        bme680_read_raw_adc_values();
 800824c:	f7fc fdea 	bl	8004e24 <bme680_read_raw_adc_values>
 8008250:	e0a9      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "calib data") == 0 || strcmp(command, "cd") == 0) {
 8008252:	4a67      	ldr	r2, [pc, #412]	@ (80083f0 <command_interface_handle_command+0x2c4>)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	0011      	movs	r1, r2
 8008258:	0018      	movs	r0, r3
 800825a:	f7f7 ff53 	bl	8000104 <strcmp>
 800825e:	1e03      	subs	r3, r0, #0
 8008260:	d007      	beq.n	8008272 <command_interface_handle_command+0x146>
 8008262:	4a64      	ldr	r2, [pc, #400]	@ (80083f4 <command_interface_handle_command+0x2c8>)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	0011      	movs	r1, r2
 8008268:	0018      	movs	r0, r3
 800826a:	f7f7 ff4b 	bl	8000104 <strcmp>
 800826e:	1e03      	subs	r3, r0, #0
 8008270:	d102      	bne.n	8008278 <command_interface_handle_command+0x14c>
        bme680_check_calibration_data();
 8008272:	f7fc fd37 	bl	8004ce4 <bme680_check_calibration_data>
 8008276:	e096      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "scan i2c") == 0 || strcmp(command, "si") == 0) {
 8008278:	4a5f      	ldr	r2, [pc, #380]	@ (80083f8 <command_interface_handle_command+0x2cc>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	0011      	movs	r1, r2
 800827e:	0018      	movs	r0, r3
 8008280:	f7f7 ff40 	bl	8000104 <strcmp>
 8008284:	1e03      	subs	r3, r0, #0
 8008286:	d007      	beq.n	8008298 <command_interface_handle_command+0x16c>
 8008288:	4a5c      	ldr	r2, [pc, #368]	@ (80083fc <command_interface_handle_command+0x2d0>)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	0011      	movs	r1, r2
 800828e:	0018      	movs	r0, r3
 8008290:	f7f7 ff38 	bl	8000104 <strcmp>
 8008294:	1e03      	subs	r3, r0, #0
 8008296:	d102      	bne.n	800829e <command_interface_handle_command+0x172>
        i2c_scan_bus();
 8008298:	f7fb fba6 	bl	80039e8 <i2c_scan_bus>
 800829c:	e083      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "lora broadcast") == 0 || strcmp(command, "lb") == 0) {
 800829e:	4a58      	ldr	r2, [pc, #352]	@ (8008400 <command_interface_handle_command+0x2d4>)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	0011      	movs	r1, r2
 80082a4:	0018      	movs	r0, r3
 80082a6:	f7f7 ff2d 	bl	8000104 <strcmp>
 80082aa:	1e03      	subs	r3, r0, #0
 80082ac:	d007      	beq.n	80082be <command_interface_handle_command+0x192>
 80082ae:	4a55      	ldr	r2, [pc, #340]	@ (8008404 <command_interface_handle_command+0x2d8>)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	0011      	movs	r1, r2
 80082b4:	0018      	movs	r0, r3
 80082b6:	f7f7 ff25 	bl	8000104 <strcmp>
 80082ba:	1e03      	subs	r3, r0, #0
 80082bc:	d102      	bne.n	80082c4 <command_interface_handle_command+0x198>
        cmd_lora_broadcast();
 80082be:	f001 fa6f 	bl	80097a0 <cmd_lora_broadcast>
 80082c2:	e070      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "lora config") == 0 || strcmp(command, "lc") == 0) {
 80082c4:	4a50      	ldr	r2, [pc, #320]	@ (8008408 <command_interface_handle_command+0x2dc>)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	0011      	movs	r1, r2
 80082ca:	0018      	movs	r0, r3
 80082cc:	f7f7 ff1a 	bl	8000104 <strcmp>
 80082d0:	1e03      	subs	r3, r0, #0
 80082d2:	d007      	beq.n	80082e4 <command_interface_handle_command+0x1b8>
 80082d4:	4a4d      	ldr	r2, [pc, #308]	@ (800840c <command_interface_handle_command+0x2e0>)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	0011      	movs	r1, r2
 80082da:	0018      	movs	r0, r3
 80082dc:	f7f7 ff12 	bl	8000104 <strcmp>
 80082e0:	1e03      	subs	r3, r0, #0
 80082e2:	d102      	bne.n	80082ea <command_interface_handle_command+0x1be>
        lora_print_config();
 80082e4:	f001 fece 	bl	800a084 <lora_print_config>
 80082e8:	e05d      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "lora test") == 0 || strcmp(command, "lt") == 0) {
 80082ea:	4a49      	ldr	r2, [pc, #292]	@ (8008410 <command_interface_handle_command+0x2e4>)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	0011      	movs	r1, r2
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7f7 ff07 	bl	8000104 <strcmp>
 80082f6:	1e03      	subs	r3, r0, #0
 80082f8:	d007      	beq.n	800830a <command_interface_handle_command+0x1de>
 80082fa:	4a46      	ldr	r2, [pc, #280]	@ (8008414 <command_interface_handle_command+0x2e8>)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	0011      	movs	r1, r2
 8008300:	0018      	movs	r0, r3
 8008302:	f7f7 feff 	bl	8000104 <strcmp>
 8008306:	1e03      	subs	r3, r0, #0
 8008308:	d102      	bne.n	8008310 <command_interface_handle_command+0x1e4>
        lora_test_transmission();
 800830a:	f001 ff35 	bl	800a178 <lora_test_transmission>
 800830e:	e04a      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strncmp(command, "sum ", 4) == 0) {
 8008310:	4941      	ldr	r1, [pc, #260]	@ (8008418 <command_interface_handle_command+0x2ec>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2204      	movs	r2, #4
 8008316:	0018      	movs	r0, r3
 8008318:	f008 febc 	bl	8011094 <strncmp>
 800831c:	1e03      	subs	r3, r0, #0
 800831e:	d104      	bne.n	800832a <command_interface_handle_command+0x1fe>
        cmd_math_operation(command);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	0018      	movs	r0, r3
 8008324:	f000 fbc2 	bl	8008aac <cmd_math_operation>
 8008328:	e03d      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strncmp(command, "sub ", 4) == 0) {
 800832a:	493c      	ldr	r1, [pc, #240]	@ (800841c <command_interface_handle_command+0x2f0>)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2204      	movs	r2, #4
 8008330:	0018      	movs	r0, r3
 8008332:	f008 feaf 	bl	8011094 <strncmp>
 8008336:	1e03      	subs	r3, r0, #0
 8008338:	d104      	bne.n	8008344 <command_interface_handle_command+0x218>
        cmd_math_operation(command);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	0018      	movs	r0, r3
 800833e:	f000 fbb5 	bl	8008aac <cmd_math_operation>
 8008342:	e030      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strncmp(command, "mul ", 4) == 0) {
 8008344:	4936      	ldr	r1, [pc, #216]	@ (8008420 <command_interface_handle_command+0x2f4>)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2204      	movs	r2, #4
 800834a:	0018      	movs	r0, r3
 800834c:	f008 fea2 	bl	8011094 <strncmp>
 8008350:	1e03      	subs	r3, r0, #0
 8008352:	d104      	bne.n	800835e <command_interface_handle_command+0x232>
        cmd_math_operation(command);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	0018      	movs	r0, r3
 8008358:	f000 fba8 	bl	8008aac <cmd_math_operation>
 800835c:	e023      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strncmp(command, "div ", 4) == 0) {
 800835e:	4931      	ldr	r1, [pc, #196]	@ (8008424 <command_interface_handle_command+0x2f8>)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2204      	movs	r2, #4
 8008364:	0018      	movs	r0, r3
 8008366:	f008 fe95 	bl	8011094 <strncmp>
 800836a:	1e03      	subs	r3, r0, #0
 800836c:	d104      	bne.n	8008378 <command_interface_handle_command+0x24c>
        cmd_math_operation(command);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	0018      	movs	r0, r3
 8008372:	f000 fb9b 	bl	8008aac <cmd_math_operation>
 8008376:	e016      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else if (strcmp(command, "help") == 0) {
 8008378:	4a2b      	ldr	r2, [pc, #172]	@ (8008428 <command_interface_handle_command+0x2fc>)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	0011      	movs	r1, r2
 800837e:	0018      	movs	r0, r3
 8008380:	f7f7 fec0 	bl	8000104 <strcmp>
 8008384:	1e03      	subs	r3, r0, #0
 8008386:	d102      	bne.n	800838e <command_interface_handle_command+0x262>
        command_interface_show_help();
 8008388:	f7ff fe4c 	bl	8008024 <command_interface_show_help>
 800838c:	e00b      	b.n	80083a6 <command_interface_handle_command+0x27a>
    }
    else {
        snprintf(response, sizeof(response), "Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a26      	ldr	r2, [pc, #152]	@ (800842c <command_interface_handle_command+0x300>)
 8008392:	2180      	movs	r1, #128	@ 0x80
 8008394:	0049      	lsls	r1, r1, #1
 8008396:	2408      	movs	r4, #8
 8008398:	1938      	adds	r0, r7, r4
 800839a:	f008 fdf1 	bl	8010f80 <sniprintf>
        command_interface_send_response(response);
 800839e:	193b      	adds	r3, r7, r4
 80083a0:	0018      	movs	r0, r3
 80083a2:	f000 f845 	bl	8008430 <command_interface_send_response>
    }
}
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b043      	add	sp, #268	@ 0x10c
 80083aa:	bd90      	pop	{r4, r7, pc}
 80083ac:	200002e2 	.word	0x200002e2
 80083b0:	08014da8 	.word	0x08014da8
 80083b4:	08014db0 	.word	0x08014db0
 80083b8:	080149d8 	.word	0x080149d8
 80083bc:	08014de8 	.word	0x08014de8
 80083c0:	08014e08 	.word	0x08014e08
 80083c4:	08014e1c 	.word	0x08014e1c
 80083c8:	08014e20 	.word	0x08014e20
 80083cc:	08014e30 	.word	0x08014e30
 80083d0:	08014e34 	.word	0x08014e34
 80083d4:	08014e44 	.word	0x08014e44
 80083d8:	08014e48 	.word	0x08014e48
 80083dc:	08014e54 	.word	0x08014e54
 80083e0:	08014e58 	.word	0x08014e58
 80083e4:	08014e68 	.word	0x08014e68
 80083e8:	08014e6c 	.word	0x08014e6c
 80083ec:	08014e74 	.word	0x08014e74
 80083f0:	08014e78 	.word	0x08014e78
 80083f4:	08014e84 	.word	0x08014e84
 80083f8:	08014e88 	.word	0x08014e88
 80083fc:	08014e94 	.word	0x08014e94
 8008400:	08014e98 	.word	0x08014e98
 8008404:	08014ea8 	.word	0x08014ea8
 8008408:	08014eac 	.word	0x08014eac
 800840c:	08014eb8 	.word	0x08014eb8
 8008410:	08014ebc 	.word	0x08014ebc
 8008414:	08014ec8 	.word	0x08014ec8
 8008418:	08014ecc 	.word	0x08014ecc
 800841c:	08014ed4 	.word	0x08014ed4
 8008420:	08014edc 	.word	0x08014edc
 8008424:	08014ee4 	.word	0x08014ee4
 8008428:	08014eec 	.word	0x08014eec
 800842c:	08014ef4 	.word	0x08014ef4

08008430 <command_interface_send_response>:

// Send response via USART2
void command_interface_send_response(const char* response)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0018      	movs	r0, r3
 800843c:	f7f7 fe6c 	bl	8000118 <strlen>
 8008440:	0003      	movs	r3, r0
 8008442:	b29a      	uxth	r2, r3
 8008444:	2301      	movs	r3, #1
 8008446:	425b      	negs	r3, r3
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4803      	ldr	r0, [pc, #12]	@ (8008458 <command_interface_send_response+0x28>)
 800844c:	f006 fab4 	bl	800e9b8 <HAL_UART_Transmit>
}
 8008450:	46c0      	nop			@ (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b002      	add	sp, #8
 8008456:	bd80      	pop	{r7, pc}
 8008458:	200003a0 	.word	0x200003a0

0800845c <command_interface_send_response_usart4>:

// Send response via USART4
void command_interface_send_response_usart4(const char* response)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	0018      	movs	r0, r3
 8008468:	f7f7 fe56 	bl	8000118 <strlen>
 800846c:	0003      	movs	r3, r0
 800846e:	b29a      	uxth	r2, r3
 8008470:	2301      	movs	r3, #1
 8008472:	425b      	negs	r3, r3
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4803      	ldr	r0, [pc, #12]	@ (8008484 <command_interface_send_response_usart4+0x28>)
 8008478:	f006 fa9e 	bl	800e9b8 <HAL_UART_Transmit>
}
 800847c:	46c0      	nop			@ (mov r8, r8)
 800847e:	46bd      	mov	sp, r7
 8008480:	b002      	add	sp, #8
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000434 	.word	0x20000434

08008488 <cmd_read_temperature>:

// Command handler for reading temperature
void cmd_read_temperature(void)
{
 8008488:	b590      	push	{r4, r7, lr}
 800848a:	b0d1      	sub	sp, #324	@ 0x144
 800848c:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    char debug_msg[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800848e:	f7fb fbe7 	bl	8003c60 <bme680_check_sensor_presence>
 8008492:	1e03      	subs	r3, r0, #0
 8008494:	d00b      	beq.n	80084ae <cmd_read_temperature+0x26>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 8008496:	4a8d      	ldr	r2, [pc, #564]	@ (80086cc <cmd_read_temperature+0x244>)
 8008498:	2480      	movs	r4, #128	@ 0x80
 800849a:	193b      	adds	r3, r7, r4
 800849c:	2180      	movs	r1, #128	@ 0x80
 800849e:	0018      	movs	r0, r3
 80084a0:	f008 fd6e 	bl	8010f80 <sniprintf>
        command_interface_send_response(response);
 80084a4:	193b      	adds	r3, r7, r4
 80084a6:	0018      	movs	r0, r3
 80084a8:	f7ff ffc2 	bl	8008430 <command_interface_send_response>
 80084ac:	e10a      	b.n	80086c4 <cmd_read_temperature+0x23c>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 80084ae:	1c7b      	adds	r3, r7, #1
 80084b0:	33ff      	adds	r3, #255	@ 0xff
 80084b2:	0018      	movs	r0, r3
 80084b4:	f7fb fe3a 	bl	800412c <bme680_read_sensor_data>
 80084b8:	1e03      	subs	r3, r0, #0
 80084ba:	d000      	beq.n	80084be <cmd_read_temperature+0x36>
 80084bc:	e0f6      	b.n	80086ac <cmd_read_temperature+0x224>
        // Decode the IEEE 754 value from memory
        uint32_t temp_mem = *(uint32_t*)&sensor_data.temperature;
 80084be:	1c7b      	adds	r3, r7, #1
 80084c0:	33ff      	adds	r3, #255	@ 0xff
 80084c2:	3308      	adds	r3, #8
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2494      	movs	r4, #148	@ 0x94
 80084c8:	0064      	lsls	r4, r4, #1
 80084ca:	193a      	adds	r2, r7, r4
 80084cc:	6013      	str	r3, [r2, #0]
        float temp_decoded = decode_ieee754(temp_mem);
 80084ce:	193b      	adds	r3, r7, r4
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	0018      	movs	r0, r3
 80084d4:	f7fb fdfc 	bl	80040d0 <decode_ieee754>
 80084d8:	1c03      	adds	r3, r0, #0
 80084da:	229a      	movs	r2, #154	@ 0x9a
 80084dc:	0052      	lsls	r2, r2, #1
 80084de:	18ba      	adds	r2, r7, r2
 80084e0:	6013      	str	r3, [r2, #0]
        
        // Direct IEEE 754 calculation for temperature
        uint32_t temp_sign = (temp_mem >> 31) & 0x1;
 80084e2:	0021      	movs	r1, r4
 80084e4:	187b      	adds	r3, r7, r1
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	0fdb      	lsrs	r3, r3, #31
 80084ea:	2292      	movs	r2, #146	@ 0x92
 80084ec:	0052      	lsls	r2, r2, #1
 80084ee:	18ba      	adds	r2, r7, r2
 80084f0:	6013      	str	r3, [r2, #0]
        uint32_t temp_exp = (temp_mem >> 23) & 0xFF;
 80084f2:	187b      	adds	r3, r7, r1
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	0ddb      	lsrs	r3, r3, #23
 80084f8:	22ff      	movs	r2, #255	@ 0xff
 80084fa:	4013      	ands	r3, r2
 80084fc:	2290      	movs	r2, #144	@ 0x90
 80084fe:	0052      	lsls	r2, r2, #1
 8008500:	18b8      	adds	r0, r7, r2
 8008502:	6003      	str	r3, [r0, #0]
        uint32_t temp_mant = temp_mem & 0x7FFFFF;
 8008504:	187b      	adds	r3, r7, r1
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	025b      	lsls	r3, r3, #9
 800850a:	0a5b      	lsrs	r3, r3, #9
 800850c:	218e      	movs	r1, #142	@ 0x8e
 800850e:	0049      	lsls	r1, r1, #1
 8008510:	1879      	adds	r1, r7, r1
 8008512:	600b      	str	r3, [r1, #0]
        
        if (temp_exp != 0 && temp_exp != 0xFF) {
 8008514:	18bb      	adds	r3, r7, r2
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d100      	bne.n	800851e <cmd_read_temperature+0x96>
 800851c:	e098      	b.n	8008650 <cmd_read_temperature+0x1c8>
 800851e:	18bb      	adds	r3, r7, r2
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2bff      	cmp	r3, #255	@ 0xff
 8008524:	d100      	bne.n	8008528 <cmd_read_temperature+0xa0>
 8008526:	e093      	b.n	8008650 <cmd_read_temperature+0x1c8>
            int temp_exp_val = (int)temp_exp - 127;
 8008528:	18bb      	adds	r3, r7, r2
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3b7f      	subs	r3, #127	@ 0x7f
 800852e:	228c      	movs	r2, #140	@ 0x8c
 8008530:	0052      	lsls	r2, r2, #1
 8008532:	18ba      	adds	r2, r7, r2
 8008534:	6013      	str	r3, [r2, #0]
            float temp_result = 1.0f;
 8008536:	23fe      	movs	r3, #254	@ 0xfe
 8008538:	059b      	lsls	r3, r3, #22
 800853a:	2298      	movs	r2, #152	@ 0x98
 800853c:	0052      	lsls	r2, r2, #1
 800853e:	18ba      	adds	r2, r7, r2
 8008540:	6013      	str	r3, [r2, #0]
            
            // Calculate mantissa
            for (int i = 22; i >= 0; i--) {
 8008542:	2316      	movs	r3, #22
 8008544:	2296      	movs	r2, #150	@ 0x96
 8008546:	0052      	lsls	r2, r2, #1
 8008548:	18ba      	adds	r2, r7, r2
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	e02f      	b.n	80085ae <cmd_read_temperature+0x126>
                if (temp_mant & (1 << i)) {
 800854e:	2201      	movs	r2, #1
 8008550:	2196      	movs	r1, #150	@ 0x96
 8008552:	0049      	lsls	r1, r1, #1
 8008554:	187b      	adds	r3, r7, r1
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	409a      	lsls	r2, r3
 800855a:	0013      	movs	r3, r2
 800855c:	001a      	movs	r2, r3
 800855e:	238e      	movs	r3, #142	@ 0x8e
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	18fb      	adds	r3, r7, r3
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4013      	ands	r3, r2
 8008568:	d01a      	beq.n	80085a0 <cmd_read_temperature+0x118>
                    temp_result += 1.0f / (1 << (23 - i));
 800856a:	187b      	adds	r3, r7, r1
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2217      	movs	r2, #23
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2201      	movs	r2, #1
 8008574:	409a      	lsls	r2, r3
 8008576:	0013      	movs	r3, r2
 8008578:	0018      	movs	r0, r3
 800857a:	f7f9 f8e7 	bl	800174c <__aeabi_i2f>
 800857e:	1c03      	adds	r3, r0, #0
 8008580:	1c19      	adds	r1, r3, #0
 8008582:	20fe      	movs	r0, #254	@ 0xfe
 8008584:	0580      	lsls	r0, r0, #22
 8008586:	f7f8 fb35 	bl	8000bf4 <__aeabi_fdiv>
 800858a:	1c03      	adds	r3, r0, #0
 800858c:	1c19      	adds	r1, r3, #0
 800858e:	2498      	movs	r4, #152	@ 0x98
 8008590:	0064      	lsls	r4, r4, #1
 8008592:	193b      	adds	r3, r7, r4
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	f7f8 f93b 	bl	8000810 <__aeabi_fadd>
 800859a:	1c03      	adds	r3, r0, #0
 800859c:	193a      	adds	r2, r7, r4
 800859e:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80085a0:	2296      	movs	r2, #150	@ 0x96
 80085a2:	0052      	lsls	r2, r2, #1
 80085a4:	18bb      	adds	r3, r7, r2
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	18ba      	adds	r2, r7, r2
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	2396      	movs	r3, #150	@ 0x96
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	18fb      	adds	r3, r7, r3
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dac9      	bge.n	800854e <cmd_read_temperature+0xc6>
                }
            }
            
            // Apply exponent
            if (temp_exp_val > 0) {
 80085ba:	218c      	movs	r1, #140	@ 0x8c
 80085bc:	0049      	lsls	r1, r1, #1
 80085be:	187b      	adds	r3, r7, r1
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	dd13      	ble.n	80085ee <cmd_read_temperature+0x166>
                temp_result *= (1 << temp_exp_val);
 80085c6:	2201      	movs	r2, #1
 80085c8:	187b      	adds	r3, r7, r1
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	409a      	lsls	r2, r3
 80085ce:	0013      	movs	r3, r2
 80085d0:	0018      	movs	r0, r3
 80085d2:	f7f9 f8bb 	bl	800174c <__aeabi_i2f>
 80085d6:	1c03      	adds	r3, r0, #0
 80085d8:	1c19      	adds	r1, r3, #0
 80085da:	2498      	movs	r4, #152	@ 0x98
 80085dc:	0064      	lsls	r4, r4, #1
 80085de:	193b      	adds	r3, r7, r4
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	f7f8 fcd5 	bl	8000f90 <__aeabi_fmul>
 80085e6:	1c03      	adds	r3, r0, #0
 80085e8:	193a      	adds	r2, r7, r4
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	e019      	b.n	8008622 <cmd_read_temperature+0x19a>
            } else if (temp_exp_val < 0) {
 80085ee:	228c      	movs	r2, #140	@ 0x8c
 80085f0:	0052      	lsls	r2, r2, #1
 80085f2:	18bb      	adds	r3, r7, r2
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	da13      	bge.n	8008622 <cmd_read_temperature+0x19a>
                temp_result /= (1 << (-temp_exp_val));
 80085fa:	18bb      	adds	r3, r7, r2
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	425b      	negs	r3, r3
 8008600:	2201      	movs	r2, #1
 8008602:	409a      	lsls	r2, r3
 8008604:	0013      	movs	r3, r2
 8008606:	0018      	movs	r0, r3
 8008608:	f7f9 f8a0 	bl	800174c <__aeabi_i2f>
 800860c:	1c03      	adds	r3, r0, #0
 800860e:	1c19      	adds	r1, r3, #0
 8008610:	2498      	movs	r4, #152	@ 0x98
 8008612:	0064      	lsls	r4, r4, #1
 8008614:	193b      	adds	r3, r7, r4
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	f7f8 faec 	bl	8000bf4 <__aeabi_fdiv>
 800861c:	1c03      	adds	r3, r0, #0
 800861e:	193a      	adds	r2, r7, r4
 8008620:	6013      	str	r3, [r2, #0]
            }
            
            // Apply sign
            if (temp_sign) temp_result = -temp_result;
 8008622:	2392      	movs	r3, #146	@ 0x92
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	18fb      	adds	r3, r7, r3
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <cmd_read_temperature+0x1b8>
 800862e:	2198      	movs	r1, #152	@ 0x98
 8008630:	0049      	lsls	r1, r1, #1
 8008632:	187b      	adds	r3, r7, r1
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2280      	movs	r2, #128	@ 0x80
 8008638:	0612      	lsls	r2, r2, #24
 800863a:	4053      	eors	r3, r2
 800863c:	187a      	adds	r2, r7, r1
 800863e:	6013      	str	r3, [r2, #0]
            
            temp_decoded = temp_result;
 8008640:	2398      	movs	r3, #152	@ 0x98
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	18fb      	adds	r3, r7, r3
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	229a      	movs	r2, #154	@ 0x9a
 800864a:	0052      	lsls	r2, r2, #1
 800864c:	18ba      	adds	r2, r7, r2
 800864e:	6013      	str	r3, [r2, #0]
        }
        
        // Debug: Print the raw value before formatting
        snprintf(debug_msg, sizeof(debug_msg), "DEBUG: Raw temperature value: %.6f\r\n", temp_decoded);
 8008650:	249a      	movs	r4, #154	@ 0x9a
 8008652:	0064      	lsls	r4, r4, #1
 8008654:	193b      	adds	r3, r7, r4
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	f7fb f8ae 	bl	80037b8 <__aeabi_f2d>
 800865c:	0002      	movs	r2, r0
 800865e:	000b      	movs	r3, r1
 8008660:	491b      	ldr	r1, [pc, #108]	@ (80086d0 <cmd_read_temperature+0x248>)
 8008662:	0038      	movs	r0, r7
 8008664:	9200      	str	r2, [sp, #0]
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	000a      	movs	r2, r1
 800866a:	2180      	movs	r1, #128	@ 0x80
 800866c:	f008 fc88 	bl	8010f80 <sniprintf>
        command_interface_send_response(debug_msg);
 8008670:	003b      	movs	r3, r7
 8008672:	0018      	movs	r0, r3
 8008674:	f7ff fedc 	bl	8008430 <command_interface_send_response>
        
        snprintf(response, sizeof(response), "Temperature: %.2f°C\r\n", temp_decoded);
 8008678:	193b      	adds	r3, r7, r4
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	f7fb f89c 	bl	80037b8 <__aeabi_f2d>
 8008680:	0002      	movs	r2, r0
 8008682:	000b      	movs	r3, r1
 8008684:	4913      	ldr	r1, [pc, #76]	@ (80086d4 <cmd_read_temperature+0x24c>)
 8008686:	2480      	movs	r4, #128	@ 0x80
 8008688:	1938      	adds	r0, r7, r4
 800868a:	9200      	str	r2, [sp, #0]
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	000a      	movs	r2, r1
 8008690:	2180      	movs	r1, #128	@ 0x80
 8008692:	f008 fc75 	bl	8010f80 <sniprintf>
        
        // Debug: Print the formatted string
        snprintf(debug_msg, sizeof(debug_msg), "DEBUG: Formatted string: '%.80s'\r\n", response);
 8008696:	193b      	adds	r3, r7, r4
 8008698:	4a0f      	ldr	r2, [pc, #60]	@ (80086d8 <cmd_read_temperature+0x250>)
 800869a:	0038      	movs	r0, r7
 800869c:	2180      	movs	r1, #128	@ 0x80
 800869e:	f008 fc6f 	bl	8010f80 <sniprintf>
        command_interface_send_response(debug_msg);
 80086a2:	003b      	movs	r3, r7
 80086a4:	0018      	movs	r0, r3
 80086a6:	f7ff fec3 	bl	8008430 <command_interface_send_response>
 80086aa:	e006      	b.n	80086ba <cmd_read_temperature+0x232>
    } else {
        snprintf(response, sizeof(response), "Error reading temperature from BME680\r\n");
 80086ac:	4a0b      	ldr	r2, [pc, #44]	@ (80086dc <cmd_read_temperature+0x254>)
 80086ae:	2380      	movs	r3, #128	@ 0x80
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	2180      	movs	r1, #128	@ 0x80
 80086b4:	0018      	movs	r0, r3
 80086b6:	f008 fc63 	bl	8010f80 <sniprintf>
    }
    
    command_interface_send_response(response);
 80086ba:	2380      	movs	r3, #128	@ 0x80
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	0018      	movs	r0, r3
 80086c0:	f7ff feb6 	bl	8008430 <command_interface_send_response>
}
 80086c4:	46bd      	mov	sp, r7
 80086c6:	b04f      	add	sp, #316	@ 0x13c
 80086c8:	bd90      	pop	{r4, r7, pc}
 80086ca:	46c0      	nop			@ (mov r8, r8)
 80086cc:	08014f30 	.word	0x08014f30
 80086d0:	08014f58 	.word	0x08014f58
 80086d4:	08014f80 	.word	0x08014f80
 80086d8:	08014f98 	.word	0x08014f98
 80086dc:	08014fbc 	.word	0x08014fbc

080086e0 <cmd_read_pressure>:

// Command handler for reading pressure
void cmd_read_pressure(void)
{
 80086e0:	b590      	push	{r4, r7, lr}
 80086e2:	b0b1      	sub	sp, #196	@ 0xc4
 80086e4:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 80086e6:	f7fb fabb 	bl	8003c60 <bme680_check_sensor_presence>
 80086ea:	1e03      	subs	r3, r0, #0
 80086ec:	d00a      	beq.n	8008704 <cmd_read_pressure+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 80086ee:	4a6e      	ldr	r2, [pc, #440]	@ (80088a8 <cmd_read_pressure+0x1c8>)
 80086f0:	003b      	movs	r3, r7
 80086f2:	2180      	movs	r1, #128	@ 0x80
 80086f4:	0018      	movs	r0, r3
 80086f6:	f008 fc43 	bl	8010f80 <sniprintf>
        command_interface_send_response(response);
 80086fa:	003b      	movs	r3, r7
 80086fc:	0018      	movs	r0, r3
 80086fe:	f7ff fe97 	bl	8008430 <command_interface_send_response>
 8008702:	e0ce      	b.n	80088a2 <cmd_read_pressure+0x1c2>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8008704:	2480      	movs	r4, #128	@ 0x80
 8008706:	193b      	adds	r3, r7, r4
 8008708:	0018      	movs	r0, r3
 800870a:	f7fb fd0f 	bl	800412c <bme680_read_sensor_data>
 800870e:	1e03      	subs	r3, r0, #0
 8008710:	d000      	beq.n	8008714 <cmd_read_pressure+0x34>
 8008712:	e0bc      	b.n	800888e <cmd_read_pressure+0x1ae>
        // Decode the IEEE 754 value from memory
        uint32_t press_mem = *(uint32_t*)&sensor_data.pressure;
 8008714:	193b      	adds	r3, r7, r4
 8008716:	330c      	adds	r3, #12
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	21a8      	movs	r1, #168	@ 0xa8
 800871c:	187a      	adds	r2, r7, r1
 800871e:	6013      	str	r3, [r2, #0]
        uint32_t press_sign = (press_mem >> 31) & 0x1;
 8008720:	187b      	adds	r3, r7, r1
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	0fdb      	lsrs	r3, r3, #31
 8008726:	22a4      	movs	r2, #164	@ 0xa4
 8008728:	18ba      	adds	r2, r7, r2
 800872a:	6013      	str	r3, [r2, #0]
        uint32_t press_exp = (press_mem >> 23) & 0xFF;
 800872c:	187b      	adds	r3, r7, r1
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	0ddb      	lsrs	r3, r3, #23
 8008732:	22ff      	movs	r2, #255	@ 0xff
 8008734:	4013      	ands	r3, r2
 8008736:	22a0      	movs	r2, #160	@ 0xa0
 8008738:	18b8      	adds	r0, r7, r2
 800873a:	6003      	str	r3, [r0, #0]
        uint32_t press_mant = press_mem & 0x7FFFFF;
 800873c:	187b      	adds	r3, r7, r1
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	025b      	lsls	r3, r3, #9
 8008742:	0a5b      	lsrs	r3, r3, #9
 8008744:	219c      	movs	r1, #156	@ 0x9c
 8008746:	1879      	adds	r1, r7, r1
 8008748:	600b      	str	r3, [r1, #0]
        
        float press_decoded = 0.0f;
 800874a:	2300      	movs	r3, #0
 800874c:	21b4      	movs	r1, #180	@ 0xb4
 800874e:	1879      	adds	r1, r7, r1
 8008750:	600b      	str	r3, [r1, #0]
        if (press_exp != 0 && press_exp != 0xFF) {
 8008752:	18bb      	adds	r3, r7, r2
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d100      	bne.n	800875c <cmd_read_pressure+0x7c>
 800875a:	e088      	b.n	800886e <cmd_read_pressure+0x18e>
 800875c:	18bb      	adds	r3, r7, r2
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2bff      	cmp	r3, #255	@ 0xff
 8008762:	d100      	bne.n	8008766 <cmd_read_pressure+0x86>
 8008764:	e083      	b.n	800886e <cmd_read_pressure+0x18e>
            int press_exp_val = (int)press_exp - 127;
 8008766:	18bb      	adds	r3, r7, r2
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3b7f      	subs	r3, #127	@ 0x7f
 800876c:	2298      	movs	r2, #152	@ 0x98
 800876e:	18ba      	adds	r2, r7, r2
 8008770:	6013      	str	r3, [r2, #0]
            float press_result = 1.0f;
 8008772:	23fe      	movs	r3, #254	@ 0xfe
 8008774:	059b      	lsls	r3, r3, #22
 8008776:	22b0      	movs	r2, #176	@ 0xb0
 8008778:	18ba      	adds	r2, r7, r2
 800877a:	6013      	str	r3, [r2, #0]
            
            for (int i = 22; i >= 0; i--) {
 800877c:	2316      	movs	r3, #22
 800877e:	22ac      	movs	r2, #172	@ 0xac
 8008780:	18ba      	adds	r2, r7, r2
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	e02b      	b.n	80087de <cmd_read_pressure+0xfe>
                if (press_mant & (1 << i)) {
 8008786:	2201      	movs	r2, #1
 8008788:	21ac      	movs	r1, #172	@ 0xac
 800878a:	187b      	adds	r3, r7, r1
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	409a      	lsls	r2, r3
 8008790:	0013      	movs	r3, r2
 8008792:	001a      	movs	r2, r3
 8008794:	239c      	movs	r3, #156	@ 0x9c
 8008796:	18fb      	adds	r3, r7, r3
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4013      	ands	r3, r2
 800879c:	d019      	beq.n	80087d2 <cmd_read_pressure+0xf2>
                    press_result += 1.0f / (1 << (23 - i));
 800879e:	187b      	adds	r3, r7, r1
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2217      	movs	r2, #23
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2201      	movs	r2, #1
 80087a8:	409a      	lsls	r2, r3
 80087aa:	0013      	movs	r3, r2
 80087ac:	0018      	movs	r0, r3
 80087ae:	f7f8 ffcd 	bl	800174c <__aeabi_i2f>
 80087b2:	1c03      	adds	r3, r0, #0
 80087b4:	1c19      	adds	r1, r3, #0
 80087b6:	20fe      	movs	r0, #254	@ 0xfe
 80087b8:	0580      	lsls	r0, r0, #22
 80087ba:	f7f8 fa1b 	bl	8000bf4 <__aeabi_fdiv>
 80087be:	1c03      	adds	r3, r0, #0
 80087c0:	1c19      	adds	r1, r3, #0
 80087c2:	24b0      	movs	r4, #176	@ 0xb0
 80087c4:	193b      	adds	r3, r7, r4
 80087c6:	6818      	ldr	r0, [r3, #0]
 80087c8:	f7f8 f822 	bl	8000810 <__aeabi_fadd>
 80087cc:	1c03      	adds	r3, r0, #0
 80087ce:	193a      	adds	r2, r7, r4
 80087d0:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80087d2:	22ac      	movs	r2, #172	@ 0xac
 80087d4:	18bb      	adds	r3, r7, r2
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3b01      	subs	r3, #1
 80087da:	18ba      	adds	r2, r7, r2
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	23ac      	movs	r3, #172	@ 0xac
 80087e0:	18fb      	adds	r3, r7, r3
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	dace      	bge.n	8008786 <cmd_read_pressure+0xa6>
                }
            }
            
            if (press_exp_val > 0) {
 80087e8:	2198      	movs	r1, #152	@ 0x98
 80087ea:	187b      	adds	r3, r7, r1
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dd12      	ble.n	8008818 <cmd_read_pressure+0x138>
                press_result *= (1 << press_exp_val);
 80087f2:	2201      	movs	r2, #1
 80087f4:	187b      	adds	r3, r7, r1
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	409a      	lsls	r2, r3
 80087fa:	0013      	movs	r3, r2
 80087fc:	0018      	movs	r0, r3
 80087fe:	f7f8 ffa5 	bl	800174c <__aeabi_i2f>
 8008802:	1c03      	adds	r3, r0, #0
 8008804:	1c19      	adds	r1, r3, #0
 8008806:	24b0      	movs	r4, #176	@ 0xb0
 8008808:	193b      	adds	r3, r7, r4
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	f7f8 fbc0 	bl	8000f90 <__aeabi_fmul>
 8008810:	1c03      	adds	r3, r0, #0
 8008812:	193a      	adds	r2, r7, r4
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	e017      	b.n	8008848 <cmd_read_pressure+0x168>
            } else if (press_exp_val < 0) {
 8008818:	2298      	movs	r2, #152	@ 0x98
 800881a:	18bb      	adds	r3, r7, r2
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	da12      	bge.n	8008848 <cmd_read_pressure+0x168>
                press_result /= (1 << (-press_exp_val));
 8008822:	18bb      	adds	r3, r7, r2
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	425b      	negs	r3, r3
 8008828:	2201      	movs	r2, #1
 800882a:	409a      	lsls	r2, r3
 800882c:	0013      	movs	r3, r2
 800882e:	0018      	movs	r0, r3
 8008830:	f7f8 ff8c 	bl	800174c <__aeabi_i2f>
 8008834:	1c03      	adds	r3, r0, #0
 8008836:	1c19      	adds	r1, r3, #0
 8008838:	24b0      	movs	r4, #176	@ 0xb0
 800883a:	193b      	adds	r3, r7, r4
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	f7f8 f9d9 	bl	8000bf4 <__aeabi_fdiv>
 8008842:	1c03      	adds	r3, r0, #0
 8008844:	193a      	adds	r2, r7, r4
 8008846:	6013      	str	r3, [r2, #0]
            }
            
            if (press_sign) press_result = -press_result;
 8008848:	23a4      	movs	r3, #164	@ 0xa4
 800884a:	18fb      	adds	r3, r7, r3
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d007      	beq.n	8008862 <cmd_read_pressure+0x182>
 8008852:	21b0      	movs	r1, #176	@ 0xb0
 8008854:	187b      	adds	r3, r7, r1
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2280      	movs	r2, #128	@ 0x80
 800885a:	0612      	lsls	r2, r2, #24
 800885c:	4053      	eors	r3, r2
 800885e:	187a      	adds	r2, r7, r1
 8008860:	6013      	str	r3, [r2, #0]
            press_decoded = press_result;
 8008862:	23b0      	movs	r3, #176	@ 0xb0
 8008864:	18fb      	adds	r3, r7, r3
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	22b4      	movs	r2, #180	@ 0xb4
 800886a:	18ba      	adds	r2, r7, r2
 800886c:	6013      	str	r3, [r2, #0]
        }
        
        snprintf(response, sizeof(response), "Pressure: %.2f Pa\r\n", press_decoded);
 800886e:	23b4      	movs	r3, #180	@ 0xb4
 8008870:	18fb      	adds	r3, r7, r3
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	f7fa ffa0 	bl	80037b8 <__aeabi_f2d>
 8008878:	0002      	movs	r2, r0
 800887a:	000b      	movs	r3, r1
 800887c:	490b      	ldr	r1, [pc, #44]	@ (80088ac <cmd_read_pressure+0x1cc>)
 800887e:	0038      	movs	r0, r7
 8008880:	9200      	str	r2, [sp, #0]
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	000a      	movs	r2, r1
 8008886:	2180      	movs	r1, #128	@ 0x80
 8008888:	f008 fb7a 	bl	8010f80 <sniprintf>
 800888c:	e005      	b.n	800889a <cmd_read_pressure+0x1ba>
    } else {
        snprintf(response, sizeof(response), "Error reading pressure from BME680\r\n");
 800888e:	4a08      	ldr	r2, [pc, #32]	@ (80088b0 <cmd_read_pressure+0x1d0>)
 8008890:	003b      	movs	r3, r7
 8008892:	2180      	movs	r1, #128	@ 0x80
 8008894:	0018      	movs	r0, r3
 8008896:	f008 fb73 	bl	8010f80 <sniprintf>
    }
    
    command_interface_send_response(response);
 800889a:	003b      	movs	r3, r7
 800889c:	0018      	movs	r0, r3
 800889e:	f7ff fdc7 	bl	8008430 <command_interface_send_response>
}
 80088a2:	46bd      	mov	sp, r7
 80088a4:	b02f      	add	sp, #188	@ 0xbc
 80088a6:	bd90      	pop	{r4, r7, pc}
 80088a8:	08014f30 	.word	0x08014f30
 80088ac:	08014fe4 	.word	0x08014fe4
 80088b0:	08014ff8 	.word	0x08014ff8

080088b4 <cmd_read_humidity>:

// Command handler for reading humidity
void cmd_read_humidity(void)
{
 80088b4:	b590      	push	{r4, r7, lr}
 80088b6:	b0b1      	sub	sp, #196	@ 0xc4
 80088b8:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 80088ba:	f7fb f9d1 	bl	8003c60 <bme680_check_sensor_presence>
 80088be:	1e03      	subs	r3, r0, #0
 80088c0:	d00a      	beq.n	80088d8 <cmd_read_humidity+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 80088c2:	4a6e      	ldr	r2, [pc, #440]	@ (8008a7c <cmd_read_humidity+0x1c8>)
 80088c4:	003b      	movs	r3, r7
 80088c6:	2180      	movs	r1, #128	@ 0x80
 80088c8:	0018      	movs	r0, r3
 80088ca:	f008 fb59 	bl	8010f80 <sniprintf>
        command_interface_send_response(response);
 80088ce:	003b      	movs	r3, r7
 80088d0:	0018      	movs	r0, r3
 80088d2:	f7ff fdad 	bl	8008430 <command_interface_send_response>
 80088d6:	e0ce      	b.n	8008a76 <cmd_read_humidity+0x1c2>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 80088d8:	2480      	movs	r4, #128	@ 0x80
 80088da:	193b      	adds	r3, r7, r4
 80088dc:	0018      	movs	r0, r3
 80088de:	f7fb fc25 	bl	800412c <bme680_read_sensor_data>
 80088e2:	1e03      	subs	r3, r0, #0
 80088e4:	d000      	beq.n	80088e8 <cmd_read_humidity+0x34>
 80088e6:	e0bc      	b.n	8008a62 <cmd_read_humidity+0x1ae>
        // Decode the IEEE 754 value from memory
        uint32_t hum_mem = *(uint32_t*)&sensor_data.humidity;
 80088e8:	193b      	adds	r3, r7, r4
 80088ea:	3310      	adds	r3, #16
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	21a8      	movs	r1, #168	@ 0xa8
 80088f0:	187a      	adds	r2, r7, r1
 80088f2:	6013      	str	r3, [r2, #0]
        uint32_t hum_sign = (hum_mem >> 31) & 0x1;
 80088f4:	187b      	adds	r3, r7, r1
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	0fdb      	lsrs	r3, r3, #31
 80088fa:	22a4      	movs	r2, #164	@ 0xa4
 80088fc:	18ba      	adds	r2, r7, r2
 80088fe:	6013      	str	r3, [r2, #0]
        uint32_t hum_exp = (hum_mem >> 23) & 0xFF;
 8008900:	187b      	adds	r3, r7, r1
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	0ddb      	lsrs	r3, r3, #23
 8008906:	22ff      	movs	r2, #255	@ 0xff
 8008908:	4013      	ands	r3, r2
 800890a:	22a0      	movs	r2, #160	@ 0xa0
 800890c:	18b8      	adds	r0, r7, r2
 800890e:	6003      	str	r3, [r0, #0]
        uint32_t hum_mant = hum_mem & 0x7FFFFF;
 8008910:	187b      	adds	r3, r7, r1
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	025b      	lsls	r3, r3, #9
 8008916:	0a5b      	lsrs	r3, r3, #9
 8008918:	219c      	movs	r1, #156	@ 0x9c
 800891a:	1879      	adds	r1, r7, r1
 800891c:	600b      	str	r3, [r1, #0]
        
        float hum_decoded = 0.0f;
 800891e:	2300      	movs	r3, #0
 8008920:	21b4      	movs	r1, #180	@ 0xb4
 8008922:	1879      	adds	r1, r7, r1
 8008924:	600b      	str	r3, [r1, #0]
        if (hum_exp != 0 && hum_exp != 0xFF) {
 8008926:	18bb      	adds	r3, r7, r2
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d100      	bne.n	8008930 <cmd_read_humidity+0x7c>
 800892e:	e088      	b.n	8008a42 <cmd_read_humidity+0x18e>
 8008930:	18bb      	adds	r3, r7, r2
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2bff      	cmp	r3, #255	@ 0xff
 8008936:	d100      	bne.n	800893a <cmd_read_humidity+0x86>
 8008938:	e083      	b.n	8008a42 <cmd_read_humidity+0x18e>
            int hum_exp_val = (int)hum_exp - 127;
 800893a:	18bb      	adds	r3, r7, r2
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3b7f      	subs	r3, #127	@ 0x7f
 8008940:	2298      	movs	r2, #152	@ 0x98
 8008942:	18ba      	adds	r2, r7, r2
 8008944:	6013      	str	r3, [r2, #0]
            float hum_result = 1.0f;
 8008946:	23fe      	movs	r3, #254	@ 0xfe
 8008948:	059b      	lsls	r3, r3, #22
 800894a:	22b0      	movs	r2, #176	@ 0xb0
 800894c:	18ba      	adds	r2, r7, r2
 800894e:	6013      	str	r3, [r2, #0]
            
            for (int i = 22; i >= 0; i--) {
 8008950:	2316      	movs	r3, #22
 8008952:	22ac      	movs	r2, #172	@ 0xac
 8008954:	18ba      	adds	r2, r7, r2
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	e02b      	b.n	80089b2 <cmd_read_humidity+0xfe>
                if (hum_mant & (1 << i)) {
 800895a:	2201      	movs	r2, #1
 800895c:	21ac      	movs	r1, #172	@ 0xac
 800895e:	187b      	adds	r3, r7, r1
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	409a      	lsls	r2, r3
 8008964:	0013      	movs	r3, r2
 8008966:	001a      	movs	r2, r3
 8008968:	239c      	movs	r3, #156	@ 0x9c
 800896a:	18fb      	adds	r3, r7, r3
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4013      	ands	r3, r2
 8008970:	d019      	beq.n	80089a6 <cmd_read_humidity+0xf2>
                    hum_result += 1.0f / (1 << (23 - i));
 8008972:	187b      	adds	r3, r7, r1
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2217      	movs	r2, #23
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2201      	movs	r2, #1
 800897c:	409a      	lsls	r2, r3
 800897e:	0013      	movs	r3, r2
 8008980:	0018      	movs	r0, r3
 8008982:	f7f8 fee3 	bl	800174c <__aeabi_i2f>
 8008986:	1c03      	adds	r3, r0, #0
 8008988:	1c19      	adds	r1, r3, #0
 800898a:	20fe      	movs	r0, #254	@ 0xfe
 800898c:	0580      	lsls	r0, r0, #22
 800898e:	f7f8 f931 	bl	8000bf4 <__aeabi_fdiv>
 8008992:	1c03      	adds	r3, r0, #0
 8008994:	1c19      	adds	r1, r3, #0
 8008996:	24b0      	movs	r4, #176	@ 0xb0
 8008998:	193b      	adds	r3, r7, r4
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	f7f7 ff38 	bl	8000810 <__aeabi_fadd>
 80089a0:	1c03      	adds	r3, r0, #0
 80089a2:	193a      	adds	r2, r7, r4
 80089a4:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80089a6:	22ac      	movs	r2, #172	@ 0xac
 80089a8:	18bb      	adds	r3, r7, r2
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	18ba      	adds	r2, r7, r2
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	23ac      	movs	r3, #172	@ 0xac
 80089b4:	18fb      	adds	r3, r7, r3
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dace      	bge.n	800895a <cmd_read_humidity+0xa6>
                }
            }
            
            if (hum_exp_val > 0) {
 80089bc:	2198      	movs	r1, #152	@ 0x98
 80089be:	187b      	adds	r3, r7, r1
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	dd12      	ble.n	80089ec <cmd_read_humidity+0x138>
                hum_result *= (1 << hum_exp_val);
 80089c6:	2201      	movs	r2, #1
 80089c8:	187b      	adds	r3, r7, r1
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	409a      	lsls	r2, r3
 80089ce:	0013      	movs	r3, r2
 80089d0:	0018      	movs	r0, r3
 80089d2:	f7f8 febb 	bl	800174c <__aeabi_i2f>
 80089d6:	1c03      	adds	r3, r0, #0
 80089d8:	1c19      	adds	r1, r3, #0
 80089da:	24b0      	movs	r4, #176	@ 0xb0
 80089dc:	193b      	adds	r3, r7, r4
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	f7f8 fad6 	bl	8000f90 <__aeabi_fmul>
 80089e4:	1c03      	adds	r3, r0, #0
 80089e6:	193a      	adds	r2, r7, r4
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	e017      	b.n	8008a1c <cmd_read_humidity+0x168>
            } else if (hum_exp_val < 0) {
 80089ec:	2298      	movs	r2, #152	@ 0x98
 80089ee:	18bb      	adds	r3, r7, r2
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	da12      	bge.n	8008a1c <cmd_read_humidity+0x168>
                hum_result /= (1 << (-hum_exp_val));
 80089f6:	18bb      	adds	r3, r7, r2
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	425b      	negs	r3, r3
 80089fc:	2201      	movs	r2, #1
 80089fe:	409a      	lsls	r2, r3
 8008a00:	0013      	movs	r3, r2
 8008a02:	0018      	movs	r0, r3
 8008a04:	f7f8 fea2 	bl	800174c <__aeabi_i2f>
 8008a08:	1c03      	adds	r3, r0, #0
 8008a0a:	1c19      	adds	r1, r3, #0
 8008a0c:	24b0      	movs	r4, #176	@ 0xb0
 8008a0e:	193b      	adds	r3, r7, r4
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	f7f8 f8ef 	bl	8000bf4 <__aeabi_fdiv>
 8008a16:	1c03      	adds	r3, r0, #0
 8008a18:	193a      	adds	r2, r7, r4
 8008a1a:	6013      	str	r3, [r2, #0]
            }
            
            if (hum_sign) hum_result = -hum_result;
 8008a1c:	23a4      	movs	r3, #164	@ 0xa4
 8008a1e:	18fb      	adds	r3, r7, r3
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d007      	beq.n	8008a36 <cmd_read_humidity+0x182>
 8008a26:	21b0      	movs	r1, #176	@ 0xb0
 8008a28:	187b      	adds	r3, r7, r1
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2280      	movs	r2, #128	@ 0x80
 8008a2e:	0612      	lsls	r2, r2, #24
 8008a30:	4053      	eors	r3, r2
 8008a32:	187a      	adds	r2, r7, r1
 8008a34:	6013      	str	r3, [r2, #0]
            hum_decoded = hum_result;
 8008a36:	23b0      	movs	r3, #176	@ 0xb0
 8008a38:	18fb      	adds	r3, r7, r3
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	22b4      	movs	r2, #180	@ 0xb4
 8008a3e:	18ba      	adds	r2, r7, r2
 8008a40:	6013      	str	r3, [r2, #0]
        }
        
        snprintf(response, sizeof(response), "Humidity: %.2f%%\r\n", hum_decoded);
 8008a42:	23b4      	movs	r3, #180	@ 0xb4
 8008a44:	18fb      	adds	r3, r7, r3
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	f7fa feb6 	bl	80037b8 <__aeabi_f2d>
 8008a4c:	0002      	movs	r2, r0
 8008a4e:	000b      	movs	r3, r1
 8008a50:	490b      	ldr	r1, [pc, #44]	@ (8008a80 <cmd_read_humidity+0x1cc>)
 8008a52:	0038      	movs	r0, r7
 8008a54:	9200      	str	r2, [sp, #0]
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	000a      	movs	r2, r1
 8008a5a:	2180      	movs	r1, #128	@ 0x80
 8008a5c:	f008 fa90 	bl	8010f80 <sniprintf>
 8008a60:	e005      	b.n	8008a6e <cmd_read_humidity+0x1ba>
    } else {
        snprintf(response, sizeof(response), "Error reading humidity from BME680\r\n");
 8008a62:	4a08      	ldr	r2, [pc, #32]	@ (8008a84 <cmd_read_humidity+0x1d0>)
 8008a64:	003b      	movs	r3, r7
 8008a66:	2180      	movs	r1, #128	@ 0x80
 8008a68:	0018      	movs	r0, r3
 8008a6a:	f008 fa89 	bl	8010f80 <sniprintf>
    }
    
    command_interface_send_response(response);
 8008a6e:	003b      	movs	r3, r7
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7ff fcdd 	bl	8008430 <command_interface_send_response>
}
 8008a76:	46bd      	mov	sp, r7
 8008a78:	b02f      	add	sp, #188	@ 0xbc
 8008a7a:	bd90      	pop	{r4, r7, pc}
 8008a7c:	08014f30 	.word	0x08014f30
 8008a80:	08015020 	.word	0x08015020
 8008a84:	08015034 	.word	0x08015034

08008a88 <cmd_test_sensor>:

// Command handler for testing sensor
void cmd_test_sensor(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 8008a8c:	f7fb f8e8 	bl	8003c60 <bme680_check_sensor_presence>
 8008a90:	1e03      	subs	r3, r0, #0
 8008a92:	d004      	beq.n	8008a9e <cmd_test_sensor+0x16>
        command_interface_send_response("Error: BME680 sensor not available\r\n");
 8008a94:	4b04      	ldr	r3, [pc, #16]	@ (8008aa8 <cmd_test_sensor+0x20>)
 8008a96:	0018      	movs	r0, r3
 8008a98:	f7ff fcca 	bl	8008430 <command_interface_send_response>
        return;
 8008a9c:	e001      	b.n	8008aa2 <cmd_test_sensor+0x1a>
    }
    
    bme680_test_sensor();
 8008a9e:	f7fc fb27 	bl	80050f0 <bme680_test_sensor>
}
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	08014f30 	.word	0x08014f30

08008aac <cmd_math_operation>:

// Command handler for mathematical operations
void cmd_math_operation(char* command)
{
 8008aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aae:	b0b1      	sub	sp, #196	@ 0xc4
 8008ab0:	af06      	add	r7, sp, #24
 8008ab2:	60f8      	str	r0, [r7, #12]
    char* operation = strtok(command, " ");
 8008ab4:	4ac9      	ldr	r2, [pc, #804]	@ (8008ddc <cmd_math_operation+0x330>)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	0011      	movs	r1, r2
 8008aba:	0018      	movs	r0, r3
 8008abc:	f008 fafc 	bl	80110b8 <strtok>
 8008ac0:	0003      	movs	r3, r0
 8008ac2:	229c      	movs	r2, #156	@ 0x9c
 8008ac4:	2508      	movs	r5, #8
 8008ac6:	1952      	adds	r2, r2, r5
 8008ac8:	19d2      	adds	r2, r2, r7
 8008aca:	6013      	str	r3, [r2, #0]
    char* num1_str = strtok(NULL, " ");
 8008acc:	4bc3      	ldr	r3, [pc, #780]	@ (8008ddc <cmd_math_operation+0x330>)
 8008ace:	0019      	movs	r1, r3
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f008 faf1 	bl	80110b8 <strtok>
 8008ad6:	0003      	movs	r3, r0
 8008ad8:	2498      	movs	r4, #152	@ 0x98
 8008ada:	1962      	adds	r2, r4, r5
 8008adc:	19d2      	adds	r2, r2, r7
 8008ade:	6013      	str	r3, [r2, #0]
    char* num2_str = strtok(NULL, " ");
 8008ae0:	4bbe      	ldr	r3, [pc, #760]	@ (8008ddc <cmd_math_operation+0x330>)
 8008ae2:	0019      	movs	r1, r3
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f008 fae7 	bl	80110b8 <strtok>
 8008aea:	0003      	movs	r3, r0
 8008aec:	2294      	movs	r2, #148	@ 0x94
 8008aee:	1951      	adds	r1, r2, r5
 8008af0:	19c9      	adds	r1, r1, r7
 8008af2:	600b      	str	r3, [r1, #0]
    char response[128];
    
    if (num1_str == NULL || num2_str == NULL) {
 8008af4:	0029      	movs	r1, r5
 8008af6:	1963      	adds	r3, r4, r5
 8008af8:	19db      	adds	r3, r3, r7
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d004      	beq.n	8008b0a <cmd_math_operation+0x5e>
 8008b00:	1853      	adds	r3, r2, r1
 8008b02:	19db      	adds	r3, r3, r7
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d104      	bne.n	8008b14 <cmd_math_operation+0x68>
        command_interface_send_response("Usage: <operation> <num1> <num2>\r\n");
 8008b0a:	4bb5      	ldr	r3, [pc, #724]	@ (8008de0 <cmd_math_operation+0x334>)
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f7ff fc8f 	bl	8008430 <command_interface_send_response>
 8008b12:	e160      	b.n	8008dd6 <cmd_math_operation+0x32a>
        return;
    }
    
    float num1 = atof(num1_str);
 8008b14:	2398      	movs	r3, #152	@ 0x98
 8008b16:	2508      	movs	r5, #8
 8008b18:	195b      	adds	r3, r3, r5
 8008b1a:	19db      	adds	r3, r3, r7
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f006 fee0 	bl	800f8e4 <atof>
 8008b24:	0002      	movs	r2, r0
 8008b26:	000b      	movs	r3, r1
 8008b28:	0010      	movs	r0, r2
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	f7fa fe8c 	bl	8003848 <__aeabi_d2f>
 8008b30:	1c03      	adds	r3, r0, #0
 8008b32:	2490      	movs	r4, #144	@ 0x90
 8008b34:	1962      	adds	r2, r4, r5
 8008b36:	19d2      	adds	r2, r2, r7
 8008b38:	6013      	str	r3, [r2, #0]
    float num2 = atof(num2_str);
 8008b3a:	2394      	movs	r3, #148	@ 0x94
 8008b3c:	195b      	adds	r3, r3, r5
 8008b3e:	19db      	adds	r3, r3, r7
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	0018      	movs	r0, r3
 8008b44:	f006 fece 	bl	800f8e4 <atof>
 8008b48:	0002      	movs	r2, r0
 8008b4a:	000b      	movs	r3, r1
 8008b4c:	0010      	movs	r0, r2
 8008b4e:	0019      	movs	r1, r3
 8008b50:	f7fa fe7a 	bl	8003848 <__aeabi_d2f>
 8008b54:	1c03      	adds	r3, r0, #0
 8008b56:	268c      	movs	r6, #140	@ 0x8c
 8008b58:	1972      	adds	r2, r6, r5
 8008b5a:	19d2      	adds	r2, r2, r7
 8008b5c:	6013      	str	r3, [r2, #0]
    float result;
    
    if (strcmp(operation, "sum") == 0) {
 8008b5e:	4aa1      	ldr	r2, [pc, #644]	@ (8008de4 <cmd_math_operation+0x338>)
 8008b60:	239c      	movs	r3, #156	@ 0x9c
 8008b62:	195b      	adds	r3, r3, r5
 8008b64:	19db      	adds	r3, r3, r7
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	0011      	movs	r1, r2
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	f7f7 faca 	bl	8000104 <strcmp>
 8008b70:	1e03      	subs	r3, r0, #0
 8008b72:	d136      	bne.n	8008be2 <cmd_math_operation+0x136>
        result = num1 + num2;
 8008b74:	1973      	adds	r3, r6, r5
 8008b76:	19db      	adds	r3, r3, r7
 8008b78:	6819      	ldr	r1, [r3, #0]
 8008b7a:	1963      	adds	r3, r4, r5
 8008b7c:	19db      	adds	r3, r3, r7
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	f7f7 fe46 	bl	8000810 <__aeabi_fadd>
 8008b84:	1c03      	adds	r3, r0, #0
 8008b86:	2288      	movs	r2, #136	@ 0x88
 8008b88:	1952      	adds	r2, r2, r5
 8008b8a:	19d1      	adds	r1, r2, r7
 8008b8c:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f + %.2f = %.2f\r\n", num1, num2, result);
 8008b8e:	1963      	adds	r3, r4, r5
 8008b90:	19d9      	adds	r1, r3, r7
 8008b92:	6808      	ldr	r0, [r1, #0]
 8008b94:	f7fa fe10 	bl	80037b8 <__aeabi_f2d>
 8008b98:	0004      	movs	r4, r0
 8008b9a:	000d      	movs	r5, r1
 8008b9c:	2208      	movs	r2, #8
 8008b9e:	18b3      	adds	r3, r6, r2
 8008ba0:	19d9      	adds	r1, r3, r7
 8008ba2:	6808      	ldr	r0, [r1, #0]
 8008ba4:	f7fa fe08 	bl	80037b8 <__aeabi_f2d>
 8008ba8:	6038      	str	r0, [r7, #0]
 8008baa:	6079      	str	r1, [r7, #4]
 8008bac:	2388      	movs	r3, #136	@ 0x88
 8008bae:	2208      	movs	r2, #8
 8008bb0:	189b      	adds	r3, r3, r2
 8008bb2:	19db      	adds	r3, r3, r7
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	f7fa fdff 	bl	80037b8 <__aeabi_f2d>
 8008bba:	0002      	movs	r2, r0
 8008bbc:	000b      	movs	r3, r1
 8008bbe:	498a      	ldr	r1, [pc, #552]	@ (8008de8 <cmd_math_operation+0x33c>)
 8008bc0:	2608      	movs	r6, #8
 8008bc2:	2008      	movs	r0, #8
 8008bc4:	1830      	adds	r0, r6, r0
 8008bc6:	19c0      	adds	r0, r0, r7
 8008bc8:	9204      	str	r2, [sp, #16]
 8008bca:	9305      	str	r3, [sp, #20]
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	9202      	str	r2, [sp, #8]
 8008bd2:	9303      	str	r3, [sp, #12]
 8008bd4:	9400      	str	r4, [sp, #0]
 8008bd6:	9501      	str	r5, [sp, #4]
 8008bd8:	000a      	movs	r2, r1
 8008bda:	2180      	movs	r1, #128	@ 0x80
 8008bdc:	f008 f9d0 	bl	8010f80 <sniprintf>
 8008be0:	e0f2      	b.n	8008dc8 <cmd_math_operation+0x31c>
    }
    else if (strcmp(operation, "sub") == 0) {
 8008be2:	4a82      	ldr	r2, [pc, #520]	@ (8008dec <cmd_math_operation+0x340>)
 8008be4:	239c      	movs	r3, #156	@ 0x9c
 8008be6:	2408      	movs	r4, #8
 8008be8:	191b      	adds	r3, r3, r4
 8008bea:	19db      	adds	r3, r3, r7
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	0011      	movs	r1, r2
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f7f7 fa87 	bl	8000104 <strcmp>
 8008bf6:	1e03      	subs	r3, r0, #0
 8008bf8:	d13a      	bne.n	8008c70 <cmd_math_operation+0x1c4>
        result = num1 - num2;
 8008bfa:	268c      	movs	r6, #140	@ 0x8c
 8008bfc:	0025      	movs	r5, r4
 8008bfe:	1973      	adds	r3, r6, r5
 8008c00:	19db      	adds	r3, r3, r7
 8008c02:	6819      	ldr	r1, [r3, #0]
 8008c04:	2490      	movs	r4, #144	@ 0x90
 8008c06:	1963      	adds	r3, r4, r5
 8008c08:	19db      	adds	r3, r3, r7
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	f7f8 fb1a 	bl	8001244 <__aeabi_fsub>
 8008c10:	1c03      	adds	r3, r0, #0
 8008c12:	2288      	movs	r2, #136	@ 0x88
 8008c14:	0028      	movs	r0, r5
 8008c16:	1812      	adds	r2, r2, r0
 8008c18:	19d1      	adds	r1, r2, r7
 8008c1a:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f - %.2f = %.2f\r\n", num1, num2, result);
 8008c1c:	1823      	adds	r3, r4, r0
 8008c1e:	19d9      	adds	r1, r3, r7
 8008c20:	6808      	ldr	r0, [r1, #0]
 8008c22:	f7fa fdc9 	bl	80037b8 <__aeabi_f2d>
 8008c26:	0004      	movs	r4, r0
 8008c28:	000d      	movs	r5, r1
 8008c2a:	2008      	movs	r0, #8
 8008c2c:	1833      	adds	r3, r6, r0
 8008c2e:	19d9      	adds	r1, r3, r7
 8008c30:	6808      	ldr	r0, [r1, #0]
 8008c32:	f7fa fdc1 	bl	80037b8 <__aeabi_f2d>
 8008c36:	6038      	str	r0, [r7, #0]
 8008c38:	6079      	str	r1, [r7, #4]
 8008c3a:	2388      	movs	r3, #136	@ 0x88
 8008c3c:	2008      	movs	r0, #8
 8008c3e:	181b      	adds	r3, r3, r0
 8008c40:	19db      	adds	r3, r3, r7
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	f7fa fdb8 	bl	80037b8 <__aeabi_f2d>
 8008c48:	0002      	movs	r2, r0
 8008c4a:	000b      	movs	r3, r1
 8008c4c:	4968      	ldr	r1, [pc, #416]	@ (8008df0 <cmd_math_operation+0x344>)
 8008c4e:	2608      	movs	r6, #8
 8008c50:	2008      	movs	r0, #8
 8008c52:	1830      	adds	r0, r6, r0
 8008c54:	19c0      	adds	r0, r0, r7
 8008c56:	9204      	str	r2, [sp, #16]
 8008c58:	9305      	str	r3, [sp, #20]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	9202      	str	r2, [sp, #8]
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	9400      	str	r4, [sp, #0]
 8008c64:	9501      	str	r5, [sp, #4]
 8008c66:	000a      	movs	r2, r1
 8008c68:	2180      	movs	r1, #128	@ 0x80
 8008c6a:	f008 f989 	bl	8010f80 <sniprintf>
 8008c6e:	e0ab      	b.n	8008dc8 <cmd_math_operation+0x31c>
    }
    else if (strcmp(operation, "mul") == 0) {
 8008c70:	4a60      	ldr	r2, [pc, #384]	@ (8008df4 <cmd_math_operation+0x348>)
 8008c72:	239c      	movs	r3, #156	@ 0x9c
 8008c74:	2408      	movs	r4, #8
 8008c76:	191b      	adds	r3, r3, r4
 8008c78:	19db      	adds	r3, r3, r7
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	0011      	movs	r1, r2
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f7f7 fa40 	bl	8000104 <strcmp>
 8008c84:	1e03      	subs	r3, r0, #0
 8008c86:	d13a      	bne.n	8008cfe <cmd_math_operation+0x252>
        result = num1 * num2;
 8008c88:	268c      	movs	r6, #140	@ 0x8c
 8008c8a:	0025      	movs	r5, r4
 8008c8c:	1973      	adds	r3, r6, r5
 8008c8e:	19db      	adds	r3, r3, r7
 8008c90:	6819      	ldr	r1, [r3, #0]
 8008c92:	2490      	movs	r4, #144	@ 0x90
 8008c94:	1963      	adds	r3, r4, r5
 8008c96:	19db      	adds	r3, r3, r7
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f7f8 f979 	bl	8000f90 <__aeabi_fmul>
 8008c9e:	1c03      	adds	r3, r0, #0
 8008ca0:	2288      	movs	r2, #136	@ 0x88
 8008ca2:	0028      	movs	r0, r5
 8008ca4:	1812      	adds	r2, r2, r0
 8008ca6:	19d1      	adds	r1, r2, r7
 8008ca8:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f * %.2f = %.2f\r\n", num1, num2, result);
 8008caa:	1823      	adds	r3, r4, r0
 8008cac:	19d9      	adds	r1, r3, r7
 8008cae:	6808      	ldr	r0, [r1, #0]
 8008cb0:	f7fa fd82 	bl	80037b8 <__aeabi_f2d>
 8008cb4:	0004      	movs	r4, r0
 8008cb6:	000d      	movs	r5, r1
 8008cb8:	2008      	movs	r0, #8
 8008cba:	1833      	adds	r3, r6, r0
 8008cbc:	19d9      	adds	r1, r3, r7
 8008cbe:	6808      	ldr	r0, [r1, #0]
 8008cc0:	f7fa fd7a 	bl	80037b8 <__aeabi_f2d>
 8008cc4:	6038      	str	r0, [r7, #0]
 8008cc6:	6079      	str	r1, [r7, #4]
 8008cc8:	2388      	movs	r3, #136	@ 0x88
 8008cca:	2008      	movs	r0, #8
 8008ccc:	181b      	adds	r3, r3, r0
 8008cce:	19db      	adds	r3, r3, r7
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f7fa fd71 	bl	80037b8 <__aeabi_f2d>
 8008cd6:	0002      	movs	r2, r0
 8008cd8:	000b      	movs	r3, r1
 8008cda:	4947      	ldr	r1, [pc, #284]	@ (8008df8 <cmd_math_operation+0x34c>)
 8008cdc:	2608      	movs	r6, #8
 8008cde:	2008      	movs	r0, #8
 8008ce0:	1830      	adds	r0, r6, r0
 8008ce2:	19c0      	adds	r0, r0, r7
 8008ce4:	9204      	str	r2, [sp, #16]
 8008ce6:	9305      	str	r3, [sp, #20]
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	9202      	str	r2, [sp, #8]
 8008cee:	9303      	str	r3, [sp, #12]
 8008cf0:	9400      	str	r4, [sp, #0]
 8008cf2:	9501      	str	r5, [sp, #4]
 8008cf4:	000a      	movs	r2, r1
 8008cf6:	2180      	movs	r1, #128	@ 0x80
 8008cf8:	f008 f942 	bl	8010f80 <sniprintf>
 8008cfc:	e064      	b.n	8008dc8 <cmd_math_operation+0x31c>
    }
    else if (strcmp(operation, "div") == 0) {
 8008cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8008dfc <cmd_math_operation+0x350>)
 8008d00:	239c      	movs	r3, #156	@ 0x9c
 8008d02:	2408      	movs	r4, #8
 8008d04:	191b      	adds	r3, r3, r4
 8008d06:	19db      	adds	r3, r3, r7
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	0011      	movs	r1, r2
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f7f7 f9f9 	bl	8000104 <strcmp>
 8008d12:	1e03      	subs	r3, r0, #0
 8008d14:	d14c      	bne.n	8008db0 <cmd_math_operation+0x304>
        if (num2 != 0) {
 8008d16:	2100      	movs	r1, #0
 8008d18:	268c      	movs	r6, #140	@ 0x8c
 8008d1a:	1933      	adds	r3, r6, r4
 8008d1c:	19db      	adds	r3, r3, r7
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	f7f7 fbd6 	bl	80004d0 <__aeabi_fcmpeq>
 8008d24:	1e03      	subs	r3, r0, #0
 8008d26:	d139      	bne.n	8008d9c <cmd_math_operation+0x2f0>
            result = num1 / num2;
 8008d28:	0025      	movs	r5, r4
 8008d2a:	1933      	adds	r3, r6, r4
 8008d2c:	19db      	adds	r3, r3, r7
 8008d2e:	6819      	ldr	r1, [r3, #0]
 8008d30:	2490      	movs	r4, #144	@ 0x90
 8008d32:	1963      	adds	r3, r4, r5
 8008d34:	19db      	adds	r3, r3, r7
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	f7f7 ff5c 	bl	8000bf4 <__aeabi_fdiv>
 8008d3c:	1c03      	adds	r3, r0, #0
 8008d3e:	2288      	movs	r2, #136	@ 0x88
 8008d40:	0028      	movs	r0, r5
 8008d42:	1812      	adds	r2, r2, r0
 8008d44:	19d1      	adds	r1, r2, r7
 8008d46:	600b      	str	r3, [r1, #0]
            snprintf(response, sizeof(response), "%.2f / %.2f = %.2f\r\n", num1, num2, result);
 8008d48:	1823      	adds	r3, r4, r0
 8008d4a:	19d9      	adds	r1, r3, r7
 8008d4c:	6808      	ldr	r0, [r1, #0]
 8008d4e:	f7fa fd33 	bl	80037b8 <__aeabi_f2d>
 8008d52:	0004      	movs	r4, r0
 8008d54:	000d      	movs	r5, r1
 8008d56:	2008      	movs	r0, #8
 8008d58:	1833      	adds	r3, r6, r0
 8008d5a:	19d9      	adds	r1, r3, r7
 8008d5c:	6808      	ldr	r0, [r1, #0]
 8008d5e:	f7fa fd2b 	bl	80037b8 <__aeabi_f2d>
 8008d62:	6038      	str	r0, [r7, #0]
 8008d64:	6079      	str	r1, [r7, #4]
 8008d66:	2388      	movs	r3, #136	@ 0x88
 8008d68:	2008      	movs	r0, #8
 8008d6a:	181b      	adds	r3, r3, r0
 8008d6c:	19db      	adds	r3, r3, r7
 8008d6e:	6818      	ldr	r0, [r3, #0]
 8008d70:	f7fa fd22 	bl	80037b8 <__aeabi_f2d>
 8008d74:	0002      	movs	r2, r0
 8008d76:	000b      	movs	r3, r1
 8008d78:	4921      	ldr	r1, [pc, #132]	@ (8008e00 <cmd_math_operation+0x354>)
 8008d7a:	2608      	movs	r6, #8
 8008d7c:	2008      	movs	r0, #8
 8008d7e:	1830      	adds	r0, r6, r0
 8008d80:	19c0      	adds	r0, r0, r7
 8008d82:	9204      	str	r2, [sp, #16]
 8008d84:	9305      	str	r3, [sp, #20]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	9202      	str	r2, [sp, #8]
 8008d8c:	9303      	str	r3, [sp, #12]
 8008d8e:	9400      	str	r4, [sp, #0]
 8008d90:	9501      	str	r5, [sp, #4]
 8008d92:	000a      	movs	r2, r1
 8008d94:	2180      	movs	r1, #128	@ 0x80
 8008d96:	f008 f8f3 	bl	8010f80 <sniprintf>
 8008d9a:	e015      	b.n	8008dc8 <cmd_math_operation+0x31c>
        } else {
            snprintf(response, sizeof(response), "Error: Division by zero\r\n");
 8008d9c:	4a19      	ldr	r2, [pc, #100]	@ (8008e04 <cmd_math_operation+0x358>)
 8008d9e:	2308      	movs	r3, #8
 8008da0:	2108      	movs	r1, #8
 8008da2:	185b      	adds	r3, r3, r1
 8008da4:	19db      	adds	r3, r3, r7
 8008da6:	2180      	movs	r1, #128	@ 0x80
 8008da8:	0018      	movs	r0, r3
 8008daa:	f008 f8e9 	bl	8010f80 <sniprintf>
 8008dae:	e00b      	b.n	8008dc8 <cmd_math_operation+0x31c>
        }
    }
    else {
        snprintf(response, sizeof(response), "Unknown operation: %s\r\n", operation);
 8008db0:	239c      	movs	r3, #156	@ 0x9c
 8008db2:	2008      	movs	r0, #8
 8008db4:	181b      	adds	r3, r3, r0
 8008db6:	19db      	adds	r3, r3, r7
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a13      	ldr	r2, [pc, #76]	@ (8008e08 <cmd_math_operation+0x35c>)
 8008dbc:	2108      	movs	r1, #8
 8008dbe:	1809      	adds	r1, r1, r0
 8008dc0:	19c8      	adds	r0, r1, r7
 8008dc2:	2180      	movs	r1, #128	@ 0x80
 8008dc4:	f008 f8dc 	bl	8010f80 <sniprintf>
    }
    
    command_interface_send_response(response);
 8008dc8:	2308      	movs	r3, #8
 8008dca:	2208      	movs	r2, #8
 8008dcc:	189b      	adds	r3, r3, r2
 8008dce:	19db      	adds	r3, r3, r7
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f7ff fb2d 	bl	8008430 <command_interface_send_response>
}
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	b02b      	add	sp, #172	@ 0xac
 8008dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ddc:	0801505c 	.word	0x0801505c
 8008de0:	08015060 	.word	0x08015060
 8008de4:	08015084 	.word	0x08015084
 8008de8:	08015088 	.word	0x08015088
 8008dec:	080150a0 	.word	0x080150a0
 8008df0:	080150a4 	.word	0x080150a4
 8008df4:	080150bc 	.word	0x080150bc
 8008df8:	080150c0 	.word	0x080150c0
 8008dfc:	080150d8 	.word	0x080150d8
 8008e00:	080150dc 	.word	0x080150dc
 8008e04:	080150f4 	.word	0x080150f4
 8008e08:	08015110 	.word	0x08015110

08008e0c <command_interface_show_help_usart4>:

// Show help menu for USART4
void command_interface_show_help_usart4(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
    command_interface_send_response_usart4("\r\n=== Available Commands (USART4) ===\r\n");
 8008e10:	4b2b      	ldr	r3, [pc, #172]	@ (8008ec0 <command_interface_show_help_usart4+0xb4>)
 8008e12:	0018      	movs	r0, r3
 8008e14:	f7ff fb22 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("Sensor Commands:\r\n");
 8008e18:	4b2a      	ldr	r3, [pc, #168]	@ (8008ec4 <command_interface_show_help_usart4+0xb8>)
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	f7ff fb1e 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  read temperature (rt) - Read temperature from BME680\r\n");
 8008e20:	4b29      	ldr	r3, [pc, #164]	@ (8008ec8 <command_interface_show_help_usart4+0xbc>)
 8008e22:	0018      	movs	r0, r3
 8008e24:	f7ff fb1a 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  read pressure (rp)    - Read pressure from BME680\r\n");
 8008e28:	4b28      	ldr	r3, [pc, #160]	@ (8008ecc <command_interface_show_help_usart4+0xc0>)
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f7ff fb16 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  read humidity (rh)    - Read humidity from BME680\r\n");
 8008e30:	4b27      	ldr	r3, [pc, #156]	@ (8008ed0 <command_interface_show_help_usart4+0xc4>)
 8008e32:	0018      	movs	r0, r3
 8008e34:	f7ff fb12 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  test sensor (ts)      - Test BME680 sensor\r\n");
 8008e38:	4b26      	ldr	r3, [pc, #152]	@ (8008ed4 <command_interface_show_help_usart4+0xc8>)
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	f7ff fb0e 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  raw registers (rr)    - Read raw BME680 registers\r\n");
 8008e40:	4b25      	ldr	r3, [pc, #148]	@ (8008ed8 <command_interface_show_help_usart4+0xcc>)
 8008e42:	0018      	movs	r0, r3
 8008e44:	f7ff fb0a 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  raw adc (ra)          - Read raw BME680 ADC values\r\n");
 8008e48:	4b24      	ldr	r3, [pc, #144]	@ (8008edc <command_interface_show_help_usart4+0xd0>)
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	f7ff fb06 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  calib data (cd)       - Check BME680 calibration data\r\n");
 8008e50:	4b23      	ldr	r3, [pc, #140]	@ (8008ee0 <command_interface_show_help_usart4+0xd4>)
 8008e52:	0018      	movs	r0, r3
 8008e54:	f7ff fb02 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  scan i2c (si)         - Scan I2C bus for devices\r\n");
 8008e58:	4b22      	ldr	r3, [pc, #136]	@ (8008ee4 <command_interface_show_help_usart4+0xd8>)
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	f7ff fafe 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora broadcast (lb)   - Broadcast sensor data via LoRa\r\n");
 8008e60:	4b21      	ldr	r3, [pc, #132]	@ (8008ee8 <command_interface_show_help_usart4+0xdc>)
 8008e62:	0018      	movs	r0, r3
 8008e64:	f7ff fafa 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora config (lc)      - Show LoRa configuration\r\n");
 8008e68:	4b20      	ldr	r3, [pc, #128]	@ (8008eec <command_interface_show_help_usart4+0xe0>)
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	f7ff faf6 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora test (lt)        - Test LoRa transmission\r\n");
 8008e70:	4b1f      	ldr	r3, [pc, #124]	@ (8008ef0 <command_interface_show_help_usart4+0xe4>)
 8008e72:	0018      	movs	r0, r3
 8008e74:	f7ff faf2 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("\r\nMath Operations:\r\n");
 8008e78:	4b1e      	ldr	r3, [pc, #120]	@ (8008ef4 <command_interface_show_help_usart4+0xe8>)
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	f7ff faee 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  sum <num1> <num2>     - Add two numbers\r\n");
 8008e80:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef8 <command_interface_show_help_usart4+0xec>)
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7ff faea 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  sub <num1> <num2>     - Subtract num2 from num1\r\n");
 8008e88:	4b1c      	ldr	r3, [pc, #112]	@ (8008efc <command_interface_show_help_usart4+0xf0>)
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f7ff fae6 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  mul <num1> <num2>     - Multiply two numbers\r\n");
 8008e90:	4b1b      	ldr	r3, [pc, #108]	@ (8008f00 <command_interface_show_help_usart4+0xf4>)
 8008e92:	0018      	movs	r0, r3
 8008e94:	f7ff fae2 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  div <num1> <num2>     - Divide num1 by num2\r\n");
 8008e98:	4b1a      	ldr	r3, [pc, #104]	@ (8008f04 <command_interface_show_help_usart4+0xf8>)
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f7ff fade 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("\r\nSystem:\r\n");
 8008ea0:	4b19      	ldr	r3, [pc, #100]	@ (8008f08 <command_interface_show_help_usart4+0xfc>)
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7ff fada 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  help                  - Show this help menu\r\n");
 8008ea8:	4b18      	ldr	r3, [pc, #96]	@ (8008f0c <command_interface_show_help_usart4+0x100>)
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f7ff fad6 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("========================\r\n");
 8008eb0:	4b17      	ldr	r3, [pc, #92]	@ (8008f10 <command_interface_show_help_usart4+0x104>)
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f7ff fad2 	bl	800845c <command_interface_send_response_usart4>
}
 8008eb8:	46c0      	nop			@ (mov r8, r8)
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	46c0      	nop			@ (mov r8, r8)
 8008ec0:	08015128 	.word	0x08015128
 8008ec4:	080149fc 	.word	0x080149fc
 8008ec8:	08014a10 	.word	0x08014a10
 8008ecc:	08014a4c 	.word	0x08014a4c
 8008ed0:	08014a84 	.word	0x08014a84
 8008ed4:	08014abc 	.word	0x08014abc
 8008ed8:	08014aec 	.word	0x08014aec
 8008edc:	08014b24 	.word	0x08014b24
 8008ee0:	08014b5c 	.word	0x08014b5c
 8008ee4:	08014b98 	.word	0x08014b98
 8008ee8:	08014bd0 	.word	0x08014bd0
 8008eec:	08014c0c 	.word	0x08014c0c
 8008ef0:	08014c40 	.word	0x08014c40
 8008ef4:	08014c74 	.word	0x08014c74
 8008ef8:	08014c8c 	.word	0x08014c8c
 8008efc:	08014cb8 	.word	0x08014cb8
 8008f00:	08014cec 	.word	0x08014cec
 8008f04:	08014d20 	.word	0x08014d20
 8008f08:	08014d50 	.word	0x08014d50
 8008f0c:	08014d5c 	.word	0x08014d5c
 8008f10:	08014d8c 	.word	0x08014d8c

08008f14 <command_interface_handle_command_usart4>:

// Handle incoming commands for USART4
void command_interface_handle_command_usart4(char* command)
{
 8008f14:	b590      	push	{r4, r7, lr}
 8008f16:	b0c3      	sub	sp, #268	@ 0x10c
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
    char response[256];
    
    // Check if system is started
    if (!system_started_usart4) {
 8008f1c:	4b9d      	ldr	r3, [pc, #628]	@ (8009194 <command_interface_handle_command_usart4+0x280>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d118      	bne.n	8008f56 <command_interface_handle_command_usart4+0x42>
        if (strcmp(command, "start") == 0) {
 8008f24:	4a9c      	ldr	r2, [pc, #624]	@ (8009198 <command_interface_handle_command_usart4+0x284>)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	0011      	movs	r1, r2
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f7f7 f8ea 	bl	8000104 <strcmp>
 8008f30:	1e03      	subs	r3, r0, #0
 8008f32:	d10b      	bne.n	8008f4c <command_interface_handle_command_usart4+0x38>
            system_started_usart4 = 1;
 8008f34:	4b97      	ldr	r3, [pc, #604]	@ (8009194 <command_interface_handle_command_usart4+0x280>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	701a      	strb	r2, [r3, #0]
            command_interface_send_response_usart4("System started! Type 'help' for available commands.\r\n");
 8008f3a:	4b98      	ldr	r3, [pc, #608]	@ (800919c <command_interface_handle_command_usart4+0x288>)
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f7ff fa8d 	bl	800845c <command_interface_send_response_usart4>
            command_interface_send_response_usart4("> ");
 8008f42:	4b97      	ldr	r3, [pc, #604]	@ (80091a0 <command_interface_handle_command_usart4+0x28c>)
 8008f44:	0018      	movs	r0, r3
 8008f46:	f7ff fa89 	bl	800845c <command_interface_send_response_usart4>
            return;
 8008f4a:	e120      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
        } else {
            command_interface_send_response_usart4("Please type 'start' to begin.\r\n");
 8008f4c:	4b95      	ldr	r3, [pc, #596]	@ (80091a4 <command_interface_handle_command_usart4+0x290>)
 8008f4e:	0018      	movs	r0, r3
 8008f50:	f7ff fa84 	bl	800845c <command_interface_send_response_usart4>
            return;
 8008f54:	e11b      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
        }
    }
    
    // Parse commands (full and abbreviated versions)
    if (strcmp(command, "read temperature") == 0 || strcmp(command, "rt") == 0) {
 8008f56:	4a94      	ldr	r2, [pc, #592]	@ (80091a8 <command_interface_handle_command_usart4+0x294>)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	0011      	movs	r1, r2
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f7f7 f8d1 	bl	8000104 <strcmp>
 8008f62:	1e03      	subs	r3, r0, #0
 8008f64:	d007      	beq.n	8008f76 <command_interface_handle_command_usart4+0x62>
 8008f66:	4a91      	ldr	r2, [pc, #580]	@ (80091ac <command_interface_handle_command_usart4+0x298>)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	0011      	movs	r1, r2
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f7f7 f8c9 	bl	8000104 <strcmp>
 8008f72:	1e03      	subs	r3, r0, #0
 8008f74:	d102      	bne.n	8008f7c <command_interface_handle_command_usart4+0x68>
        cmd_read_temperature_usart4();
 8008f76:	f000 f94f 	bl	8009218 <cmd_read_temperature_usart4>
 8008f7a:	e108      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "read pressure") == 0 || strcmp(command, "rp") == 0) {
 8008f7c:	4a8c      	ldr	r2, [pc, #560]	@ (80091b0 <command_interface_handle_command_usart4+0x29c>)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	0011      	movs	r1, r2
 8008f82:	0018      	movs	r0, r3
 8008f84:	f7f7 f8be 	bl	8000104 <strcmp>
 8008f88:	1e03      	subs	r3, r0, #0
 8008f8a:	d007      	beq.n	8008f9c <command_interface_handle_command_usart4+0x88>
 8008f8c:	4a89      	ldr	r2, [pc, #548]	@ (80091b4 <command_interface_handle_command_usart4+0x2a0>)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	0011      	movs	r1, r2
 8008f92:	0018      	movs	r0, r3
 8008f94:	f7f7 f8b6 	bl	8000104 <strcmp>
 8008f98:	1e03      	subs	r3, r0, #0
 8008f9a:	d102      	bne.n	8008fa2 <command_interface_handle_command_usart4+0x8e>
        cmd_read_pressure_usart4();
 8008f9c:	f000 f978 	bl	8009290 <cmd_read_pressure_usart4>
 8008fa0:	e0f5      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "read humidity") == 0 || strcmp(command, "rh") == 0) {
 8008fa2:	4a85      	ldr	r2, [pc, #532]	@ (80091b8 <command_interface_handle_command_usart4+0x2a4>)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	0011      	movs	r1, r2
 8008fa8:	0018      	movs	r0, r3
 8008faa:	f7f7 f8ab 	bl	8000104 <strcmp>
 8008fae:	1e03      	subs	r3, r0, #0
 8008fb0:	d007      	beq.n	8008fc2 <command_interface_handle_command_usart4+0xae>
 8008fb2:	4a82      	ldr	r2, [pc, #520]	@ (80091bc <command_interface_handle_command_usart4+0x2a8>)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	0011      	movs	r1, r2
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f7f7 f8a3 	bl	8000104 <strcmp>
 8008fbe:	1e03      	subs	r3, r0, #0
 8008fc0:	d102      	bne.n	8008fc8 <command_interface_handle_command_usart4+0xb4>
        cmd_read_humidity_usart4();
 8008fc2:	f000 f9a1 	bl	8009308 <cmd_read_humidity_usart4>
 8008fc6:	e0e2      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "test sensor") == 0 || strcmp(command, "ts") == 0) {
 8008fc8:	4a7d      	ldr	r2, [pc, #500]	@ (80091c0 <command_interface_handle_command_usart4+0x2ac>)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	0011      	movs	r1, r2
 8008fce:	0018      	movs	r0, r3
 8008fd0:	f7f7 f898 	bl	8000104 <strcmp>
 8008fd4:	1e03      	subs	r3, r0, #0
 8008fd6:	d007      	beq.n	8008fe8 <command_interface_handle_command_usart4+0xd4>
 8008fd8:	4a7a      	ldr	r2, [pc, #488]	@ (80091c4 <command_interface_handle_command_usart4+0x2b0>)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	0011      	movs	r1, r2
 8008fde:	0018      	movs	r0, r3
 8008fe0:	f7f7 f890 	bl	8000104 <strcmp>
 8008fe4:	1e03      	subs	r3, r0, #0
 8008fe6:	d102      	bne.n	8008fee <command_interface_handle_command_usart4+0xda>
        cmd_test_sensor_usart4();
 8008fe8:	f000 f9ca 	bl	8009380 <cmd_test_sensor_usart4>
 8008fec:	e0cf      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "raw registers") == 0 || strcmp(command, "rr") == 0) {
 8008fee:	4a76      	ldr	r2, [pc, #472]	@ (80091c8 <command_interface_handle_command_usart4+0x2b4>)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	0011      	movs	r1, r2
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	f7f7 f885 	bl	8000104 <strcmp>
 8008ffa:	1e03      	subs	r3, r0, #0
 8008ffc:	d007      	beq.n	800900e <command_interface_handle_command_usart4+0xfa>
 8008ffe:	4a73      	ldr	r2, [pc, #460]	@ (80091cc <command_interface_handle_command_usart4+0x2b8>)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	0011      	movs	r1, r2
 8009004:	0018      	movs	r0, r3
 8009006:	f7f7 f87d 	bl	8000104 <strcmp>
 800900a:	1e03      	subs	r3, r0, #0
 800900c:	d102      	bne.n	8009014 <command_interface_handle_command_usart4+0x100>
        bme680_read_raw_registers();
 800900e:	f7fb ffc1 	bl	8004f94 <bme680_read_raw_registers>
 8009012:	e0bc      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "raw adc") == 0 || strcmp(command, "ra") == 0) {
 8009014:	4a6e      	ldr	r2, [pc, #440]	@ (80091d0 <command_interface_handle_command_usart4+0x2bc>)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	0011      	movs	r1, r2
 800901a:	0018      	movs	r0, r3
 800901c:	f7f7 f872 	bl	8000104 <strcmp>
 8009020:	1e03      	subs	r3, r0, #0
 8009022:	d007      	beq.n	8009034 <command_interface_handle_command_usart4+0x120>
 8009024:	4a6b      	ldr	r2, [pc, #428]	@ (80091d4 <command_interface_handle_command_usart4+0x2c0>)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	0011      	movs	r1, r2
 800902a:	0018      	movs	r0, r3
 800902c:	f7f7 f86a 	bl	8000104 <strcmp>
 8009030:	1e03      	subs	r3, r0, #0
 8009032:	d102      	bne.n	800903a <command_interface_handle_command_usart4+0x126>
        bme680_read_raw_adc_values();
 8009034:	f7fb fef6 	bl	8004e24 <bme680_read_raw_adc_values>
 8009038:	e0a9      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "calib data") == 0 || strcmp(command, "cd") == 0) {
 800903a:	4a67      	ldr	r2, [pc, #412]	@ (80091d8 <command_interface_handle_command_usart4+0x2c4>)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	0011      	movs	r1, r2
 8009040:	0018      	movs	r0, r3
 8009042:	f7f7 f85f 	bl	8000104 <strcmp>
 8009046:	1e03      	subs	r3, r0, #0
 8009048:	d007      	beq.n	800905a <command_interface_handle_command_usart4+0x146>
 800904a:	4a64      	ldr	r2, [pc, #400]	@ (80091dc <command_interface_handle_command_usart4+0x2c8>)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	0011      	movs	r1, r2
 8009050:	0018      	movs	r0, r3
 8009052:	f7f7 f857 	bl	8000104 <strcmp>
 8009056:	1e03      	subs	r3, r0, #0
 8009058:	d102      	bne.n	8009060 <command_interface_handle_command_usart4+0x14c>
        bme680_check_calibration_data();
 800905a:	f7fb fe43 	bl	8004ce4 <bme680_check_calibration_data>
 800905e:	e096      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "scan i2c") == 0 || strcmp(command, "si") == 0) {
 8009060:	4a5f      	ldr	r2, [pc, #380]	@ (80091e0 <command_interface_handle_command_usart4+0x2cc>)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	0011      	movs	r1, r2
 8009066:	0018      	movs	r0, r3
 8009068:	f7f7 f84c 	bl	8000104 <strcmp>
 800906c:	1e03      	subs	r3, r0, #0
 800906e:	d007      	beq.n	8009080 <command_interface_handle_command_usart4+0x16c>
 8009070:	4a5c      	ldr	r2, [pc, #368]	@ (80091e4 <command_interface_handle_command_usart4+0x2d0>)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	0011      	movs	r1, r2
 8009076:	0018      	movs	r0, r3
 8009078:	f7f7 f844 	bl	8000104 <strcmp>
 800907c:	1e03      	subs	r3, r0, #0
 800907e:	d102      	bne.n	8009086 <command_interface_handle_command_usart4+0x172>
        i2c_scan_bus();
 8009080:	f7fa fcb2 	bl	80039e8 <i2c_scan_bus>
 8009084:	e083      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "lora broadcast") == 0 || strcmp(command, "lb") == 0) {
 8009086:	4a58      	ldr	r2, [pc, #352]	@ (80091e8 <command_interface_handle_command_usart4+0x2d4>)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	0011      	movs	r1, r2
 800908c:	0018      	movs	r0, r3
 800908e:	f7f7 f839 	bl	8000104 <strcmp>
 8009092:	1e03      	subs	r3, r0, #0
 8009094:	d007      	beq.n	80090a6 <command_interface_handle_command_usart4+0x192>
 8009096:	4a55      	ldr	r2, [pc, #340]	@ (80091ec <command_interface_handle_command_usart4+0x2d8>)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	0011      	movs	r1, r2
 800909c:	0018      	movs	r0, r3
 800909e:	f7f7 f831 	bl	8000104 <strcmp>
 80090a2:	1e03      	subs	r3, r0, #0
 80090a4:	d102      	bne.n	80090ac <command_interface_handle_command_usart4+0x198>
        cmd_lora_broadcast_usart4();
 80090a6:	f000 fbf7 	bl	8009898 <cmd_lora_broadcast_usart4>
 80090aa:	e070      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "lora config") == 0 || strcmp(command, "lc") == 0) {
 80090ac:	4a50      	ldr	r2, [pc, #320]	@ (80091f0 <command_interface_handle_command_usart4+0x2dc>)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	0011      	movs	r1, r2
 80090b2:	0018      	movs	r0, r3
 80090b4:	f7f7 f826 	bl	8000104 <strcmp>
 80090b8:	1e03      	subs	r3, r0, #0
 80090ba:	d007      	beq.n	80090cc <command_interface_handle_command_usart4+0x1b8>
 80090bc:	4a4d      	ldr	r2, [pc, #308]	@ (80091f4 <command_interface_handle_command_usart4+0x2e0>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	0011      	movs	r1, r2
 80090c2:	0018      	movs	r0, r3
 80090c4:	f7f7 f81e 	bl	8000104 <strcmp>
 80090c8:	1e03      	subs	r3, r0, #0
 80090ca:	d102      	bne.n	80090d2 <command_interface_handle_command_usart4+0x1be>
        lora_print_config();
 80090cc:	f000 ffda 	bl	800a084 <lora_print_config>
 80090d0:	e05d      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "lora test") == 0 || strcmp(command, "lt") == 0) {
 80090d2:	4a49      	ldr	r2, [pc, #292]	@ (80091f8 <command_interface_handle_command_usart4+0x2e4>)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	0011      	movs	r1, r2
 80090d8:	0018      	movs	r0, r3
 80090da:	f7f7 f813 	bl	8000104 <strcmp>
 80090de:	1e03      	subs	r3, r0, #0
 80090e0:	d007      	beq.n	80090f2 <command_interface_handle_command_usart4+0x1de>
 80090e2:	4a46      	ldr	r2, [pc, #280]	@ (80091fc <command_interface_handle_command_usart4+0x2e8>)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	0011      	movs	r1, r2
 80090e8:	0018      	movs	r0, r3
 80090ea:	f7f7 f80b 	bl	8000104 <strcmp>
 80090ee:	1e03      	subs	r3, r0, #0
 80090f0:	d102      	bne.n	80090f8 <command_interface_handle_command_usart4+0x1e4>
        lora_test_transmission();
 80090f2:	f001 f841 	bl	800a178 <lora_test_transmission>
 80090f6:	e04a      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strncmp(command, "sum ", 4) == 0) {
 80090f8:	4941      	ldr	r1, [pc, #260]	@ (8009200 <command_interface_handle_command_usart4+0x2ec>)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2204      	movs	r2, #4
 80090fe:	0018      	movs	r0, r3
 8009100:	f007 ffc8 	bl	8011094 <strncmp>
 8009104:	1e03      	subs	r3, r0, #0
 8009106:	d104      	bne.n	8009112 <command_interface_handle_command_usart4+0x1fe>
        cmd_math_operation_usart4(command);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	0018      	movs	r0, r3
 800910c:	f000 f998 	bl	8009440 <cmd_math_operation_usart4>
 8009110:	e03d      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strncmp(command, "sub ", 4) == 0) {
 8009112:	493c      	ldr	r1, [pc, #240]	@ (8009204 <command_interface_handle_command_usart4+0x2f0>)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2204      	movs	r2, #4
 8009118:	0018      	movs	r0, r3
 800911a:	f007 ffbb 	bl	8011094 <strncmp>
 800911e:	1e03      	subs	r3, r0, #0
 8009120:	d104      	bne.n	800912c <command_interface_handle_command_usart4+0x218>
        cmd_math_operation_usart4(command);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	0018      	movs	r0, r3
 8009126:	f000 f98b 	bl	8009440 <cmd_math_operation_usart4>
 800912a:	e030      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strncmp(command, "mul ", 4) == 0) {
 800912c:	4936      	ldr	r1, [pc, #216]	@ (8009208 <command_interface_handle_command_usart4+0x2f4>)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2204      	movs	r2, #4
 8009132:	0018      	movs	r0, r3
 8009134:	f007 ffae 	bl	8011094 <strncmp>
 8009138:	1e03      	subs	r3, r0, #0
 800913a:	d104      	bne.n	8009146 <command_interface_handle_command_usart4+0x232>
        cmd_math_operation_usart4(command);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	0018      	movs	r0, r3
 8009140:	f000 f97e 	bl	8009440 <cmd_math_operation_usart4>
 8009144:	e023      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strncmp(command, "div ", 4) == 0) {
 8009146:	4931      	ldr	r1, [pc, #196]	@ (800920c <command_interface_handle_command_usart4+0x2f8>)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2204      	movs	r2, #4
 800914c:	0018      	movs	r0, r3
 800914e:	f007 ffa1 	bl	8011094 <strncmp>
 8009152:	1e03      	subs	r3, r0, #0
 8009154:	d104      	bne.n	8009160 <command_interface_handle_command_usart4+0x24c>
        cmd_math_operation_usart4(command);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	0018      	movs	r0, r3
 800915a:	f000 f971 	bl	8009440 <cmd_math_operation_usart4>
 800915e:	e016      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else if (strcmp(command, "help") == 0) {
 8009160:	4a2b      	ldr	r2, [pc, #172]	@ (8009210 <command_interface_handle_command_usart4+0x2fc>)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	0011      	movs	r1, r2
 8009166:	0018      	movs	r0, r3
 8009168:	f7f6 ffcc 	bl	8000104 <strcmp>
 800916c:	1e03      	subs	r3, r0, #0
 800916e:	d102      	bne.n	8009176 <command_interface_handle_command_usart4+0x262>
        command_interface_show_help_usart4();
 8009170:	f7ff fe4c 	bl	8008e0c <command_interface_show_help_usart4>
 8009174:	e00b      	b.n	800918e <command_interface_handle_command_usart4+0x27a>
    }
    else {
        snprintf(response, sizeof(response), "Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a26      	ldr	r2, [pc, #152]	@ (8009214 <command_interface_handle_command_usart4+0x300>)
 800917a:	2180      	movs	r1, #128	@ 0x80
 800917c:	0049      	lsls	r1, r1, #1
 800917e:	2408      	movs	r4, #8
 8009180:	1938      	adds	r0, r7, r4
 8009182:	f007 fefd 	bl	8010f80 <sniprintf>
        command_interface_send_response_usart4(response);
 8009186:	193b      	adds	r3, r7, r4
 8009188:	0018      	movs	r0, r3
 800918a:	f7ff f967 	bl	800845c <command_interface_send_response_usart4>
    }
}
 800918e:	46bd      	mov	sp, r7
 8009190:	b043      	add	sp, #268	@ 0x10c
 8009192:	bd90      	pop	{r4, r7, pc}
 8009194:	200002e3 	.word	0x200002e3
 8009198:	08014da8 	.word	0x08014da8
 800919c:	08014db0 	.word	0x08014db0
 80091a0:	080149d8 	.word	0x080149d8
 80091a4:	08014de8 	.word	0x08014de8
 80091a8:	08014e08 	.word	0x08014e08
 80091ac:	08014e1c 	.word	0x08014e1c
 80091b0:	08014e20 	.word	0x08014e20
 80091b4:	08014e30 	.word	0x08014e30
 80091b8:	08014e34 	.word	0x08014e34
 80091bc:	08014e44 	.word	0x08014e44
 80091c0:	08014e48 	.word	0x08014e48
 80091c4:	08014e54 	.word	0x08014e54
 80091c8:	08014e58 	.word	0x08014e58
 80091cc:	08014e68 	.word	0x08014e68
 80091d0:	08014e6c 	.word	0x08014e6c
 80091d4:	08014e74 	.word	0x08014e74
 80091d8:	08014e78 	.word	0x08014e78
 80091dc:	08014e84 	.word	0x08014e84
 80091e0:	08014e88 	.word	0x08014e88
 80091e4:	08014e94 	.word	0x08014e94
 80091e8:	08014e98 	.word	0x08014e98
 80091ec:	08014ea8 	.word	0x08014ea8
 80091f0:	08014eac 	.word	0x08014eac
 80091f4:	08014eb8 	.word	0x08014eb8
 80091f8:	08014ebc 	.word	0x08014ebc
 80091fc:	08014ec8 	.word	0x08014ec8
 8009200:	08014ecc 	.word	0x08014ecc
 8009204:	08014ed4 	.word	0x08014ed4
 8009208:	08014edc 	.word	0x08014edc
 800920c:	08014ee4 	.word	0x08014ee4
 8009210:	08014eec 	.word	0x08014eec
 8009214:	08014ef4 	.word	0x08014ef4

08009218 <cmd_read_temperature_usart4>:

// USART4 Command handlers

// Command handler for reading temperature (USART4)
void cmd_read_temperature_usart4(void)
{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b0a9      	sub	sp, #164	@ 0xa4
 800921c:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800921e:	f7fa fd1f 	bl	8003c60 <bme680_check_sensor_presence>
 8009222:	1e03      	subs	r3, r0, #0
 8009224:	d00a      	beq.n	800923c <cmd_read_temperature_usart4+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 8009226:	4a17      	ldr	r2, [pc, #92]	@ (8009284 <cmd_read_temperature_usart4+0x6c>)
 8009228:	003b      	movs	r3, r7
 800922a:	2180      	movs	r1, #128	@ 0x80
 800922c:	0018      	movs	r0, r3
 800922e:	f007 fea7 	bl	8010f80 <sniprintf>
        command_interface_send_response_usart4(response);
 8009232:	003b      	movs	r3, r7
 8009234:	0018      	movs	r0, r3
 8009236:	f7ff f911 	bl	800845c <command_interface_send_response_usart4>
 800923a:	e020      	b.n	800927e <cmd_read_temperature_usart4+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 800923c:	2480      	movs	r4, #128	@ 0x80
 800923e:	193b      	adds	r3, r7, r4
 8009240:	0018      	movs	r0, r3
 8009242:	f7fa ff73 	bl	800412c <bme680_read_sensor_data>
 8009246:	1e03      	subs	r3, r0, #0
 8009248:	d10f      	bne.n	800926a <cmd_read_temperature_usart4+0x52>
        snprintf(response, sizeof(response), "Temperature: %.2f°C\r\n", sensor_data.temperature);
 800924a:	193b      	adds	r3, r7, r4
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	1c18      	adds	r0, r3, #0
 8009250:	f7fa fab2 	bl	80037b8 <__aeabi_f2d>
 8009254:	0002      	movs	r2, r0
 8009256:	000b      	movs	r3, r1
 8009258:	490b      	ldr	r1, [pc, #44]	@ (8009288 <cmd_read_temperature_usart4+0x70>)
 800925a:	0038      	movs	r0, r7
 800925c:	9200      	str	r2, [sp, #0]
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	000a      	movs	r2, r1
 8009262:	2180      	movs	r1, #128	@ 0x80
 8009264:	f007 fe8c 	bl	8010f80 <sniprintf>
 8009268:	e005      	b.n	8009276 <cmd_read_temperature_usart4+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading temperature from BME680\r\n");
 800926a:	4a08      	ldr	r2, [pc, #32]	@ (800928c <cmd_read_temperature_usart4+0x74>)
 800926c:	003b      	movs	r3, r7
 800926e:	2180      	movs	r1, #128	@ 0x80
 8009270:	0018      	movs	r0, r3
 8009272:	f007 fe85 	bl	8010f80 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 8009276:	003b      	movs	r3, r7
 8009278:	0018      	movs	r0, r3
 800927a:	f7ff f8ef 	bl	800845c <command_interface_send_response_usart4>
}
 800927e:	46bd      	mov	sp, r7
 8009280:	b027      	add	sp, #156	@ 0x9c
 8009282:	bd90      	pop	{r4, r7, pc}
 8009284:	08014f30 	.word	0x08014f30
 8009288:	08014f80 	.word	0x08014f80
 800928c:	08014fbc 	.word	0x08014fbc

08009290 <cmd_read_pressure_usart4>:

// Command handler for reading pressure (USART4)
void cmd_read_pressure_usart4(void)
{
 8009290:	b590      	push	{r4, r7, lr}
 8009292:	b0a9      	sub	sp, #164	@ 0xa4
 8009294:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 8009296:	f7fa fce3 	bl	8003c60 <bme680_check_sensor_presence>
 800929a:	1e03      	subs	r3, r0, #0
 800929c:	d00a      	beq.n	80092b4 <cmd_read_pressure_usart4+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 800929e:	4a17      	ldr	r2, [pc, #92]	@ (80092fc <cmd_read_pressure_usart4+0x6c>)
 80092a0:	003b      	movs	r3, r7
 80092a2:	2180      	movs	r1, #128	@ 0x80
 80092a4:	0018      	movs	r0, r3
 80092a6:	f007 fe6b 	bl	8010f80 <sniprintf>
        command_interface_send_response_usart4(response);
 80092aa:	003b      	movs	r3, r7
 80092ac:	0018      	movs	r0, r3
 80092ae:	f7ff f8d5 	bl	800845c <command_interface_send_response_usart4>
 80092b2:	e020      	b.n	80092f6 <cmd_read_pressure_usart4+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 80092b4:	2480      	movs	r4, #128	@ 0x80
 80092b6:	193b      	adds	r3, r7, r4
 80092b8:	0018      	movs	r0, r3
 80092ba:	f7fa ff37 	bl	800412c <bme680_read_sensor_data>
 80092be:	1e03      	subs	r3, r0, #0
 80092c0:	d10f      	bne.n	80092e2 <cmd_read_pressure_usart4+0x52>
        snprintf(response, sizeof(response), "Pressure: %.2f Pa\r\n", sensor_data.pressure);
 80092c2:	193b      	adds	r3, r7, r4
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	1c18      	adds	r0, r3, #0
 80092c8:	f7fa fa76 	bl	80037b8 <__aeabi_f2d>
 80092cc:	0002      	movs	r2, r0
 80092ce:	000b      	movs	r3, r1
 80092d0:	490b      	ldr	r1, [pc, #44]	@ (8009300 <cmd_read_pressure_usart4+0x70>)
 80092d2:	0038      	movs	r0, r7
 80092d4:	9200      	str	r2, [sp, #0]
 80092d6:	9301      	str	r3, [sp, #4]
 80092d8:	000a      	movs	r2, r1
 80092da:	2180      	movs	r1, #128	@ 0x80
 80092dc:	f007 fe50 	bl	8010f80 <sniprintf>
 80092e0:	e005      	b.n	80092ee <cmd_read_pressure_usart4+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading pressure from BME680\r\n");
 80092e2:	4a08      	ldr	r2, [pc, #32]	@ (8009304 <cmd_read_pressure_usart4+0x74>)
 80092e4:	003b      	movs	r3, r7
 80092e6:	2180      	movs	r1, #128	@ 0x80
 80092e8:	0018      	movs	r0, r3
 80092ea:	f007 fe49 	bl	8010f80 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 80092ee:	003b      	movs	r3, r7
 80092f0:	0018      	movs	r0, r3
 80092f2:	f7ff f8b3 	bl	800845c <command_interface_send_response_usart4>
}
 80092f6:	46bd      	mov	sp, r7
 80092f8:	b027      	add	sp, #156	@ 0x9c
 80092fa:	bd90      	pop	{r4, r7, pc}
 80092fc:	08014f30 	.word	0x08014f30
 8009300:	08014fe4 	.word	0x08014fe4
 8009304:	08014ff8 	.word	0x08014ff8

08009308 <cmd_read_humidity_usart4>:

// Command handler for reading humidity (USART4)
void cmd_read_humidity_usart4(void)
{
 8009308:	b590      	push	{r4, r7, lr}
 800930a:	b0a9      	sub	sp, #164	@ 0xa4
 800930c:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800930e:	f7fa fca7 	bl	8003c60 <bme680_check_sensor_presence>
 8009312:	1e03      	subs	r3, r0, #0
 8009314:	d00a      	beq.n	800932c <cmd_read_humidity_usart4+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 8009316:	4a17      	ldr	r2, [pc, #92]	@ (8009374 <cmd_read_humidity_usart4+0x6c>)
 8009318:	003b      	movs	r3, r7
 800931a:	2180      	movs	r1, #128	@ 0x80
 800931c:	0018      	movs	r0, r3
 800931e:	f007 fe2f 	bl	8010f80 <sniprintf>
        command_interface_send_response_usart4(response);
 8009322:	003b      	movs	r3, r7
 8009324:	0018      	movs	r0, r3
 8009326:	f7ff f899 	bl	800845c <command_interface_send_response_usart4>
 800932a:	e020      	b.n	800936e <cmd_read_humidity_usart4+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 800932c:	2480      	movs	r4, #128	@ 0x80
 800932e:	193b      	adds	r3, r7, r4
 8009330:	0018      	movs	r0, r3
 8009332:	f7fa fefb 	bl	800412c <bme680_read_sensor_data>
 8009336:	1e03      	subs	r3, r0, #0
 8009338:	d10f      	bne.n	800935a <cmd_read_humidity_usart4+0x52>
        snprintf(response, sizeof(response), "Humidity: %.2f%%\r\n", sensor_data.humidity);
 800933a:	193b      	adds	r3, r7, r4
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	1c18      	adds	r0, r3, #0
 8009340:	f7fa fa3a 	bl	80037b8 <__aeabi_f2d>
 8009344:	0002      	movs	r2, r0
 8009346:	000b      	movs	r3, r1
 8009348:	490b      	ldr	r1, [pc, #44]	@ (8009378 <cmd_read_humidity_usart4+0x70>)
 800934a:	0038      	movs	r0, r7
 800934c:	9200      	str	r2, [sp, #0]
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	000a      	movs	r2, r1
 8009352:	2180      	movs	r1, #128	@ 0x80
 8009354:	f007 fe14 	bl	8010f80 <sniprintf>
 8009358:	e005      	b.n	8009366 <cmd_read_humidity_usart4+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading humidity from BME680\r\n");
 800935a:	4a08      	ldr	r2, [pc, #32]	@ (800937c <cmd_read_humidity_usart4+0x74>)
 800935c:	003b      	movs	r3, r7
 800935e:	2180      	movs	r1, #128	@ 0x80
 8009360:	0018      	movs	r0, r3
 8009362:	f007 fe0d 	bl	8010f80 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 8009366:	003b      	movs	r3, r7
 8009368:	0018      	movs	r0, r3
 800936a:	f7ff f877 	bl	800845c <command_interface_send_response_usart4>
}
 800936e:	46bd      	mov	sp, r7
 8009370:	b027      	add	sp, #156	@ 0x9c
 8009372:	bd90      	pop	{r4, r7, pc}
 8009374:	08014f30 	.word	0x08014f30
 8009378:	08015020 	.word	0x08015020
 800937c:	08015034 	.word	0x08015034

08009380 <cmd_test_sensor_usart4>:

// Command handler for testing sensor (USART4)
void cmd_test_sensor_usart4(void)
{
 8009380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009382:	b0cf      	sub	sp, #316	@ 0x13c
 8009384:	af06      	add	r7, sp, #24
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 8009386:	f7fa fc6b 	bl	8003c60 <bme680_check_sensor_presence>
 800938a:	1e03      	subs	r3, r0, #0
 800938c:	d004      	beq.n	8009398 <cmd_test_sensor_usart4+0x18>
        command_interface_send_response_usart4("Error: BME680 sensor not available\r\n");
 800938e:	4b28      	ldr	r3, [pc, #160]	@ (8009430 <cmd_test_sensor_usart4+0xb0>)
 8009390:	0018      	movs	r0, r3
 8009392:	f7ff f863 	bl	800845c <command_interface_send_response_usart4>
 8009396:	e047      	b.n	8009428 <cmd_test_sensor_usart4+0xa8>
    
    // Create a custom test function for USART4
    struct bme68x_data sensor_data;
    char test_msg[256];
    
    snprintf(test_msg, sizeof(test_msg), "Testing BME680 sensor (USART4)...\r\n");
 8009398:	4a26      	ldr	r2, [pc, #152]	@ (8009434 <cmd_test_sensor_usart4+0xb4>)
 800939a:	2380      	movs	r3, #128	@ 0x80
 800939c:	0059      	lsls	r1, r3, #1
 800939e:	2408      	movs	r4, #8
 80093a0:	193b      	adds	r3, r7, r4
 80093a2:	0018      	movs	r0, r3
 80093a4:	f007 fdec 	bl	8010f80 <sniprintf>
    command_interface_send_response_usart4(test_msg);
 80093a8:	193b      	adds	r3, r7, r4
 80093aa:	0018      	movs	r0, r3
 80093ac:	f7ff f856 	bl	800845c <command_interface_send_response_usart4>
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 80093b0:	2484      	movs	r4, #132	@ 0x84
 80093b2:	0064      	lsls	r4, r4, #1
 80093b4:	193b      	adds	r3, r7, r4
 80093b6:	0018      	movs	r0, r3
 80093b8:	f7fa feb8 	bl	800412c <bme680_read_sensor_data>
 80093bc:	1e03      	subs	r3, r0, #0
 80093be:	d126      	bne.n	800940e <cmd_test_sensor_usart4+0x8e>
        snprintf(test_msg, sizeof(test_msg), 
                 "Test successful!\r\nTemperature: %.2f°C\r\nPressure: %.2f Pa\r\nHumidity: %.2f%%\r\n",
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80093c0:	0026      	movs	r6, r4
 80093c2:	193b      	adds	r3, r7, r4
 80093c4:	689b      	ldr	r3, [r3, #8]
        snprintf(test_msg, sizeof(test_msg), 
 80093c6:	1c18      	adds	r0, r3, #0
 80093c8:	f7fa f9f6 	bl	80037b8 <__aeabi_f2d>
 80093cc:	0004      	movs	r4, r0
 80093ce:	000d      	movs	r5, r1
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80093d0:	19bb      	adds	r3, r7, r6
 80093d2:	68db      	ldr	r3, [r3, #12]
        snprintf(test_msg, sizeof(test_msg), 
 80093d4:	1c18      	adds	r0, r3, #0
 80093d6:	f7fa f9ef 	bl	80037b8 <__aeabi_f2d>
 80093da:	6038      	str	r0, [r7, #0]
 80093dc:	6079      	str	r1, [r7, #4]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80093de:	19bb      	adds	r3, r7, r6
 80093e0:	691b      	ldr	r3, [r3, #16]
        snprintf(test_msg, sizeof(test_msg), 
 80093e2:	1c18      	adds	r0, r3, #0
 80093e4:	f7fa f9e8 	bl	80037b8 <__aeabi_f2d>
 80093e8:	0002      	movs	r2, r0
 80093ea:	000b      	movs	r3, r1
 80093ec:	4e12      	ldr	r6, [pc, #72]	@ (8009438 <cmd_test_sensor_usart4+0xb8>)
 80093ee:	2180      	movs	r1, #128	@ 0x80
 80093f0:	0049      	lsls	r1, r1, #1
 80093f2:	2008      	movs	r0, #8
 80093f4:	1838      	adds	r0, r7, r0
 80093f6:	9204      	str	r2, [sp, #16]
 80093f8:	9305      	str	r3, [sp, #20]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	9202      	str	r2, [sp, #8]
 8009400:	9303      	str	r3, [sp, #12]
 8009402:	9400      	str	r4, [sp, #0]
 8009404:	9501      	str	r5, [sp, #4]
 8009406:	0032      	movs	r2, r6
 8009408:	f007 fdba 	bl	8010f80 <sniprintf>
 800940c:	e007      	b.n	800941e <cmd_test_sensor_usart4+0x9e>
    } else {
        snprintf(test_msg, sizeof(test_msg), "Test failed! Error reading sensor data.\r\n");
 800940e:	4a0b      	ldr	r2, [pc, #44]	@ (800943c <cmd_test_sensor_usart4+0xbc>)
 8009410:	2380      	movs	r3, #128	@ 0x80
 8009412:	0059      	lsls	r1, r3, #1
 8009414:	2308      	movs	r3, #8
 8009416:	18fb      	adds	r3, r7, r3
 8009418:	0018      	movs	r0, r3
 800941a:	f007 fdb1 	bl	8010f80 <sniprintf>
    }
    
    command_interface_send_response_usart4(test_msg);
 800941e:	2308      	movs	r3, #8
 8009420:	18fb      	adds	r3, r7, r3
 8009422:	0018      	movs	r0, r3
 8009424:	f7ff f81a 	bl	800845c <command_interface_send_response_usart4>
}
 8009428:	46bd      	mov	sp, r7
 800942a:	b049      	add	sp, #292	@ 0x124
 800942c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800942e:	46c0      	nop			@ (mov r8, r8)
 8009430:	08014f30 	.word	0x08014f30
 8009434:	08015150 	.word	0x08015150
 8009438:	08015174 	.word	0x08015174
 800943c:	080151c4 	.word	0x080151c4

08009440 <cmd_math_operation_usart4>:

// Command handler for mathematical operations (USART4)
void cmd_math_operation_usart4(char* command)
{
 8009440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009442:	b0b1      	sub	sp, #196	@ 0xc4
 8009444:	af06      	add	r7, sp, #24
 8009446:	60f8      	str	r0, [r7, #12]
    char* operation = strtok(command, " ");
 8009448:	4ac9      	ldr	r2, [pc, #804]	@ (8009770 <cmd_math_operation_usart4+0x330>)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	0011      	movs	r1, r2
 800944e:	0018      	movs	r0, r3
 8009450:	f007 fe32 	bl	80110b8 <strtok>
 8009454:	0003      	movs	r3, r0
 8009456:	229c      	movs	r2, #156	@ 0x9c
 8009458:	2508      	movs	r5, #8
 800945a:	1952      	adds	r2, r2, r5
 800945c:	19d2      	adds	r2, r2, r7
 800945e:	6013      	str	r3, [r2, #0]
    char* num1_str = strtok(NULL, " ");
 8009460:	4bc3      	ldr	r3, [pc, #780]	@ (8009770 <cmd_math_operation_usart4+0x330>)
 8009462:	0019      	movs	r1, r3
 8009464:	2000      	movs	r0, #0
 8009466:	f007 fe27 	bl	80110b8 <strtok>
 800946a:	0003      	movs	r3, r0
 800946c:	2498      	movs	r4, #152	@ 0x98
 800946e:	1962      	adds	r2, r4, r5
 8009470:	19d2      	adds	r2, r2, r7
 8009472:	6013      	str	r3, [r2, #0]
    char* num2_str = strtok(NULL, " ");
 8009474:	4bbe      	ldr	r3, [pc, #760]	@ (8009770 <cmd_math_operation_usart4+0x330>)
 8009476:	0019      	movs	r1, r3
 8009478:	2000      	movs	r0, #0
 800947a:	f007 fe1d 	bl	80110b8 <strtok>
 800947e:	0003      	movs	r3, r0
 8009480:	2294      	movs	r2, #148	@ 0x94
 8009482:	1951      	adds	r1, r2, r5
 8009484:	19c9      	adds	r1, r1, r7
 8009486:	600b      	str	r3, [r1, #0]
    char response[128];
    
    if (num1_str == NULL || num2_str == NULL) {
 8009488:	0029      	movs	r1, r5
 800948a:	1963      	adds	r3, r4, r5
 800948c:	19db      	adds	r3, r3, r7
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <cmd_math_operation_usart4+0x5e>
 8009494:	1853      	adds	r3, r2, r1
 8009496:	19db      	adds	r3, r3, r7
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <cmd_math_operation_usart4+0x68>
        command_interface_send_response_usart4("Usage: <operation> <num1> <num2>\r\n");
 800949e:	4bb5      	ldr	r3, [pc, #724]	@ (8009774 <cmd_math_operation_usart4+0x334>)
 80094a0:	0018      	movs	r0, r3
 80094a2:	f7fe ffdb 	bl	800845c <command_interface_send_response_usart4>
 80094a6:	e160      	b.n	800976a <cmd_math_operation_usart4+0x32a>
        return;
    }
    
    float num1 = atof(num1_str);
 80094a8:	2398      	movs	r3, #152	@ 0x98
 80094aa:	2508      	movs	r5, #8
 80094ac:	195b      	adds	r3, r3, r5
 80094ae:	19db      	adds	r3, r3, r7
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	0018      	movs	r0, r3
 80094b4:	f006 fa16 	bl	800f8e4 <atof>
 80094b8:	0002      	movs	r2, r0
 80094ba:	000b      	movs	r3, r1
 80094bc:	0010      	movs	r0, r2
 80094be:	0019      	movs	r1, r3
 80094c0:	f7fa f9c2 	bl	8003848 <__aeabi_d2f>
 80094c4:	1c03      	adds	r3, r0, #0
 80094c6:	2490      	movs	r4, #144	@ 0x90
 80094c8:	1962      	adds	r2, r4, r5
 80094ca:	19d2      	adds	r2, r2, r7
 80094cc:	6013      	str	r3, [r2, #0]
    float num2 = atof(num2_str);
 80094ce:	2394      	movs	r3, #148	@ 0x94
 80094d0:	195b      	adds	r3, r3, r5
 80094d2:	19db      	adds	r3, r3, r7
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	0018      	movs	r0, r3
 80094d8:	f006 fa04 	bl	800f8e4 <atof>
 80094dc:	0002      	movs	r2, r0
 80094de:	000b      	movs	r3, r1
 80094e0:	0010      	movs	r0, r2
 80094e2:	0019      	movs	r1, r3
 80094e4:	f7fa f9b0 	bl	8003848 <__aeabi_d2f>
 80094e8:	1c03      	adds	r3, r0, #0
 80094ea:	268c      	movs	r6, #140	@ 0x8c
 80094ec:	1972      	adds	r2, r6, r5
 80094ee:	19d2      	adds	r2, r2, r7
 80094f0:	6013      	str	r3, [r2, #0]
    float result;
    
    if (strcmp(operation, "sum") == 0) {
 80094f2:	4aa1      	ldr	r2, [pc, #644]	@ (8009778 <cmd_math_operation_usart4+0x338>)
 80094f4:	239c      	movs	r3, #156	@ 0x9c
 80094f6:	195b      	adds	r3, r3, r5
 80094f8:	19db      	adds	r3, r3, r7
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	0011      	movs	r1, r2
 80094fe:	0018      	movs	r0, r3
 8009500:	f7f6 fe00 	bl	8000104 <strcmp>
 8009504:	1e03      	subs	r3, r0, #0
 8009506:	d136      	bne.n	8009576 <cmd_math_operation_usart4+0x136>
        result = num1 + num2;
 8009508:	1973      	adds	r3, r6, r5
 800950a:	19db      	adds	r3, r3, r7
 800950c:	6819      	ldr	r1, [r3, #0]
 800950e:	1963      	adds	r3, r4, r5
 8009510:	19db      	adds	r3, r3, r7
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	f7f7 f97c 	bl	8000810 <__aeabi_fadd>
 8009518:	1c03      	adds	r3, r0, #0
 800951a:	2288      	movs	r2, #136	@ 0x88
 800951c:	1952      	adds	r2, r2, r5
 800951e:	19d1      	adds	r1, r2, r7
 8009520:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f + %.2f = %.2f\r\n", num1, num2, result);
 8009522:	1963      	adds	r3, r4, r5
 8009524:	19d9      	adds	r1, r3, r7
 8009526:	6808      	ldr	r0, [r1, #0]
 8009528:	f7fa f946 	bl	80037b8 <__aeabi_f2d>
 800952c:	0004      	movs	r4, r0
 800952e:	000d      	movs	r5, r1
 8009530:	2208      	movs	r2, #8
 8009532:	18b3      	adds	r3, r6, r2
 8009534:	19d9      	adds	r1, r3, r7
 8009536:	6808      	ldr	r0, [r1, #0]
 8009538:	f7fa f93e 	bl	80037b8 <__aeabi_f2d>
 800953c:	6038      	str	r0, [r7, #0]
 800953e:	6079      	str	r1, [r7, #4]
 8009540:	2388      	movs	r3, #136	@ 0x88
 8009542:	2208      	movs	r2, #8
 8009544:	189b      	adds	r3, r3, r2
 8009546:	19db      	adds	r3, r3, r7
 8009548:	6818      	ldr	r0, [r3, #0]
 800954a:	f7fa f935 	bl	80037b8 <__aeabi_f2d>
 800954e:	0002      	movs	r2, r0
 8009550:	000b      	movs	r3, r1
 8009552:	498a      	ldr	r1, [pc, #552]	@ (800977c <cmd_math_operation_usart4+0x33c>)
 8009554:	2608      	movs	r6, #8
 8009556:	2008      	movs	r0, #8
 8009558:	1830      	adds	r0, r6, r0
 800955a:	19c0      	adds	r0, r0, r7
 800955c:	9204      	str	r2, [sp, #16]
 800955e:	9305      	str	r3, [sp, #20]
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	9202      	str	r2, [sp, #8]
 8009566:	9303      	str	r3, [sp, #12]
 8009568:	9400      	str	r4, [sp, #0]
 800956a:	9501      	str	r5, [sp, #4]
 800956c:	000a      	movs	r2, r1
 800956e:	2180      	movs	r1, #128	@ 0x80
 8009570:	f007 fd06 	bl	8010f80 <sniprintf>
 8009574:	e0f2      	b.n	800975c <cmd_math_operation_usart4+0x31c>
    }
    else if (strcmp(operation, "sub") == 0) {
 8009576:	4a82      	ldr	r2, [pc, #520]	@ (8009780 <cmd_math_operation_usart4+0x340>)
 8009578:	239c      	movs	r3, #156	@ 0x9c
 800957a:	2408      	movs	r4, #8
 800957c:	191b      	adds	r3, r3, r4
 800957e:	19db      	adds	r3, r3, r7
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	0011      	movs	r1, r2
 8009584:	0018      	movs	r0, r3
 8009586:	f7f6 fdbd 	bl	8000104 <strcmp>
 800958a:	1e03      	subs	r3, r0, #0
 800958c:	d13a      	bne.n	8009604 <cmd_math_operation_usart4+0x1c4>
        result = num1 - num2;
 800958e:	268c      	movs	r6, #140	@ 0x8c
 8009590:	0025      	movs	r5, r4
 8009592:	1973      	adds	r3, r6, r5
 8009594:	19db      	adds	r3, r3, r7
 8009596:	6819      	ldr	r1, [r3, #0]
 8009598:	2490      	movs	r4, #144	@ 0x90
 800959a:	1963      	adds	r3, r4, r5
 800959c:	19db      	adds	r3, r3, r7
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	f7f7 fe50 	bl	8001244 <__aeabi_fsub>
 80095a4:	1c03      	adds	r3, r0, #0
 80095a6:	2288      	movs	r2, #136	@ 0x88
 80095a8:	0028      	movs	r0, r5
 80095aa:	1812      	adds	r2, r2, r0
 80095ac:	19d1      	adds	r1, r2, r7
 80095ae:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f - %.2f = %.2f\r\n", num1, num2, result);
 80095b0:	1823      	adds	r3, r4, r0
 80095b2:	19d9      	adds	r1, r3, r7
 80095b4:	6808      	ldr	r0, [r1, #0]
 80095b6:	f7fa f8ff 	bl	80037b8 <__aeabi_f2d>
 80095ba:	0004      	movs	r4, r0
 80095bc:	000d      	movs	r5, r1
 80095be:	2008      	movs	r0, #8
 80095c0:	1833      	adds	r3, r6, r0
 80095c2:	19d9      	adds	r1, r3, r7
 80095c4:	6808      	ldr	r0, [r1, #0]
 80095c6:	f7fa f8f7 	bl	80037b8 <__aeabi_f2d>
 80095ca:	6038      	str	r0, [r7, #0]
 80095cc:	6079      	str	r1, [r7, #4]
 80095ce:	2388      	movs	r3, #136	@ 0x88
 80095d0:	2008      	movs	r0, #8
 80095d2:	181b      	adds	r3, r3, r0
 80095d4:	19db      	adds	r3, r3, r7
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	f7fa f8ee 	bl	80037b8 <__aeabi_f2d>
 80095dc:	0002      	movs	r2, r0
 80095de:	000b      	movs	r3, r1
 80095e0:	4968      	ldr	r1, [pc, #416]	@ (8009784 <cmd_math_operation_usart4+0x344>)
 80095e2:	2608      	movs	r6, #8
 80095e4:	2008      	movs	r0, #8
 80095e6:	1830      	adds	r0, r6, r0
 80095e8:	19c0      	adds	r0, r0, r7
 80095ea:	9204      	str	r2, [sp, #16]
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	9202      	str	r2, [sp, #8]
 80095f4:	9303      	str	r3, [sp, #12]
 80095f6:	9400      	str	r4, [sp, #0]
 80095f8:	9501      	str	r5, [sp, #4]
 80095fa:	000a      	movs	r2, r1
 80095fc:	2180      	movs	r1, #128	@ 0x80
 80095fe:	f007 fcbf 	bl	8010f80 <sniprintf>
 8009602:	e0ab      	b.n	800975c <cmd_math_operation_usart4+0x31c>
    }
    else if (strcmp(operation, "mul") == 0) {
 8009604:	4a60      	ldr	r2, [pc, #384]	@ (8009788 <cmd_math_operation_usart4+0x348>)
 8009606:	239c      	movs	r3, #156	@ 0x9c
 8009608:	2408      	movs	r4, #8
 800960a:	191b      	adds	r3, r3, r4
 800960c:	19db      	adds	r3, r3, r7
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	0011      	movs	r1, r2
 8009612:	0018      	movs	r0, r3
 8009614:	f7f6 fd76 	bl	8000104 <strcmp>
 8009618:	1e03      	subs	r3, r0, #0
 800961a:	d13a      	bne.n	8009692 <cmd_math_operation_usart4+0x252>
        result = num1 * num2;
 800961c:	268c      	movs	r6, #140	@ 0x8c
 800961e:	0025      	movs	r5, r4
 8009620:	1973      	adds	r3, r6, r5
 8009622:	19db      	adds	r3, r3, r7
 8009624:	6819      	ldr	r1, [r3, #0]
 8009626:	2490      	movs	r4, #144	@ 0x90
 8009628:	1963      	adds	r3, r4, r5
 800962a:	19db      	adds	r3, r3, r7
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	f7f7 fcaf 	bl	8000f90 <__aeabi_fmul>
 8009632:	1c03      	adds	r3, r0, #0
 8009634:	2288      	movs	r2, #136	@ 0x88
 8009636:	0028      	movs	r0, r5
 8009638:	1812      	adds	r2, r2, r0
 800963a:	19d1      	adds	r1, r2, r7
 800963c:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f * %.2f = %.2f\r\n", num1, num2, result);
 800963e:	1823      	adds	r3, r4, r0
 8009640:	19d9      	adds	r1, r3, r7
 8009642:	6808      	ldr	r0, [r1, #0]
 8009644:	f7fa f8b8 	bl	80037b8 <__aeabi_f2d>
 8009648:	0004      	movs	r4, r0
 800964a:	000d      	movs	r5, r1
 800964c:	2008      	movs	r0, #8
 800964e:	1833      	adds	r3, r6, r0
 8009650:	19d9      	adds	r1, r3, r7
 8009652:	6808      	ldr	r0, [r1, #0]
 8009654:	f7fa f8b0 	bl	80037b8 <__aeabi_f2d>
 8009658:	6038      	str	r0, [r7, #0]
 800965a:	6079      	str	r1, [r7, #4]
 800965c:	2388      	movs	r3, #136	@ 0x88
 800965e:	2008      	movs	r0, #8
 8009660:	181b      	adds	r3, r3, r0
 8009662:	19db      	adds	r3, r3, r7
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	f7fa f8a7 	bl	80037b8 <__aeabi_f2d>
 800966a:	0002      	movs	r2, r0
 800966c:	000b      	movs	r3, r1
 800966e:	4947      	ldr	r1, [pc, #284]	@ (800978c <cmd_math_operation_usart4+0x34c>)
 8009670:	2608      	movs	r6, #8
 8009672:	2008      	movs	r0, #8
 8009674:	1830      	adds	r0, r6, r0
 8009676:	19c0      	adds	r0, r0, r7
 8009678:	9204      	str	r2, [sp, #16]
 800967a:	9305      	str	r3, [sp, #20]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	9202      	str	r2, [sp, #8]
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	9400      	str	r4, [sp, #0]
 8009686:	9501      	str	r5, [sp, #4]
 8009688:	000a      	movs	r2, r1
 800968a:	2180      	movs	r1, #128	@ 0x80
 800968c:	f007 fc78 	bl	8010f80 <sniprintf>
 8009690:	e064      	b.n	800975c <cmd_math_operation_usart4+0x31c>
    }
    else if (strcmp(operation, "div") == 0) {
 8009692:	4a3f      	ldr	r2, [pc, #252]	@ (8009790 <cmd_math_operation_usart4+0x350>)
 8009694:	239c      	movs	r3, #156	@ 0x9c
 8009696:	2408      	movs	r4, #8
 8009698:	191b      	adds	r3, r3, r4
 800969a:	19db      	adds	r3, r3, r7
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	0011      	movs	r1, r2
 80096a0:	0018      	movs	r0, r3
 80096a2:	f7f6 fd2f 	bl	8000104 <strcmp>
 80096a6:	1e03      	subs	r3, r0, #0
 80096a8:	d14c      	bne.n	8009744 <cmd_math_operation_usart4+0x304>
        if (num2 != 0) {
 80096aa:	2100      	movs	r1, #0
 80096ac:	268c      	movs	r6, #140	@ 0x8c
 80096ae:	1933      	adds	r3, r6, r4
 80096b0:	19db      	adds	r3, r3, r7
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	f7f6 ff0c 	bl	80004d0 <__aeabi_fcmpeq>
 80096b8:	1e03      	subs	r3, r0, #0
 80096ba:	d139      	bne.n	8009730 <cmd_math_operation_usart4+0x2f0>
            result = num1 / num2;
 80096bc:	0025      	movs	r5, r4
 80096be:	1933      	adds	r3, r6, r4
 80096c0:	19db      	adds	r3, r3, r7
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	2490      	movs	r4, #144	@ 0x90
 80096c6:	1963      	adds	r3, r4, r5
 80096c8:	19db      	adds	r3, r3, r7
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	f7f7 fa92 	bl	8000bf4 <__aeabi_fdiv>
 80096d0:	1c03      	adds	r3, r0, #0
 80096d2:	2288      	movs	r2, #136	@ 0x88
 80096d4:	0028      	movs	r0, r5
 80096d6:	1812      	adds	r2, r2, r0
 80096d8:	19d1      	adds	r1, r2, r7
 80096da:	600b      	str	r3, [r1, #0]
            snprintf(response, sizeof(response), "%.2f / %.2f = %.2f\r\n", num1, num2, result);
 80096dc:	1823      	adds	r3, r4, r0
 80096de:	19d9      	adds	r1, r3, r7
 80096e0:	6808      	ldr	r0, [r1, #0]
 80096e2:	f7fa f869 	bl	80037b8 <__aeabi_f2d>
 80096e6:	0004      	movs	r4, r0
 80096e8:	000d      	movs	r5, r1
 80096ea:	2008      	movs	r0, #8
 80096ec:	1833      	adds	r3, r6, r0
 80096ee:	19d9      	adds	r1, r3, r7
 80096f0:	6808      	ldr	r0, [r1, #0]
 80096f2:	f7fa f861 	bl	80037b8 <__aeabi_f2d>
 80096f6:	6038      	str	r0, [r7, #0]
 80096f8:	6079      	str	r1, [r7, #4]
 80096fa:	2388      	movs	r3, #136	@ 0x88
 80096fc:	2008      	movs	r0, #8
 80096fe:	181b      	adds	r3, r3, r0
 8009700:	19db      	adds	r3, r3, r7
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	f7fa f858 	bl	80037b8 <__aeabi_f2d>
 8009708:	0002      	movs	r2, r0
 800970a:	000b      	movs	r3, r1
 800970c:	4921      	ldr	r1, [pc, #132]	@ (8009794 <cmd_math_operation_usart4+0x354>)
 800970e:	2608      	movs	r6, #8
 8009710:	2008      	movs	r0, #8
 8009712:	1830      	adds	r0, r6, r0
 8009714:	19c0      	adds	r0, r0, r7
 8009716:	9204      	str	r2, [sp, #16]
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	9202      	str	r2, [sp, #8]
 8009720:	9303      	str	r3, [sp, #12]
 8009722:	9400      	str	r4, [sp, #0]
 8009724:	9501      	str	r5, [sp, #4]
 8009726:	000a      	movs	r2, r1
 8009728:	2180      	movs	r1, #128	@ 0x80
 800972a:	f007 fc29 	bl	8010f80 <sniprintf>
 800972e:	e015      	b.n	800975c <cmd_math_operation_usart4+0x31c>
        } else {
            snprintf(response, sizeof(response), "Error: Division by zero\r\n");
 8009730:	4a19      	ldr	r2, [pc, #100]	@ (8009798 <cmd_math_operation_usart4+0x358>)
 8009732:	2308      	movs	r3, #8
 8009734:	2108      	movs	r1, #8
 8009736:	185b      	adds	r3, r3, r1
 8009738:	19db      	adds	r3, r3, r7
 800973a:	2180      	movs	r1, #128	@ 0x80
 800973c:	0018      	movs	r0, r3
 800973e:	f007 fc1f 	bl	8010f80 <sniprintf>
 8009742:	e00b      	b.n	800975c <cmd_math_operation_usart4+0x31c>
        }
    }
    else {
        snprintf(response, sizeof(response), "Unknown operation: %s\r\n", operation);
 8009744:	239c      	movs	r3, #156	@ 0x9c
 8009746:	2008      	movs	r0, #8
 8009748:	181b      	adds	r3, r3, r0
 800974a:	19db      	adds	r3, r3, r7
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a13      	ldr	r2, [pc, #76]	@ (800979c <cmd_math_operation_usart4+0x35c>)
 8009750:	2108      	movs	r1, #8
 8009752:	1809      	adds	r1, r1, r0
 8009754:	19c8      	adds	r0, r1, r7
 8009756:	2180      	movs	r1, #128	@ 0x80
 8009758:	f007 fc12 	bl	8010f80 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 800975c:	2308      	movs	r3, #8
 800975e:	2208      	movs	r2, #8
 8009760:	189b      	adds	r3, r3, r2
 8009762:	19db      	adds	r3, r3, r7
 8009764:	0018      	movs	r0, r3
 8009766:	f7fe fe79 	bl	800845c <command_interface_send_response_usart4>
}
 800976a:	46bd      	mov	sp, r7
 800976c:	b02b      	add	sp, #172	@ 0xac
 800976e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009770:	0801505c 	.word	0x0801505c
 8009774:	08015060 	.word	0x08015060
 8009778:	08015084 	.word	0x08015084
 800977c:	08015088 	.word	0x08015088
 8009780:	080150a0 	.word	0x080150a0
 8009784:	080150a4 	.word	0x080150a4
 8009788:	080150bc 	.word	0x080150bc
 800978c:	080150c0 	.word	0x080150c0
 8009790:	080150d8 	.word	0x080150d8
 8009794:	080150dc 	.word	0x080150dc
 8009798:	080150f4 	.word	0x080150f4
 800979c:	08015110 	.word	0x08015110

080097a0 <cmd_lora_broadcast>:

// Command handler for LoRa broadcast (USART2)
void cmd_lora_broadcast(void)
{
 80097a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a2:	b0af      	sub	sp, #188	@ 0xbc
 80097a4:	af06      	add	r7, sp, #24
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 80097a6:	f7fa fa5b 	bl	8003c60 <bme680_check_sensor_presence>
 80097aa:	1e03      	subs	r3, r0, #0
 80097ac:	d00b      	beq.n	80097c6 <cmd_lora_broadcast+0x26>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 80097ae:	4a35      	ldr	r2, [pc, #212]	@ (8009884 <cmd_lora_broadcast+0xe4>)
 80097b0:	2408      	movs	r4, #8
 80097b2:	193b      	adds	r3, r7, r4
 80097b4:	2180      	movs	r1, #128	@ 0x80
 80097b6:	0018      	movs	r0, r3
 80097b8:	f007 fbe2 	bl	8010f80 <sniprintf>
        command_interface_send_response(response);
 80097bc:	193b      	adds	r3, r7, r4
 80097be:	0018      	movs	r0, r3
 80097c0:	f7fe fe36 	bl	8008430 <command_interface_send_response>
 80097c4:	e05a      	b.n	800987c <cmd_lora_broadcast+0xdc>
        return;
    }
    
    // Read sensor data
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 80097c6:	2680      	movs	r6, #128	@ 0x80
 80097c8:	2408      	movs	r4, #8
 80097ca:	1933      	adds	r3, r6, r4
 80097cc:	19db      	adds	r3, r3, r7
 80097ce:	0018      	movs	r0, r3
 80097d0:	f7fa fcac 	bl	800412c <bme680_read_sensor_data>
 80097d4:	1e03      	subs	r3, r0, #0
 80097d6:	d146      	bne.n	8009866 <cmd_lora_broadcast+0xc6>
        snprintf(response, sizeof(response), 
                 "Broadcasting sensor data via LoRa...\r\nTemperature: %.2f°C, Pressure: %.2f Pa, Humidity: %.2f%%\r\n",
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80097d8:	1933      	adds	r3, r6, r4
 80097da:	19db      	adds	r3, r3, r7
 80097dc:	689b      	ldr	r3, [r3, #8]
        snprintf(response, sizeof(response), 
 80097de:	1c18      	adds	r0, r3, #0
 80097e0:	f7f9 ffea 	bl	80037b8 <__aeabi_f2d>
 80097e4:	0004      	movs	r4, r0
 80097e6:	000d      	movs	r5, r1
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80097e8:	2008      	movs	r0, #8
 80097ea:	1833      	adds	r3, r6, r0
 80097ec:	19db      	adds	r3, r3, r7
 80097ee:	68db      	ldr	r3, [r3, #12]
        snprintf(response, sizeof(response), 
 80097f0:	1c18      	adds	r0, r3, #0
 80097f2:	f7f9 ffe1 	bl	80037b8 <__aeabi_f2d>
 80097f6:	6038      	str	r0, [r7, #0]
 80097f8:	6079      	str	r1, [r7, #4]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80097fa:	2008      	movs	r0, #8
 80097fc:	1833      	adds	r3, r6, r0
 80097fe:	19db      	adds	r3, r3, r7
 8009800:	691b      	ldr	r3, [r3, #16]
        snprintf(response, sizeof(response), 
 8009802:	1c18      	adds	r0, r3, #0
 8009804:	f7f9 ffd8 	bl	80037b8 <__aeabi_f2d>
 8009808:	0002      	movs	r2, r0
 800980a:	000b      	movs	r3, r1
 800980c:	491e      	ldr	r1, [pc, #120]	@ (8009888 <cmd_lora_broadcast+0xe8>)
 800980e:	2008      	movs	r0, #8
 8009810:	1838      	adds	r0, r7, r0
 8009812:	9204      	str	r2, [sp, #16]
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	9202      	str	r2, [sp, #8]
 800981c:	9303      	str	r3, [sp, #12]
 800981e:	9400      	str	r4, [sp, #0]
 8009820:	9501      	str	r5, [sp, #4]
 8009822:	000a      	movs	r2, r1
 8009824:	2180      	movs	r1, #128	@ 0x80
 8009826:	f007 fbab 	bl	8010f80 <sniprintf>
        command_interface_send_response(response);
 800982a:	2408      	movs	r4, #8
 800982c:	193b      	adds	r3, r7, r4
 800982e:	0018      	movs	r0, r3
 8009830:	f7fe fdfe 	bl	8008430 <command_interface_send_response>
        
        // Send via LoRa
        if (lora_send_sensor_data(sensor_data.temperature, sensor_data.pressure, sensor_data.humidity) == 0) {
 8009834:	0022      	movs	r2, r4
 8009836:	18b3      	adds	r3, r6, r2
 8009838:	19db      	adds	r3, r3, r7
 800983a:	6898      	ldr	r0, [r3, #8]
 800983c:	18b3      	adds	r3, r6, r2
 800983e:	19db      	adds	r3, r3, r7
 8009840:	68d9      	ldr	r1, [r3, #12]
 8009842:	18b3      	adds	r3, r6, r2
 8009844:	19db      	adds	r3, r3, r7
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	1c1a      	adds	r2, r3, #0
 800984a:	f000 fab5 	bl	8009db8 <lora_send_sensor_data>
 800984e:	1e03      	subs	r3, r0, #0
 8009850:	d104      	bne.n	800985c <cmd_lora_broadcast+0xbc>
            command_interface_send_response("✓ LoRa broadcast successful\r\n");
 8009852:	4b0e      	ldr	r3, [pc, #56]	@ (800988c <cmd_lora_broadcast+0xec>)
 8009854:	0018      	movs	r0, r3
 8009856:	f7fe fdeb 	bl	8008430 <command_interface_send_response>
 800985a:	e00f      	b.n	800987c <cmd_lora_broadcast+0xdc>
        } else {
            command_interface_send_response("✗ LoRa broadcast failed\r\n");
 800985c:	4b0c      	ldr	r3, [pc, #48]	@ (8009890 <cmd_lora_broadcast+0xf0>)
 800985e:	0018      	movs	r0, r3
 8009860:	f7fe fde6 	bl	8008430 <command_interface_send_response>
 8009864:	e00a      	b.n	800987c <cmd_lora_broadcast+0xdc>
        }
    } else {
        snprintf(response, sizeof(response), "Error reading sensor data for LoRa broadcast\r\n");
 8009866:	4a0b      	ldr	r2, [pc, #44]	@ (8009894 <cmd_lora_broadcast+0xf4>)
 8009868:	2408      	movs	r4, #8
 800986a:	193b      	adds	r3, r7, r4
 800986c:	2180      	movs	r1, #128	@ 0x80
 800986e:	0018      	movs	r0, r3
 8009870:	f007 fb86 	bl	8010f80 <sniprintf>
        command_interface_send_response(response);
 8009874:	193b      	adds	r3, r7, r4
 8009876:	0018      	movs	r0, r3
 8009878:	f7fe fdda 	bl	8008430 <command_interface_send_response>
    }
}
 800987c:	46bd      	mov	sp, r7
 800987e:	b029      	add	sp, #164	@ 0xa4
 8009880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009882:	46c0      	nop			@ (mov r8, r8)
 8009884:	08014f30 	.word	0x08014f30
 8009888:	080151f0 	.word	0x080151f0
 800988c:	08015254 	.word	0x08015254
 8009890:	08015274 	.word	0x08015274
 8009894:	08015290 	.word	0x08015290

08009898 <cmd_lora_broadcast_usart4>:

// Command handler for LoRa broadcast (USART4)
void cmd_lora_broadcast_usart4(void)
{
 8009898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989a:	b0af      	sub	sp, #188	@ 0xbc
 800989c:	af06      	add	r7, sp, #24
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800989e:	f7fa f9df 	bl	8003c60 <bme680_check_sensor_presence>
 80098a2:	1e03      	subs	r3, r0, #0
 80098a4:	d00b      	beq.n	80098be <cmd_lora_broadcast_usart4+0x26>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 80098a6:	4a35      	ldr	r2, [pc, #212]	@ (800997c <cmd_lora_broadcast_usart4+0xe4>)
 80098a8:	2408      	movs	r4, #8
 80098aa:	193b      	adds	r3, r7, r4
 80098ac:	2180      	movs	r1, #128	@ 0x80
 80098ae:	0018      	movs	r0, r3
 80098b0:	f007 fb66 	bl	8010f80 <sniprintf>
        command_interface_send_response_usart4(response);
 80098b4:	193b      	adds	r3, r7, r4
 80098b6:	0018      	movs	r0, r3
 80098b8:	f7fe fdd0 	bl	800845c <command_interface_send_response_usart4>
 80098bc:	e05a      	b.n	8009974 <cmd_lora_broadcast_usart4+0xdc>
        return;
    }
    
    // Read sensor data
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 80098be:	2680      	movs	r6, #128	@ 0x80
 80098c0:	2408      	movs	r4, #8
 80098c2:	1933      	adds	r3, r6, r4
 80098c4:	19db      	adds	r3, r3, r7
 80098c6:	0018      	movs	r0, r3
 80098c8:	f7fa fc30 	bl	800412c <bme680_read_sensor_data>
 80098cc:	1e03      	subs	r3, r0, #0
 80098ce:	d146      	bne.n	800995e <cmd_lora_broadcast_usart4+0xc6>
        snprintf(response, sizeof(response), 
                 "Broadcasting sensor data via LoRa...\r\nTemperature: %.2f°C, Pressure: %.2f Pa, Humidity: %.2f%%\r\n",
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80098d0:	1933      	adds	r3, r6, r4
 80098d2:	19db      	adds	r3, r3, r7
 80098d4:	689b      	ldr	r3, [r3, #8]
        snprintf(response, sizeof(response), 
 80098d6:	1c18      	adds	r0, r3, #0
 80098d8:	f7f9 ff6e 	bl	80037b8 <__aeabi_f2d>
 80098dc:	0004      	movs	r4, r0
 80098de:	000d      	movs	r5, r1
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80098e0:	2008      	movs	r0, #8
 80098e2:	1833      	adds	r3, r6, r0
 80098e4:	19db      	adds	r3, r3, r7
 80098e6:	68db      	ldr	r3, [r3, #12]
        snprintf(response, sizeof(response), 
 80098e8:	1c18      	adds	r0, r3, #0
 80098ea:	f7f9 ff65 	bl	80037b8 <__aeabi_f2d>
 80098ee:	6038      	str	r0, [r7, #0]
 80098f0:	6079      	str	r1, [r7, #4]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 80098f2:	2008      	movs	r0, #8
 80098f4:	1833      	adds	r3, r6, r0
 80098f6:	19db      	adds	r3, r3, r7
 80098f8:	691b      	ldr	r3, [r3, #16]
        snprintf(response, sizeof(response), 
 80098fa:	1c18      	adds	r0, r3, #0
 80098fc:	f7f9 ff5c 	bl	80037b8 <__aeabi_f2d>
 8009900:	0002      	movs	r2, r0
 8009902:	000b      	movs	r3, r1
 8009904:	491e      	ldr	r1, [pc, #120]	@ (8009980 <cmd_lora_broadcast_usart4+0xe8>)
 8009906:	2008      	movs	r0, #8
 8009908:	1838      	adds	r0, r7, r0
 800990a:	9204      	str	r2, [sp, #16]
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	9202      	str	r2, [sp, #8]
 8009914:	9303      	str	r3, [sp, #12]
 8009916:	9400      	str	r4, [sp, #0]
 8009918:	9501      	str	r5, [sp, #4]
 800991a:	000a      	movs	r2, r1
 800991c:	2180      	movs	r1, #128	@ 0x80
 800991e:	f007 fb2f 	bl	8010f80 <sniprintf>
        command_interface_send_response_usart4(response);
 8009922:	2408      	movs	r4, #8
 8009924:	193b      	adds	r3, r7, r4
 8009926:	0018      	movs	r0, r3
 8009928:	f7fe fd98 	bl	800845c <command_interface_send_response_usart4>
        
        // Send via LoRa
        if (lora_send_sensor_data(sensor_data.temperature, sensor_data.pressure, sensor_data.humidity) == 0) {
 800992c:	0022      	movs	r2, r4
 800992e:	18b3      	adds	r3, r6, r2
 8009930:	19db      	adds	r3, r3, r7
 8009932:	6898      	ldr	r0, [r3, #8]
 8009934:	18b3      	adds	r3, r6, r2
 8009936:	19db      	adds	r3, r3, r7
 8009938:	68d9      	ldr	r1, [r3, #12]
 800993a:	18b3      	adds	r3, r6, r2
 800993c:	19db      	adds	r3, r3, r7
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	1c1a      	adds	r2, r3, #0
 8009942:	f000 fa39 	bl	8009db8 <lora_send_sensor_data>
 8009946:	1e03      	subs	r3, r0, #0
 8009948:	d104      	bne.n	8009954 <cmd_lora_broadcast_usart4+0xbc>
            command_interface_send_response_usart4("✓ LoRa broadcast successful\r\n");
 800994a:	4b0e      	ldr	r3, [pc, #56]	@ (8009984 <cmd_lora_broadcast_usart4+0xec>)
 800994c:	0018      	movs	r0, r3
 800994e:	f7fe fd85 	bl	800845c <command_interface_send_response_usart4>
 8009952:	e00f      	b.n	8009974 <cmd_lora_broadcast_usart4+0xdc>
        } else {
            command_interface_send_response_usart4("✗ LoRa broadcast failed\r\n");
 8009954:	4b0c      	ldr	r3, [pc, #48]	@ (8009988 <cmd_lora_broadcast_usart4+0xf0>)
 8009956:	0018      	movs	r0, r3
 8009958:	f7fe fd80 	bl	800845c <command_interface_send_response_usart4>
 800995c:	e00a      	b.n	8009974 <cmd_lora_broadcast_usart4+0xdc>
        }
    } else {
        snprintf(response, sizeof(response), "Error reading sensor data for LoRa broadcast\r\n");
 800995e:	4a0b      	ldr	r2, [pc, #44]	@ (800998c <cmd_lora_broadcast_usart4+0xf4>)
 8009960:	2408      	movs	r4, #8
 8009962:	193b      	adds	r3, r7, r4
 8009964:	2180      	movs	r1, #128	@ 0x80
 8009966:	0018      	movs	r0, r3
 8009968:	f007 fb0a 	bl	8010f80 <sniprintf>
        command_interface_send_response_usart4(response);
 800996c:	193b      	adds	r3, r7, r4
 800996e:	0018      	movs	r0, r3
 8009970:	f7fe fd74 	bl	800845c <command_interface_send_response_usart4>
    }
 8009974:	46bd      	mov	sp, r7
 8009976:	b029      	add	sp, #164	@ 0xa4
 8009978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997a:	46c0      	nop			@ (mov r8, r8)
 800997c:	08014f30 	.word	0x08014f30
 8009980:	080151f0 	.word	0x080151f0
 8009984:	08015254 	.word	0x08015254
 8009988:	08015274 	.word	0x08015274
 800998c:	08015290 	.word	0x08015290

08009990 <lora_debug_print>:
    .crc_is_on = true,
    .invert_iq_is_on = false
};

// Debug function
static void lora_debug_print(const char* message) {
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	0018      	movs	r0, r3
 800999c:	f7f6 fbbc 	bl	8000118 <strlen>
 80099a0:	0003      	movs	r3, r0
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	23fa      	movs	r3, #250	@ 0xfa
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	4809      	ldr	r0, [pc, #36]	@ (80099d0 <lora_debug_print+0x40>)
 80099ac:	f005 f804 	bl	800e9b8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), 1000);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	0018      	movs	r0, r3
 80099b4:	f7f6 fbb0 	bl	8000118 <strlen>
 80099b8:	0003      	movs	r3, r0
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	23fa      	movs	r3, #250	@ 0xfa
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4804      	ldr	r0, [pc, #16]	@ (80099d4 <lora_debug_print+0x44>)
 80099c4:	f004 fff8 	bl	800e9b8 <HAL_UART_Transmit>
}
 80099c8:	46c0      	nop			@ (mov r8, r8)
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b002      	add	sp, #8
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	200003a0 	.word	0x200003a0
 80099d4:	20000434 	.word	0x20000434

080099d8 <lora_detect_module>:

// Detect LoRa module presence using real SX126x commands
static int8_t lora_detect_module(void) {
 80099d8:	b590      	push	{r4, r7, lr}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
    sx126x_chip_status_t chip_status;
    
    lora_debug_print("Detecting LoRa module...\r\n");
 80099de:	4b40      	ldr	r3, [pc, #256]	@ (8009ae0 <lora_detect_module+0x108>)
 80099e0:	0018      	movs	r0, r3
 80099e2:	f7ff ffd5 	bl	8009990 <lora_debug_print>
    
    // Reset module first
    sx126x_hal_reset(NULL);
 80099e6:	2000      	movs	r0, #0
 80099e8:	f001 fde6 	bl	800b5b8 <sx126x_hal_reset>
    
    // Try to get chip status - this will fail if no module is present
    sx126x_status_t status = sx126x_get_status(NULL, &chip_status);
 80099ec:	1dfc      	adds	r4, r7, #7
 80099ee:	1d3b      	adds	r3, r7, #4
 80099f0:	0019      	movs	r1, r3
 80099f2:	2000      	movs	r0, #0
 80099f4:	f001 fc46 	bl	800b284 <sx126x_get_status>
 80099f8:	0003      	movs	r3, r0
 80099fa:	7023      	strb	r3, [r4, #0]
    
    if (status == SX126X_STATUS_OK) {
 80099fc:	1dfb      	adds	r3, r7, #7
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d133      	bne.n	8009a6c <lora_detect_module+0x94>
        lora_debug_print("✓ LoRa module detected on SPI bus\r\n");
 8009a04:	4b37      	ldr	r3, [pc, #220]	@ (8009ae4 <lora_detect_module+0x10c>)
 8009a06:	0018      	movs	r0, r3
 8009a08:	f7ff ffc2 	bl	8009990 <lora_debug_print>
        lora_debug_print("  Chip Mode: ");
 8009a0c:	4b36      	ldr	r3, [pc, #216]	@ (8009ae8 <lora_detect_module+0x110>)
 8009a0e:	0018      	movs	r0, r3
 8009a10:	f7ff ffbe 	bl	8009990 <lora_debug_print>
        switch (chip_status.chip_mode) {
 8009a14:	1d3b      	adds	r3, r7, #4
 8009a16:	785b      	ldrb	r3, [r3, #1]
 8009a18:	2b06      	cmp	r3, #6
 8009a1a:	d81d      	bhi.n	8009a58 <lora_detect_module+0x80>
 8009a1c:	009a      	lsls	r2, r3, #2
 8009a1e:	4b33      	ldr	r3, [pc, #204]	@ (8009aec <lora_detect_module+0x114>)
 8009a20:	18d3      	adds	r3, r2, r3
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	469f      	mov	pc, r3
            case SX126X_CHIP_MODE_STBY_RC:
                lora_debug_print("Standby RC\r\n");
 8009a26:	4b32      	ldr	r3, [pc, #200]	@ (8009af0 <lora_detect_module+0x118>)
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f7ff ffb1 	bl	8009990 <lora_debug_print>
                break;
 8009a2e:	e018      	b.n	8009a62 <lora_detect_module+0x8a>
            case SX126X_CHIP_MODE_STBY_XOSC:
                lora_debug_print("Standby XOSC\r\n");
 8009a30:	4b30      	ldr	r3, [pc, #192]	@ (8009af4 <lora_detect_module+0x11c>)
 8009a32:	0018      	movs	r0, r3
 8009a34:	f7ff ffac 	bl	8009990 <lora_debug_print>
                break;
 8009a38:	e013      	b.n	8009a62 <lora_detect_module+0x8a>
            case SX126X_CHIP_MODE_FS:
                lora_debug_print("Frequency Synthesis\r\n");
 8009a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009af8 <lora_detect_module+0x120>)
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	f7ff ffa7 	bl	8009990 <lora_debug_print>
                break;
 8009a42:	e00e      	b.n	8009a62 <lora_detect_module+0x8a>
            case SX126X_CHIP_MODE_RX:
                lora_debug_print("Receive\r\n");
 8009a44:	4b2d      	ldr	r3, [pc, #180]	@ (8009afc <lora_detect_module+0x124>)
 8009a46:	0018      	movs	r0, r3
 8009a48:	f7ff ffa2 	bl	8009990 <lora_debug_print>
                break;
 8009a4c:	e009      	b.n	8009a62 <lora_detect_module+0x8a>
            case SX126X_CHIP_MODE_TX:
                lora_debug_print("Transmit\r\n");
 8009a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8009b00 <lora_detect_module+0x128>)
 8009a50:	0018      	movs	r0, r3
 8009a52:	f7ff ff9d 	bl	8009990 <lora_debug_print>
                break;
 8009a56:	e004      	b.n	8009a62 <lora_detect_module+0x8a>
            default:
                lora_debug_print("Unknown\r\n");
 8009a58:	4b2a      	ldr	r3, [pc, #168]	@ (8009b04 <lora_detect_module+0x12c>)
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f7ff ff98 	bl	8009990 <lora_debug_print>
                break;
 8009a60:	46c0      	nop			@ (mov r8, r8)
        }
        lora_module_detected = 1;
 8009a62:	4b29      	ldr	r3, [pc, #164]	@ (8009b08 <lora_detect_module+0x130>)
 8009a64:	2201      	movs	r2, #1
 8009a66:	701a      	strb	r2, [r3, #0]
        return 0;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	e034      	b.n	8009ad6 <lora_detect_module+0xfe>
    } else {
        lora_debug_print("✗ No LoRa module detected on SPI bus\r\n");
 8009a6c:	4b27      	ldr	r3, [pc, #156]	@ (8009b0c <lora_detect_module+0x134>)
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f7ff ff8e 	bl	8009990 <lora_debug_print>
        lora_debug_print("Troubleshooting steps:\r\n");
 8009a74:	4b26      	ldr	r3, [pc, #152]	@ (8009b10 <lora_detect_module+0x138>)
 8009a76:	0018      	movs	r0, r3
 8009a78:	f7ff ff8a 	bl	8009990 <lora_debug_print>
        lora_debug_print("  1. Check SPI connections:\r\n");
 8009a7c:	4b25      	ldr	r3, [pc, #148]	@ (8009b14 <lora_detect_module+0x13c>)
 8009a7e:	0018      	movs	r0, r3
 8009a80:	f7ff ff86 	bl	8009990 <lora_debug_print>
        lora_debug_print("     - PA5 (SCK) → LoRa SCK\r\n");
 8009a84:	4b24      	ldr	r3, [pc, #144]	@ (8009b18 <lora_detect_module+0x140>)
 8009a86:	0018      	movs	r0, r3
 8009a88:	f7ff ff82 	bl	8009990 <lora_debug_print>
        lora_debug_print("     - PA6 (MISO) → LoRa MISO\r\n");
 8009a8c:	4b23      	ldr	r3, [pc, #140]	@ (8009b1c <lora_detect_module+0x144>)
 8009a8e:	0018      	movs	r0, r3
 8009a90:	f7ff ff7e 	bl	8009990 <lora_debug_print>
        lora_debug_print("     - PA7 (MOSI) → LoRa MOSI\r\n");
 8009a94:	4b22      	ldr	r3, [pc, #136]	@ (8009b20 <lora_detect_module+0x148>)
 8009a96:	0018      	movs	r0, r3
 8009a98:	f7ff ff7a 	bl	8009990 <lora_debug_print>
        lora_debug_print("     - PA4 (NSS) → LoRa NSS\r\n");
 8009a9c:	4b21      	ldr	r3, [pc, #132]	@ (8009b24 <lora_detect_module+0x14c>)
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	f7ff ff76 	bl	8009990 <lora_debug_print>
        lora_debug_print("     - PC0 (RESET) → LoRa RESET\r\n");
 8009aa4:	4b20      	ldr	r3, [pc, #128]	@ (8009b28 <lora_detect_module+0x150>)
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f7ff ff72 	bl	8009990 <lora_debug_print>
        lora_debug_print("  2. Verify power supply:\r\n");
 8009aac:	4b1f      	ldr	r3, [pc, #124]	@ (8009b2c <lora_detect_module+0x154>)
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f7ff ff6e 	bl	8009990 <lora_debug_print>
        lora_debug_print("     - LoRa VCC → 3.3V\r\n");
 8009ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8009b30 <lora_detect_module+0x158>)
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f7ff ff6a 	bl	8009990 <lora_debug_print>
        lora_debug_print("     - LoRa GND → GND\r\n");
 8009abc:	4b1d      	ldr	r3, [pc, #116]	@ (8009b34 <lora_detect_module+0x15c>)
 8009abe:	0018      	movs	r0, r3
 8009ac0:	f7ff ff66 	bl	8009990 <lora_debug_print>
        lora_debug_print("  3. Check module type (SX1261/SX1262/SX1268)\r\n");
 8009ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8009b38 <lora_detect_module+0x160>)
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f7ff ff62 	bl	8009990 <lora_debug_print>
        lora_module_detected = 0;
 8009acc:	4b0e      	ldr	r3, [pc, #56]	@ (8009b08 <lora_detect_module+0x130>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	701a      	strb	r2, [r3, #0]
        return -1;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	425b      	negs	r3, r3
    }
}
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	b003      	add	sp, #12
 8009adc:	bd90      	pop	{r4, r7, pc}
 8009ade:	46c0      	nop			@ (mov r8, r8)
 8009ae0:	080152c0 	.word	0x080152c0
 8009ae4:	080152dc 	.word	0x080152dc
 8009ae8:	08015304 	.word	0x08015304
 8009aec:	08016390 	.word	0x08016390
 8009af0:	08015314 	.word	0x08015314
 8009af4:	08015324 	.word	0x08015324
 8009af8:	08015334 	.word	0x08015334
 8009afc:	0801534c 	.word	0x0801534c
 8009b00:	08015358 	.word	0x08015358
 8009b04:	08015364 	.word	0x08015364
 8009b08:	200002e4 	.word	0x200002e4
 8009b0c:	08015370 	.word	0x08015370
 8009b10:	0801539c 	.word	0x0801539c
 8009b14:	080153b8 	.word	0x080153b8
 8009b18:	080153d8 	.word	0x080153d8
 8009b1c:	080153f8 	.word	0x080153f8
 8009b20:	0801541c 	.word	0x0801541c
 8009b24:	08015440 	.word	0x08015440
 8009b28:	08015460 	.word	0x08015460
 8009b2c:	08015484 	.word	0x08015484
 8009b30:	080154a0 	.word	0x080154a0
 8009b34:	080154bc 	.word	0x080154bc
 8009b38:	080154d8 	.word	0x080154d8

08009b3c <lora_init>:

// Initialize LoRa module using real SX126x driver
int8_t lora_init(void) {
 8009b3c:	b590      	push	{r4, r7, lr}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af02      	add	r7, sp, #8
    sx126x_status_t status;
    
    lora_debug_print("Initializing LoRa module...\r\n");
 8009b42:	4b86      	ldr	r3, [pc, #536]	@ (8009d5c <lora_init+0x220>)
 8009b44:	0018      	movs	r0, r3
 8009b46:	f7ff ff23 	bl	8009990 <lora_debug_print>
    
    // First detect if module is present
    if (lora_detect_module() != 0) {
 8009b4a:	f7ff ff45 	bl	80099d8 <lora_detect_module>
 8009b4e:	1e03      	subs	r3, r0, #0
 8009b50:	d009      	beq.n	8009b66 <lora_init+0x2a>
        lora_debug_print("✗ LoRa initialization failed - no module detected\r\n");
 8009b52:	4b83      	ldr	r3, [pc, #524]	@ (8009d60 <lora_init+0x224>)
 8009b54:	0018      	movs	r0, r3
 8009b56:	f7ff ff1b 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009b5a:	4b82      	ldr	r3, [pc, #520]	@ (8009d64 <lora_init+0x228>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	701a      	strb	r2, [r3, #0]
        return -1;
 8009b60:	2301      	movs	r3, #1
 8009b62:	425b      	negs	r3, r3
 8009b64:	e0f6      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set standby mode
    status = sx126x_set_standby(NULL, SX126X_STANDBY_CFG_RC);
 8009b66:	1dfc      	adds	r4, r7, #7
 8009b68:	2100      	movs	r1, #0
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	f001 f883 	bl	800ac76 <sx126x_set_standby>
 8009b70:	0003      	movs	r3, r0
 8009b72:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009b74:	1dfb      	adds	r3, r7, #7
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d009      	beq.n	8009b90 <lora_init+0x54>
        lora_debug_print("✗ Failed to set standby mode\r\n");
 8009b7c:	4b7a      	ldr	r3, [pc, #488]	@ (8009d68 <lora_init+0x22c>)
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f7ff ff06 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009b84:	4b77      	ldr	r3, [pc, #476]	@ (8009d64 <lora_init+0x228>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	701a      	strb	r2, [r3, #0]
        return -1;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	425b      	negs	r3, r3
 8009b8e:	e0e1      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set regulator mode to LDO
    status = sx126x_set_reg_mode(NULL, SX126X_REG_MODE_LDO);
 8009b90:	1dfc      	adds	r4, r7, #7
 8009b92:	2100      	movs	r1, #0
 8009b94:	2000      	movs	r0, #0
 8009b96:	f001 f8cb 	bl	800ad30 <sx126x_set_reg_mode>
 8009b9a:	0003      	movs	r3, r0
 8009b9c:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009b9e:	1dfb      	adds	r3, r7, #7
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d009      	beq.n	8009bba <lora_init+0x7e>
        lora_debug_print("✗ Failed to set regulator mode\r\n");
 8009ba6:	4b71      	ldr	r3, [pc, #452]	@ (8009d6c <lora_init+0x230>)
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f7ff fef1 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009bae:	4b6d      	ldr	r3, [pc, #436]	@ (8009d64 <lora_init+0x228>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
        return -1;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	425b      	negs	r3, r3
 8009bb8:	e0cc      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set packet type to LoRa
    status = sx126x_set_pkt_type(NULL, SX126X_PKT_TYPE_LORA);
 8009bba:	1dfc      	adds	r4, r7, #7
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	f001 fa41 	bl	800b046 <sx126x_set_pkt_type>
 8009bc4:	0003      	movs	r3, r0
 8009bc6:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009bc8:	1dfb      	adds	r3, r7, #7
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d009      	beq.n	8009be4 <lora_init+0xa8>
        lora_debug_print("✗ Failed to set packet type\r\n");
 8009bd0:	4b67      	ldr	r3, [pc, #412]	@ (8009d70 <lora_init+0x234>)
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	f7ff fedc 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009bd8:	4b62      	ldr	r3, [pc, #392]	@ (8009d64 <lora_init+0x228>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	701a      	strb	r2, [r3, #0]
        return -1;
 8009bde:	2301      	movs	r3, #1
 8009be0:	425b      	negs	r3, r3
 8009be2:	e0b7      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set RF frequency (868 MHz)
    status = sx126x_set_rf_freq(NULL, LORA_FREQUENCY_HZ);
 8009be4:	1dfc      	adds	r4, r7, #7
 8009be6:	4b63      	ldr	r3, [pc, #396]	@ (8009d74 <lora_init+0x238>)
 8009be8:	0019      	movs	r1, r3
 8009bea:	2000      	movs	r0, #0
 8009bec:	f001 f9ec 	bl	800afc8 <sx126x_set_rf_freq>
 8009bf0:	0003      	movs	r3, r0
 8009bf2:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009bf4:	1dfb      	adds	r3, r7, #7
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d009      	beq.n	8009c10 <lora_init+0xd4>
        lora_debug_print("✗ Failed to set RF frequency\r\n");
 8009bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8009d78 <lora_init+0x23c>)
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f7ff fec6 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009c04:	4b57      	ldr	r3, [pc, #348]	@ (8009d64 <lora_init+0x228>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
        return -1;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	e0a1      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set LoRa modulation parameters
    status = sx126x_set_lora_mod_params(NULL, &lora_mod_params);
 8009c10:	1dfc      	adds	r4, r7, #7
 8009c12:	4b5a      	ldr	r3, [pc, #360]	@ (8009d7c <lora_init+0x240>)
 8009c14:	0019      	movs	r1, r3
 8009c16:	2000      	movs	r0, #0
 8009c18:	f001 fa56 	bl	800b0c8 <sx126x_set_lora_mod_params>
 8009c1c:	0003      	movs	r3, r0
 8009c1e:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009c20:	1dfb      	adds	r3, r7, #7
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d009      	beq.n	8009c3c <lora_init+0x100>
        lora_debug_print("✗ Failed to set LoRa modulation parameters\r\n");
 8009c28:	4b55      	ldr	r3, [pc, #340]	@ (8009d80 <lora_init+0x244>)
 8009c2a:	0018      	movs	r0, r3
 8009c2c:	f7ff feb0 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009c30:	4b4c      	ldr	r3, [pc, #304]	@ (8009d64 <lora_init+0x228>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	701a      	strb	r2, [r3, #0]
        return -1;
 8009c36:	2301      	movs	r3, #1
 8009c38:	425b      	negs	r3, r3
 8009c3a:	e08b      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set LoRa packet parameters
    status = sx126x_set_lora_pkt_params(NULL, &lora_pkt_params);
 8009c3c:	1dfc      	adds	r4, r7, #7
 8009c3e:	4b51      	ldr	r3, [pc, #324]	@ (8009d84 <lora_init+0x248>)
 8009c40:	0019      	movs	r1, r3
 8009c42:	2000      	movs	r0, #0
 8009c44:	f001 fa7e 	bl	800b144 <sx126x_set_lora_pkt_params>
 8009c48:	0003      	movs	r3, r0
 8009c4a:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009c4c:	1dfb      	adds	r3, r7, #7
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d009      	beq.n	8009c68 <lora_init+0x12c>
        lora_debug_print("✗ Failed to set LoRa packet parameters\r\n");
 8009c54:	4b4c      	ldr	r3, [pc, #304]	@ (8009d88 <lora_init+0x24c>)
 8009c56:	0018      	movs	r0, r3
 8009c58:	f7ff fe9a 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009c5c:	4b41      	ldr	r3, [pc, #260]	@ (8009d64 <lora_init+0x228>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	701a      	strb	r2, [r3, #0]
        return -1;
 8009c62:	2301      	movs	r3, #1
 8009c64:	425b      	negs	r3, r3
 8009c66:	e075      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set TX parameters
    status = sx126x_set_tx_params(NULL, LORA_TX_POWER_DBM, SX126X_RAMP_10_US);
 8009c68:	1dfc      	adds	r4, r7, #7
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	210e      	movs	r1, #14
 8009c6e:	2000      	movs	r0, #0
 8009c70:	f001 fa05 	bl	800b07e <sx126x_set_tx_params>
 8009c74:	0003      	movs	r3, r0
 8009c76:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009c78:	1dfb      	adds	r3, r7, #7
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d009      	beq.n	8009c94 <lora_init+0x158>
        lora_debug_print("✗ Failed to set TX parameters\r\n");
 8009c80:	4b42      	ldr	r3, [pc, #264]	@ (8009d8c <lora_init+0x250>)
 8009c82:	0018      	movs	r0, r3
 8009c84:	f7ff fe84 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009c88:	4b36      	ldr	r3, [pc, #216]	@ (8009d64 <lora_init+0x228>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	701a      	strb	r2, [r3, #0]
        return -1;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	425b      	negs	r3, r3
 8009c92:	e05f      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set LoRa sync word
    status = sx126x_set_lora_sync_word(NULL, LORA_SYNC_WORD);
 8009c94:	1dfc      	adds	r4, r7, #7
 8009c96:	2112      	movs	r1, #18
 8009c98:	2000      	movs	r0, #0
 8009c9a:	f001 fb61 	bl	800b360 <sx126x_set_lora_sync_word>
 8009c9e:	0003      	movs	r3, r0
 8009ca0:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009ca2:	1dfb      	adds	r3, r7, #7
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <lora_init+0x182>
        lora_debug_print("✗ Failed to set LoRa sync word\r\n");
 8009caa:	4b39      	ldr	r3, [pc, #228]	@ (8009d90 <lora_init+0x254>)
 8009cac:	0018      	movs	r0, r3
 8009cae:	f7ff fe6f 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8009d64 <lora_init+0x228>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	701a      	strb	r2, [r3, #0]
        return -1;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	425b      	negs	r3, r3
 8009cbc:	e04a      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set buffer base address
    status = sx126x_set_buffer_base_address(NULL, 0x00, 0x00);
 8009cbe:	1dfc      	adds	r4, r7, #7
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	f001 fab7 	bl	800b238 <sx126x_set_buffer_base_address>
 8009cca:	0003      	movs	r3, r0
 8009ccc:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009cce:	1dfb      	adds	r3, r7, #7
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d009      	beq.n	8009cea <lora_init+0x1ae>
        lora_debug_print("✗ Failed to set buffer base address\r\n");
 8009cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8009d94 <lora_init+0x258>)
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f7ff fe59 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009cde:	4b21      	ldr	r3, [pc, #132]	@ (8009d64 <lora_init+0x228>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	701a      	strb	r2, [r3, #0]
        return -1;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	425b      	negs	r3, r3
 8009ce8:	e034      	b.n	8009d54 <lora_init+0x218>
    }
    
    // Set DIO IRQ parameters
    status = sx126x_set_dio_irq_params(NULL, SX126X_IRQ_TX_DONE | SX126X_IRQ_TIMEOUT, 
 8009cea:	1dfc      	adds	r4, r7, #7
 8009cec:	4a2a      	ldr	r2, [pc, #168]	@ (8009d98 <lora_init+0x25c>)
 8009cee:	492a      	ldr	r1, [pc, #168]	@ (8009d98 <lora_init+0x25c>)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	f001 f8c0 	bl	800ae7c <sx126x_set_dio_irq_params>
 8009cfc:	0003      	movs	r3, r0
 8009cfe:	7023      	strb	r3, [r4, #0]
                                       SX126X_IRQ_TX_DONE | SX126X_IRQ_TIMEOUT, 0, 0);
    if (status != SX126X_STATUS_OK) {
 8009d00:	1dfb      	adds	r3, r7, #7
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d009      	beq.n	8009d1c <lora_init+0x1e0>
        lora_debug_print("✗ Failed to set DIO IRQ parameters\r\n");
 8009d08:	4b24      	ldr	r3, [pc, #144]	@ (8009d9c <lora_init+0x260>)
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f7ff fe40 	bl	8009990 <lora_debug_print>
        lora_initialized = 0;
 8009d10:	4b14      	ldr	r3, [pc, #80]	@ (8009d64 <lora_init+0x228>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	701a      	strb	r2, [r3, #0]
        return -1;
 8009d16:	2301      	movs	r3, #1
 8009d18:	425b      	negs	r3, r3
 8009d1a:	e01b      	b.n	8009d54 <lora_init+0x218>
    }
    
    lora_debug_print("✓ LoRa module initialized successfully\r\n");
 8009d1c:	4b20      	ldr	r3, [pc, #128]	@ (8009da0 <lora_init+0x264>)
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f7ff fe36 	bl	8009990 <lora_debug_print>
    lora_debug_print("  Frequency: 868 MHz\r\n");
 8009d24:	4b1f      	ldr	r3, [pc, #124]	@ (8009da4 <lora_init+0x268>)
 8009d26:	0018      	movs	r0, r3
 8009d28:	f7ff fe32 	bl	8009990 <lora_debug_print>
    lora_debug_print("  Spreading Factor: SF7\r\n");
 8009d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8009da8 <lora_init+0x26c>)
 8009d2e:	0018      	movs	r0, r3
 8009d30:	f7ff fe2e 	bl	8009990 <lora_debug_print>
    lora_debug_print("  Bandwidth: 125 kHz\r\n");
 8009d34:	4b1d      	ldr	r3, [pc, #116]	@ (8009dac <lora_init+0x270>)
 8009d36:	0018      	movs	r0, r3
 8009d38:	f7ff fe2a 	bl	8009990 <lora_debug_print>
    lora_debug_print("  Coding Rate: 4/5\r\n");
 8009d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8009db0 <lora_init+0x274>)
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f7ff fe26 	bl	8009990 <lora_debug_print>
    lora_debug_print("  TX Power: 14 dBm\r\n");
 8009d44:	4b1b      	ldr	r3, [pc, #108]	@ (8009db4 <lora_init+0x278>)
 8009d46:	0018      	movs	r0, r3
 8009d48:	f7ff fe22 	bl	8009990 <lora_debug_print>
    lora_initialized = 1;
 8009d4c:	4b05      	ldr	r3, [pc, #20]	@ (8009d64 <lora_init+0x228>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	701a      	strb	r2, [r3, #0]
    return 0;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	0018      	movs	r0, r3
 8009d56:	46bd      	mov	sp, r7
 8009d58:	b003      	add	sp, #12
 8009d5a:	bd90      	pop	{r4, r7, pc}
 8009d5c:	08015508 	.word	0x08015508
 8009d60:	08015528 	.word	0x08015528
 8009d64:	200002e5 	.word	0x200002e5
 8009d68:	08015560 	.word	0x08015560
 8009d6c:	08015584 	.word	0x08015584
 8009d70:	080155a8 	.word	0x080155a8
 8009d74:	33bca100 	.word	0x33bca100
 8009d78:	080155c8 	.word	0x080155c8
 8009d7c:	20000000 	.word	0x20000000
 8009d80:	080155ec 	.word	0x080155ec
 8009d84:	20000004 	.word	0x20000004
 8009d88:	0801561c 	.word	0x0801561c
 8009d8c:	08015648 	.word	0x08015648
 8009d90:	0801566c 	.word	0x0801566c
 8009d94:	08015690 	.word	0x08015690
 8009d98:	00000201 	.word	0x00000201
 8009d9c:	080156b8 	.word	0x080156b8
 8009da0:	080156e0 	.word	0x080156e0
 8009da4:	0801570c 	.word	0x0801570c
 8009da8:	08015724 	.word	0x08015724
 8009dac:	08015740 	.word	0x08015740
 8009db0:	08015758 	.word	0x08015758
 8009db4:	08015770 	.word	0x08015770

08009db8 <lora_send_sensor_data>:

// Send sensor data via LoRa
int8_t lora_send_sensor_data(float temperature, float pressure, float humidity) {
 8009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dba:	b09f      	sub	sp, #124	@ 0x7c
 8009dbc:	af06      	add	r7, sp, #24
 8009dbe:	6178      	str	r0, [r7, #20]
 8009dc0:	6139      	str	r1, [r7, #16]
 8009dc2:	60fa      	str	r2, [r7, #12]
    if (!lora_module_detected) {
 8009dc4:	4b29      	ldr	r3, [pc, #164]	@ (8009e6c <lora_send_sensor_data+0xb4>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d106      	bne.n	8009dda <lora_send_sensor_data+0x22>
        lora_debug_print("✗ LoRa transmission failed - no module detected\r\n");
 8009dcc:	4b28      	ldr	r3, [pc, #160]	@ (8009e70 <lora_send_sensor_data+0xb8>)
 8009dce:	0018      	movs	r0, r3
 8009dd0:	f7ff fdde 	bl	8009990 <lora_debug_print>
        return -1;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	425b      	negs	r3, r3
 8009dd8:	e044      	b.n	8009e64 <lora_send_sensor_data+0xac>
    }
    
    if (!lora_initialized) {
 8009dda:	4b26      	ldr	r3, [pc, #152]	@ (8009e74 <lora_send_sensor_data+0xbc>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d106      	bne.n	8009df0 <lora_send_sensor_data+0x38>
        lora_debug_print("✗ LoRa transmission failed - module not initialized\r\n");
 8009de2:	4b25      	ldr	r3, [pc, #148]	@ (8009e78 <lora_send_sensor_data+0xc0>)
 8009de4:	0018      	movs	r0, r3
 8009de6:	f7ff fdd3 	bl	8009990 <lora_debug_print>
        return -1;
 8009dea:	2301      	movs	r3, #1
 8009dec:	425b      	negs	r3, r3
 8009dee:	e039      	b.n	8009e64 <lora_send_sensor_data+0xac>
    
    char payload[LORA_PAYLOAD_LENGTH];
    int len;
    
    // Format sensor data as JSON-like string
    len = snprintf(payload, sizeof(payload), 
 8009df0:	6978      	ldr	r0, [r7, #20]
 8009df2:	f7f9 fce1 	bl	80037b8 <__aeabi_f2d>
 8009df6:	0004      	movs	r4, r0
 8009df8:	000d      	movs	r5, r1
 8009dfa:	6938      	ldr	r0, [r7, #16]
 8009dfc:	f7f9 fcdc 	bl	80037b8 <__aeabi_f2d>
 8009e00:	6038      	str	r0, [r7, #0]
 8009e02:	6079      	str	r1, [r7, #4]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7f9 fcd7 	bl	80037b8 <__aeabi_f2d>
 8009e0a:	0002      	movs	r2, r0
 8009e0c:	000b      	movs	r3, r1
 8009e0e:	491b      	ldr	r1, [pc, #108]	@ (8009e7c <lora_send_sensor_data+0xc4>)
 8009e10:	2014      	movs	r0, #20
 8009e12:	2608      	movs	r6, #8
 8009e14:	1980      	adds	r0, r0, r6
 8009e16:	19c0      	adds	r0, r0, r7
 8009e18:	9204      	str	r2, [sp, #16]
 8009e1a:	9305      	str	r3, [sp, #20]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	9202      	str	r2, [sp, #8]
 8009e22:	9303      	str	r3, [sp, #12]
 8009e24:	9400      	str	r4, [sp, #0]
 8009e26:	9501      	str	r5, [sp, #4]
 8009e28:	000a      	movs	r2, r1
 8009e2a:	2140      	movs	r1, #64	@ 0x40
 8009e2c:	f007 f8a8 	bl	8010f80 <sniprintf>
 8009e30:	0003      	movs	r3, r0
 8009e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
                   "{\"temp\":%.2f,\"press\":%.2f,\"hum\":%.2f,\"node\":\"STM32\"}",
                   temperature, pressure, humidity);
    
    if (len < 0 || len >= sizeof(payload)) {
 8009e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	db02      	blt.n	8009e40 <lora_send_sensor_data+0x88>
 8009e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e3e:	d906      	bls.n	8009e4e <lora_send_sensor_data+0x96>
        lora_debug_print("Error: Payload too long\r\n");
 8009e40:	4b0f      	ldr	r3, [pc, #60]	@ (8009e80 <lora_send_sensor_data+0xc8>)
 8009e42:	0018      	movs	r0, r3
 8009e44:	f7ff fda4 	bl	8009990 <lora_debug_print>
        return -1;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	425b      	negs	r3, r3
 8009e4c:	e00a      	b.n	8009e64 <lora_send_sensor_data+0xac>
    }
    
    return lora_send_message((uint8_t*)payload, len);
 8009e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	2314      	movs	r3, #20
 8009e54:	2108      	movs	r1, #8
 8009e56:	185b      	adds	r3, r3, r1
 8009e58:	19db      	adds	r3, r3, r7
 8009e5a:	0011      	movs	r1, r2
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	f000 f811 	bl	8009e84 <lora_send_message>
 8009e62:	0003      	movs	r3, r0
}
 8009e64:	0018      	movs	r0, r3
 8009e66:	46bd      	mov	sp, r7
 8009e68:	b019      	add	sp, #100	@ 0x64
 8009e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e6c:	200002e4 	.word	0x200002e4
 8009e70:	08015788 	.word	0x08015788
 8009e74:	200002e5 	.word	0x200002e5
 8009e78:	080157bc 	.word	0x080157bc
 8009e7c:	080157f4 	.word	0x080157f4
 8009e80:	0801582c 	.word	0x0801582c

08009e84 <lora_send_message>:

// Send message via LoRa using real SX126x driver
int8_t lora_send_message(const uint8_t* data, uint8_t length) {
 8009e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e86:	b0a9      	sub	sp, #164	@ 0xa4
 8009e88:	af02      	add	r7, sp, #8
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	000a      	movs	r2, r1
 8009e8e:	1cfb      	adds	r3, r7, #3
 8009e90:	701a      	strb	r2, [r3, #0]
    sx126x_status_t status;
    sx126x_irq_mask_t irq_status;
    char debug_msg[128];
    
    if (!lora_module_detected) {
 8009e92:	4b6d      	ldr	r3, [pc, #436]	@ (800a048 <lora_send_message+0x1c4>)
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d106      	bne.n	8009ea8 <lora_send_message+0x24>
        lora_debug_print("✗ LoRa transmission failed - no module detected\r\n");
 8009e9a:	4b6c      	ldr	r3, [pc, #432]	@ (800a04c <lora_send_message+0x1c8>)
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	f7ff fd77 	bl	8009990 <lora_debug_print>
        return -1;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	425b      	negs	r3, r3
 8009ea6:	e0cb      	b.n	800a040 <lora_send_message+0x1bc>
    }
    
    if (!lora_initialized) {
 8009ea8:	4b69      	ldr	r3, [pc, #420]	@ (800a050 <lora_send_message+0x1cc>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d106      	bne.n	8009ebe <lora_send_message+0x3a>
        lora_debug_print("✗ LoRa transmission failed - module not initialized\r\n");
 8009eb0:	4b68      	ldr	r3, [pc, #416]	@ (800a054 <lora_send_message+0x1d0>)
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	f7ff fd6c 	bl	8009990 <lora_debug_print>
        return -1;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	425b      	negs	r3, r3
 8009ebc:	e0c0      	b.n	800a040 <lora_send_message+0x1bc>
    }
    
    if (data == NULL || length == 0 || length > LORA_PAYLOAD_LENGTH) {
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d007      	beq.n	8009ed4 <lora_send_message+0x50>
 8009ec4:	1cfb      	adds	r3, r7, #3
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <lora_send_message+0x50>
 8009ecc:	1cfb      	adds	r3, r7, #3
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b40      	cmp	r3, #64	@ 0x40
 8009ed2:	d906      	bls.n	8009ee2 <lora_send_message+0x5e>
        lora_debug_print("Invalid LoRa message parameters\r\n");
 8009ed4:	4b60      	ldr	r3, [pc, #384]	@ (800a058 <lora_send_message+0x1d4>)
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f7ff fd5a 	bl	8009990 <lora_debug_print>
        return -1;
 8009edc:	2301      	movs	r3, #1
 8009ede:	425b      	negs	r3, r3
 8009ee0:	e0ae      	b.n	800a040 <lora_send_message+0x1bc>
    }
    
    lora_debug_print("Sending LoRa message...\r\n");
 8009ee2:	4b5e      	ldr	r3, [pc, #376]	@ (800a05c <lora_send_message+0x1d8>)
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f7ff fd53 	bl	8009990 <lora_debug_print>
    
    // Update packet length
    lora_pkt_params.pld_len_in_bytes = length;
 8009eea:	4b5d      	ldr	r3, [pc, #372]	@ (800a060 <lora_send_message+0x1dc>)
 8009eec:	1cfa      	adds	r2, r7, #3
 8009eee:	7812      	ldrb	r2, [r2, #0]
 8009ef0:	70da      	strb	r2, [r3, #3]
    status = sx126x_set_lora_pkt_params(NULL, &lora_pkt_params);
 8009ef2:	2597      	movs	r5, #151	@ 0x97
 8009ef4:	197c      	adds	r4, r7, r5
 8009ef6:	4b5a      	ldr	r3, [pc, #360]	@ (800a060 <lora_send_message+0x1dc>)
 8009ef8:	0019      	movs	r1, r3
 8009efa:	2000      	movs	r0, #0
 8009efc:	f001 f922 	bl	800b144 <sx126x_set_lora_pkt_params>
 8009f00:	0003      	movs	r3, r0
 8009f02:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009f04:	197b      	adds	r3, r7, r5
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d006      	beq.n	8009f1a <lora_send_message+0x96>
        lora_debug_print("✗ Failed to update packet parameters\r\n");
 8009f0c:	4b55      	ldr	r3, [pc, #340]	@ (800a064 <lora_send_message+0x1e0>)
 8009f0e:	0018      	movs	r0, r3
 8009f10:	f7ff fd3e 	bl	8009990 <lora_debug_print>
        return -1;
 8009f14:	2301      	movs	r3, #1
 8009f16:	425b      	negs	r3, r3
 8009f18:	e092      	b.n	800a040 <lora_send_message+0x1bc>
    }
    
    // Write payload to buffer
    status = sx126x_write_buffer(NULL, 0x00, data, length);
 8009f1a:	2597      	movs	r5, #151	@ 0x97
 8009f1c:	197c      	adds	r4, r7, r5
 8009f1e:	1cfb      	adds	r3, r7, #3
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	2100      	movs	r1, #0
 8009f26:	2000      	movs	r0, #0
 8009f28:	f000 ff81 	bl	800ae2e <sx126x_write_buffer>
 8009f2c:	0003      	movs	r3, r0
 8009f2e:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009f30:	197b      	adds	r3, r7, r5
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d006      	beq.n	8009f46 <lora_send_message+0xc2>
        lora_debug_print("✗ Failed to write payload to buffer\r\n");
 8009f38:	4b4b      	ldr	r3, [pc, #300]	@ (800a068 <lora_send_message+0x1e4>)
 8009f3a:	0018      	movs	r0, r3
 8009f3c:	f7ff fd28 	bl	8009990 <lora_debug_print>
        return -1;
 8009f40:	2301      	movs	r3, #1
 8009f42:	425b      	negs	r3, r3
 8009f44:	e07c      	b.n	800a040 <lora_send_message+0x1bc>
    }
    
    // Clear IRQ status
    status = sx126x_clear_irq_status(NULL, SX126X_IRQ_ALL);
 8009f46:	2597      	movs	r5, #151	@ 0x97
 8009f48:	197c      	adds	r4, r7, r5
 8009f4a:	4b48      	ldr	r3, [pc, #288]	@ (800a06c <lora_send_message+0x1e8>)
 8009f4c:	0019      	movs	r1, r3
 8009f4e:	2000      	movs	r0, #0
 8009f50:	f001 f816 	bl	800af80 <sx126x_clear_irq_status>
 8009f54:	0003      	movs	r3, r0
 8009f56:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009f58:	197b      	adds	r3, r7, r5
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d006      	beq.n	8009f6e <lora_send_message+0xea>
        lora_debug_print("✗ Failed to clear IRQ status\r\n");
 8009f60:	4b43      	ldr	r3, [pc, #268]	@ (800a070 <lora_send_message+0x1ec>)
 8009f62:	0018      	movs	r0, r3
 8009f64:	f7ff fd14 	bl	8009990 <lora_debug_print>
        return -1;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	425b      	negs	r3, r3
 8009f6c:	e068      	b.n	800a040 <lora_send_message+0x1bc>
    }
    
    // Start transmission
    status = sx126x_set_tx(NULL, 1000); // 1 second timeout
 8009f6e:	2597      	movs	r5, #151	@ 0x97
 8009f70:	197c      	adds	r4, r7, r5
 8009f72:	23fa      	movs	r3, #250	@ 0xfa
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	0019      	movs	r1, r3
 8009f78:	2000      	movs	r0, #0
 8009f7a:	f000 fe98 	bl	800acae <sx126x_set_tx>
 8009f7e:	0003      	movs	r3, r0
 8009f80:	7023      	strb	r3, [r4, #0]
    if (status != SX126X_STATUS_OK) {
 8009f82:	197b      	adds	r3, r7, r5
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d006      	beq.n	8009f98 <lora_send_message+0x114>
        lora_debug_print("✗ Failed to start transmission\r\n");
 8009f8a:	4b3a      	ldr	r3, [pc, #232]	@ (800a074 <lora_send_message+0x1f0>)
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f7ff fcff 	bl	8009990 <lora_debug_print>
        return -1;
 8009f92:	2301      	movs	r3, #1
 8009f94:	425b      	negs	r3, r3
 8009f96:	e053      	b.n	800a040 <lora_send_message+0x1bc>
    }
    
    // Wait for transmission to complete
    uint32_t timeout = HAL_GetTick() + 2000; // 2 second timeout
 8009f98:	f001 fcba 	bl	800b910 <HAL_GetTick>
 8009f9c:	0003      	movs	r3, r0
 8009f9e:	22fa      	movs	r2, #250	@ 0xfa
 8009fa0:	00d2      	lsls	r2, r2, #3
 8009fa2:	4694      	mov	ip, r2
 8009fa4:	4463      	add	r3, ip
 8009fa6:	2290      	movs	r2, #144	@ 0x90
 8009fa8:	18ba      	adds	r2, r7, r2
 8009faa:	6013      	str	r3, [r2, #0]
    while (HAL_GetTick() < timeout) {
 8009fac:	e03a      	b.n	800a024 <lora_send_message+0x1a0>
        status = sx126x_get_irq_status(NULL, &irq_status);
 8009fae:	2597      	movs	r5, #151	@ 0x97
 8009fb0:	197c      	adds	r4, r7, r5
 8009fb2:	268e      	movs	r6, #142	@ 0x8e
 8009fb4:	19bb      	adds	r3, r7, r6
 8009fb6:	0019      	movs	r1, r3
 8009fb8:	2000      	movs	r0, #0
 8009fba:	f000 ffb3 	bl	800af24 <sx126x_get_irq_status>
 8009fbe:	0003      	movs	r3, r0
 8009fc0:	7023      	strb	r3, [r4, #0]
        if (status == SX126X_STATUS_OK) {
 8009fc2:	197b      	adds	r3, r7, r5
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d129      	bne.n	800a01e <lora_send_message+0x19a>
            if (irq_status & SX126X_IRQ_TX_DONE) {
 8009fca:	19bb      	adds	r3, r7, r6
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	001a      	movs	r2, r3
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	d014      	beq.n	800a000 <lora_send_message+0x17c>
                lora_debug_print("✓ LoRa transmission completed successfully\r\n");
 8009fd6:	4b28      	ldr	r3, [pc, #160]	@ (800a078 <lora_send_message+0x1f4>)
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f7ff fcd9 	bl	8009990 <lora_debug_print>
                snprintf(debug_msg, sizeof(debug_msg), "Message sent: %.*s\r\n", length, data);
 8009fde:	1cfb      	adds	r3, r7, #3
 8009fe0:	7819      	ldrb	r1, [r3, #0]
 8009fe2:	4a26      	ldr	r2, [pc, #152]	@ (800a07c <lora_send_message+0x1f8>)
 8009fe4:	240c      	movs	r4, #12
 8009fe6:	1938      	adds	r0, r7, r4
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	000b      	movs	r3, r1
 8009fee:	2180      	movs	r1, #128	@ 0x80
 8009ff0:	f006 ffc6 	bl	8010f80 <sniprintf>
                lora_debug_print(debug_msg);
 8009ff4:	193b      	adds	r3, r7, r4
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	f7ff fcca 	bl	8009990 <lora_debug_print>
                return 0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e01f      	b.n	800a040 <lora_send_message+0x1bc>
            } else if (irq_status & SX126X_IRQ_TIMEOUT) {
 800a000:	238e      	movs	r3, #142	@ 0x8e
 800a002:	18fb      	adds	r3, r7, r3
 800a004:	881b      	ldrh	r3, [r3, #0]
 800a006:	001a      	movs	r2, r3
 800a008:	2380      	movs	r3, #128	@ 0x80
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4013      	ands	r3, r2
 800a00e:	d006      	beq.n	800a01e <lora_send_message+0x19a>
                lora_debug_print("✗ LoRa transmission timeout\r\n");
 800a010:	4b1b      	ldr	r3, [pc, #108]	@ (800a080 <lora_send_message+0x1fc>)
 800a012:	0018      	movs	r0, r3
 800a014:	f7ff fcbc 	bl	8009990 <lora_debug_print>
                return -1;
 800a018:	2301      	movs	r3, #1
 800a01a:	425b      	negs	r3, r3
 800a01c:	e010      	b.n	800a040 <lora_send_message+0x1bc>
            }
        }
        HAL_Delay(1);
 800a01e:	2001      	movs	r0, #1
 800a020:	f001 fc80 	bl	800b924 <HAL_Delay>
    while (HAL_GetTick() < timeout) {
 800a024:	f001 fc74 	bl	800b910 <HAL_GetTick>
 800a028:	0002      	movs	r2, r0
 800a02a:	2390      	movs	r3, #144	@ 0x90
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4293      	cmp	r3, r2
 800a032:	d8bc      	bhi.n	8009fae <lora_send_message+0x12a>
    }
    
    lora_debug_print("✗ LoRa transmission timeout\r\n");
 800a034:	4b12      	ldr	r3, [pc, #72]	@ (800a080 <lora_send_message+0x1fc>)
 800a036:	0018      	movs	r0, r3
 800a038:	f7ff fcaa 	bl	8009990 <lora_debug_print>
    return -1;
 800a03c:	2301      	movs	r3, #1
 800a03e:	425b      	negs	r3, r3
}
 800a040:	0018      	movs	r0, r3
 800a042:	46bd      	mov	sp, r7
 800a044:	b027      	add	sp, #156	@ 0x9c
 800a046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a048:	200002e4 	.word	0x200002e4
 800a04c:	08015788 	.word	0x08015788
 800a050:	200002e5 	.word	0x200002e5
 800a054:	080157bc 	.word	0x080157bc
 800a058:	08015848 	.word	0x08015848
 800a05c:	0801586c 	.word	0x0801586c
 800a060:	20000004 	.word	0x20000004
 800a064:	08015888 	.word	0x08015888
 800a068:	080158b4 	.word	0x080158b4
 800a06c:	000043ff 	.word	0x000043ff
 800a070:	080158dc 	.word	0x080158dc
 800a074:	08015900 	.word	0x08015900
 800a078:	08015924 	.word	0x08015924
 800a07c:	08015954 	.word	0x08015954
 800a080:	0801596c 	.word	0x0801596c

0800a084 <lora_print_config>:
        return -3;
    }
}

// Print LoRa configuration
void lora_print_config(void) {
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
    lora_debug_print("=== LoRa Configuration ===\r\n");
 800a088:	4b28      	ldr	r3, [pc, #160]	@ (800a12c <lora_print_config+0xa8>)
 800a08a:	0018      	movs	r0, r3
 800a08c:	f7ff fc80 	bl	8009990 <lora_debug_print>
    
    if (!lora_module_detected) {
 800a090:	4b27      	ldr	r3, [pc, #156]	@ (800a130 <lora_print_config+0xac>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d108      	bne.n	800a0aa <lora_print_config+0x26>
        lora_debug_print("Status: No module detected\r\n");
 800a098:	4b26      	ldr	r3, [pc, #152]	@ (800a134 <lora_print_config+0xb0>)
 800a09a:	0018      	movs	r0, r3
 800a09c:	f7ff fc78 	bl	8009990 <lora_debug_print>
        lora_debug_print("========================\r\n");
 800a0a0:	4b25      	ldr	r3, [pc, #148]	@ (800a138 <lora_print_config+0xb4>)
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	f7ff fc74 	bl	8009990 <lora_debug_print>
        return;
 800a0a8:	e03d      	b.n	800a126 <lora_print_config+0xa2>
    }
    
    lora_debug_print("Status: Module detected\r\n");
 800a0aa:	4b24      	ldr	r3, [pc, #144]	@ (800a13c <lora_print_config+0xb8>)
 800a0ac:	0018      	movs	r0, r3
 800a0ae:	f7ff fc6f 	bl	8009990 <lora_debug_print>
    lora_debug_print("Initialized: ");
 800a0b2:	4b23      	ldr	r3, [pc, #140]	@ (800a140 <lora_print_config+0xbc>)
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	f7ff fc6b 	bl	8009990 <lora_debug_print>
    lora_debug_print(lora_initialized ? "Yes\r\n" : "No\r\n");
 800a0ba:	4b22      	ldr	r3, [pc, #136]	@ (800a144 <lora_print_config+0xc0>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <lora_print_config+0x42>
 800a0c2:	4b21      	ldr	r3, [pc, #132]	@ (800a148 <lora_print_config+0xc4>)
 800a0c4:	e000      	b.n	800a0c8 <lora_print_config+0x44>
 800a0c6:	4b21      	ldr	r3, [pc, #132]	@ (800a14c <lora_print_config+0xc8>)
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	f7ff fc61 	bl	8009990 <lora_debug_print>
    lora_debug_print("Frequency: 868 MHz (EU band)\r\n");
 800a0ce:	4b20      	ldr	r3, [pc, #128]	@ (800a150 <lora_print_config+0xcc>)
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f7ff fc5d 	bl	8009990 <lora_debug_print>
    lora_debug_print("Spreading Factor: SF7\r\n");
 800a0d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a154 <lora_print_config+0xd0>)
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f7ff fc59 	bl	8009990 <lora_debug_print>
    lora_debug_print("Bandwidth: 125 kHz\r\n");
 800a0de:	4b1e      	ldr	r3, [pc, #120]	@ (800a158 <lora_print_config+0xd4>)
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f7ff fc55 	bl	8009990 <lora_debug_print>
    lora_debug_print("Coding Rate: 4/5\r\n");
 800a0e6:	4b1d      	ldr	r3, [pc, #116]	@ (800a15c <lora_print_config+0xd8>)
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	f7ff fc51 	bl	8009990 <lora_debug_print>
    lora_debug_print("TX Power: 14 dBm\r\n");
 800a0ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a160 <lora_print_config+0xdc>)
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	f7ff fc4d 	bl	8009990 <lora_debug_print>
    lora_debug_print("Sync Word: 0x12\r\n");
 800a0f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a164 <lora_print_config+0xe0>)
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	f7ff fc49 	bl	8009990 <lora_debug_print>
    lora_debug_print("Payload Length: 64 bytes\r\n");
 800a0fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a168 <lora_print_config+0xe4>)
 800a100:	0018      	movs	r0, r3
 800a102:	f7ff fc45 	bl	8009990 <lora_debug_print>
    lora_debug_print("Preamble Length: 8 symbols\r\n");
 800a106:	4b19      	ldr	r3, [pc, #100]	@ (800a16c <lora_print_config+0xe8>)
 800a108:	0018      	movs	r0, r3
 800a10a:	f7ff fc41 	bl	8009990 <lora_debug_print>
    lora_debug_print("CRC: Enabled\r\n");
 800a10e:	4b18      	ldr	r3, [pc, #96]	@ (800a170 <lora_print_config+0xec>)
 800a110:	0018      	movs	r0, r3
 800a112:	f7ff fc3d 	bl	8009990 <lora_debug_print>
    lora_debug_print("IQ Inversion: Disabled\r\n");
 800a116:	4b17      	ldr	r3, [pc, #92]	@ (800a174 <lora_print_config+0xf0>)
 800a118:	0018      	movs	r0, r3
 800a11a:	f7ff fc39 	bl	8009990 <lora_debug_print>
    lora_debug_print("========================\r\n");
 800a11e:	4b06      	ldr	r3, [pc, #24]	@ (800a138 <lora_print_config+0xb4>)
 800a120:	0018      	movs	r0, r3
 800a122:	f7ff fc35 	bl	8009990 <lora_debug_print>
}
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	46c0      	nop			@ (mov r8, r8)
 800a12c:	08015a68 	.word	0x08015a68
 800a130:	200002e4 	.word	0x200002e4
 800a134:	08015a88 	.word	0x08015a88
 800a138:	08015aa8 	.word	0x08015aa8
 800a13c:	08015ac4 	.word	0x08015ac4
 800a140:	08015ae0 	.word	0x08015ae0
 800a144:	200002e5 	.word	0x200002e5
 800a148:	08015af0 	.word	0x08015af0
 800a14c:	08015af8 	.word	0x08015af8
 800a150:	08015b00 	.word	0x08015b00
 800a154:	08015b20 	.word	0x08015b20
 800a158:	08015b38 	.word	0x08015b38
 800a15c:	08015b50 	.word	0x08015b50
 800a160:	08015b64 	.word	0x08015b64
 800a164:	08015b78 	.word	0x08015b78
 800a168:	08015b8c 	.word	0x08015b8c
 800a16c:	08015ba8 	.word	0x08015ba8
 800a170:	08015bc8 	.word	0x08015bc8
 800a174:	08015bd8 	.word	0x08015bd8

0800a178 <lora_test_transmission>:

// Test LoRa functionality
int8_t lora_test_transmission(void) {
 800a178:	b590      	push	{r4, r7, lr}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
    lora_debug_print("=== LoRa Transmission Test ===\r\n");
 800a17e:	4b25      	ldr	r3, [pc, #148]	@ (800a214 <lora_test_transmission+0x9c>)
 800a180:	0018      	movs	r0, r3
 800a182:	f7ff fc05 	bl	8009990 <lora_debug_print>
    
    if (!lora_module_detected) {
 800a186:	4b24      	ldr	r3, [pc, #144]	@ (800a218 <lora_test_transmission+0xa0>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <lora_test_transmission+0x2c>
        lora_debug_print("✗ Test failed - no LoRa module detected\r\n");
 800a18e:	4b23      	ldr	r3, [pc, #140]	@ (800a21c <lora_test_transmission+0xa4>)
 800a190:	0018      	movs	r0, r3
 800a192:	f7ff fbfd 	bl	8009990 <lora_debug_print>
        lora_debug_print("==============================\r\n");
 800a196:	4b22      	ldr	r3, [pc, #136]	@ (800a220 <lora_test_transmission+0xa8>)
 800a198:	0018      	movs	r0, r3
 800a19a:	f7ff fbf9 	bl	8009990 <lora_debug_print>
        return -1;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	425b      	negs	r3, r3
 800a1a2:	e033      	b.n	800a20c <lora_test_transmission+0x94>
    }
    
    if (!lora_initialized) {
 800a1a4:	4b1f      	ldr	r3, [pc, #124]	@ (800a224 <lora_test_transmission+0xac>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <lora_test_transmission+0x4a>
        lora_debug_print("✗ Test failed - LoRa module not initialized\r\n");
 800a1ac:	4b1e      	ldr	r3, [pc, #120]	@ (800a228 <lora_test_transmission+0xb0>)
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f7ff fbee 	bl	8009990 <lora_debug_print>
        lora_debug_print("==============================\r\n");
 800a1b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a220 <lora_test_transmission+0xa8>)
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7ff fbea 	bl	8009990 <lora_debug_print>
        return -2;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	425b      	negs	r3, r3
 800a1c0:	e024      	b.n	800a20c <lora_test_transmission+0x94>
    }
    
    // Test with a simple message
    const char* test_msg = "LoRa Test Message from STM32";
 800a1c2:	4b1a      	ldr	r3, [pc, #104]	@ (800a22c <lora_test_transmission+0xb4>)
 800a1c4:	607b      	str	r3, [r7, #4]
    int8_t result = lora_send_message((uint8_t*)test_msg, strlen(test_msg));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	f7f5 ffa5 	bl	8000118 <strlen>
 800a1ce:	0003      	movs	r3, r0
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	1cfc      	adds	r4, r7, #3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	0011      	movs	r1, r2
 800a1d8:	0018      	movs	r0, r3
 800a1da:	f7ff fe53 	bl	8009e84 <lora_send_message>
 800a1de:	0003      	movs	r3, r0
 800a1e0:	7023      	strb	r3, [r4, #0]
    
    if (result == 0) {
 800a1e2:	1cfb      	adds	r3, r7, #3
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	b25b      	sxtb	r3, r3
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d104      	bne.n	800a1f6 <lora_test_transmission+0x7e>
        lora_debug_print("✓ LoRa test transmission successful\r\n");
 800a1ec:	4b10      	ldr	r3, [pc, #64]	@ (800a230 <lora_test_transmission+0xb8>)
 800a1ee:	0018      	movs	r0, r3
 800a1f0:	f7ff fbce 	bl	8009990 <lora_debug_print>
 800a1f4:	e003      	b.n	800a1fe <lora_test_transmission+0x86>
    } else {
        lora_debug_print("✗ LoRa test transmission failed\r\n");
 800a1f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a234 <lora_test_transmission+0xbc>)
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f7ff fbc9 	bl	8009990 <lora_debug_print>
    }
    
    lora_debug_print("==============================\r\n");
 800a1fe:	4b08      	ldr	r3, [pc, #32]	@ (800a220 <lora_test_transmission+0xa8>)
 800a200:	0018      	movs	r0, r3
 800a202:	f7ff fbc5 	bl	8009990 <lora_debug_print>
    return result;
 800a206:	1cfb      	adds	r3, r7, #3
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	b25b      	sxtb	r3, r3
 800a20c:	0018      	movs	r0, r3
 800a20e:	46bd      	mov	sp, r7
 800a210:	b003      	add	sp, #12
 800a212:	bd90      	pop	{r4, r7, pc}
 800a214:	08015bf4 	.word	0x08015bf4
 800a218:	200002e4 	.word	0x200002e4
 800a21c:	08015c18 	.word	0x08015c18
 800a220:	08015c44 	.word	0x08015c44
 800a224:	200002e5 	.word	0x200002e5
 800a228:	08015c68 	.word	0x08015c68
 800a22c:	08015c98 	.word	0x08015c98
 800a230:	08015cb8 	.word	0x08015cb8
 800a234:	08015ce0 	.word	0x08015ce0

0800a238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a23e:	f001 faeb 	bl	800b818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a242:	f000 f9c7 	bl	800a5d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a246:	f000 fb0d 	bl	800a864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800a24a:	f000 fa89 	bl	800a760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800a24e:	f000 fa09 	bl	800a664 <MX_I2C1_Init>
  MX_USART4_UART_Init();
 800a252:	f000 fad3 	bl	800a7fc <MX_USART4_UART_Init>
  MX_SPI1_Init();
 800a256:	f000 fa45 	bl	800a6e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // System initialization messages
  command_interface_send_response("========================================\r\n");
 800a25a:	4bb7      	ldr	r3, [pc, #732]	@ (800a538 <main+0x300>)
 800a25c:	0018      	movs	r0, r3
 800a25e:	f7fe f8e7 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("IoT Prototype System - STM32G071RB\r\n");
 800a262:	4bb6      	ldr	r3, [pc, #728]	@ (800a53c <main+0x304>)
 800a264:	0018      	movs	r0, r3
 800a266:	f7fe f8e3 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("========================================\r\n");
 800a26a:	4bb3      	ldr	r3, [pc, #716]	@ (800a538 <main+0x300>)
 800a26c:	0018      	movs	r0, r3
 800a26e:	f7fe f8df 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("System Clock: 16 MHz\r\n");
 800a272:	4bb3      	ldr	r3, [pc, #716]	@ (800a540 <main+0x308>)
 800a274:	0018      	movs	r0, r3
 800a276:	f7fe f8db 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("I2C1 Configuration: PA9 (SCL), PA10 (SDA)\r\n");
 800a27a:	4bb2      	ldr	r3, [pc, #712]	@ (800a544 <main+0x30c>)
 800a27c:	0018      	movs	r0, r3
 800a27e:	f7fe f8d7 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("USART2: PA2 (TX), PA3 (RX) - 115200 baud\r\n");
 800a282:	4bb1      	ldr	r3, [pc, #708]	@ (800a548 <main+0x310>)
 800a284:	0018      	movs	r0, r3
 800a286:	f7fe f8d3 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("USART4: PA0 (TX), PA1 (RX) - 115200 baud\r\n");
 800a28a:	4bb0      	ldr	r3, [pc, #704]	@ (800a54c <main+0x314>)
 800a28c:	0018      	movs	r0, r3
 800a28e:	f7fe f8cf 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("SPI1: PA5 (SCK), PA6 (MISO), PA7 (MOSI)\r\n");
 800a292:	4baf      	ldr	r3, [pc, #700]	@ (800a550 <main+0x318>)
 800a294:	0018      	movs	r0, r3
 800a296:	f7fe f8cb 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("LoRa: PA4 (NSS), PC0 (RESET)\r\n");
 800a29a:	4bae      	ldr	r3, [pc, #696]	@ (800a554 <main+0x31c>)
 800a29c:	0018      	movs	r0, r3
 800a29e:	f7fe f8c7 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("LED Status: PA5\r\n");
 800a2a2:	4bad      	ldr	r3, [pc, #692]	@ (800a558 <main+0x320>)
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	f7fe f8c3 	bl	8008430 <command_interface_send_response>
  command_interface_send_response("========================================\r\n");
 800a2aa:	4ba3      	ldr	r3, [pc, #652]	@ (800a538 <main+0x300>)
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	f7fe f8bf 	bl	8008430 <command_interface_send_response>
  
  command_interface_send_response_usart4("========================================\r\n");
 800a2b2:	4ba1      	ldr	r3, [pc, #644]	@ (800a538 <main+0x300>)
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f7fe f8d1 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("IoT Prototype System - STM32G071RB\r\n");
 800a2ba:	4ba0      	ldr	r3, [pc, #640]	@ (800a53c <main+0x304>)
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f7fe f8cd 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("========================================\r\n");
 800a2c2:	4b9d      	ldr	r3, [pc, #628]	@ (800a538 <main+0x300>)
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	f7fe f8c9 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("System Clock: 16 MHz\r\n");
 800a2ca:	4b9d      	ldr	r3, [pc, #628]	@ (800a540 <main+0x308>)
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	f7fe f8c5 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("I2C1 Configuration: PA9 (SCL), PA10 (SDA)\r\n");
 800a2d2:	4b9c      	ldr	r3, [pc, #624]	@ (800a544 <main+0x30c>)
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f7fe f8c1 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("USART2: PA2 (TX), PA3 (RX) - 115200 baud\r\n");
 800a2da:	4b9b      	ldr	r3, [pc, #620]	@ (800a548 <main+0x310>)
 800a2dc:	0018      	movs	r0, r3
 800a2de:	f7fe f8bd 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("USART4: PA0 (TX), PA1 (RX) - 115200 baud\r\n");
 800a2e2:	4b9a      	ldr	r3, [pc, #616]	@ (800a54c <main+0x314>)
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f7fe f8b9 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("SPI1: PA5 (SCK), PA6 (MISO), PA7 (MOSI)\r\n");
 800a2ea:	4b99      	ldr	r3, [pc, #612]	@ (800a550 <main+0x318>)
 800a2ec:	0018      	movs	r0, r3
 800a2ee:	f7fe f8b5 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("LoRa: PA4 (NSS), PC0 (RESET)\r\n");
 800a2f2:	4b98      	ldr	r3, [pc, #608]	@ (800a554 <main+0x31c>)
 800a2f4:	0018      	movs	r0, r3
 800a2f6:	f7fe f8b1 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("LED Status: PA5\r\n");
 800a2fa:	4b97      	ldr	r3, [pc, #604]	@ (800a558 <main+0x320>)
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f7fe f8ad 	bl	800845c <command_interface_send_response_usart4>
  command_interface_send_response_usart4("========================================\r\n");
 800a302:	4b8d      	ldr	r3, [pc, #564]	@ (800a538 <main+0x300>)
 800a304:	0018      	movs	r0, r3
 800a306:	f7fe f8a9 	bl	800845c <command_interface_send_response_usart4>
  
  // Scan I2C bus for devices
  command_interface_send_response("\r\nScanning I2C bus for devices...\r\n");
 800a30a:	4b94      	ldr	r3, [pc, #592]	@ (800a55c <main+0x324>)
 800a30c:	0018      	movs	r0, r3
 800a30e:	f7fe f88f 	bl	8008430 <command_interface_send_response>
  command_interface_send_response_usart4("\r\nScanning I2C bus for devices...\r\n");
 800a312:	4b92      	ldr	r3, [pc, #584]	@ (800a55c <main+0x324>)
 800a314:	0018      	movs	r0, r3
 800a316:	f7fe f8a1 	bl	800845c <command_interface_send_response_usart4>
  i2c_scan_bus();
 800a31a:	f7f9 fb65 	bl	80039e8 <i2c_scan_bus>
  
  // Test I2C configuration
  command_interface_send_response("\r\nTesting I2C configuration...\r\n");
 800a31e:	4b90      	ldr	r3, [pc, #576]	@ (800a560 <main+0x328>)
 800a320:	0018      	movs	r0, r3
 800a322:	f7fe f885 	bl	8008430 <command_interface_send_response>
  command_interface_send_response_usart4("\r\nTesting I2C configuration...\r\n");
 800a326:	4b8e      	ldr	r3, [pc, #568]	@ (800a560 <main+0x328>)
 800a328:	0018      	movs	r0, r3
 800a32a:	f7fe f897 	bl	800845c <command_interface_send_response_usart4>
  
  // Test I2C bus with a simple ping
  HAL_StatusTypeDef i2c_test = HAL_I2C_IsDeviceReady(&hi2c1, 0x76 << 1, 3, 1000);
 800a32e:	1dfc      	adds	r4, r7, #7
 800a330:	23fa      	movs	r3, #250	@ 0xfa
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	488b      	ldr	r0, [pc, #556]	@ (800a564 <main+0x32c>)
 800a336:	2203      	movs	r2, #3
 800a338:	21ec      	movs	r1, #236	@ 0xec
 800a33a:	f002 f86f 	bl	800c41c <HAL_I2C_IsDeviceReady>
 800a33e:	0003      	movs	r3, r0
 800a340:	7023      	strb	r3, [r4, #0]
  if (i2c_test == HAL_OK) {
 800a342:	1dfb      	adds	r3, r7, #7
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d108      	bne.n	800a35c <main+0x124>
    command_interface_send_response("✓ I2C bus test successful - device responds at 0x76\r\n");
 800a34a:	4b87      	ldr	r3, [pc, #540]	@ (800a568 <main+0x330>)
 800a34c:	0018      	movs	r0, r3
 800a34e:	f7fe f86f 	bl	8008430 <command_interface_send_response>
    command_interface_send_response_usart4("✓ I2C bus test successful - device responds at 0x76\r\n");
 800a352:	4b85      	ldr	r3, [pc, #532]	@ (800a568 <main+0x330>)
 800a354:	0018      	movs	r0, r3
 800a356:	f7fe f881 	bl	800845c <command_interface_send_response_usart4>
 800a35a:	e007      	b.n	800a36c <main+0x134>
  } else {
    command_interface_send_response("✗ I2C bus test failed - no device at 0x76\r\n");
 800a35c:	4b83      	ldr	r3, [pc, #524]	@ (800a56c <main+0x334>)
 800a35e:	0018      	movs	r0, r3
 800a360:	f7fe f866 	bl	8008430 <command_interface_send_response>
    command_interface_send_response_usart4("✗ I2C bus test failed - no device at 0x76\r\n");
 800a364:	4b81      	ldr	r3, [pc, #516]	@ (800a56c <main+0x334>)
 800a366:	0018      	movs	r0, r3
 800a368:	f7fe f878 	bl	800845c <command_interface_send_response_usart4>
  }
  
  // Check BME680 sensor presence
  command_interface_send_response("\r\nChecking BME680 sensor presence...\r\n");
 800a36c:	4b80      	ldr	r3, [pc, #512]	@ (800a570 <main+0x338>)
 800a36e:	0018      	movs	r0, r3
 800a370:	f7fe f85e 	bl	8008430 <command_interface_send_response>
  command_interface_send_response_usart4("\r\nChecking BME680 sensor presence...\r\n");
 800a374:	4b7e      	ldr	r3, [pc, #504]	@ (800a570 <main+0x338>)
 800a376:	0018      	movs	r0, r3
 800a378:	f7fe f870 	bl	800845c <command_interface_send_response_usart4>
  
  if (bme680_check_sensor_presence() == BME68X_OK) {
 800a37c:	f7f9 fc70 	bl	8003c60 <bme680_check_sensor_presence>
 800a380:	1e03      	subs	r3, r0, #0
 800a382:	d155      	bne.n	800a430 <main+0x1f8>
    command_interface_send_response("✓ BME680 sensor detected on I2C bus (Address: 0x76)\r\n");
 800a384:	4b7b      	ldr	r3, [pc, #492]	@ (800a574 <main+0x33c>)
 800a386:	0018      	movs	r0, r3
 800a388:	f7fe f852 	bl	8008430 <command_interface_send_response>
    command_interface_send_response_usart4("✓ BME680 sensor detected on I2C bus (Address: 0x76)\r\n");
 800a38c:	4b79      	ldr	r3, [pc, #484]	@ (800a574 <main+0x33c>)
 800a38e:	0018      	movs	r0, r3
 800a390:	f7fe f864 	bl	800845c <command_interface_send_response_usart4>
    
    // Initialize BME680 sensor
    command_interface_send_response("Initializing BME680 sensor...\r\n");
 800a394:	4b78      	ldr	r3, [pc, #480]	@ (800a578 <main+0x340>)
 800a396:	0018      	movs	r0, r3
 800a398:	f7fe f84a 	bl	8008430 <command_interface_send_response>
    command_interface_send_response_usart4("Initializing BME680 sensor...\r\n");
 800a39c:	4b76      	ldr	r3, [pc, #472]	@ (800a578 <main+0x340>)
 800a39e:	0018      	movs	r0, r3
 800a3a0:	f7fe f85c 	bl	800845c <command_interface_send_response_usart4>
    
    if (bme680_init_sensor() == BME68X_OK) {
 800a3a4:	f7f9 fd46 	bl	8003e34 <bme680_init_sensor>
 800a3a8:	1e03      	subs	r3, r0, #0
 800a3aa:	d128      	bne.n	800a3fe <main+0x1c6>
      command_interface_send_response("✓ BME680 sensor initialized successfully\r\n");
 800a3ac:	4b73      	ldr	r3, [pc, #460]	@ (800a57c <main+0x344>)
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f7fe f83e 	bl	8008430 <command_interface_send_response>
      command_interface_send_response("  - Temperature oversampling: 1x\r\n");
 800a3b4:	4b72      	ldr	r3, [pc, #456]	@ (800a580 <main+0x348>)
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f7fe f83a 	bl	8008430 <command_interface_send_response>
      command_interface_send_response("  - Pressure oversampling: 1x\r\n");
 800a3bc:	4b71      	ldr	r3, [pc, #452]	@ (800a584 <main+0x34c>)
 800a3be:	0018      	movs	r0, r3
 800a3c0:	f7fe f836 	bl	8008430 <command_interface_send_response>
      command_interface_send_response("  - Humidity oversampling: 1x\r\n");
 800a3c4:	4b70      	ldr	r3, [pc, #448]	@ (800a588 <main+0x350>)
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	f7fe f832 	bl	8008430 <command_interface_send_response>
      command_interface_send_response("  - Gas sensor: Disabled\r\n");
 800a3cc:	4b6f      	ldr	r3, [pc, #444]	@ (800a58c <main+0x354>)
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	f7fe f82e 	bl	8008430 <command_interface_send_response>
      
      command_interface_send_response_usart4("✓ BME680 sensor initialized successfully\r\n");
 800a3d4:	4b69      	ldr	r3, [pc, #420]	@ (800a57c <main+0x344>)
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f7fe f840 	bl	800845c <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Temperature oversampling: 1x\r\n");
 800a3dc:	4b68      	ldr	r3, [pc, #416]	@ (800a580 <main+0x348>)
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f7fe f83c 	bl	800845c <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Pressure oversampling: 1x\r\n");
 800a3e4:	4b67      	ldr	r3, [pc, #412]	@ (800a584 <main+0x34c>)
 800a3e6:	0018      	movs	r0, r3
 800a3e8:	f7fe f838 	bl	800845c <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Humidity oversampling: 1x\r\n");
 800a3ec:	4b66      	ldr	r3, [pc, #408]	@ (800a588 <main+0x350>)
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	f7fe f834 	bl	800845c <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Gas sensor: Disabled\r\n");
 800a3f4:	4b65      	ldr	r3, [pc, #404]	@ (800a58c <main+0x354>)
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	f7fe f830 	bl	800845c <command_interface_send_response_usart4>
 800a3fc:	e070      	b.n	800a4e0 <main+0x2a8>
    } else {
      command_interface_send_response("✗ Error initializing BME680 sensor\r\n");
 800a3fe:	4b64      	ldr	r3, [pc, #400]	@ (800a590 <main+0x358>)
 800a400:	0018      	movs	r0, r3
 800a402:	f7fe f815 	bl	8008430 <command_interface_send_response>
      command_interface_send_response("  - Check sensor power supply (3.3V)\r\n");
 800a406:	4b63      	ldr	r3, [pc, #396]	@ (800a594 <main+0x35c>)
 800a408:	0018      	movs	r0, r3
 800a40a:	f7fe f811 	bl	8008430 <command_interface_send_response>
      command_interface_send_response("  - Verify I2C connections\r\n");
 800a40e:	4b62      	ldr	r3, [pc, #392]	@ (800a598 <main+0x360>)
 800a410:	0018      	movs	r0, r3
 800a412:	f7fe f80d 	bl	8008430 <command_interface_send_response>
      
      command_interface_send_response_usart4("✗ Error initializing BME680 sensor\r\n");
 800a416:	4b5e      	ldr	r3, [pc, #376]	@ (800a590 <main+0x358>)
 800a418:	0018      	movs	r0, r3
 800a41a:	f7fe f81f 	bl	800845c <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Check sensor power supply (3.3V)\r\n");
 800a41e:	4b5d      	ldr	r3, [pc, #372]	@ (800a594 <main+0x35c>)
 800a420:	0018      	movs	r0, r3
 800a422:	f7fe f81b 	bl	800845c <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Verify I2C connections\r\n");
 800a426:	4b5c      	ldr	r3, [pc, #368]	@ (800a598 <main+0x360>)
 800a428:	0018      	movs	r0, r3
 800a42a:	f7fe f817 	bl	800845c <command_interface_send_response_usart4>
 800a42e:	e057      	b.n	800a4e0 <main+0x2a8>
    }
  } else {
    command_interface_send_response("✗ BME680 sensor not found on I2C bus\r\n");
 800a430:	4b5a      	ldr	r3, [pc, #360]	@ (800a59c <main+0x364>)
 800a432:	0018      	movs	r0, r3
 800a434:	f7fd fffc 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("Troubleshooting steps:\r\n");
 800a438:	4b59      	ldr	r3, [pc, #356]	@ (800a5a0 <main+0x368>)
 800a43a:	0018      	movs	r0, r3
 800a43c:	f7fd fff8 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  1. Check I2C connections:\r\n");
 800a440:	4b58      	ldr	r3, [pc, #352]	@ (800a5a4 <main+0x36c>)
 800a442:	0018      	movs	r0, r3
 800a444:	f7fd fff4 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("     - PA9 (SCL) → BME680 SCL\r\n");
 800a448:	4b57      	ldr	r3, [pc, #348]	@ (800a5a8 <main+0x370>)
 800a44a:	0018      	movs	r0, r3
 800a44c:	f7fd fff0 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("     - PA10 (SDA) → BME680 SDA\r\n");
 800a450:	4b56      	ldr	r3, [pc, #344]	@ (800a5ac <main+0x374>)
 800a452:	0018      	movs	r0, r3
 800a454:	f7fd ffec 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  2. Verify power supply:\r\n");
 800a458:	4b55      	ldr	r3, [pc, #340]	@ (800a5b0 <main+0x378>)
 800a45a:	0018      	movs	r0, r3
 800a45c:	f7fd ffe8 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("     - BME680 VCC → 3.3V\r\n");
 800a460:	4b54      	ldr	r3, [pc, #336]	@ (800a5b4 <main+0x37c>)
 800a462:	0018      	movs	r0, r3
 800a464:	f7fd ffe4 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("     - BME680 GND → GND\r\n");
 800a468:	4b53      	ldr	r3, [pc, #332]	@ (800a5b8 <main+0x380>)
 800a46a:	0018      	movs	r0, r3
 800a46c:	f7fd ffe0 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  3. Check pull-up resistors (4.7kΩ recommended)\r\n");
 800a470:	4b52      	ldr	r3, [pc, #328]	@ (800a5bc <main+0x384>)
 800a472:	0018      	movs	r0, r3
 800a474:	f7fd ffdc 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("  4. Verify I2C address (default: 0x76)\r\n");
 800a478:	4b51      	ldr	r3, [pc, #324]	@ (800a5c0 <main+0x388>)
 800a47a:	0018      	movs	r0, r3
 800a47c:	f7fd ffd8 	bl	8008430 <command_interface_send_response>
    command_interface_send_response("System will continue without sensor functionality\r\n");
 800a480:	4b50      	ldr	r3, [pc, #320]	@ (800a5c4 <main+0x38c>)
 800a482:	0018      	movs	r0, r3
 800a484:	f7fd ffd4 	bl	8008430 <command_interface_send_response>
    
    command_interface_send_response_usart4("✗ BME680 sensor not found on I2C bus\r\n");
 800a488:	4b44      	ldr	r3, [pc, #272]	@ (800a59c <main+0x364>)
 800a48a:	0018      	movs	r0, r3
 800a48c:	f7fd ffe6 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("Troubleshooting steps:\r\n");
 800a490:	4b43      	ldr	r3, [pc, #268]	@ (800a5a0 <main+0x368>)
 800a492:	0018      	movs	r0, r3
 800a494:	f7fd ffe2 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  1. Check I2C connections:\r\n");
 800a498:	4b42      	ldr	r3, [pc, #264]	@ (800a5a4 <main+0x36c>)
 800a49a:	0018      	movs	r0, r3
 800a49c:	f7fd ffde 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - PA9 (SCL) → BME680 SCL\r\n");
 800a4a0:	4b41      	ldr	r3, [pc, #260]	@ (800a5a8 <main+0x370>)
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	f7fd ffda 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - PA10 (SDA) → BME680 SDA\r\n");
 800a4a8:	4b40      	ldr	r3, [pc, #256]	@ (800a5ac <main+0x374>)
 800a4aa:	0018      	movs	r0, r3
 800a4ac:	f7fd ffd6 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  2. Verify power supply:\r\n");
 800a4b0:	4b3f      	ldr	r3, [pc, #252]	@ (800a5b0 <main+0x378>)
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f7fd ffd2 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - BME680 VCC → 3.3V\r\n");
 800a4b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a5b4 <main+0x37c>)
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	f7fd ffce 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - BME680 GND → GND\r\n");
 800a4c0:	4b3d      	ldr	r3, [pc, #244]	@ (800a5b8 <main+0x380>)
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	f7fd ffca 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  3. Check pull-up resistors (4.7kΩ recommended)\r\n");
 800a4c8:	4b3c      	ldr	r3, [pc, #240]	@ (800a5bc <main+0x384>)
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	f7fd ffc6 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  4. Verify I2C address (default: 0x76)\r\n");
 800a4d0:	4b3b      	ldr	r3, [pc, #236]	@ (800a5c0 <main+0x388>)
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	f7fd ffc2 	bl	800845c <command_interface_send_response_usart4>
    command_interface_send_response_usart4("System will continue without sensor functionality\r\n");
 800a4d8:	4b3a      	ldr	r3, [pc, #232]	@ (800a5c4 <main+0x38c>)
 800a4da:	0018      	movs	r0, r3
 800a4dc:	f7fd ffbe 	bl	800845c <command_interface_send_response_usart4>
  }
  
  // Initialize LoRa module
  command_interface_send_response("\r\nInitializing LoRa module...\r\n");
 800a4e0:	4b39      	ldr	r3, [pc, #228]	@ (800a5c8 <main+0x390>)
 800a4e2:	0018      	movs	r0, r3
 800a4e4:	f7fd ffa4 	bl	8008430 <command_interface_send_response>
  command_interface_send_response_usart4("\r\nInitializing LoRa module...\r\n");
 800a4e8:	4b37      	ldr	r3, [pc, #220]	@ (800a5c8 <main+0x390>)
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	f7fd ffb6 	bl	800845c <command_interface_send_response_usart4>
  
  if (lora_init() == 0) {
 800a4f0:	f7ff fb24 	bl	8009b3c <lora_init>
 800a4f4:	1e03      	subs	r3, r0, #0
 800a4f6:	d108      	bne.n	800a50a <main+0x2d2>
    command_interface_send_response("✓ LoRa module initialized successfully\r\n");
 800a4f8:	4b34      	ldr	r3, [pc, #208]	@ (800a5cc <main+0x394>)
 800a4fa:	0018      	movs	r0, r3
 800a4fc:	f7fd ff98 	bl	8008430 <command_interface_send_response>
    command_interface_send_response_usart4("✓ LoRa module initialized successfully\r\n");
 800a500:	4b32      	ldr	r3, [pc, #200]	@ (800a5cc <main+0x394>)
 800a502:	0018      	movs	r0, r3
 800a504:	f7fd ffaa 	bl	800845c <command_interface_send_response_usart4>
 800a508:	e007      	b.n	800a51a <main+0x2e2>
  } else {
    command_interface_send_response("✗ LoRa module initialization failed\r\n");
 800a50a:	4b31      	ldr	r3, [pc, #196]	@ (800a5d0 <main+0x398>)
 800a50c:	0018      	movs	r0, r3
 800a50e:	f7fd ff8f 	bl	8008430 <command_interface_send_response>
    command_interface_send_response_usart4("✗ LoRa module initialization failed\r\n");
 800a512:	4b2f      	ldr	r3, [pc, #188]	@ (800a5d0 <main+0x398>)
 800a514:	0018      	movs	r0, r3
 800a516:	f7fd ffa1 	bl	800845c <command_interface_send_response_usart4>
  }
  
  // Initialize command interface
  command_interface_init();
 800a51a:	f7fd fc53 	bl	8007dc4 <command_interface_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Process command interface
    command_interface_process();
 800a51e:	f7fd fc91 	bl	8007e44 <command_interface_process>
    
    // Toggle LED to show system is running
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800a522:	23a0      	movs	r3, #160	@ 0xa0
 800a524:	05db      	lsls	r3, r3, #23
 800a526:	2120      	movs	r1, #32
 800a528:	0018      	movs	r0, r3
 800a52a:	f001 fc54 	bl	800bdd6 <HAL_GPIO_TogglePin>
    
    // Small delay
    HAL_Delay(10);
 800a52e:	200a      	movs	r0, #10
 800a530:	f001 f9f8 	bl	800b924 <HAL_Delay>
    command_interface_process();
 800a534:	46c0      	nop			@ (mov r8, r8)
 800a536:	e7f2      	b.n	800a51e <main+0x2e6>
 800a538:	08015d04 	.word	0x08015d04
 800a53c:	08015d30 	.word	0x08015d30
 800a540:	08015d58 	.word	0x08015d58
 800a544:	08015d70 	.word	0x08015d70
 800a548:	08015d9c 	.word	0x08015d9c
 800a54c:	08015dc8 	.word	0x08015dc8
 800a550:	08015df4 	.word	0x08015df4
 800a554:	08015e20 	.word	0x08015e20
 800a558:	08015e40 	.word	0x08015e40
 800a55c:	08015e54 	.word	0x08015e54
 800a560:	08015e78 	.word	0x08015e78
 800a564:	200002e8 	.word	0x200002e8
 800a568:	08015e9c 	.word	0x08015e9c
 800a56c:	08015ed4 	.word	0x08015ed4
 800a570:	08015f04 	.word	0x08015f04
 800a574:	08015f2c 	.word	0x08015f2c
 800a578:	08015f64 	.word	0x08015f64
 800a57c:	08015f84 	.word	0x08015f84
 800a580:	08015fb4 	.word	0x08015fb4
 800a584:	08015fd8 	.word	0x08015fd8
 800a588:	08015ff8 	.word	0x08015ff8
 800a58c:	08016018 	.word	0x08016018
 800a590:	08016034 	.word	0x08016034
 800a594:	0801605c 	.word	0x0801605c
 800a598:	08016084 	.word	0x08016084
 800a59c:	080160a4 	.word	0x080160a4
 800a5a0:	080160d0 	.word	0x080160d0
 800a5a4:	080160ec 	.word	0x080160ec
 800a5a8:	0801610c 	.word	0x0801610c
 800a5ac:	08016130 	.word	0x08016130
 800a5b0:	08016154 	.word	0x08016154
 800a5b4:	08016170 	.word	0x08016170
 800a5b8:	08016190 	.word	0x08016190
 800a5bc:	080161ac 	.word	0x080161ac
 800a5c0:	080161e0 	.word	0x080161e0
 800a5c4:	0801620c 	.word	0x0801620c
 800a5c8:	08016240 	.word	0x08016240
 800a5cc:	08016260 	.word	0x08016260
 800a5d0:	0801628c 	.word	0x0801628c

0800a5d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a5d4:	b590      	push	{r4, r7, lr}
 800a5d6:	b093      	sub	sp, #76	@ 0x4c
 800a5d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a5da:	2410      	movs	r4, #16
 800a5dc:	193b      	adds	r3, r7, r4
 800a5de:	0018      	movs	r0, r3
 800a5e0:	2338      	movs	r3, #56	@ 0x38
 800a5e2:	001a      	movs	r2, r3
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	f006 fd4d 	bl	8011084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a5ea:	003b      	movs	r3, r7
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	2310      	movs	r3, #16
 800a5f0:	001a      	movs	r2, r3
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	f006 fd46 	bl	8011084 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a5f8:	2380      	movs	r3, #128	@ 0x80
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	0018      	movs	r0, r3
 800a5fe:	f002 fb9d 	bl	800cd3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a602:	193b      	adds	r3, r7, r4
 800a604:	2202      	movs	r2, #2
 800a606:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a608:	193b      	adds	r3, r7, r4
 800a60a:	2280      	movs	r2, #128	@ 0x80
 800a60c:	0052      	lsls	r2, r2, #1
 800a60e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800a610:	193b      	adds	r3, r7, r4
 800a612:	2200      	movs	r2, #0
 800a614:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a616:	193b      	adds	r3, r7, r4
 800a618:	2240      	movs	r2, #64	@ 0x40
 800a61a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a61c:	193b      	adds	r3, r7, r4
 800a61e:	2200      	movs	r2, #0
 800a620:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a622:	193b      	adds	r3, r7, r4
 800a624:	0018      	movs	r0, r3
 800a626:	f002 fbd5 	bl	800cdd4 <HAL_RCC_OscConfig>
 800a62a:	1e03      	subs	r3, r0, #0
 800a62c:	d001      	beq.n	800a632 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800a62e:	f000 f999 	bl	800a964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a632:	003b      	movs	r3, r7
 800a634:	2207      	movs	r2, #7
 800a636:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800a638:	003b      	movs	r3, r7
 800a63a:	2200      	movs	r2, #0
 800a63c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a63e:	003b      	movs	r3, r7
 800a640:	2200      	movs	r2, #0
 800a642:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a644:	003b      	movs	r3, r7
 800a646:	2200      	movs	r2, #0
 800a648:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a64a:	003b      	movs	r3, r7
 800a64c:	2100      	movs	r1, #0
 800a64e:	0018      	movs	r0, r3
 800a650:	f002 feda 	bl	800d408 <HAL_RCC_ClockConfig>
 800a654:	1e03      	subs	r3, r0, #0
 800a656:	d001      	beq.n	800a65c <SystemClock_Config+0x88>
  {
    Error_Handler();
 800a658:	f000 f984 	bl	800a964 <Error_Handler>
  }
}
 800a65c:	46c0      	nop			@ (mov r8, r8)
 800a65e:	46bd      	mov	sp, r7
 800a660:	b013      	add	sp, #76	@ 0x4c
 800a662:	bd90      	pop	{r4, r7, pc}

0800a664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a668:	4b1b      	ldr	r3, [pc, #108]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a66a:	4a1c      	ldr	r2, [pc, #112]	@ (800a6dc <MX_I2C1_Init+0x78>)
 800a66c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800a66e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a670:	4a1b      	ldr	r2, [pc, #108]	@ (800a6e0 <MX_I2C1_Init+0x7c>)
 800a672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a674:	4b18      	ldr	r3, [pc, #96]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a676:	2200      	movs	r2, #0
 800a678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a67a:	4b17      	ldr	r3, [pc, #92]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a67c:	2201      	movs	r2, #1
 800a67e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a680:	4b15      	ldr	r3, [pc, #84]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a682:	2200      	movs	r2, #0
 800a684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a686:	4b14      	ldr	r3, [pc, #80]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a688:	2200      	movs	r2, #0
 800a68a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a68c:	4b12      	ldr	r3, [pc, #72]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a68e:	2200      	movs	r2, #0
 800a690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a692:	4b11      	ldr	r3, [pc, #68]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a694:	2200      	movs	r2, #0
 800a696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a698:	4b0f      	ldr	r3, [pc, #60]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a69e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a6a0:	0018      	movs	r0, r3
 800a6a2:	f001 fbb3 	bl	800be0c <HAL_I2C_Init>
 800a6a6:	1e03      	subs	r3, r0, #0
 800a6a8:	d001      	beq.n	800a6ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a6aa:	f000 f95b 	bl	800a964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	f002 faaa 	bl	800cc0c <HAL_I2CEx_ConfigAnalogFilter>
 800a6b8:	1e03      	subs	r3, r0, #0
 800a6ba:	d001      	beq.n	800a6c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a6bc:	f000 f952 	bl	800a964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a6c0:	4b05      	ldr	r3, [pc, #20]	@ (800a6d8 <MX_I2C1_Init+0x74>)
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	f002 faed 	bl	800cca4 <HAL_I2CEx_ConfigDigitalFilter>
 800a6ca:	1e03      	subs	r3, r0, #0
 800a6cc:	d001      	beq.n	800a6d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a6ce:	f000 f949 	bl	800a964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a6d2:	46c0      	nop			@ (mov r8, r8)
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	200002e8 	.word	0x200002e8
 800a6dc:	40005400 	.word	0x40005400
 800a6e0:	00503d58 	.word	0x00503d58

0800a6e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a6e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a6ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a75c <MX_SPI1_Init+0x78>)
 800a6ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a6ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a6f0:	2282      	movs	r2, #130	@ 0x82
 800a6f2:	0052      	lsls	r2, r2, #1
 800a6f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a6f6:	4b18      	ldr	r3, [pc, #96]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a6fc:	4b16      	ldr	r3, [pc, #88]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a6fe:	22e0      	movs	r2, #224	@ 0xe0
 800a700:	00d2      	lsls	r2, r2, #3
 800a702:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a704:	4b14      	ldr	r3, [pc, #80]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a706:	2200      	movs	r2, #0
 800a708:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a70a:	4b13      	ldr	r3, [pc, #76]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a710:	4b11      	ldr	r3, [pc, #68]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a712:	2280      	movs	r2, #128	@ 0x80
 800a714:	0092      	lsls	r2, r2, #2
 800a716:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a718:	4b0f      	ldr	r3, [pc, #60]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a71a:	2210      	movs	r2, #16
 800a71c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a71e:	4b0e      	ldr	r3, [pc, #56]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a720:	2200      	movs	r2, #0
 800a722:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a724:	4b0c      	ldr	r3, [pc, #48]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a726:	2200      	movs	r2, #0
 800a728:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a72a:	4b0b      	ldr	r3, [pc, #44]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a730:	4b09      	ldr	r3, [pc, #36]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a732:	2207      	movs	r2, #7
 800a734:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a736:	4b08      	ldr	r3, [pc, #32]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a738:	2200      	movs	r2, #0
 800a73a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a73c:	4b06      	ldr	r3, [pc, #24]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a73e:	2200      	movs	r2, #0
 800a740:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a742:	4b05      	ldr	r3, [pc, #20]	@ (800a758 <MX_SPI1_Init+0x74>)
 800a744:	0018      	movs	r0, r3
 800a746:	f003 f9c1 	bl	800dacc <HAL_SPI_Init>
 800a74a:	1e03      	subs	r3, r0, #0
 800a74c:	d001      	beq.n	800a752 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800a74e:	f000 f909 	bl	800a964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a752:	46c0      	nop			@ (mov r8, r8)
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	2000033c 	.word	0x2000033c
 800a75c:	40013000 	.word	0x40013000

0800a760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a764:	4b23      	ldr	r3, [pc, #140]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a766:	4a24      	ldr	r2, [pc, #144]	@ (800a7f8 <MX_USART2_UART_Init+0x98>)
 800a768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a76a:	4b22      	ldr	r3, [pc, #136]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a76c:	22e1      	movs	r2, #225	@ 0xe1
 800a76e:	0252      	lsls	r2, r2, #9
 800a770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a772:	4b20      	ldr	r3, [pc, #128]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a774:	2200      	movs	r2, #0
 800a776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a778:	4b1e      	ldr	r3, [pc, #120]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a77e:	4b1d      	ldr	r3, [pc, #116]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a780:	2200      	movs	r2, #0
 800a782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a784:	4b1b      	ldr	r3, [pc, #108]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a786:	220c      	movs	r2, #12
 800a788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a78a:	4b1a      	ldr	r3, [pc, #104]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a790:	4b18      	ldr	r3, [pc, #96]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a792:	2200      	movs	r2, #0
 800a794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a796:	4b17      	ldr	r3, [pc, #92]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a798:	2200      	movs	r2, #0
 800a79a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a79c:	4b15      	ldr	r3, [pc, #84]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a7a2:	4b14      	ldr	r3, [pc, #80]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a7a8:	4b12      	ldr	r3, [pc, #72]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	f004 f8ae 	bl	800e90c <HAL_UART_Init>
 800a7b0:	1e03      	subs	r3, r0, #0
 800a7b2:	d001      	beq.n	800a7b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a7b4:	f000 f8d6 	bl	800a964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a7b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f004 ffb1 	bl	800f724 <HAL_UARTEx_SetTxFifoThreshold>
 800a7c2:	1e03      	subs	r3, r0, #0
 800a7c4:	d001      	beq.n	800a7ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a7c6:	f000 f8cd 	bl	800a964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a7ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f004 ffe8 	bl	800f7a4 <HAL_UARTEx_SetRxFifoThreshold>
 800a7d4:	1e03      	subs	r3, r0, #0
 800a7d6:	d001      	beq.n	800a7dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a7d8:	f000 f8c4 	bl	800a964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a7dc:	4b05      	ldr	r3, [pc, #20]	@ (800a7f4 <MX_USART2_UART_Init+0x94>)
 800a7de:	0018      	movs	r0, r3
 800a7e0:	f004 ff66 	bl	800f6b0 <HAL_UARTEx_DisableFifoMode>
 800a7e4:	1e03      	subs	r3, r0, #0
 800a7e6:	d001      	beq.n	800a7ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a7e8:	f000 f8bc 	bl	800a964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a7ec:	46c0      	nop			@ (mov r8, r8)
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	46c0      	nop			@ (mov r8, r8)
 800a7f4:	200003a0 	.word	0x200003a0
 800a7f8:	40004400 	.word	0x40004400

0800a7fc <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800a800:	4b16      	ldr	r3, [pc, #88]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a802:	4a17      	ldr	r2, [pc, #92]	@ (800a860 <MX_USART4_UART_Init+0x64>)
 800a804:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a806:	4b15      	ldr	r3, [pc, #84]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a808:	22e1      	movs	r2, #225	@ 0xe1
 800a80a:	0252      	lsls	r2, r2, #9
 800a80c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a80e:	4b13      	ldr	r3, [pc, #76]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a810:	2200      	movs	r2, #0
 800a812:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a814:	4b11      	ldr	r3, [pc, #68]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a816:	2200      	movs	r2, #0
 800a818:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a81a:	4b10      	ldr	r3, [pc, #64]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a820:	4b0e      	ldr	r3, [pc, #56]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a822:	220c      	movs	r2, #12
 800a824:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a826:	4b0d      	ldr	r3, [pc, #52]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a828:	2200      	movs	r2, #0
 800a82a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a82c:	4b0b      	ldr	r3, [pc, #44]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a82e:	2200      	movs	r2, #0
 800a830:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a832:	4b0a      	ldr	r3, [pc, #40]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a834:	2200      	movs	r2, #0
 800a836:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a838:	4b08      	ldr	r3, [pc, #32]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a83e:	4b07      	ldr	r3, [pc, #28]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a840:	2200      	movs	r2, #0
 800a842:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a844:	4b05      	ldr	r3, [pc, #20]	@ (800a85c <MX_USART4_UART_Init+0x60>)
 800a846:	0018      	movs	r0, r3
 800a848:	f004 f860 	bl	800e90c <HAL_UART_Init>
 800a84c:	1e03      	subs	r3, r0, #0
 800a84e:	d001      	beq.n	800a854 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 800a850:	f000 f888 	bl	800a964 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800a854:	46c0      	nop			@ (mov r8, r8)
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	46c0      	nop			@ (mov r8, r8)
 800a85c:	20000434 	.word	0x20000434
 800a860:	40004c00 	.word	0x40004c00

0800a864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a864:	b590      	push	{r4, r7, lr}
 800a866:	b089      	sub	sp, #36	@ 0x24
 800a868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a86a:	240c      	movs	r4, #12
 800a86c:	193b      	adds	r3, r7, r4
 800a86e:	0018      	movs	r0, r3
 800a870:	2314      	movs	r3, #20
 800a872:	001a      	movs	r2, r3
 800a874:	2100      	movs	r1, #0
 800a876:	f006 fc05 	bl	8011084 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a87a:	4b38      	ldr	r3, [pc, #224]	@ (800a95c <MX_GPIO_Init+0xf8>)
 800a87c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a87e:	4b37      	ldr	r3, [pc, #220]	@ (800a95c <MX_GPIO_Init+0xf8>)
 800a880:	2104      	movs	r1, #4
 800a882:	430a      	orrs	r2, r1
 800a884:	635a      	str	r2, [r3, #52]	@ 0x34
 800a886:	4b35      	ldr	r3, [pc, #212]	@ (800a95c <MX_GPIO_Init+0xf8>)
 800a888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a88a:	2204      	movs	r2, #4
 800a88c:	4013      	ands	r3, r2
 800a88e:	60bb      	str	r3, [r7, #8]
 800a890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a892:	4b32      	ldr	r3, [pc, #200]	@ (800a95c <MX_GPIO_Init+0xf8>)
 800a894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a896:	4b31      	ldr	r3, [pc, #196]	@ (800a95c <MX_GPIO_Init+0xf8>)
 800a898:	2120      	movs	r1, #32
 800a89a:	430a      	orrs	r2, r1
 800a89c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a89e:	4b2f      	ldr	r3, [pc, #188]	@ (800a95c <MX_GPIO_Init+0xf8>)
 800a8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	607b      	str	r3, [r7, #4]
 800a8a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8aa:	4b2c      	ldr	r3, [pc, #176]	@ (800a95c <MX_GPIO_Init+0xf8>)
 800a8ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8ae:	4b2b      	ldr	r3, [pc, #172]	@ (800a95c <MX_GPIO_Init+0xf8>)
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	635a      	str	r2, [r3, #52]	@ 0x34
 800a8b6:	4b29      	ldr	r3, [pc, #164]	@ (800a95c <MX_GPIO_Init+0xf8>)
 800a8b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	4013      	ands	r3, r2
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800a8c2:	4b27      	ldr	r3, [pc, #156]	@ (800a960 <MX_GPIO_Init+0xfc>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2107      	movs	r1, #7
 800a8c8:	0018      	movs	r0, r3
 800a8ca:	f001 fa67 	bl	800bd9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // LoRa NSS high initially
 800a8ce:	23a0      	movs	r3, #160	@ 0xa0
 800a8d0:	05db      	lsls	r3, r3, #23
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	2110      	movs	r1, #16
 800a8d6:	0018      	movs	r0, r3
 800a8d8:	f001 fa60 	bl	800bd9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800a8dc:	193b      	adds	r3, r7, r4
 800a8de:	2207      	movs	r2, #7
 800a8e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8e2:	193b      	adds	r3, r7, r4
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8e8:	193b      	adds	r3, r7, r4
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8ee:	193b      	adds	r3, r7, r4
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a8f4:	193b      	adds	r3, r7, r4
 800a8f6:	4a1a      	ldr	r2, [pc, #104]	@ (800a960 <MX_GPIO_Init+0xfc>)
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	0010      	movs	r0, r2
 800a8fc:	f001 f8ea 	bl	800bad4 <HAL_GPIO_Init>
  
  /*Configure LoRa NSS pin (PA4) */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a900:	193b      	adds	r3, r7, r4
 800a902:	2210      	movs	r2, #16
 800a904:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a906:	193b      	adds	r3, r7, r4
 800a908:	2201      	movs	r2, #1
 800a90a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a90c:	193b      	adds	r3, r7, r4
 800a90e:	2200      	movs	r2, #0
 800a910:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a912:	193b      	adds	r3, r7, r4
 800a914:	2202      	movs	r2, #2
 800a916:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a918:	193a      	adds	r2, r7, r4
 800a91a:	23a0      	movs	r3, #160	@ 0xa0
 800a91c:	05db      	lsls	r3, r3, #23
 800a91e:	0011      	movs	r1, r2
 800a920:	0018      	movs	r0, r3
 800a922:	f001 f8d7 	bl	800bad4 <HAL_GPIO_Init>
  
  /*Configure SPI1 pins: PA5 (SCK), PA6 (MISO), PA7 (MOSI) */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800a926:	0021      	movs	r1, r4
 800a928:	187b      	adds	r3, r7, r1
 800a92a:	22e0      	movs	r2, #224	@ 0xe0
 800a92c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a92e:	187b      	adds	r3, r7, r1
 800a930:	2202      	movs	r2, #2
 800a932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a934:	187b      	adds	r3, r7, r1
 800a936:	2200      	movs	r2, #0
 800a938:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a93a:	187b      	adds	r3, r7, r1
 800a93c:	2202      	movs	r2, #2
 800a93e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a940:	187b      	adds	r3, r7, r1
 800a942:	2200      	movs	r2, #0
 800a944:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a946:	187a      	adds	r2, r7, r1
 800a948:	23a0      	movs	r3, #160	@ 0xa0
 800a94a:	05db      	lsls	r3, r3, #23
 800a94c:	0011      	movs	r1, r2
 800a94e:	0018      	movs	r0, r3
 800a950:	f001 f8c0 	bl	800bad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800a954:	46c0      	nop			@ (mov r8, r8)
 800a956:	46bd      	mov	sp, r7
 800a958:	b009      	add	sp, #36	@ 0x24
 800a95a:	bd90      	pop	{r4, r7, pc}
 800a95c:	40021000 	.word	0x40021000
 800a960:	50000800 	.word	0x50000800

0800a964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a968:	b672      	cpsid	i
}
 800a96a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a96c:	46c0      	nop			@ (mov r8, r8)
 800a96e:	e7fd      	b.n	800a96c <Error_Handler+0x8>

0800a970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a976:	4b0f      	ldr	r3, [pc, #60]	@ (800a9b4 <HAL_MspInit+0x44>)
 800a978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a97a:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b4 <HAL_MspInit+0x44>)
 800a97c:	2101      	movs	r1, #1
 800a97e:	430a      	orrs	r2, r1
 800a980:	641a      	str	r2, [r3, #64]	@ 0x40
 800a982:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b4 <HAL_MspInit+0x44>)
 800a984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a986:	2201      	movs	r2, #1
 800a988:	4013      	ands	r3, r2
 800a98a:	607b      	str	r3, [r7, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a98e:	4b09      	ldr	r3, [pc, #36]	@ (800a9b4 <HAL_MspInit+0x44>)
 800a990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a992:	4b08      	ldr	r3, [pc, #32]	@ (800a9b4 <HAL_MspInit+0x44>)
 800a994:	2180      	movs	r1, #128	@ 0x80
 800a996:	0549      	lsls	r1, r1, #21
 800a998:	430a      	orrs	r2, r1
 800a99a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a99c:	4b05      	ldr	r3, [pc, #20]	@ (800a9b4 <HAL_MspInit+0x44>)
 800a99e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9a0:	2380      	movs	r3, #128	@ 0x80
 800a9a2:	055b      	lsls	r3, r3, #21
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a9aa:	46c0      	nop			@ (mov r8, r8)
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	b002      	add	sp, #8
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	46c0      	nop			@ (mov r8, r8)
 800a9b4:	40021000 	.word	0x40021000

0800a9b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a9b8:	b590      	push	{r4, r7, lr}
 800a9ba:	b097      	sub	sp, #92	@ 0x5c
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9c0:	2344      	movs	r3, #68	@ 0x44
 800a9c2:	18fb      	adds	r3, r7, r3
 800a9c4:	0018      	movs	r0, r3
 800a9c6:	2314      	movs	r3, #20
 800a9c8:	001a      	movs	r2, r3
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	f006 fb5a 	bl	8011084 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a9d0:	2410      	movs	r4, #16
 800a9d2:	193b      	adds	r3, r7, r4
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	2334      	movs	r3, #52	@ 0x34
 800a9d8:	001a      	movs	r2, r3
 800a9da:	2100      	movs	r1, #0
 800a9dc:	f006 fb52 	bl	8011084 <memset>
  if(hi2c->Instance==I2C1)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a23      	ldr	r2, [pc, #140]	@ (800aa74 <HAL_I2C_MspInit+0xbc>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d13f      	bne.n	800aa6a <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800a9ea:	193b      	adds	r3, r7, r4
 800a9ec:	2220      	movs	r2, #32
 800a9ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a9f0:	193b      	adds	r3, r7, r4
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9f6:	193b      	adds	r3, r7, r4
 800a9f8:	0018      	movs	r0, r3
 800a9fa:	f002 feaf 	bl	800d75c <HAL_RCCEx_PeriphCLKConfig>
 800a9fe:	1e03      	subs	r3, r0, #0
 800aa00:	d001      	beq.n	800aa06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800aa02:	f7ff ffaf 	bl	800a964 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa06:	4b1c      	ldr	r3, [pc, #112]	@ (800aa78 <HAL_I2C_MspInit+0xc0>)
 800aa08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa0a:	4b1b      	ldr	r3, [pc, #108]	@ (800aa78 <HAL_I2C_MspInit+0xc0>)
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	635a      	str	r2, [r3, #52]	@ 0x34
 800aa12:	4b19      	ldr	r3, [pc, #100]	@ (800aa78 <HAL_I2C_MspInit+0xc0>)
 800aa14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa16:	2201      	movs	r2, #1
 800aa18:	4013      	ands	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800aa1e:	2144      	movs	r1, #68	@ 0x44
 800aa20:	187b      	adds	r3, r7, r1
 800aa22:	22c0      	movs	r2, #192	@ 0xc0
 800aa24:	00d2      	lsls	r2, r2, #3
 800aa26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800aa28:	187b      	adds	r3, r7, r1
 800aa2a:	2212      	movs	r2, #18
 800aa2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa2e:	187b      	adds	r3, r7, r1
 800aa30:	2200      	movs	r2, #0
 800aa32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa34:	187b      	adds	r3, r7, r1
 800aa36:	2200      	movs	r2, #0
 800aa38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800aa3a:	187b      	adds	r3, r7, r1
 800aa3c:	2206      	movs	r2, #6
 800aa3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa40:	187a      	adds	r2, r7, r1
 800aa42:	23a0      	movs	r3, #160	@ 0xa0
 800aa44:	05db      	lsls	r3, r3, #23
 800aa46:	0011      	movs	r1, r2
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f001 f843 	bl	800bad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <HAL_I2C_MspInit+0xc0>)
 800aa50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa52:	4b09      	ldr	r3, [pc, #36]	@ (800aa78 <HAL_I2C_MspInit+0xc0>)
 800aa54:	2180      	movs	r1, #128	@ 0x80
 800aa56:	0389      	lsls	r1, r1, #14
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800aa5c:	4b06      	ldr	r3, [pc, #24]	@ (800aa78 <HAL_I2C_MspInit+0xc0>)
 800aa5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa60:	2380      	movs	r3, #128	@ 0x80
 800aa62:	039b      	lsls	r3, r3, #14
 800aa64:	4013      	ands	r3, r2
 800aa66:	60bb      	str	r3, [r7, #8]
 800aa68:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800aa6a:	46c0      	nop			@ (mov r8, r8)
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	b017      	add	sp, #92	@ 0x5c
 800aa70:	bd90      	pop	{r4, r7, pc}
 800aa72:	46c0      	nop			@ (mov r8, r8)
 800aa74:	40005400 	.word	0x40005400
 800aa78:	40021000 	.word	0x40021000

0800aa7c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800aa7c:	b590      	push	{r4, r7, lr}
 800aa7e:	b08b      	sub	sp, #44	@ 0x2c
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa84:	2414      	movs	r4, #20
 800aa86:	193b      	adds	r3, r7, r4
 800aa88:	0018      	movs	r0, r3
 800aa8a:	2314      	movs	r3, #20
 800aa8c:	001a      	movs	r2, r3
 800aa8e:	2100      	movs	r1, #0
 800aa90:	f006 faf8 	bl	8011084 <memset>
  if(hspi->Instance==SPI1)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a1b      	ldr	r2, [pc, #108]	@ (800ab08 <HAL_SPI_MspInit+0x8c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d130      	bne.n	800ab00 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800aa9e:	4b1b      	ldr	r3, [pc, #108]	@ (800ab0c <HAL_SPI_MspInit+0x90>)
 800aaa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aaa2:	4b1a      	ldr	r3, [pc, #104]	@ (800ab0c <HAL_SPI_MspInit+0x90>)
 800aaa4:	2180      	movs	r1, #128	@ 0x80
 800aaa6:	0149      	lsls	r1, r1, #5
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	641a      	str	r2, [r3, #64]	@ 0x40
 800aaac:	4b17      	ldr	r3, [pc, #92]	@ (800ab0c <HAL_SPI_MspInit+0x90>)
 800aaae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aab0:	2380      	movs	r3, #128	@ 0x80
 800aab2:	015b      	lsls	r3, r3, #5
 800aab4:	4013      	ands	r3, r2
 800aab6:	613b      	str	r3, [r7, #16]
 800aab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaba:	4b14      	ldr	r3, [pc, #80]	@ (800ab0c <HAL_SPI_MspInit+0x90>)
 800aabc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aabe:	4b13      	ldr	r3, [pc, #76]	@ (800ab0c <HAL_SPI_MspInit+0x90>)
 800aac0:	2101      	movs	r1, #1
 800aac2:	430a      	orrs	r2, r1
 800aac4:	635a      	str	r2, [r3, #52]	@ 0x34
 800aac6:	4b11      	ldr	r3, [pc, #68]	@ (800ab0c <HAL_SPI_MspInit+0x90>)
 800aac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaca:	2201      	movs	r2, #1
 800aacc:	4013      	ands	r3, r2
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800aad2:	0021      	movs	r1, r4
 800aad4:	187b      	adds	r3, r7, r1
 800aad6:	22f0      	movs	r2, #240	@ 0xf0
 800aad8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aada:	187b      	adds	r3, r7, r1
 800aadc:	2202      	movs	r2, #2
 800aade:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aae0:	187b      	adds	r3, r7, r1
 800aae2:	2200      	movs	r2, #0
 800aae4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aae6:	187b      	adds	r3, r7, r1
 800aae8:	2200      	movs	r2, #0
 800aaea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800aaec:	187b      	adds	r3, r7, r1
 800aaee:	2200      	movs	r2, #0
 800aaf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaf2:	187a      	adds	r2, r7, r1
 800aaf4:	23a0      	movs	r3, #160	@ 0xa0
 800aaf6:	05db      	lsls	r3, r3, #23
 800aaf8:	0011      	movs	r1, r2
 800aafa:	0018      	movs	r0, r3
 800aafc:	f000 ffea 	bl	800bad4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800ab00:	46c0      	nop			@ (mov r8, r8)
 800ab02:	46bd      	mov	sp, r7
 800ab04:	b00b      	add	sp, #44	@ 0x2c
 800ab06:	bd90      	pop	{r4, r7, pc}
 800ab08:	40013000 	.word	0x40013000
 800ab0c:	40021000 	.word	0x40021000

0800ab10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ab10:	b590      	push	{r4, r7, lr}
 800ab12:	b099      	sub	sp, #100	@ 0x64
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab18:	234c      	movs	r3, #76	@ 0x4c
 800ab1a:	18fb      	adds	r3, r7, r3
 800ab1c:	0018      	movs	r0, r3
 800ab1e:	2314      	movs	r3, #20
 800ab20:	001a      	movs	r2, r3
 800ab22:	2100      	movs	r1, #0
 800ab24:	f006 faae 	bl	8011084 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ab28:	2418      	movs	r4, #24
 800ab2a:	193b      	adds	r3, r7, r4
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	2334      	movs	r3, #52	@ 0x34
 800ab30:	001a      	movs	r2, r3
 800ab32:	2100      	movs	r1, #0
 800ab34:	f006 faa6 	bl	8011084 <memset>
  if(huart->Instance==USART2)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a3e      	ldr	r2, [pc, #248]	@ (800ac38 <HAL_UART_MspInit+0x128>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d13f      	bne.n	800abc2 <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800ab42:	193b      	adds	r3, r7, r4
 800ab44:	2202      	movs	r2, #2
 800ab46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ab48:	193b      	adds	r3, r7, r4
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ab4e:	193b      	adds	r3, r7, r4
 800ab50:	0018      	movs	r0, r3
 800ab52:	f002 fe03 	bl	800d75c <HAL_RCCEx_PeriphCLKConfig>
 800ab56:	1e03      	subs	r3, r0, #0
 800ab58:	d001      	beq.n	800ab5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800ab5a:	f7ff ff03 	bl	800a964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ab5e:	4b37      	ldr	r3, [pc, #220]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800ab60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab62:	4b36      	ldr	r3, [pc, #216]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800ab64:	2180      	movs	r1, #128	@ 0x80
 800ab66:	0289      	lsls	r1, r1, #10
 800ab68:	430a      	orrs	r2, r1
 800ab6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ab6c:	4b33      	ldr	r3, [pc, #204]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800ab6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab70:	2380      	movs	r3, #128	@ 0x80
 800ab72:	029b      	lsls	r3, r3, #10
 800ab74:	4013      	ands	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]
 800ab78:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab7a:	4b30      	ldr	r3, [pc, #192]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800ab7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab7e:	4b2f      	ldr	r3, [pc, #188]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800ab80:	2101      	movs	r1, #1
 800ab82:	430a      	orrs	r2, r1
 800ab84:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab86:	4b2d      	ldr	r3, [pc, #180]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800ab88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]
 800ab90:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800ab92:	214c      	movs	r1, #76	@ 0x4c
 800ab94:	187b      	adds	r3, r7, r1
 800ab96:	220c      	movs	r2, #12
 800ab98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab9a:	187b      	adds	r3, r7, r1
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aba0:	187b      	adds	r3, r7, r1
 800aba2:	2201      	movs	r2, #1
 800aba4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aba6:	187b      	adds	r3, r7, r1
 800aba8:	2200      	movs	r2, #0
 800abaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800abac:	187b      	adds	r3, r7, r1
 800abae:	2201      	movs	r2, #1
 800abb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abb2:	187a      	adds	r2, r7, r1
 800abb4:	23a0      	movs	r3, #160	@ 0xa0
 800abb6:	05db      	lsls	r3, r3, #23
 800abb8:	0011      	movs	r1, r2
 800abba:	0018      	movs	r0, r3
 800abbc:	f000 ff8a 	bl	800bad4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART4_MspInit 1 */

    /* USER CODE END USART4_MspInit 1 */
  }

}
 800abc0:	e035      	b.n	800ac2e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART4)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a1e      	ldr	r2, [pc, #120]	@ (800ac40 <HAL_UART_MspInit+0x130>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d130      	bne.n	800ac2e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART4_CLK_ENABLE();
 800abcc:	4b1b      	ldr	r3, [pc, #108]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800abce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abd0:	4b1a      	ldr	r3, [pc, #104]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800abd2:	2180      	movs	r1, #128	@ 0x80
 800abd4:	0309      	lsls	r1, r1, #12
 800abd6:	430a      	orrs	r2, r1
 800abd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 800abda:	4b18      	ldr	r3, [pc, #96]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800abdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abde:	2380      	movs	r3, #128	@ 0x80
 800abe0:	031b      	lsls	r3, r3, #12
 800abe2:	4013      	ands	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]
 800abe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abe8:	4b14      	ldr	r3, [pc, #80]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800abea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abec:	4b13      	ldr	r3, [pc, #76]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800abee:	2101      	movs	r1, #1
 800abf0:	430a      	orrs	r2, r1
 800abf2:	635a      	str	r2, [r3, #52]	@ 0x34
 800abf4:	4b11      	ldr	r3, [pc, #68]	@ (800ac3c <HAL_UART_MspInit+0x12c>)
 800abf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf8:	2201      	movs	r2, #1
 800abfa:	4013      	ands	r3, r2
 800abfc:	60bb      	str	r3, [r7, #8]
 800abfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ac00:	214c      	movs	r1, #76	@ 0x4c
 800ac02:	187b      	adds	r3, r7, r1
 800ac04:	2203      	movs	r2, #3
 800ac06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac08:	187b      	adds	r3, r7, r1
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac0e:	187b      	adds	r3, r7, r1
 800ac10:	2200      	movs	r2, #0
 800ac12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac14:	187b      	adds	r3, r7, r1
 800ac16:	2200      	movs	r2, #0
 800ac18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800ac1a:	187b      	adds	r3, r7, r1
 800ac1c:	2204      	movs	r2, #4
 800ac1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac20:	187a      	adds	r2, r7, r1
 800ac22:	23a0      	movs	r3, #160	@ 0xa0
 800ac24:	05db      	lsls	r3, r3, #23
 800ac26:	0011      	movs	r1, r2
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f000 ff53 	bl	800bad4 <HAL_GPIO_Init>
}
 800ac2e:	46c0      	nop			@ (mov r8, r8)
 800ac30:	46bd      	mov	sp, r7
 800ac32:	b019      	add	sp, #100	@ 0x64
 800ac34:	bd90      	pop	{r4, r7, pc}
 800ac36:	46c0      	nop			@ (mov r8, r8)
 800ac38:	40004400 	.word	0x40004400
 800ac3c:	40021000 	.word	0x40021000
 800ac40:	40004c00 	.word	0x40004c00

0800ac44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800ac48:	46c0      	nop			@ (mov r8, r8)
 800ac4a:	e7fd      	b.n	800ac48 <NMI_Handler+0x4>

0800ac4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ac50:	46c0      	nop			@ (mov r8, r8)
 800ac52:	e7fd      	b.n	800ac50 <HardFault_Handler+0x4>

0800ac54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800ac58:	46c0      	nop			@ (mov r8, r8)
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ac62:	46c0      	nop			@ (mov r8, r8)
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ac6c:	f000 fe3e 	bl	800b8ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ac70:	46c0      	nop			@ (mov r8, r8)
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b086      	sub	sp, #24
 800ac7a:	af02      	add	r7, sp, #8
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	000a      	movs	r2, r1
 800ac80:	1cfb      	adds	r3, r7, #3
 800ac82:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 800ac84:	210c      	movs	r1, #12
 800ac86:	187b      	adds	r3, r7, r1
 800ac88:	2280      	movs	r2, #128	@ 0x80
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	187b      	adds	r3, r7, r1
 800ac8e:	1cfa      	adds	r2, r7, #3
 800ac90:	7812      	ldrb	r2, [r2, #0]
 800ac92:	705a      	strb	r2, [r3, #1]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800ac94:	1879      	adds	r1, r7, r1
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	2300      	movs	r3, #0
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	2202      	movs	r2, #2
 800aca0:	f000 fbfe 	bl	800b4a0 <sx126x_hal_write>
 800aca4:	0003      	movs	r3, r0
}
 800aca6:	0018      	movs	r0, r3
 800aca8:	46bd      	mov	sp, r7
 800acaa:	b004      	add	sp, #16
 800acac:	bd80      	pop	{r7, pc}

0800acae <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	2380      	movs	r3, #128	@ 0x80
 800acbc:	02db      	lsls	r3, r3, #11
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d301      	bcc.n	800acc6 <sx126x_set_tx+0x18>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800acc2:	2302      	movs	r3, #2
 800acc4:	e00c      	b.n	800ace0 <sx126x_set_tx+0x32>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	0018      	movs	r0, r3
 800acca:	f000 fb3f 	bl	800b34c <sx126x_convert_timeout_in_ms_to_rtc_step>
 800acce:	0003      	movs	r3, r0
 800acd0:	60fb      	str	r3, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	0011      	movs	r1, r2
 800acd8:	0018      	movs	r0, r3
 800acda:	f000 f805 	bl	800ace8 <sx126x_set_tx_with_timeout_in_rtc_step>
 800acde:	0003      	movs	r3, r0
}
 800ace0:	0018      	movs	r0, r3
 800ace2:	46bd      	mov	sp, r7
 800ace4:	b004      	add	sp, #16
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af02      	add	r7, sp, #8
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800acf2:	210c      	movs	r1, #12
 800acf4:	187b      	adds	r3, r7, r1
 800acf6:	2283      	movs	r2, #131	@ 0x83
 800acf8:	701a      	strb	r2, [r3, #0]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	0c1b      	lsrs	r3, r3, #16
 800acfe:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800ad00:	187b      	adds	r3, r7, r1
 800ad02:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	0a1b      	lsrs	r3, r3, #8
 800ad08:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800ad0a:	187b      	adds	r3, r7, r1
 800ad0c:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800ad12:	187b      	adds	r3, r7, r1
 800ad14:	70da      	strb	r2, [r3, #3]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800ad16:	1879      	adds	r1, r7, r1
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	2204      	movs	r2, #4
 800ad22:	f000 fbbd 	bl	800b4a0 <sx126x_hal_write>
 800ad26:	0003      	movs	r3, r0
}
 800ad28:	0018      	movs	r0, r3
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	b004      	add	sp, #16
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af02      	add	r7, sp, #8
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	000a      	movs	r2, r1
 800ad3a:	1cfb      	adds	r3, r7, #3
 800ad3c:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800ad3e:	210c      	movs	r1, #12
 800ad40:	187b      	adds	r3, r7, r1
 800ad42:	2296      	movs	r2, #150	@ 0x96
 800ad44:	701a      	strb	r2, [r3, #0]
 800ad46:	187b      	adds	r3, r7, r1
 800ad48:	1cfa      	adds	r2, r7, #3
 800ad4a:	7812      	ldrb	r2, [r2, #0]
 800ad4c:	705a      	strb	r2, [r3, #1]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800ad4e:	1879      	adds	r1, r7, r1
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	2300      	movs	r3, #0
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	2300      	movs	r3, #0
 800ad58:	2202      	movs	r2, #2
 800ad5a:	f000 fba1 	bl	800b4a0 <sx126x_hal_write>
 800ad5e:	0003      	movs	r3, r0
}
 800ad60:	0018      	movs	r0, r3
 800ad62:	46bd      	mov	sp, r7
 800ad64:	b004      	add	sp, #16
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800ad68:	b5b0      	push	{r4, r5, r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	0008      	movs	r0, r1
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	0019      	movs	r1, r3
 800ad76:	240a      	movs	r4, #10
 800ad78:	193b      	adds	r3, r7, r4
 800ad7a:	1c02      	adds	r2, r0, #0
 800ad7c:	801a      	strh	r2, [r3, #0]
 800ad7e:	2509      	movs	r5, #9
 800ad80:	197b      	adds	r3, r7, r5
 800ad82:	1c0a      	adds	r2, r1, #0
 800ad84:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800ad86:	2114      	movs	r1, #20
 800ad88:	187b      	adds	r3, r7, r1
 800ad8a:	220d      	movs	r2, #13
 800ad8c:	701a      	strb	r2, [r3, #0]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 800ad8e:	0020      	movs	r0, r4
 800ad90:	183b      	adds	r3, r7, r0
 800ad92:	881b      	ldrh	r3, [r3, #0]
 800ad94:	0a1b      	lsrs	r3, r3, #8
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800ad9a:	187b      	adds	r3, r7, r1
 800ad9c:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( address >> 0 ),
 800ad9e:	183b      	adds	r3, r7, r0
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800ada4:	187b      	adds	r3, r7, r1
 800ada6:	709a      	strb	r2, [r3, #2]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800ada8:	197b      	adds	r3, r7, r5
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	b29b      	uxth	r3, r3
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	1879      	adds	r1, r7, r1
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	0013      	movs	r3, r2
 800adb8:	2203      	movs	r2, #3
 800adba:	f000 fb71 	bl	800b4a0 <sx126x_hal_write>
 800adbe:	0003      	movs	r3, r0
}
 800adc0:	0018      	movs	r0, r3
 800adc2:	46bd      	mov	sp, r7
 800adc4:	b006      	add	sp, #24
 800adc6:	bdb0      	pop	{r4, r5, r7, pc}

0800adc8 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800adc8:	b5b0      	push	{r4, r5, r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af02      	add	r7, sp, #8
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	0008      	movs	r0, r1
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	0019      	movs	r1, r3
 800add6:	240a      	movs	r4, #10
 800add8:	193b      	adds	r3, r7, r4
 800adda:	1c02      	adds	r2, r0, #0
 800addc:	801a      	strh	r2, [r3, #0]
 800adde:	2509      	movs	r5, #9
 800ade0:	197b      	adds	r3, r7, r5
 800ade2:	1c0a      	adds	r2, r1, #0
 800ade4:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800ade6:	2114      	movs	r1, #20
 800ade8:	187b      	adds	r3, r7, r1
 800adea:	221d      	movs	r2, #29
 800adec:	701a      	strb	r2, [r3, #0]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 800adee:	0020      	movs	r0, r4
 800adf0:	183b      	adds	r3, r7, r0
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	0a1b      	lsrs	r3, r3, #8
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800adfa:	187b      	adds	r3, r7, r1
 800adfc:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( address >> 0 ),
 800adfe:	183b      	adds	r3, r7, r0
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800ae04:	187b      	adds	r3, r7, r1
 800ae06:	709a      	strb	r2, [r3, #2]
 800ae08:	187b      	adds	r3, r7, r1
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	70da      	strb	r2, [r3, #3]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800ae0e:	197b      	adds	r3, r7, r5
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	1879      	adds	r1, r7, r1
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	0013      	movs	r3, r2
 800ae1e:	2204      	movs	r2, #4
 800ae20:	f000 fb84 	bl	800b52c <sx126x_hal_read>
 800ae24:	0003      	movs	r3, r0
}
 800ae26:	0018      	movs	r0, r3
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	b006      	add	sp, #24
 800ae2c:	bdb0      	pop	{r4, r5, r7, pc}

0800ae2e <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800ae2e:	b590      	push	{r4, r7, lr}
 800ae30:	b089      	sub	sp, #36	@ 0x24
 800ae32:	af02      	add	r7, sp, #8
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	0008      	movs	r0, r1
 800ae38:	607a      	str	r2, [r7, #4]
 800ae3a:	0019      	movs	r1, r3
 800ae3c:	240b      	movs	r4, #11
 800ae3e:	193b      	adds	r3, r7, r4
 800ae40:	1c02      	adds	r2, r0, #0
 800ae42:	701a      	strb	r2, [r3, #0]
 800ae44:	200a      	movs	r0, #10
 800ae46:	183b      	adds	r3, r7, r0
 800ae48:	1c0a      	adds	r2, r1, #0
 800ae4a:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 800ae4c:	2114      	movs	r1, #20
 800ae4e:	187b      	adds	r3, r7, r1
 800ae50:	220e      	movs	r2, #14
 800ae52:	701a      	strb	r2, [r3, #0]
 800ae54:	187b      	adds	r3, r7, r1
 800ae56:	193a      	adds	r2, r7, r4
 800ae58:	7812      	ldrb	r2, [r2, #0]
 800ae5a:	705a      	strb	r2, [r3, #1]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800ae5c:	183b      	adds	r3, r7, r0
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	1879      	adds	r1, r7, r1
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	0013      	movs	r3, r2
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	f000 fb17 	bl	800b4a0 <sx126x_hal_write>
 800ae72:	0003      	movs	r3, r0
}
 800ae74:	0018      	movs	r0, r3
 800ae76:	46bd      	mov	sp, r7
 800ae78:	b007      	add	sp, #28
 800ae7a:	bd90      	pop	{r4, r7, pc}

0800ae7c <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800ae7c:	b5b0      	push	{r4, r5, r7, lr}
 800ae7e:	b08a      	sub	sp, #40	@ 0x28
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	000c      	movs	r4, r1
 800ae86:	0010      	movs	r0, r2
 800ae88:	0019      	movs	r1, r3
 800ae8a:	250a      	movs	r5, #10
 800ae8c:	197b      	adds	r3, r7, r5
 800ae8e:	1c22      	adds	r2, r4, #0
 800ae90:	801a      	strh	r2, [r3, #0]
 800ae92:	2408      	movs	r4, #8
 800ae94:	193b      	adds	r3, r7, r4
 800ae96:	1c02      	adds	r2, r0, #0
 800ae98:	801a      	strh	r2, [r3, #0]
 800ae9a:	1dbb      	adds	r3, r7, #6
 800ae9c:	1c0a      	adds	r2, r1, #0
 800ae9e:	801a      	strh	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800aea0:	2114      	movs	r1, #20
 800aea2:	187b      	adds	r3, r7, r1
 800aea4:	2208      	movs	r2, #8
 800aea6:	701a      	strb	r2, [r3, #0]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800aea8:	197b      	adds	r3, r7, r5
 800aeaa:	881b      	ldrh	r3, [r3, #0]
 800aeac:	0a1b      	lsrs	r3, r3, #8
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800aeb2:	187b      	adds	r3, r7, r1
 800aeb4:	705a      	strb	r2, [r3, #1]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800aeb6:	197b      	adds	r3, r7, r5
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800aebc:	187b      	adds	r3, r7, r1
 800aebe:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800aec0:	193b      	adds	r3, r7, r4
 800aec2:	881b      	ldrh	r3, [r3, #0]
 800aec4:	0a1b      	lsrs	r3, r3, #8
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800aeca:	187b      	adds	r3, r7, r1
 800aecc:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800aece:	193b      	adds	r3, r7, r4
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800aed4:	187b      	adds	r3, r7, r1
 800aed6:	711a      	strb	r2, [r3, #4]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800aed8:	1dbb      	adds	r3, r7, #6
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	0a1b      	lsrs	r3, r3, #8
 800aede:	b29b      	uxth	r3, r3
 800aee0:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800aee2:	187b      	adds	r3, r7, r1
 800aee4:	715a      	strb	r2, [r3, #5]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800aee6:	1dbb      	adds	r3, r7, #6
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800aeec:	187b      	adds	r3, r7, r1
 800aeee:	719a      	strb	r2, [r3, #6]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800aef0:	2030      	movs	r0, #48	@ 0x30
 800aef2:	183b      	adds	r3, r7, r0
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	0a1b      	lsrs	r3, r3, #8
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800aefc:	187b      	adds	r3, r7, r1
 800aefe:	71da      	strb	r2, [r3, #7]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800af00:	183b      	adds	r3, r7, r0
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800af06:	187b      	adds	r3, r7, r1
 800af08:	721a      	strb	r2, [r3, #8]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800af0a:	1879      	adds	r1, r7, r1
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	2300      	movs	r3, #0
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	2300      	movs	r3, #0
 800af14:	2209      	movs	r2, #9
 800af16:	f000 fac3 	bl	800b4a0 <sx126x_hal_write>
 800af1a:	0003      	movs	r3, r0
}
 800af1c:	0018      	movs	r0, r3
 800af1e:	46bd      	mov	sp, r7
 800af20:	b008      	add	sp, #32
 800af22:	bdb0      	pop	{r4, r5, r7, pc}

0800af24 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 800af24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af26:	b087      	sub	sp, #28
 800af28:	af02      	add	r7, sp, #8
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_IRQ_STATUS] = {
 800af2e:	210c      	movs	r1, #12
 800af30:	187b      	adds	r3, r7, r1
 800af32:	2212      	movs	r2, #18
 800af34:	801a      	strh	r2, [r3, #0]
        SX126X_GET_IRQ_STATUS,
        SX126X_NOP,
    };
    uint8_t irq_local[sizeof( sx126x_irq_mask_t )] = { 0x00 };
 800af36:	2508      	movs	r5, #8
 800af38:	197b      	adds	r3, r7, r5
 800af3a:	2200      	movs	r2, #0
 800af3c:	801a      	strh	r2, [r3, #0]

    const sx126x_status_t status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS,
 800af3e:	260f      	movs	r6, #15
 800af40:	19bc      	adds	r4, r7, r6
 800af42:	197b      	adds	r3, r7, r5
 800af44:	1879      	adds	r1, r7, r1
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	2202      	movs	r2, #2
 800af4a:	9200      	str	r2, [sp, #0]
 800af4c:	2202      	movs	r2, #2
 800af4e:	f000 faed 	bl	800b52c <sx126x_hal_read>
 800af52:	0003      	movs	r3, r0
 800af54:	7023      	strb	r3, [r4, #0]
                                                                        irq_local, sizeof( sx126x_irq_mask_t ) );

    if( status == SX126X_STATUS_OK )
 800af56:	19bb      	adds	r3, r7, r6
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d109      	bne.n	800af72 <sx126x_get_irq_status+0x4e>
    {
        *irq = ( ( sx126x_irq_mask_t ) irq_local[0] << 8 ) + ( ( sx126x_irq_mask_t ) irq_local[1] << 0 );
 800af5e:	197b      	adds	r3, r7, r5
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	021b      	lsls	r3, r3, #8
 800af64:	b29b      	uxth	r3, r3
 800af66:	197a      	adds	r2, r7, r5
 800af68:	7852      	ldrb	r2, [r2, #1]
 800af6a:	189b      	adds	r3, r3, r2
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	801a      	strh	r2, [r3, #0]
    }

    return status;
 800af72:	230f      	movs	r3, #15
 800af74:	18fb      	adds	r3, r7, r3
 800af76:	781b      	ldrb	r3, [r3, #0]
}
 800af78:	0018      	movs	r0, r3
 800af7a:	46bd      	mov	sp, r7
 800af7c:	b005      	add	sp, #20
 800af7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af80 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af02      	add	r7, sp, #8
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	000a      	movs	r2, r1
 800af8a:	1cbb      	adds	r3, r7, #2
 800af8c:	801a      	strh	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = {
 800af8e:	210c      	movs	r1, #12
 800af90:	187b      	adds	r3, r7, r1
 800af92:	2202      	movs	r2, #2
 800af94:	701a      	strb	r2, [r3, #0]
        SX126X_CLR_IRQ_STATUS,
        ( uint8_t )( irq_mask >> 8 ),
 800af96:	1cbb      	adds	r3, r7, #2
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	0a1b      	lsrs	r3, r3, #8
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = {
 800afa0:	187b      	adds	r3, r7, r1
 800afa2:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( irq_mask >> 0 ),
 800afa4:	1cbb      	adds	r3, r7, #2
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = {
 800afaa:	187b      	adds	r3, r7, r1
 800afac:	709a      	strb	r2, [r3, #2]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 800afae:	1879      	adds	r1, r7, r1
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	2300      	movs	r3, #0
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	2300      	movs	r3, #0
 800afb8:	2203      	movs	r2, #3
 800afba:	f000 fa71 	bl	800b4a0 <sx126x_hal_write>
 800afbe:	0003      	movs	r3, r0
}
 800afc0:	0018      	movs	r0, r3
 800afc2:	46bd      	mov	sp, r7
 800afc4:	b004      	add	sp, #16
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	0018      	movs	r0, r3
 800afd6:	f000 f98d 	bl	800b2f4 <sx126x_convert_freq_in_hz_to_pll_step>
 800afda:	0003      	movs	r3, r0
 800afdc:	60fb      	str	r3, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	0011      	movs	r1, r2
 800afe4:	0018      	movs	r0, r3
 800afe6:	f000 f805 	bl	800aff4 <sx126x_set_rf_freq_in_pll_steps>
 800afea:	0003      	movs	r3, r0
}
 800afec:	0018      	movs	r0, r3
 800afee:	46bd      	mov	sp, r7
 800aff0:	b004      	add	sp, #16
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af02      	add	r7, sp, #8
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800affe:	2108      	movs	r1, #8
 800b000:	187b      	adds	r3, r7, r1
 800b002:	2286      	movs	r2, #134	@ 0x86
 800b004:	701a      	strb	r2, [r3, #0]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	0e1b      	lsrs	r3, r3, #24
 800b00a:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800b00c:	187b      	adds	r3, r7, r1
 800b00e:	705a      	strb	r2, [r3, #1]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	0c1b      	lsrs	r3, r3, #16
 800b014:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800b016:	187b      	adds	r3, r7, r1
 800b018:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	0a1b      	lsrs	r3, r3, #8
 800b01e:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800b020:	187b      	adds	r3, r7, r1
 800b022:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800b028:	187b      	adds	r3, r7, r1
 800b02a:	711a      	strb	r2, [r3, #4]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800b02c:	1879      	adds	r1, r7, r1
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	2300      	movs	r3, #0
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	2300      	movs	r3, #0
 800b036:	2205      	movs	r2, #5
 800b038:	f000 fa32 	bl	800b4a0 <sx126x_hal_write>
 800b03c:	0003      	movs	r3, r0
}
 800b03e:	0018      	movs	r0, r3
 800b040:	46bd      	mov	sp, r7
 800b042:	b004      	add	sp, #16
 800b044:	bd80      	pop	{r7, pc}

0800b046 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b086      	sub	sp, #24
 800b04a:	af02      	add	r7, sp, #8
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	000a      	movs	r2, r1
 800b050:	1cfb      	adds	r3, r7, #3
 800b052:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 800b054:	210c      	movs	r1, #12
 800b056:	187b      	adds	r3, r7, r1
 800b058:	228a      	movs	r2, #138	@ 0x8a
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	187b      	adds	r3, r7, r1
 800b05e:	1cfa      	adds	r2, r7, #3
 800b060:	7812      	ldrb	r2, [r2, #0]
 800b062:	705a      	strb	r2, [r3, #1]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800b064:	1879      	adds	r1, r7, r1
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	2300      	movs	r3, #0
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	2300      	movs	r3, #0
 800b06e:	2202      	movs	r2, #2
 800b070:	f000 fa16 	bl	800b4a0 <sx126x_hal_write>
 800b074:	0003      	movs	r3, r0
}
 800b076:	0018      	movs	r0, r3
 800b078:	46bd      	mov	sp, r7
 800b07a:	b004      	add	sp, #16
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b086      	sub	sp, #24
 800b082:	af02      	add	r7, sp, #8
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	0008      	movs	r0, r1
 800b088:	0011      	movs	r1, r2
 800b08a:	1cfb      	adds	r3, r7, #3
 800b08c:	1c02      	adds	r2, r0, #0
 800b08e:	701a      	strb	r2, [r3, #0]
 800b090:	1cbb      	adds	r3, r7, #2
 800b092:	1c0a      	adds	r2, r1, #0
 800b094:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800b096:	210c      	movs	r1, #12
 800b098:	187b      	adds	r3, r7, r1
 800b09a:	228e      	movs	r2, #142	@ 0x8e
 800b09c:	701a      	strb	r2, [r3, #0]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800b09e:	1cfb      	adds	r3, r7, #3
 800b0a0:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800b0a2:	187b      	adds	r3, r7, r1
 800b0a4:	705a      	strb	r2, [r3, #1]
 800b0a6:	187b      	adds	r3, r7, r1
 800b0a8:	1cba      	adds	r2, r7, #2
 800b0aa:	7812      	ldrb	r2, [r2, #0]
 800b0ac:	709a      	strb	r2, [r3, #2]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800b0ae:	1879      	adds	r1, r7, r1
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	2203      	movs	r2, #3
 800b0ba:	f000 f9f1 	bl	800b4a0 <sx126x_hal_write>
 800b0be:	0003      	movs	r3, r0
}
 800b0c0:	0018      	movs	r0, r3
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	b004      	add	sp, #16
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800b0c8:	b5b0      	push	{r4, r5, r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af02      	add	r7, sp, #8
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800b0d2:	2108      	movs	r1, #8
 800b0d4:	187b      	adds	r3, r7, r1
 800b0d6:	228b      	movs	r2, #139	@ 0x8b
 800b0d8:	701a      	strb	r2, [r3, #0]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800b0de:	187b      	adds	r3, r7, r1
 800b0e0:	705a      	strb	r2, [r3, #1]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	785a      	ldrb	r2, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800b0e6:	187b      	adds	r3, r7, r1
 800b0e8:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800b0ee:	187b      	adds	r3, r7, r1
 800b0f0:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	78db      	ldrb	r3, [r3, #3]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800b0fc:	187b      	adds	r3, r7, r1
 800b0fe:	711a      	strb	r2, [r3, #4]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800b100:	250f      	movs	r5, #15
 800b102:	197c      	adds	r4, r7, r5
 800b104:	1879      	adds	r1, r7, r1
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	2300      	movs	r3, #0
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	2300      	movs	r3, #0
 800b10e:	2205      	movs	r2, #5
 800b110:	f000 f9c6 	bl	800b4a0 <sx126x_hal_write>
 800b114:	0003      	movs	r3, r0
 800b116:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 800b118:	197b      	adds	r3, r7, r5
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d109      	bne.n	800b134 <sx126x_set_lora_mod_params+0x6c>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	785a      	ldrb	r2, [r3, #1]
 800b124:	197c      	adds	r4, r7, r5
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2101      	movs	r1, #1
 800b12a:	0018      	movs	r0, r3
 800b12c:	f000 f964 	bl	800b3f8 <sx126x_tx_modulation_workaround>
 800b130:	0003      	movs	r3, r0
 800b132:	7023      	strb	r3, [r4, #0]
        // WORKAROUND END
    }

    return status;
 800b134:	230f      	movs	r3, #15
 800b136:	18fb      	adds	r3, r7, r3
 800b138:	781b      	ldrb	r3, [r3, #0]
}
 800b13a:	0018      	movs	r0, r3
 800b13c:	46bd      	mov	sp, r7
 800b13e:	b004      	add	sp, #16
 800b140:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b144 <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800b144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b146:	b089      	sub	sp, #36	@ 0x24
 800b148:	af02      	add	r7, sp, #8
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800b14e:	2110      	movs	r1, #16
 800b150:	187b      	adds	r3, r7, r1
 800b152:	228c      	movs	r2, #140	@ 0x8c
 800b154:	701a      	strb	r2, [r3, #0]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	0a1b      	lsrs	r3, r3, #8
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800b160:	187b      	adds	r3, r7, r1
 800b162:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800b16a:	187b      	adds	r3, r7, r1
 800b16c:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( params->header_type ),
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800b172:	187b      	adds	r3, r7, r1
 800b174:	70da      	strb	r2, [r3, #3]
        params->pld_len_in_bytes,
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	78da      	ldrb	r2, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800b17a:	187b      	adds	r3, r7, r1
 800b17c:	711a      	strb	r2, [r3, #4]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	791b      	ldrb	r3, [r3, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <sx126x_set_lora_pkt_params+0x46>
 800b186:	2201      	movs	r2, #1
 800b188:	e000      	b.n	800b18c <sx126x_set_lora_pkt_params+0x48>
 800b18a:	2200      	movs	r2, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800b18c:	2310      	movs	r3, #16
 800b18e:	18fb      	adds	r3, r7, r3
 800b190:	715a      	strb	r2, [r3, #5]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	795b      	ldrb	r3, [r3, #5]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d001      	beq.n	800b19e <sx126x_set_lora_pkt_params+0x5a>
 800b19a:	2201      	movs	r2, #1
 800b19c:	e000      	b.n	800b1a0 <sx126x_set_lora_pkt_params+0x5c>
 800b19e:	2200      	movs	r2, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800b1a0:	2110      	movs	r1, #16
 800b1a2:	187b      	adds	r3, r7, r1
 800b1a4:	719a      	strb	r2, [r3, #6]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800b1a6:	2517      	movs	r5, #23
 800b1a8:	197c      	adds	r4, r7, r5
 800b1aa:	1879      	adds	r1, r7, r1
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	2207      	movs	r2, #7
 800b1b6:	f000 f973 	bl	800b4a0 <sx126x_hal_write>
 800b1ba:	0003      	movs	r3, r0
 800b1bc:	7023      	strb	r3, [r4, #0]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800b1be:	197b      	adds	r3, r7, r5
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d12f      	bne.n	800b226 <sx126x_set_lora_pkt_params+0xe2>
    {
        uint8_t reg_value = 0;
 800b1c6:	260f      	movs	r6, #15
 800b1c8:	19bb      	adds	r3, r7, r6
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	701a      	strb	r2, [r3, #0]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800b1ce:	197c      	adds	r4, r7, r5
 800b1d0:	19ba      	adds	r2, r7, r6
 800b1d2:	4918      	ldr	r1, [pc, #96]	@ (800b234 <sx126x_set_lora_pkt_params+0xf0>)
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	f7ff fdf6 	bl	800adc8 <sx126x_read_register>
 800b1dc:	0003      	movs	r3, r0
 800b1de:	7023      	strb	r3, [r4, #0]
        if( status == SX126X_STATUS_OK )
 800b1e0:	197b      	adds	r3, r7, r5
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d11e      	bne.n	800b226 <sx126x_set_lora_pkt_params+0xe2>
        {
            if( params->invert_iq_is_on == true )
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	795b      	ldrb	r3, [r3, #5]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d007      	beq.n	800b200 <sx126x_set_lora_pkt_params+0xbc>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800b1f0:	19bb      	adds	r3, r7, r6
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2204      	movs	r2, #4
 800b1f6:	4393      	bics	r3, r2
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	19bb      	adds	r3, r7, r6
 800b1fc:	701a      	strb	r2, [r3, #0]
 800b1fe:	e007      	b.n	800b210 <sx126x_set_lora_pkt_params+0xcc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800b200:	210f      	movs	r1, #15
 800b202:	187b      	adds	r3, r7, r1
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	2204      	movs	r2, #4
 800b208:	4313      	orrs	r3, r2
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	187b      	adds	r3, r7, r1
 800b20e:	701a      	strb	r2, [r3, #0]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800b210:	2317      	movs	r3, #23
 800b212:	18fc      	adds	r4, r7, r3
 800b214:	230f      	movs	r3, #15
 800b216:	18fa      	adds	r2, r7, r3
 800b218:	4906      	ldr	r1, [pc, #24]	@ (800b234 <sx126x_set_lora_pkt_params+0xf0>)
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	2301      	movs	r3, #1
 800b21e:	f7ff fda3 	bl	800ad68 <sx126x_write_register>
 800b222:	0003      	movs	r3, r0
 800b224:	7023      	strb	r3, [r4, #0]
        }
    }
    // WORKAROUND END

    return status;
 800b226:	2317      	movs	r3, #23
 800b228:	18fb      	adds	r3, r7, r3
 800b22a:	781b      	ldrb	r3, [r3, #0]
}
 800b22c:	0018      	movs	r0, r3
 800b22e:	46bd      	mov	sp, r7
 800b230:	b007      	add	sp, #28
 800b232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b234:	00000736 	.word	0x00000736

0800b238 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af02      	add	r7, sp, #8
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	0008      	movs	r0, r1
 800b242:	0011      	movs	r1, r2
 800b244:	1cfb      	adds	r3, r7, #3
 800b246:	1c02      	adds	r2, r0, #0
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	1cbb      	adds	r3, r7, #2
 800b24c:	1c0a      	adds	r2, r1, #0
 800b24e:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = {
 800b250:	210c      	movs	r1, #12
 800b252:	187b      	adds	r3, r7, r1
 800b254:	228f      	movs	r2, #143	@ 0x8f
 800b256:	701a      	strb	r2, [r3, #0]
 800b258:	187b      	adds	r3, r7, r1
 800b25a:	1cfa      	adds	r2, r7, #3
 800b25c:	7812      	ldrb	r2, [r2, #0]
 800b25e:	705a      	strb	r2, [r3, #1]
 800b260:	187b      	adds	r3, r7, r1
 800b262:	1cba      	adds	r2, r7, #2
 800b264:	7812      	ldrb	r2, [r2, #0]
 800b266:	709a      	strb	r2, [r3, #2]
        SX126X_SET_BUFFER_BASE_ADDRESS,
        tx_base_address,
        rx_base_address,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800b268:	1879      	adds	r1, r7, r1
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	2300      	movs	r3, #0
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	2300      	movs	r3, #0
 800b272:	2203      	movs	r2, #3
 800b274:	f000 f914 	bl	800b4a0 <sx126x_hal_write>
 800b278:	0003      	movs	r3, r0
}
 800b27a:	0018      	movs	r0, r3
 800b27c:	46bd      	mov	sp, r7
 800b27e:	b004      	add	sp, #16
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <sx126x_get_status>:
//
// Communication Status Information
//

sx126x_status_t sx126x_get_status( const void* context, sx126x_chip_status_t* radio_status )
{
 800b284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b286:	b087      	sub	sp, #28
 800b288:	af02      	add	r7, sp, #8
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_STATUS] = {
 800b28e:	210c      	movs	r1, #12
 800b290:	187b      	adds	r3, r7, r1
 800b292:	4a17      	ldr	r2, [pc, #92]	@ (800b2f0 <sx126x_get_status+0x6c>)
 800b294:	7812      	ldrb	r2, [r2, #0]
 800b296:	701a      	strb	r2, [r3, #0]
        SX126X_GET_STATUS,
    };
    uint8_t status_local = 0;
 800b298:	250b      	movs	r5, #11
 800b29a:	197b      	adds	r3, r7, r5
 800b29c:	2200      	movs	r2, #0
 800b29e:	701a      	strb	r2, [r3, #0]

    const sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_STATUS, &status_local, 1 );
 800b2a0:	260f      	movs	r6, #15
 800b2a2:	19bc      	adds	r4, r7, r6
 800b2a4:	197b      	adds	r3, r7, r5
 800b2a6:	1879      	adds	r1, r7, r1
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	9200      	str	r2, [sp, #0]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f000 f93c 	bl	800b52c <sx126x_hal_read>
 800b2b4:	0003      	movs	r3, r0
 800b2b6:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 800b2b8:	19bb      	adds	r3, r7, r6
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10f      	bne.n	800b2e0 <sx126x_get_status+0x5c>
    {
        radio_status->cmd_status =
            ( sx126x_cmd_status_t )( ( status_local & SX126X_CMD_STATUS_MASK ) >> SX126X_CMD_STATUS_POS );
 800b2c0:	197b      	adds	r3, r7, r5
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	085b      	lsrs	r3, r3, #1
 800b2c6:	2207      	movs	r2, #7
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	b2da      	uxtb	r2, r3
        radio_status->cmd_status =
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	701a      	strb	r2, [r3, #0]
        radio_status->chip_mode =
            ( sx126x_chip_modes_t )( ( status_local & SX126X_CHIP_MODES_MASK ) >> SX126X_CHIP_MODES_POS );
 800b2d0:	197b      	adds	r3, r7, r5
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	091b      	lsrs	r3, r3, #4
 800b2d6:	2207      	movs	r2, #7
 800b2d8:	4013      	ands	r3, r2
 800b2da:	b2da      	uxtb	r2, r3
        radio_status->chip_mode =
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	705a      	strb	r2, [r3, #1]
    }

    return status;
 800b2e0:	230f      	movs	r3, #15
 800b2e2:	18fb      	adds	r3, r7, r3
 800b2e4:	781b      	ldrb	r3, [r3, #0]
}
 800b2e6:	0018      	movs	r0, r3
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	b005      	add	sp, #20
 800b2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ee:	46c0      	nop			@ (mov r8, r8)
 800b2f0:	080162c4 	.word	0x080162c4

0800b2f4 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800b2f4:	b590      	push	{r4, r7, lr}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4911      	ldr	r1, [pc, #68]	@ (800b344 <sx126x_convert_freq_in_hz_to_pll_step+0x50>)
 800b300:	0018      	movs	r0, r3
 800b302:	f7f4 ff25 	bl	8000150 <__udivsi3>
 800b306:	0003      	movs	r3, r0
 800b308:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800b30a:	68f9      	ldr	r1, [r7, #12]
 800b30c:	000b      	movs	r3, r1
 800b30e:	015b      	lsls	r3, r3, #5
 800b310:	1a5b      	subs	r3, r3, r1
 800b312:	019a      	lsls	r2, r3, #6
 800b314:	1ad2      	subs	r2, r2, r3
 800b316:	00d2      	lsls	r2, r2, #3
 800b318:	1853      	adds	r3, r2, r1
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	039c      	lsls	r4, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	039b      	lsls	r3, r3, #14
 800b328:	4a07      	ldr	r2, [pc, #28]	@ (800b348 <sx126x_convert_freq_in_hz_to_pll_step+0x54>)
 800b32a:	4694      	mov	ip, r2
 800b32c:	4463      	add	r3, ip
 800b32e:	4905      	ldr	r1, [pc, #20]	@ (800b344 <sx126x_convert_freq_in_hz_to_pll_step+0x50>)
 800b330:	0018      	movs	r0, r3
 800b332:	f7f4 ff0d 	bl	8000150 <__udivsi3>
 800b336:	0003      	movs	r3, r0
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800b338:	18e3      	adds	r3, r4, r3
             SX126X_PLL_STEP_SCALED );
}
 800b33a:	0018      	movs	r0, r3
 800b33c:	46bd      	mov	sp, r7
 800b33e:	b005      	add	sp, #20
 800b340:	bd90      	pop	{r4, r7, pc}
 800b342:	46c0      	nop			@ (mov r8, r8)
 800b344:	00003d09 	.word	0x00003d09
 800b348:	00001e84 	.word	0x00001e84

0800b34c <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	019b      	lsls	r3, r3, #6
}
 800b358:	0018      	movs	r0, r3
 800b35a:	46bd      	mov	sp, r7
 800b35c:	b002      	add	sp, #8
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800b360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	000a      	movs	r2, r1
 800b36a:	1cfb      	adds	r3, r7, #3
 800b36c:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[2] = { 0x00 };
 800b36e:	250c      	movs	r5, #12
 800b370:	197b      	adds	r3, r7, r5
 800b372:	2200      	movs	r2, #0
 800b374:	801a      	strh	r2, [r3, #0]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800b376:	260f      	movs	r6, #15
 800b378:	19bc      	adds	r4, r7, r6
 800b37a:	197a      	adds	r2, r7, r5
 800b37c:	23e8      	movs	r3, #232	@ 0xe8
 800b37e:	00d9      	lsls	r1, r3, #3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	2302      	movs	r3, #2
 800b384:	f7ff fd20 	bl	800adc8 <sx126x_read_register>
 800b388:	0003      	movs	r3, r0
 800b38a:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 800b38c:	0034      	movs	r4, r6
 800b38e:	193b      	adds	r3, r7, r4
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d128      	bne.n	800b3e8 <sx126x_set_lora_sync_word+0x88>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 800b396:	0028      	movs	r0, r5
 800b398:	183b      	adds	r3, r7, r0
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b25b      	sxtb	r3, r3
 800b39e:	220f      	movs	r2, #15
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	b25a      	sxtb	r2, r3
 800b3a4:	1cfb      	adds	r3, r7, #3
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	b25b      	sxtb	r3, r3
 800b3aa:	210f      	movs	r1, #15
 800b3ac:	438b      	bics	r3, r1
 800b3ae:	b25b      	sxtb	r3, r3
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	b25b      	sxtb	r3, r3
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	183b      	adds	r3, r7, r0
 800b3b8:	701a      	strb	r2, [r3, #0]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 800b3ba:	183b      	adds	r3, r7, r0
 800b3bc:	785b      	ldrb	r3, [r3, #1]
 800b3be:	220f      	movs	r2, #15
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	1cfb      	adds	r3, r7, #3
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	18d3      	adds	r3, r2, r3
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	183b      	adds	r3, r7, r0
 800b3d2:	705a      	strb	r2, [r3, #1]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800b3d4:	193c      	adds	r4, r7, r4
 800b3d6:	183a      	adds	r2, r7, r0
 800b3d8:	23e8      	movs	r3, #232	@ 0xe8
 800b3da:	00d9      	lsls	r1, r3, #3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	2302      	movs	r3, #2
 800b3e0:	f7ff fcc2 	bl	800ad68 <sx126x_write_register>
 800b3e4:	0003      	movs	r3, r0
 800b3e6:	7023      	strb	r3, [r4, #0]
    }

    return status;
 800b3e8:	230f      	movs	r3, #15
 800b3ea:	18fb      	adds	r3, r7, r3
 800b3ec:	781b      	ldrb	r3, [r3, #0]
}
 800b3ee:	0018      	movs	r0, r3
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	b005      	add	sp, #20
 800b3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b3f8 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800b3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	0008      	movs	r0, r1
 800b402:	0011      	movs	r1, r2
 800b404:	1cfb      	adds	r3, r7, #3
 800b406:	1c02      	adds	r2, r0, #0
 800b408:	701a      	strb	r2, [r3, #0]
 800b40a:	1cbb      	adds	r3, r7, #2
 800b40c:	1c0a      	adds	r2, r1, #0
 800b40e:	701a      	strb	r2, [r3, #0]
    uint8_t reg_value = 0;
 800b410:	250e      	movs	r5, #14
 800b412:	197b      	adds	r3, r7, r5
 800b414:	2200      	movs	r2, #0
 800b416:	701a      	strb	r2, [r3, #0]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800b418:	260f      	movs	r6, #15
 800b41a:	19bc      	adds	r4, r7, r6
 800b41c:	197a      	adds	r2, r7, r5
 800b41e:	491f      	ldr	r1, [pc, #124]	@ (800b49c <sx126x_tx_modulation_workaround+0xa4>)
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	2301      	movs	r3, #1
 800b424:	f7ff fcd0 	bl	800adc8 <sx126x_read_register>
 800b428:	0003      	movs	r3, r0
 800b42a:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 800b42c:	19bb      	adds	r3, r7, r6
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d12b      	bne.n	800b48c <sx126x_tx_modulation_workaround+0x94>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800b434:	1cfb      	adds	r3, r7, #3
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d114      	bne.n	800b466 <sx126x_tx_modulation_workaround+0x6e>
        {
            if( bw == SX126X_LORA_BW_500 )
 800b43c:	1cbb      	adds	r3, r7, #2
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2b06      	cmp	r3, #6
 800b442:	d107      	bne.n	800b454 <sx126x_tx_modulation_workaround+0x5c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800b444:	197b      	adds	r3, r7, r5
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2204      	movs	r2, #4
 800b44a:	4393      	bics	r3, r2
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	197b      	adds	r3, r7, r5
 800b450:	701a      	strb	r2, [r3, #0]
 800b452:	e010      	b.n	800b476 <sx126x_tx_modulation_workaround+0x7e>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 800b454:	210e      	movs	r1, #14
 800b456:	187b      	adds	r3, r7, r1
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2204      	movs	r2, #4
 800b45c:	4313      	orrs	r3, r2
 800b45e:	b2da      	uxtb	r2, r3
 800b460:	187b      	adds	r3, r7, r1
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	e007      	b.n	800b476 <sx126x_tx_modulation_workaround+0x7e>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 800b466:	210e      	movs	r1, #14
 800b468:	187b      	adds	r3, r7, r1
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2204      	movs	r2, #4
 800b46e:	4313      	orrs	r3, r2
 800b470:	b2da      	uxtb	r2, r3
 800b472:	187b      	adds	r3, r7, r1
 800b474:	701a      	strb	r2, [r3, #0]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800b476:	230f      	movs	r3, #15
 800b478:	18fc      	adds	r4, r7, r3
 800b47a:	230e      	movs	r3, #14
 800b47c:	18fa      	adds	r2, r7, r3
 800b47e:	4907      	ldr	r1, [pc, #28]	@ (800b49c <sx126x_tx_modulation_workaround+0xa4>)
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	2301      	movs	r3, #1
 800b484:	f7ff fc70 	bl	800ad68 <sx126x_write_register>
 800b488:	0003      	movs	r3, r0
 800b48a:	7023      	strb	r3, [r4, #0]
    }
    return status;
 800b48c:	230f      	movs	r3, #15
 800b48e:	18fb      	adds	r3, r7, r3
 800b490:	781b      	ldrb	r3, [r3, #0]
}
 800b492:	0018      	movs	r0, r3
 800b494:	46bd      	mov	sp, r7
 800b496:	b005      	add	sp, #20
 800b498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b49a:	46c0      	nop			@ (mov r8, r8)
 800b49c:	00000889 	.word	0x00000889

0800b4a0 <sx126x_hal_write>:
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

sx126x_hal_status_t sx126x_hal_write(const void* context, const uint8_t* command, const uint16_t command_length,
                                     const uint8_t* data, const uint16_t data_length)
{
 800b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4a2:	b087      	sub	sp, #28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	603b      	str	r3, [r7, #0]
 800b4ac:	1dbb      	adds	r3, r7, #6
 800b4ae:	801a      	strh	r2, [r3, #0]
    (void)context; // Unused parameter
    
    sx126x_hal_spi_select();
 800b4b0:	f000 f8a4 	bl	800b5fc <sx126x_hal_spi_select>
    
    // Send command
    HAL_StatusTypeDef status = HAL_SPI_Transmit(hal_ctx.spi, (uint8_t*)command, command_length, 1000);
 800b4b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b528 <sx126x_hal_write+0x88>)
 800b4b6:	6818      	ldr	r0, [r3, #0]
 800b4b8:	2617      	movs	r6, #23
 800b4ba:	19bc      	adds	r4, r7, r6
 800b4bc:	23fa      	movs	r3, #250	@ 0xfa
 800b4be:	009d      	lsls	r5, r3, #2
 800b4c0:	1dbb      	adds	r3, r7, #6
 800b4c2:	881a      	ldrh	r2, [r3, #0]
 800b4c4:	68b9      	ldr	r1, [r7, #8]
 800b4c6:	002b      	movs	r3, r5
 800b4c8:	f002 fbb8 	bl	800dc3c <HAL_SPI_Transmit>
 800b4cc:	0003      	movs	r3, r0
 800b4ce:	7023      	strb	r3, [r4, #0]
    
    // Send data if present
    if ((status == HAL_OK) && (data != NULL) && (data_length > 0)) {
 800b4d0:	0032      	movs	r2, r6
 800b4d2:	18bb      	adds	r3, r7, r2
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d117      	bne.n	800b50a <sx126x_hal_write+0x6a>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d014      	beq.n	800b50a <sx126x_hal_write+0x6a>
 800b4e0:	2128      	movs	r1, #40	@ 0x28
 800b4e2:	2608      	movs	r6, #8
 800b4e4:	198b      	adds	r3, r1, r6
 800b4e6:	19db      	adds	r3, r3, r7
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00d      	beq.n	800b50a <sx126x_hal_write+0x6a>
        status = HAL_SPI_Transmit(hal_ctx.spi, (uint8_t*)data, data_length, 1000);
 800b4ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b528 <sx126x_hal_write+0x88>)
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	18bc      	adds	r4, r7, r2
 800b4f4:	23fa      	movs	r3, #250	@ 0xfa
 800b4f6:	009d      	lsls	r5, r3, #2
 800b4f8:	198b      	adds	r3, r1, r6
 800b4fa:	19db      	adds	r3, r3, r7
 800b4fc:	881a      	ldrh	r2, [r3, #0]
 800b4fe:	6839      	ldr	r1, [r7, #0]
 800b500:	002b      	movs	r3, r5
 800b502:	f002 fb9b 	bl	800dc3c <HAL_SPI_Transmit>
 800b506:	0003      	movs	r3, r0
 800b508:	7023      	strb	r3, [r4, #0]
    }
    
    sx126x_hal_spi_deselect();
 800b50a:	f000 f887 	bl	800b61c <sx126x_hal_spi_deselect>
    
    return (status == HAL_OK) ? SX126X_HAL_STATUS_OK : SX126X_HAL_STATUS_ERROR;
 800b50e:	2317      	movs	r3, #23
 800b510:	18fb      	adds	r3, r7, r3
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <sx126x_hal_write+0x7c>
 800b518:	2300      	movs	r3, #0
 800b51a:	e000      	b.n	800b51e <sx126x_hal_write+0x7e>
 800b51c:	2303      	movs	r3, #3
}
 800b51e:	0018      	movs	r0, r3
 800b520:	46bd      	mov	sp, r7
 800b522:	b007      	add	sp, #28
 800b524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b526:	46c0      	nop			@ (mov r8, r8)
 800b528:	2000000c 	.word	0x2000000c

0800b52c <sx126x_hal_read>:

sx126x_hal_status_t sx126x_hal_read(const void* context, const uint8_t* command, const uint16_t command_length,
                                    uint8_t* data, const uint16_t data_length)
{
 800b52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	603b      	str	r3, [r7, #0]
 800b538:	1dbb      	adds	r3, r7, #6
 800b53a:	801a      	strh	r2, [r3, #0]
    (void)context; // Unused parameter
    
    sx126x_hal_spi_select();
 800b53c:	f000 f85e 	bl	800b5fc <sx126x_hal_spi_select>
    
    // Send command
    HAL_StatusTypeDef status = HAL_SPI_Transmit(hal_ctx.spi, (uint8_t*)command, command_length, 1000);
 800b540:	4b1c      	ldr	r3, [pc, #112]	@ (800b5b4 <sx126x_hal_read+0x88>)
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	2617      	movs	r6, #23
 800b546:	19bc      	adds	r4, r7, r6
 800b548:	23fa      	movs	r3, #250	@ 0xfa
 800b54a:	009d      	lsls	r5, r3, #2
 800b54c:	1dbb      	adds	r3, r7, #6
 800b54e:	881a      	ldrh	r2, [r3, #0]
 800b550:	68b9      	ldr	r1, [r7, #8]
 800b552:	002b      	movs	r3, r5
 800b554:	f002 fb72 	bl	800dc3c <HAL_SPI_Transmit>
 800b558:	0003      	movs	r3, r0
 800b55a:	7023      	strb	r3, [r4, #0]
    
    // Receive data if present
    if ((status == HAL_OK) && (data != NULL) && (data_length > 0)) {
 800b55c:	0032      	movs	r2, r6
 800b55e:	18bb      	adds	r3, r7, r2
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d117      	bne.n	800b596 <sx126x_hal_read+0x6a>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d014      	beq.n	800b596 <sx126x_hal_read+0x6a>
 800b56c:	2128      	movs	r1, #40	@ 0x28
 800b56e:	2608      	movs	r6, #8
 800b570:	198b      	adds	r3, r1, r6
 800b572:	19db      	adds	r3, r3, r7
 800b574:	881b      	ldrh	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00d      	beq.n	800b596 <sx126x_hal_read+0x6a>
        status = HAL_SPI_Receive(hal_ctx.spi, data, data_length, 1000);
 800b57a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b4 <sx126x_hal_read+0x88>)
 800b57c:	6818      	ldr	r0, [r3, #0]
 800b57e:	18bc      	adds	r4, r7, r2
 800b580:	23fa      	movs	r3, #250	@ 0xfa
 800b582:	009d      	lsls	r5, r3, #2
 800b584:	198b      	adds	r3, r1, r6
 800b586:	19db      	adds	r3, r3, r7
 800b588:	881a      	ldrh	r2, [r3, #0]
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	002b      	movs	r3, r5
 800b58e:	f002 fcb5 	bl	800defc <HAL_SPI_Receive>
 800b592:	0003      	movs	r3, r0
 800b594:	7023      	strb	r3, [r4, #0]
    }
    
    sx126x_hal_spi_deselect();
 800b596:	f000 f841 	bl	800b61c <sx126x_hal_spi_deselect>
    
    return (status == HAL_OK) ? SX126X_HAL_STATUS_OK : SX126X_HAL_STATUS_ERROR;
 800b59a:	2317      	movs	r3, #23
 800b59c:	18fb      	adds	r3, r7, r3
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <sx126x_hal_read+0x7c>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	e000      	b.n	800b5aa <sx126x_hal_read+0x7e>
 800b5a8:	2303      	movs	r3, #3
}
 800b5aa:	0018      	movs	r0, r3
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	b007      	add	sp, #28
 800b5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5b2:	46c0      	nop			@ (mov r8, r8)
 800b5b4:	2000000c 	.word	0x2000000c

0800b5b8 <sx126x_hal_reset>:

sx126x_hal_status_t sx126x_hal_reset(const void* context)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
    (void)context; // Unused parameter
    
    // Reset the radio
    HAL_GPIO_WritePin(hal_ctx.reset_port, hal_ctx.reset_pin, GPIO_PIN_RESET);
 800b5c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b5f8 <sx126x_hal_reset+0x40>)
 800b5c2:	68d8      	ldr	r0, [r3, #12]
 800b5c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f8 <sx126x_hal_reset+0x40>)
 800b5c6:	8a1b      	ldrh	r3, [r3, #16]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	0019      	movs	r1, r3
 800b5cc:	f000 fbe6 	bl	800bd9c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800b5d0:	200a      	movs	r0, #10
 800b5d2:	f000 f9a7 	bl	800b924 <HAL_Delay>
    HAL_GPIO_WritePin(hal_ctx.reset_port, hal_ctx.reset_pin, GPIO_PIN_SET);
 800b5d6:	4b08      	ldr	r3, [pc, #32]	@ (800b5f8 <sx126x_hal_reset+0x40>)
 800b5d8:	68d8      	ldr	r0, [r3, #12]
 800b5da:	4b07      	ldr	r3, [pc, #28]	@ (800b5f8 <sx126x_hal_reset+0x40>)
 800b5dc:	8a1b      	ldrh	r3, [r3, #16]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	0019      	movs	r1, r3
 800b5e2:	f000 fbdb 	bl	800bd9c <HAL_GPIO_WritePin>
    HAL_Delay(100); // Wait for module to boot
 800b5e6:	2064      	movs	r0, #100	@ 0x64
 800b5e8:	f000 f99c 	bl	800b924 <HAL_Delay>
    
    return SX126X_HAL_STATUS_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	0018      	movs	r0, r3
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	b002      	add	sp, #8
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	46c0      	nop			@ (mov r8, r8)
 800b5f8:	2000000c 	.word	0x2000000c

0800b5fc <sx126x_hal_spi_select>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static void sx126x_hal_spi_select(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(hal_ctx.nss_port, hal_ctx.nss_pin, GPIO_PIN_RESET);
 800b600:	4b05      	ldr	r3, [pc, #20]	@ (800b618 <sx126x_hal_spi_select+0x1c>)
 800b602:	6858      	ldr	r0, [r3, #4]
 800b604:	4b04      	ldr	r3, [pc, #16]	@ (800b618 <sx126x_hal_spi_select+0x1c>)
 800b606:	891b      	ldrh	r3, [r3, #8]
 800b608:	2200      	movs	r2, #0
 800b60a:	0019      	movs	r1, r3
 800b60c:	f000 fbc6 	bl	800bd9c <HAL_GPIO_WritePin>
}
 800b610:	46c0      	nop			@ (mov r8, r8)
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	46c0      	nop			@ (mov r8, r8)
 800b618:	2000000c 	.word	0x2000000c

0800b61c <sx126x_hal_spi_deselect>:

static void sx126x_hal_spi_deselect(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(hal_ctx.nss_port, hal_ctx.nss_pin, GPIO_PIN_SET);
 800b620:	4b05      	ldr	r3, [pc, #20]	@ (800b638 <sx126x_hal_spi_deselect+0x1c>)
 800b622:	6858      	ldr	r0, [r3, #4]
 800b624:	4b04      	ldr	r3, [pc, #16]	@ (800b638 <sx126x_hal_spi_deselect+0x1c>)
 800b626:	891b      	ldrh	r3, [r3, #8]
 800b628:	2201      	movs	r2, #1
 800b62a:	0019      	movs	r1, r3
 800b62c:	f000 fbb6 	bl	800bd9c <HAL_GPIO_WritePin>
}
 800b630:	46c0      	nop			@ (mov r8, r8)
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	46c0      	nop			@ (mov r8, r8)
 800b638:	2000000c 	.word	0x2000000c

0800b63c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	af00      	add	r7, sp, #0
  return 1;
 800b640:	2301      	movs	r3, #1
}
 800b642:	0018      	movs	r0, r3
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <_kill>:

int _kill(int pid, int sig)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b652:	f005 fde3 	bl	801121c <__errno>
 800b656:	0003      	movs	r3, r0
 800b658:	2216      	movs	r2, #22
 800b65a:	601a      	str	r2, [r3, #0]
  return -1;
 800b65c:	2301      	movs	r3, #1
 800b65e:	425b      	negs	r3, r3
}
 800b660:	0018      	movs	r0, r3
 800b662:	46bd      	mov	sp, r7
 800b664:	b002      	add	sp, #8
 800b666:	bd80      	pop	{r7, pc}

0800b668 <_exit>:

void _exit (int status)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b670:	2301      	movs	r3, #1
 800b672:	425a      	negs	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	0011      	movs	r1, r2
 800b678:	0018      	movs	r0, r3
 800b67a:	f7ff ffe5 	bl	800b648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b67e:	46c0      	nop			@ (mov r8, r8)
 800b680:	e7fd      	b.n	800b67e <_exit+0x16>

0800b682 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b086      	sub	sp, #24
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b68e:	2300      	movs	r3, #0
 800b690:	617b      	str	r3, [r7, #20]
 800b692:	e00a      	b.n	800b6aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b694:	e000      	b.n	800b698 <_read+0x16>
 800b696:	bf00      	nop
 800b698:	0001      	movs	r1, r0
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	60ba      	str	r2, [r7, #8]
 800b6a0:	b2ca      	uxtb	r2, r1
 800b6a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	617b      	str	r3, [r7, #20]
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	dbf0      	blt.n	800b694 <_read+0x12>
  }

  return len;
 800b6b2:	687b      	ldr	r3, [r7, #4]
}
 800b6b4:	0018      	movs	r0, r3
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	b006      	add	sp, #24
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	e009      	b.n	800b6e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	1c5a      	adds	r2, r3, #1
 800b6d2:	60ba      	str	r2, [r7, #8]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	0018      	movs	r0, r3
 800b6d8:	e000      	b.n	800b6dc <_write+0x20>
 800b6da:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	dbf1      	blt.n	800b6ce <_write+0x12>
  }
  return len;
 800b6ea:	687b      	ldr	r3, [r7, #4]
}
 800b6ec:	0018      	movs	r0, r3
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	b006      	add	sp, #24
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <_close>:

int _close(int file)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	425b      	negs	r3, r3
}
 800b700:	0018      	movs	r0, r3
 800b702:	46bd      	mov	sp, r7
 800b704:	b002      	add	sp, #8
 800b706:	bd80      	pop	{r7, pc}

0800b708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	2280      	movs	r2, #128	@ 0x80
 800b716:	0192      	lsls	r2, r2, #6
 800b718:	605a      	str	r2, [r3, #4]
  return 0;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	0018      	movs	r0, r3
 800b71e:	46bd      	mov	sp, r7
 800b720:	b002      	add	sp, #8
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_isatty>:

int _isatty(int file)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b72c:	2301      	movs	r3, #1
}
 800b72e:	0018      	movs	r0, r3
 800b730:	46bd      	mov	sp, r7
 800b732:	b002      	add	sp, #8
 800b734:	bd80      	pop	{r7, pc}

0800b736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b742:	2300      	movs	r3, #0
}
 800b744:	0018      	movs	r0, r3
 800b746:	46bd      	mov	sp, r7
 800b748:	b004      	add	sp, #16
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b754:	4a14      	ldr	r2, [pc, #80]	@ (800b7a8 <_sbrk+0x5c>)
 800b756:	4b15      	ldr	r3, [pc, #84]	@ (800b7ac <_sbrk+0x60>)
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b760:	4b13      	ldr	r3, [pc, #76]	@ (800b7b0 <_sbrk+0x64>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d102      	bne.n	800b76e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b768:	4b11      	ldr	r3, [pc, #68]	@ (800b7b0 <_sbrk+0x64>)
 800b76a:	4a12      	ldr	r2, [pc, #72]	@ (800b7b4 <_sbrk+0x68>)
 800b76c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b76e:	4b10      	ldr	r3, [pc, #64]	@ (800b7b0 <_sbrk+0x64>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	18d3      	adds	r3, r2, r3
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d207      	bcs.n	800b78c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b77c:	f005 fd4e 	bl	801121c <__errno>
 800b780:	0003      	movs	r3, r0
 800b782:	220c      	movs	r2, #12
 800b784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b786:	2301      	movs	r3, #1
 800b788:	425b      	negs	r3, r3
 800b78a:	e009      	b.n	800b7a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b78c:	4b08      	ldr	r3, [pc, #32]	@ (800b7b0 <_sbrk+0x64>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b792:	4b07      	ldr	r3, [pc, #28]	@ (800b7b0 <_sbrk+0x64>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	18d2      	adds	r2, r2, r3
 800b79a:	4b05      	ldr	r3, [pc, #20]	@ (800b7b0 <_sbrk+0x64>)
 800b79c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800b79e:	68fb      	ldr	r3, [r7, #12]
}
 800b7a0:	0018      	movs	r0, r3
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	b006      	add	sp, #24
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20009000 	.word	0x20009000
 800b7ac:	00000400 	.word	0x00000400
 800b7b0:	200004c8 	.word	0x200004c8
 800b7b4:	20000620 	.word	0x20000620

0800b7b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b7bc:	46c0      	nop			@ (mov r8, r8)
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b7c4:	480d      	ldr	r0, [pc, #52]	@ (800b7fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800b7c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b7c8:	f7ff fff6 	bl	800b7b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b7cc:	480c      	ldr	r0, [pc, #48]	@ (800b800 <LoopForever+0x6>)
  ldr r1, =_edata
 800b7ce:	490d      	ldr	r1, [pc, #52]	@ (800b804 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b7d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b808 <LoopForever+0xe>)
  movs r3, #0
 800b7d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b7d4:	e002      	b.n	800b7dc <LoopCopyDataInit>

0800b7d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b7d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b7d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b7da:	3304      	adds	r3, #4

0800b7dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b7dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b7de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b7e0:	d3f9      	bcc.n	800b7d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b7e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b80c <LoopForever+0x12>)
  ldr r4, =_ebss
 800b7e4:	4c0a      	ldr	r4, [pc, #40]	@ (800b810 <LoopForever+0x16>)
  movs r3, #0
 800b7e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b7e8:	e001      	b.n	800b7ee <LoopFillZerobss>

0800b7ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b7ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b7ec:	3204      	adds	r2, #4

0800b7ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b7ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b7f0:	d3fb      	bcc.n	800b7ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800b7f2:	f005 fd19 	bl	8011228 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800b7f6:	f7fe fd1f 	bl	800a238 <main>

0800b7fa <LoopForever>:

LoopForever:
  b LoopForever
 800b7fa:	e7fe      	b.n	800b7fa <LoopForever>
  ldr   r0, =_estack
 800b7fc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800b800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b804:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800b808:	080168c4 	.word	0x080168c4
  ldr r2, =_sbss
 800b80c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800b810:	2000061c 	.word	0x2000061c

0800b814 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b814:	e7fe      	b.n	800b814 <ADC1_COMP_IRQHandler>
	...

0800b818 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b81e:	1dfb      	adds	r3, r7, #7
 800b820:	2200      	movs	r2, #0
 800b822:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b824:	4b0b      	ldr	r3, [pc, #44]	@ (800b854 <HAL_Init+0x3c>)
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	4b0a      	ldr	r3, [pc, #40]	@ (800b854 <HAL_Init+0x3c>)
 800b82a:	2180      	movs	r1, #128	@ 0x80
 800b82c:	0049      	lsls	r1, r1, #1
 800b82e:	430a      	orrs	r2, r1
 800b830:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b832:	2000      	movs	r0, #0
 800b834:	f000 f810 	bl	800b858 <HAL_InitTick>
 800b838:	1e03      	subs	r3, r0, #0
 800b83a:	d003      	beq.n	800b844 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800b83c:	1dfb      	adds	r3, r7, #7
 800b83e:	2201      	movs	r2, #1
 800b840:	701a      	strb	r2, [r3, #0]
 800b842:	e001      	b.n	800b848 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800b844:	f7ff f894 	bl	800a970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b848:	1dfb      	adds	r3, r7, #7
 800b84a:	781b      	ldrb	r3, [r3, #0]
}
 800b84c:	0018      	movs	r0, r3
 800b84e:	46bd      	mov	sp, r7
 800b850:	b002      	add	sp, #8
 800b852:	bd80      	pop	{r7, pc}
 800b854:	40022000 	.word	0x40022000

0800b858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b858:	b590      	push	{r4, r7, lr}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b860:	230f      	movs	r3, #15
 800b862:	18fb      	adds	r3, r7, r3
 800b864:	2200      	movs	r2, #0
 800b866:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800b868:	4b1d      	ldr	r3, [pc, #116]	@ (800b8e0 <HAL_InitTick+0x88>)
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d02b      	beq.n	800b8c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800b870:	4b1c      	ldr	r3, [pc, #112]	@ (800b8e4 <HAL_InitTick+0x8c>)
 800b872:	681c      	ldr	r4, [r3, #0]
 800b874:	4b1a      	ldr	r3, [pc, #104]	@ (800b8e0 <HAL_InitTick+0x88>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	0019      	movs	r1, r3
 800b87a:	23fa      	movs	r3, #250	@ 0xfa
 800b87c:	0098      	lsls	r0, r3, #2
 800b87e:	f7f4 fc67 	bl	8000150 <__udivsi3>
 800b882:	0003      	movs	r3, r0
 800b884:	0019      	movs	r1, r3
 800b886:	0020      	movs	r0, r4
 800b888:	f7f4 fc62 	bl	8000150 <__udivsi3>
 800b88c:	0003      	movs	r3, r0
 800b88e:	0018      	movs	r0, r3
 800b890:	f000 f913 	bl	800baba <HAL_SYSTICK_Config>
 800b894:	1e03      	subs	r3, r0, #0
 800b896:	d112      	bne.n	800b8be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	d80a      	bhi.n	800b8b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	425b      	negs	r3, r3
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	f000 f8f2 	bl	800ba90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b8ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b8e8 <HAL_InitTick+0x90>)
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	e00d      	b.n	800b8d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800b8b4:	230f      	movs	r3, #15
 800b8b6:	18fb      	adds	r3, r7, r3
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	701a      	strb	r2, [r3, #0]
 800b8bc:	e008      	b.n	800b8d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b8be:	230f      	movs	r3, #15
 800b8c0:	18fb      	adds	r3, r7, r3
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	701a      	strb	r2, [r3, #0]
 800b8c6:	e003      	b.n	800b8d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b8c8:	230f      	movs	r3, #15
 800b8ca:	18fb      	adds	r3, r7, r3
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800b8d0:	230f      	movs	r3, #15
 800b8d2:	18fb      	adds	r3, r7, r3
 800b8d4:	781b      	ldrb	r3, [r3, #0]
}
 800b8d6:	0018      	movs	r0, r3
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	b005      	add	sp, #20
 800b8dc:	bd90      	pop	{r4, r7, pc}
 800b8de:	46c0      	nop			@ (mov r8, r8)
 800b8e0:	20000028 	.word	0x20000028
 800b8e4:	20000020 	.word	0x20000020
 800b8e8:	20000024 	.word	0x20000024

0800b8ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b8f0:	4b05      	ldr	r3, [pc, #20]	@ (800b908 <HAL_IncTick+0x1c>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	001a      	movs	r2, r3
 800b8f6:	4b05      	ldr	r3, [pc, #20]	@ (800b90c <HAL_IncTick+0x20>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	18d2      	adds	r2, r2, r3
 800b8fc:	4b03      	ldr	r3, [pc, #12]	@ (800b90c <HAL_IncTick+0x20>)
 800b8fe:	601a      	str	r2, [r3, #0]
}
 800b900:	46c0      	nop			@ (mov r8, r8)
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	46c0      	nop			@ (mov r8, r8)
 800b908:	20000028 	.word	0x20000028
 800b90c:	200004cc 	.word	0x200004cc

0800b910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	af00      	add	r7, sp, #0
  return uwTick;
 800b914:	4b02      	ldr	r3, [pc, #8]	@ (800b920 <HAL_GetTick+0x10>)
 800b916:	681b      	ldr	r3, [r3, #0]
}
 800b918:	0018      	movs	r0, r3
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	46c0      	nop			@ (mov r8, r8)
 800b920:	200004cc 	.word	0x200004cc

0800b924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b92c:	f7ff fff0 	bl	800b910 <HAL_GetTick>
 800b930:	0003      	movs	r3, r0
 800b932:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	3301      	adds	r3, #1
 800b93c:	d005      	beq.n	800b94a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b93e:	4b0a      	ldr	r3, [pc, #40]	@ (800b968 <HAL_Delay+0x44>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	001a      	movs	r2, r3
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	189b      	adds	r3, r3, r2
 800b948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b94a:	46c0      	nop			@ (mov r8, r8)
 800b94c:	f7ff ffe0 	bl	800b910 <HAL_GetTick>
 800b950:	0002      	movs	r2, r0
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d8f7      	bhi.n	800b94c <HAL_Delay+0x28>
  {
  }
}
 800b95c:	46c0      	nop			@ (mov r8, r8)
 800b95e:	46c0      	nop			@ (mov r8, r8)
 800b960:	46bd      	mov	sp, r7
 800b962:	b004      	add	sp, #16
 800b964:	bd80      	pop	{r7, pc}
 800b966:	46c0      	nop			@ (mov r8, r8)
 800b968:	20000028 	.word	0x20000028

0800b96c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b96c:	b590      	push	{r4, r7, lr}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	0002      	movs	r2, r0
 800b974:	6039      	str	r1, [r7, #0]
 800b976:	1dfb      	adds	r3, r7, #7
 800b978:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b97a:	1dfb      	adds	r3, r7, #7
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b980:	d828      	bhi.n	800b9d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b982:	4a2f      	ldr	r2, [pc, #188]	@ (800ba40 <__NVIC_SetPriority+0xd4>)
 800b984:	1dfb      	adds	r3, r7, #7
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	b25b      	sxtb	r3, r3
 800b98a:	089b      	lsrs	r3, r3, #2
 800b98c:	33c0      	adds	r3, #192	@ 0xc0
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	589b      	ldr	r3, [r3, r2]
 800b992:	1dfa      	adds	r2, r7, #7
 800b994:	7812      	ldrb	r2, [r2, #0]
 800b996:	0011      	movs	r1, r2
 800b998:	2203      	movs	r2, #3
 800b99a:	400a      	ands	r2, r1
 800b99c:	00d2      	lsls	r2, r2, #3
 800b99e:	21ff      	movs	r1, #255	@ 0xff
 800b9a0:	4091      	lsls	r1, r2
 800b9a2:	000a      	movs	r2, r1
 800b9a4:	43d2      	mvns	r2, r2
 800b9a6:	401a      	ands	r2, r3
 800b9a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	019b      	lsls	r3, r3, #6
 800b9ae:	22ff      	movs	r2, #255	@ 0xff
 800b9b0:	401a      	ands	r2, r3
 800b9b2:	1dfb      	adds	r3, r7, #7
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	4003      	ands	r3, r0
 800b9bc:	00db      	lsls	r3, r3, #3
 800b9be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b9c0:	481f      	ldr	r0, [pc, #124]	@ (800ba40 <__NVIC_SetPriority+0xd4>)
 800b9c2:	1dfb      	adds	r3, r7, #7
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	b25b      	sxtb	r3, r3
 800b9c8:	089b      	lsrs	r3, r3, #2
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	33c0      	adds	r3, #192	@ 0xc0
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800b9d2:	e031      	b.n	800ba38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b9d4:	4a1b      	ldr	r2, [pc, #108]	@ (800ba44 <__NVIC_SetPriority+0xd8>)
 800b9d6:	1dfb      	adds	r3, r7, #7
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	0019      	movs	r1, r3
 800b9dc:	230f      	movs	r3, #15
 800b9de:	400b      	ands	r3, r1
 800b9e0:	3b08      	subs	r3, #8
 800b9e2:	089b      	lsrs	r3, r3, #2
 800b9e4:	3306      	adds	r3, #6
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	18d3      	adds	r3, r2, r3
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	1dfa      	adds	r2, r7, #7
 800b9f0:	7812      	ldrb	r2, [r2, #0]
 800b9f2:	0011      	movs	r1, r2
 800b9f4:	2203      	movs	r2, #3
 800b9f6:	400a      	ands	r2, r1
 800b9f8:	00d2      	lsls	r2, r2, #3
 800b9fa:	21ff      	movs	r1, #255	@ 0xff
 800b9fc:	4091      	lsls	r1, r2
 800b9fe:	000a      	movs	r2, r1
 800ba00:	43d2      	mvns	r2, r2
 800ba02:	401a      	ands	r2, r3
 800ba04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	019b      	lsls	r3, r3, #6
 800ba0a:	22ff      	movs	r2, #255	@ 0xff
 800ba0c:	401a      	ands	r2, r3
 800ba0e:	1dfb      	adds	r3, r7, #7
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	0018      	movs	r0, r3
 800ba14:	2303      	movs	r3, #3
 800ba16:	4003      	ands	r3, r0
 800ba18:	00db      	lsls	r3, r3, #3
 800ba1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ba1c:	4809      	ldr	r0, [pc, #36]	@ (800ba44 <__NVIC_SetPriority+0xd8>)
 800ba1e:	1dfb      	adds	r3, r7, #7
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	001c      	movs	r4, r3
 800ba24:	230f      	movs	r3, #15
 800ba26:	4023      	ands	r3, r4
 800ba28:	3b08      	subs	r3, #8
 800ba2a:	089b      	lsrs	r3, r3, #2
 800ba2c:	430a      	orrs	r2, r1
 800ba2e:	3306      	adds	r3, #6
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	18c3      	adds	r3, r0, r3
 800ba34:	3304      	adds	r3, #4
 800ba36:	601a      	str	r2, [r3, #0]
}
 800ba38:	46c0      	nop			@ (mov r8, r8)
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	b003      	add	sp, #12
 800ba3e:	bd90      	pop	{r4, r7, pc}
 800ba40:	e000e100 	.word	0xe000e100
 800ba44:	e000ed00 	.word	0xe000ed00

0800ba48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	1e5a      	subs	r2, r3, #1
 800ba54:	2380      	movs	r3, #128	@ 0x80
 800ba56:	045b      	lsls	r3, r3, #17
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d301      	bcc.n	800ba60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e010      	b.n	800ba82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ba60:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <SysTick_Config+0x44>)
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	3a01      	subs	r2, #1
 800ba66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ba68:	2301      	movs	r3, #1
 800ba6a:	425b      	negs	r3, r3
 800ba6c:	2103      	movs	r1, #3
 800ba6e:	0018      	movs	r0, r3
 800ba70:	f7ff ff7c 	bl	800b96c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ba74:	4b05      	ldr	r3, [pc, #20]	@ (800ba8c <SysTick_Config+0x44>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ba7a:	4b04      	ldr	r3, [pc, #16]	@ (800ba8c <SysTick_Config+0x44>)
 800ba7c:	2207      	movs	r2, #7
 800ba7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	0018      	movs	r0, r3
 800ba84:	46bd      	mov	sp, r7
 800ba86:	b002      	add	sp, #8
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	46c0      	nop			@ (mov r8, r8)
 800ba8c:	e000e010 	.word	0xe000e010

0800ba90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60b9      	str	r1, [r7, #8]
 800ba98:	607a      	str	r2, [r7, #4]
 800ba9a:	210f      	movs	r1, #15
 800ba9c:	187b      	adds	r3, r7, r1
 800ba9e:	1c02      	adds	r2, r0, #0
 800baa0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	187b      	adds	r3, r7, r1
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	b25b      	sxtb	r3, r3
 800baaa:	0011      	movs	r1, r2
 800baac:	0018      	movs	r0, r3
 800baae:	f7ff ff5d 	bl	800b96c <__NVIC_SetPriority>
}
 800bab2:	46c0      	nop			@ (mov r8, r8)
 800bab4:	46bd      	mov	sp, r7
 800bab6:	b004      	add	sp, #16
 800bab8:	bd80      	pop	{r7, pc}

0800baba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b082      	sub	sp, #8
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	0018      	movs	r0, r3
 800bac6:	f7ff ffbf 	bl	800ba48 <SysTick_Config>
 800baca:	0003      	movs	r3, r0
}
 800bacc:	0018      	movs	r0, r3
 800bace:	46bd      	mov	sp, r7
 800bad0:	b002      	add	sp, #8
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bade:	2300      	movs	r3, #0
 800bae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bae2:	e147      	b.n	800bd74 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2101      	movs	r1, #1
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	4091      	lsls	r1, r2
 800baee:	000a      	movs	r2, r1
 800baf0:	4013      	ands	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d100      	bne.n	800bafc <HAL_GPIO_Init+0x28>
 800bafa:	e138      	b.n	800bd6e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	2203      	movs	r2, #3
 800bb02:	4013      	ands	r3, r2
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d005      	beq.n	800bb14 <HAL_GPIO_Init+0x40>
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	2203      	movs	r2, #3
 800bb0e:	4013      	ands	r3, r2
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d130      	bne.n	800bb76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	2203      	movs	r2, #3
 800bb20:	409a      	lsls	r2, r3
 800bb22:	0013      	movs	r3, r2
 800bb24:	43da      	mvns	r2, r3
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	4013      	ands	r3, r2
 800bb2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	68da      	ldr	r2, [r3, #12]
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	409a      	lsls	r2, r3
 800bb36:	0013      	movs	r3, r2
 800bb38:	693a      	ldr	r2, [r7, #16]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	409a      	lsls	r2, r3
 800bb50:	0013      	movs	r3, r2
 800bb52:	43da      	mvns	r2, r3
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	4013      	ands	r3, r2
 800bb58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	091b      	lsrs	r3, r3, #4
 800bb60:	2201      	movs	r2, #1
 800bb62:	401a      	ands	r2, r3
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	409a      	lsls	r2, r3
 800bb68:	0013      	movs	r3, r2
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d017      	beq.n	800bbb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	005b      	lsls	r3, r3, #1
 800bb8c:	2203      	movs	r2, #3
 800bb8e:	409a      	lsls	r2, r3
 800bb90:	0013      	movs	r3, r2
 800bb92:	43da      	mvns	r2, r3
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	4013      	ands	r3, r2
 800bb98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	689a      	ldr	r2, [r3, #8]
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	005b      	lsls	r3, r3, #1
 800bba2:	409a      	lsls	r2, r3
 800bba4:	0013      	movs	r3, r2
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	693a      	ldr	r2, [r7, #16]
 800bbb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	2203      	movs	r2, #3
 800bbb8:	4013      	ands	r3, r2
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d123      	bne.n	800bc06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	08da      	lsrs	r2, r3, #3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3208      	adds	r2, #8
 800bbc6:	0092      	lsls	r2, r2, #2
 800bbc8:	58d3      	ldr	r3, [r2, r3]
 800bbca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	2207      	movs	r2, #7
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	220f      	movs	r2, #15
 800bbd6:	409a      	lsls	r2, r3
 800bbd8:	0013      	movs	r3, r2
 800bbda:	43da      	mvns	r2, r3
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	4013      	ands	r3, r2
 800bbe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	691a      	ldr	r2, [r3, #16]
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2107      	movs	r1, #7
 800bbea:	400b      	ands	r3, r1
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	409a      	lsls	r2, r3
 800bbf0:	0013      	movs	r3, r2
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	08da      	lsrs	r2, r3, #3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3208      	adds	r2, #8
 800bc00:	0092      	lsls	r2, r2, #2
 800bc02:	6939      	ldr	r1, [r7, #16]
 800bc04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	005b      	lsls	r3, r3, #1
 800bc10:	2203      	movs	r2, #3
 800bc12:	409a      	lsls	r2, r3
 800bc14:	0013      	movs	r3, r2
 800bc16:	43da      	mvns	r2, r3
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	2203      	movs	r2, #3
 800bc24:	401a      	ands	r2, r3
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	409a      	lsls	r2, r3
 800bc2c:	0013      	movs	r3, r2
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	23c0      	movs	r3, #192	@ 0xc0
 800bc40:	029b      	lsls	r3, r3, #10
 800bc42:	4013      	ands	r3, r2
 800bc44:	d100      	bne.n	800bc48 <HAL_GPIO_Init+0x174>
 800bc46:	e092      	b.n	800bd6e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800bc48:	4a50      	ldr	r2, [pc, #320]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	089b      	lsrs	r3, r3, #2
 800bc4e:	3318      	adds	r3, #24
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	589b      	ldr	r3, [r3, r2]
 800bc54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2203      	movs	r2, #3
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	00db      	lsls	r3, r3, #3
 800bc5e:	220f      	movs	r2, #15
 800bc60:	409a      	lsls	r2, r3
 800bc62:	0013      	movs	r3, r2
 800bc64:	43da      	mvns	r2, r3
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	4013      	ands	r3, r2
 800bc6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	23a0      	movs	r3, #160	@ 0xa0
 800bc70:	05db      	lsls	r3, r3, #23
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d013      	beq.n	800bc9e <HAL_GPIO_Init+0x1ca>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4a45      	ldr	r2, [pc, #276]	@ (800bd90 <HAL_GPIO_Init+0x2bc>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d00d      	beq.n	800bc9a <HAL_GPIO_Init+0x1c6>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4a44      	ldr	r2, [pc, #272]	@ (800bd94 <HAL_GPIO_Init+0x2c0>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d007      	beq.n	800bc96 <HAL_GPIO_Init+0x1c2>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4a43      	ldr	r2, [pc, #268]	@ (800bd98 <HAL_GPIO_Init+0x2c4>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d101      	bne.n	800bc92 <HAL_GPIO_Init+0x1be>
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e006      	b.n	800bca0 <HAL_GPIO_Init+0x1cc>
 800bc92:	2305      	movs	r3, #5
 800bc94:	e004      	b.n	800bca0 <HAL_GPIO_Init+0x1cc>
 800bc96:	2302      	movs	r3, #2
 800bc98:	e002      	b.n	800bca0 <HAL_GPIO_Init+0x1cc>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e000      	b.n	800bca0 <HAL_GPIO_Init+0x1cc>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	2103      	movs	r1, #3
 800bca4:	400a      	ands	r2, r1
 800bca6:	00d2      	lsls	r2, r2, #3
 800bca8:	4093      	lsls	r3, r2
 800bcaa:	693a      	ldr	r2, [r7, #16]
 800bcac:	4313      	orrs	r3, r2
 800bcae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800bcb0:	4936      	ldr	r1, [pc, #216]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	089b      	lsrs	r3, r3, #2
 800bcb6:	3318      	adds	r3, #24
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bcbe:	4b33      	ldr	r3, [pc, #204]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	43da      	mvns	r2, r3
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	4013      	ands	r3, r2
 800bccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	2380      	movs	r3, #128	@ 0x80
 800bcd4:	035b      	lsls	r3, r3, #13
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	d003      	beq.n	800bce2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bce2:	4b2a      	ldr	r3, [pc, #168]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800bce8:	4b28      	ldr	r3, [pc, #160]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	43da      	mvns	r2, r3
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	2380      	movs	r3, #128	@ 0x80
 800bcfe:	039b      	lsls	r3, r3, #14
 800bd00:	4013      	ands	r3, r2
 800bd02:	d003      	beq.n	800bd0c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bd0c:	4b1f      	ldr	r3, [pc, #124]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800bd12:	4a1e      	ldr	r2, [pc, #120]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bd14:	2384      	movs	r3, #132	@ 0x84
 800bd16:	58d3      	ldr	r3, [r2, r3]
 800bd18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	43da      	mvns	r2, r3
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	4013      	ands	r3, r2
 800bd22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	2380      	movs	r3, #128	@ 0x80
 800bd2a:	029b      	lsls	r3, r3, #10
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	d003      	beq.n	800bd38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bd38:	4914      	ldr	r1, [pc, #80]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bd3a:	2284      	movs	r2, #132	@ 0x84
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800bd40:	4a12      	ldr	r2, [pc, #72]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bd42:	2380      	movs	r3, #128	@ 0x80
 800bd44:	58d3      	ldr	r3, [r2, r3]
 800bd46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	43da      	mvns	r2, r3
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	4013      	ands	r3, r2
 800bd50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	2380      	movs	r3, #128	@ 0x80
 800bd58:	025b      	lsls	r3, r3, #9
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	d003      	beq.n	800bd66 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bd66:	4909      	ldr	r1, [pc, #36]	@ (800bd8c <HAL_GPIO_Init+0x2b8>)
 800bd68:	2280      	movs	r2, #128	@ 0x80
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	3301      	adds	r3, #1
 800bd72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	40da      	lsrs	r2, r3
 800bd7c:	1e13      	subs	r3, r2, #0
 800bd7e:	d000      	beq.n	800bd82 <HAL_GPIO_Init+0x2ae>
 800bd80:	e6b0      	b.n	800bae4 <HAL_GPIO_Init+0x10>
  }
}
 800bd82:	46c0      	nop			@ (mov r8, r8)
 800bd84:	46c0      	nop			@ (mov r8, r8)
 800bd86:	46bd      	mov	sp, r7
 800bd88:	b006      	add	sp, #24
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	40021800 	.word	0x40021800
 800bd90:	50000400 	.word	0x50000400
 800bd94:	50000800 	.word	0x50000800
 800bd98:	50000c00 	.word	0x50000c00

0800bd9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	0008      	movs	r0, r1
 800bda6:	0011      	movs	r1, r2
 800bda8:	1cbb      	adds	r3, r7, #2
 800bdaa:	1c02      	adds	r2, r0, #0
 800bdac:	801a      	strh	r2, [r3, #0]
 800bdae:	1c7b      	adds	r3, r7, #1
 800bdb0:	1c0a      	adds	r2, r1, #0
 800bdb2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bdb4:	1c7b      	adds	r3, r7, #1
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d004      	beq.n	800bdc6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bdbc:	1cbb      	adds	r3, r7, #2
 800bdbe:	881a      	ldrh	r2, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bdc4:	e003      	b.n	800bdce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bdc6:	1cbb      	adds	r3, r7, #2
 800bdc8:	881a      	ldrh	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800bdce:	46c0      	nop			@ (mov r8, r8)
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	b002      	add	sp, #8
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b084      	sub	sp, #16
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	000a      	movs	r2, r1
 800bde0:	1cbb      	adds	r3, r7, #2
 800bde2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bdea:	1cbb      	adds	r3, r7, #2
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	041a      	lsls	r2, r3, #16
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	43db      	mvns	r3, r3
 800bdf8:	1cb9      	adds	r1, r7, #2
 800bdfa:	8809      	ldrh	r1, [r1, #0]
 800bdfc:	400b      	ands	r3, r1
 800bdfe:	431a      	orrs	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	619a      	str	r2, [r3, #24]
}
 800be04:	46c0      	nop			@ (mov r8, r8)
 800be06:	46bd      	mov	sp, r7
 800be08:	b004      	add	sp, #16
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d101      	bne.n	800be1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e08f      	b.n	800bf3e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2241      	movs	r2, #65	@ 0x41
 800be22:	5c9b      	ldrb	r3, [r3, r2]
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d107      	bne.n	800be3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2240      	movs	r2, #64	@ 0x40
 800be2e:	2100      	movs	r1, #0
 800be30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	0018      	movs	r0, r3
 800be36:	f7fe fdbf 	bl	800a9b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2241      	movs	r2, #65	@ 0x41
 800be3e:	2124      	movs	r1, #36	@ 0x24
 800be40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2101      	movs	r1, #1
 800be4e:	438a      	bics	r2, r1
 800be50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	493b      	ldr	r1, [pc, #236]	@ (800bf48 <HAL_I2C_Init+0x13c>)
 800be5c:	400a      	ands	r2, r1
 800be5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	689a      	ldr	r2, [r3, #8]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4938      	ldr	r1, [pc, #224]	@ (800bf4c <HAL_I2C_Init+0x140>)
 800be6c:	400a      	ands	r2, r1
 800be6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d108      	bne.n	800be8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	689a      	ldr	r2, [r3, #8]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2180      	movs	r1, #128	@ 0x80
 800be82:	0209      	lsls	r1, r1, #8
 800be84:	430a      	orrs	r2, r1
 800be86:	609a      	str	r2, [r3, #8]
 800be88:	e007      	b.n	800be9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	689a      	ldr	r2, [r3, #8]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2184      	movs	r1, #132	@ 0x84
 800be94:	0209      	lsls	r1, r1, #8
 800be96:	430a      	orrs	r2, r1
 800be98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d109      	bne.n	800beb6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2180      	movs	r1, #128	@ 0x80
 800beae:	0109      	lsls	r1, r1, #4
 800beb0:	430a      	orrs	r2, r1
 800beb2:	605a      	str	r2, [r3, #4]
 800beb4:	e007      	b.n	800bec6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4923      	ldr	r1, [pc, #140]	@ (800bf50 <HAL_I2C_Init+0x144>)
 800bec2:	400a      	ands	r2, r1
 800bec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4920      	ldr	r1, [pc, #128]	@ (800bf54 <HAL_I2C_Init+0x148>)
 800bed2:	430a      	orrs	r2, r1
 800bed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68da      	ldr	r2, [r3, #12]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	491a      	ldr	r1, [pc, #104]	@ (800bf4c <HAL_I2C_Init+0x140>)
 800bee2:	400a      	ands	r2, r1
 800bee4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691a      	ldr	r2, [r3, #16]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	431a      	orrs	r2, r3
 800bef0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	699b      	ldr	r3, [r3, #24]
 800bef6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	430a      	orrs	r2, r1
 800befe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	69d9      	ldr	r1, [r3, #28]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1a      	ldr	r2, [r3, #32]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	430a      	orrs	r2, r1
 800bf0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2241      	movs	r2, #65	@ 0x41
 800bf2a:	2120      	movs	r1, #32
 800bf2c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2242      	movs	r2, #66	@ 0x42
 800bf38:	2100      	movs	r1, #0
 800bf3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	0018      	movs	r0, r3
 800bf40:	46bd      	mov	sp, r7
 800bf42:	b002      	add	sp, #8
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	46c0      	nop			@ (mov r8, r8)
 800bf48:	f0ffffff 	.word	0xf0ffffff
 800bf4c:	ffff7fff 	.word	0xffff7fff
 800bf50:	fffff7ff 	.word	0xfffff7ff
 800bf54:	02008000 	.word	0x02008000

0800bf58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf58:	b590      	push	{r4, r7, lr}
 800bf5a:	b089      	sub	sp, #36	@ 0x24
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	000c      	movs	r4, r1
 800bf62:	0010      	movs	r0, r2
 800bf64:	0019      	movs	r1, r3
 800bf66:	230a      	movs	r3, #10
 800bf68:	18fb      	adds	r3, r7, r3
 800bf6a:	1c22      	adds	r2, r4, #0
 800bf6c:	801a      	strh	r2, [r3, #0]
 800bf6e:	2308      	movs	r3, #8
 800bf70:	18fb      	adds	r3, r7, r3
 800bf72:	1c02      	adds	r2, r0, #0
 800bf74:	801a      	strh	r2, [r3, #0]
 800bf76:	1dbb      	adds	r3, r7, #6
 800bf78:	1c0a      	adds	r2, r1, #0
 800bf7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2241      	movs	r2, #65	@ 0x41
 800bf80:	5c9b      	ldrb	r3, [r3, r2]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b20      	cmp	r3, #32
 800bf86:	d000      	beq.n	800bf8a <HAL_I2C_Mem_Write+0x32>
 800bf88:	e10c      	b.n	800c1a4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d004      	beq.n	800bf9a <HAL_I2C_Mem_Write+0x42>
 800bf90:	232c      	movs	r3, #44	@ 0x2c
 800bf92:	18fb      	adds	r3, r7, r3
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d105      	bne.n	800bfa6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2280      	movs	r2, #128	@ 0x80
 800bf9e:	0092      	lsls	r2, r2, #2
 800bfa0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e0ff      	b.n	800c1a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2240      	movs	r2, #64	@ 0x40
 800bfaa:	5c9b      	ldrb	r3, [r3, r2]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d101      	bne.n	800bfb4 <HAL_I2C_Mem_Write+0x5c>
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e0f8      	b.n	800c1a6 <HAL_I2C_Mem_Write+0x24e>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2240      	movs	r2, #64	@ 0x40
 800bfb8:	2101      	movs	r1, #1
 800bfba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bfbc:	f7ff fca8 	bl	800b910 <HAL_GetTick>
 800bfc0:	0003      	movs	r3, r0
 800bfc2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bfc4:	2380      	movs	r3, #128	@ 0x80
 800bfc6:	0219      	lsls	r1, r3, #8
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	2319      	movs	r3, #25
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f000 fc07 	bl	800c7e4 <I2C_WaitOnFlagUntilTimeout>
 800bfd6:	1e03      	subs	r3, r0, #0
 800bfd8:	d001      	beq.n	800bfde <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e0e3      	b.n	800c1a6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2241      	movs	r2, #65	@ 0x41
 800bfe2:	2121      	movs	r1, #33	@ 0x21
 800bfe4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2242      	movs	r2, #66	@ 0x42
 800bfea:	2140      	movs	r1, #64	@ 0x40
 800bfec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bff8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	222c      	movs	r2, #44	@ 0x2c
 800bffe:	18ba      	adds	r2, r7, r2
 800c000:	8812      	ldrh	r2, [r2, #0]
 800c002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c00a:	1dbb      	adds	r3, r7, #6
 800c00c:	881c      	ldrh	r4, [r3, #0]
 800c00e:	2308      	movs	r3, #8
 800c010:	18fb      	adds	r3, r7, r3
 800c012:	881a      	ldrh	r2, [r3, #0]
 800c014:	230a      	movs	r3, #10
 800c016:	18fb      	adds	r3, r7, r3
 800c018:	8819      	ldrh	r1, [r3, #0]
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	9301      	str	r3, [sp, #4]
 800c020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	0023      	movs	r3, r4
 800c026:	f000 faf5 	bl	800c614 <I2C_RequestMemoryWrite>
 800c02a:	1e03      	subs	r3, r0, #0
 800c02c:	d005      	beq.n	800c03a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2240      	movs	r2, #64	@ 0x40
 800c032:	2100      	movs	r1, #0
 800c034:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	e0b5      	b.n	800c1a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c03e:	b29b      	uxth	r3, r3
 800c040:	2bff      	cmp	r3, #255	@ 0xff
 800c042:	d911      	bls.n	800c068 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	22ff      	movs	r2, #255	@ 0xff
 800c048:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	2380      	movs	r3, #128	@ 0x80
 800c052:	045c      	lsls	r4, r3, #17
 800c054:	230a      	movs	r3, #10
 800c056:	18fb      	adds	r3, r7, r3
 800c058:	8819      	ldrh	r1, [r3, #0]
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	2300      	movs	r3, #0
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	0023      	movs	r3, r4
 800c062:	f000 fd99 	bl	800cb98 <I2C_TransferConfig>
 800c066:	e012      	b.n	800c08e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c076:	b2da      	uxtb	r2, r3
 800c078:	2380      	movs	r3, #128	@ 0x80
 800c07a:	049c      	lsls	r4, r3, #18
 800c07c:	230a      	movs	r3, #10
 800c07e:	18fb      	adds	r3, r7, r3
 800c080:	8819      	ldrh	r1, [r3, #0]
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	2300      	movs	r3, #0
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	0023      	movs	r3, r4
 800c08a:	f000 fd85 	bl	800cb98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	0018      	movs	r0, r3
 800c096:	f000 fbfd 	bl	800c894 <I2C_WaitOnTXISFlagUntilTimeout>
 800c09a:	1e03      	subs	r3, r0, #0
 800c09c:	d001      	beq.n	800c0a2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e081      	b.n	800c1a6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a6:	781a      	ldrb	r2, [r3, #0]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b2:	1c5a      	adds	r2, r3, #1
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d03a      	beq.n	800c152 <HAL_I2C_Mem_Write+0x1fa>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d136      	bne.n	800c152 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c0e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	0013      	movs	r3, r2
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	2180      	movs	r1, #128	@ 0x80
 800c0f2:	f000 fb77 	bl	800c7e4 <I2C_WaitOnFlagUntilTimeout>
 800c0f6:	1e03      	subs	r3, r0, #0
 800c0f8:	d001      	beq.n	800c0fe <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e053      	b.n	800c1a6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c102:	b29b      	uxth	r3, r3
 800c104:	2bff      	cmp	r3, #255	@ 0xff
 800c106:	d911      	bls.n	800c12c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	22ff      	movs	r2, #255	@ 0xff
 800c10c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c112:	b2da      	uxtb	r2, r3
 800c114:	2380      	movs	r3, #128	@ 0x80
 800c116:	045c      	lsls	r4, r3, #17
 800c118:	230a      	movs	r3, #10
 800c11a:	18fb      	adds	r3, r7, r3
 800c11c:	8819      	ldrh	r1, [r3, #0]
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	2300      	movs	r3, #0
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	0023      	movs	r3, r4
 800c126:	f000 fd37 	bl	800cb98 <I2C_TransferConfig>
 800c12a:	e012      	b.n	800c152 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c130:	b29a      	uxth	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	2380      	movs	r3, #128	@ 0x80
 800c13e:	049c      	lsls	r4, r3, #18
 800c140:	230a      	movs	r3, #10
 800c142:	18fb      	adds	r3, r7, r3
 800c144:	8819      	ldrh	r1, [r3, #0]
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	2300      	movs	r3, #0
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	0023      	movs	r3, r4
 800c14e:	f000 fd23 	bl	800cb98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c156:	b29b      	uxth	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d198      	bne.n	800c08e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	0018      	movs	r0, r3
 800c164:	f000 fbdc 	bl	800c920 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c168:	1e03      	subs	r3, r0, #0
 800c16a:	d001      	beq.n	800c170 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e01a      	b.n	800c1a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2220      	movs	r2, #32
 800c176:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	490b      	ldr	r1, [pc, #44]	@ (800c1b0 <HAL_I2C_Mem_Write+0x258>)
 800c184:	400a      	ands	r2, r1
 800c186:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2241      	movs	r2, #65	@ 0x41
 800c18c:	2120      	movs	r1, #32
 800c18e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2242      	movs	r2, #66	@ 0x42
 800c194:	2100      	movs	r1, #0
 800c196:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2240      	movs	r2, #64	@ 0x40
 800c19c:	2100      	movs	r1, #0
 800c19e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e000      	b.n	800c1a6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800c1a4:	2302      	movs	r3, #2
  }
}
 800c1a6:	0018      	movs	r0, r3
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	b007      	add	sp, #28
 800c1ac:	bd90      	pop	{r4, r7, pc}
 800c1ae:	46c0      	nop			@ (mov r8, r8)
 800c1b0:	fe00e800 	.word	0xfe00e800

0800c1b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b089      	sub	sp, #36	@ 0x24
 800c1b8:	af02      	add	r7, sp, #8
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	000c      	movs	r4, r1
 800c1be:	0010      	movs	r0, r2
 800c1c0:	0019      	movs	r1, r3
 800c1c2:	230a      	movs	r3, #10
 800c1c4:	18fb      	adds	r3, r7, r3
 800c1c6:	1c22      	adds	r2, r4, #0
 800c1c8:	801a      	strh	r2, [r3, #0]
 800c1ca:	2308      	movs	r3, #8
 800c1cc:	18fb      	adds	r3, r7, r3
 800c1ce:	1c02      	adds	r2, r0, #0
 800c1d0:	801a      	strh	r2, [r3, #0]
 800c1d2:	1dbb      	adds	r3, r7, #6
 800c1d4:	1c0a      	adds	r2, r1, #0
 800c1d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2241      	movs	r2, #65	@ 0x41
 800c1dc:	5c9b      	ldrb	r3, [r3, r2]
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	2b20      	cmp	r3, #32
 800c1e2:	d000      	beq.n	800c1e6 <HAL_I2C_Mem_Read+0x32>
 800c1e4:	e110      	b.n	800c408 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d004      	beq.n	800c1f6 <HAL_I2C_Mem_Read+0x42>
 800c1ec:	232c      	movs	r3, #44	@ 0x2c
 800c1ee:	18fb      	adds	r3, r7, r3
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d105      	bne.n	800c202 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2280      	movs	r2, #128	@ 0x80
 800c1fa:	0092      	lsls	r2, r2, #2
 800c1fc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e103      	b.n	800c40a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2240      	movs	r2, #64	@ 0x40
 800c206:	5c9b      	ldrb	r3, [r3, r2]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d101      	bne.n	800c210 <HAL_I2C_Mem_Read+0x5c>
 800c20c:	2302      	movs	r3, #2
 800c20e:	e0fc      	b.n	800c40a <HAL_I2C_Mem_Read+0x256>
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2240      	movs	r2, #64	@ 0x40
 800c214:	2101      	movs	r1, #1
 800c216:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c218:	f7ff fb7a 	bl	800b910 <HAL_GetTick>
 800c21c:	0003      	movs	r3, r0
 800c21e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c220:	2380      	movs	r3, #128	@ 0x80
 800c222:	0219      	lsls	r1, r3, #8
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	2319      	movs	r3, #25
 800c22c:	2201      	movs	r2, #1
 800c22e:	f000 fad9 	bl	800c7e4 <I2C_WaitOnFlagUntilTimeout>
 800c232:	1e03      	subs	r3, r0, #0
 800c234:	d001      	beq.n	800c23a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e0e7      	b.n	800c40a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2241      	movs	r2, #65	@ 0x41
 800c23e:	2122      	movs	r1, #34	@ 0x22
 800c240:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2242      	movs	r2, #66	@ 0x42
 800c246:	2140      	movs	r1, #64	@ 0x40
 800c248:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c254:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	222c      	movs	r2, #44	@ 0x2c
 800c25a:	18ba      	adds	r2, r7, r2
 800c25c:	8812      	ldrh	r2, [r2, #0]
 800c25e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2200      	movs	r2, #0
 800c264:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c266:	1dbb      	adds	r3, r7, #6
 800c268:	881c      	ldrh	r4, [r3, #0]
 800c26a:	2308      	movs	r3, #8
 800c26c:	18fb      	adds	r3, r7, r3
 800c26e:	881a      	ldrh	r2, [r3, #0]
 800c270:	230a      	movs	r3, #10
 800c272:	18fb      	adds	r3, r7, r3
 800c274:	8819      	ldrh	r1, [r3, #0]
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	9301      	str	r3, [sp, #4]
 800c27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	0023      	movs	r3, r4
 800c282:	f000 fa2b 	bl	800c6dc <I2C_RequestMemoryRead>
 800c286:	1e03      	subs	r3, r0, #0
 800c288:	d005      	beq.n	800c296 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2240      	movs	r2, #64	@ 0x40
 800c28e:	2100      	movs	r1, #0
 800c290:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	e0b9      	b.n	800c40a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	2bff      	cmp	r3, #255	@ 0xff
 800c29e:	d911      	bls.n	800c2c4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	22ff      	movs	r2, #255	@ 0xff
 800c2a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	2380      	movs	r3, #128	@ 0x80
 800c2ae:	045c      	lsls	r4, r3, #17
 800c2b0:	230a      	movs	r3, #10
 800c2b2:	18fb      	adds	r3, r7, r3
 800c2b4:	8819      	ldrh	r1, [r3, #0]
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	4b56      	ldr	r3, [pc, #344]	@ (800c414 <HAL_I2C_Mem_Read+0x260>)
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	0023      	movs	r3, r4
 800c2be:	f000 fc6b 	bl	800cb98 <I2C_TransferConfig>
 800c2c2:	e012      	b.n	800c2ea <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	2380      	movs	r3, #128	@ 0x80
 800c2d6:	049c      	lsls	r4, r3, #18
 800c2d8:	230a      	movs	r3, #10
 800c2da:	18fb      	adds	r3, r7, r3
 800c2dc:	8819      	ldrh	r1, [r3, #0]
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	4b4c      	ldr	r3, [pc, #304]	@ (800c414 <HAL_I2C_Mem_Read+0x260>)
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	0023      	movs	r3, r4
 800c2e6:	f000 fc57 	bl	800cb98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	0013      	movs	r3, r2
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	2104      	movs	r1, #4
 800c2f8:	f000 fa74 	bl	800c7e4 <I2C_WaitOnFlagUntilTimeout>
 800c2fc:	1e03      	subs	r3, r0, #0
 800c2fe:	d001      	beq.n	800c304 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	e082      	b.n	800c40a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c30e:	b2d2      	uxtb	r2, r2
 800c310:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c316:	1c5a      	adds	r2, r3, #1
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c320:	3b01      	subs	r3, #1
 800c322:	b29a      	uxth	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	3b01      	subs	r3, #1
 800c330:	b29a      	uxth	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d03a      	beq.n	800c3b6 <HAL_I2C_Mem_Read+0x202>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c344:	2b00      	cmp	r3, #0
 800c346:	d136      	bne.n	800c3b6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	0013      	movs	r3, r2
 800c352:	2200      	movs	r2, #0
 800c354:	2180      	movs	r1, #128	@ 0x80
 800c356:	f000 fa45 	bl	800c7e4 <I2C_WaitOnFlagUntilTimeout>
 800c35a:	1e03      	subs	r3, r0, #0
 800c35c:	d001      	beq.n	800c362 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e053      	b.n	800c40a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c366:	b29b      	uxth	r3, r3
 800c368:	2bff      	cmp	r3, #255	@ 0xff
 800c36a:	d911      	bls.n	800c390 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	22ff      	movs	r2, #255	@ 0xff
 800c370:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c376:	b2da      	uxtb	r2, r3
 800c378:	2380      	movs	r3, #128	@ 0x80
 800c37a:	045c      	lsls	r4, r3, #17
 800c37c:	230a      	movs	r3, #10
 800c37e:	18fb      	adds	r3, r7, r3
 800c380:	8819      	ldrh	r1, [r3, #0]
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	2300      	movs	r3, #0
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	0023      	movs	r3, r4
 800c38a:	f000 fc05 	bl	800cb98 <I2C_TransferConfig>
 800c38e:	e012      	b.n	800c3b6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c394:	b29a      	uxth	r2, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	2380      	movs	r3, #128	@ 0x80
 800c3a2:	049c      	lsls	r4, r3, #18
 800c3a4:	230a      	movs	r3, #10
 800c3a6:	18fb      	adds	r3, r7, r3
 800c3a8:	8819      	ldrh	r1, [r3, #0]
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	0023      	movs	r3, r4
 800c3b2:	f000 fbf1 	bl	800cb98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d194      	bne.n	800c2ea <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	0018      	movs	r0, r3
 800c3c8:	f000 faaa 	bl	800c920 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c3cc:	1e03      	subs	r3, r0, #0
 800c3ce:	d001      	beq.n	800c3d4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e01a      	b.n	800c40a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2220      	movs	r2, #32
 800c3da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	490c      	ldr	r1, [pc, #48]	@ (800c418 <HAL_I2C_Mem_Read+0x264>)
 800c3e8:	400a      	ands	r2, r1
 800c3ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2241      	movs	r2, #65	@ 0x41
 800c3f0:	2120      	movs	r1, #32
 800c3f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2242      	movs	r2, #66	@ 0x42
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2240      	movs	r2, #64	@ 0x40
 800c400:	2100      	movs	r1, #0
 800c402:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	e000      	b.n	800c40a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800c408:	2302      	movs	r3, #2
  }
}
 800c40a:	0018      	movs	r0, r3
 800c40c:	46bd      	mov	sp, r7
 800c40e:	b007      	add	sp, #28
 800c410:	bd90      	pop	{r4, r7, pc}
 800c412:	46c0      	nop			@ (mov r8, r8)
 800c414:	80002400 	.word	0x80002400
 800c418:	fe00e800 	.word	0xfe00e800

0800c41c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08a      	sub	sp, #40	@ 0x28
 800c420:	af02      	add	r7, sp, #8
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	607a      	str	r2, [r7, #4]
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	230a      	movs	r3, #10
 800c42a:	18fb      	adds	r3, r7, r3
 800c42c:	1c0a      	adds	r2, r1, #0
 800c42e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800c430:	2300      	movs	r3, #0
 800c432:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2241      	movs	r2, #65	@ 0x41
 800c438:	5c9b      	ldrb	r3, [r3, r2]
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	d000      	beq.n	800c442 <HAL_I2C_IsDeviceReady+0x26>
 800c440:	e0df      	b.n	800c602 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	699a      	ldr	r2, [r3, #24]
 800c448:	2380      	movs	r3, #128	@ 0x80
 800c44a:	021b      	lsls	r3, r3, #8
 800c44c:	401a      	ands	r2, r3
 800c44e:	2380      	movs	r3, #128	@ 0x80
 800c450:	021b      	lsls	r3, r3, #8
 800c452:	429a      	cmp	r2, r3
 800c454:	d101      	bne.n	800c45a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800c456:	2302      	movs	r3, #2
 800c458:	e0d4      	b.n	800c604 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2240      	movs	r2, #64	@ 0x40
 800c45e:	5c9b      	ldrb	r3, [r3, r2]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d101      	bne.n	800c468 <HAL_I2C_IsDeviceReady+0x4c>
 800c464:	2302      	movs	r3, #2
 800c466:	e0cd      	b.n	800c604 <HAL_I2C_IsDeviceReady+0x1e8>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2240      	movs	r2, #64	@ 0x40
 800c46c:	2101      	movs	r1, #1
 800c46e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2241      	movs	r2, #65	@ 0x41
 800c474:	2124      	movs	r1, #36	@ 0x24
 800c476:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2200      	movs	r2, #0
 800c47c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d107      	bne.n	800c496 <HAL_I2C_IsDeviceReady+0x7a>
 800c486:	230a      	movs	r3, #10
 800c488:	18fb      	adds	r3, r7, r3
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	059b      	lsls	r3, r3, #22
 800c48e:	0d9b      	lsrs	r3, r3, #22
 800c490:	4a5e      	ldr	r2, [pc, #376]	@ (800c60c <HAL_I2C_IsDeviceReady+0x1f0>)
 800c492:	431a      	orrs	r2, r3
 800c494:	e006      	b.n	800c4a4 <HAL_I2C_IsDeviceReady+0x88>
 800c496:	230a      	movs	r3, #10
 800c498:	18fb      	adds	r3, r7, r3
 800c49a:	881b      	ldrh	r3, [r3, #0]
 800c49c:	059b      	lsls	r3, r3, #22
 800c49e:	0d9b      	lsrs	r3, r3, #22
 800c4a0:	4a5b      	ldr	r2, [pc, #364]	@ (800c610 <HAL_I2C_IsDeviceReady+0x1f4>)
 800c4a2:	431a      	orrs	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800c4aa:	f7ff fa31 	bl	800b910 <HAL_GetTick>
 800c4ae:	0003      	movs	r3, r0
 800c4b0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	2220      	movs	r2, #32
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	3b20      	subs	r3, #32
 800c4be:	425a      	negs	r2, r3
 800c4c0:	4153      	adcs	r3, r2
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	231f      	movs	r3, #31
 800c4c6:	18fb      	adds	r3, r7, r3
 800c4c8:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	2210      	movs	r2, #16
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	3b10      	subs	r3, #16
 800c4d6:	425a      	negs	r2, r3
 800c4d8:	4153      	adcs	r3, r2
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	231e      	movs	r3, #30
 800c4de:	18fb      	adds	r3, r7, r3
 800c4e0:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c4e2:	e035      	b.n	800c550 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	d01a      	beq.n	800c520 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c4ea:	f7ff fa11 	bl	800b910 <HAL_GetTick>
 800c4ee:	0002      	movs	r2, r0
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	683a      	ldr	r2, [r7, #0]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d302      	bcc.n	800c500 <HAL_I2C_IsDeviceReady+0xe4>
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10f      	bne.n	800c520 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2241      	movs	r2, #65	@ 0x41
 800c504:	2120      	movs	r1, #32
 800c506:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c50c:	2220      	movs	r2, #32
 800c50e:	431a      	orrs	r2, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2240      	movs	r2, #64	@ 0x40
 800c518:	2100      	movs	r1, #0
 800c51a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	e071      	b.n	800c604 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	699b      	ldr	r3, [r3, #24]
 800c526:	2220      	movs	r2, #32
 800c528:	4013      	ands	r3, r2
 800c52a:	3b20      	subs	r3, #32
 800c52c:	425a      	negs	r2, r3
 800c52e:	4153      	adcs	r3, r2
 800c530:	b2da      	uxtb	r2, r3
 800c532:	231f      	movs	r3, #31
 800c534:	18fb      	adds	r3, r7, r3
 800c536:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	2210      	movs	r2, #16
 800c540:	4013      	ands	r3, r2
 800c542:	3b10      	subs	r3, #16
 800c544:	425a      	negs	r2, r3
 800c546:	4153      	adcs	r3, r2
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	231e      	movs	r3, #30
 800c54c:	18fb      	adds	r3, r7, r3
 800c54e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c550:	231f      	movs	r3, #31
 800c552:	18fb      	adds	r3, r7, r3
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d104      	bne.n	800c564 <HAL_I2C_IsDeviceReady+0x148>
 800c55a:	231e      	movs	r3, #30
 800c55c:	18fb      	adds	r3, r7, r3
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d0bf      	beq.n	800c4e4 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	2210      	movs	r2, #16
 800c56c:	4013      	ands	r3, r2
 800c56e:	2b10      	cmp	r3, #16
 800c570:	d01a      	beq.n	800c5a8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	0013      	movs	r3, r2
 800c57c:	2200      	movs	r2, #0
 800c57e:	2120      	movs	r1, #32
 800c580:	f000 f930 	bl	800c7e4 <I2C_WaitOnFlagUntilTimeout>
 800c584:	1e03      	subs	r3, r0, #0
 800c586:	d001      	beq.n	800c58c <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e03b      	b.n	800c604 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2220      	movs	r2, #32
 800c592:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2241      	movs	r2, #65	@ 0x41
 800c598:	2120      	movs	r1, #32
 800c59a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2240      	movs	r2, #64	@ 0x40
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e02d      	b.n	800c604 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c5a8:	683a      	ldr	r2, [r7, #0]
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	0013      	movs	r3, r2
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	2120      	movs	r1, #32
 800c5b6:	f000 f915 	bl	800c7e4 <I2C_WaitOnFlagUntilTimeout>
 800c5ba:	1e03      	subs	r3, r0, #0
 800c5bc:	d001      	beq.n	800c5c2 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e020      	b.n	800c604 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2210      	movs	r2, #16
 800c5c8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d900      	bls.n	800c5e2 <HAL_I2C_IsDeviceReady+0x1c6>
 800c5e0:	e74d      	b.n	800c47e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2241      	movs	r2, #65	@ 0x41
 800c5e6:	2120      	movs	r1, #32
 800c5e8:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ee:	2220      	movs	r2, #32
 800c5f0:	431a      	orrs	r2, r3
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2240      	movs	r2, #64	@ 0x40
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
 800c600:	e000      	b.n	800c604 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800c602:	2302      	movs	r3, #2
  }
}
 800c604:	0018      	movs	r0, r3
 800c606:	46bd      	mov	sp, r7
 800c608:	b008      	add	sp, #32
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	02002000 	.word	0x02002000
 800c610:	02002800 	.word	0x02002800

0800c614 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c614:	b5b0      	push	{r4, r5, r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af02      	add	r7, sp, #8
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	000c      	movs	r4, r1
 800c61e:	0010      	movs	r0, r2
 800c620:	0019      	movs	r1, r3
 800c622:	250a      	movs	r5, #10
 800c624:	197b      	adds	r3, r7, r5
 800c626:	1c22      	adds	r2, r4, #0
 800c628:	801a      	strh	r2, [r3, #0]
 800c62a:	2308      	movs	r3, #8
 800c62c:	18fb      	adds	r3, r7, r3
 800c62e:	1c02      	adds	r2, r0, #0
 800c630:	801a      	strh	r2, [r3, #0]
 800c632:	1dbb      	adds	r3, r7, #6
 800c634:	1c0a      	adds	r2, r1, #0
 800c636:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c638:	1dbb      	adds	r3, r7, #6
 800c63a:	881b      	ldrh	r3, [r3, #0]
 800c63c:	b2da      	uxtb	r2, r3
 800c63e:	2380      	movs	r3, #128	@ 0x80
 800c640:	045c      	lsls	r4, r3, #17
 800c642:	197b      	adds	r3, r7, r5
 800c644:	8819      	ldrh	r1, [r3, #0]
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	4b23      	ldr	r3, [pc, #140]	@ (800c6d8 <I2C_RequestMemoryWrite+0xc4>)
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	0023      	movs	r3, r4
 800c64e:	f000 faa3 	bl	800cb98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c654:	6a39      	ldr	r1, [r7, #32]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	0018      	movs	r0, r3
 800c65a:	f000 f91b 	bl	800c894 <I2C_WaitOnTXISFlagUntilTimeout>
 800c65e:	1e03      	subs	r3, r0, #0
 800c660:	d001      	beq.n	800c666 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800c662:	2301      	movs	r3, #1
 800c664:	e033      	b.n	800c6ce <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c666:	1dbb      	adds	r3, r7, #6
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d107      	bne.n	800c67e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c66e:	2308      	movs	r3, #8
 800c670:	18fb      	adds	r3, r7, r3
 800c672:	881b      	ldrh	r3, [r3, #0]
 800c674:	b2da      	uxtb	r2, r3
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c67c:	e019      	b.n	800c6b2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c67e:	2308      	movs	r3, #8
 800c680:	18fb      	adds	r3, r7, r3
 800c682:	881b      	ldrh	r3, [r3, #0]
 800c684:	0a1b      	lsrs	r3, r3, #8
 800c686:	b29b      	uxth	r3, r3
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c692:	6a39      	ldr	r1, [r7, #32]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	0018      	movs	r0, r3
 800c698:	f000 f8fc 	bl	800c894 <I2C_WaitOnTXISFlagUntilTimeout>
 800c69c:	1e03      	subs	r3, r0, #0
 800c69e:	d001      	beq.n	800c6a4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e014      	b.n	800c6ce <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c6a4:	2308      	movs	r3, #8
 800c6a6:	18fb      	adds	r3, r7, r3
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c6b2:	6a3a      	ldr	r2, [r7, #32]
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	0013      	movs	r3, r2
 800c6bc:	2200      	movs	r2, #0
 800c6be:	2180      	movs	r1, #128	@ 0x80
 800c6c0:	f000 f890 	bl	800c7e4 <I2C_WaitOnFlagUntilTimeout>
 800c6c4:	1e03      	subs	r3, r0, #0
 800c6c6:	d001      	beq.n	800c6cc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e000      	b.n	800c6ce <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	b004      	add	sp, #16
 800c6d4:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d6:	46c0      	nop			@ (mov r8, r8)
 800c6d8:	80002000 	.word	0x80002000

0800c6dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c6dc:	b5b0      	push	{r4, r5, r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af02      	add	r7, sp, #8
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	000c      	movs	r4, r1
 800c6e6:	0010      	movs	r0, r2
 800c6e8:	0019      	movs	r1, r3
 800c6ea:	250a      	movs	r5, #10
 800c6ec:	197b      	adds	r3, r7, r5
 800c6ee:	1c22      	adds	r2, r4, #0
 800c6f0:	801a      	strh	r2, [r3, #0]
 800c6f2:	2308      	movs	r3, #8
 800c6f4:	18fb      	adds	r3, r7, r3
 800c6f6:	1c02      	adds	r2, r0, #0
 800c6f8:	801a      	strh	r2, [r3, #0]
 800c6fa:	1dbb      	adds	r3, r7, #6
 800c6fc:	1c0a      	adds	r2, r1, #0
 800c6fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c700:	1dbb      	adds	r3, r7, #6
 800c702:	881b      	ldrh	r3, [r3, #0]
 800c704:	b2da      	uxtb	r2, r3
 800c706:	197b      	adds	r3, r7, r5
 800c708:	8819      	ldrh	r1, [r3, #0]
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	4b23      	ldr	r3, [pc, #140]	@ (800c79c <I2C_RequestMemoryRead+0xc0>)
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	2300      	movs	r3, #0
 800c712:	f000 fa41 	bl	800cb98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c718:	6a39      	ldr	r1, [r7, #32]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	0018      	movs	r0, r3
 800c71e:	f000 f8b9 	bl	800c894 <I2C_WaitOnTXISFlagUntilTimeout>
 800c722:	1e03      	subs	r3, r0, #0
 800c724:	d001      	beq.n	800c72a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	e033      	b.n	800c792 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c72a:	1dbb      	adds	r3, r7, #6
 800c72c:	881b      	ldrh	r3, [r3, #0]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d107      	bne.n	800c742 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c732:	2308      	movs	r3, #8
 800c734:	18fb      	adds	r3, r7, r3
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c740:	e019      	b.n	800c776 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c742:	2308      	movs	r3, #8
 800c744:	18fb      	adds	r3, r7, r3
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	0a1b      	lsrs	r3, r3, #8
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c756:	6a39      	ldr	r1, [r7, #32]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	0018      	movs	r0, r3
 800c75c:	f000 f89a 	bl	800c894 <I2C_WaitOnTXISFlagUntilTimeout>
 800c760:	1e03      	subs	r3, r0, #0
 800c762:	d001      	beq.n	800c768 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	e014      	b.n	800c792 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c768:	2308      	movs	r3, #8
 800c76a:	18fb      	adds	r3, r7, r3
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c776:	6a3a      	ldr	r2, [r7, #32]
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	0013      	movs	r3, r2
 800c780:	2200      	movs	r2, #0
 800c782:	2140      	movs	r1, #64	@ 0x40
 800c784:	f000 f82e 	bl	800c7e4 <I2C_WaitOnFlagUntilTimeout>
 800c788:	1e03      	subs	r3, r0, #0
 800c78a:	d001      	beq.n	800c790 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e000      	b.n	800c792 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	0018      	movs	r0, r3
 800c794:	46bd      	mov	sp, r7
 800c796:	b004      	add	sp, #16
 800c798:	bdb0      	pop	{r4, r5, r7, pc}
 800c79a:	46c0      	nop			@ (mov r8, r8)
 800c79c:	80002000 	.word	0x80002000

0800c7a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	699b      	ldr	r3, [r3, #24]
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d103      	bne.n	800c7be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d007      	beq.n	800c7dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	699a      	ldr	r2, [r3, #24]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2101      	movs	r1, #1
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	619a      	str	r2, [r3, #24]
  }
}
 800c7dc:	46c0      	nop			@ (mov r8, r8)
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	b002      	add	sp, #8
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	1dfb      	adds	r3, r7, #7
 800c7f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c7f4:	e03a      	b.n	800c86c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7f6:	69ba      	ldr	r2, [r7, #24]
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	0018      	movs	r0, r3
 800c7fe:	f000 f8d3 	bl	800c9a8 <I2C_IsErrorOccurred>
 800c802:	1e03      	subs	r3, r0, #0
 800c804:	d001      	beq.n	800c80a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800c806:	2301      	movs	r3, #1
 800c808:	e040      	b.n	800c88c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	3301      	adds	r3, #1
 800c80e:	d02d      	beq.n	800c86c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c810:	f7ff f87e 	bl	800b910 <HAL_GetTick>
 800c814:	0002      	movs	r2, r0
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d302      	bcc.n	800c826 <I2C_WaitOnFlagUntilTimeout+0x42>
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d122      	bne.n	800c86c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	4013      	ands	r3, r2
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	425a      	negs	r2, r3
 800c836:	4153      	adcs	r3, r2
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	001a      	movs	r2, r3
 800c83c:	1dfb      	adds	r3, r7, #7
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	429a      	cmp	r2, r3
 800c842:	d113      	bne.n	800c86c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c848:	2220      	movs	r2, #32
 800c84a:	431a      	orrs	r2, r3
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2241      	movs	r2, #65	@ 0x41
 800c854:	2120      	movs	r1, #32
 800c856:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2242      	movs	r2, #66	@ 0x42
 800c85c:	2100      	movs	r1, #0
 800c85e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2240      	movs	r2, #64	@ 0x40
 800c864:	2100      	movs	r1, #0
 800c866:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e00f      	b.n	800c88c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	4013      	ands	r3, r2
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	425a      	negs	r2, r3
 800c87c:	4153      	adcs	r3, r2
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	001a      	movs	r2, r3
 800c882:	1dfb      	adds	r3, r7, #7
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	429a      	cmp	r2, r3
 800c888:	d0b5      	beq.n	800c7f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	0018      	movs	r0, r3
 800c88e:	46bd      	mov	sp, r7
 800c890:	b004      	add	sp, #16
 800c892:	bd80      	pop	{r7, pc}

0800c894 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c8a0:	e032      	b.n	800c908 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	68b9      	ldr	r1, [r7, #8]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	0018      	movs	r0, r3
 800c8aa:	f000 f87d 	bl	800c9a8 <I2C_IsErrorOccurred>
 800c8ae:	1e03      	subs	r3, r0, #0
 800c8b0:	d001      	beq.n	800c8b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e030      	b.n	800c918 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	d025      	beq.n	800c908 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8bc:	f7ff f828 	bl	800b910 <HAL_GetTick>
 800c8c0:	0002      	movs	r2, r0
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d302      	bcc.n	800c8d2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d11a      	bne.n	800c908 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	2202      	movs	r2, #2
 800c8da:	4013      	ands	r3, r2
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d013      	beq.n	800c908 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8e4:	2220      	movs	r2, #32
 800c8e6:	431a      	orrs	r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2241      	movs	r2, #65	@ 0x41
 800c8f0:	2120      	movs	r1, #32
 800c8f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2242      	movs	r2, #66	@ 0x42
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2240      	movs	r2, #64	@ 0x40
 800c900:	2100      	movs	r1, #0
 800c902:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e007      	b.n	800c918 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	2202      	movs	r2, #2
 800c910:	4013      	ands	r3, r2
 800c912:	2b02      	cmp	r3, #2
 800c914:	d1c5      	bne.n	800c8a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	0018      	movs	r0, r3
 800c91a:	46bd      	mov	sp, r7
 800c91c:	b004      	add	sp, #16
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c92c:	e02f      	b.n	800c98e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	68b9      	ldr	r1, [r7, #8]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	0018      	movs	r0, r3
 800c936:	f000 f837 	bl	800c9a8 <I2C_IsErrorOccurred>
 800c93a:	1e03      	subs	r3, r0, #0
 800c93c:	d001      	beq.n	800c942 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e02d      	b.n	800c99e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c942:	f7fe ffe5 	bl	800b910 <HAL_GetTick>
 800c946:	0002      	movs	r2, r0
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	1ad3      	subs	r3, r2, r3
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d302      	bcc.n	800c958 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d11a      	bne.n	800c98e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	699b      	ldr	r3, [r3, #24]
 800c95e:	2220      	movs	r2, #32
 800c960:	4013      	ands	r3, r2
 800c962:	2b20      	cmp	r3, #32
 800c964:	d013      	beq.n	800c98e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c96a:	2220      	movs	r2, #32
 800c96c:	431a      	orrs	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2241      	movs	r2, #65	@ 0x41
 800c976:	2120      	movs	r1, #32
 800c978:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2242      	movs	r2, #66	@ 0x42
 800c97e:	2100      	movs	r1, #0
 800c980:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2240      	movs	r2, #64	@ 0x40
 800c986:	2100      	movs	r1, #0
 800c988:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	e007      	b.n	800c99e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	2220      	movs	r2, #32
 800c996:	4013      	ands	r3, r2
 800c998:	2b20      	cmp	r3, #32
 800c99a:	d1c8      	bne.n	800c92e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	0018      	movs	r0, r3
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	b004      	add	sp, #16
 800c9a4:	bd80      	pop	{r7, pc}
	...

0800c9a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08a      	sub	sp, #40	@ 0x28
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9b4:	2327      	movs	r3, #39	@ 0x27
 800c9b6:	18fb      	adds	r3, r7, r3
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	699b      	ldr	r3, [r3, #24]
 800c9c2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	2210      	movs	r2, #16
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	d100      	bne.n	800c9d6 <I2C_IsErrorOccurred+0x2e>
 800c9d4:	e079      	b.n	800caca <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2210      	movs	r2, #16
 800c9dc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c9de:	e057      	b.n	800ca90 <I2C_IsErrorOccurred+0xe8>
 800c9e0:	2227      	movs	r2, #39	@ 0x27
 800c9e2:	18bb      	adds	r3, r7, r2
 800c9e4:	18ba      	adds	r2, r7, r2
 800c9e6:	7812      	ldrb	r2, [r2, #0]
 800c9e8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	d04f      	beq.n	800ca90 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c9f0:	f7fe ff8e 	bl	800b910 <HAL_GetTick>
 800c9f4:	0002      	movs	r2, r0
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d302      	bcc.n	800ca06 <I2C_IsErrorOccurred+0x5e>
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d144      	bne.n	800ca90 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	2380      	movs	r3, #128	@ 0x80
 800ca0e:	01db      	lsls	r3, r3, #7
 800ca10:	4013      	ands	r3, r2
 800ca12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ca14:	2013      	movs	r0, #19
 800ca16:	183b      	adds	r3, r7, r0
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	2142      	movs	r1, #66	@ 0x42
 800ca1c:	5c52      	ldrb	r2, [r2, r1]
 800ca1e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	699a      	ldr	r2, [r3, #24]
 800ca26:	2380      	movs	r3, #128	@ 0x80
 800ca28:	021b      	lsls	r3, r3, #8
 800ca2a:	401a      	ands	r2, r3
 800ca2c:	2380      	movs	r3, #128	@ 0x80
 800ca2e:	021b      	lsls	r3, r3, #8
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d126      	bne.n	800ca82 <I2C_IsErrorOccurred+0xda>
 800ca34:	697a      	ldr	r2, [r7, #20]
 800ca36:	2380      	movs	r3, #128	@ 0x80
 800ca38:	01db      	lsls	r3, r3, #7
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d021      	beq.n	800ca82 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800ca3e:	183b      	adds	r3, r7, r0
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	2b20      	cmp	r3, #32
 800ca44:	d01d      	beq.n	800ca82 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2180      	movs	r1, #128	@ 0x80
 800ca52:	01c9      	lsls	r1, r1, #7
 800ca54:	430a      	orrs	r2, r1
 800ca56:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ca58:	f7fe ff5a 	bl	800b910 <HAL_GetTick>
 800ca5c:	0003      	movs	r3, r0
 800ca5e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ca60:	e00f      	b.n	800ca82 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ca62:	f7fe ff55 	bl	800b910 <HAL_GetTick>
 800ca66:	0002      	movs	r2, r0
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	2b19      	cmp	r3, #25
 800ca6e:	d908      	bls.n	800ca82 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ca70:	6a3b      	ldr	r3, [r7, #32]
 800ca72:	2220      	movs	r2, #32
 800ca74:	4313      	orrs	r3, r2
 800ca76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ca78:	2327      	movs	r3, #39	@ 0x27
 800ca7a:	18fb      	adds	r3, r7, r3
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	701a      	strb	r2, [r3, #0]

              break;
 800ca80:	e006      	b.n	800ca90 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	2220      	movs	r2, #32
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b20      	cmp	r3, #32
 800ca8e:	d1e8      	bne.n	800ca62 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	2220      	movs	r2, #32
 800ca98:	4013      	ands	r3, r2
 800ca9a:	2b20      	cmp	r3, #32
 800ca9c:	d004      	beq.n	800caa8 <I2C_IsErrorOccurred+0x100>
 800ca9e:	2327      	movs	r3, #39	@ 0x27
 800caa0:	18fb      	adds	r3, r7, r3
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d09b      	beq.n	800c9e0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800caa8:	2327      	movs	r3, #39	@ 0x27
 800caaa:	18fb      	adds	r3, r7, r3
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d103      	bne.n	800caba <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2220      	movs	r2, #32
 800cab8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800caba:	6a3b      	ldr	r3, [r7, #32]
 800cabc:	2204      	movs	r2, #4
 800cabe:	4313      	orrs	r3, r2
 800cac0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800cac2:	2327      	movs	r3, #39	@ 0x27
 800cac4:	18fb      	adds	r3, r7, r3
 800cac6:	2201      	movs	r2, #1
 800cac8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cad2:	69ba      	ldr	r2, [r7, #24]
 800cad4:	2380      	movs	r3, #128	@ 0x80
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	4013      	ands	r3, r2
 800cada:	d00c      	beq.n	800caf6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800cadc:	6a3b      	ldr	r3, [r7, #32]
 800cade:	2201      	movs	r2, #1
 800cae0:	4313      	orrs	r3, r2
 800cae2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2280      	movs	r2, #128	@ 0x80
 800caea:	0052      	lsls	r2, r2, #1
 800caec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800caee:	2327      	movs	r3, #39	@ 0x27
 800caf0:	18fb      	adds	r3, r7, r3
 800caf2:	2201      	movs	r2, #1
 800caf4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800caf6:	69ba      	ldr	r2, [r7, #24]
 800caf8:	2380      	movs	r3, #128	@ 0x80
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	4013      	ands	r3, r2
 800cafe:	d00c      	beq.n	800cb1a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	2208      	movs	r2, #8
 800cb04:	4313      	orrs	r3, r2
 800cb06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2280      	movs	r2, #128	@ 0x80
 800cb0e:	00d2      	lsls	r2, r2, #3
 800cb10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cb12:	2327      	movs	r3, #39	@ 0x27
 800cb14:	18fb      	adds	r3, r7, r3
 800cb16:	2201      	movs	r2, #1
 800cb18:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cb1a:	69ba      	ldr	r2, [r7, #24]
 800cb1c:	2380      	movs	r3, #128	@ 0x80
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4013      	ands	r3, r2
 800cb22:	d00c      	beq.n	800cb3e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	2202      	movs	r2, #2
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2280      	movs	r2, #128	@ 0x80
 800cb32:	0092      	lsls	r2, r2, #2
 800cb34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cb36:	2327      	movs	r3, #39	@ 0x27
 800cb38:	18fb      	adds	r3, r7, r3
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800cb3e:	2327      	movs	r3, #39	@ 0x27
 800cb40:	18fb      	adds	r3, r7, r3
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d01d      	beq.n	800cb84 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	0018      	movs	r0, r3
 800cb4c:	f7ff fe28 	bl	800c7a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	490e      	ldr	r1, [pc, #56]	@ (800cb94 <I2C_IsErrorOccurred+0x1ec>)
 800cb5c:	400a      	ands	r2, r1
 800cb5e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	431a      	orrs	r2, r3
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2241      	movs	r2, #65	@ 0x41
 800cb70:	2120      	movs	r1, #32
 800cb72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2242      	movs	r2, #66	@ 0x42
 800cb78:	2100      	movs	r1, #0
 800cb7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2240      	movs	r2, #64	@ 0x40
 800cb80:	2100      	movs	r1, #0
 800cb82:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800cb84:	2327      	movs	r3, #39	@ 0x27
 800cb86:	18fb      	adds	r3, r7, r3
 800cb88:	781b      	ldrb	r3, [r3, #0]
}
 800cb8a:	0018      	movs	r0, r3
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	b00a      	add	sp, #40	@ 0x28
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	46c0      	nop			@ (mov r8, r8)
 800cb94:	fe00e800 	.word	0xfe00e800

0800cb98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cb98:	b590      	push	{r4, r7, lr}
 800cb9a:	b087      	sub	sp, #28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	0008      	movs	r0, r1
 800cba2:	0011      	movs	r1, r2
 800cba4:	607b      	str	r3, [r7, #4]
 800cba6:	240a      	movs	r4, #10
 800cba8:	193b      	adds	r3, r7, r4
 800cbaa:	1c02      	adds	r2, r0, #0
 800cbac:	801a      	strh	r2, [r3, #0]
 800cbae:	2009      	movs	r0, #9
 800cbb0:	183b      	adds	r3, r7, r0
 800cbb2:	1c0a      	adds	r2, r1, #0
 800cbb4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cbb6:	193b      	adds	r3, r7, r4
 800cbb8:	881b      	ldrh	r3, [r3, #0]
 800cbba:	059b      	lsls	r3, r3, #22
 800cbbc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cbbe:	183b      	adds	r3, r7, r0
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	0419      	lsls	r1, r3, #16
 800cbc4:	23ff      	movs	r3, #255	@ 0xff
 800cbc6:	041b      	lsls	r3, r3, #16
 800cbc8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cbca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	085b      	lsrs	r3, r3, #1
 800cbd8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbe2:	0d51      	lsrs	r1, r2, #21
 800cbe4:	2280      	movs	r2, #128	@ 0x80
 800cbe6:	00d2      	lsls	r2, r2, #3
 800cbe8:	400a      	ands	r2, r1
 800cbea:	4907      	ldr	r1, [pc, #28]	@ (800cc08 <I2C_TransferConfig+0x70>)
 800cbec:	430a      	orrs	r2, r1
 800cbee:	43d2      	mvns	r2, r2
 800cbf0:	401a      	ands	r2, r3
 800cbf2:	0011      	movs	r1, r2
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cbfe:	46c0      	nop			@ (mov r8, r8)
 800cc00:	46bd      	mov	sp, r7
 800cc02:	b007      	add	sp, #28
 800cc04:	bd90      	pop	{r4, r7, pc}
 800cc06:	46c0      	nop			@ (mov r8, r8)
 800cc08:	03ff63ff 	.word	0x03ff63ff

0800cc0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2241      	movs	r2, #65	@ 0x41
 800cc1a:	5c9b      	ldrb	r3, [r3, r2]
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b20      	cmp	r3, #32
 800cc20:	d138      	bne.n	800cc94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2240      	movs	r2, #64	@ 0x40
 800cc26:	5c9b      	ldrb	r3, [r3, r2]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d101      	bne.n	800cc30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	e032      	b.n	800cc96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2240      	movs	r2, #64	@ 0x40
 800cc34:	2101      	movs	r1, #1
 800cc36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2241      	movs	r2, #65	@ 0x41
 800cc3c:	2124      	movs	r1, #36	@ 0x24
 800cc3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	438a      	bics	r2, r1
 800cc4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4911      	ldr	r1, [pc, #68]	@ (800cca0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800cc5c:	400a      	ands	r2, r1
 800cc5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6819      	ldr	r1, [r3, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	430a      	orrs	r2, r1
 800cc7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2241      	movs	r2, #65	@ 0x41
 800cc84:	2120      	movs	r1, #32
 800cc86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2240      	movs	r2, #64	@ 0x40
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	e000      	b.n	800cc96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cc94:	2302      	movs	r3, #2
  }
}
 800cc96:	0018      	movs	r0, r3
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	b002      	add	sp, #8
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	46c0      	nop			@ (mov r8, r8)
 800cca0:	ffffefff 	.word	0xffffefff

0800cca4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2241      	movs	r2, #65	@ 0x41
 800ccb2:	5c9b      	ldrb	r3, [r3, r2]
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b20      	cmp	r3, #32
 800ccb8:	d139      	bne.n	800cd2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2240      	movs	r2, #64	@ 0x40
 800ccbe:	5c9b      	ldrb	r3, [r3, r2]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d101      	bne.n	800ccc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	e033      	b.n	800cd30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2240      	movs	r2, #64	@ 0x40
 800cccc:	2101      	movs	r1, #1
 800ccce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2241      	movs	r2, #65	@ 0x41
 800ccd4:	2124      	movs	r1, #36	@ 0x24
 800ccd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2101      	movs	r1, #1
 800cce4:	438a      	bics	r2, r1
 800cce6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4a11      	ldr	r2, [pc, #68]	@ (800cd38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	021b      	lsls	r3, r3, #8
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2101      	movs	r1, #1
 800cd16:	430a      	orrs	r2, r1
 800cd18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2241      	movs	r2, #65	@ 0x41
 800cd1e:	2120      	movs	r1, #32
 800cd20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2240      	movs	r2, #64	@ 0x40
 800cd26:	2100      	movs	r1, #0
 800cd28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e000      	b.n	800cd30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cd2e:	2302      	movs	r3, #2
  }
}
 800cd30:	0018      	movs	r0, r3
 800cd32:	46bd      	mov	sp, r7
 800cd34:	b004      	add	sp, #16
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	fffff0ff 	.word	0xfffff0ff

0800cd3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800cd44:	4b19      	ldr	r3, [pc, #100]	@ (800cdac <HAL_PWREx_ControlVoltageScaling+0x70>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a19      	ldr	r2, [pc, #100]	@ (800cdb0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	0019      	movs	r1, r3
 800cd4e:	4b17      	ldr	r3, [pc, #92]	@ (800cdac <HAL_PWREx_ControlVoltageScaling+0x70>)
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	430a      	orrs	r2, r1
 800cd54:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	2380      	movs	r3, #128	@ 0x80
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d11f      	bne.n	800cda0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800cd60:	4b14      	ldr	r3, [pc, #80]	@ (800cdb4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	0013      	movs	r3, r2
 800cd66:	005b      	lsls	r3, r3, #1
 800cd68:	189b      	adds	r3, r3, r2
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	4912      	ldr	r1, [pc, #72]	@ (800cdb8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800cd6e:	0018      	movs	r0, r3
 800cd70:	f7f3 f9ee 	bl	8000150 <__udivsi3>
 800cd74:	0003      	movs	r3, r0
 800cd76:	3301      	adds	r3, #1
 800cd78:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cd7a:	e008      	b.n	800cd8e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d003      	beq.n	800cd8a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	e001      	b.n	800cd8e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800cd8a:	2303      	movs	r3, #3
 800cd8c:	e009      	b.n	800cda2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cd8e:	4b07      	ldr	r3, [pc, #28]	@ (800cdac <HAL_PWREx_ControlVoltageScaling+0x70>)
 800cd90:	695a      	ldr	r2, [r3, #20]
 800cd92:	2380      	movs	r3, #128	@ 0x80
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	401a      	ands	r2, r3
 800cd98:	2380      	movs	r3, #128	@ 0x80
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d0ed      	beq.n	800cd7c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	0018      	movs	r0, r3
 800cda4:	46bd      	mov	sp, r7
 800cda6:	b004      	add	sp, #16
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	40007000 	.word	0x40007000
 800cdb0:	fffff9ff 	.word	0xfffff9ff
 800cdb4:	20000020 	.word	0x20000020
 800cdb8:	000f4240 	.word	0x000f4240

0800cdbc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800cdc0:	4b03      	ldr	r3, [pc, #12]	@ (800cdd0 <LL_RCC_GetAPB1Prescaler+0x14>)
 800cdc2:	689a      	ldr	r2, [r3, #8]
 800cdc4:	23e0      	movs	r3, #224	@ 0xe0
 800cdc6:	01db      	lsls	r3, r3, #7
 800cdc8:	4013      	ands	r3, r2
}
 800cdca:	0018      	movs	r0, r3
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	40021000 	.word	0x40021000

0800cdd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b088      	sub	sp, #32
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e2fe      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2201      	movs	r2, #1
 800cdec:	4013      	ands	r3, r2
 800cdee:	d100      	bne.n	800cdf2 <HAL_RCC_OscConfig+0x1e>
 800cdf0:	e07c      	b.n	800ceec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdf2:	4bc3      	ldr	r3, [pc, #780]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	2238      	movs	r2, #56	@ 0x38
 800cdf8:	4013      	ands	r3, r2
 800cdfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cdfc:	4bc0      	ldr	r3, [pc, #768]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	2203      	movs	r2, #3
 800ce02:	4013      	ands	r3, r2
 800ce04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	2b10      	cmp	r3, #16
 800ce0a:	d102      	bne.n	800ce12 <HAL_RCC_OscConfig+0x3e>
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2b03      	cmp	r3, #3
 800ce10:	d002      	beq.n	800ce18 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	2b08      	cmp	r3, #8
 800ce16:	d10b      	bne.n	800ce30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce18:	4bb9      	ldr	r3, [pc, #740]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	2380      	movs	r3, #128	@ 0x80
 800ce1e:	029b      	lsls	r3, r3, #10
 800ce20:	4013      	ands	r3, r2
 800ce22:	d062      	beq.n	800ceea <HAL_RCC_OscConfig+0x116>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d15e      	bne.n	800ceea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e2d9      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	2380      	movs	r3, #128	@ 0x80
 800ce36:	025b      	lsls	r3, r3, #9
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d107      	bne.n	800ce4c <HAL_RCC_OscConfig+0x78>
 800ce3c:	4bb0      	ldr	r3, [pc, #704]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	4baf      	ldr	r3, [pc, #700]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce42:	2180      	movs	r1, #128	@ 0x80
 800ce44:	0249      	lsls	r1, r1, #9
 800ce46:	430a      	orrs	r2, r1
 800ce48:	601a      	str	r2, [r3, #0]
 800ce4a:	e020      	b.n	800ce8e <HAL_RCC_OscConfig+0xba>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	23a0      	movs	r3, #160	@ 0xa0
 800ce52:	02db      	lsls	r3, r3, #11
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d10e      	bne.n	800ce76 <HAL_RCC_OscConfig+0xa2>
 800ce58:	4ba9      	ldr	r3, [pc, #676]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	4ba8      	ldr	r3, [pc, #672]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce5e:	2180      	movs	r1, #128	@ 0x80
 800ce60:	02c9      	lsls	r1, r1, #11
 800ce62:	430a      	orrs	r2, r1
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	4ba6      	ldr	r3, [pc, #664]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	4ba5      	ldr	r3, [pc, #660]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce6c:	2180      	movs	r1, #128	@ 0x80
 800ce6e:	0249      	lsls	r1, r1, #9
 800ce70:	430a      	orrs	r2, r1
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	e00b      	b.n	800ce8e <HAL_RCC_OscConfig+0xba>
 800ce76:	4ba2      	ldr	r3, [pc, #648]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	4ba1      	ldr	r3, [pc, #644]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce7c:	49a1      	ldr	r1, [pc, #644]	@ (800d104 <HAL_RCC_OscConfig+0x330>)
 800ce7e:	400a      	ands	r2, r1
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	4b9f      	ldr	r3, [pc, #636]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	4b9e      	ldr	r3, [pc, #632]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ce88:	499f      	ldr	r1, [pc, #636]	@ (800d108 <HAL_RCC_OscConfig+0x334>)
 800ce8a:	400a      	ands	r2, r1
 800ce8c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d014      	beq.n	800cec0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce96:	f7fe fd3b 	bl	800b910 <HAL_GetTick>
 800ce9a:	0003      	movs	r3, r0
 800ce9c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ce9e:	e008      	b.n	800ceb2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cea0:	f7fe fd36 	bl	800b910 <HAL_GetTick>
 800cea4:	0002      	movs	r2, r0
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	2b64      	cmp	r3, #100	@ 0x64
 800ceac:	d901      	bls.n	800ceb2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e298      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ceb2:	4b93      	ldr	r3, [pc, #588]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	2380      	movs	r3, #128	@ 0x80
 800ceb8:	029b      	lsls	r3, r3, #10
 800ceba:	4013      	ands	r3, r2
 800cebc:	d0f0      	beq.n	800cea0 <HAL_RCC_OscConfig+0xcc>
 800cebe:	e015      	b.n	800ceec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cec0:	f7fe fd26 	bl	800b910 <HAL_GetTick>
 800cec4:	0003      	movs	r3, r0
 800cec6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cec8:	e008      	b.n	800cedc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ceca:	f7fe fd21 	bl	800b910 <HAL_GetTick>
 800cece:	0002      	movs	r2, r0
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	2b64      	cmp	r3, #100	@ 0x64
 800ced6:	d901      	bls.n	800cedc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800ced8:	2303      	movs	r3, #3
 800ceda:	e283      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cedc:	4b88      	ldr	r3, [pc, #544]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	2380      	movs	r3, #128	@ 0x80
 800cee2:	029b      	lsls	r3, r3, #10
 800cee4:	4013      	ands	r3, r2
 800cee6:	d1f0      	bne.n	800ceca <HAL_RCC_OscConfig+0xf6>
 800cee8:	e000      	b.n	800ceec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ceea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2202      	movs	r2, #2
 800cef2:	4013      	ands	r3, r2
 800cef4:	d100      	bne.n	800cef8 <HAL_RCC_OscConfig+0x124>
 800cef6:	e099      	b.n	800d02c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cef8:	4b81      	ldr	r3, [pc, #516]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	2238      	movs	r2, #56	@ 0x38
 800cefe:	4013      	ands	r3, r2
 800cf00:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cf02:	4b7f      	ldr	r3, [pc, #508]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	2203      	movs	r2, #3
 800cf08:	4013      	ands	r3, r2
 800cf0a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	2b10      	cmp	r3, #16
 800cf10:	d102      	bne.n	800cf18 <HAL_RCC_OscConfig+0x144>
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d002      	beq.n	800cf1e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d135      	bne.n	800cf8a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cf1e:	4b78      	ldr	r3, [pc, #480]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	2380      	movs	r3, #128	@ 0x80
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	4013      	ands	r3, r2
 800cf28:	d005      	beq.n	800cf36 <HAL_RCC_OscConfig+0x162>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e256      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf36:	4b72      	ldr	r3, [pc, #456]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	4a74      	ldr	r2, [pc, #464]	@ (800d10c <HAL_RCC_OscConfig+0x338>)
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	0019      	movs	r1, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	695b      	ldr	r3, [r3, #20]
 800cf44:	021a      	lsls	r2, r3, #8
 800cf46:	4b6e      	ldr	r3, [pc, #440]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cf48:	430a      	orrs	r2, r1
 800cf4a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d112      	bne.n	800cf78 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800cf52:	4b6b      	ldr	r3, [pc, #428]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a6e      	ldr	r2, [pc, #440]	@ (800d110 <HAL_RCC_OscConfig+0x33c>)
 800cf58:	4013      	ands	r3, r2
 800cf5a:	0019      	movs	r1, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	691a      	ldr	r2, [r3, #16]
 800cf60:	4b67      	ldr	r3, [pc, #412]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cf62:	430a      	orrs	r2, r1
 800cf64:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800cf66:	4b66      	ldr	r3, [pc, #408]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	0adb      	lsrs	r3, r3, #11
 800cf6c:	2207      	movs	r2, #7
 800cf6e:	4013      	ands	r3, r2
 800cf70:	4a68      	ldr	r2, [pc, #416]	@ (800d114 <HAL_RCC_OscConfig+0x340>)
 800cf72:	40da      	lsrs	r2, r3
 800cf74:	4b68      	ldr	r3, [pc, #416]	@ (800d118 <HAL_RCC_OscConfig+0x344>)
 800cf76:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cf78:	4b68      	ldr	r3, [pc, #416]	@ (800d11c <HAL_RCC_OscConfig+0x348>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	0018      	movs	r0, r3
 800cf7e:	f7fe fc6b 	bl	800b858 <HAL_InitTick>
 800cf82:	1e03      	subs	r3, r0, #0
 800cf84:	d051      	beq.n	800d02a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e22c      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d030      	beq.n	800cff4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800cf92:	4b5b      	ldr	r3, [pc, #364]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a5e      	ldr	r2, [pc, #376]	@ (800d110 <HAL_RCC_OscConfig+0x33c>)
 800cf98:	4013      	ands	r3, r2
 800cf9a:	0019      	movs	r1, r3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	691a      	ldr	r2, [r3, #16]
 800cfa0:	4b57      	ldr	r3, [pc, #348]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800cfa6:	4b56      	ldr	r3, [pc, #344]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b55      	ldr	r3, [pc, #340]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cfac:	2180      	movs	r1, #128	@ 0x80
 800cfae:	0049      	lsls	r1, r1, #1
 800cfb0:	430a      	orrs	r2, r1
 800cfb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfb4:	f7fe fcac 	bl	800b910 <HAL_GetTick>
 800cfb8:	0003      	movs	r3, r0
 800cfba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cfbc:	e008      	b.n	800cfd0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cfbe:	f7fe fca7 	bl	800b910 <HAL_GetTick>
 800cfc2:	0002      	movs	r2, r0
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d901      	bls.n	800cfd0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e209      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cfd0:	4b4b      	ldr	r3, [pc, #300]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	2380      	movs	r3, #128	@ 0x80
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	4013      	ands	r3, r2
 800cfda:	d0f0      	beq.n	800cfbe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfdc:	4b48      	ldr	r3, [pc, #288]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	4a4a      	ldr	r2, [pc, #296]	@ (800d10c <HAL_RCC_OscConfig+0x338>)
 800cfe2:	4013      	ands	r3, r2
 800cfe4:	0019      	movs	r1, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	695b      	ldr	r3, [r3, #20]
 800cfea:	021a      	lsls	r2, r3, #8
 800cfec:	4b44      	ldr	r3, [pc, #272]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cfee:	430a      	orrs	r2, r1
 800cff0:	605a      	str	r2, [r3, #4]
 800cff2:	e01b      	b.n	800d02c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800cff4:	4b42      	ldr	r3, [pc, #264]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	4b41      	ldr	r3, [pc, #260]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800cffa:	4949      	ldr	r1, [pc, #292]	@ (800d120 <HAL_RCC_OscConfig+0x34c>)
 800cffc:	400a      	ands	r2, r1
 800cffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d000:	f7fe fc86 	bl	800b910 <HAL_GetTick>
 800d004:	0003      	movs	r3, r0
 800d006:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d008:	e008      	b.n	800d01c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d00a:	f7fe fc81 	bl	800b910 <HAL_GetTick>
 800d00e:	0002      	movs	r2, r0
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	2b02      	cmp	r3, #2
 800d016:	d901      	bls.n	800d01c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d018:	2303      	movs	r3, #3
 800d01a:	e1e3      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d01c:	4b38      	ldr	r3, [pc, #224]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	2380      	movs	r3, #128	@ 0x80
 800d022:	00db      	lsls	r3, r3, #3
 800d024:	4013      	ands	r3, r2
 800d026:	d1f0      	bne.n	800d00a <HAL_RCC_OscConfig+0x236>
 800d028:	e000      	b.n	800d02c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d02a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2208      	movs	r2, #8
 800d032:	4013      	ands	r3, r2
 800d034:	d047      	beq.n	800d0c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800d036:	4b32      	ldr	r3, [pc, #200]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	2238      	movs	r2, #56	@ 0x38
 800d03c:	4013      	ands	r3, r2
 800d03e:	2b18      	cmp	r3, #24
 800d040:	d10a      	bne.n	800d058 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800d042:	4b2f      	ldr	r3, [pc, #188]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d046:	2202      	movs	r2, #2
 800d048:	4013      	ands	r3, r2
 800d04a:	d03c      	beq.n	800d0c6 <HAL_RCC_OscConfig+0x2f2>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d138      	bne.n	800d0c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800d054:	2301      	movs	r3, #1
 800d056:	e1c5      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	699b      	ldr	r3, [r3, #24]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d019      	beq.n	800d094 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800d060:	4b27      	ldr	r3, [pc, #156]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d062:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d064:	4b26      	ldr	r3, [pc, #152]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d066:	2101      	movs	r1, #1
 800d068:	430a      	orrs	r2, r1
 800d06a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d06c:	f7fe fc50 	bl	800b910 <HAL_GetTick>
 800d070:	0003      	movs	r3, r0
 800d072:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d074:	e008      	b.n	800d088 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d076:	f7fe fc4b 	bl	800b910 <HAL_GetTick>
 800d07a:	0002      	movs	r2, r0
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	2b02      	cmp	r3, #2
 800d082:	d901      	bls.n	800d088 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800d084:	2303      	movs	r3, #3
 800d086:	e1ad      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d088:	4b1d      	ldr	r3, [pc, #116]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d08a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d08c:	2202      	movs	r2, #2
 800d08e:	4013      	ands	r3, r2
 800d090:	d0f1      	beq.n	800d076 <HAL_RCC_OscConfig+0x2a2>
 800d092:	e018      	b.n	800d0c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800d094:	4b1a      	ldr	r3, [pc, #104]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d096:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d098:	4b19      	ldr	r3, [pc, #100]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d09a:	2101      	movs	r1, #1
 800d09c:	438a      	bics	r2, r1
 800d09e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0a0:	f7fe fc36 	bl	800b910 <HAL_GetTick>
 800d0a4:	0003      	movs	r3, r0
 800d0a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d0a8:	e008      	b.n	800d0bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d0aa:	f7fe fc31 	bl	800b910 <HAL_GetTick>
 800d0ae:	0002      	movs	r2, r0
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d901      	bls.n	800d0bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	e193      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d0bc:	4b10      	ldr	r3, [pc, #64]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d0be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	4013      	ands	r3, r2
 800d0c4:	d1f1      	bne.n	800d0aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2204      	movs	r2, #4
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	d100      	bne.n	800d0d2 <HAL_RCC_OscConfig+0x2fe>
 800d0d0:	e0c6      	b.n	800d260 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d0d2:	231f      	movs	r3, #31
 800d0d4:	18fb      	adds	r3, r7, r3
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800d0da:	4b09      	ldr	r3, [pc, #36]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	2238      	movs	r2, #56	@ 0x38
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	2b20      	cmp	r3, #32
 800d0e4:	d11e      	bne.n	800d124 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800d0e6:	4b06      	ldr	r3, [pc, #24]	@ (800d100 <HAL_RCC_OscConfig+0x32c>)
 800d0e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	d100      	bne.n	800d0f2 <HAL_RCC_OscConfig+0x31e>
 800d0f0:	e0b6      	b.n	800d260 <HAL_RCC_OscConfig+0x48c>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d000      	beq.n	800d0fc <HAL_RCC_OscConfig+0x328>
 800d0fa:	e0b1      	b.n	800d260 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e171      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
 800d100:	40021000 	.word	0x40021000
 800d104:	fffeffff 	.word	0xfffeffff
 800d108:	fffbffff 	.word	0xfffbffff
 800d10c:	ffff80ff 	.word	0xffff80ff
 800d110:	ffffc7ff 	.word	0xffffc7ff
 800d114:	00f42400 	.word	0x00f42400
 800d118:	20000020 	.word	0x20000020
 800d11c:	20000024 	.word	0x20000024
 800d120:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d124:	4bb1      	ldr	r3, [pc, #708]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d128:	2380      	movs	r3, #128	@ 0x80
 800d12a:	055b      	lsls	r3, r3, #21
 800d12c:	4013      	ands	r3, r2
 800d12e:	d101      	bne.n	800d134 <HAL_RCC_OscConfig+0x360>
 800d130:	2301      	movs	r3, #1
 800d132:	e000      	b.n	800d136 <HAL_RCC_OscConfig+0x362>
 800d134:	2300      	movs	r3, #0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d011      	beq.n	800d15e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800d13a:	4bac      	ldr	r3, [pc, #688]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d13c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d13e:	4bab      	ldr	r3, [pc, #684]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d140:	2180      	movs	r1, #128	@ 0x80
 800d142:	0549      	lsls	r1, r1, #21
 800d144:	430a      	orrs	r2, r1
 800d146:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d148:	4ba8      	ldr	r3, [pc, #672]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d14a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d14c:	2380      	movs	r3, #128	@ 0x80
 800d14e:	055b      	lsls	r3, r3, #21
 800d150:	4013      	ands	r3, r2
 800d152:	60fb      	str	r3, [r7, #12]
 800d154:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800d156:	231f      	movs	r3, #31
 800d158:	18fb      	adds	r3, r7, r3
 800d15a:	2201      	movs	r2, #1
 800d15c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d15e:	4ba4      	ldr	r3, [pc, #656]	@ (800d3f0 <HAL_RCC_OscConfig+0x61c>)
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	2380      	movs	r3, #128	@ 0x80
 800d164:	005b      	lsls	r3, r3, #1
 800d166:	4013      	ands	r3, r2
 800d168:	d11a      	bne.n	800d1a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d16a:	4ba1      	ldr	r3, [pc, #644]	@ (800d3f0 <HAL_RCC_OscConfig+0x61c>)
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	4ba0      	ldr	r3, [pc, #640]	@ (800d3f0 <HAL_RCC_OscConfig+0x61c>)
 800d170:	2180      	movs	r1, #128	@ 0x80
 800d172:	0049      	lsls	r1, r1, #1
 800d174:	430a      	orrs	r2, r1
 800d176:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800d178:	f7fe fbca 	bl	800b910 <HAL_GetTick>
 800d17c:	0003      	movs	r3, r0
 800d17e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d180:	e008      	b.n	800d194 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d182:	f7fe fbc5 	bl	800b910 <HAL_GetTick>
 800d186:	0002      	movs	r2, r0
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d901      	bls.n	800d194 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800d190:	2303      	movs	r3, #3
 800d192:	e127      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d194:	4b96      	ldr	r3, [pc, #600]	@ (800d3f0 <HAL_RCC_OscConfig+0x61c>)
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	2380      	movs	r3, #128	@ 0x80
 800d19a:	005b      	lsls	r3, r3, #1
 800d19c:	4013      	ands	r3, r2
 800d19e:	d0f0      	beq.n	800d182 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	689b      	ldr	r3, [r3, #8]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d106      	bne.n	800d1b6 <HAL_RCC_OscConfig+0x3e2>
 800d1a8:	4b90      	ldr	r3, [pc, #576]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d1ac:	4b8f      	ldr	r3, [pc, #572]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1ae:	2101      	movs	r1, #1
 800d1b0:	430a      	orrs	r2, r1
 800d1b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d1b4:	e01c      	b.n	800d1f0 <HAL_RCC_OscConfig+0x41c>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	2b05      	cmp	r3, #5
 800d1bc:	d10c      	bne.n	800d1d8 <HAL_RCC_OscConfig+0x404>
 800d1be:	4b8b      	ldr	r3, [pc, #556]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d1c2:	4b8a      	ldr	r3, [pc, #552]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1c4:	2104      	movs	r1, #4
 800d1c6:	430a      	orrs	r2, r1
 800d1c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d1ca:	4b88      	ldr	r3, [pc, #544]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d1ce:	4b87      	ldr	r3, [pc, #540]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	430a      	orrs	r2, r1
 800d1d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d1d6:	e00b      	b.n	800d1f0 <HAL_RCC_OscConfig+0x41c>
 800d1d8:	4b84      	ldr	r3, [pc, #528]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d1dc:	4b83      	ldr	r3, [pc, #524]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1de:	2101      	movs	r1, #1
 800d1e0:	438a      	bics	r2, r1
 800d1e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d1e4:	4b81      	ldr	r3, [pc, #516]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d1e8:	4b80      	ldr	r3, [pc, #512]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d1ea:	2104      	movs	r1, #4
 800d1ec:	438a      	bics	r2, r1
 800d1ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d014      	beq.n	800d222 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1f8:	f7fe fb8a 	bl	800b910 <HAL_GetTick>
 800d1fc:	0003      	movs	r3, r0
 800d1fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d200:	e009      	b.n	800d216 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d202:	f7fe fb85 	bl	800b910 <HAL_GetTick>
 800d206:	0002      	movs	r2, r0
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	4a79      	ldr	r2, [pc, #484]	@ (800d3f4 <HAL_RCC_OscConfig+0x620>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d901      	bls.n	800d216 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800d212:	2303      	movs	r3, #3
 800d214:	e0e6      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d216:	4b75      	ldr	r3, [pc, #468]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d21a:	2202      	movs	r2, #2
 800d21c:	4013      	ands	r3, r2
 800d21e:	d0f0      	beq.n	800d202 <HAL_RCC_OscConfig+0x42e>
 800d220:	e013      	b.n	800d24a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d222:	f7fe fb75 	bl	800b910 <HAL_GetTick>
 800d226:	0003      	movs	r3, r0
 800d228:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d22a:	e009      	b.n	800d240 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d22c:	f7fe fb70 	bl	800b910 <HAL_GetTick>
 800d230:	0002      	movs	r2, r0
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	4a6f      	ldr	r2, [pc, #444]	@ (800d3f4 <HAL_RCC_OscConfig+0x620>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d901      	bls.n	800d240 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800d23c:	2303      	movs	r3, #3
 800d23e:	e0d1      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d240:	4b6a      	ldr	r3, [pc, #424]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d244:	2202      	movs	r2, #2
 800d246:	4013      	ands	r3, r2
 800d248:	d1f0      	bne.n	800d22c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d24a:	231f      	movs	r3, #31
 800d24c:	18fb      	adds	r3, r7, r3
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	2b01      	cmp	r3, #1
 800d252:	d105      	bne.n	800d260 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d254:	4b65      	ldr	r3, [pc, #404]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d258:	4b64      	ldr	r3, [pc, #400]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d25a:	4967      	ldr	r1, [pc, #412]	@ (800d3f8 <HAL_RCC_OscConfig+0x624>)
 800d25c:	400a      	ands	r2, r1
 800d25e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	69db      	ldr	r3, [r3, #28]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d100      	bne.n	800d26a <HAL_RCC_OscConfig+0x496>
 800d268:	e0bb      	b.n	800d3e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d26a:	4b60      	ldr	r3, [pc, #384]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	2238      	movs	r2, #56	@ 0x38
 800d270:	4013      	ands	r3, r2
 800d272:	2b10      	cmp	r3, #16
 800d274:	d100      	bne.n	800d278 <HAL_RCC_OscConfig+0x4a4>
 800d276:	e07b      	b.n	800d370 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d156      	bne.n	800d32e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d280:	4b5a      	ldr	r3, [pc, #360]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	4b59      	ldr	r3, [pc, #356]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d286:	495d      	ldr	r1, [pc, #372]	@ (800d3fc <HAL_RCC_OscConfig+0x628>)
 800d288:	400a      	ands	r2, r1
 800d28a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d28c:	f7fe fb40 	bl	800b910 <HAL_GetTick>
 800d290:	0003      	movs	r3, r0
 800d292:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d294:	e008      	b.n	800d2a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d296:	f7fe fb3b 	bl	800b910 <HAL_GetTick>
 800d29a:	0002      	movs	r2, r0
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d901      	bls.n	800d2a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	e09d      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d2a8:	4b50      	ldr	r3, [pc, #320]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	2380      	movs	r3, #128	@ 0x80
 800d2ae:	049b      	lsls	r3, r3, #18
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	d1f0      	bne.n	800d296 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d2b4:	4b4d      	ldr	r3, [pc, #308]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	4a51      	ldr	r2, [pc, #324]	@ (800d400 <HAL_RCC_OscConfig+0x62c>)
 800d2ba:	4013      	ands	r3, r2
 800d2bc:	0019      	movs	r1, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a1a      	ldr	r2, [r3, #32]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2c6:	431a      	orrs	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2cc:	021b      	lsls	r3, r3, #8
 800d2ce:	431a      	orrs	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d4:	431a      	orrs	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2da:	431a      	orrs	r2, r3
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2e0:	431a      	orrs	r2, r3
 800d2e2:	4b42      	ldr	r3, [pc, #264]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d2e4:	430a      	orrs	r2, r1
 800d2e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d2e8:	4b40      	ldr	r3, [pc, #256]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	4b3f      	ldr	r3, [pc, #252]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d2ee:	2180      	movs	r1, #128	@ 0x80
 800d2f0:	0449      	lsls	r1, r1, #17
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800d2f6:	4b3d      	ldr	r3, [pc, #244]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d2f8:	68da      	ldr	r2, [r3, #12]
 800d2fa:	4b3c      	ldr	r3, [pc, #240]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d2fc:	2180      	movs	r1, #128	@ 0x80
 800d2fe:	0549      	lsls	r1, r1, #21
 800d300:	430a      	orrs	r2, r1
 800d302:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d304:	f7fe fb04 	bl	800b910 <HAL_GetTick>
 800d308:	0003      	movs	r3, r0
 800d30a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d30c:	e008      	b.n	800d320 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d30e:	f7fe faff 	bl	800b910 <HAL_GetTick>
 800d312:	0002      	movs	r2, r0
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d901      	bls.n	800d320 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e061      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d320:	4b32      	ldr	r3, [pc, #200]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	2380      	movs	r3, #128	@ 0x80
 800d326:	049b      	lsls	r3, r3, #18
 800d328:	4013      	ands	r3, r2
 800d32a:	d0f0      	beq.n	800d30e <HAL_RCC_OscConfig+0x53a>
 800d32c:	e059      	b.n	800d3e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d32e:	4b2f      	ldr	r3, [pc, #188]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	4b2e      	ldr	r3, [pc, #184]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d334:	4931      	ldr	r1, [pc, #196]	@ (800d3fc <HAL_RCC_OscConfig+0x628>)
 800d336:	400a      	ands	r2, r1
 800d338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d33a:	f7fe fae9 	bl	800b910 <HAL_GetTick>
 800d33e:	0003      	movs	r3, r0
 800d340:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d342:	e008      	b.n	800d356 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d344:	f7fe fae4 	bl	800b910 <HAL_GetTick>
 800d348:	0002      	movs	r2, r0
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d901      	bls.n	800d356 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800d352:	2303      	movs	r3, #3
 800d354:	e046      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d356:	4b25      	ldr	r3, [pc, #148]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	2380      	movs	r3, #128	@ 0x80
 800d35c:	049b      	lsls	r3, r3, #18
 800d35e:	4013      	ands	r3, r2
 800d360:	d1f0      	bne.n	800d344 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800d362:	4b22      	ldr	r3, [pc, #136]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d364:	68da      	ldr	r2, [r3, #12]
 800d366:	4b21      	ldr	r3, [pc, #132]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d368:	4926      	ldr	r1, [pc, #152]	@ (800d404 <HAL_RCC_OscConfig+0x630>)
 800d36a:	400a      	ands	r2, r1
 800d36c:	60da      	str	r2, [r3, #12]
 800d36e:	e038      	b.n	800d3e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	69db      	ldr	r3, [r3, #28]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d101      	bne.n	800d37c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	e033      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800d37c:	4b1b      	ldr	r3, [pc, #108]	@ (800d3ec <HAL_RCC_OscConfig+0x618>)
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	2203      	movs	r2, #3
 800d386:	401a      	ands	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a1b      	ldr	r3, [r3, #32]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d126      	bne.n	800d3de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2270      	movs	r2, #112	@ 0x70
 800d394:	401a      	ands	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d11f      	bne.n	800d3de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d39e:	697a      	ldr	r2, [r7, #20]
 800d3a0:	23fe      	movs	r3, #254	@ 0xfe
 800d3a2:	01db      	lsls	r3, r3, #7
 800d3a4:	401a      	ands	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3aa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d116      	bne.n	800d3de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d3b0:	697a      	ldr	r2, [r7, #20]
 800d3b2:	23f8      	movs	r3, #248	@ 0xf8
 800d3b4:	039b      	lsls	r3, r3, #14
 800d3b6:	401a      	ands	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d10e      	bne.n	800d3de <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	23e0      	movs	r3, #224	@ 0xe0
 800d3c4:	051b      	lsls	r3, r3, #20
 800d3c6:	401a      	ands	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d106      	bne.n	800d3de <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	0f5b      	lsrs	r3, r3, #29
 800d3d4:	075a      	lsls	r2, r3, #29
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d001      	beq.n	800d3e2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e000      	b.n	800d3e4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	0018      	movs	r0, r3
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	b008      	add	sp, #32
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	40021000 	.word	0x40021000
 800d3f0:	40007000 	.word	0x40007000
 800d3f4:	00001388 	.word	0x00001388
 800d3f8:	efffffff 	.word	0xefffffff
 800d3fc:	feffffff 	.word	0xfeffffff
 800d400:	11c1808c 	.word	0x11c1808c
 800d404:	eefefffc 	.word	0xeefefffc

0800d408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d418:	2301      	movs	r3, #1
 800d41a:	e0e9      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d41c:	4b76      	ldr	r3, [pc, #472]	@ (800d5f8 <HAL_RCC_ClockConfig+0x1f0>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2207      	movs	r2, #7
 800d422:	4013      	ands	r3, r2
 800d424:	683a      	ldr	r2, [r7, #0]
 800d426:	429a      	cmp	r2, r3
 800d428:	d91e      	bls.n	800d468 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d42a:	4b73      	ldr	r3, [pc, #460]	@ (800d5f8 <HAL_RCC_ClockConfig+0x1f0>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2207      	movs	r2, #7
 800d430:	4393      	bics	r3, r2
 800d432:	0019      	movs	r1, r3
 800d434:	4b70      	ldr	r3, [pc, #448]	@ (800d5f8 <HAL_RCC_ClockConfig+0x1f0>)
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	430a      	orrs	r2, r1
 800d43a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d43c:	f7fe fa68 	bl	800b910 <HAL_GetTick>
 800d440:	0003      	movs	r3, r0
 800d442:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d444:	e009      	b.n	800d45a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d446:	f7fe fa63 	bl	800b910 <HAL_GetTick>
 800d44a:	0002      	movs	r2, r0
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	4a6a      	ldr	r2, [pc, #424]	@ (800d5fc <HAL_RCC_ClockConfig+0x1f4>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d901      	bls.n	800d45a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800d456:	2303      	movs	r3, #3
 800d458:	e0ca      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d45a:	4b67      	ldr	r3, [pc, #412]	@ (800d5f8 <HAL_RCC_ClockConfig+0x1f0>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2207      	movs	r2, #7
 800d460:	4013      	ands	r3, r2
 800d462:	683a      	ldr	r2, [r7, #0]
 800d464:	429a      	cmp	r2, r3
 800d466:	d1ee      	bne.n	800d446 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2202      	movs	r2, #2
 800d46e:	4013      	ands	r3, r2
 800d470:	d015      	beq.n	800d49e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2204      	movs	r2, #4
 800d478:	4013      	ands	r3, r2
 800d47a:	d006      	beq.n	800d48a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800d47c:	4b60      	ldr	r3, [pc, #384]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d47e:	689a      	ldr	r2, [r3, #8]
 800d480:	4b5f      	ldr	r3, [pc, #380]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d482:	21e0      	movs	r1, #224	@ 0xe0
 800d484:	01c9      	lsls	r1, r1, #7
 800d486:	430a      	orrs	r2, r1
 800d488:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d48a:	4b5d      	ldr	r3, [pc, #372]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	4a5d      	ldr	r2, [pc, #372]	@ (800d604 <HAL_RCC_ClockConfig+0x1fc>)
 800d490:	4013      	ands	r3, r2
 800d492:	0019      	movs	r1, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	689a      	ldr	r2, [r3, #8]
 800d498:	4b59      	ldr	r3, [pc, #356]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d49a:	430a      	orrs	r2, r1
 800d49c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	d057      	beq.n	800d558 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d107      	bne.n	800d4c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d4b0:	4b53      	ldr	r3, [pc, #332]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	2380      	movs	r3, #128	@ 0x80
 800d4b6:	029b      	lsls	r3, r3, #10
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	d12b      	bne.n	800d514 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e097      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d107      	bne.n	800d4d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d4c8:	4b4d      	ldr	r3, [pc, #308]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	2380      	movs	r3, #128	@ 0x80
 800d4ce:	049b      	lsls	r3, r3, #18
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	d11f      	bne.n	800d514 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e08b      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d107      	bne.n	800d4f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d4e0:	4b47      	ldr	r3, [pc, #284]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	2380      	movs	r3, #128	@ 0x80
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	4013      	ands	r3, r2
 800d4ea:	d113      	bne.n	800d514 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e07f      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	2b03      	cmp	r3, #3
 800d4f6:	d106      	bne.n	800d506 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d4f8:	4b41      	ldr	r3, [pc, #260]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d4fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4fc:	2202      	movs	r2, #2
 800d4fe:	4013      	ands	r3, r2
 800d500:	d108      	bne.n	800d514 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d502:	2301      	movs	r3, #1
 800d504:	e074      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d506:	4b3e      	ldr	r3, [pc, #248]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d50a:	2202      	movs	r2, #2
 800d50c:	4013      	ands	r3, r2
 800d50e:	d101      	bne.n	800d514 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	e06d      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d514:	4b3a      	ldr	r3, [pc, #232]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	2207      	movs	r2, #7
 800d51a:	4393      	bics	r3, r2
 800d51c:	0019      	movs	r1, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	4b37      	ldr	r3, [pc, #220]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d524:	430a      	orrs	r2, r1
 800d526:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d528:	f7fe f9f2 	bl	800b910 <HAL_GetTick>
 800d52c:	0003      	movs	r3, r0
 800d52e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d530:	e009      	b.n	800d546 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d532:	f7fe f9ed 	bl	800b910 <HAL_GetTick>
 800d536:	0002      	movs	r2, r0
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	4a2f      	ldr	r2, [pc, #188]	@ (800d5fc <HAL_RCC_ClockConfig+0x1f4>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d901      	bls.n	800d546 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800d542:	2303      	movs	r3, #3
 800d544:	e054      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d546:	4b2e      	ldr	r3, [pc, #184]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	2238      	movs	r2, #56	@ 0x38
 800d54c:	401a      	ands	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	429a      	cmp	r2, r3
 800d556:	d1ec      	bne.n	800d532 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d558:	4b27      	ldr	r3, [pc, #156]	@ (800d5f8 <HAL_RCC_ClockConfig+0x1f0>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2207      	movs	r2, #7
 800d55e:	4013      	ands	r3, r2
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	429a      	cmp	r2, r3
 800d564:	d21e      	bcs.n	800d5a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d566:	4b24      	ldr	r3, [pc, #144]	@ (800d5f8 <HAL_RCC_ClockConfig+0x1f0>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2207      	movs	r2, #7
 800d56c:	4393      	bics	r3, r2
 800d56e:	0019      	movs	r1, r3
 800d570:	4b21      	ldr	r3, [pc, #132]	@ (800d5f8 <HAL_RCC_ClockConfig+0x1f0>)
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	430a      	orrs	r2, r1
 800d576:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d578:	f7fe f9ca 	bl	800b910 <HAL_GetTick>
 800d57c:	0003      	movs	r3, r0
 800d57e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d580:	e009      	b.n	800d596 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d582:	f7fe f9c5 	bl	800b910 <HAL_GetTick>
 800d586:	0002      	movs	r2, r0
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	4a1b      	ldr	r2, [pc, #108]	@ (800d5fc <HAL_RCC_ClockConfig+0x1f4>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d901      	bls.n	800d596 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800d592:	2303      	movs	r3, #3
 800d594:	e02c      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d596:	4b18      	ldr	r3, [pc, #96]	@ (800d5f8 <HAL_RCC_ClockConfig+0x1f0>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2207      	movs	r2, #7
 800d59c:	4013      	ands	r3, r2
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d1ee      	bne.n	800d582 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2204      	movs	r2, #4
 800d5aa:	4013      	ands	r3, r2
 800d5ac:	d009      	beq.n	800d5c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800d5ae:	4b14      	ldr	r3, [pc, #80]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	4a15      	ldr	r2, [pc, #84]	@ (800d608 <HAL_RCC_ClockConfig+0x200>)
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	0019      	movs	r1, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	68da      	ldr	r2, [r3, #12]
 800d5bc:	4b10      	ldr	r3, [pc, #64]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d5be:	430a      	orrs	r2, r1
 800d5c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800d5c2:	f000 f829 	bl	800d618 <HAL_RCC_GetSysClockFreq>
 800d5c6:	0001      	movs	r1, r0
 800d5c8:	4b0d      	ldr	r3, [pc, #52]	@ (800d600 <HAL_RCC_ClockConfig+0x1f8>)
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	0a1b      	lsrs	r3, r3, #8
 800d5ce:	220f      	movs	r2, #15
 800d5d0:	401a      	ands	r2, r3
 800d5d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d60c <HAL_RCC_ClockConfig+0x204>)
 800d5d4:	0092      	lsls	r2, r2, #2
 800d5d6:	58d3      	ldr	r3, [r2, r3]
 800d5d8:	221f      	movs	r2, #31
 800d5da:	4013      	ands	r3, r2
 800d5dc:	000a      	movs	r2, r1
 800d5de:	40da      	lsrs	r2, r3
 800d5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800d610 <HAL_RCC_ClockConfig+0x208>)
 800d5e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d5e4:	4b0b      	ldr	r3, [pc, #44]	@ (800d614 <HAL_RCC_ClockConfig+0x20c>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	0018      	movs	r0, r3
 800d5ea:	f7fe f935 	bl	800b858 <HAL_InitTick>
 800d5ee:	0003      	movs	r3, r0
}
 800d5f0:	0018      	movs	r0, r3
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	b004      	add	sp, #16
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	40022000 	.word	0x40022000
 800d5fc:	00001388 	.word	0x00001388
 800d600:	40021000 	.word	0x40021000
 800d604:	fffff0ff 	.word	0xfffff0ff
 800d608:	ffff8fff 	.word	0xffff8fff
 800d60c:	080163ac 	.word	0x080163ac
 800d610:	20000020 	.word	0x20000020
 800d614:	20000024 	.word	0x20000024

0800d618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d61e:	4b3c      	ldr	r3, [pc, #240]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	2238      	movs	r2, #56	@ 0x38
 800d624:	4013      	ands	r3, r2
 800d626:	d10f      	bne.n	800d648 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800d628:	4b39      	ldr	r3, [pc, #228]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	0adb      	lsrs	r3, r3, #11
 800d62e:	2207      	movs	r2, #7
 800d630:	4013      	ands	r3, r2
 800d632:	2201      	movs	r2, #1
 800d634:	409a      	lsls	r2, r3
 800d636:	0013      	movs	r3, r2
 800d638:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800d63a:	6839      	ldr	r1, [r7, #0]
 800d63c:	4835      	ldr	r0, [pc, #212]	@ (800d714 <HAL_RCC_GetSysClockFreq+0xfc>)
 800d63e:	f7f2 fd87 	bl	8000150 <__udivsi3>
 800d642:	0003      	movs	r3, r0
 800d644:	613b      	str	r3, [r7, #16]
 800d646:	e05d      	b.n	800d704 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d648:	4b31      	ldr	r3, [pc, #196]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	2238      	movs	r2, #56	@ 0x38
 800d64e:	4013      	ands	r3, r2
 800d650:	2b08      	cmp	r3, #8
 800d652:	d102      	bne.n	800d65a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d654:	4b30      	ldr	r3, [pc, #192]	@ (800d718 <HAL_RCC_GetSysClockFreq+0x100>)
 800d656:	613b      	str	r3, [r7, #16]
 800d658:	e054      	b.n	800d704 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d65a:	4b2d      	ldr	r3, [pc, #180]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	2238      	movs	r2, #56	@ 0x38
 800d660:	4013      	ands	r3, r2
 800d662:	2b10      	cmp	r3, #16
 800d664:	d138      	bne.n	800d6d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800d666:	4b2a      	ldr	r3, [pc, #168]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	2203      	movs	r2, #3
 800d66c:	4013      	ands	r3, r2
 800d66e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d670:	4b27      	ldr	r3, [pc, #156]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	091b      	lsrs	r3, r3, #4
 800d676:	2207      	movs	r2, #7
 800d678:	4013      	ands	r3, r2
 800d67a:	3301      	adds	r3, #1
 800d67c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2b03      	cmp	r3, #3
 800d682:	d10d      	bne.n	800d6a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d684:	68b9      	ldr	r1, [r7, #8]
 800d686:	4824      	ldr	r0, [pc, #144]	@ (800d718 <HAL_RCC_GetSysClockFreq+0x100>)
 800d688:	f7f2 fd62 	bl	8000150 <__udivsi3>
 800d68c:	0003      	movs	r3, r0
 800d68e:	0019      	movs	r1, r3
 800d690:	4b1f      	ldr	r3, [pc, #124]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	0a1b      	lsrs	r3, r3, #8
 800d696:	227f      	movs	r2, #127	@ 0x7f
 800d698:	4013      	ands	r3, r2
 800d69a:	434b      	muls	r3, r1
 800d69c:	617b      	str	r3, [r7, #20]
        break;
 800d69e:	e00d      	b.n	800d6bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800d6a0:	68b9      	ldr	r1, [r7, #8]
 800d6a2:	481c      	ldr	r0, [pc, #112]	@ (800d714 <HAL_RCC_GetSysClockFreq+0xfc>)
 800d6a4:	f7f2 fd54 	bl	8000150 <__udivsi3>
 800d6a8:	0003      	movs	r3, r0
 800d6aa:	0019      	movs	r1, r3
 800d6ac:	4b18      	ldr	r3, [pc, #96]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	0a1b      	lsrs	r3, r3, #8
 800d6b2:	227f      	movs	r2, #127	@ 0x7f
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	434b      	muls	r3, r1
 800d6b8:	617b      	str	r3, [r7, #20]
        break;
 800d6ba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800d6bc:	4b14      	ldr	r3, [pc, #80]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	0f5b      	lsrs	r3, r3, #29
 800d6c2:	2207      	movs	r2, #7
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800d6ca:	6879      	ldr	r1, [r7, #4]
 800d6cc:	6978      	ldr	r0, [r7, #20]
 800d6ce:	f7f2 fd3f 	bl	8000150 <__udivsi3>
 800d6d2:	0003      	movs	r3, r0
 800d6d4:	613b      	str	r3, [r7, #16]
 800d6d6:	e015      	b.n	800d704 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800d6d8:	4b0d      	ldr	r3, [pc, #52]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	2238      	movs	r2, #56	@ 0x38
 800d6de:	4013      	ands	r3, r2
 800d6e0:	2b20      	cmp	r3, #32
 800d6e2:	d103      	bne.n	800d6ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800d6e4:	2380      	movs	r3, #128	@ 0x80
 800d6e6:	021b      	lsls	r3, r3, #8
 800d6e8:	613b      	str	r3, [r7, #16]
 800d6ea:	e00b      	b.n	800d704 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800d6ec:	4b08      	ldr	r3, [pc, #32]	@ (800d710 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	2238      	movs	r2, #56	@ 0x38
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	2b18      	cmp	r3, #24
 800d6f6:	d103      	bne.n	800d700 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800d6f8:	23fa      	movs	r3, #250	@ 0xfa
 800d6fa:	01db      	lsls	r3, r3, #7
 800d6fc:	613b      	str	r3, [r7, #16]
 800d6fe:	e001      	b.n	800d704 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800d700:	2300      	movs	r3, #0
 800d702:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d704:	693b      	ldr	r3, [r7, #16]
}
 800d706:	0018      	movs	r0, r3
 800d708:	46bd      	mov	sp, r7
 800d70a:	b006      	add	sp, #24
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	46c0      	nop			@ (mov r8, r8)
 800d710:	40021000 	.word	0x40021000
 800d714:	00f42400 	.word	0x00f42400
 800d718:	007a1200 	.word	0x007a1200

0800d71c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d720:	4b02      	ldr	r3, [pc, #8]	@ (800d72c <HAL_RCC_GetHCLKFreq+0x10>)
 800d722:	681b      	ldr	r3, [r3, #0]
}
 800d724:	0018      	movs	r0, r3
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	46c0      	nop			@ (mov r8, r8)
 800d72c:	20000020 	.word	0x20000020

0800d730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d730:	b5b0      	push	{r4, r5, r7, lr}
 800d732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800d734:	f7ff fff2 	bl	800d71c <HAL_RCC_GetHCLKFreq>
 800d738:	0004      	movs	r4, r0
 800d73a:	f7ff fb3f 	bl	800cdbc <LL_RCC_GetAPB1Prescaler>
 800d73e:	0003      	movs	r3, r0
 800d740:	0b1a      	lsrs	r2, r3, #12
 800d742:	4b05      	ldr	r3, [pc, #20]	@ (800d758 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d744:	0092      	lsls	r2, r2, #2
 800d746:	58d3      	ldr	r3, [r2, r3]
 800d748:	221f      	movs	r2, #31
 800d74a:	4013      	ands	r3, r2
 800d74c:	40dc      	lsrs	r4, r3
 800d74e:	0023      	movs	r3, r4
}
 800d750:	0018      	movs	r0, r3
 800d752:	46bd      	mov	sp, r7
 800d754:	bdb0      	pop	{r4, r5, r7, pc}
 800d756:	46c0      	nop			@ (mov r8, r8)
 800d758:	080163ec 	.word	0x080163ec

0800d75c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800d764:	2313      	movs	r3, #19
 800d766:	18fb      	adds	r3, r7, r3
 800d768:	2200      	movs	r2, #0
 800d76a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d76c:	2312      	movs	r3, #18
 800d76e:	18fb      	adds	r3, r7, r3
 800d770:	2200      	movs	r2, #0
 800d772:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	2380      	movs	r3, #128	@ 0x80
 800d77a:	029b      	lsls	r3, r3, #10
 800d77c:	4013      	ands	r3, r2
 800d77e:	d100      	bne.n	800d782 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800d780:	e0a3      	b.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d782:	2011      	movs	r0, #17
 800d784:	183b      	adds	r3, r7, r0
 800d786:	2200      	movs	r2, #0
 800d788:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d78a:	4bc3      	ldr	r3, [pc, #780]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d78c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d78e:	2380      	movs	r3, #128	@ 0x80
 800d790:	055b      	lsls	r3, r3, #21
 800d792:	4013      	ands	r3, r2
 800d794:	d110      	bne.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d796:	4bc0      	ldr	r3, [pc, #768]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d79a:	4bbf      	ldr	r3, [pc, #764]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d79c:	2180      	movs	r1, #128	@ 0x80
 800d79e:	0549      	lsls	r1, r1, #21
 800d7a0:	430a      	orrs	r2, r1
 800d7a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d7a4:	4bbc      	ldr	r3, [pc, #752]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d7a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d7a8:	2380      	movs	r3, #128	@ 0x80
 800d7aa:	055b      	lsls	r3, r3, #21
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	60bb      	str	r3, [r7, #8]
 800d7b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d7b2:	183b      	adds	r3, r7, r0
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d7b8:	4bb8      	ldr	r3, [pc, #736]	@ (800da9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	4bb7      	ldr	r3, [pc, #732]	@ (800da9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800d7be:	2180      	movs	r1, #128	@ 0x80
 800d7c0:	0049      	lsls	r1, r1, #1
 800d7c2:	430a      	orrs	r2, r1
 800d7c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d7c6:	f7fe f8a3 	bl	800b910 <HAL_GetTick>
 800d7ca:	0003      	movs	r3, r0
 800d7cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d7ce:	e00b      	b.n	800d7e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7d0:	f7fe f89e 	bl	800b910 <HAL_GetTick>
 800d7d4:	0002      	movs	r2, r0
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	2b02      	cmp	r3, #2
 800d7dc:	d904      	bls.n	800d7e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800d7de:	2313      	movs	r3, #19
 800d7e0:	18fb      	adds	r3, r7, r3
 800d7e2:	2203      	movs	r2, #3
 800d7e4:	701a      	strb	r2, [r3, #0]
        break;
 800d7e6:	e005      	b.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d7e8:	4bac      	ldr	r3, [pc, #688]	@ (800da9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	2380      	movs	r3, #128	@ 0x80
 800d7ee:	005b      	lsls	r3, r3, #1
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	d0ed      	beq.n	800d7d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800d7f4:	2313      	movs	r3, #19
 800d7f6:	18fb      	adds	r3, r7, r3
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d154      	bne.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d7fe:	4ba6      	ldr	r3, [pc, #664]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d800:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d802:	23c0      	movs	r3, #192	@ 0xc0
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4013      	ands	r3, r2
 800d808:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d019      	beq.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	429a      	cmp	r2, r3
 800d818:	d014      	beq.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d81a:	4b9f      	ldr	r3, [pc, #636]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d81c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d81e:	4aa0      	ldr	r2, [pc, #640]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800d820:	4013      	ands	r3, r2
 800d822:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d824:	4b9c      	ldr	r3, [pc, #624]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d826:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d828:	4b9b      	ldr	r3, [pc, #620]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d82a:	2180      	movs	r1, #128	@ 0x80
 800d82c:	0249      	lsls	r1, r1, #9
 800d82e:	430a      	orrs	r2, r1
 800d830:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d832:	4b99      	ldr	r3, [pc, #612]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d834:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d836:	4b98      	ldr	r3, [pc, #608]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d838:	499a      	ldr	r1, [pc, #616]	@ (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800d83a:	400a      	ands	r2, r1
 800d83c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d83e:	4b96      	ldr	r3, [pc, #600]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d840:	697a      	ldr	r2, [r7, #20]
 800d842:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	2201      	movs	r2, #1
 800d848:	4013      	ands	r3, r2
 800d84a:	d016      	beq.n	800d87a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d84c:	f7fe f860 	bl	800b910 <HAL_GetTick>
 800d850:	0003      	movs	r3, r0
 800d852:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d854:	e00c      	b.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d856:	f7fe f85b 	bl	800b910 <HAL_GetTick>
 800d85a:	0002      	movs	r2, r0
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	4a91      	ldr	r2, [pc, #580]	@ (800daa8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d904      	bls.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800d866:	2313      	movs	r3, #19
 800d868:	18fb      	adds	r3, r7, r3
 800d86a:	2203      	movs	r2, #3
 800d86c:	701a      	strb	r2, [r3, #0]
            break;
 800d86e:	e004      	b.n	800d87a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d870:	4b89      	ldr	r3, [pc, #548]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d874:	2202      	movs	r2, #2
 800d876:	4013      	ands	r3, r2
 800d878:	d0ed      	beq.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800d87a:	2313      	movs	r3, #19
 800d87c:	18fb      	adds	r3, r7, r3
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10a      	bne.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d884:	4b84      	ldr	r3, [pc, #528]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d888:	4a85      	ldr	r2, [pc, #532]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800d88a:	4013      	ands	r3, r2
 800d88c:	0019      	movs	r1, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d892:	4b81      	ldr	r3, [pc, #516]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d894:	430a      	orrs	r2, r1
 800d896:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d898:	e00c      	b.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d89a:	2312      	movs	r3, #18
 800d89c:	18fb      	adds	r3, r7, r3
 800d89e:	2213      	movs	r2, #19
 800d8a0:	18ba      	adds	r2, r7, r2
 800d8a2:	7812      	ldrb	r2, [r2, #0]
 800d8a4:	701a      	strb	r2, [r3, #0]
 800d8a6:	e005      	b.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8a8:	2312      	movs	r3, #18
 800d8aa:	18fb      	adds	r3, r7, r3
 800d8ac:	2213      	movs	r2, #19
 800d8ae:	18ba      	adds	r2, r7, r2
 800d8b0:	7812      	ldrb	r2, [r2, #0]
 800d8b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d8b4:	2311      	movs	r3, #17
 800d8b6:	18fb      	adds	r3, r7, r3
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d105      	bne.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d8be:	4b76      	ldr	r3, [pc, #472]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d8c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d8c2:	4b75      	ldr	r3, [pc, #468]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d8c4:	4979      	ldr	r1, [pc, #484]	@ (800daac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800d8c6:	400a      	ands	r2, r1
 800d8c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	d009      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d8d4:	4b70      	ldr	r3, [pc, #448]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d8d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8d8:	2203      	movs	r2, #3
 800d8da:	4393      	bics	r3, r2
 800d8dc:	0019      	movs	r1, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	685a      	ldr	r2, [r3, #4]
 800d8e2:	4b6d      	ldr	r3, [pc, #436]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d8e4:	430a      	orrs	r2, r1
 800d8e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2202      	movs	r2, #2
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	d009      	beq.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d8f2:	4b69      	ldr	r3, [pc, #420]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8f6:	220c      	movs	r2, #12
 800d8f8:	4393      	bics	r3, r2
 800d8fa:	0019      	movs	r1, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	689a      	ldr	r2, [r3, #8]
 800d900:	4b65      	ldr	r3, [pc, #404]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d902:	430a      	orrs	r2, r1
 800d904:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2210      	movs	r2, #16
 800d90c:	4013      	ands	r3, r2
 800d90e:	d009      	beq.n	800d924 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d910:	4b61      	ldr	r3, [pc, #388]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d914:	4a66      	ldr	r2, [pc, #408]	@ (800dab0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800d916:	4013      	ands	r3, r2
 800d918:	0019      	movs	r1, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68da      	ldr	r2, [r3, #12]
 800d91e:	4b5e      	ldr	r3, [pc, #376]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d920:	430a      	orrs	r2, r1
 800d922:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	2380      	movs	r3, #128	@ 0x80
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4013      	ands	r3, r2
 800d92e:	d009      	beq.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d930:	4b59      	ldr	r3, [pc, #356]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d934:	4a5f      	ldr	r2, [pc, #380]	@ (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800d936:	4013      	ands	r3, r2
 800d938:	0019      	movs	r1, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	699a      	ldr	r2, [r3, #24]
 800d93e:	4b56      	ldr	r3, [pc, #344]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d940:	430a      	orrs	r2, r1
 800d942:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	2380      	movs	r3, #128	@ 0x80
 800d94a:	00db      	lsls	r3, r3, #3
 800d94c:	4013      	ands	r3, r2
 800d94e:	d009      	beq.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d950:	4b51      	ldr	r3, [pc, #324]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d954:	4a58      	ldr	r2, [pc, #352]	@ (800dab8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d956:	4013      	ands	r3, r2
 800d958:	0019      	movs	r1, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	69da      	ldr	r2, [r3, #28]
 800d95e:	4b4e      	ldr	r3, [pc, #312]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d960:	430a      	orrs	r2, r1
 800d962:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2220      	movs	r2, #32
 800d96a:	4013      	ands	r3, r2
 800d96c:	d009      	beq.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d96e:	4b4a      	ldr	r3, [pc, #296]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d972:	4a52      	ldr	r2, [pc, #328]	@ (800dabc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800d974:	4013      	ands	r3, r2
 800d976:	0019      	movs	r1, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	691a      	ldr	r2, [r3, #16]
 800d97c:	4b46      	ldr	r3, [pc, #280]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d97e:	430a      	orrs	r2, r1
 800d980:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	2380      	movs	r3, #128	@ 0x80
 800d988:	01db      	lsls	r3, r3, #7
 800d98a:	4013      	ands	r3, r2
 800d98c:	d015      	beq.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d98e:	4b42      	ldr	r3, [pc, #264]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	0899      	lsrs	r1, r3, #2
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6a1a      	ldr	r2, [r3, #32]
 800d99a:	4b3f      	ldr	r3, [pc, #252]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d99c:	430a      	orrs	r2, r1
 800d99e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a1a      	ldr	r2, [r3, #32]
 800d9a4:	2380      	movs	r3, #128	@ 0x80
 800d9a6:	05db      	lsls	r3, r3, #23
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d106      	bne.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800d9ac:	4b3a      	ldr	r3, [pc, #232]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d9ae:	68da      	ldr	r2, [r3, #12]
 800d9b0:	4b39      	ldr	r3, [pc, #228]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d9b2:	2180      	movs	r1, #128	@ 0x80
 800d9b4:	0249      	lsls	r1, r1, #9
 800d9b6:	430a      	orrs	r2, r1
 800d9b8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	2380      	movs	r3, #128	@ 0x80
 800d9c0:	031b      	lsls	r3, r3, #12
 800d9c2:	4013      	ands	r3, r2
 800d9c4:	d009      	beq.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d9c6:	4b34      	ldr	r3, [pc, #208]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d9c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ca:	2240      	movs	r2, #64	@ 0x40
 800d9cc:	4393      	bics	r3, r2
 800d9ce:	0019      	movs	r1, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9d4:	4b30      	ldr	r3, [pc, #192]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d9d6:	430a      	orrs	r2, r1
 800d9d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	2380      	movs	r3, #128	@ 0x80
 800d9e0:	039b      	lsls	r3, r3, #14
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	d016      	beq.n	800da14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800d9e6:	4b2c      	ldr	r3, [pc, #176]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d9e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ea:	4a35      	ldr	r2, [pc, #212]	@ (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	0019      	movs	r1, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d9f4:	4b28      	ldr	r3, [pc, #160]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800d9f6:	430a      	orrs	r2, r1
 800d9f8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d9fe:	2380      	movs	r3, #128	@ 0x80
 800da00:	03db      	lsls	r3, r3, #15
 800da02:	429a      	cmp	r2, r3
 800da04:	d106      	bne.n	800da14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800da06:	4b24      	ldr	r3, [pc, #144]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da08:	68da      	ldr	r2, [r3, #12]
 800da0a:	4b23      	ldr	r3, [pc, #140]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da0c:	2180      	movs	r1, #128	@ 0x80
 800da0e:	0449      	lsls	r1, r1, #17
 800da10:	430a      	orrs	r2, r1
 800da12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	2380      	movs	r3, #128	@ 0x80
 800da1a:	03db      	lsls	r3, r3, #15
 800da1c:	4013      	ands	r3, r2
 800da1e:	d016      	beq.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800da20:	4b1d      	ldr	r3, [pc, #116]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da24:	4a27      	ldr	r2, [pc, #156]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800da26:	4013      	ands	r3, r2
 800da28:	0019      	movs	r1, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da2e:	4b1a      	ldr	r3, [pc, #104]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da30:	430a      	orrs	r2, r1
 800da32:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da38:	2380      	movs	r3, #128	@ 0x80
 800da3a:	045b      	lsls	r3, r3, #17
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d106      	bne.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800da40:	4b15      	ldr	r3, [pc, #84]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da42:	68da      	ldr	r2, [r3, #12]
 800da44:	4b14      	ldr	r3, [pc, #80]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da46:	2180      	movs	r1, #128	@ 0x80
 800da48:	0449      	lsls	r1, r1, #17
 800da4a:	430a      	orrs	r2, r1
 800da4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	2380      	movs	r3, #128	@ 0x80
 800da54:	011b      	lsls	r3, r3, #4
 800da56:	4013      	ands	r3, r2
 800da58:	d016      	beq.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800da5a:	4b0f      	ldr	r3, [pc, #60]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da5e:	4a1a      	ldr	r2, [pc, #104]	@ (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800da60:	4013      	ands	r3, r2
 800da62:	0019      	movs	r1, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	695a      	ldr	r2, [r3, #20]
 800da68:	4b0b      	ldr	r3, [pc, #44]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da6a:	430a      	orrs	r2, r1
 800da6c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	695a      	ldr	r2, [r3, #20]
 800da72:	2380      	movs	r3, #128	@ 0x80
 800da74:	01db      	lsls	r3, r3, #7
 800da76:	429a      	cmp	r2, r3
 800da78:	d106      	bne.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800da7a:	4b07      	ldr	r3, [pc, #28]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da7c:	68da      	ldr	r2, [r3, #12]
 800da7e:	4b06      	ldr	r3, [pc, #24]	@ (800da98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800da80:	2180      	movs	r1, #128	@ 0x80
 800da82:	0249      	lsls	r1, r1, #9
 800da84:	430a      	orrs	r2, r1
 800da86:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800da88:	2312      	movs	r3, #18
 800da8a:	18fb      	adds	r3, r7, r3
 800da8c:	781b      	ldrb	r3, [r3, #0]
}
 800da8e:	0018      	movs	r0, r3
 800da90:	46bd      	mov	sp, r7
 800da92:	b006      	add	sp, #24
 800da94:	bd80      	pop	{r7, pc}
 800da96:	46c0      	nop			@ (mov r8, r8)
 800da98:	40021000 	.word	0x40021000
 800da9c:	40007000 	.word	0x40007000
 800daa0:	fffffcff 	.word	0xfffffcff
 800daa4:	fffeffff 	.word	0xfffeffff
 800daa8:	00001388 	.word	0x00001388
 800daac:	efffffff 	.word	0xefffffff
 800dab0:	fffff3ff 	.word	0xfffff3ff
 800dab4:	fff3ffff 	.word	0xfff3ffff
 800dab8:	ffcfffff 	.word	0xffcfffff
 800dabc:	ffffcfff 	.word	0xffffcfff
 800dac0:	ffbfffff 	.word	0xffbfffff
 800dac4:	feffffff 	.word	0xfeffffff
 800dac8:	ffff3fff 	.word	0xffff3fff

0800dacc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	e0a8      	b.n	800dc30 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d109      	bne.n	800dafa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	685a      	ldr	r2, [r3, #4]
 800daea:	2382      	movs	r3, #130	@ 0x82
 800daec:	005b      	lsls	r3, r3, #1
 800daee:	429a      	cmp	r2, r3
 800daf0:	d009      	beq.n	800db06 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	61da      	str	r2, [r3, #28]
 800daf8:	e005      	b.n	800db06 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	225d      	movs	r2, #93	@ 0x5d
 800db10:	5c9b      	ldrb	r3, [r3, r2]
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b00      	cmp	r3, #0
 800db16:	d107      	bne.n	800db28 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	225c      	movs	r2, #92	@ 0x5c
 800db1c:	2100      	movs	r1, #0
 800db1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	0018      	movs	r0, r3
 800db24:	f7fc ffaa 	bl	800aa7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	225d      	movs	r2, #93	@ 0x5d
 800db2c:	2102      	movs	r1, #2
 800db2e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2140      	movs	r1, #64	@ 0x40
 800db3c:	438a      	bics	r2, r1
 800db3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	68da      	ldr	r2, [r3, #12]
 800db44:	23e0      	movs	r3, #224	@ 0xe0
 800db46:	00db      	lsls	r3, r3, #3
 800db48:	429a      	cmp	r2, r3
 800db4a:	d902      	bls.n	800db52 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800db4c:	2300      	movs	r3, #0
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	e002      	b.n	800db58 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800db52:	2380      	movs	r3, #128	@ 0x80
 800db54:	015b      	lsls	r3, r3, #5
 800db56:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68da      	ldr	r2, [r3, #12]
 800db5c:	23f0      	movs	r3, #240	@ 0xf0
 800db5e:	011b      	lsls	r3, r3, #4
 800db60:	429a      	cmp	r2, r3
 800db62:	d008      	beq.n	800db76 <HAL_SPI_Init+0xaa>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	68da      	ldr	r2, [r3, #12]
 800db68:	23e0      	movs	r3, #224	@ 0xe0
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d002      	beq.n	800db76 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	685a      	ldr	r2, [r3, #4]
 800db7a:	2382      	movs	r3, #130	@ 0x82
 800db7c:	005b      	lsls	r3, r3, #1
 800db7e:	401a      	ands	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6899      	ldr	r1, [r3, #8]
 800db84:	2384      	movs	r3, #132	@ 0x84
 800db86:	021b      	lsls	r3, r3, #8
 800db88:	400b      	ands	r3, r1
 800db8a:	431a      	orrs	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	2102      	movs	r1, #2
 800db92:	400b      	ands	r3, r1
 800db94:	431a      	orrs	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	695b      	ldr	r3, [r3, #20]
 800db9a:	2101      	movs	r1, #1
 800db9c:	400b      	ands	r3, r1
 800db9e:	431a      	orrs	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6999      	ldr	r1, [r3, #24]
 800dba4:	2380      	movs	r3, #128	@ 0x80
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	400b      	ands	r3, r1
 800dbaa:	431a      	orrs	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	69db      	ldr	r3, [r3, #28]
 800dbb0:	2138      	movs	r1, #56	@ 0x38
 800dbb2:	400b      	ands	r3, r1
 800dbb4:	431a      	orrs	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6a1b      	ldr	r3, [r3, #32]
 800dbba:	2180      	movs	r1, #128	@ 0x80
 800dbbc:	400b      	ands	r3, r1
 800dbbe:	431a      	orrs	r2, r3
 800dbc0:	0011      	movs	r1, r2
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dbc6:	2380      	movs	r3, #128	@ 0x80
 800dbc8:	019b      	lsls	r3, r3, #6
 800dbca:	401a      	ands	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	430a      	orrs	r2, r1
 800dbd2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	699b      	ldr	r3, [r3, #24]
 800dbd8:	0c1b      	lsrs	r3, r3, #16
 800dbda:	2204      	movs	r2, #4
 800dbdc:	401a      	ands	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbe2:	2110      	movs	r1, #16
 800dbe4:	400b      	ands	r3, r1
 800dbe6:	431a      	orrs	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbec:	2108      	movs	r1, #8
 800dbee:	400b      	ands	r3, r1
 800dbf0:	431a      	orrs	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	68d9      	ldr	r1, [r3, #12]
 800dbf6:	23f0      	movs	r3, #240	@ 0xf0
 800dbf8:	011b      	lsls	r3, r3, #4
 800dbfa:	400b      	ands	r3, r1
 800dbfc:	431a      	orrs	r2, r3
 800dbfe:	0011      	movs	r1, r2
 800dc00:	68fa      	ldr	r2, [r7, #12]
 800dc02:	2380      	movs	r3, #128	@ 0x80
 800dc04:	015b      	lsls	r3, r3, #5
 800dc06:	401a      	ands	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	69da      	ldr	r2, [r3, #28]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4907      	ldr	r1, [pc, #28]	@ (800dc38 <HAL_SPI_Init+0x16c>)
 800dc1c:	400a      	ands	r2, r1
 800dc1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	225d      	movs	r2, #93	@ 0x5d
 800dc2a:	2101      	movs	r1, #1
 800dc2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	0018      	movs	r0, r3
 800dc32:	46bd      	mov	sp, r7
 800dc34:	b004      	add	sp, #16
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	fffff7ff 	.word	0xfffff7ff

0800dc3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	603b      	str	r3, [r7, #0]
 800dc48:	1dbb      	adds	r3, r7, #6
 800dc4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dc4c:	231f      	movs	r3, #31
 800dc4e:	18fb      	adds	r3, r7, r3
 800dc50:	2200      	movs	r2, #0
 800dc52:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	225c      	movs	r2, #92	@ 0x5c
 800dc58:	5c9b      	ldrb	r3, [r3, r2]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d101      	bne.n	800dc62 <HAL_SPI_Transmit+0x26>
 800dc5e:	2302      	movs	r3, #2
 800dc60:	e147      	b.n	800def2 <HAL_SPI_Transmit+0x2b6>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	225c      	movs	r2, #92	@ 0x5c
 800dc66:	2101      	movs	r1, #1
 800dc68:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc6a:	f7fd fe51 	bl	800b910 <HAL_GetTick>
 800dc6e:	0003      	movs	r3, r0
 800dc70:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800dc72:	2316      	movs	r3, #22
 800dc74:	18fb      	adds	r3, r7, r3
 800dc76:	1dba      	adds	r2, r7, #6
 800dc78:	8812      	ldrh	r2, [r2, #0]
 800dc7a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	225d      	movs	r2, #93	@ 0x5d
 800dc80:	5c9b      	ldrb	r3, [r3, r2]
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d004      	beq.n	800dc92 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800dc88:	231f      	movs	r3, #31
 800dc8a:	18fb      	adds	r3, r7, r3
 800dc8c:	2202      	movs	r2, #2
 800dc8e:	701a      	strb	r2, [r3, #0]
    goto error;
 800dc90:	e128      	b.n	800dee4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d003      	beq.n	800dca0 <HAL_SPI_Transmit+0x64>
 800dc98:	1dbb      	adds	r3, r7, #6
 800dc9a:	881b      	ldrh	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d104      	bne.n	800dcaa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800dca0:	231f      	movs	r3, #31
 800dca2:	18fb      	adds	r3, r7, r3
 800dca4:	2201      	movs	r2, #1
 800dca6:	701a      	strb	r2, [r3, #0]
    goto error;
 800dca8:	e11c      	b.n	800dee4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	225d      	movs	r2, #93	@ 0x5d
 800dcae:	2103      	movs	r1, #3
 800dcb0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	1dba      	adds	r2, r7, #6
 800dcc2:	8812      	ldrh	r2, [r2, #0]
 800dcc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	1dba      	adds	r2, r7, #6
 800dcca:	8812      	ldrh	r2, [r2, #0]
 800dccc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2244      	movs	r2, #68	@ 0x44
 800dcd8:	2100      	movs	r1, #0
 800dcda:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2246      	movs	r2, #70	@ 0x46
 800dce0:	2100      	movs	r1, #0
 800dce2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2200      	movs	r2, #0
 800dcee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	689a      	ldr	r2, [r3, #8]
 800dcf4:	2380      	movs	r3, #128	@ 0x80
 800dcf6:	021b      	lsls	r3, r3, #8
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d110      	bne.n	800dd1e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2140      	movs	r1, #64	@ 0x40
 800dd08:	438a      	bics	r2, r1
 800dd0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2180      	movs	r1, #128	@ 0x80
 800dd18:	01c9      	lsls	r1, r1, #7
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2240      	movs	r2, #64	@ 0x40
 800dd26:	4013      	ands	r3, r2
 800dd28:	2b40      	cmp	r3, #64	@ 0x40
 800dd2a:	d007      	beq.n	800dd3c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2140      	movs	r1, #64	@ 0x40
 800dd38:	430a      	orrs	r2, r1
 800dd3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	68da      	ldr	r2, [r3, #12]
 800dd40:	23e0      	movs	r3, #224	@ 0xe0
 800dd42:	00db      	lsls	r3, r3, #3
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d952      	bls.n	800ddee <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d004      	beq.n	800dd5a <HAL_SPI_Transmit+0x11e>
 800dd50:	2316      	movs	r3, #22
 800dd52:	18fb      	adds	r3, r7, r3
 800dd54:	881b      	ldrh	r3, [r3, #0]
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d143      	bne.n	800dde2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd5e:	881a      	ldrh	r2, [r3, #0]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd6a:	1c9a      	adds	r2, r3, #2
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	3b01      	subs	r3, #1
 800dd78:	b29a      	uxth	r2, r3
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dd7e:	e030      	b.n	800dde2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	2202      	movs	r2, #2
 800dd88:	4013      	ands	r3, r2
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d112      	bne.n	800ddb4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd92:	881a      	ldrh	r2, [r3, #0]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd9e:	1c9a      	adds	r2, r3, #2
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ddb2:	e016      	b.n	800dde2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddb4:	f7fd fdac 	bl	800b910 <HAL_GetTick>
 800ddb8:	0002      	movs	r2, r0
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	683a      	ldr	r2, [r7, #0]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d802      	bhi.n	800ddca <HAL_SPI_Transmit+0x18e>
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	d102      	bne.n	800ddd0 <HAL_SPI_Transmit+0x194>
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d108      	bne.n	800dde2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800ddd0:	231f      	movs	r3, #31
 800ddd2:	18fb      	adds	r3, r7, r3
 800ddd4:	2203      	movs	r2, #3
 800ddd6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	225d      	movs	r2, #93	@ 0x5d
 800dddc:	2101      	movs	r1, #1
 800ddde:	5499      	strb	r1, [r3, r2]
          goto error;
 800dde0:	e080      	b.n	800dee4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1c9      	bne.n	800dd80 <HAL_SPI_Transmit+0x144>
 800ddec:	e053      	b.n	800de96 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d004      	beq.n	800de00 <HAL_SPI_Transmit+0x1c4>
 800ddf6:	2316      	movs	r3, #22
 800ddf8:	18fb      	adds	r3, r7, r3
 800ddfa:	881b      	ldrh	r3, [r3, #0]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d145      	bne.n	800de8c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	330c      	adds	r3, #12
 800de0a:	7812      	ldrb	r2, [r2, #0]
 800de0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	3b01      	subs	r3, #1
 800de20:	b29a      	uxth	r2, r3
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800de26:	e031      	b.n	800de8c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	2202      	movs	r2, #2
 800de30:	4013      	ands	r3, r2
 800de32:	2b02      	cmp	r3, #2
 800de34:	d113      	bne.n	800de5e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	330c      	adds	r3, #12
 800de40:	7812      	ldrb	r2, [r2, #0]
 800de42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de48:	1c5a      	adds	r2, r3, #1
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de52:	b29b      	uxth	r3, r3
 800de54:	3b01      	subs	r3, #1
 800de56:	b29a      	uxth	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800de5c:	e016      	b.n	800de8c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de5e:	f7fd fd57 	bl	800b910 <HAL_GetTick>
 800de62:	0002      	movs	r2, r0
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	1ad3      	subs	r3, r2, r3
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d802      	bhi.n	800de74 <HAL_SPI_Transmit+0x238>
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	3301      	adds	r3, #1
 800de72:	d102      	bne.n	800de7a <HAL_SPI_Transmit+0x23e>
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d108      	bne.n	800de8c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800de7a:	231f      	movs	r3, #31
 800de7c:	18fb      	adds	r3, r7, r3
 800de7e:	2203      	movs	r2, #3
 800de80:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	225d      	movs	r2, #93	@ 0x5d
 800de86:	2101      	movs	r1, #1
 800de88:	5499      	strb	r1, [r3, r2]
          goto error;
 800de8a:	e02b      	b.n	800dee4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de90:	b29b      	uxth	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1c8      	bne.n	800de28 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800de96:	69ba      	ldr	r2, [r7, #24]
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	0018      	movs	r0, r3
 800de9e:	f000 fcef 	bl	800e880 <SPI_EndRxTxTransaction>
 800dea2:	1e03      	subs	r3, r0, #0
 800dea4:	d002      	beq.n	800deac <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2220      	movs	r2, #32
 800deaa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d10a      	bne.n	800deca <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800deb4:	2300      	movs	r3, #0
 800deb6:	613b      	str	r3, [r7, #16]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	613b      	str	r3, [r7, #16]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	613b      	str	r3, [r7, #16]
 800dec8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d004      	beq.n	800dedc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800ded2:	231f      	movs	r3, #31
 800ded4:	18fb      	adds	r3, r7, r3
 800ded6:	2201      	movs	r2, #1
 800ded8:	701a      	strb	r2, [r3, #0]
 800deda:	e003      	b.n	800dee4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	225d      	movs	r2, #93	@ 0x5d
 800dee0:	2101      	movs	r1, #1
 800dee2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	225c      	movs	r2, #92	@ 0x5c
 800dee8:	2100      	movs	r1, #0
 800deea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800deec:	231f      	movs	r3, #31
 800deee:	18fb      	adds	r3, r7, r3
 800def0:	781b      	ldrb	r3, [r3, #0]
}
 800def2:	0018      	movs	r0, r3
 800def4:	46bd      	mov	sp, r7
 800def6:	b008      	add	sp, #32
 800def8:	bd80      	pop	{r7, pc}
	...

0800defc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800defc:	b590      	push	{r4, r7, lr}
 800defe:	b089      	sub	sp, #36	@ 0x24
 800df00:	af02      	add	r7, sp, #8
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	603b      	str	r3, [r7, #0]
 800df08:	1dbb      	adds	r3, r7, #6
 800df0a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df0c:	2117      	movs	r1, #23
 800df0e:	187b      	adds	r3, r7, r1
 800df10:	2200      	movs	r2, #0
 800df12:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	225d      	movs	r2, #93	@ 0x5d
 800df18:	5c9b      	ldrb	r3, [r3, r2]
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d003      	beq.n	800df28 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800df20:	187b      	adds	r3, r7, r1
 800df22:	2202      	movs	r2, #2
 800df24:	701a      	strb	r2, [r3, #0]
    goto error;
 800df26:	e12b      	b.n	800e180 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	685a      	ldr	r2, [r3, #4]
 800df2c:	2382      	movs	r3, #130	@ 0x82
 800df2e:	005b      	lsls	r3, r3, #1
 800df30:	429a      	cmp	r2, r3
 800df32:	d113      	bne.n	800df5c <HAL_SPI_Receive+0x60>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10f      	bne.n	800df5c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	225d      	movs	r2, #93	@ 0x5d
 800df40:	2104      	movs	r1, #4
 800df42:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800df44:	1dbb      	adds	r3, r7, #6
 800df46:	881c      	ldrh	r4, [r3, #0]
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	68b9      	ldr	r1, [r7, #8]
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	0023      	movs	r3, r4
 800df54:	f000 f924 	bl	800e1a0 <HAL_SPI_TransmitReceive>
 800df58:	0003      	movs	r3, r0
 800df5a:	e118      	b.n	800e18e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	225c      	movs	r2, #92	@ 0x5c
 800df60:	5c9b      	ldrb	r3, [r3, r2]
 800df62:	2b01      	cmp	r3, #1
 800df64:	d101      	bne.n	800df6a <HAL_SPI_Receive+0x6e>
 800df66:	2302      	movs	r3, #2
 800df68:	e111      	b.n	800e18e <HAL_SPI_Receive+0x292>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	225c      	movs	r2, #92	@ 0x5c
 800df6e:	2101      	movs	r1, #1
 800df70:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df72:	f7fd fccd 	bl	800b910 <HAL_GetTick>
 800df76:	0003      	movs	r3, r0
 800df78:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d003      	beq.n	800df88 <HAL_SPI_Receive+0x8c>
 800df80:	1dbb      	adds	r3, r7, #6
 800df82:	881b      	ldrh	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d104      	bne.n	800df92 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800df88:	2317      	movs	r3, #23
 800df8a:	18fb      	adds	r3, r7, r3
 800df8c:	2201      	movs	r2, #1
 800df8e:	701a      	strb	r2, [r3, #0]
    goto error;
 800df90:	e0f6      	b.n	800e180 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	225d      	movs	r2, #93	@ 0x5d
 800df96:	2104      	movs	r1, #4
 800df98:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	1dba      	adds	r2, r7, #6
 800dfaa:	2144      	movs	r1, #68	@ 0x44
 800dfac:	8812      	ldrh	r2, [r2, #0]
 800dfae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	1dba      	adds	r2, r7, #6
 800dfb4:	2146      	movs	r1, #70	@ 0x46
 800dfb6:	8812      	ldrh	r2, [r2, #0]
 800dfb8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	68da      	ldr	r2, [r3, #12]
 800dfdc:	23e0      	movs	r3, #224	@ 0xe0
 800dfde:	00db      	lsls	r3, r3, #3
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d908      	bls.n	800dff6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685a      	ldr	r2, [r3, #4]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	496a      	ldr	r1, [pc, #424]	@ (800e198 <HAL_SPI_Receive+0x29c>)
 800dff0:	400a      	ands	r2, r1
 800dff2:	605a      	str	r2, [r3, #4]
 800dff4:	e008      	b.n	800e008 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2180      	movs	r1, #128	@ 0x80
 800e002:	0149      	lsls	r1, r1, #5
 800e004:	430a      	orrs	r2, r1
 800e006:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	689a      	ldr	r2, [r3, #8]
 800e00c:	2380      	movs	r3, #128	@ 0x80
 800e00e:	021b      	lsls	r3, r3, #8
 800e010:	429a      	cmp	r2, r3
 800e012:	d10f      	bne.n	800e034 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2140      	movs	r1, #64	@ 0x40
 800e020:	438a      	bics	r2, r1
 800e022:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	495b      	ldr	r1, [pc, #364]	@ (800e19c <HAL_SPI_Receive+0x2a0>)
 800e030:	400a      	ands	r2, r1
 800e032:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2240      	movs	r2, #64	@ 0x40
 800e03c:	4013      	ands	r3, r2
 800e03e:	2b40      	cmp	r3, #64	@ 0x40
 800e040:	d007      	beq.n	800e052 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2140      	movs	r1, #64	@ 0x40
 800e04e:	430a      	orrs	r2, r1
 800e050:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	68da      	ldr	r2, [r3, #12]
 800e056:	23e0      	movs	r3, #224	@ 0xe0
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d900      	bls.n	800e060 <HAL_SPI_Receive+0x164>
 800e05e:	e071      	b.n	800e144 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e060:	e035      	b.n	800e0ce <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	2201      	movs	r2, #1
 800e06a:	4013      	ands	r3, r2
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d117      	bne.n	800e0a0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	330c      	adds	r3, #12
 800e076:	001a      	movs	r2, r3
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e07c:	7812      	ldrb	r2, [r2, #0]
 800e07e:	b2d2      	uxtb	r2, r2
 800e080:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e086:	1c5a      	adds	r2, r3, #1
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2246      	movs	r2, #70	@ 0x46
 800e090:	5a9b      	ldrh	r3, [r3, r2]
 800e092:	b29b      	uxth	r3, r3
 800e094:	3b01      	subs	r3, #1
 800e096:	b299      	uxth	r1, r3
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2246      	movs	r2, #70	@ 0x46
 800e09c:	5299      	strh	r1, [r3, r2]
 800e09e:	e016      	b.n	800e0ce <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0a0:	f7fd fc36 	bl	800b910 <HAL_GetTick>
 800e0a4:	0002      	movs	r2, r0
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d802      	bhi.n	800e0b6 <HAL_SPI_Receive+0x1ba>
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	d102      	bne.n	800e0bc <HAL_SPI_Receive+0x1c0>
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d108      	bne.n	800e0ce <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800e0bc:	2317      	movs	r3, #23
 800e0be:	18fb      	adds	r3, r7, r3
 800e0c0:	2203      	movs	r2, #3
 800e0c2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	225d      	movs	r2, #93	@ 0x5d
 800e0c8:	2101      	movs	r1, #1
 800e0ca:	5499      	strb	r1, [r3, r2]
          goto error;
 800e0cc:	e058      	b.n	800e180 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2246      	movs	r2, #70	@ 0x46
 800e0d2:	5a9b      	ldrh	r3, [r3, r2]
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d1c3      	bne.n	800e062 <HAL_SPI_Receive+0x166>
 800e0da:	e039      	b.n	800e150 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	4013      	ands	r3, r2
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d115      	bne.n	800e116 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68da      	ldr	r2, [r3, #12]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0f4:	b292      	uxth	r2, r2
 800e0f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0fc:	1c9a      	adds	r2, r3, #2
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2246      	movs	r2, #70	@ 0x46
 800e106:	5a9b      	ldrh	r3, [r3, r2]
 800e108:	b29b      	uxth	r3, r3
 800e10a:	3b01      	subs	r3, #1
 800e10c:	b299      	uxth	r1, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2246      	movs	r2, #70	@ 0x46
 800e112:	5299      	strh	r1, [r3, r2]
 800e114:	e016      	b.n	800e144 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e116:	f7fd fbfb 	bl	800b910 <HAL_GetTick>
 800e11a:	0002      	movs	r2, r0
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	429a      	cmp	r2, r3
 800e124:	d802      	bhi.n	800e12c <HAL_SPI_Receive+0x230>
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	3301      	adds	r3, #1
 800e12a:	d102      	bne.n	800e132 <HAL_SPI_Receive+0x236>
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d108      	bne.n	800e144 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800e132:	2317      	movs	r3, #23
 800e134:	18fb      	adds	r3, r7, r3
 800e136:	2203      	movs	r2, #3
 800e138:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	225d      	movs	r2, #93	@ 0x5d
 800e13e:	2101      	movs	r1, #1
 800e140:	5499      	strb	r1, [r3, r2]
          goto error;
 800e142:	e01d      	b.n	800e180 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2246      	movs	r2, #70	@ 0x46
 800e148:	5a9b      	ldrh	r3, [r3, r2]
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d1c5      	bne.n	800e0dc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e150:	693a      	ldr	r2, [r7, #16]
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	0018      	movs	r0, r3
 800e158:	f000 fb34 	bl	800e7c4 <SPI_EndRxTransaction>
 800e15c:	1e03      	subs	r3, r0, #0
 800e15e:	d002      	beq.n	800e166 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2220      	movs	r2, #32
 800e164:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d004      	beq.n	800e178 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800e16e:	2317      	movs	r3, #23
 800e170:	18fb      	adds	r3, r7, r3
 800e172:	2201      	movs	r2, #1
 800e174:	701a      	strb	r2, [r3, #0]
 800e176:	e003      	b.n	800e180 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	225d      	movs	r2, #93	@ 0x5d
 800e17c:	2101      	movs	r1, #1
 800e17e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	225c      	movs	r2, #92	@ 0x5c
 800e184:	2100      	movs	r1, #0
 800e186:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800e188:	2317      	movs	r3, #23
 800e18a:	18fb      	adds	r3, r7, r3
 800e18c:	781b      	ldrb	r3, [r3, #0]
}
 800e18e:	0018      	movs	r0, r3
 800e190:	46bd      	mov	sp, r7
 800e192:	b007      	add	sp, #28
 800e194:	bd90      	pop	{r4, r7, pc}
 800e196:	46c0      	nop			@ (mov r8, r8)
 800e198:	ffffefff 	.word	0xffffefff
 800e19c:	ffffbfff 	.word	0xffffbfff

0800e1a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b08a      	sub	sp, #40	@ 0x28
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	607a      	str	r2, [r7, #4]
 800e1ac:	001a      	movs	r2, r3
 800e1ae:	1cbb      	adds	r3, r7, #2
 800e1b0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e1b6:	2323      	movs	r3, #35	@ 0x23
 800e1b8:	18fb      	adds	r3, r7, r3
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	225c      	movs	r2, #92	@ 0x5c
 800e1c2:	5c9b      	ldrb	r3, [r3, r2]
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d101      	bne.n	800e1cc <HAL_SPI_TransmitReceive+0x2c>
 800e1c8:	2302      	movs	r3, #2
 800e1ca:	e1c4      	b.n	800e556 <HAL_SPI_TransmitReceive+0x3b6>
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	225c      	movs	r2, #92	@ 0x5c
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1d4:	f7fd fb9c 	bl	800b910 <HAL_GetTick>
 800e1d8:	0003      	movs	r3, r0
 800e1da:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e1dc:	201b      	movs	r0, #27
 800e1de:	183b      	adds	r3, r7, r0
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	215d      	movs	r1, #93	@ 0x5d
 800e1e4:	5c52      	ldrb	r2, [r2, r1]
 800e1e6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e1ee:	2312      	movs	r3, #18
 800e1f0:	18fb      	adds	r3, r7, r3
 800e1f2:	1cba      	adds	r2, r7, #2
 800e1f4:	8812      	ldrh	r2, [r2, #0]
 800e1f6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e1f8:	183b      	adds	r3, r7, r0
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d011      	beq.n	800e224 <HAL_SPI_TransmitReceive+0x84>
 800e200:	697a      	ldr	r2, [r7, #20]
 800e202:	2382      	movs	r3, #130	@ 0x82
 800e204:	005b      	lsls	r3, r3, #1
 800e206:	429a      	cmp	r2, r3
 800e208:	d107      	bne.n	800e21a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d103      	bne.n	800e21a <HAL_SPI_TransmitReceive+0x7a>
 800e212:	183b      	adds	r3, r7, r0
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b04      	cmp	r3, #4
 800e218:	d004      	beq.n	800e224 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800e21a:	2323      	movs	r3, #35	@ 0x23
 800e21c:	18fb      	adds	r3, r7, r3
 800e21e:	2202      	movs	r2, #2
 800e220:	701a      	strb	r2, [r3, #0]
    goto error;
 800e222:	e191      	b.n	800e548 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d006      	beq.n	800e238 <HAL_SPI_TransmitReceive+0x98>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d003      	beq.n	800e238 <HAL_SPI_TransmitReceive+0x98>
 800e230:	1cbb      	adds	r3, r7, #2
 800e232:	881b      	ldrh	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d104      	bne.n	800e242 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800e238:	2323      	movs	r3, #35	@ 0x23
 800e23a:	18fb      	adds	r3, r7, r3
 800e23c:	2201      	movs	r2, #1
 800e23e:	701a      	strb	r2, [r3, #0]
    goto error;
 800e240:	e182      	b.n	800e548 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	225d      	movs	r2, #93	@ 0x5d
 800e246:	5c9b      	ldrb	r3, [r3, r2]
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b04      	cmp	r3, #4
 800e24c:	d003      	beq.n	800e256 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	225d      	movs	r2, #93	@ 0x5d
 800e252:	2105      	movs	r1, #5
 800e254:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2200      	movs	r2, #0
 800e25a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	1cba      	adds	r2, r7, #2
 800e266:	2146      	movs	r1, #70	@ 0x46
 800e268:	8812      	ldrh	r2, [r2, #0]
 800e26a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	1cba      	adds	r2, r7, #2
 800e270:	2144      	movs	r1, #68	@ 0x44
 800e272:	8812      	ldrh	r2, [r2, #0]
 800e274:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	1cba      	adds	r2, r7, #2
 800e280:	8812      	ldrh	r2, [r2, #0]
 800e282:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	1cba      	adds	r2, r7, #2
 800e288:	8812      	ldrh	r2, [r2, #0]
 800e28a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	68da      	ldr	r2, [r3, #12]
 800e29c:	23e0      	movs	r3, #224	@ 0xe0
 800e29e:	00db      	lsls	r3, r3, #3
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d908      	bls.n	800e2b6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	49ac      	ldr	r1, [pc, #688]	@ (800e560 <HAL_SPI_TransmitReceive+0x3c0>)
 800e2b0:	400a      	ands	r2, r1
 800e2b2:	605a      	str	r2, [r3, #4]
 800e2b4:	e008      	b.n	800e2c8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2180      	movs	r1, #128	@ 0x80
 800e2c2:	0149      	lsls	r1, r1, #5
 800e2c4:	430a      	orrs	r2, r1
 800e2c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2240      	movs	r2, #64	@ 0x40
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	2b40      	cmp	r3, #64	@ 0x40
 800e2d4:	d007      	beq.n	800e2e6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2140      	movs	r1, #64	@ 0x40
 800e2e2:	430a      	orrs	r2, r1
 800e2e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	68da      	ldr	r2, [r3, #12]
 800e2ea:	23e0      	movs	r3, #224	@ 0xe0
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d800      	bhi.n	800e2f4 <HAL_SPI_TransmitReceive+0x154>
 800e2f2:	e083      	b.n	800e3fc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d005      	beq.n	800e308 <HAL_SPI_TransmitReceive+0x168>
 800e2fc:	2312      	movs	r3, #18
 800e2fe:	18fb      	adds	r3, r7, r3
 800e300:	881b      	ldrh	r3, [r3, #0]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d000      	beq.n	800e308 <HAL_SPI_TransmitReceive+0x168>
 800e306:	e06d      	b.n	800e3e4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e30c:	881a      	ldrh	r2, [r3, #0]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e318:	1c9a      	adds	r2, r3, #2
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e322:	b29b      	uxth	r3, r3
 800e324:	3b01      	subs	r3, #1
 800e326:	b29a      	uxth	r2, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e32c:	e05a      	b.n	800e3e4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	2202      	movs	r2, #2
 800e336:	4013      	ands	r3, r2
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d11b      	bne.n	800e374 <HAL_SPI_TransmitReceive+0x1d4>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e340:	b29b      	uxth	r3, r3
 800e342:	2b00      	cmp	r3, #0
 800e344:	d016      	beq.n	800e374 <HAL_SPI_TransmitReceive+0x1d4>
 800e346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d113      	bne.n	800e374 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e350:	881a      	ldrh	r2, [r3, #0]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e35c:	1c9a      	adds	r2, r3, #2
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e366:	b29b      	uxth	r3, r3
 800e368:	3b01      	subs	r3, #1
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e370:	2300      	movs	r3, #0
 800e372:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	689b      	ldr	r3, [r3, #8]
 800e37a:	2201      	movs	r2, #1
 800e37c:	4013      	ands	r3, r2
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d11c      	bne.n	800e3bc <HAL_SPI_TransmitReceive+0x21c>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2246      	movs	r2, #70	@ 0x46
 800e386:	5a9b      	ldrh	r3, [r3, r2]
 800e388:	b29b      	uxth	r3, r3
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d016      	beq.n	800e3bc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	68da      	ldr	r2, [r3, #12]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e398:	b292      	uxth	r2, r2
 800e39a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3a0:	1c9a      	adds	r2, r3, #2
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2246      	movs	r2, #70	@ 0x46
 800e3aa:	5a9b      	ldrh	r3, [r3, r2]
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	b299      	uxth	r1, r3
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2246      	movs	r2, #70	@ 0x46
 800e3b6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e3bc:	f7fd faa8 	bl	800b910 <HAL_GetTick>
 800e3c0:	0002      	movs	r2, r0
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d80b      	bhi.n	800e3e4 <HAL_SPI_TransmitReceive+0x244>
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	d008      	beq.n	800e3e4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800e3d2:	2323      	movs	r3, #35	@ 0x23
 800e3d4:	18fb      	adds	r3, r7, r3
 800e3d6:	2203      	movs	r2, #3
 800e3d8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	225d      	movs	r2, #93	@ 0x5d
 800e3de:	2101      	movs	r1, #1
 800e3e0:	5499      	strb	r1, [r3, r2]
        goto error;
 800e3e2:	e0b1      	b.n	800e548 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d19f      	bne.n	800e32e <HAL_SPI_TransmitReceive+0x18e>
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2246      	movs	r2, #70	@ 0x46
 800e3f2:	5a9b      	ldrh	r3, [r3, r2]
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d199      	bne.n	800e32e <HAL_SPI_TransmitReceive+0x18e>
 800e3fa:	e089      	b.n	800e510 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d005      	beq.n	800e410 <HAL_SPI_TransmitReceive+0x270>
 800e404:	2312      	movs	r3, #18
 800e406:	18fb      	adds	r3, r7, r3
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d000      	beq.n	800e410 <HAL_SPI_TransmitReceive+0x270>
 800e40e:	e074      	b.n	800e4fa <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	330c      	adds	r3, #12
 800e41a:	7812      	ldrb	r2, [r2, #0]
 800e41c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e422:	1c5a      	adds	r2, r3, #1
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	3b01      	subs	r3, #1
 800e430:	b29a      	uxth	r2, r3
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e436:	e060      	b.n	800e4fa <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	2202      	movs	r2, #2
 800e440:	4013      	ands	r3, r2
 800e442:	2b02      	cmp	r3, #2
 800e444:	d11c      	bne.n	800e480 <HAL_SPI_TransmitReceive+0x2e0>
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d017      	beq.n	800e480 <HAL_SPI_TransmitReceive+0x2e0>
 800e450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e452:	2b01      	cmp	r3, #1
 800e454:	d114      	bne.n	800e480 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	330c      	adds	r3, #12
 800e460:	7812      	ldrb	r2, [r2, #0]
 800e462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e472:	b29b      	uxth	r3, r3
 800e474:	3b01      	subs	r3, #1
 800e476:	b29a      	uxth	r2, r3
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e47c:	2300      	movs	r3, #0
 800e47e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	689b      	ldr	r3, [r3, #8]
 800e486:	2201      	movs	r2, #1
 800e488:	4013      	ands	r3, r2
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d11e      	bne.n	800e4cc <HAL_SPI_TransmitReceive+0x32c>
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2246      	movs	r2, #70	@ 0x46
 800e492:	5a9b      	ldrh	r3, [r3, r2]
 800e494:	b29b      	uxth	r3, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d018      	beq.n	800e4cc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	330c      	adds	r3, #12
 800e4a0:	001a      	movs	r2, r3
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4a6:	7812      	ldrb	r2, [r2, #0]
 800e4a8:	b2d2      	uxtb	r2, r2
 800e4aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2246      	movs	r2, #70	@ 0x46
 800e4ba:	5a9b      	ldrh	r3, [r3, r2]
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	b299      	uxth	r1, r3
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2246      	movs	r2, #70	@ 0x46
 800e4c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e4cc:	f7fd fa20 	bl	800b910 <HAL_GetTick>
 800e4d0:	0002      	movs	r2, r0
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	1ad3      	subs	r3, r2, r3
 800e4d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d802      	bhi.n	800e4e2 <HAL_SPI_TransmitReceive+0x342>
 800e4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4de:	3301      	adds	r3, #1
 800e4e0:	d102      	bne.n	800e4e8 <HAL_SPI_TransmitReceive+0x348>
 800e4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d108      	bne.n	800e4fa <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800e4e8:	2323      	movs	r3, #35	@ 0x23
 800e4ea:	18fb      	adds	r3, r7, r3
 800e4ec:	2203      	movs	r2, #3
 800e4ee:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	225d      	movs	r2, #93	@ 0x5d
 800e4f4:	2101      	movs	r1, #1
 800e4f6:	5499      	strb	r1, [r3, r2]
        goto error;
 800e4f8:	e026      	b.n	800e548 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	2b00      	cmp	r3, #0
 800e502:	d199      	bne.n	800e438 <HAL_SPI_TransmitReceive+0x298>
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2246      	movs	r2, #70	@ 0x46
 800e508:	5a9b      	ldrh	r3, [r3, r2]
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d193      	bne.n	800e438 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e510:	69fa      	ldr	r2, [r7, #28]
 800e512:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	0018      	movs	r0, r3
 800e518:	f000 f9b2 	bl	800e880 <SPI_EndRxTxTransaction>
 800e51c:	1e03      	subs	r3, r0, #0
 800e51e:	d006      	beq.n	800e52e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800e520:	2323      	movs	r3, #35	@ 0x23
 800e522:	18fb      	adds	r3, r7, r3
 800e524:	2201      	movs	r2, #1
 800e526:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2220      	movs	r2, #32
 800e52c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e532:	2b00      	cmp	r3, #0
 800e534:	d004      	beq.n	800e540 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800e536:	2323      	movs	r3, #35	@ 0x23
 800e538:	18fb      	adds	r3, r7, r3
 800e53a:	2201      	movs	r2, #1
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	e003      	b.n	800e548 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	225d      	movs	r2, #93	@ 0x5d
 800e544:	2101      	movs	r1, #1
 800e546:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	225c      	movs	r2, #92	@ 0x5c
 800e54c:	2100      	movs	r1, #0
 800e54e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800e550:	2323      	movs	r3, #35	@ 0x23
 800e552:	18fb      	adds	r3, r7, r3
 800e554:	781b      	ldrb	r3, [r3, #0]
}
 800e556:	0018      	movs	r0, r3
 800e558:	46bd      	mov	sp, r7
 800e55a:	b00a      	add	sp, #40	@ 0x28
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	46c0      	nop			@ (mov r8, r8)
 800e560:	ffffefff 	.word	0xffffefff

0800e564 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b088      	sub	sp, #32
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	603b      	str	r3, [r7, #0]
 800e570:	1dfb      	adds	r3, r7, #7
 800e572:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e574:	f7fd f9cc 	bl	800b910 <HAL_GetTick>
 800e578:	0002      	movs	r2, r0
 800e57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e57c:	1a9b      	subs	r3, r3, r2
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	18d3      	adds	r3, r2, r3
 800e582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e584:	f7fd f9c4 	bl	800b910 <HAL_GetTick>
 800e588:	0003      	movs	r3, r0
 800e58a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e58c:	4b3a      	ldr	r3, [pc, #232]	@ (800e678 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	015b      	lsls	r3, r3, #5
 800e592:	0d1b      	lsrs	r3, r3, #20
 800e594:	69fa      	ldr	r2, [r7, #28]
 800e596:	4353      	muls	r3, r2
 800e598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e59a:	e058      	b.n	800e64e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	d055      	beq.n	800e64e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e5a2:	f7fd f9b5 	bl	800b910 <HAL_GetTick>
 800e5a6:	0002      	movs	r2, r0
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	1ad3      	subs	r3, r2, r3
 800e5ac:	69fa      	ldr	r2, [r7, #28]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d902      	bls.n	800e5b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 800e5b2:	69fb      	ldr	r3, [r7, #28]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d142      	bne.n	800e63e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	685a      	ldr	r2, [r3, #4]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	21e0      	movs	r1, #224	@ 0xe0
 800e5c4:	438a      	bics	r2, r1
 800e5c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	685a      	ldr	r2, [r3, #4]
 800e5cc:	2382      	movs	r3, #130	@ 0x82
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d113      	bne.n	800e5fc <SPI_WaitFlagStateUntilTimeout+0x98>
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	689a      	ldr	r2, [r3, #8]
 800e5d8:	2380      	movs	r3, #128	@ 0x80
 800e5da:	021b      	lsls	r3, r3, #8
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d005      	beq.n	800e5ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	689a      	ldr	r2, [r3, #8]
 800e5e4:	2380      	movs	r3, #128	@ 0x80
 800e5e6:	00db      	lsls	r3, r3, #3
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d107      	bne.n	800e5fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2140      	movs	r1, #64	@ 0x40
 800e5f8:	438a      	bics	r2, r1
 800e5fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e600:	2380      	movs	r3, #128	@ 0x80
 800e602:	019b      	lsls	r3, r3, #6
 800e604:	429a      	cmp	r2, r3
 800e606:	d110      	bne.n	800e62a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	491a      	ldr	r1, [pc, #104]	@ (800e67c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800e614:	400a      	ands	r2, r1
 800e616:	601a      	str	r2, [r3, #0]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2180      	movs	r1, #128	@ 0x80
 800e624:	0189      	lsls	r1, r1, #6
 800e626:	430a      	orrs	r2, r1
 800e628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	225d      	movs	r2, #93	@ 0x5d
 800e62e:	2101      	movs	r1, #1
 800e630:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	225c      	movs	r2, #92	@ 0x5c
 800e636:	2100      	movs	r1, #0
 800e638:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e63a:	2303      	movs	r3, #3
 800e63c:	e017      	b.n	800e66e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d101      	bne.n	800e648 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800e644:	2300      	movs	r3, #0
 800e646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	3b01      	subs	r3, #1
 800e64c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	4013      	ands	r3, r2
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	1ad3      	subs	r3, r2, r3
 800e65c:	425a      	negs	r2, r3
 800e65e:	4153      	adcs	r3, r2
 800e660:	b2db      	uxtb	r3, r3
 800e662:	001a      	movs	r2, r3
 800e664:	1dfb      	adds	r3, r7, #7
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d197      	bne.n	800e59c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	0018      	movs	r0, r3
 800e670:	46bd      	mov	sp, r7
 800e672:	b008      	add	sp, #32
 800e674:	bd80      	pop	{r7, pc}
 800e676:	46c0      	nop			@ (mov r8, r8)
 800e678:	20000020 	.word	0x20000020
 800e67c:	ffffdfff 	.word	0xffffdfff

0800e680 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b08a      	sub	sp, #40	@ 0x28
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
 800e68c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e68e:	2317      	movs	r3, #23
 800e690:	18fb      	adds	r3, r7, r3
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e696:	f7fd f93b 	bl	800b910 <HAL_GetTick>
 800e69a:	0002      	movs	r2, r0
 800e69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e69e:	1a9b      	subs	r3, r3, r2
 800e6a0:	683a      	ldr	r2, [r7, #0]
 800e6a2:	18d3      	adds	r3, r2, r3
 800e6a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800e6a6:	f7fd f933 	bl	800b910 <HAL_GetTick>
 800e6aa:	0003      	movs	r3, r0
 800e6ac:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	330c      	adds	r3, #12
 800e6b4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e6b6:	4b41      	ldr	r3, [pc, #260]	@ (800e7bc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	0013      	movs	r3, r2
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	189b      	adds	r3, r3, r2
 800e6c0:	00da      	lsls	r2, r3, #3
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	0d1b      	lsrs	r3, r3, #20
 800e6c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6c8:	4353      	muls	r3, r2
 800e6ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e6cc:	e068      	b.n	800e7a0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	23c0      	movs	r3, #192	@ 0xc0
 800e6d2:	00db      	lsls	r3, r3, #3
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d10a      	bne.n	800e6ee <SPI_WaitFifoStateUntilTimeout+0x6e>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d107      	bne.n	800e6ee <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	2117      	movs	r1, #23
 800e6e6:	187b      	adds	r3, r7, r1
 800e6e8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e6ea:	187b      	adds	r3, r7, r1
 800e6ec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	d055      	beq.n	800e7a0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e6f4:	f7fd f90c 	bl	800b910 <HAL_GetTick>
 800e6f8:	0002      	movs	r2, r0
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	1ad3      	subs	r3, r2, r3
 800e6fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e700:	429a      	cmp	r2, r3
 800e702:	d902      	bls.n	800e70a <SPI_WaitFifoStateUntilTimeout+0x8a>
 800e704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e706:	2b00      	cmp	r3, #0
 800e708:	d142      	bne.n	800e790 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	685a      	ldr	r2, [r3, #4]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	21e0      	movs	r1, #224	@ 0xe0
 800e716:	438a      	bics	r2, r1
 800e718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	685a      	ldr	r2, [r3, #4]
 800e71e:	2382      	movs	r3, #130	@ 0x82
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	429a      	cmp	r2, r3
 800e724:	d113      	bne.n	800e74e <SPI_WaitFifoStateUntilTimeout+0xce>
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	689a      	ldr	r2, [r3, #8]
 800e72a:	2380      	movs	r3, #128	@ 0x80
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	429a      	cmp	r2, r3
 800e730:	d005      	beq.n	800e73e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	689a      	ldr	r2, [r3, #8]
 800e736:	2380      	movs	r3, #128	@ 0x80
 800e738:	00db      	lsls	r3, r3, #3
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d107      	bne.n	800e74e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2140      	movs	r1, #64	@ 0x40
 800e74a:	438a      	bics	r2, r1
 800e74c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e752:	2380      	movs	r3, #128	@ 0x80
 800e754:	019b      	lsls	r3, r3, #6
 800e756:	429a      	cmp	r2, r3
 800e758:	d110      	bne.n	800e77c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4916      	ldr	r1, [pc, #88]	@ (800e7c0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800e766:	400a      	ands	r2, r1
 800e768:	601a      	str	r2, [r3, #0]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2180      	movs	r1, #128	@ 0x80
 800e776:	0189      	lsls	r1, r1, #6
 800e778:	430a      	orrs	r2, r1
 800e77a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	225d      	movs	r2, #93	@ 0x5d
 800e780:	2101      	movs	r1, #1
 800e782:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	225c      	movs	r2, #92	@ 0x5c
 800e788:	2100      	movs	r1, #0
 800e78a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e78c:	2303      	movs	r3, #3
 800e78e:	e010      	b.n	800e7b2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d101      	bne.n	800e79a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800e796:	2300      	movs	r3, #0
 800e798:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	3b01      	subs	r3, #1
 800e79e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d18e      	bne.n	800e6ce <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	0018      	movs	r0, r3
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	b00a      	add	sp, #40	@ 0x28
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	46c0      	nop			@ (mov r8, r8)
 800e7bc:	20000020 	.word	0x20000020
 800e7c0:	ffffdfff 	.word	0xffffdfff

0800e7c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af02      	add	r7, sp, #8
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	685a      	ldr	r2, [r3, #4]
 800e7d4:	2382      	movs	r3, #130	@ 0x82
 800e7d6:	005b      	lsls	r3, r3, #1
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d113      	bne.n	800e804 <SPI_EndRxTransaction+0x40>
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	689a      	ldr	r2, [r3, #8]
 800e7e0:	2380      	movs	r3, #128	@ 0x80
 800e7e2:	021b      	lsls	r3, r3, #8
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d005      	beq.n	800e7f4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	689a      	ldr	r2, [r3, #8]
 800e7ec:	2380      	movs	r3, #128	@ 0x80
 800e7ee:	00db      	lsls	r3, r3, #3
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d107      	bne.n	800e804 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2140      	movs	r1, #64	@ 0x40
 800e800:	438a      	bics	r2, r1
 800e802:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	0013      	movs	r3, r2
 800e80e:	2200      	movs	r2, #0
 800e810:	2180      	movs	r1, #128	@ 0x80
 800e812:	f7ff fea7 	bl	800e564 <SPI_WaitFlagStateUntilTimeout>
 800e816:	1e03      	subs	r3, r0, #0
 800e818:	d007      	beq.n	800e82a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e81e:	2220      	movs	r2, #32
 800e820:	431a      	orrs	r2, r3
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e826:	2303      	movs	r3, #3
 800e828:	e026      	b.n	800e878 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	685a      	ldr	r2, [r3, #4]
 800e82e:	2382      	movs	r3, #130	@ 0x82
 800e830:	005b      	lsls	r3, r3, #1
 800e832:	429a      	cmp	r2, r3
 800e834:	d11f      	bne.n	800e876 <SPI_EndRxTransaction+0xb2>
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	689a      	ldr	r2, [r3, #8]
 800e83a:	2380      	movs	r3, #128	@ 0x80
 800e83c:	021b      	lsls	r3, r3, #8
 800e83e:	429a      	cmp	r2, r3
 800e840:	d005      	beq.n	800e84e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	689a      	ldr	r2, [r3, #8]
 800e846:	2380      	movs	r3, #128	@ 0x80
 800e848:	00db      	lsls	r3, r3, #3
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d113      	bne.n	800e876 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e84e:	68ba      	ldr	r2, [r7, #8]
 800e850:	23c0      	movs	r3, #192	@ 0xc0
 800e852:	00d9      	lsls	r1, r3, #3
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	0013      	movs	r3, r2
 800e85c:	2200      	movs	r2, #0
 800e85e:	f7ff ff0f 	bl	800e680 <SPI_WaitFifoStateUntilTimeout>
 800e862:	1e03      	subs	r3, r0, #0
 800e864:	d007      	beq.n	800e876 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e86a:	2220      	movs	r2, #32
 800e86c:	431a      	orrs	r2, r3
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800e872:	2303      	movs	r3, #3
 800e874:	e000      	b.n	800e878 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	0018      	movs	r0, r3
 800e87a:	46bd      	mov	sp, r7
 800e87c:	b004      	add	sp, #16
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b086      	sub	sp, #24
 800e884:	af02      	add	r7, sp, #8
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	23c0      	movs	r3, #192	@ 0xc0
 800e890:	0159      	lsls	r1, r3, #5
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	0013      	movs	r3, r2
 800e89a:	2200      	movs	r2, #0
 800e89c:	f7ff fef0 	bl	800e680 <SPI_WaitFifoStateUntilTimeout>
 800e8a0:	1e03      	subs	r3, r0, #0
 800e8a2:	d007      	beq.n	800e8b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8a8:	2220      	movs	r2, #32
 800e8aa:	431a      	orrs	r2, r3
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	e027      	b.n	800e904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	0013      	movs	r3, r2
 800e8be:	2200      	movs	r2, #0
 800e8c0:	2180      	movs	r1, #128	@ 0x80
 800e8c2:	f7ff fe4f 	bl	800e564 <SPI_WaitFlagStateUntilTimeout>
 800e8c6:	1e03      	subs	r3, r0, #0
 800e8c8:	d007      	beq.n	800e8da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8ce:	2220      	movs	r2, #32
 800e8d0:	431a      	orrs	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e8d6:	2303      	movs	r3, #3
 800e8d8:	e014      	b.n	800e904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	23c0      	movs	r3, #192	@ 0xc0
 800e8de:	00d9      	lsls	r1, r3, #3
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	0013      	movs	r3, r2
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f7ff fec9 	bl	800e680 <SPI_WaitFifoStateUntilTimeout>
 800e8ee:	1e03      	subs	r3, r0, #0
 800e8f0:	d007      	beq.n	800e902 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8f6:	2220      	movs	r2, #32
 800e8f8:	431a      	orrs	r2, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e8fe:	2303      	movs	r3, #3
 800e900:	e000      	b.n	800e904 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	0018      	movs	r0, r3
 800e906:	46bd      	mov	sp, r7
 800e908:	b004      	add	sp, #16
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d101      	bne.n	800e91e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e91a:	2301      	movs	r3, #1
 800e91c:	e046      	b.n	800e9ac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2288      	movs	r2, #136	@ 0x88
 800e922:	589b      	ldr	r3, [r3, r2]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d107      	bne.n	800e938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2284      	movs	r2, #132	@ 0x84
 800e92c:	2100      	movs	r1, #0
 800e92e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	0018      	movs	r0, r3
 800e934:	f7fc f8ec 	bl	800ab10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2288      	movs	r2, #136	@ 0x88
 800e93c:	2124      	movs	r1, #36	@ 0x24
 800e93e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2101      	movs	r1, #1
 800e94c:	438a      	bics	r2, r1
 800e94e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	0018      	movs	r0, r3
 800e95c:	f000 fc74 	bl	800f248 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	0018      	movs	r0, r3
 800e964:	f000 f9b2 	bl	800eccc <UART_SetConfig>
 800e968:	0003      	movs	r3, r0
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d101      	bne.n	800e972 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	e01c      	b.n	800e9ac <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	685a      	ldr	r2, [r3, #4]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	490d      	ldr	r1, [pc, #52]	@ (800e9b4 <HAL_UART_Init+0xa8>)
 800e97e:	400a      	ands	r2, r1
 800e980:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	689a      	ldr	r2, [r3, #8]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	212a      	movs	r1, #42	@ 0x2a
 800e98e:	438a      	bics	r2, r1
 800e990:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2101      	movs	r1, #1
 800e99e:	430a      	orrs	r2, r1
 800e9a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	0018      	movs	r0, r3
 800e9a6:	f000 fd03 	bl	800f3b0 <UART_CheckIdleState>
 800e9aa:	0003      	movs	r3, r0
}
 800e9ac:	0018      	movs	r0, r3
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	b002      	add	sp, #8
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	ffffb7ff 	.word	0xffffb7ff

0800e9b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b08a      	sub	sp, #40	@ 0x28
 800e9bc:	af02      	add	r7, sp, #8
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	603b      	str	r3, [r7, #0]
 800e9c4:	1dbb      	adds	r3, r7, #6
 800e9c6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2288      	movs	r2, #136	@ 0x88
 800e9cc:	589b      	ldr	r3, [r3, r2]
 800e9ce:	2b20      	cmp	r3, #32
 800e9d0:	d000      	beq.n	800e9d4 <HAL_UART_Transmit+0x1c>
 800e9d2:	e090      	b.n	800eaf6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d003      	beq.n	800e9e2 <HAL_UART_Transmit+0x2a>
 800e9da:	1dbb      	adds	r3, r7, #6
 800e9dc:	881b      	ldrh	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d101      	bne.n	800e9e6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e088      	b.n	800eaf8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	689a      	ldr	r2, [r3, #8]
 800e9ea:	2380      	movs	r3, #128	@ 0x80
 800e9ec:	015b      	lsls	r3, r3, #5
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d109      	bne.n	800ea06 <HAL_UART_Transmit+0x4e>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	691b      	ldr	r3, [r3, #16]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d105      	bne.n	800ea06 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	4013      	ands	r3, r2
 800ea00:	d001      	beq.n	800ea06 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800ea02:	2301      	movs	r3, #1
 800ea04:	e078      	b.n	800eaf8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2290      	movs	r2, #144	@ 0x90
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2288      	movs	r2, #136	@ 0x88
 800ea12:	2121      	movs	r1, #33	@ 0x21
 800ea14:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea16:	f7fc ff7b 	bl	800b910 <HAL_GetTick>
 800ea1a:	0003      	movs	r3, r0
 800ea1c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	1dba      	adds	r2, r7, #6
 800ea22:	2154      	movs	r1, #84	@ 0x54
 800ea24:	8812      	ldrh	r2, [r2, #0]
 800ea26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	1dba      	adds	r2, r7, #6
 800ea2c:	2156      	movs	r1, #86	@ 0x56
 800ea2e:	8812      	ldrh	r2, [r2, #0]
 800ea30:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	689a      	ldr	r2, [r3, #8]
 800ea36:	2380      	movs	r3, #128	@ 0x80
 800ea38:	015b      	lsls	r3, r3, #5
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d108      	bne.n	800ea50 <HAL_UART_Transmit+0x98>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d104      	bne.n	800ea50 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800ea46:	2300      	movs	r3, #0
 800ea48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	61bb      	str	r3, [r7, #24]
 800ea4e:	e003      	b.n	800ea58 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea54:	2300      	movs	r3, #0
 800ea56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ea58:	e030      	b.n	800eabc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	0013      	movs	r3, r2
 800ea64:	2200      	movs	r2, #0
 800ea66:	2180      	movs	r1, #128	@ 0x80
 800ea68:	f000 fd4c 	bl	800f504 <UART_WaitOnFlagUntilTimeout>
 800ea6c:	1e03      	subs	r3, r0, #0
 800ea6e:	d005      	beq.n	800ea7c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2288      	movs	r2, #136	@ 0x88
 800ea74:	2120      	movs	r1, #32
 800ea76:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ea78:	2303      	movs	r3, #3
 800ea7a:	e03d      	b.n	800eaf8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10b      	bne.n	800ea9a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	881b      	ldrh	r3, [r3, #0]
 800ea86:	001a      	movs	r2, r3
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	05d2      	lsls	r2, r2, #23
 800ea8e:	0dd2      	lsrs	r2, r2, #23
 800ea90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	3302      	adds	r3, #2
 800ea96:	61bb      	str	r3, [r7, #24]
 800ea98:	e007      	b.n	800eaaa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	781a      	ldrb	r2, [r3, #0]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2256      	movs	r2, #86	@ 0x56
 800eaae:	5a9b      	ldrh	r3, [r3, r2]
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	3b01      	subs	r3, #1
 800eab4:	b299      	uxth	r1, r3
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2256      	movs	r2, #86	@ 0x56
 800eaba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2256      	movs	r2, #86	@ 0x56
 800eac0:	5a9b      	ldrh	r3, [r3, r2]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1c8      	bne.n	800ea5a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eac8:	697a      	ldr	r2, [r7, #20]
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	0013      	movs	r3, r2
 800ead2:	2200      	movs	r2, #0
 800ead4:	2140      	movs	r1, #64	@ 0x40
 800ead6:	f000 fd15 	bl	800f504 <UART_WaitOnFlagUntilTimeout>
 800eada:	1e03      	subs	r3, r0, #0
 800eadc:	d005      	beq.n	800eaea <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2288      	movs	r2, #136	@ 0x88
 800eae2:	2120      	movs	r1, #32
 800eae4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800eae6:	2303      	movs	r3, #3
 800eae8:	e006      	b.n	800eaf8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2288      	movs	r2, #136	@ 0x88
 800eaee:	2120      	movs	r1, #32
 800eaf0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	e000      	b.n	800eaf8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800eaf6:	2302      	movs	r3, #2
  }
}
 800eaf8:	0018      	movs	r0, r3
 800eafa:	46bd      	mov	sp, r7
 800eafc:	b008      	add	sp, #32
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b08a      	sub	sp, #40	@ 0x28
 800eb04:	af02      	add	r7, sp, #8
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	60b9      	str	r1, [r7, #8]
 800eb0a:	603b      	str	r3, [r7, #0]
 800eb0c:	1dbb      	adds	r3, r7, #6
 800eb0e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	228c      	movs	r2, #140	@ 0x8c
 800eb14:	589b      	ldr	r3, [r3, r2]
 800eb16:	2b20      	cmp	r3, #32
 800eb18:	d000      	beq.n	800eb1c <HAL_UART_Receive+0x1c>
 800eb1a:	e0d0      	b.n	800ecbe <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d003      	beq.n	800eb2a <HAL_UART_Receive+0x2a>
 800eb22:	1dbb      	adds	r3, r7, #6
 800eb24:	881b      	ldrh	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d101      	bne.n	800eb2e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e0c8      	b.n	800ecc0 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	689a      	ldr	r2, [r3, #8]
 800eb32:	2380      	movs	r3, #128	@ 0x80
 800eb34:	015b      	lsls	r3, r3, #5
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d109      	bne.n	800eb4e <HAL_UART_Receive+0x4e>
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d105      	bne.n	800eb4e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2201      	movs	r2, #1
 800eb46:	4013      	ands	r3, r2
 800eb48:	d001      	beq.n	800eb4e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e0b8      	b.n	800ecc0 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2290      	movs	r2, #144	@ 0x90
 800eb52:	2100      	movs	r1, #0
 800eb54:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	228c      	movs	r2, #140	@ 0x8c
 800eb5a:	2122      	movs	r1, #34	@ 0x22
 800eb5c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2200      	movs	r2, #0
 800eb62:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb64:	f7fc fed4 	bl	800b910 <HAL_GetTick>
 800eb68:	0003      	movs	r3, r0
 800eb6a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	1dba      	adds	r2, r7, #6
 800eb70:	215c      	movs	r1, #92	@ 0x5c
 800eb72:	8812      	ldrh	r2, [r2, #0]
 800eb74:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	1dba      	adds	r2, r7, #6
 800eb7a:	215e      	movs	r1, #94	@ 0x5e
 800eb7c:	8812      	ldrh	r2, [r2, #0]
 800eb7e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	689a      	ldr	r2, [r3, #8]
 800eb84:	2380      	movs	r3, #128	@ 0x80
 800eb86:	015b      	lsls	r3, r3, #5
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d10d      	bne.n	800eba8 <HAL_UART_Receive+0xa8>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d104      	bne.n	800eb9e <HAL_UART_Receive+0x9e>
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2260      	movs	r2, #96	@ 0x60
 800eb98:	494b      	ldr	r1, [pc, #300]	@ (800ecc8 <HAL_UART_Receive+0x1c8>)
 800eb9a:	5299      	strh	r1, [r3, r2]
 800eb9c:	e02e      	b.n	800ebfc <HAL_UART_Receive+0xfc>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2260      	movs	r2, #96	@ 0x60
 800eba2:	21ff      	movs	r1, #255	@ 0xff
 800eba4:	5299      	strh	r1, [r3, r2]
 800eba6:	e029      	b.n	800ebfc <HAL_UART_Receive+0xfc>
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10d      	bne.n	800ebcc <HAL_UART_Receive+0xcc>
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d104      	bne.n	800ebc2 <HAL_UART_Receive+0xc2>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2260      	movs	r2, #96	@ 0x60
 800ebbc:	21ff      	movs	r1, #255	@ 0xff
 800ebbe:	5299      	strh	r1, [r3, r2]
 800ebc0:	e01c      	b.n	800ebfc <HAL_UART_Receive+0xfc>
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2260      	movs	r2, #96	@ 0x60
 800ebc6:	217f      	movs	r1, #127	@ 0x7f
 800ebc8:	5299      	strh	r1, [r3, r2]
 800ebca:	e017      	b.n	800ebfc <HAL_UART_Receive+0xfc>
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	689a      	ldr	r2, [r3, #8]
 800ebd0:	2380      	movs	r3, #128	@ 0x80
 800ebd2:	055b      	lsls	r3, r3, #21
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d10d      	bne.n	800ebf4 <HAL_UART_Receive+0xf4>
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d104      	bne.n	800ebea <HAL_UART_Receive+0xea>
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2260      	movs	r2, #96	@ 0x60
 800ebe4:	217f      	movs	r1, #127	@ 0x7f
 800ebe6:	5299      	strh	r1, [r3, r2]
 800ebe8:	e008      	b.n	800ebfc <HAL_UART_Receive+0xfc>
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2260      	movs	r2, #96	@ 0x60
 800ebee:	213f      	movs	r1, #63	@ 0x3f
 800ebf0:	5299      	strh	r1, [r3, r2]
 800ebf2:	e003      	b.n	800ebfc <HAL_UART_Receive+0xfc>
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2260      	movs	r2, #96	@ 0x60
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800ebfc:	2312      	movs	r3, #18
 800ebfe:	18fb      	adds	r3, r7, r3
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	2160      	movs	r1, #96	@ 0x60
 800ec04:	5a52      	ldrh	r2, [r2, r1]
 800ec06:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	689a      	ldr	r2, [r3, #8]
 800ec0c:	2380      	movs	r3, #128	@ 0x80
 800ec0e:	015b      	lsls	r3, r3, #5
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d108      	bne.n	800ec26 <HAL_UART_Receive+0x126>
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d104      	bne.n	800ec26 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	61bb      	str	r3, [r7, #24]
 800ec24:	e003      	b.n	800ec2e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ec2e:	e03a      	b.n	800eca6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ec30:	697a      	ldr	r2, [r7, #20]
 800ec32:	68f8      	ldr	r0, [r7, #12]
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	0013      	movs	r3, r2
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	2120      	movs	r1, #32
 800ec3e:	f000 fc61 	bl	800f504 <UART_WaitOnFlagUntilTimeout>
 800ec42:	1e03      	subs	r3, r0, #0
 800ec44:	d005      	beq.n	800ec52 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	228c      	movs	r2, #140	@ 0x8c
 800ec4a:	2120      	movs	r1, #32
 800ec4c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ec4e:	2303      	movs	r3, #3
 800ec50:	e036      	b.n	800ecc0 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d10e      	bne.n	800ec76 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	2212      	movs	r2, #18
 800ec62:	18ba      	adds	r2, r7, r2
 800ec64:	8812      	ldrh	r2, [r2, #0]
 800ec66:	4013      	ands	r3, r2
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	3302      	adds	r3, #2
 800ec72:	61bb      	str	r3, [r7, #24]
 800ec74:	e00e      	b.n	800ec94 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	2212      	movs	r2, #18
 800ec80:	18ba      	adds	r2, r7, r2
 800ec82:	8812      	ldrh	r2, [r2, #0]
 800ec84:	b2d2      	uxtb	r2, r2
 800ec86:	4013      	ands	r3, r2
 800ec88:	b2da      	uxtb	r2, r3
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	3301      	adds	r3, #1
 800ec92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	225e      	movs	r2, #94	@ 0x5e
 800ec98:	5a9b      	ldrh	r3, [r3, r2]
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	b299      	uxth	r1, r3
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	225e      	movs	r2, #94	@ 0x5e
 800eca4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	225e      	movs	r2, #94	@ 0x5e
 800ecaa:	5a9b      	ldrh	r3, [r3, r2]
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1be      	bne.n	800ec30 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	228c      	movs	r2, #140	@ 0x8c
 800ecb6:	2120      	movs	r1, #32
 800ecb8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	e000      	b.n	800ecc0 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800ecbe:	2302      	movs	r3, #2
  }
}
 800ecc0:	0018      	movs	r0, r3
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	b008      	add	sp, #32
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	000001ff 	.word	0x000001ff

0800eccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eccc:	b5b0      	push	{r4, r5, r7, lr}
 800ecce:	b090      	sub	sp, #64	@ 0x40
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecd4:	231a      	movs	r3, #26
 800ecd6:	2220      	movs	r2, #32
 800ecd8:	189b      	adds	r3, r3, r2
 800ecda:	19db      	adds	r3, r3, r7
 800ecdc:	2200      	movs	r2, #0
 800ecde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece2:	689a      	ldr	r2, [r3, #8]
 800ece4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	431a      	orrs	r2, r3
 800ecea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecec:	695b      	ldr	r3, [r3, #20]
 800ecee:	431a      	orrs	r2, r3
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf2:	69db      	ldr	r3, [r3, #28]
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4aaf      	ldr	r2, [pc, #700]	@ (800efbc <UART_SetConfig+0x2f0>)
 800ed00:	4013      	ands	r3, r2
 800ed02:	0019      	movs	r1, r3
 800ed04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed0a:	430b      	orrs	r3, r1
 800ed0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	4aaa      	ldr	r2, [pc, #680]	@ (800efc0 <UART_SetConfig+0x2f4>)
 800ed16:	4013      	ands	r3, r2
 800ed18:	0018      	movs	r0, r3
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed1c:	68d9      	ldr	r1, [r3, #12]
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	0003      	movs	r3, r0
 800ed24:	430b      	orrs	r3, r1
 800ed26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2a:	699b      	ldr	r3, [r3, #24]
 800ed2c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4aa4      	ldr	r2, [pc, #656]	@ (800efc4 <UART_SetConfig+0x2f8>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d004      	beq.n	800ed42 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed3a:	6a1b      	ldr	r3, [r3, #32]
 800ed3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	689b      	ldr	r3, [r3, #8]
 800ed48:	4a9f      	ldr	r2, [pc, #636]	@ (800efc8 <UART_SetConfig+0x2fc>)
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	0019      	movs	r1, r3
 800ed4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed54:	430b      	orrs	r3, r1
 800ed56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed5e:	220f      	movs	r2, #15
 800ed60:	4393      	bics	r3, r2
 800ed62:	0018      	movs	r0, r3
 800ed64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed66:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ed68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	0003      	movs	r3, r0
 800ed6e:	430b      	orrs	r3, r1
 800ed70:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4a95      	ldr	r2, [pc, #596]	@ (800efcc <UART_SetConfig+0x300>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d131      	bne.n	800ede0 <UART_SetConfig+0x114>
 800ed7c:	4b94      	ldr	r3, [pc, #592]	@ (800efd0 <UART_SetConfig+0x304>)
 800ed7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed80:	2203      	movs	r2, #3
 800ed82:	4013      	ands	r3, r2
 800ed84:	2b03      	cmp	r3, #3
 800ed86:	d01d      	beq.n	800edc4 <UART_SetConfig+0xf8>
 800ed88:	d823      	bhi.n	800edd2 <UART_SetConfig+0x106>
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d00c      	beq.n	800eda8 <UART_SetConfig+0xdc>
 800ed8e:	d820      	bhi.n	800edd2 <UART_SetConfig+0x106>
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d002      	beq.n	800ed9a <UART_SetConfig+0xce>
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d00e      	beq.n	800edb6 <UART_SetConfig+0xea>
 800ed98:	e01b      	b.n	800edd2 <UART_SetConfig+0x106>
 800ed9a:	231b      	movs	r3, #27
 800ed9c:	2220      	movs	r2, #32
 800ed9e:	189b      	adds	r3, r3, r2
 800eda0:	19db      	adds	r3, r3, r7
 800eda2:	2200      	movs	r2, #0
 800eda4:	701a      	strb	r2, [r3, #0]
 800eda6:	e0b4      	b.n	800ef12 <UART_SetConfig+0x246>
 800eda8:	231b      	movs	r3, #27
 800edaa:	2220      	movs	r2, #32
 800edac:	189b      	adds	r3, r3, r2
 800edae:	19db      	adds	r3, r3, r7
 800edb0:	2202      	movs	r2, #2
 800edb2:	701a      	strb	r2, [r3, #0]
 800edb4:	e0ad      	b.n	800ef12 <UART_SetConfig+0x246>
 800edb6:	231b      	movs	r3, #27
 800edb8:	2220      	movs	r2, #32
 800edba:	189b      	adds	r3, r3, r2
 800edbc:	19db      	adds	r3, r3, r7
 800edbe:	2204      	movs	r2, #4
 800edc0:	701a      	strb	r2, [r3, #0]
 800edc2:	e0a6      	b.n	800ef12 <UART_SetConfig+0x246>
 800edc4:	231b      	movs	r3, #27
 800edc6:	2220      	movs	r2, #32
 800edc8:	189b      	adds	r3, r3, r2
 800edca:	19db      	adds	r3, r3, r7
 800edcc:	2208      	movs	r2, #8
 800edce:	701a      	strb	r2, [r3, #0]
 800edd0:	e09f      	b.n	800ef12 <UART_SetConfig+0x246>
 800edd2:	231b      	movs	r3, #27
 800edd4:	2220      	movs	r2, #32
 800edd6:	189b      	adds	r3, r3, r2
 800edd8:	19db      	adds	r3, r3, r7
 800edda:	2210      	movs	r2, #16
 800eddc:	701a      	strb	r2, [r3, #0]
 800edde:	e098      	b.n	800ef12 <UART_SetConfig+0x246>
 800ede0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a7b      	ldr	r2, [pc, #492]	@ (800efd4 <UART_SetConfig+0x308>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d131      	bne.n	800ee4e <UART_SetConfig+0x182>
 800edea:	4b79      	ldr	r3, [pc, #484]	@ (800efd0 <UART_SetConfig+0x304>)
 800edec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edee:	220c      	movs	r2, #12
 800edf0:	4013      	ands	r3, r2
 800edf2:	2b0c      	cmp	r3, #12
 800edf4:	d01d      	beq.n	800ee32 <UART_SetConfig+0x166>
 800edf6:	d823      	bhi.n	800ee40 <UART_SetConfig+0x174>
 800edf8:	2b08      	cmp	r3, #8
 800edfa:	d00c      	beq.n	800ee16 <UART_SetConfig+0x14a>
 800edfc:	d820      	bhi.n	800ee40 <UART_SetConfig+0x174>
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d002      	beq.n	800ee08 <UART_SetConfig+0x13c>
 800ee02:	2b04      	cmp	r3, #4
 800ee04:	d00e      	beq.n	800ee24 <UART_SetConfig+0x158>
 800ee06:	e01b      	b.n	800ee40 <UART_SetConfig+0x174>
 800ee08:	231b      	movs	r3, #27
 800ee0a:	2220      	movs	r2, #32
 800ee0c:	189b      	adds	r3, r3, r2
 800ee0e:	19db      	adds	r3, r3, r7
 800ee10:	2200      	movs	r2, #0
 800ee12:	701a      	strb	r2, [r3, #0]
 800ee14:	e07d      	b.n	800ef12 <UART_SetConfig+0x246>
 800ee16:	231b      	movs	r3, #27
 800ee18:	2220      	movs	r2, #32
 800ee1a:	189b      	adds	r3, r3, r2
 800ee1c:	19db      	adds	r3, r3, r7
 800ee1e:	2202      	movs	r2, #2
 800ee20:	701a      	strb	r2, [r3, #0]
 800ee22:	e076      	b.n	800ef12 <UART_SetConfig+0x246>
 800ee24:	231b      	movs	r3, #27
 800ee26:	2220      	movs	r2, #32
 800ee28:	189b      	adds	r3, r3, r2
 800ee2a:	19db      	adds	r3, r3, r7
 800ee2c:	2204      	movs	r2, #4
 800ee2e:	701a      	strb	r2, [r3, #0]
 800ee30:	e06f      	b.n	800ef12 <UART_SetConfig+0x246>
 800ee32:	231b      	movs	r3, #27
 800ee34:	2220      	movs	r2, #32
 800ee36:	189b      	adds	r3, r3, r2
 800ee38:	19db      	adds	r3, r3, r7
 800ee3a:	2208      	movs	r2, #8
 800ee3c:	701a      	strb	r2, [r3, #0]
 800ee3e:	e068      	b.n	800ef12 <UART_SetConfig+0x246>
 800ee40:	231b      	movs	r3, #27
 800ee42:	2220      	movs	r2, #32
 800ee44:	189b      	adds	r3, r3, r2
 800ee46:	19db      	adds	r3, r3, r7
 800ee48:	2210      	movs	r2, #16
 800ee4a:	701a      	strb	r2, [r3, #0]
 800ee4c:	e061      	b.n	800ef12 <UART_SetConfig+0x246>
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4a61      	ldr	r2, [pc, #388]	@ (800efd8 <UART_SetConfig+0x30c>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d106      	bne.n	800ee66 <UART_SetConfig+0x19a>
 800ee58:	231b      	movs	r3, #27
 800ee5a:	2220      	movs	r2, #32
 800ee5c:	189b      	adds	r3, r3, r2
 800ee5e:	19db      	adds	r3, r3, r7
 800ee60:	2200      	movs	r2, #0
 800ee62:	701a      	strb	r2, [r3, #0]
 800ee64:	e055      	b.n	800ef12 <UART_SetConfig+0x246>
 800ee66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a5c      	ldr	r2, [pc, #368]	@ (800efdc <UART_SetConfig+0x310>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d106      	bne.n	800ee7e <UART_SetConfig+0x1b2>
 800ee70:	231b      	movs	r3, #27
 800ee72:	2220      	movs	r2, #32
 800ee74:	189b      	adds	r3, r3, r2
 800ee76:	19db      	adds	r3, r3, r7
 800ee78:	2200      	movs	r2, #0
 800ee7a:	701a      	strb	r2, [r3, #0]
 800ee7c:	e049      	b.n	800ef12 <UART_SetConfig+0x246>
 800ee7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	4a50      	ldr	r2, [pc, #320]	@ (800efc4 <UART_SetConfig+0x2f8>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d13e      	bne.n	800ef06 <UART_SetConfig+0x23a>
 800ee88:	4b51      	ldr	r3, [pc, #324]	@ (800efd0 <UART_SetConfig+0x304>)
 800ee8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ee8c:	23c0      	movs	r3, #192	@ 0xc0
 800ee8e:	011b      	lsls	r3, r3, #4
 800ee90:	4013      	ands	r3, r2
 800ee92:	22c0      	movs	r2, #192	@ 0xc0
 800ee94:	0112      	lsls	r2, r2, #4
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d027      	beq.n	800eeea <UART_SetConfig+0x21e>
 800ee9a:	22c0      	movs	r2, #192	@ 0xc0
 800ee9c:	0112      	lsls	r2, r2, #4
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d82a      	bhi.n	800eef8 <UART_SetConfig+0x22c>
 800eea2:	2280      	movs	r2, #128	@ 0x80
 800eea4:	0112      	lsls	r2, r2, #4
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d011      	beq.n	800eece <UART_SetConfig+0x202>
 800eeaa:	2280      	movs	r2, #128	@ 0x80
 800eeac:	0112      	lsls	r2, r2, #4
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d822      	bhi.n	800eef8 <UART_SetConfig+0x22c>
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d004      	beq.n	800eec0 <UART_SetConfig+0x1f4>
 800eeb6:	2280      	movs	r2, #128	@ 0x80
 800eeb8:	00d2      	lsls	r2, r2, #3
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d00e      	beq.n	800eedc <UART_SetConfig+0x210>
 800eebe:	e01b      	b.n	800eef8 <UART_SetConfig+0x22c>
 800eec0:	231b      	movs	r3, #27
 800eec2:	2220      	movs	r2, #32
 800eec4:	189b      	adds	r3, r3, r2
 800eec6:	19db      	adds	r3, r3, r7
 800eec8:	2200      	movs	r2, #0
 800eeca:	701a      	strb	r2, [r3, #0]
 800eecc:	e021      	b.n	800ef12 <UART_SetConfig+0x246>
 800eece:	231b      	movs	r3, #27
 800eed0:	2220      	movs	r2, #32
 800eed2:	189b      	adds	r3, r3, r2
 800eed4:	19db      	adds	r3, r3, r7
 800eed6:	2202      	movs	r2, #2
 800eed8:	701a      	strb	r2, [r3, #0]
 800eeda:	e01a      	b.n	800ef12 <UART_SetConfig+0x246>
 800eedc:	231b      	movs	r3, #27
 800eede:	2220      	movs	r2, #32
 800eee0:	189b      	adds	r3, r3, r2
 800eee2:	19db      	adds	r3, r3, r7
 800eee4:	2204      	movs	r2, #4
 800eee6:	701a      	strb	r2, [r3, #0]
 800eee8:	e013      	b.n	800ef12 <UART_SetConfig+0x246>
 800eeea:	231b      	movs	r3, #27
 800eeec:	2220      	movs	r2, #32
 800eeee:	189b      	adds	r3, r3, r2
 800eef0:	19db      	adds	r3, r3, r7
 800eef2:	2208      	movs	r2, #8
 800eef4:	701a      	strb	r2, [r3, #0]
 800eef6:	e00c      	b.n	800ef12 <UART_SetConfig+0x246>
 800eef8:	231b      	movs	r3, #27
 800eefa:	2220      	movs	r2, #32
 800eefc:	189b      	adds	r3, r3, r2
 800eefe:	19db      	adds	r3, r3, r7
 800ef00:	2210      	movs	r2, #16
 800ef02:	701a      	strb	r2, [r3, #0]
 800ef04:	e005      	b.n	800ef12 <UART_SetConfig+0x246>
 800ef06:	231b      	movs	r3, #27
 800ef08:	2220      	movs	r2, #32
 800ef0a:	189b      	adds	r3, r3, r2
 800ef0c:	19db      	adds	r3, r3, r7
 800ef0e:	2210      	movs	r2, #16
 800ef10:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ef12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a2b      	ldr	r2, [pc, #172]	@ (800efc4 <UART_SetConfig+0x2f8>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d000      	beq.n	800ef1e <UART_SetConfig+0x252>
 800ef1c:	e0a9      	b.n	800f072 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef1e:	231b      	movs	r3, #27
 800ef20:	2220      	movs	r2, #32
 800ef22:	189b      	adds	r3, r3, r2
 800ef24:	19db      	adds	r3, r3, r7
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	2b08      	cmp	r3, #8
 800ef2a:	d015      	beq.n	800ef58 <UART_SetConfig+0x28c>
 800ef2c:	dc18      	bgt.n	800ef60 <UART_SetConfig+0x294>
 800ef2e:	2b04      	cmp	r3, #4
 800ef30:	d00d      	beq.n	800ef4e <UART_SetConfig+0x282>
 800ef32:	dc15      	bgt.n	800ef60 <UART_SetConfig+0x294>
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d002      	beq.n	800ef3e <UART_SetConfig+0x272>
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d005      	beq.n	800ef48 <UART_SetConfig+0x27c>
 800ef3c:	e010      	b.n	800ef60 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef3e:	f7fe fbf7 	bl	800d730 <HAL_RCC_GetPCLK1Freq>
 800ef42:	0003      	movs	r3, r0
 800ef44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ef46:	e014      	b.n	800ef72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef48:	4b25      	ldr	r3, [pc, #148]	@ (800efe0 <UART_SetConfig+0x314>)
 800ef4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ef4c:	e011      	b.n	800ef72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef4e:	f7fe fb63 	bl	800d618 <HAL_RCC_GetSysClockFreq>
 800ef52:	0003      	movs	r3, r0
 800ef54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ef56:	e00c      	b.n	800ef72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef58:	2380      	movs	r3, #128	@ 0x80
 800ef5a:	021b      	lsls	r3, r3, #8
 800ef5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ef5e:	e008      	b.n	800ef72 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800ef60:	2300      	movs	r3, #0
 800ef62:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800ef64:	231a      	movs	r3, #26
 800ef66:	2220      	movs	r2, #32
 800ef68:	189b      	adds	r3, r3, r2
 800ef6a:	19db      	adds	r3, r3, r7
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	701a      	strb	r2, [r3, #0]
        break;
 800ef70:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ef72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d100      	bne.n	800ef7a <UART_SetConfig+0x2ae>
 800ef78:	e14b      	b.n	800f212 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ef7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef7e:	4b19      	ldr	r3, [pc, #100]	@ (800efe4 <UART_SetConfig+0x318>)
 800ef80:	0052      	lsls	r2, r2, #1
 800ef82:	5ad3      	ldrh	r3, [r2, r3]
 800ef84:	0019      	movs	r1, r3
 800ef86:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ef88:	f7f1 f8e2 	bl	8000150 <__udivsi3>
 800ef8c:	0003      	movs	r3, r0
 800ef8e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef92:	685a      	ldr	r2, [r3, #4]
 800ef94:	0013      	movs	r3, r2
 800ef96:	005b      	lsls	r3, r3, #1
 800ef98:	189b      	adds	r3, r3, r2
 800ef9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d305      	bcc.n	800efac <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800efa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800efa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d91d      	bls.n	800efe8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800efac:	231a      	movs	r3, #26
 800efae:	2220      	movs	r2, #32
 800efb0:	189b      	adds	r3, r3, r2
 800efb2:	19db      	adds	r3, r3, r7
 800efb4:	2201      	movs	r2, #1
 800efb6:	701a      	strb	r2, [r3, #0]
 800efb8:	e12b      	b.n	800f212 <UART_SetConfig+0x546>
 800efba:	46c0      	nop			@ (mov r8, r8)
 800efbc:	cfff69f3 	.word	0xcfff69f3
 800efc0:	ffffcfff 	.word	0xffffcfff
 800efc4:	40008000 	.word	0x40008000
 800efc8:	11fff4ff 	.word	0x11fff4ff
 800efcc:	40013800 	.word	0x40013800
 800efd0:	40021000 	.word	0x40021000
 800efd4:	40004400 	.word	0x40004400
 800efd8:	40004800 	.word	0x40004800
 800efdc:	40004c00 	.word	0x40004c00
 800efe0:	00f42400 	.word	0x00f42400
 800efe4:	0801640c 	.word	0x0801640c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efea:	61bb      	str	r3, [r7, #24]
 800efec:	2300      	movs	r3, #0
 800efee:	61fb      	str	r3, [r7, #28]
 800eff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eff4:	4b92      	ldr	r3, [pc, #584]	@ (800f240 <UART_SetConfig+0x574>)
 800eff6:	0052      	lsls	r2, r2, #1
 800eff8:	5ad3      	ldrh	r3, [r2, r3]
 800effa:	613b      	str	r3, [r7, #16]
 800effc:	2300      	movs	r3, #0
 800effe:	617b      	str	r3, [r7, #20]
 800f000:	693a      	ldr	r2, [r7, #16]
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	69b8      	ldr	r0, [r7, #24]
 800f006:	69f9      	ldr	r1, [r7, #28]
 800f008:	f7f1 fa90 	bl	800052c <__aeabi_uldivmod>
 800f00c:	0002      	movs	r2, r0
 800f00e:	000b      	movs	r3, r1
 800f010:	0e11      	lsrs	r1, r2, #24
 800f012:	021d      	lsls	r5, r3, #8
 800f014:	430d      	orrs	r5, r1
 800f016:	0214      	lsls	r4, r2, #8
 800f018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	085b      	lsrs	r3, r3, #1
 800f01e:	60bb      	str	r3, [r7, #8]
 800f020:	2300      	movs	r3, #0
 800f022:	60fb      	str	r3, [r7, #12]
 800f024:	68b8      	ldr	r0, [r7, #8]
 800f026:	68f9      	ldr	r1, [r7, #12]
 800f028:	1900      	adds	r0, r0, r4
 800f02a:	4169      	adcs	r1, r5
 800f02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	603b      	str	r3, [r7, #0]
 800f032:	2300      	movs	r3, #0
 800f034:	607b      	str	r3, [r7, #4]
 800f036:	683a      	ldr	r2, [r7, #0]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f7f1 fa77 	bl	800052c <__aeabi_uldivmod>
 800f03e:	0002      	movs	r2, r0
 800f040:	000b      	movs	r3, r1
 800f042:	0013      	movs	r3, r2
 800f044:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f048:	23c0      	movs	r3, #192	@ 0xc0
 800f04a:	009b      	lsls	r3, r3, #2
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d309      	bcc.n	800f064 <UART_SetConfig+0x398>
 800f050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f052:	2380      	movs	r3, #128	@ 0x80
 800f054:	035b      	lsls	r3, r3, #13
 800f056:	429a      	cmp	r2, r3
 800f058:	d204      	bcs.n	800f064 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800f05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f060:	60da      	str	r2, [r3, #12]
 800f062:	e0d6      	b.n	800f212 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800f064:	231a      	movs	r3, #26
 800f066:	2220      	movs	r2, #32
 800f068:	189b      	adds	r3, r3, r2
 800f06a:	19db      	adds	r3, r3, r7
 800f06c:	2201      	movs	r2, #1
 800f06e:	701a      	strb	r2, [r3, #0]
 800f070:	e0cf      	b.n	800f212 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f074:	69da      	ldr	r2, [r3, #28]
 800f076:	2380      	movs	r3, #128	@ 0x80
 800f078:	021b      	lsls	r3, r3, #8
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d000      	beq.n	800f080 <UART_SetConfig+0x3b4>
 800f07e:	e070      	b.n	800f162 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800f080:	231b      	movs	r3, #27
 800f082:	2220      	movs	r2, #32
 800f084:	189b      	adds	r3, r3, r2
 800f086:	19db      	adds	r3, r3, r7
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	2b08      	cmp	r3, #8
 800f08c:	d015      	beq.n	800f0ba <UART_SetConfig+0x3ee>
 800f08e:	dc18      	bgt.n	800f0c2 <UART_SetConfig+0x3f6>
 800f090:	2b04      	cmp	r3, #4
 800f092:	d00d      	beq.n	800f0b0 <UART_SetConfig+0x3e4>
 800f094:	dc15      	bgt.n	800f0c2 <UART_SetConfig+0x3f6>
 800f096:	2b00      	cmp	r3, #0
 800f098:	d002      	beq.n	800f0a0 <UART_SetConfig+0x3d4>
 800f09a:	2b02      	cmp	r3, #2
 800f09c:	d005      	beq.n	800f0aa <UART_SetConfig+0x3de>
 800f09e:	e010      	b.n	800f0c2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0a0:	f7fe fb46 	bl	800d730 <HAL_RCC_GetPCLK1Freq>
 800f0a4:	0003      	movs	r3, r0
 800f0a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f0a8:	e014      	b.n	800f0d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0aa:	4b66      	ldr	r3, [pc, #408]	@ (800f244 <UART_SetConfig+0x578>)
 800f0ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f0ae:	e011      	b.n	800f0d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0b0:	f7fe fab2 	bl	800d618 <HAL_RCC_GetSysClockFreq>
 800f0b4:	0003      	movs	r3, r0
 800f0b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f0b8:	e00c      	b.n	800f0d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0ba:	2380      	movs	r3, #128	@ 0x80
 800f0bc:	021b      	lsls	r3, r3, #8
 800f0be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f0c0:	e008      	b.n	800f0d4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800f0c6:	231a      	movs	r3, #26
 800f0c8:	2220      	movs	r2, #32
 800f0ca:	189b      	adds	r3, r3, r2
 800f0cc:	19db      	adds	r3, r3, r7
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	701a      	strb	r2, [r3, #0]
        break;
 800f0d2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d100      	bne.n	800f0dc <UART_SetConfig+0x410>
 800f0da:	e09a      	b.n	800f212 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0e0:	4b57      	ldr	r3, [pc, #348]	@ (800f240 <UART_SetConfig+0x574>)
 800f0e2:	0052      	lsls	r2, r2, #1
 800f0e4:	5ad3      	ldrh	r3, [r2, r3]
 800f0e6:	0019      	movs	r1, r3
 800f0e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f0ea:	f7f1 f831 	bl	8000150 <__udivsi3>
 800f0ee:	0003      	movs	r3, r0
 800f0f0:	005a      	lsls	r2, r3, #1
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	085b      	lsrs	r3, r3, #1
 800f0f8:	18d2      	adds	r2, r2, r3
 800f0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	0019      	movs	r1, r3
 800f100:	0010      	movs	r0, r2
 800f102:	f7f1 f825 	bl	8000150 <__udivsi3>
 800f106:	0003      	movs	r3, r0
 800f108:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f10c:	2b0f      	cmp	r3, #15
 800f10e:	d921      	bls.n	800f154 <UART_SetConfig+0x488>
 800f110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f112:	2380      	movs	r3, #128	@ 0x80
 800f114:	025b      	lsls	r3, r3, #9
 800f116:	429a      	cmp	r2, r3
 800f118:	d21c      	bcs.n	800f154 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	200e      	movs	r0, #14
 800f120:	2420      	movs	r4, #32
 800f122:	1903      	adds	r3, r0, r4
 800f124:	19db      	adds	r3, r3, r7
 800f126:	210f      	movs	r1, #15
 800f128:	438a      	bics	r2, r1
 800f12a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12e:	085b      	lsrs	r3, r3, #1
 800f130:	b29b      	uxth	r3, r3
 800f132:	2207      	movs	r2, #7
 800f134:	4013      	ands	r3, r2
 800f136:	b299      	uxth	r1, r3
 800f138:	1903      	adds	r3, r0, r4
 800f13a:	19db      	adds	r3, r3, r7
 800f13c:	1902      	adds	r2, r0, r4
 800f13e:	19d2      	adds	r2, r2, r7
 800f140:	8812      	ldrh	r2, [r2, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800f146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	1902      	adds	r2, r0, r4
 800f14c:	19d2      	adds	r2, r2, r7
 800f14e:	8812      	ldrh	r2, [r2, #0]
 800f150:	60da      	str	r2, [r3, #12]
 800f152:	e05e      	b.n	800f212 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800f154:	231a      	movs	r3, #26
 800f156:	2220      	movs	r2, #32
 800f158:	189b      	adds	r3, r3, r2
 800f15a:	19db      	adds	r3, r3, r7
 800f15c:	2201      	movs	r2, #1
 800f15e:	701a      	strb	r2, [r3, #0]
 800f160:	e057      	b.n	800f212 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f162:	231b      	movs	r3, #27
 800f164:	2220      	movs	r2, #32
 800f166:	189b      	adds	r3, r3, r2
 800f168:	19db      	adds	r3, r3, r7
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	2b08      	cmp	r3, #8
 800f16e:	d015      	beq.n	800f19c <UART_SetConfig+0x4d0>
 800f170:	dc18      	bgt.n	800f1a4 <UART_SetConfig+0x4d8>
 800f172:	2b04      	cmp	r3, #4
 800f174:	d00d      	beq.n	800f192 <UART_SetConfig+0x4c6>
 800f176:	dc15      	bgt.n	800f1a4 <UART_SetConfig+0x4d8>
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d002      	beq.n	800f182 <UART_SetConfig+0x4b6>
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d005      	beq.n	800f18c <UART_SetConfig+0x4c0>
 800f180:	e010      	b.n	800f1a4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f182:	f7fe fad5 	bl	800d730 <HAL_RCC_GetPCLK1Freq>
 800f186:	0003      	movs	r3, r0
 800f188:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f18a:	e014      	b.n	800f1b6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f18c:	4b2d      	ldr	r3, [pc, #180]	@ (800f244 <UART_SetConfig+0x578>)
 800f18e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f190:	e011      	b.n	800f1b6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f192:	f7fe fa41 	bl	800d618 <HAL_RCC_GetSysClockFreq>
 800f196:	0003      	movs	r3, r0
 800f198:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f19a:	e00c      	b.n	800f1b6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f19c:	2380      	movs	r3, #128	@ 0x80
 800f19e:	021b      	lsls	r3, r3, #8
 800f1a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f1a2:	e008      	b.n	800f1b6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800f1a8:	231a      	movs	r3, #26
 800f1aa:	2220      	movs	r2, #32
 800f1ac:	189b      	adds	r3, r3, r2
 800f1ae:	19db      	adds	r3, r3, r7
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	701a      	strb	r2, [r3, #0]
        break;
 800f1b4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d02a      	beq.n	800f212 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1c0:	4b1f      	ldr	r3, [pc, #124]	@ (800f240 <UART_SetConfig+0x574>)
 800f1c2:	0052      	lsls	r2, r2, #1
 800f1c4:	5ad3      	ldrh	r3, [r2, r3]
 800f1c6:	0019      	movs	r1, r3
 800f1c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f1ca:	f7f0 ffc1 	bl	8000150 <__udivsi3>
 800f1ce:	0003      	movs	r3, r0
 800f1d0:	001a      	movs	r2, r3
 800f1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	085b      	lsrs	r3, r3, #1
 800f1d8:	18d2      	adds	r2, r2, r3
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	0019      	movs	r1, r3
 800f1e0:	0010      	movs	r0, r2
 800f1e2:	f7f0 ffb5 	bl	8000150 <__udivsi3>
 800f1e6:	0003      	movs	r3, r0
 800f1e8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ec:	2b0f      	cmp	r3, #15
 800f1ee:	d90a      	bls.n	800f206 <UART_SetConfig+0x53a>
 800f1f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1f2:	2380      	movs	r3, #128	@ 0x80
 800f1f4:	025b      	lsls	r3, r3, #9
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d205      	bcs.n	800f206 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	60da      	str	r2, [r3, #12]
 800f204:	e005      	b.n	800f212 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800f206:	231a      	movs	r3, #26
 800f208:	2220      	movs	r2, #32
 800f20a:	189b      	adds	r3, r3, r2
 800f20c:	19db      	adds	r3, r3, r7
 800f20e:	2201      	movs	r2, #1
 800f210:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f214:	226a      	movs	r2, #106	@ 0x6a
 800f216:	2101      	movs	r1, #1
 800f218:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800f21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21c:	2268      	movs	r2, #104	@ 0x68
 800f21e:	2101      	movs	r1, #1
 800f220:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f224:	2200      	movs	r2, #0
 800f226:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f22a:	2200      	movs	r2, #0
 800f22c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f22e:	231a      	movs	r3, #26
 800f230:	2220      	movs	r2, #32
 800f232:	189b      	adds	r3, r3, r2
 800f234:	19db      	adds	r3, r3, r7
 800f236:	781b      	ldrb	r3, [r3, #0]
}
 800f238:	0018      	movs	r0, r3
 800f23a:	46bd      	mov	sp, r7
 800f23c:	b010      	add	sp, #64	@ 0x40
 800f23e:	bdb0      	pop	{r4, r5, r7, pc}
 800f240:	0801640c 	.word	0x0801640c
 800f244:	00f42400 	.word	0x00f42400

0800f248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f254:	2208      	movs	r2, #8
 800f256:	4013      	ands	r3, r2
 800f258:	d00b      	beq.n	800f272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	4a4a      	ldr	r2, [pc, #296]	@ (800f38c <UART_AdvFeatureConfig+0x144>)
 800f262:	4013      	ands	r3, r2
 800f264:	0019      	movs	r1, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	430a      	orrs	r2, r1
 800f270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f276:	2201      	movs	r2, #1
 800f278:	4013      	ands	r3, r2
 800f27a:	d00b      	beq.n	800f294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	4a43      	ldr	r2, [pc, #268]	@ (800f390 <UART_AdvFeatureConfig+0x148>)
 800f284:	4013      	ands	r3, r2
 800f286:	0019      	movs	r1, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	430a      	orrs	r2, r1
 800f292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f298:	2202      	movs	r2, #2
 800f29a:	4013      	ands	r3, r2
 800f29c:	d00b      	beq.n	800f2b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	4a3b      	ldr	r2, [pc, #236]	@ (800f394 <UART_AdvFeatureConfig+0x14c>)
 800f2a6:	4013      	ands	r3, r2
 800f2a8:	0019      	movs	r1, r3
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	430a      	orrs	r2, r1
 800f2b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2ba:	2204      	movs	r2, #4
 800f2bc:	4013      	ands	r3, r2
 800f2be:	d00b      	beq.n	800f2d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	4a34      	ldr	r2, [pc, #208]	@ (800f398 <UART_AdvFeatureConfig+0x150>)
 800f2c8:	4013      	ands	r3, r2
 800f2ca:	0019      	movs	r1, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	430a      	orrs	r2, r1
 800f2d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2dc:	2210      	movs	r2, #16
 800f2de:	4013      	ands	r3, r2
 800f2e0:	d00b      	beq.n	800f2fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	4a2c      	ldr	r2, [pc, #176]	@ (800f39c <UART_AdvFeatureConfig+0x154>)
 800f2ea:	4013      	ands	r3, r2
 800f2ec:	0019      	movs	r1, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	430a      	orrs	r2, r1
 800f2f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2fe:	2220      	movs	r2, #32
 800f300:	4013      	ands	r3, r2
 800f302:	d00b      	beq.n	800f31c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	4a25      	ldr	r2, [pc, #148]	@ (800f3a0 <UART_AdvFeatureConfig+0x158>)
 800f30c:	4013      	ands	r3, r2
 800f30e:	0019      	movs	r1, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	430a      	orrs	r2, r1
 800f31a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f320:	2240      	movs	r2, #64	@ 0x40
 800f322:	4013      	ands	r3, r2
 800f324:	d01d      	beq.n	800f362 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	4a1d      	ldr	r2, [pc, #116]	@ (800f3a4 <UART_AdvFeatureConfig+0x15c>)
 800f32e:	4013      	ands	r3, r2
 800f330:	0019      	movs	r1, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	430a      	orrs	r2, r1
 800f33c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f342:	2380      	movs	r3, #128	@ 0x80
 800f344:	035b      	lsls	r3, r3, #13
 800f346:	429a      	cmp	r2, r3
 800f348:	d10b      	bne.n	800f362 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	4a15      	ldr	r2, [pc, #84]	@ (800f3a8 <UART_AdvFeatureConfig+0x160>)
 800f352:	4013      	ands	r3, r2
 800f354:	0019      	movs	r1, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	430a      	orrs	r2, r1
 800f360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f366:	2280      	movs	r2, #128	@ 0x80
 800f368:	4013      	ands	r3, r2
 800f36a:	d00b      	beq.n	800f384 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	4a0e      	ldr	r2, [pc, #56]	@ (800f3ac <UART_AdvFeatureConfig+0x164>)
 800f374:	4013      	ands	r3, r2
 800f376:	0019      	movs	r1, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	430a      	orrs	r2, r1
 800f382:	605a      	str	r2, [r3, #4]
  }
}
 800f384:	46c0      	nop			@ (mov r8, r8)
 800f386:	46bd      	mov	sp, r7
 800f388:	b002      	add	sp, #8
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	ffff7fff 	.word	0xffff7fff
 800f390:	fffdffff 	.word	0xfffdffff
 800f394:	fffeffff 	.word	0xfffeffff
 800f398:	fffbffff 	.word	0xfffbffff
 800f39c:	ffffefff 	.word	0xffffefff
 800f3a0:	ffffdfff 	.word	0xffffdfff
 800f3a4:	ffefffff 	.word	0xffefffff
 800f3a8:	ff9fffff 	.word	0xff9fffff
 800f3ac:	fff7ffff 	.word	0xfff7ffff

0800f3b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b092      	sub	sp, #72	@ 0x48
 800f3b4:	af02      	add	r7, sp, #8
 800f3b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2290      	movs	r2, #144	@ 0x90
 800f3bc:	2100      	movs	r1, #0
 800f3be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f3c0:	f7fc faa6 	bl	800b910 <HAL_GetTick>
 800f3c4:	0003      	movs	r3, r0
 800f3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2208      	movs	r2, #8
 800f3d0:	4013      	ands	r3, r2
 800f3d2:	2b08      	cmp	r3, #8
 800f3d4:	d12d      	bne.n	800f432 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3d8:	2280      	movs	r2, #128	@ 0x80
 800f3da:	0391      	lsls	r1, r2, #14
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	4a47      	ldr	r2, [pc, #284]	@ (800f4fc <UART_CheckIdleState+0x14c>)
 800f3e0:	9200      	str	r2, [sp, #0]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f000 f88e 	bl	800f504 <UART_WaitOnFlagUntilTimeout>
 800f3e8:	1e03      	subs	r3, r0, #0
 800f3ea:	d022      	beq.n	800f432 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3ec:	f3ef 8310 	mrs	r3, PRIMASK
 800f3f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f3f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3fc:	f383 8810 	msr	PRIMASK, r3
}
 800f400:	46c0      	nop			@ (mov r8, r8)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2180      	movs	r1, #128	@ 0x80
 800f40e:	438a      	bics	r2, r1
 800f410:	601a      	str	r2, [r3, #0]
 800f412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f418:	f383 8810 	msr	PRIMASK, r3
}
 800f41c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2288      	movs	r2, #136	@ 0x88
 800f422:	2120      	movs	r1, #32
 800f424:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2284      	movs	r2, #132	@ 0x84
 800f42a:	2100      	movs	r1, #0
 800f42c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f42e:	2303      	movs	r3, #3
 800f430:	e060      	b.n	800f4f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2204      	movs	r2, #4
 800f43a:	4013      	ands	r3, r2
 800f43c:	2b04      	cmp	r3, #4
 800f43e:	d146      	bne.n	800f4ce <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f442:	2280      	movs	r2, #128	@ 0x80
 800f444:	03d1      	lsls	r1, r2, #15
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	4a2c      	ldr	r2, [pc, #176]	@ (800f4fc <UART_CheckIdleState+0x14c>)
 800f44a:	9200      	str	r2, [sp, #0]
 800f44c:	2200      	movs	r2, #0
 800f44e:	f000 f859 	bl	800f504 <UART_WaitOnFlagUntilTimeout>
 800f452:	1e03      	subs	r3, r0, #0
 800f454:	d03b      	beq.n	800f4ce <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f456:	f3ef 8310 	mrs	r3, PRIMASK
 800f45a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f45c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f45e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f460:	2301      	movs	r3, #1
 800f462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	f383 8810 	msr	PRIMASK, r3
}
 800f46a:	46c0      	nop			@ (mov r8, r8)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4922      	ldr	r1, [pc, #136]	@ (800f500 <UART_CheckIdleState+0x150>)
 800f478:	400a      	ands	r2, r1
 800f47a:	601a      	str	r2, [r3, #0]
 800f47c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f47e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	f383 8810 	msr	PRIMASK, r3
}
 800f486:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f488:	f3ef 8310 	mrs	r3, PRIMASK
 800f48c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f48e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f490:	633b      	str	r3, [r7, #48]	@ 0x30
 800f492:	2301      	movs	r3, #1
 800f494:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	f383 8810 	msr	PRIMASK, r3
}
 800f49c:	46c0      	nop			@ (mov r8, r8)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	689a      	ldr	r2, [r3, #8]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2101      	movs	r1, #1
 800f4aa:	438a      	bics	r2, r1
 800f4ac:	609a      	str	r2, [r3, #8]
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4b2:	6a3b      	ldr	r3, [r7, #32]
 800f4b4:	f383 8810 	msr	PRIMASK, r3
}
 800f4b8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	228c      	movs	r2, #140	@ 0x8c
 800f4be:	2120      	movs	r1, #32
 800f4c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2284      	movs	r2, #132	@ 0x84
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4ca:	2303      	movs	r3, #3
 800f4cc:	e012      	b.n	800f4f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2288      	movs	r2, #136	@ 0x88
 800f4d2:	2120      	movs	r1, #32
 800f4d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	228c      	movs	r2, #140	@ 0x8c
 800f4da:	2120      	movs	r1, #32
 800f4dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2284      	movs	r2, #132	@ 0x84
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f4f2:	2300      	movs	r3, #0
}
 800f4f4:	0018      	movs	r0, r3
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	b010      	add	sp, #64	@ 0x40
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	01ffffff 	.word	0x01ffffff
 800f500:	fffffedf 	.word	0xfffffedf

0800f504 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	603b      	str	r3, [r7, #0]
 800f510:	1dfb      	adds	r3, r7, #7
 800f512:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f514:	e051      	b.n	800f5ba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	3301      	adds	r3, #1
 800f51a:	d04e      	beq.n	800f5ba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f51c:	f7fc f9f8 	bl	800b910 <HAL_GetTick>
 800f520:	0002      	movs	r2, r0
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	1ad3      	subs	r3, r2, r3
 800f526:	69ba      	ldr	r2, [r7, #24]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d302      	bcc.n	800f532 <UART_WaitOnFlagUntilTimeout+0x2e>
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d101      	bne.n	800f536 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800f532:	2303      	movs	r3, #3
 800f534:	e051      	b.n	800f5da <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2204      	movs	r2, #4
 800f53e:	4013      	ands	r3, r2
 800f540:	d03b      	beq.n	800f5ba <UART_WaitOnFlagUntilTimeout+0xb6>
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	2b80      	cmp	r3, #128	@ 0x80
 800f546:	d038      	beq.n	800f5ba <UART_WaitOnFlagUntilTimeout+0xb6>
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	2b40      	cmp	r3, #64	@ 0x40
 800f54c:	d035      	beq.n	800f5ba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	69db      	ldr	r3, [r3, #28]
 800f554:	2208      	movs	r2, #8
 800f556:	4013      	ands	r3, r2
 800f558:	2b08      	cmp	r3, #8
 800f55a:	d111      	bne.n	800f580 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2208      	movs	r2, #8
 800f562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	0018      	movs	r0, r3
 800f568:	f000 f83c 	bl	800f5e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2290      	movs	r2, #144	@ 0x90
 800f570:	2108      	movs	r1, #8
 800f572:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2284      	movs	r2, #132	@ 0x84
 800f578:	2100      	movs	r1, #0
 800f57a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800f57c:	2301      	movs	r3, #1
 800f57e:	e02c      	b.n	800f5da <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	69da      	ldr	r2, [r3, #28]
 800f586:	2380      	movs	r3, #128	@ 0x80
 800f588:	011b      	lsls	r3, r3, #4
 800f58a:	401a      	ands	r2, r3
 800f58c:	2380      	movs	r3, #128	@ 0x80
 800f58e:	011b      	lsls	r3, r3, #4
 800f590:	429a      	cmp	r2, r3
 800f592:	d112      	bne.n	800f5ba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2280      	movs	r2, #128	@ 0x80
 800f59a:	0112      	lsls	r2, r2, #4
 800f59c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	0018      	movs	r0, r3
 800f5a2:	f000 f81f 	bl	800f5e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2290      	movs	r2, #144	@ 0x90
 800f5aa:	2120      	movs	r1, #32
 800f5ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2284      	movs	r2, #132	@ 0x84
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	e00f      	b.n	800f5da <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	69db      	ldr	r3, [r3, #28]
 800f5c0:	68ba      	ldr	r2, [r7, #8]
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	425a      	negs	r2, r3
 800f5ca:	4153      	adcs	r3, r2
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	001a      	movs	r2, r3
 800f5d0:	1dfb      	adds	r3, r7, #7
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d09e      	beq.n	800f516 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5d8:	2300      	movs	r3, #0
}
 800f5da:	0018      	movs	r0, r3
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	b004      	add	sp, #16
 800f5e0:	bd80      	pop	{r7, pc}
	...

0800f5e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b08e      	sub	sp, #56	@ 0x38
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5ec:	f3ef 8310 	mrs	r3, PRIMASK
 800f5f0:	617b      	str	r3, [r7, #20]
  return(result);
 800f5f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	f383 8810 	msr	PRIMASK, r3
}
 800f600:	46c0      	nop			@ (mov r8, r8)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4926      	ldr	r1, [pc, #152]	@ (800f6a8 <UART_EndRxTransfer+0xc4>)
 800f60e:	400a      	ands	r2, r1
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	f383 8810 	msr	PRIMASK, r3
}
 800f61c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f61e:	f3ef 8310 	mrs	r3, PRIMASK
 800f622:	623b      	str	r3, [r7, #32]
  return(result);
 800f624:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f626:	633b      	str	r3, [r7, #48]	@ 0x30
 800f628:	2301      	movs	r3, #1
 800f62a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62e:	f383 8810 	msr	PRIMASK, r3
}
 800f632:	46c0      	nop			@ (mov r8, r8)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	689a      	ldr	r2, [r3, #8]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	491b      	ldr	r1, [pc, #108]	@ (800f6ac <UART_EndRxTransfer+0xc8>)
 800f640:	400a      	ands	r2, r1
 800f642:	609a      	str	r2, [r3, #8]
 800f644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f646:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64a:	f383 8810 	msr	PRIMASK, r3
}
 800f64e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f654:	2b01      	cmp	r3, #1
 800f656:	d118      	bne.n	800f68a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f658:	f3ef 8310 	mrs	r3, PRIMASK
 800f65c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f65e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f662:	2301      	movs	r3, #1
 800f664:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f383 8810 	msr	PRIMASK, r3
}
 800f66c:	46c0      	nop			@ (mov r8, r8)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2110      	movs	r1, #16
 800f67a:	438a      	bics	r2, r1
 800f67c:	601a      	str	r2, [r3, #0]
 800f67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	f383 8810 	msr	PRIMASK, r3
}
 800f688:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	228c      	movs	r2, #140	@ 0x8c
 800f68e:	2120      	movs	r1, #32
 800f690:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2200      	movs	r2, #0
 800f696:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f69e:	46c0      	nop			@ (mov r8, r8)
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	b00e      	add	sp, #56	@ 0x38
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	46c0      	nop			@ (mov r8, r8)
 800f6a8:	fffffedf 	.word	0xfffffedf
 800f6ac:	effffffe 	.word	0xeffffffe

0800f6b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2284      	movs	r2, #132	@ 0x84
 800f6bc:	5c9b      	ldrb	r3, [r3, r2]
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d101      	bne.n	800f6c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800f6c2:	2302      	movs	r3, #2
 800f6c4:	e027      	b.n	800f716 <HAL_UARTEx_DisableFifoMode+0x66>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2284      	movs	r2, #132	@ 0x84
 800f6ca:	2101      	movs	r1, #1
 800f6cc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2288      	movs	r2, #136	@ 0x88
 800f6d2:	2124      	movs	r1, #36	@ 0x24
 800f6d4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2101      	movs	r1, #1
 800f6ea:	438a      	bics	r2, r1
 800f6ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	4a0b      	ldr	r2, [pc, #44]	@ (800f720 <HAL_UARTEx_DisableFifoMode+0x70>)
 800f6f2:	4013      	ands	r3, r2
 800f6f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	68fa      	ldr	r2, [r7, #12]
 800f702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2288      	movs	r2, #136	@ 0x88
 800f708:	2120      	movs	r1, #32
 800f70a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2284      	movs	r2, #132	@ 0x84
 800f710:	2100      	movs	r1, #0
 800f712:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f714:	2300      	movs	r3, #0
}
 800f716:	0018      	movs	r0, r3
 800f718:	46bd      	mov	sp, r7
 800f71a:	b004      	add	sp, #16
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	46c0      	nop			@ (mov r8, r8)
 800f720:	dfffffff 	.word	0xdfffffff

0800f724 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2284      	movs	r2, #132	@ 0x84
 800f732:	5c9b      	ldrb	r3, [r3, r2]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d101      	bne.n	800f73c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f738:	2302      	movs	r3, #2
 800f73a:	e02e      	b.n	800f79a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2284      	movs	r2, #132	@ 0x84
 800f740:	2101      	movs	r1, #1
 800f742:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2288      	movs	r2, #136	@ 0x88
 800f748:	2124      	movs	r1, #36	@ 0x24
 800f74a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2101      	movs	r1, #1
 800f760:	438a      	bics	r2, r1
 800f762:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	689b      	ldr	r3, [r3, #8]
 800f76a:	00db      	lsls	r3, r3, #3
 800f76c:	08d9      	lsrs	r1, r3, #3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	683a      	ldr	r2, [r7, #0]
 800f774:	430a      	orrs	r2, r1
 800f776:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	0018      	movs	r0, r3
 800f77c:	f000 f854 	bl	800f828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2288      	movs	r2, #136	@ 0x88
 800f78c:	2120      	movs	r1, #32
 800f78e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2284      	movs	r2, #132	@ 0x84
 800f794:	2100      	movs	r1, #0
 800f796:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	0018      	movs	r0, r3
 800f79c:	46bd      	mov	sp, r7
 800f79e:	b004      	add	sp, #16
 800f7a0:	bd80      	pop	{r7, pc}
	...

0800f7a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2284      	movs	r2, #132	@ 0x84
 800f7b2:	5c9b      	ldrb	r3, [r3, r2]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d101      	bne.n	800f7bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	e02f      	b.n	800f81c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2284      	movs	r2, #132	@ 0x84
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2288      	movs	r2, #136	@ 0x88
 800f7c8:	2124      	movs	r1, #36	@ 0x24
 800f7ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2101      	movs	r1, #1
 800f7e0:	438a      	bics	r2, r1
 800f7e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	4a0e      	ldr	r2, [pc, #56]	@ (800f824 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800f7ec:	4013      	ands	r3, r2
 800f7ee:	0019      	movs	r1, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	683a      	ldr	r2, [r7, #0]
 800f7f6:	430a      	orrs	r2, r1
 800f7f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	0018      	movs	r0, r3
 800f7fe:	f000 f813 	bl	800f828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	68fa      	ldr	r2, [r7, #12]
 800f808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2288      	movs	r2, #136	@ 0x88
 800f80e:	2120      	movs	r1, #32
 800f810:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2284      	movs	r2, #132	@ 0x84
 800f816:	2100      	movs	r1, #0
 800f818:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f81a:	2300      	movs	r3, #0
}
 800f81c:	0018      	movs	r0, r3
 800f81e:	46bd      	mov	sp, r7
 800f820:	b004      	add	sp, #16
 800f822:	bd80      	pop	{r7, pc}
 800f824:	f1ffffff 	.word	0xf1ffffff

0800f828 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f834:	2b00      	cmp	r3, #0
 800f836:	d108      	bne.n	800f84a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	226a      	movs	r2, #106	@ 0x6a
 800f83c:	2101      	movs	r1, #1
 800f83e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2268      	movs	r2, #104	@ 0x68
 800f844:	2101      	movs	r1, #1
 800f846:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f848:	e043      	b.n	800f8d2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f84a:	260f      	movs	r6, #15
 800f84c:	19bb      	adds	r3, r7, r6
 800f84e:	2208      	movs	r2, #8
 800f850:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f852:	200e      	movs	r0, #14
 800f854:	183b      	adds	r3, r7, r0
 800f856:	2208      	movs	r2, #8
 800f858:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	0e5b      	lsrs	r3, r3, #25
 800f862:	b2da      	uxtb	r2, r3
 800f864:	240d      	movs	r4, #13
 800f866:	193b      	adds	r3, r7, r4
 800f868:	2107      	movs	r1, #7
 800f86a:	400a      	ands	r2, r1
 800f86c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	0f5b      	lsrs	r3, r3, #29
 800f876:	b2da      	uxtb	r2, r3
 800f878:	250c      	movs	r5, #12
 800f87a:	197b      	adds	r3, r7, r5
 800f87c:	2107      	movs	r1, #7
 800f87e:	400a      	ands	r2, r1
 800f880:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f882:	183b      	adds	r3, r7, r0
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	197a      	adds	r2, r7, r5
 800f888:	7812      	ldrb	r2, [r2, #0]
 800f88a:	4914      	ldr	r1, [pc, #80]	@ (800f8dc <UARTEx_SetNbDataToProcess+0xb4>)
 800f88c:	5c8a      	ldrb	r2, [r1, r2]
 800f88e:	435a      	muls	r2, r3
 800f890:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800f892:	197b      	adds	r3, r7, r5
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	4a12      	ldr	r2, [pc, #72]	@ (800f8e0 <UARTEx_SetNbDataToProcess+0xb8>)
 800f898:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f89a:	0019      	movs	r1, r3
 800f89c:	f7f0 fce2 	bl	8000264 <__divsi3>
 800f8a0:	0003      	movs	r3, r0
 800f8a2:	b299      	uxth	r1, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	226a      	movs	r2, #106	@ 0x6a
 800f8a8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8aa:	19bb      	adds	r3, r7, r6
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	193a      	adds	r2, r7, r4
 800f8b0:	7812      	ldrb	r2, [r2, #0]
 800f8b2:	490a      	ldr	r1, [pc, #40]	@ (800f8dc <UARTEx_SetNbDataToProcess+0xb4>)
 800f8b4:	5c8a      	ldrb	r2, [r1, r2]
 800f8b6:	435a      	muls	r2, r3
 800f8b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8ba:	193b      	adds	r3, r7, r4
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	4a08      	ldr	r2, [pc, #32]	@ (800f8e0 <UARTEx_SetNbDataToProcess+0xb8>)
 800f8c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8c2:	0019      	movs	r1, r3
 800f8c4:	f7f0 fcce 	bl	8000264 <__divsi3>
 800f8c8:	0003      	movs	r3, r0
 800f8ca:	b299      	uxth	r1, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2268      	movs	r2, #104	@ 0x68
 800f8d0:	5299      	strh	r1, [r3, r2]
}
 800f8d2:	46c0      	nop			@ (mov r8, r8)
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	b005      	add	sp, #20
 800f8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8da:	46c0      	nop			@ (mov r8, r8)
 800f8dc:	08016424 	.word	0x08016424
 800f8e0:	0801642c 	.word	0x0801642c

0800f8e4 <atof>:
 800f8e4:	b510      	push	{r4, lr}
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	f000 fe18 	bl	801051c <strtod>
 800f8ec:	bd10      	pop	{r4, pc}
	...

0800f8f0 <sulp>:
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	0016      	movs	r6, r2
 800f8f4:	000d      	movs	r5, r1
 800f8f6:	f003 fb67 	bl	8012fc8 <__ulp>
 800f8fa:	2e00      	cmp	r6, #0
 800f8fc:	d00d      	beq.n	800f91a <sulp+0x2a>
 800f8fe:	236b      	movs	r3, #107	@ 0x6b
 800f900:	006a      	lsls	r2, r5, #1
 800f902:	0d52      	lsrs	r2, r2, #21
 800f904:	1a9b      	subs	r3, r3, r2
 800f906:	2b00      	cmp	r3, #0
 800f908:	dd07      	ble.n	800f91a <sulp+0x2a>
 800f90a:	2400      	movs	r4, #0
 800f90c:	4a03      	ldr	r2, [pc, #12]	@ (800f91c <sulp+0x2c>)
 800f90e:	051b      	lsls	r3, r3, #20
 800f910:	189d      	adds	r5, r3, r2
 800f912:	002b      	movs	r3, r5
 800f914:	0022      	movs	r2, r4
 800f916:	f7f2 ffaf 	bl	8002878 <__aeabi_dmul>
 800f91a:	bd70      	pop	{r4, r5, r6, pc}
 800f91c:	3ff00000 	.word	0x3ff00000

0800f920 <_strtod_l>:
 800f920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f922:	b0a3      	sub	sp, #140	@ 0x8c
 800f924:	921b      	str	r2, [sp, #108]	@ 0x6c
 800f926:	2200      	movs	r2, #0
 800f928:	2600      	movs	r6, #0
 800f92a:	2700      	movs	r7, #0
 800f92c:	9005      	str	r0, [sp, #20]
 800f92e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f930:	921e      	str	r2, [sp, #120]	@ 0x78
 800f932:	911d      	str	r1, [sp, #116]	@ 0x74
 800f934:	780a      	ldrb	r2, [r1, #0]
 800f936:	2a2b      	cmp	r2, #43	@ 0x2b
 800f938:	d053      	beq.n	800f9e2 <_strtod_l+0xc2>
 800f93a:	d83f      	bhi.n	800f9bc <_strtod_l+0x9c>
 800f93c:	2a0d      	cmp	r2, #13
 800f93e:	d839      	bhi.n	800f9b4 <_strtod_l+0x94>
 800f940:	2a08      	cmp	r2, #8
 800f942:	d839      	bhi.n	800f9b8 <_strtod_l+0x98>
 800f944:	2a00      	cmp	r2, #0
 800f946:	d042      	beq.n	800f9ce <_strtod_l+0xae>
 800f948:	2200      	movs	r2, #0
 800f94a:	9212      	str	r2, [sp, #72]	@ 0x48
 800f94c:	2100      	movs	r1, #0
 800f94e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800f950:	910c      	str	r1, [sp, #48]	@ 0x30
 800f952:	782a      	ldrb	r2, [r5, #0]
 800f954:	2a30      	cmp	r2, #48	@ 0x30
 800f956:	d000      	beq.n	800f95a <_strtod_l+0x3a>
 800f958:	e083      	b.n	800fa62 <_strtod_l+0x142>
 800f95a:	786a      	ldrb	r2, [r5, #1]
 800f95c:	3120      	adds	r1, #32
 800f95e:	438a      	bics	r2, r1
 800f960:	2a58      	cmp	r2, #88	@ 0x58
 800f962:	d000      	beq.n	800f966 <_strtod_l+0x46>
 800f964:	e073      	b.n	800fa4e <_strtod_l+0x12e>
 800f966:	9302      	str	r3, [sp, #8]
 800f968:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f96a:	4a9b      	ldr	r2, [pc, #620]	@ (800fbd8 <_strtod_l+0x2b8>)
 800f96c:	9301      	str	r3, [sp, #4]
 800f96e:	ab1e      	add	r3, sp, #120	@ 0x78
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	9805      	ldr	r0, [sp, #20]
 800f974:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f976:	a91d      	add	r1, sp, #116	@ 0x74
 800f978:	f002 fbde 	bl	8012138 <__gethex>
 800f97c:	230f      	movs	r3, #15
 800f97e:	0002      	movs	r2, r0
 800f980:	401a      	ands	r2, r3
 800f982:	0004      	movs	r4, r0
 800f984:	9206      	str	r2, [sp, #24]
 800f986:	4218      	tst	r0, r3
 800f988:	d005      	beq.n	800f996 <_strtod_l+0x76>
 800f98a:	2a06      	cmp	r2, #6
 800f98c:	d12b      	bne.n	800f9e6 <_strtod_l+0xc6>
 800f98e:	2300      	movs	r3, #0
 800f990:	3501      	adds	r5, #1
 800f992:	951d      	str	r5, [sp, #116]	@ 0x74
 800f994:	9312      	str	r3, [sp, #72]	@ 0x48
 800f996:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d002      	beq.n	800f9a2 <_strtod_l+0x82>
 800f99c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f99e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f9a0:	6013      	str	r3, [r2, #0]
 800f9a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d019      	beq.n	800f9dc <_strtod_l+0xbc>
 800f9a8:	2380      	movs	r3, #128	@ 0x80
 800f9aa:	0030      	movs	r0, r6
 800f9ac:	061b      	lsls	r3, r3, #24
 800f9ae:	18f9      	adds	r1, r7, r3
 800f9b0:	b023      	add	sp, #140	@ 0x8c
 800f9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9b4:	2a20      	cmp	r2, #32
 800f9b6:	d1c7      	bne.n	800f948 <_strtod_l+0x28>
 800f9b8:	3101      	adds	r1, #1
 800f9ba:	e7ba      	b.n	800f932 <_strtod_l+0x12>
 800f9bc:	2a2d      	cmp	r2, #45	@ 0x2d
 800f9be:	d1c3      	bne.n	800f948 <_strtod_l+0x28>
 800f9c0:	3a2c      	subs	r2, #44	@ 0x2c
 800f9c2:	9212      	str	r2, [sp, #72]	@ 0x48
 800f9c4:	1c4a      	adds	r2, r1, #1
 800f9c6:	921d      	str	r2, [sp, #116]	@ 0x74
 800f9c8:	784a      	ldrb	r2, [r1, #1]
 800f9ca:	2a00      	cmp	r2, #0
 800f9cc:	d1be      	bne.n	800f94c <_strtod_l+0x2c>
 800f9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9d0:	931d      	str	r3, [sp, #116]	@ 0x74
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	9312      	str	r3, [sp, #72]	@ 0x48
 800f9d6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1df      	bne.n	800f99c <_strtod_l+0x7c>
 800f9dc:	0030      	movs	r0, r6
 800f9de:	0039      	movs	r1, r7
 800f9e0:	e7e6      	b.n	800f9b0 <_strtod_l+0x90>
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	e7ed      	b.n	800f9c2 <_strtod_l+0xa2>
 800f9e6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f9e8:	2a00      	cmp	r2, #0
 800f9ea:	d007      	beq.n	800f9fc <_strtod_l+0xdc>
 800f9ec:	2135      	movs	r1, #53	@ 0x35
 800f9ee:	a820      	add	r0, sp, #128	@ 0x80
 800f9f0:	f003 fbe0 	bl	80131b4 <__copybits>
 800f9f4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f9f6:	9805      	ldr	r0, [sp, #20]
 800f9f8:	f002 ffa2 	bl	8012940 <_Bfree>
 800f9fc:	9806      	ldr	r0, [sp, #24]
 800f9fe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800fa00:	3801      	subs	r0, #1
 800fa02:	2804      	cmp	r0, #4
 800fa04:	d806      	bhi.n	800fa14 <_strtod_l+0xf4>
 800fa06:	f7f0 fb8f 	bl	8000128 <__gnu_thumb1_case_uqi>
 800fa0a:	0312      	.short	0x0312
 800fa0c:	1e1c      	.short	0x1e1c
 800fa0e:	12          	.byte	0x12
 800fa0f:	00          	.byte	0x00
 800fa10:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fa12:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800fa14:	05e4      	lsls	r4, r4, #23
 800fa16:	d502      	bpl.n	800fa1e <_strtod_l+0xfe>
 800fa18:	2380      	movs	r3, #128	@ 0x80
 800fa1a:	061b      	lsls	r3, r3, #24
 800fa1c:	431f      	orrs	r7, r3
 800fa1e:	4b6f      	ldr	r3, [pc, #444]	@ (800fbdc <_strtod_l+0x2bc>)
 800fa20:	423b      	tst	r3, r7
 800fa22:	d1b8      	bne.n	800f996 <_strtod_l+0x76>
 800fa24:	f001 fbfa 	bl	801121c <__errno>
 800fa28:	2322      	movs	r3, #34	@ 0x22
 800fa2a:	6003      	str	r3, [r0, #0]
 800fa2c:	e7b3      	b.n	800f996 <_strtod_l+0x76>
 800fa2e:	496c      	ldr	r1, [pc, #432]	@ (800fbe0 <_strtod_l+0x2c0>)
 800fa30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fa32:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fa34:	400a      	ands	r2, r1
 800fa36:	496b      	ldr	r1, [pc, #428]	@ (800fbe4 <_strtod_l+0x2c4>)
 800fa38:	185b      	adds	r3, r3, r1
 800fa3a:	051b      	lsls	r3, r3, #20
 800fa3c:	431a      	orrs	r2, r3
 800fa3e:	0017      	movs	r7, r2
 800fa40:	e7e8      	b.n	800fa14 <_strtod_l+0xf4>
 800fa42:	4f66      	ldr	r7, [pc, #408]	@ (800fbdc <_strtod_l+0x2bc>)
 800fa44:	e7e6      	b.n	800fa14 <_strtod_l+0xf4>
 800fa46:	2601      	movs	r6, #1
 800fa48:	4f67      	ldr	r7, [pc, #412]	@ (800fbe8 <_strtod_l+0x2c8>)
 800fa4a:	4276      	negs	r6, r6
 800fa4c:	e7e2      	b.n	800fa14 <_strtod_l+0xf4>
 800fa4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fa50:	1c5a      	adds	r2, r3, #1
 800fa52:	921d      	str	r2, [sp, #116]	@ 0x74
 800fa54:	785b      	ldrb	r3, [r3, #1]
 800fa56:	2b30      	cmp	r3, #48	@ 0x30
 800fa58:	d0f9      	beq.n	800fa4e <_strtod_l+0x12e>
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d09b      	beq.n	800f996 <_strtod_l+0x76>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	930c      	str	r3, [sp, #48]	@ 0x30
 800fa62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fa64:	220a      	movs	r2, #10
 800fa66:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa68:	2300      	movs	r3, #0
 800fa6a:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa6c:	930d      	str	r3, [sp, #52]	@ 0x34
 800fa6e:	9308      	str	r3, [sp, #32]
 800fa70:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800fa72:	7804      	ldrb	r4, [r0, #0]
 800fa74:	0023      	movs	r3, r4
 800fa76:	3b30      	subs	r3, #48	@ 0x30
 800fa78:	b2d9      	uxtb	r1, r3
 800fa7a:	2909      	cmp	r1, #9
 800fa7c:	d927      	bls.n	800face <_strtod_l+0x1ae>
 800fa7e:	2201      	movs	r2, #1
 800fa80:	495a      	ldr	r1, [pc, #360]	@ (800fbec <_strtod_l+0x2cc>)
 800fa82:	f001 fb07 	bl	8011094 <strncmp>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d033      	beq.n	800faf2 <_strtod_l+0x1d2>
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	0023      	movs	r3, r4
 800fa8e:	4684      	mov	ip, r0
 800fa90:	9a08      	ldr	r2, [sp, #32]
 800fa92:	900e      	str	r0, [sp, #56]	@ 0x38
 800fa94:	9206      	str	r2, [sp, #24]
 800fa96:	2220      	movs	r2, #32
 800fa98:	0019      	movs	r1, r3
 800fa9a:	4391      	bics	r1, r2
 800fa9c:	000a      	movs	r2, r1
 800fa9e:	2100      	movs	r1, #0
 800faa0:	9107      	str	r1, [sp, #28]
 800faa2:	2a45      	cmp	r2, #69	@ 0x45
 800faa4:	d000      	beq.n	800faa8 <_strtod_l+0x188>
 800faa6:	e0cb      	b.n	800fc40 <_strtod_l+0x320>
 800faa8:	9b06      	ldr	r3, [sp, #24]
 800faaa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800faac:	4303      	orrs	r3, r0
 800faae:	4313      	orrs	r3, r2
 800fab0:	428b      	cmp	r3, r1
 800fab2:	d08c      	beq.n	800f9ce <_strtod_l+0xae>
 800fab4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fab6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fab8:	3301      	adds	r3, #1
 800faba:	931d      	str	r3, [sp, #116]	@ 0x74
 800fabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fabe:	785b      	ldrb	r3, [r3, #1]
 800fac0:	2b2b      	cmp	r3, #43	@ 0x2b
 800fac2:	d07b      	beq.n	800fbbc <_strtod_l+0x29c>
 800fac4:	000c      	movs	r4, r1
 800fac6:	2b2d      	cmp	r3, #45	@ 0x2d
 800fac8:	d17e      	bne.n	800fbc8 <_strtod_l+0x2a8>
 800faca:	2401      	movs	r4, #1
 800facc:	e077      	b.n	800fbbe <_strtod_l+0x29e>
 800face:	9908      	ldr	r1, [sp, #32]
 800fad0:	2908      	cmp	r1, #8
 800fad2:	dc09      	bgt.n	800fae8 <_strtod_l+0x1c8>
 800fad4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fad6:	4351      	muls	r1, r2
 800fad8:	185b      	adds	r3, r3, r1
 800fada:	930d      	str	r3, [sp, #52]	@ 0x34
 800fadc:	9b08      	ldr	r3, [sp, #32]
 800fade:	3001      	adds	r0, #1
 800fae0:	3301      	adds	r3, #1
 800fae2:	9308      	str	r3, [sp, #32]
 800fae4:	901d      	str	r0, [sp, #116]	@ 0x74
 800fae6:	e7c3      	b.n	800fa70 <_strtod_l+0x150>
 800fae8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800faea:	4355      	muls	r5, r2
 800faec:	195b      	adds	r3, r3, r5
 800faee:	9310      	str	r3, [sp, #64]	@ 0x40
 800faf0:	e7f4      	b.n	800fadc <_strtod_l+0x1bc>
 800faf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	921d      	str	r2, [sp, #116]	@ 0x74
 800faf8:	9a08      	ldr	r2, [sp, #32]
 800fafa:	785b      	ldrb	r3, [r3, #1]
 800fafc:	2a00      	cmp	r2, #0
 800fafe:	d03e      	beq.n	800fb7e <_strtod_l+0x25e>
 800fb00:	900e      	str	r0, [sp, #56]	@ 0x38
 800fb02:	9206      	str	r2, [sp, #24]
 800fb04:	001a      	movs	r2, r3
 800fb06:	3a30      	subs	r2, #48	@ 0x30
 800fb08:	2a09      	cmp	r2, #9
 800fb0a:	d912      	bls.n	800fb32 <_strtod_l+0x212>
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	4694      	mov	ip, r2
 800fb10:	e7c1      	b.n	800fa96 <_strtod_l+0x176>
 800fb12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fb14:	3001      	adds	r0, #1
 800fb16:	1c5a      	adds	r2, r3, #1
 800fb18:	921d      	str	r2, [sp, #116]	@ 0x74
 800fb1a:	785b      	ldrb	r3, [r3, #1]
 800fb1c:	2b30      	cmp	r3, #48	@ 0x30
 800fb1e:	d0f8      	beq.n	800fb12 <_strtod_l+0x1f2>
 800fb20:	001a      	movs	r2, r3
 800fb22:	3a31      	subs	r2, #49	@ 0x31
 800fb24:	2a08      	cmp	r2, #8
 800fb26:	d844      	bhi.n	800fbb2 <_strtod_l+0x292>
 800fb28:	900e      	str	r0, [sp, #56]	@ 0x38
 800fb2a:	2000      	movs	r0, #0
 800fb2c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fb2e:	9006      	str	r0, [sp, #24]
 800fb30:	9213      	str	r2, [sp, #76]	@ 0x4c
 800fb32:	001c      	movs	r4, r3
 800fb34:	1c42      	adds	r2, r0, #1
 800fb36:	3c30      	subs	r4, #48	@ 0x30
 800fb38:	2b30      	cmp	r3, #48	@ 0x30
 800fb3a:	d01a      	beq.n	800fb72 <_strtod_l+0x252>
 800fb3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb3e:	9906      	ldr	r1, [sp, #24]
 800fb40:	189b      	adds	r3, r3, r2
 800fb42:	930e      	str	r3, [sp, #56]	@ 0x38
 800fb44:	230a      	movs	r3, #10
 800fb46:	469c      	mov	ip, r3
 800fb48:	9d06      	ldr	r5, [sp, #24]
 800fb4a:	1c4b      	adds	r3, r1, #1
 800fb4c:	1b5d      	subs	r5, r3, r5
 800fb4e:	42aa      	cmp	r2, r5
 800fb50:	dc17      	bgt.n	800fb82 <_strtod_l+0x262>
 800fb52:	43c3      	mvns	r3, r0
 800fb54:	9a06      	ldr	r2, [sp, #24]
 800fb56:	17db      	asrs	r3, r3, #31
 800fb58:	4003      	ands	r3, r0
 800fb5a:	18d1      	adds	r1, r2, r3
 800fb5c:	3201      	adds	r2, #1
 800fb5e:	18d3      	adds	r3, r2, r3
 800fb60:	9306      	str	r3, [sp, #24]
 800fb62:	2908      	cmp	r1, #8
 800fb64:	dc1c      	bgt.n	800fba0 <_strtod_l+0x280>
 800fb66:	230a      	movs	r3, #10
 800fb68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb6a:	4353      	muls	r3, r2
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	18e3      	adds	r3, r4, r3
 800fb70:	930d      	str	r3, [sp, #52]	@ 0x34
 800fb72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fb74:	0010      	movs	r0, r2
 800fb76:	1c59      	adds	r1, r3, #1
 800fb78:	911d      	str	r1, [sp, #116]	@ 0x74
 800fb7a:	785b      	ldrb	r3, [r3, #1]
 800fb7c:	e7c2      	b.n	800fb04 <_strtod_l+0x1e4>
 800fb7e:	9808      	ldr	r0, [sp, #32]
 800fb80:	e7cc      	b.n	800fb1c <_strtod_l+0x1fc>
 800fb82:	2908      	cmp	r1, #8
 800fb84:	dc05      	bgt.n	800fb92 <_strtod_l+0x272>
 800fb86:	4665      	mov	r5, ip
 800fb88:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fb8a:	4369      	muls	r1, r5
 800fb8c:	910d      	str	r1, [sp, #52]	@ 0x34
 800fb8e:	0019      	movs	r1, r3
 800fb90:	e7da      	b.n	800fb48 <_strtod_l+0x228>
 800fb92:	2b10      	cmp	r3, #16
 800fb94:	dcfb      	bgt.n	800fb8e <_strtod_l+0x26e>
 800fb96:	4661      	mov	r1, ip
 800fb98:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800fb9a:	434d      	muls	r5, r1
 800fb9c:	9510      	str	r5, [sp, #64]	@ 0x40
 800fb9e:	e7f6      	b.n	800fb8e <_strtod_l+0x26e>
 800fba0:	2200      	movs	r2, #0
 800fba2:	290f      	cmp	r1, #15
 800fba4:	dce5      	bgt.n	800fb72 <_strtod_l+0x252>
 800fba6:	230a      	movs	r3, #10
 800fba8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800fbaa:	435d      	muls	r5, r3
 800fbac:	1963      	adds	r3, r4, r5
 800fbae:	9310      	str	r3, [sp, #64]	@ 0x40
 800fbb0:	e7df      	b.n	800fb72 <_strtod_l+0x252>
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	920e      	str	r2, [sp, #56]	@ 0x38
 800fbb6:	9206      	str	r2, [sp, #24]
 800fbb8:	3201      	adds	r2, #1
 800fbba:	e7a8      	b.n	800fb0e <_strtod_l+0x1ee>
 800fbbc:	2400      	movs	r4, #0
 800fbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbc0:	3302      	adds	r3, #2
 800fbc2:	931d      	str	r3, [sp, #116]	@ 0x74
 800fbc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbc6:	789b      	ldrb	r3, [r3, #2]
 800fbc8:	001a      	movs	r2, r3
 800fbca:	3a30      	subs	r2, #48	@ 0x30
 800fbcc:	2a09      	cmp	r2, #9
 800fbce:	d913      	bls.n	800fbf8 <_strtod_l+0x2d8>
 800fbd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbd2:	921d      	str	r2, [sp, #116]	@ 0x74
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	e032      	b.n	800fc3e <_strtod_l+0x31e>
 800fbd8:	08016674 	.word	0x08016674
 800fbdc:	7ff00000 	.word	0x7ff00000
 800fbe0:	ffefffff 	.word	0xffefffff
 800fbe4:	00000433 	.word	0x00000433
 800fbe8:	7fffffff 	.word	0x7fffffff
 800fbec:	08016434 	.word	0x08016434
 800fbf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fbf2:	1c5a      	adds	r2, r3, #1
 800fbf4:	921d      	str	r2, [sp, #116]	@ 0x74
 800fbf6:	785b      	ldrb	r3, [r3, #1]
 800fbf8:	2b30      	cmp	r3, #48	@ 0x30
 800fbfa:	d0f9      	beq.n	800fbf0 <_strtod_l+0x2d0>
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	9207      	str	r2, [sp, #28]
 800fc00:	001a      	movs	r2, r3
 800fc02:	3a31      	subs	r2, #49	@ 0x31
 800fc04:	2a08      	cmp	r2, #8
 800fc06:	d81b      	bhi.n	800fc40 <_strtod_l+0x320>
 800fc08:	3b30      	subs	r3, #48	@ 0x30
 800fc0a:	001a      	movs	r2, r3
 800fc0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc0e:	9307      	str	r3, [sp, #28]
 800fc10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc12:	1c59      	adds	r1, r3, #1
 800fc14:	911d      	str	r1, [sp, #116]	@ 0x74
 800fc16:	785b      	ldrb	r3, [r3, #1]
 800fc18:	001d      	movs	r5, r3
 800fc1a:	3d30      	subs	r5, #48	@ 0x30
 800fc1c:	2d09      	cmp	r5, #9
 800fc1e:	d93a      	bls.n	800fc96 <_strtod_l+0x376>
 800fc20:	9d07      	ldr	r5, [sp, #28]
 800fc22:	1b49      	subs	r1, r1, r5
 800fc24:	000d      	movs	r5, r1
 800fc26:	49b3      	ldr	r1, [pc, #716]	@ (800fef4 <_strtod_l+0x5d4>)
 800fc28:	9107      	str	r1, [sp, #28]
 800fc2a:	2d08      	cmp	r5, #8
 800fc2c:	dc03      	bgt.n	800fc36 <_strtod_l+0x316>
 800fc2e:	9207      	str	r2, [sp, #28]
 800fc30:	428a      	cmp	r2, r1
 800fc32:	dd00      	ble.n	800fc36 <_strtod_l+0x316>
 800fc34:	9107      	str	r1, [sp, #28]
 800fc36:	2c00      	cmp	r4, #0
 800fc38:	d002      	beq.n	800fc40 <_strtod_l+0x320>
 800fc3a:	9a07      	ldr	r2, [sp, #28]
 800fc3c:	4252      	negs	r2, r2
 800fc3e:	9207      	str	r2, [sp, #28]
 800fc40:	9a06      	ldr	r2, [sp, #24]
 800fc42:	2a00      	cmp	r2, #0
 800fc44:	d14b      	bne.n	800fcde <_strtod_l+0x3be>
 800fc46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fc48:	4310      	orrs	r0, r2
 800fc4a:	d000      	beq.n	800fc4e <_strtod_l+0x32e>
 800fc4c:	e6a3      	b.n	800f996 <_strtod_l+0x76>
 800fc4e:	4662      	mov	r2, ip
 800fc50:	2a00      	cmp	r2, #0
 800fc52:	d000      	beq.n	800fc56 <_strtod_l+0x336>
 800fc54:	e6bb      	b.n	800f9ce <_strtod_l+0xae>
 800fc56:	2b69      	cmp	r3, #105	@ 0x69
 800fc58:	d025      	beq.n	800fca6 <_strtod_l+0x386>
 800fc5a:	dc21      	bgt.n	800fca0 <_strtod_l+0x380>
 800fc5c:	2b49      	cmp	r3, #73	@ 0x49
 800fc5e:	d022      	beq.n	800fca6 <_strtod_l+0x386>
 800fc60:	2b4e      	cmp	r3, #78	@ 0x4e
 800fc62:	d000      	beq.n	800fc66 <_strtod_l+0x346>
 800fc64:	e6b3      	b.n	800f9ce <_strtod_l+0xae>
 800fc66:	49a4      	ldr	r1, [pc, #656]	@ (800fef8 <_strtod_l+0x5d8>)
 800fc68:	a81d      	add	r0, sp, #116	@ 0x74
 800fc6a:	f002 fc9b 	bl	80125a4 <__match>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	d100      	bne.n	800fc74 <_strtod_l+0x354>
 800fc72:	e6ac      	b.n	800f9ce <_strtod_l+0xae>
 800fc74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	2b28      	cmp	r3, #40	@ 0x28
 800fc7a:	d12a      	bne.n	800fcd2 <_strtod_l+0x3b2>
 800fc7c:	499f      	ldr	r1, [pc, #636]	@ (800fefc <_strtod_l+0x5dc>)
 800fc7e:	aa20      	add	r2, sp, #128	@ 0x80
 800fc80:	a81d      	add	r0, sp, #116	@ 0x74
 800fc82:	f002 fca3 	bl	80125cc <__hexnan>
 800fc86:	2805      	cmp	r0, #5
 800fc88:	d123      	bne.n	800fcd2 <_strtod_l+0x3b2>
 800fc8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fc8c:	4a9c      	ldr	r2, [pc, #624]	@ (800ff00 <_strtod_l+0x5e0>)
 800fc8e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fc90:	431a      	orrs	r2, r3
 800fc92:	0017      	movs	r7, r2
 800fc94:	e67f      	b.n	800f996 <_strtod_l+0x76>
 800fc96:	210a      	movs	r1, #10
 800fc98:	434a      	muls	r2, r1
 800fc9a:	18d2      	adds	r2, r2, r3
 800fc9c:	3a30      	subs	r2, #48	@ 0x30
 800fc9e:	e7b7      	b.n	800fc10 <_strtod_l+0x2f0>
 800fca0:	2b6e      	cmp	r3, #110	@ 0x6e
 800fca2:	d0e0      	beq.n	800fc66 <_strtod_l+0x346>
 800fca4:	e693      	b.n	800f9ce <_strtod_l+0xae>
 800fca6:	4997      	ldr	r1, [pc, #604]	@ (800ff04 <_strtod_l+0x5e4>)
 800fca8:	a81d      	add	r0, sp, #116	@ 0x74
 800fcaa:	f002 fc7b 	bl	80125a4 <__match>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d100      	bne.n	800fcb4 <_strtod_l+0x394>
 800fcb2:	e68c      	b.n	800f9ce <_strtod_l+0xae>
 800fcb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fcb6:	4994      	ldr	r1, [pc, #592]	@ (800ff08 <_strtod_l+0x5e8>)
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	a81d      	add	r0, sp, #116	@ 0x74
 800fcbc:	931d      	str	r3, [sp, #116]	@ 0x74
 800fcbe:	f002 fc71 	bl	80125a4 <__match>
 800fcc2:	2800      	cmp	r0, #0
 800fcc4:	d102      	bne.n	800fccc <_strtod_l+0x3ac>
 800fcc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fcc8:	3301      	adds	r3, #1
 800fcca:	931d      	str	r3, [sp, #116]	@ 0x74
 800fccc:	2600      	movs	r6, #0
 800fcce:	4f8c      	ldr	r7, [pc, #560]	@ (800ff00 <_strtod_l+0x5e0>)
 800fcd0:	e661      	b.n	800f996 <_strtod_l+0x76>
 800fcd2:	488e      	ldr	r0, [pc, #568]	@ (800ff0c <_strtod_l+0x5ec>)
 800fcd4:	f001 fae4 	bl	80112a0 <nan>
 800fcd8:	0006      	movs	r6, r0
 800fcda:	000f      	movs	r7, r1
 800fcdc:	e65b      	b.n	800f996 <_strtod_l+0x76>
 800fcde:	9b07      	ldr	r3, [sp, #28]
 800fce0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fce2:	1a9b      	subs	r3, r3, r2
 800fce4:	930c      	str	r3, [sp, #48]	@ 0x30
 800fce6:	9b08      	ldr	r3, [sp, #32]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d101      	bne.n	800fcf0 <_strtod_l+0x3d0>
 800fcec:	9b06      	ldr	r3, [sp, #24]
 800fcee:	9308      	str	r3, [sp, #32]
 800fcf0:	9c06      	ldr	r4, [sp, #24]
 800fcf2:	2c10      	cmp	r4, #16
 800fcf4:	dd00      	ble.n	800fcf8 <_strtod_l+0x3d8>
 800fcf6:	2410      	movs	r4, #16
 800fcf8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fcfa:	f7f3 fd39 	bl	8003770 <__aeabi_ui2d>
 800fcfe:	9b06      	ldr	r3, [sp, #24]
 800fd00:	0006      	movs	r6, r0
 800fd02:	000f      	movs	r7, r1
 800fd04:	2b09      	cmp	r3, #9
 800fd06:	dc13      	bgt.n	800fd30 <_strtod_l+0x410>
 800fd08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d100      	bne.n	800fd10 <_strtod_l+0x3f0>
 800fd0e:	e642      	b.n	800f996 <_strtod_l+0x76>
 800fd10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	dc00      	bgt.n	800fd18 <_strtod_l+0x3f8>
 800fd16:	e07e      	b.n	800fe16 <_strtod_l+0x4f6>
 800fd18:	2b16      	cmp	r3, #22
 800fd1a:	dc63      	bgt.n	800fde4 <_strtod_l+0x4c4>
 800fd1c:	497c      	ldr	r1, [pc, #496]	@ (800ff10 <_strtod_l+0x5f0>)
 800fd1e:	00db      	lsls	r3, r3, #3
 800fd20:	18c9      	adds	r1, r1, r3
 800fd22:	0032      	movs	r2, r6
 800fd24:	6808      	ldr	r0, [r1, #0]
 800fd26:	6849      	ldr	r1, [r1, #4]
 800fd28:	003b      	movs	r3, r7
 800fd2a:	f7f2 fda5 	bl	8002878 <__aeabi_dmul>
 800fd2e:	e7d3      	b.n	800fcd8 <_strtod_l+0x3b8>
 800fd30:	0022      	movs	r2, r4
 800fd32:	4b77      	ldr	r3, [pc, #476]	@ (800ff10 <_strtod_l+0x5f0>)
 800fd34:	3a09      	subs	r2, #9
 800fd36:	00d2      	lsls	r2, r2, #3
 800fd38:	189b      	adds	r3, r3, r2
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	f7f2 fd9b 	bl	8002878 <__aeabi_dmul>
 800fd42:	0006      	movs	r6, r0
 800fd44:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fd46:	000f      	movs	r7, r1
 800fd48:	f7f3 fd12 	bl	8003770 <__aeabi_ui2d>
 800fd4c:	000b      	movs	r3, r1
 800fd4e:	0002      	movs	r2, r0
 800fd50:	0039      	movs	r1, r7
 800fd52:	0030      	movs	r0, r6
 800fd54:	f7f1 fd90 	bl	8001878 <__aeabi_dadd>
 800fd58:	9b06      	ldr	r3, [sp, #24]
 800fd5a:	0006      	movs	r6, r0
 800fd5c:	000f      	movs	r7, r1
 800fd5e:	2b0f      	cmp	r3, #15
 800fd60:	ddd2      	ble.n	800fd08 <_strtod_l+0x3e8>
 800fd62:	9b06      	ldr	r3, [sp, #24]
 800fd64:	1b1c      	subs	r4, r3, r4
 800fd66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd68:	18e4      	adds	r4, r4, r3
 800fd6a:	2c00      	cmp	r4, #0
 800fd6c:	dc00      	bgt.n	800fd70 <_strtod_l+0x450>
 800fd6e:	e09b      	b.n	800fea8 <_strtod_l+0x588>
 800fd70:	220f      	movs	r2, #15
 800fd72:	0023      	movs	r3, r4
 800fd74:	4013      	ands	r3, r2
 800fd76:	4214      	tst	r4, r2
 800fd78:	d00a      	beq.n	800fd90 <_strtod_l+0x470>
 800fd7a:	4965      	ldr	r1, [pc, #404]	@ (800ff10 <_strtod_l+0x5f0>)
 800fd7c:	00db      	lsls	r3, r3, #3
 800fd7e:	18c9      	adds	r1, r1, r3
 800fd80:	0032      	movs	r2, r6
 800fd82:	6808      	ldr	r0, [r1, #0]
 800fd84:	6849      	ldr	r1, [r1, #4]
 800fd86:	003b      	movs	r3, r7
 800fd88:	f7f2 fd76 	bl	8002878 <__aeabi_dmul>
 800fd8c:	0006      	movs	r6, r0
 800fd8e:	000f      	movs	r7, r1
 800fd90:	230f      	movs	r3, #15
 800fd92:	439c      	bics	r4, r3
 800fd94:	d073      	beq.n	800fe7e <_strtod_l+0x55e>
 800fd96:	3326      	adds	r3, #38	@ 0x26
 800fd98:	33ff      	adds	r3, #255	@ 0xff
 800fd9a:	429c      	cmp	r4, r3
 800fd9c:	dd4b      	ble.n	800fe36 <_strtod_l+0x516>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	9306      	str	r3, [sp, #24]
 800fda2:	9307      	str	r3, [sp, #28]
 800fda4:	930d      	str	r3, [sp, #52]	@ 0x34
 800fda6:	9308      	str	r3, [sp, #32]
 800fda8:	2322      	movs	r3, #34	@ 0x22
 800fdaa:	2600      	movs	r6, #0
 800fdac:	9a05      	ldr	r2, [sp, #20]
 800fdae:	4f54      	ldr	r7, [pc, #336]	@ (800ff00 <_strtod_l+0x5e0>)
 800fdb0:	6013      	str	r3, [r2, #0]
 800fdb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fdb4:	42b3      	cmp	r3, r6
 800fdb6:	d100      	bne.n	800fdba <_strtod_l+0x49a>
 800fdb8:	e5ed      	b.n	800f996 <_strtod_l+0x76>
 800fdba:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800fdbc:	9805      	ldr	r0, [sp, #20]
 800fdbe:	f002 fdbf 	bl	8012940 <_Bfree>
 800fdc2:	9908      	ldr	r1, [sp, #32]
 800fdc4:	9805      	ldr	r0, [sp, #20]
 800fdc6:	f002 fdbb 	bl	8012940 <_Bfree>
 800fdca:	9907      	ldr	r1, [sp, #28]
 800fdcc:	9805      	ldr	r0, [sp, #20]
 800fdce:	f002 fdb7 	bl	8012940 <_Bfree>
 800fdd2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fdd4:	9805      	ldr	r0, [sp, #20]
 800fdd6:	f002 fdb3 	bl	8012940 <_Bfree>
 800fdda:	9906      	ldr	r1, [sp, #24]
 800fddc:	9805      	ldr	r0, [sp, #20]
 800fdde:	f002 fdaf 	bl	8012940 <_Bfree>
 800fde2:	e5d8      	b.n	800f996 <_strtod_l+0x76>
 800fde4:	2325      	movs	r3, #37	@ 0x25
 800fde6:	9a06      	ldr	r2, [sp, #24]
 800fde8:	1a9b      	subs	r3, r3, r2
 800fdea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fdec:	4293      	cmp	r3, r2
 800fdee:	dbb8      	blt.n	800fd62 <_strtod_l+0x442>
 800fdf0:	240f      	movs	r4, #15
 800fdf2:	9b06      	ldr	r3, [sp, #24]
 800fdf4:	4d46      	ldr	r5, [pc, #280]	@ (800ff10 <_strtod_l+0x5f0>)
 800fdf6:	1ae4      	subs	r4, r4, r3
 800fdf8:	00e1      	lsls	r1, r4, #3
 800fdfa:	1869      	adds	r1, r5, r1
 800fdfc:	0032      	movs	r2, r6
 800fdfe:	6808      	ldr	r0, [r1, #0]
 800fe00:	6849      	ldr	r1, [r1, #4]
 800fe02:	003b      	movs	r3, r7
 800fe04:	f7f2 fd38 	bl	8002878 <__aeabi_dmul>
 800fe08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe0a:	1b1c      	subs	r4, r3, r4
 800fe0c:	00e4      	lsls	r4, r4, #3
 800fe0e:	192d      	adds	r5, r5, r4
 800fe10:	682a      	ldr	r2, [r5, #0]
 800fe12:	686b      	ldr	r3, [r5, #4]
 800fe14:	e789      	b.n	800fd2a <_strtod_l+0x40a>
 800fe16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe18:	3316      	adds	r3, #22
 800fe1a:	dba2      	blt.n	800fd62 <_strtod_l+0x442>
 800fe1c:	9907      	ldr	r1, [sp, #28]
 800fe1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe20:	4b3b      	ldr	r3, [pc, #236]	@ (800ff10 <_strtod_l+0x5f0>)
 800fe22:	1a52      	subs	r2, r2, r1
 800fe24:	00d2      	lsls	r2, r2, #3
 800fe26:	189b      	adds	r3, r3, r2
 800fe28:	0030      	movs	r0, r6
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	0039      	movs	r1, r7
 800fe30:	f7f2 f8e8 	bl	8002004 <__aeabi_ddiv>
 800fe34:	e750      	b.n	800fcd8 <_strtod_l+0x3b8>
 800fe36:	2300      	movs	r3, #0
 800fe38:	0030      	movs	r0, r6
 800fe3a:	0039      	movs	r1, r7
 800fe3c:	4d35      	ldr	r5, [pc, #212]	@ (800ff14 <_strtod_l+0x5f4>)
 800fe3e:	1124      	asrs	r4, r4, #4
 800fe40:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe42:	2c01      	cmp	r4, #1
 800fe44:	dc1e      	bgt.n	800fe84 <_strtod_l+0x564>
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d001      	beq.n	800fe4e <_strtod_l+0x52e>
 800fe4a:	0006      	movs	r6, r0
 800fe4c:	000f      	movs	r7, r1
 800fe4e:	4b32      	ldr	r3, [pc, #200]	@ (800ff18 <_strtod_l+0x5f8>)
 800fe50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe52:	18ff      	adds	r7, r7, r3
 800fe54:	4b2f      	ldr	r3, [pc, #188]	@ (800ff14 <_strtod_l+0x5f4>)
 800fe56:	00d5      	lsls	r5, r2, #3
 800fe58:	195d      	adds	r5, r3, r5
 800fe5a:	0032      	movs	r2, r6
 800fe5c:	6828      	ldr	r0, [r5, #0]
 800fe5e:	6869      	ldr	r1, [r5, #4]
 800fe60:	003b      	movs	r3, r7
 800fe62:	f7f2 fd09 	bl	8002878 <__aeabi_dmul>
 800fe66:	4b26      	ldr	r3, [pc, #152]	@ (800ff00 <_strtod_l+0x5e0>)
 800fe68:	4a2c      	ldr	r2, [pc, #176]	@ (800ff1c <_strtod_l+0x5fc>)
 800fe6a:	0006      	movs	r6, r0
 800fe6c:	400b      	ands	r3, r1
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d895      	bhi.n	800fd9e <_strtod_l+0x47e>
 800fe72:	4a2b      	ldr	r2, [pc, #172]	@ (800ff20 <_strtod_l+0x600>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d913      	bls.n	800fea0 <_strtod_l+0x580>
 800fe78:	2601      	movs	r6, #1
 800fe7a:	4f2a      	ldr	r7, [pc, #168]	@ (800ff24 <_strtod_l+0x604>)
 800fe7c:	4276      	negs	r6, r6
 800fe7e:	2300      	movs	r3, #0
 800fe80:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe82:	e086      	b.n	800ff92 <_strtod_l+0x672>
 800fe84:	2201      	movs	r2, #1
 800fe86:	4214      	tst	r4, r2
 800fe88:	d004      	beq.n	800fe94 <_strtod_l+0x574>
 800fe8a:	682a      	ldr	r2, [r5, #0]
 800fe8c:	686b      	ldr	r3, [r5, #4]
 800fe8e:	f7f2 fcf3 	bl	8002878 <__aeabi_dmul>
 800fe92:	2301      	movs	r3, #1
 800fe94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe96:	1064      	asrs	r4, r4, #1
 800fe98:	3201      	adds	r2, #1
 800fe9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe9c:	3508      	adds	r5, #8
 800fe9e:	e7d0      	b.n	800fe42 <_strtod_l+0x522>
 800fea0:	23d4      	movs	r3, #212	@ 0xd4
 800fea2:	049b      	lsls	r3, r3, #18
 800fea4:	18cf      	adds	r7, r1, r3
 800fea6:	e7ea      	b.n	800fe7e <_strtod_l+0x55e>
 800fea8:	2c00      	cmp	r4, #0
 800feaa:	d0e8      	beq.n	800fe7e <_strtod_l+0x55e>
 800feac:	4264      	negs	r4, r4
 800feae:	230f      	movs	r3, #15
 800feb0:	0022      	movs	r2, r4
 800feb2:	401a      	ands	r2, r3
 800feb4:	421c      	tst	r4, r3
 800feb6:	d00a      	beq.n	800fece <_strtod_l+0x5ae>
 800feb8:	4b15      	ldr	r3, [pc, #84]	@ (800ff10 <_strtod_l+0x5f0>)
 800feba:	00d2      	lsls	r2, r2, #3
 800febc:	189b      	adds	r3, r3, r2
 800febe:	0030      	movs	r0, r6
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	0039      	movs	r1, r7
 800fec6:	f7f2 f89d 	bl	8002004 <__aeabi_ddiv>
 800feca:	0006      	movs	r6, r0
 800fecc:	000f      	movs	r7, r1
 800fece:	1124      	asrs	r4, r4, #4
 800fed0:	d0d5      	beq.n	800fe7e <_strtod_l+0x55e>
 800fed2:	2c1f      	cmp	r4, #31
 800fed4:	dd28      	ble.n	800ff28 <_strtod_l+0x608>
 800fed6:	2300      	movs	r3, #0
 800fed8:	9306      	str	r3, [sp, #24]
 800feda:	9307      	str	r3, [sp, #28]
 800fedc:	930d      	str	r3, [sp, #52]	@ 0x34
 800fede:	9308      	str	r3, [sp, #32]
 800fee0:	2322      	movs	r3, #34	@ 0x22
 800fee2:	9a05      	ldr	r2, [sp, #20]
 800fee4:	2600      	movs	r6, #0
 800fee6:	6013      	str	r3, [r2, #0]
 800fee8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800feea:	2700      	movs	r7, #0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d000      	beq.n	800fef2 <_strtod_l+0x5d2>
 800fef0:	e763      	b.n	800fdba <_strtod_l+0x49a>
 800fef2:	e550      	b.n	800f996 <_strtod_l+0x76>
 800fef4:	00004e1f 	.word	0x00004e1f
 800fef8:	08016443 	.word	0x08016443
 800fefc:	08016660 	.word	0x08016660
 800ff00:	7ff00000 	.word	0x7ff00000
 800ff04:	0801643b 	.word	0x0801643b
 800ff08:	08016522 	.word	0x08016522
 800ff0c:	0801651e 	.word	0x0801651e
 800ff10:	080166e8 	.word	0x080166e8
 800ff14:	080166c0 	.word	0x080166c0
 800ff18:	fcb00000 	.word	0xfcb00000
 800ff1c:	7ca00000 	.word	0x7ca00000
 800ff20:	7c900000 	.word	0x7c900000
 800ff24:	7fefffff 	.word	0x7fefffff
 800ff28:	2310      	movs	r3, #16
 800ff2a:	0022      	movs	r2, r4
 800ff2c:	401a      	ands	r2, r3
 800ff2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff30:	421c      	tst	r4, r3
 800ff32:	d001      	beq.n	800ff38 <_strtod_l+0x618>
 800ff34:	335a      	adds	r3, #90	@ 0x5a
 800ff36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff38:	0030      	movs	r0, r6
 800ff3a:	0039      	movs	r1, r7
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	4dc0      	ldr	r5, [pc, #768]	@ (8010240 <_strtod_l+0x920>)
 800ff40:	2201      	movs	r2, #1
 800ff42:	4214      	tst	r4, r2
 800ff44:	d004      	beq.n	800ff50 <_strtod_l+0x630>
 800ff46:	682a      	ldr	r2, [r5, #0]
 800ff48:	686b      	ldr	r3, [r5, #4]
 800ff4a:	f7f2 fc95 	bl	8002878 <__aeabi_dmul>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	1064      	asrs	r4, r4, #1
 800ff52:	3508      	adds	r5, #8
 800ff54:	2c00      	cmp	r4, #0
 800ff56:	d1f3      	bne.n	800ff40 <_strtod_l+0x620>
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <_strtod_l+0x640>
 800ff5c:	0006      	movs	r6, r0
 800ff5e:	000f      	movs	r7, r1
 800ff60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d00d      	beq.n	800ff82 <_strtod_l+0x662>
 800ff66:	236b      	movs	r3, #107	@ 0x6b
 800ff68:	007a      	lsls	r2, r7, #1
 800ff6a:	0d52      	lsrs	r2, r2, #21
 800ff6c:	0039      	movs	r1, r7
 800ff6e:	1a9b      	subs	r3, r3, r2
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	dd06      	ble.n	800ff82 <_strtod_l+0x662>
 800ff74:	2b1f      	cmp	r3, #31
 800ff76:	dd5c      	ble.n	8010032 <_strtod_l+0x712>
 800ff78:	2600      	movs	r6, #0
 800ff7a:	2b34      	cmp	r3, #52	@ 0x34
 800ff7c:	dd52      	ble.n	8010024 <_strtod_l+0x704>
 800ff7e:	27dc      	movs	r7, #220	@ 0xdc
 800ff80:	04bf      	lsls	r7, r7, #18
 800ff82:	2200      	movs	r2, #0
 800ff84:	2300      	movs	r3, #0
 800ff86:	0030      	movs	r0, r6
 800ff88:	0039      	movs	r1, r7
 800ff8a:	f7f0 fa67 	bl	800045c <__aeabi_dcmpeq>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	d1a1      	bne.n	800fed6 <_strtod_l+0x5b6>
 800ff92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff94:	9a08      	ldr	r2, [sp, #32]
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ff9a:	9b06      	ldr	r3, [sp, #24]
 800ff9c:	9805      	ldr	r0, [sp, #20]
 800ff9e:	f002 fd37 	bl	8012a10 <__s2b>
 800ffa2:	900d      	str	r0, [sp, #52]	@ 0x34
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d100      	bne.n	800ffaa <_strtod_l+0x68a>
 800ffa8:	e6f9      	b.n	800fd9e <_strtod_l+0x47e>
 800ffaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffac:	9907      	ldr	r1, [sp, #28]
 800ffae:	43db      	mvns	r3, r3
 800ffb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffb2:	17db      	asrs	r3, r3, #31
 800ffb4:	1a52      	subs	r2, r2, r1
 800ffb6:	9214      	str	r2, [sp, #80]	@ 0x50
 800ffb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ffba:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800ffbc:	17d2      	asrs	r2, r2, #31
 800ffbe:	4011      	ands	r1, r2
 800ffc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ffc2:	9114      	str	r1, [sp, #80]	@ 0x50
 800ffc4:	401a      	ands	r2, r3
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	921a      	str	r2, [sp, #104]	@ 0x68
 800ffca:	9306      	str	r3, [sp, #24]
 800ffcc:	9307      	str	r3, [sp, #28]
 800ffce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffd0:	9805      	ldr	r0, [sp, #20]
 800ffd2:	6859      	ldr	r1, [r3, #4]
 800ffd4:	f002 fc70 	bl	80128b8 <_Balloc>
 800ffd8:	9008      	str	r0, [sp, #32]
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	d100      	bne.n	800ffe0 <_strtod_l+0x6c0>
 800ffde:	e6e3      	b.n	800fda8 <_strtod_l+0x488>
 800ffe0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffe2:	300c      	adds	r0, #12
 800ffe4:	0019      	movs	r1, r3
 800ffe6:	691a      	ldr	r2, [r3, #16]
 800ffe8:	310c      	adds	r1, #12
 800ffea:	3202      	adds	r2, #2
 800ffec:	0092      	lsls	r2, r2, #2
 800ffee:	f001 f94d 	bl	801128c <memcpy>
 800fff2:	ab20      	add	r3, sp, #128	@ 0x80
 800fff4:	9301      	str	r3, [sp, #4]
 800fff6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	0032      	movs	r2, r6
 800fffc:	003b      	movs	r3, r7
 800fffe:	9805      	ldr	r0, [sp, #20]
 8010000:	9610      	str	r6, [sp, #64]	@ 0x40
 8010002:	9711      	str	r7, [sp, #68]	@ 0x44
 8010004:	f003 f84c 	bl	80130a0 <__d2b>
 8010008:	901e      	str	r0, [sp, #120]	@ 0x78
 801000a:	2800      	cmp	r0, #0
 801000c:	d100      	bne.n	8010010 <_strtod_l+0x6f0>
 801000e:	e6cb      	b.n	800fda8 <_strtod_l+0x488>
 8010010:	2101      	movs	r1, #1
 8010012:	9805      	ldr	r0, [sp, #20]
 8010014:	f002 fd98 	bl	8012b48 <__i2b>
 8010018:	9007      	str	r0, [sp, #28]
 801001a:	2800      	cmp	r0, #0
 801001c:	d10e      	bne.n	801003c <_strtod_l+0x71c>
 801001e:	2300      	movs	r3, #0
 8010020:	9307      	str	r3, [sp, #28]
 8010022:	e6c1      	b.n	800fda8 <_strtod_l+0x488>
 8010024:	234b      	movs	r3, #75	@ 0x4b
 8010026:	1a9a      	subs	r2, r3, r2
 8010028:	3b4c      	subs	r3, #76	@ 0x4c
 801002a:	4093      	lsls	r3, r2
 801002c:	4019      	ands	r1, r3
 801002e:	000f      	movs	r7, r1
 8010030:	e7a7      	b.n	800ff82 <_strtod_l+0x662>
 8010032:	2201      	movs	r2, #1
 8010034:	4252      	negs	r2, r2
 8010036:	409a      	lsls	r2, r3
 8010038:	4016      	ands	r6, r2
 801003a:	e7a2      	b.n	800ff82 <_strtod_l+0x662>
 801003c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801003e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010040:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010042:	1ad4      	subs	r4, r2, r3
 8010044:	2b00      	cmp	r3, #0
 8010046:	db01      	blt.n	801004c <_strtod_l+0x72c>
 8010048:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801004a:	195d      	adds	r5, r3, r5
 801004c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801004e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010050:	1a5b      	subs	r3, r3, r1
 8010052:	2136      	movs	r1, #54	@ 0x36
 8010054:	189b      	adds	r3, r3, r2
 8010056:	1a8a      	subs	r2, r1, r2
 8010058:	497a      	ldr	r1, [pc, #488]	@ (8010244 <_strtod_l+0x924>)
 801005a:	2001      	movs	r0, #1
 801005c:	468c      	mov	ip, r1
 801005e:	2100      	movs	r1, #0
 8010060:	3b01      	subs	r3, #1
 8010062:	9115      	str	r1, [sp, #84]	@ 0x54
 8010064:	9016      	str	r0, [sp, #88]	@ 0x58
 8010066:	4563      	cmp	r3, ip
 8010068:	da06      	bge.n	8010078 <_strtod_l+0x758>
 801006a:	4661      	mov	r1, ip
 801006c:	1ac9      	subs	r1, r1, r3
 801006e:	1a52      	subs	r2, r2, r1
 8010070:	291f      	cmp	r1, #31
 8010072:	dc3f      	bgt.n	80100f4 <_strtod_l+0x7d4>
 8010074:	4088      	lsls	r0, r1
 8010076:	9016      	str	r0, [sp, #88]	@ 0x58
 8010078:	18ab      	adds	r3, r5, r2
 801007a:	930e      	str	r3, [sp, #56]	@ 0x38
 801007c:	18a4      	adds	r4, r4, r2
 801007e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010082:	191c      	adds	r4, r3, r4
 8010084:	002b      	movs	r3, r5
 8010086:	4295      	cmp	r5, r2
 8010088:	dd00      	ble.n	801008c <_strtod_l+0x76c>
 801008a:	0013      	movs	r3, r2
 801008c:	42a3      	cmp	r3, r4
 801008e:	dd00      	ble.n	8010092 <_strtod_l+0x772>
 8010090:	0023      	movs	r3, r4
 8010092:	2b00      	cmp	r3, #0
 8010094:	dd04      	ble.n	80100a0 <_strtod_l+0x780>
 8010096:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010098:	1ae4      	subs	r4, r4, r3
 801009a:	1ad2      	subs	r2, r2, r3
 801009c:	920e      	str	r2, [sp, #56]	@ 0x38
 801009e:	1aed      	subs	r5, r5, r3
 80100a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	dd16      	ble.n	80100d4 <_strtod_l+0x7b4>
 80100a6:	001a      	movs	r2, r3
 80100a8:	9907      	ldr	r1, [sp, #28]
 80100aa:	9805      	ldr	r0, [sp, #20]
 80100ac:	f002 fe0e 	bl	8012ccc <__pow5mult>
 80100b0:	9007      	str	r0, [sp, #28]
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d0b3      	beq.n	801001e <_strtod_l+0x6fe>
 80100b6:	0001      	movs	r1, r0
 80100b8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80100ba:	9805      	ldr	r0, [sp, #20]
 80100bc:	f002 fd5c 	bl	8012b78 <__multiply>
 80100c0:	9013      	str	r0, [sp, #76]	@ 0x4c
 80100c2:	2800      	cmp	r0, #0
 80100c4:	d100      	bne.n	80100c8 <_strtod_l+0x7a8>
 80100c6:	e66f      	b.n	800fda8 <_strtod_l+0x488>
 80100c8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80100ca:	9805      	ldr	r0, [sp, #20]
 80100cc:	f002 fc38 	bl	8012940 <_Bfree>
 80100d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100d2:	931e      	str	r3, [sp, #120]	@ 0x78
 80100d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	dc12      	bgt.n	8010100 <_strtod_l+0x7e0>
 80100da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100dc:	2b00      	cmp	r3, #0
 80100de:	dd18      	ble.n	8010112 <_strtod_l+0x7f2>
 80100e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80100e2:	9908      	ldr	r1, [sp, #32]
 80100e4:	9805      	ldr	r0, [sp, #20]
 80100e6:	f002 fdf1 	bl	8012ccc <__pow5mult>
 80100ea:	9008      	str	r0, [sp, #32]
 80100ec:	2800      	cmp	r0, #0
 80100ee:	d110      	bne.n	8010112 <_strtod_l+0x7f2>
 80100f0:	2300      	movs	r3, #0
 80100f2:	e658      	b.n	800fda6 <_strtod_l+0x486>
 80100f4:	4954      	ldr	r1, [pc, #336]	@ (8010248 <_strtod_l+0x928>)
 80100f6:	1acb      	subs	r3, r1, r3
 80100f8:	0001      	movs	r1, r0
 80100fa:	4099      	lsls	r1, r3
 80100fc:	9115      	str	r1, [sp, #84]	@ 0x54
 80100fe:	e7ba      	b.n	8010076 <_strtod_l+0x756>
 8010100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010102:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010104:	9805      	ldr	r0, [sp, #20]
 8010106:	f002 fe3d 	bl	8012d84 <__lshift>
 801010a:	901e      	str	r0, [sp, #120]	@ 0x78
 801010c:	2800      	cmp	r0, #0
 801010e:	d1e4      	bne.n	80100da <_strtod_l+0x7ba>
 8010110:	e64a      	b.n	800fda8 <_strtod_l+0x488>
 8010112:	2c00      	cmp	r4, #0
 8010114:	dd07      	ble.n	8010126 <_strtod_l+0x806>
 8010116:	0022      	movs	r2, r4
 8010118:	9908      	ldr	r1, [sp, #32]
 801011a:	9805      	ldr	r0, [sp, #20]
 801011c:	f002 fe32 	bl	8012d84 <__lshift>
 8010120:	9008      	str	r0, [sp, #32]
 8010122:	2800      	cmp	r0, #0
 8010124:	d0e4      	beq.n	80100f0 <_strtod_l+0x7d0>
 8010126:	2d00      	cmp	r5, #0
 8010128:	dd08      	ble.n	801013c <_strtod_l+0x81c>
 801012a:	002a      	movs	r2, r5
 801012c:	9907      	ldr	r1, [sp, #28]
 801012e:	9805      	ldr	r0, [sp, #20]
 8010130:	f002 fe28 	bl	8012d84 <__lshift>
 8010134:	9007      	str	r0, [sp, #28]
 8010136:	2800      	cmp	r0, #0
 8010138:	d100      	bne.n	801013c <_strtod_l+0x81c>
 801013a:	e635      	b.n	800fda8 <_strtod_l+0x488>
 801013c:	9a08      	ldr	r2, [sp, #32]
 801013e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010140:	9805      	ldr	r0, [sp, #20]
 8010142:	f002 fea7 	bl	8012e94 <__mdiff>
 8010146:	9006      	str	r0, [sp, #24]
 8010148:	2800      	cmp	r0, #0
 801014a:	d100      	bne.n	801014e <_strtod_l+0x82e>
 801014c:	e62c      	b.n	800fda8 <_strtod_l+0x488>
 801014e:	68c3      	ldr	r3, [r0, #12]
 8010150:	9907      	ldr	r1, [sp, #28]
 8010152:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010154:	2300      	movs	r3, #0
 8010156:	60c3      	str	r3, [r0, #12]
 8010158:	f002 fe80 	bl	8012e5c <__mcmp>
 801015c:	2800      	cmp	r0, #0
 801015e:	da3b      	bge.n	80101d8 <_strtod_l+0x8b8>
 8010160:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010162:	4333      	orrs	r3, r6
 8010164:	d167      	bne.n	8010236 <_strtod_l+0x916>
 8010166:	033b      	lsls	r3, r7, #12
 8010168:	d165      	bne.n	8010236 <_strtod_l+0x916>
 801016a:	22d6      	movs	r2, #214	@ 0xd6
 801016c:	4b37      	ldr	r3, [pc, #220]	@ (801024c <_strtod_l+0x92c>)
 801016e:	04d2      	lsls	r2, r2, #19
 8010170:	403b      	ands	r3, r7
 8010172:	4293      	cmp	r3, r2
 8010174:	d95f      	bls.n	8010236 <_strtod_l+0x916>
 8010176:	9b06      	ldr	r3, [sp, #24]
 8010178:	695b      	ldr	r3, [r3, #20]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d103      	bne.n	8010186 <_strtod_l+0x866>
 801017e:	9b06      	ldr	r3, [sp, #24]
 8010180:	691b      	ldr	r3, [r3, #16]
 8010182:	2b01      	cmp	r3, #1
 8010184:	dd57      	ble.n	8010236 <_strtod_l+0x916>
 8010186:	9906      	ldr	r1, [sp, #24]
 8010188:	2201      	movs	r2, #1
 801018a:	9805      	ldr	r0, [sp, #20]
 801018c:	f002 fdfa 	bl	8012d84 <__lshift>
 8010190:	9907      	ldr	r1, [sp, #28]
 8010192:	9006      	str	r0, [sp, #24]
 8010194:	f002 fe62 	bl	8012e5c <__mcmp>
 8010198:	2800      	cmp	r0, #0
 801019a:	dd4c      	ble.n	8010236 <_strtod_l+0x916>
 801019c:	4b2b      	ldr	r3, [pc, #172]	@ (801024c <_strtod_l+0x92c>)
 801019e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101a0:	403b      	ands	r3, r7
 80101a2:	2a00      	cmp	r2, #0
 80101a4:	d074      	beq.n	8010290 <_strtod_l+0x970>
 80101a6:	22d6      	movs	r2, #214	@ 0xd6
 80101a8:	04d2      	lsls	r2, r2, #19
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d870      	bhi.n	8010290 <_strtod_l+0x970>
 80101ae:	22dc      	movs	r2, #220	@ 0xdc
 80101b0:	0492      	lsls	r2, r2, #18
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d800      	bhi.n	80101b8 <_strtod_l+0x898>
 80101b6:	e693      	b.n	800fee0 <_strtod_l+0x5c0>
 80101b8:	0030      	movs	r0, r6
 80101ba:	0039      	movs	r1, r7
 80101bc:	4b24      	ldr	r3, [pc, #144]	@ (8010250 <_strtod_l+0x930>)
 80101be:	2200      	movs	r2, #0
 80101c0:	f7f2 fb5a 	bl	8002878 <__aeabi_dmul>
 80101c4:	4b21      	ldr	r3, [pc, #132]	@ (801024c <_strtod_l+0x92c>)
 80101c6:	0006      	movs	r6, r0
 80101c8:	000f      	movs	r7, r1
 80101ca:	420b      	tst	r3, r1
 80101cc:	d000      	beq.n	80101d0 <_strtod_l+0x8b0>
 80101ce:	e5f4      	b.n	800fdba <_strtod_l+0x49a>
 80101d0:	2322      	movs	r3, #34	@ 0x22
 80101d2:	9a05      	ldr	r2, [sp, #20]
 80101d4:	6013      	str	r3, [r2, #0]
 80101d6:	e5f0      	b.n	800fdba <_strtod_l+0x49a>
 80101d8:	970e      	str	r7, [sp, #56]	@ 0x38
 80101da:	2800      	cmp	r0, #0
 80101dc:	d175      	bne.n	80102ca <_strtod_l+0x9aa>
 80101de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80101e0:	033b      	lsls	r3, r7, #12
 80101e2:	0b1b      	lsrs	r3, r3, #12
 80101e4:	2a00      	cmp	r2, #0
 80101e6:	d039      	beq.n	801025c <_strtod_l+0x93c>
 80101e8:	4a1a      	ldr	r2, [pc, #104]	@ (8010254 <_strtod_l+0x934>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d138      	bne.n	8010260 <_strtod_l+0x940>
 80101ee:	2101      	movs	r1, #1
 80101f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101f2:	4249      	negs	r1, r1
 80101f4:	0032      	movs	r2, r6
 80101f6:	0008      	movs	r0, r1
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d00b      	beq.n	8010214 <_strtod_l+0x8f4>
 80101fc:	24d4      	movs	r4, #212	@ 0xd4
 80101fe:	4b13      	ldr	r3, [pc, #76]	@ (801024c <_strtod_l+0x92c>)
 8010200:	0008      	movs	r0, r1
 8010202:	403b      	ands	r3, r7
 8010204:	04e4      	lsls	r4, r4, #19
 8010206:	42a3      	cmp	r3, r4
 8010208:	d804      	bhi.n	8010214 <_strtod_l+0x8f4>
 801020a:	306c      	adds	r0, #108	@ 0x6c
 801020c:	0d1b      	lsrs	r3, r3, #20
 801020e:	1ac3      	subs	r3, r0, r3
 8010210:	4099      	lsls	r1, r3
 8010212:	0008      	movs	r0, r1
 8010214:	4282      	cmp	r2, r0
 8010216:	d123      	bne.n	8010260 <_strtod_l+0x940>
 8010218:	4b0f      	ldr	r3, [pc, #60]	@ (8010258 <_strtod_l+0x938>)
 801021a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801021c:	4299      	cmp	r1, r3
 801021e:	d102      	bne.n	8010226 <_strtod_l+0x906>
 8010220:	3201      	adds	r2, #1
 8010222:	d100      	bne.n	8010226 <_strtod_l+0x906>
 8010224:	e5c0      	b.n	800fda8 <_strtod_l+0x488>
 8010226:	4b09      	ldr	r3, [pc, #36]	@ (801024c <_strtod_l+0x92c>)
 8010228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801022a:	2600      	movs	r6, #0
 801022c:	401a      	ands	r2, r3
 801022e:	0013      	movs	r3, r2
 8010230:	2280      	movs	r2, #128	@ 0x80
 8010232:	0352      	lsls	r2, r2, #13
 8010234:	189f      	adds	r7, r3, r2
 8010236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010238:	2b00      	cmp	r3, #0
 801023a:	d1bd      	bne.n	80101b8 <_strtod_l+0x898>
 801023c:	e5bd      	b.n	800fdba <_strtod_l+0x49a>
 801023e:	46c0      	nop			@ (mov r8, r8)
 8010240:	08016688 	.word	0x08016688
 8010244:	fffffc02 	.word	0xfffffc02
 8010248:	fffffbe2 	.word	0xfffffbe2
 801024c:	7ff00000 	.word	0x7ff00000
 8010250:	39500000 	.word	0x39500000
 8010254:	000fffff 	.word	0x000fffff
 8010258:	7fefffff 	.word	0x7fefffff
 801025c:	4333      	orrs	r3, r6
 801025e:	d09d      	beq.n	801019c <_strtod_l+0x87c>
 8010260:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010262:	2b00      	cmp	r3, #0
 8010264:	d01c      	beq.n	80102a0 <_strtod_l+0x980>
 8010266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010268:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801026a:	4213      	tst	r3, r2
 801026c:	d0e3      	beq.n	8010236 <_strtod_l+0x916>
 801026e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010270:	0030      	movs	r0, r6
 8010272:	0039      	movs	r1, r7
 8010274:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010276:	2b00      	cmp	r3, #0
 8010278:	d016      	beq.n	80102a8 <_strtod_l+0x988>
 801027a:	f7ff fb39 	bl	800f8f0 <sulp>
 801027e:	0002      	movs	r2, r0
 8010280:	000b      	movs	r3, r1
 8010282:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010284:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010286:	f7f1 faf7 	bl	8001878 <__aeabi_dadd>
 801028a:	0006      	movs	r6, r0
 801028c:	000f      	movs	r7, r1
 801028e:	e7d2      	b.n	8010236 <_strtod_l+0x916>
 8010290:	2601      	movs	r6, #1
 8010292:	4a92      	ldr	r2, [pc, #584]	@ (80104dc <_strtod_l+0xbbc>)
 8010294:	4276      	negs	r6, r6
 8010296:	189b      	adds	r3, r3, r2
 8010298:	4a91      	ldr	r2, [pc, #580]	@ (80104e0 <_strtod_l+0xbc0>)
 801029a:	431a      	orrs	r2, r3
 801029c:	0017      	movs	r7, r2
 801029e:	e7ca      	b.n	8010236 <_strtod_l+0x916>
 80102a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80102a2:	4233      	tst	r3, r6
 80102a4:	d0c7      	beq.n	8010236 <_strtod_l+0x916>
 80102a6:	e7e2      	b.n	801026e <_strtod_l+0x94e>
 80102a8:	f7ff fb22 	bl	800f8f0 <sulp>
 80102ac:	0002      	movs	r2, r0
 80102ae:	000b      	movs	r3, r1
 80102b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80102b2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80102b4:	f7f2 fdc6 	bl	8002e44 <__aeabi_dsub>
 80102b8:	2200      	movs	r2, #0
 80102ba:	2300      	movs	r3, #0
 80102bc:	0006      	movs	r6, r0
 80102be:	000f      	movs	r7, r1
 80102c0:	f7f0 f8cc 	bl	800045c <__aeabi_dcmpeq>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d0b6      	beq.n	8010236 <_strtod_l+0x916>
 80102c8:	e60a      	b.n	800fee0 <_strtod_l+0x5c0>
 80102ca:	9907      	ldr	r1, [sp, #28]
 80102cc:	9806      	ldr	r0, [sp, #24]
 80102ce:	f002 ff47 	bl	8013160 <__ratio>
 80102d2:	2380      	movs	r3, #128	@ 0x80
 80102d4:	2200      	movs	r2, #0
 80102d6:	05db      	lsls	r3, r3, #23
 80102d8:	0004      	movs	r4, r0
 80102da:	000d      	movs	r5, r1
 80102dc:	f7f0 f8ce 	bl	800047c <__aeabi_dcmple>
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d06c      	beq.n	80103be <_strtod_l+0xa9e>
 80102e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d177      	bne.n	80103da <_strtod_l+0xaba>
 80102ea:	2e00      	cmp	r6, #0
 80102ec:	d157      	bne.n	801039e <_strtod_l+0xa7e>
 80102ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102f0:	031b      	lsls	r3, r3, #12
 80102f2:	d15a      	bne.n	80103aa <_strtod_l+0xa8a>
 80102f4:	2200      	movs	r2, #0
 80102f6:	0020      	movs	r0, r4
 80102f8:	0029      	movs	r1, r5
 80102fa:	4b7a      	ldr	r3, [pc, #488]	@ (80104e4 <_strtod_l+0xbc4>)
 80102fc:	f7f0 f8b4 	bl	8000468 <__aeabi_dcmplt>
 8010300:	2800      	cmp	r0, #0
 8010302:	d159      	bne.n	80103b8 <_strtod_l+0xa98>
 8010304:	0020      	movs	r0, r4
 8010306:	0029      	movs	r1, r5
 8010308:	2200      	movs	r2, #0
 801030a:	4b77      	ldr	r3, [pc, #476]	@ (80104e8 <_strtod_l+0xbc8>)
 801030c:	f7f2 fab4 	bl	8002878 <__aeabi_dmul>
 8010310:	0004      	movs	r4, r0
 8010312:	000d      	movs	r5, r1
 8010314:	2380      	movs	r3, #128	@ 0x80
 8010316:	061b      	lsls	r3, r3, #24
 8010318:	18eb      	adds	r3, r5, r3
 801031a:	940a      	str	r4, [sp, #40]	@ 0x28
 801031c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801031e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010322:	9216      	str	r2, [sp, #88]	@ 0x58
 8010324:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010326:	4a71      	ldr	r2, [pc, #452]	@ (80104ec <_strtod_l+0xbcc>)
 8010328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801032a:	4013      	ands	r3, r2
 801032c:	9315      	str	r3, [sp, #84]	@ 0x54
 801032e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010330:	4b6f      	ldr	r3, [pc, #444]	@ (80104f0 <_strtod_l+0xbd0>)
 8010332:	429a      	cmp	r2, r3
 8010334:	d000      	beq.n	8010338 <_strtod_l+0xa18>
 8010336:	e087      	b.n	8010448 <_strtod_l+0xb28>
 8010338:	4a6e      	ldr	r2, [pc, #440]	@ (80104f4 <_strtod_l+0xbd4>)
 801033a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801033c:	4694      	mov	ip, r2
 801033e:	4463      	add	r3, ip
 8010340:	001f      	movs	r7, r3
 8010342:	0030      	movs	r0, r6
 8010344:	0019      	movs	r1, r3
 8010346:	f002 fe3f 	bl	8012fc8 <__ulp>
 801034a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801034c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801034e:	f7f2 fa93 	bl	8002878 <__aeabi_dmul>
 8010352:	0032      	movs	r2, r6
 8010354:	003b      	movs	r3, r7
 8010356:	f7f1 fa8f 	bl	8001878 <__aeabi_dadd>
 801035a:	4a64      	ldr	r2, [pc, #400]	@ (80104ec <_strtod_l+0xbcc>)
 801035c:	4b66      	ldr	r3, [pc, #408]	@ (80104f8 <_strtod_l+0xbd8>)
 801035e:	0006      	movs	r6, r0
 8010360:	400a      	ands	r2, r1
 8010362:	429a      	cmp	r2, r3
 8010364:	d940      	bls.n	80103e8 <_strtod_l+0xac8>
 8010366:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010368:	4a64      	ldr	r2, [pc, #400]	@ (80104fc <_strtod_l+0xbdc>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d103      	bne.n	8010376 <_strtod_l+0xa56>
 801036e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010370:	3301      	adds	r3, #1
 8010372:	d100      	bne.n	8010376 <_strtod_l+0xa56>
 8010374:	e518      	b.n	800fda8 <_strtod_l+0x488>
 8010376:	2601      	movs	r6, #1
 8010378:	4f60      	ldr	r7, [pc, #384]	@ (80104fc <_strtod_l+0xbdc>)
 801037a:	4276      	negs	r6, r6
 801037c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801037e:	9805      	ldr	r0, [sp, #20]
 8010380:	f002 fade 	bl	8012940 <_Bfree>
 8010384:	9908      	ldr	r1, [sp, #32]
 8010386:	9805      	ldr	r0, [sp, #20]
 8010388:	f002 fada 	bl	8012940 <_Bfree>
 801038c:	9907      	ldr	r1, [sp, #28]
 801038e:	9805      	ldr	r0, [sp, #20]
 8010390:	f002 fad6 	bl	8012940 <_Bfree>
 8010394:	9906      	ldr	r1, [sp, #24]
 8010396:	9805      	ldr	r0, [sp, #20]
 8010398:	f002 fad2 	bl	8012940 <_Bfree>
 801039c:	e617      	b.n	800ffce <_strtod_l+0x6ae>
 801039e:	2e01      	cmp	r6, #1
 80103a0:	d103      	bne.n	80103aa <_strtod_l+0xa8a>
 80103a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d100      	bne.n	80103aa <_strtod_l+0xa8a>
 80103a8:	e59a      	b.n	800fee0 <_strtod_l+0x5c0>
 80103aa:	2300      	movs	r3, #0
 80103ac:	4c54      	ldr	r4, [pc, #336]	@ (8010500 <_strtod_l+0xbe0>)
 80103ae:	4d4d      	ldr	r5, [pc, #308]	@ (80104e4 <_strtod_l+0xbc4>)
 80103b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80103b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80103b4:	2400      	movs	r4, #0
 80103b6:	e7b2      	b.n	801031e <_strtod_l+0x9fe>
 80103b8:	2400      	movs	r4, #0
 80103ba:	4d4b      	ldr	r5, [pc, #300]	@ (80104e8 <_strtod_l+0xbc8>)
 80103bc:	e7aa      	b.n	8010314 <_strtod_l+0x9f4>
 80103be:	0020      	movs	r0, r4
 80103c0:	0029      	movs	r1, r5
 80103c2:	4b49      	ldr	r3, [pc, #292]	@ (80104e8 <_strtod_l+0xbc8>)
 80103c4:	2200      	movs	r2, #0
 80103c6:	f7f2 fa57 	bl	8002878 <__aeabi_dmul>
 80103ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80103cc:	0004      	movs	r4, r0
 80103ce:	000d      	movs	r5, r1
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d09f      	beq.n	8010314 <_strtod_l+0x9f4>
 80103d4:	940a      	str	r4, [sp, #40]	@ 0x28
 80103d6:	950b      	str	r5, [sp, #44]	@ 0x2c
 80103d8:	e7a1      	b.n	801031e <_strtod_l+0x9fe>
 80103da:	2300      	movs	r3, #0
 80103dc:	4c41      	ldr	r4, [pc, #260]	@ (80104e4 <_strtod_l+0xbc4>)
 80103de:	0025      	movs	r5, r4
 80103e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80103e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80103e4:	001c      	movs	r4, r3
 80103e6:	e79a      	b.n	801031e <_strtod_l+0x9fe>
 80103e8:	23d4      	movs	r3, #212	@ 0xd4
 80103ea:	049b      	lsls	r3, r3, #18
 80103ec:	18cf      	adds	r7, r1, r3
 80103ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103f0:	9710      	str	r7, [sp, #64]	@ 0x40
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d1c2      	bne.n	801037c <_strtod_l+0xa5c>
 80103f6:	4b3d      	ldr	r3, [pc, #244]	@ (80104ec <_strtod_l+0xbcc>)
 80103f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80103fa:	403b      	ands	r3, r7
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d1bd      	bne.n	801037c <_strtod_l+0xa5c>
 8010400:	0020      	movs	r0, r4
 8010402:	0029      	movs	r1, r5
 8010404:	f7f0 f8e8 	bl	80005d8 <__aeabi_d2lz>
 8010408:	f7f0 f920 	bl	800064c <__aeabi_l2d>
 801040c:	0002      	movs	r2, r0
 801040e:	000b      	movs	r3, r1
 8010410:	0020      	movs	r0, r4
 8010412:	0029      	movs	r1, r5
 8010414:	f7f2 fd16 	bl	8002e44 <__aeabi_dsub>
 8010418:	033c      	lsls	r4, r7, #12
 801041a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801041c:	0b24      	lsrs	r4, r4, #12
 801041e:	4334      	orrs	r4, r6
 8010420:	900e      	str	r0, [sp, #56]	@ 0x38
 8010422:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010424:	4a37      	ldr	r2, [pc, #220]	@ (8010504 <_strtod_l+0xbe4>)
 8010426:	431c      	orrs	r4, r3
 8010428:	d052      	beq.n	80104d0 <_strtod_l+0xbb0>
 801042a:	4b37      	ldr	r3, [pc, #220]	@ (8010508 <_strtod_l+0xbe8>)
 801042c:	f7f0 f81c 	bl	8000468 <__aeabi_dcmplt>
 8010430:	2800      	cmp	r0, #0
 8010432:	d000      	beq.n	8010436 <_strtod_l+0xb16>
 8010434:	e4c1      	b.n	800fdba <_strtod_l+0x49a>
 8010436:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8010438:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801043a:	4a34      	ldr	r2, [pc, #208]	@ (801050c <_strtod_l+0xbec>)
 801043c:	4b2a      	ldr	r3, [pc, #168]	@ (80104e8 <_strtod_l+0xbc8>)
 801043e:	f7f0 f827 	bl	8000490 <__aeabi_dcmpgt>
 8010442:	2800      	cmp	r0, #0
 8010444:	d09a      	beq.n	801037c <_strtod_l+0xa5c>
 8010446:	e4b8      	b.n	800fdba <_strtod_l+0x49a>
 8010448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801044a:	2b00      	cmp	r3, #0
 801044c:	d02a      	beq.n	80104a4 <_strtod_l+0xb84>
 801044e:	23d4      	movs	r3, #212	@ 0xd4
 8010450:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010452:	04db      	lsls	r3, r3, #19
 8010454:	429a      	cmp	r2, r3
 8010456:	d825      	bhi.n	80104a4 <_strtod_l+0xb84>
 8010458:	0020      	movs	r0, r4
 801045a:	0029      	movs	r1, r5
 801045c:	4a2c      	ldr	r2, [pc, #176]	@ (8010510 <_strtod_l+0xbf0>)
 801045e:	4b2d      	ldr	r3, [pc, #180]	@ (8010514 <_strtod_l+0xbf4>)
 8010460:	f7f0 f80c 	bl	800047c <__aeabi_dcmple>
 8010464:	2800      	cmp	r0, #0
 8010466:	d016      	beq.n	8010496 <_strtod_l+0xb76>
 8010468:	0020      	movs	r0, r4
 801046a:	0029      	movs	r1, r5
 801046c:	f7f0 f896 	bl	800059c <__aeabi_d2uiz>
 8010470:	2800      	cmp	r0, #0
 8010472:	d100      	bne.n	8010476 <_strtod_l+0xb56>
 8010474:	3001      	adds	r0, #1
 8010476:	f7f3 f97b 	bl	8003770 <__aeabi_ui2d>
 801047a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801047c:	0004      	movs	r4, r0
 801047e:	000d      	movs	r5, r1
 8010480:	2b00      	cmp	r3, #0
 8010482:	d122      	bne.n	80104ca <_strtod_l+0xbaa>
 8010484:	2380      	movs	r3, #128	@ 0x80
 8010486:	061b      	lsls	r3, r3, #24
 8010488:	18cb      	adds	r3, r1, r3
 801048a:	9018      	str	r0, [sp, #96]	@ 0x60
 801048c:	9319      	str	r3, [sp, #100]	@ 0x64
 801048e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010492:	9216      	str	r2, [sp, #88]	@ 0x58
 8010494:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010496:	22d6      	movs	r2, #214	@ 0xd6
 8010498:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801049a:	04d2      	lsls	r2, r2, #19
 801049c:	189b      	adds	r3, r3, r2
 801049e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80104a0:	1a9b      	subs	r3, r3, r2
 80104a2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80104a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80104a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80104a8:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80104aa:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80104ac:	f002 fd8c 	bl	8012fc8 <__ulp>
 80104b0:	0002      	movs	r2, r0
 80104b2:	000b      	movs	r3, r1
 80104b4:	0030      	movs	r0, r6
 80104b6:	0039      	movs	r1, r7
 80104b8:	f7f2 f9de 	bl	8002878 <__aeabi_dmul>
 80104bc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80104be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104c0:	f7f1 f9da 	bl	8001878 <__aeabi_dadd>
 80104c4:	0006      	movs	r6, r0
 80104c6:	000f      	movs	r7, r1
 80104c8:	e791      	b.n	80103ee <_strtod_l+0xace>
 80104ca:	9418      	str	r4, [sp, #96]	@ 0x60
 80104cc:	9519      	str	r5, [sp, #100]	@ 0x64
 80104ce:	e7de      	b.n	801048e <_strtod_l+0xb6e>
 80104d0:	4b11      	ldr	r3, [pc, #68]	@ (8010518 <_strtod_l+0xbf8>)
 80104d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80104d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80104d6:	f7ef ffc7 	bl	8000468 <__aeabi_dcmplt>
 80104da:	e7b2      	b.n	8010442 <_strtod_l+0xb22>
 80104dc:	fff00000 	.word	0xfff00000
 80104e0:	000fffff 	.word	0x000fffff
 80104e4:	3ff00000 	.word	0x3ff00000
 80104e8:	3fe00000 	.word	0x3fe00000
 80104ec:	7ff00000 	.word	0x7ff00000
 80104f0:	7fe00000 	.word	0x7fe00000
 80104f4:	fcb00000 	.word	0xfcb00000
 80104f8:	7c9fffff 	.word	0x7c9fffff
 80104fc:	7fefffff 	.word	0x7fefffff
 8010500:	bff00000 	.word	0xbff00000
 8010504:	94a03595 	.word	0x94a03595
 8010508:	3fdfffff 	.word	0x3fdfffff
 801050c:	35afe535 	.word	0x35afe535
 8010510:	ffc00000 	.word	0xffc00000
 8010514:	41dfffff 	.word	0x41dfffff
 8010518:	3fcfffff 	.word	0x3fcfffff

0801051c <strtod>:
 801051c:	b510      	push	{r4, lr}
 801051e:	4c04      	ldr	r4, [pc, #16]	@ (8010530 <strtod+0x14>)
 8010520:	000a      	movs	r2, r1
 8010522:	0001      	movs	r1, r0
 8010524:	4b03      	ldr	r3, [pc, #12]	@ (8010534 <strtod+0x18>)
 8010526:	6820      	ldr	r0, [r4, #0]
 8010528:	f7ff f9fa 	bl	800f920 <_strtod_l>
 801052c:	bd10      	pop	{r4, pc}
 801052e:	46c0      	nop			@ (mov r8, r8)
 8010530:	200001a4 	.word	0x200001a4
 8010534:	20000038 	.word	0x20000038

08010538 <__cvt>:
 8010538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801053a:	001f      	movs	r7, r3
 801053c:	2300      	movs	r3, #0
 801053e:	0016      	movs	r6, r2
 8010540:	b08b      	sub	sp, #44	@ 0x2c
 8010542:	429f      	cmp	r7, r3
 8010544:	da04      	bge.n	8010550 <__cvt+0x18>
 8010546:	2180      	movs	r1, #128	@ 0x80
 8010548:	0609      	lsls	r1, r1, #24
 801054a:	187b      	adds	r3, r7, r1
 801054c:	001f      	movs	r7, r3
 801054e:	232d      	movs	r3, #45	@ 0x2d
 8010550:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010552:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010554:	7013      	strb	r3, [r2, #0]
 8010556:	2320      	movs	r3, #32
 8010558:	2203      	movs	r2, #3
 801055a:	439d      	bics	r5, r3
 801055c:	2d46      	cmp	r5, #70	@ 0x46
 801055e:	d007      	beq.n	8010570 <__cvt+0x38>
 8010560:	002b      	movs	r3, r5
 8010562:	3b45      	subs	r3, #69	@ 0x45
 8010564:	4259      	negs	r1, r3
 8010566:	414b      	adcs	r3, r1
 8010568:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801056a:	3a01      	subs	r2, #1
 801056c:	18cb      	adds	r3, r1, r3
 801056e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010570:	ab09      	add	r3, sp, #36	@ 0x24
 8010572:	9304      	str	r3, [sp, #16]
 8010574:	ab08      	add	r3, sp, #32
 8010576:	9303      	str	r3, [sp, #12]
 8010578:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801057a:	9200      	str	r2, [sp, #0]
 801057c:	9302      	str	r3, [sp, #8]
 801057e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010580:	0032      	movs	r2, r6
 8010582:	9301      	str	r3, [sp, #4]
 8010584:	003b      	movs	r3, r7
 8010586:	f000 ff35 	bl	80113f4 <_dtoa_r>
 801058a:	0004      	movs	r4, r0
 801058c:	2d47      	cmp	r5, #71	@ 0x47
 801058e:	d11b      	bne.n	80105c8 <__cvt+0x90>
 8010590:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010592:	07db      	lsls	r3, r3, #31
 8010594:	d511      	bpl.n	80105ba <__cvt+0x82>
 8010596:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010598:	18c3      	adds	r3, r0, r3
 801059a:	9307      	str	r3, [sp, #28]
 801059c:	2200      	movs	r2, #0
 801059e:	2300      	movs	r3, #0
 80105a0:	0030      	movs	r0, r6
 80105a2:	0039      	movs	r1, r7
 80105a4:	f7ef ff5a 	bl	800045c <__aeabi_dcmpeq>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d001      	beq.n	80105b0 <__cvt+0x78>
 80105ac:	9b07      	ldr	r3, [sp, #28]
 80105ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80105b0:	2230      	movs	r2, #48	@ 0x30
 80105b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b4:	9907      	ldr	r1, [sp, #28]
 80105b6:	428b      	cmp	r3, r1
 80105b8:	d320      	bcc.n	80105fc <__cvt+0xc4>
 80105ba:	0020      	movs	r0, r4
 80105bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105be:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80105c0:	1b1b      	subs	r3, r3, r4
 80105c2:	6013      	str	r3, [r2, #0]
 80105c4:	b00b      	add	sp, #44	@ 0x2c
 80105c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105ca:	18c3      	adds	r3, r0, r3
 80105cc:	9307      	str	r3, [sp, #28]
 80105ce:	2d46      	cmp	r5, #70	@ 0x46
 80105d0:	d1e4      	bne.n	801059c <__cvt+0x64>
 80105d2:	7803      	ldrb	r3, [r0, #0]
 80105d4:	2b30      	cmp	r3, #48	@ 0x30
 80105d6:	d10c      	bne.n	80105f2 <__cvt+0xba>
 80105d8:	2200      	movs	r2, #0
 80105da:	2300      	movs	r3, #0
 80105dc:	0030      	movs	r0, r6
 80105de:	0039      	movs	r1, r7
 80105e0:	f7ef ff3c 	bl	800045c <__aeabi_dcmpeq>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d104      	bne.n	80105f2 <__cvt+0xba>
 80105e8:	2301      	movs	r3, #1
 80105ea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80105ec:	1a9b      	subs	r3, r3, r2
 80105ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80105f0:	6013      	str	r3, [r2, #0]
 80105f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105f4:	9a07      	ldr	r2, [sp, #28]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	18d3      	adds	r3, r2, r3
 80105fa:	e7ce      	b.n	801059a <__cvt+0x62>
 80105fc:	1c59      	adds	r1, r3, #1
 80105fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8010600:	701a      	strb	r2, [r3, #0]
 8010602:	e7d6      	b.n	80105b2 <__cvt+0x7a>

08010604 <__exponent>:
 8010604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010606:	232b      	movs	r3, #43	@ 0x2b
 8010608:	b085      	sub	sp, #20
 801060a:	0005      	movs	r5, r0
 801060c:	1e0c      	subs	r4, r1, #0
 801060e:	7002      	strb	r2, [r0, #0]
 8010610:	da01      	bge.n	8010616 <__exponent+0x12>
 8010612:	424c      	negs	r4, r1
 8010614:	3302      	adds	r3, #2
 8010616:	706b      	strb	r3, [r5, #1]
 8010618:	2c09      	cmp	r4, #9
 801061a:	dd2c      	ble.n	8010676 <__exponent+0x72>
 801061c:	ab02      	add	r3, sp, #8
 801061e:	1dde      	adds	r6, r3, #7
 8010620:	0020      	movs	r0, r4
 8010622:	210a      	movs	r1, #10
 8010624:	f7ef ff04 	bl	8000430 <__aeabi_idivmod>
 8010628:	0037      	movs	r7, r6
 801062a:	3130      	adds	r1, #48	@ 0x30
 801062c:	3e01      	subs	r6, #1
 801062e:	0020      	movs	r0, r4
 8010630:	7031      	strb	r1, [r6, #0]
 8010632:	210a      	movs	r1, #10
 8010634:	9401      	str	r4, [sp, #4]
 8010636:	f7ef fe15 	bl	8000264 <__divsi3>
 801063a:	9b01      	ldr	r3, [sp, #4]
 801063c:	0004      	movs	r4, r0
 801063e:	2b63      	cmp	r3, #99	@ 0x63
 8010640:	dcee      	bgt.n	8010620 <__exponent+0x1c>
 8010642:	1eba      	subs	r2, r7, #2
 8010644:	1ca8      	adds	r0, r5, #2
 8010646:	0001      	movs	r1, r0
 8010648:	0013      	movs	r3, r2
 801064a:	3430      	adds	r4, #48	@ 0x30
 801064c:	7014      	strb	r4, [r2, #0]
 801064e:	ac02      	add	r4, sp, #8
 8010650:	3407      	adds	r4, #7
 8010652:	429c      	cmp	r4, r3
 8010654:	d80a      	bhi.n	801066c <__exponent+0x68>
 8010656:	2300      	movs	r3, #0
 8010658:	4294      	cmp	r4, r2
 801065a:	d303      	bcc.n	8010664 <__exponent+0x60>
 801065c:	3309      	adds	r3, #9
 801065e:	aa02      	add	r2, sp, #8
 8010660:	189b      	adds	r3, r3, r2
 8010662:	1bdb      	subs	r3, r3, r7
 8010664:	18c0      	adds	r0, r0, r3
 8010666:	1b40      	subs	r0, r0, r5
 8010668:	b005      	add	sp, #20
 801066a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801066c:	781c      	ldrb	r4, [r3, #0]
 801066e:	3301      	adds	r3, #1
 8010670:	700c      	strb	r4, [r1, #0]
 8010672:	3101      	adds	r1, #1
 8010674:	e7eb      	b.n	801064e <__exponent+0x4a>
 8010676:	2330      	movs	r3, #48	@ 0x30
 8010678:	18e4      	adds	r4, r4, r3
 801067a:	70ab      	strb	r3, [r5, #2]
 801067c:	1d28      	adds	r0, r5, #4
 801067e:	70ec      	strb	r4, [r5, #3]
 8010680:	e7f1      	b.n	8010666 <__exponent+0x62>
	...

08010684 <_printf_float>:
 8010684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010686:	b097      	sub	sp, #92	@ 0x5c
 8010688:	000d      	movs	r5, r1
 801068a:	920a      	str	r2, [sp, #40]	@ 0x28
 801068c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801068e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010690:	9009      	str	r0, [sp, #36]	@ 0x24
 8010692:	f000 fd71 	bl	8011178 <_localeconv_r>
 8010696:	6803      	ldr	r3, [r0, #0]
 8010698:	0018      	movs	r0, r3
 801069a:	930d      	str	r3, [sp, #52]	@ 0x34
 801069c:	f7ef fd3c 	bl	8000118 <strlen>
 80106a0:	2300      	movs	r3, #0
 80106a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80106a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80106a6:	7e2b      	ldrb	r3, [r5, #24]
 80106a8:	2207      	movs	r2, #7
 80106aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80106ac:	682b      	ldr	r3, [r5, #0]
 80106ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80106b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80106b2:	6823      	ldr	r3, [r4, #0]
 80106b4:	05c9      	lsls	r1, r1, #23
 80106b6:	d545      	bpl.n	8010744 <_printf_float+0xc0>
 80106b8:	189b      	adds	r3, r3, r2
 80106ba:	4393      	bics	r3, r2
 80106bc:	001a      	movs	r2, r3
 80106be:	3208      	adds	r2, #8
 80106c0:	6022      	str	r2, [r4, #0]
 80106c2:	2201      	movs	r2, #1
 80106c4:	681e      	ldr	r6, [r3, #0]
 80106c6:	685f      	ldr	r7, [r3, #4]
 80106c8:	007b      	lsls	r3, r7, #1
 80106ca:	085b      	lsrs	r3, r3, #1
 80106cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80106ce:	9610      	str	r6, [sp, #64]	@ 0x40
 80106d0:	64ae      	str	r6, [r5, #72]	@ 0x48
 80106d2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80106d4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80106d6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80106d8:	4ba7      	ldr	r3, [pc, #668]	@ (8010978 <_printf_float+0x2f4>)
 80106da:	4252      	negs	r2, r2
 80106dc:	f7f2 ffbc 	bl	8003658 <__aeabi_dcmpun>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	d131      	bne.n	8010748 <_printf_float+0xc4>
 80106e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80106e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80106e8:	2201      	movs	r2, #1
 80106ea:	4ba3      	ldr	r3, [pc, #652]	@ (8010978 <_printf_float+0x2f4>)
 80106ec:	4252      	negs	r2, r2
 80106ee:	f7ef fec5 	bl	800047c <__aeabi_dcmple>
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d128      	bne.n	8010748 <_printf_float+0xc4>
 80106f6:	2200      	movs	r2, #0
 80106f8:	2300      	movs	r3, #0
 80106fa:	0030      	movs	r0, r6
 80106fc:	0039      	movs	r1, r7
 80106fe:	f7ef feb3 	bl	8000468 <__aeabi_dcmplt>
 8010702:	2800      	cmp	r0, #0
 8010704:	d003      	beq.n	801070e <_printf_float+0x8a>
 8010706:	002b      	movs	r3, r5
 8010708:	222d      	movs	r2, #45	@ 0x2d
 801070a:	3343      	adds	r3, #67	@ 0x43
 801070c:	701a      	strb	r2, [r3, #0]
 801070e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010710:	4f9a      	ldr	r7, [pc, #616]	@ (801097c <_printf_float+0x2f8>)
 8010712:	2b47      	cmp	r3, #71	@ 0x47
 8010714:	d800      	bhi.n	8010718 <_printf_float+0x94>
 8010716:	4f9a      	ldr	r7, [pc, #616]	@ (8010980 <_printf_float+0x2fc>)
 8010718:	2303      	movs	r3, #3
 801071a:	2400      	movs	r4, #0
 801071c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801071e:	612b      	str	r3, [r5, #16]
 8010720:	3301      	adds	r3, #1
 8010722:	439a      	bics	r2, r3
 8010724:	602a      	str	r2, [r5, #0]
 8010726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010728:	0029      	movs	r1, r5
 801072a:	9300      	str	r3, [sp, #0]
 801072c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801072e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010730:	aa15      	add	r2, sp, #84	@ 0x54
 8010732:	f000 f9e5 	bl	8010b00 <_printf_common>
 8010736:	3001      	adds	r0, #1
 8010738:	d000      	beq.n	801073c <_printf_float+0xb8>
 801073a:	e09e      	b.n	801087a <_printf_float+0x1f6>
 801073c:	2001      	movs	r0, #1
 801073e:	4240      	negs	r0, r0
 8010740:	b017      	add	sp, #92	@ 0x5c
 8010742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010744:	3307      	adds	r3, #7
 8010746:	e7b8      	b.n	80106ba <_printf_float+0x36>
 8010748:	0032      	movs	r2, r6
 801074a:	003b      	movs	r3, r7
 801074c:	0030      	movs	r0, r6
 801074e:	0039      	movs	r1, r7
 8010750:	f7f2 ff82 	bl	8003658 <__aeabi_dcmpun>
 8010754:	2800      	cmp	r0, #0
 8010756:	d00b      	beq.n	8010770 <_printf_float+0xec>
 8010758:	2f00      	cmp	r7, #0
 801075a:	da03      	bge.n	8010764 <_printf_float+0xe0>
 801075c:	002b      	movs	r3, r5
 801075e:	222d      	movs	r2, #45	@ 0x2d
 8010760:	3343      	adds	r3, #67	@ 0x43
 8010762:	701a      	strb	r2, [r3, #0]
 8010764:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010766:	4f87      	ldr	r7, [pc, #540]	@ (8010984 <_printf_float+0x300>)
 8010768:	2b47      	cmp	r3, #71	@ 0x47
 801076a:	d8d5      	bhi.n	8010718 <_printf_float+0x94>
 801076c:	4f86      	ldr	r7, [pc, #536]	@ (8010988 <_printf_float+0x304>)
 801076e:	e7d3      	b.n	8010718 <_printf_float+0x94>
 8010770:	2220      	movs	r2, #32
 8010772:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8010774:	686b      	ldr	r3, [r5, #4]
 8010776:	4394      	bics	r4, r2
 8010778:	1c5a      	adds	r2, r3, #1
 801077a:	d146      	bne.n	801080a <_printf_float+0x186>
 801077c:	3307      	adds	r3, #7
 801077e:	606b      	str	r3, [r5, #4]
 8010780:	2380      	movs	r3, #128	@ 0x80
 8010782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010784:	00db      	lsls	r3, r3, #3
 8010786:	4313      	orrs	r3, r2
 8010788:	2200      	movs	r2, #0
 801078a:	602b      	str	r3, [r5, #0]
 801078c:	9206      	str	r2, [sp, #24]
 801078e:	aa14      	add	r2, sp, #80	@ 0x50
 8010790:	9205      	str	r2, [sp, #20]
 8010792:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010794:	a90a      	add	r1, sp, #40	@ 0x28
 8010796:	9204      	str	r2, [sp, #16]
 8010798:	aa13      	add	r2, sp, #76	@ 0x4c
 801079a:	9203      	str	r2, [sp, #12]
 801079c:	2223      	movs	r2, #35	@ 0x23
 801079e:	1852      	adds	r2, r2, r1
 80107a0:	9202      	str	r2, [sp, #8]
 80107a2:	9301      	str	r3, [sp, #4]
 80107a4:	686b      	ldr	r3, [r5, #4]
 80107a6:	0032      	movs	r2, r6
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107ac:	003b      	movs	r3, r7
 80107ae:	f7ff fec3 	bl	8010538 <__cvt>
 80107b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80107b4:	0007      	movs	r7, r0
 80107b6:	2c47      	cmp	r4, #71	@ 0x47
 80107b8:	d12d      	bne.n	8010816 <_printf_float+0x192>
 80107ba:	1cd3      	adds	r3, r2, #3
 80107bc:	db02      	blt.n	80107c4 <_printf_float+0x140>
 80107be:	686b      	ldr	r3, [r5, #4]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	dd47      	ble.n	8010854 <_printf_float+0x1d0>
 80107c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107c6:	3b02      	subs	r3, #2
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80107cc:	0028      	movs	r0, r5
 80107ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80107d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80107d2:	3901      	subs	r1, #1
 80107d4:	3050      	adds	r0, #80	@ 0x50
 80107d6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80107d8:	f7ff ff14 	bl	8010604 <__exponent>
 80107dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80107de:	0004      	movs	r4, r0
 80107e0:	1813      	adds	r3, r2, r0
 80107e2:	612b      	str	r3, [r5, #16]
 80107e4:	2a01      	cmp	r2, #1
 80107e6:	dc02      	bgt.n	80107ee <_printf_float+0x16a>
 80107e8:	682a      	ldr	r2, [r5, #0]
 80107ea:	07d2      	lsls	r2, r2, #31
 80107ec:	d501      	bpl.n	80107f2 <_printf_float+0x16e>
 80107ee:	3301      	adds	r3, #1
 80107f0:	612b      	str	r3, [r5, #16]
 80107f2:	2323      	movs	r3, #35	@ 0x23
 80107f4:	aa0a      	add	r2, sp, #40	@ 0x28
 80107f6:	189b      	adds	r3, r3, r2
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d100      	bne.n	8010800 <_printf_float+0x17c>
 80107fe:	e792      	b.n	8010726 <_printf_float+0xa2>
 8010800:	002b      	movs	r3, r5
 8010802:	222d      	movs	r2, #45	@ 0x2d
 8010804:	3343      	adds	r3, #67	@ 0x43
 8010806:	701a      	strb	r2, [r3, #0]
 8010808:	e78d      	b.n	8010726 <_printf_float+0xa2>
 801080a:	2c47      	cmp	r4, #71	@ 0x47
 801080c:	d1b8      	bne.n	8010780 <_printf_float+0xfc>
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1b6      	bne.n	8010780 <_printf_float+0xfc>
 8010812:	3301      	adds	r3, #1
 8010814:	e7b3      	b.n	801077e <_printf_float+0xfa>
 8010816:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010818:	2b65      	cmp	r3, #101	@ 0x65
 801081a:	d9d7      	bls.n	80107cc <_printf_float+0x148>
 801081c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801081e:	2b66      	cmp	r3, #102	@ 0x66
 8010820:	d11a      	bne.n	8010858 <_printf_float+0x1d4>
 8010822:	686b      	ldr	r3, [r5, #4]
 8010824:	2a00      	cmp	r2, #0
 8010826:	dd09      	ble.n	801083c <_printf_float+0x1b8>
 8010828:	612a      	str	r2, [r5, #16]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d102      	bne.n	8010834 <_printf_float+0x1b0>
 801082e:	6829      	ldr	r1, [r5, #0]
 8010830:	07c9      	lsls	r1, r1, #31
 8010832:	d50b      	bpl.n	801084c <_printf_float+0x1c8>
 8010834:	3301      	adds	r3, #1
 8010836:	189b      	adds	r3, r3, r2
 8010838:	612b      	str	r3, [r5, #16]
 801083a:	e007      	b.n	801084c <_printf_float+0x1c8>
 801083c:	2b00      	cmp	r3, #0
 801083e:	d103      	bne.n	8010848 <_printf_float+0x1c4>
 8010840:	2201      	movs	r2, #1
 8010842:	6829      	ldr	r1, [r5, #0]
 8010844:	4211      	tst	r1, r2
 8010846:	d000      	beq.n	801084a <_printf_float+0x1c6>
 8010848:	1c9a      	adds	r2, r3, #2
 801084a:	612a      	str	r2, [r5, #16]
 801084c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801084e:	2400      	movs	r4, #0
 8010850:	65ab      	str	r3, [r5, #88]	@ 0x58
 8010852:	e7ce      	b.n	80107f2 <_printf_float+0x16e>
 8010854:	2367      	movs	r3, #103	@ 0x67
 8010856:	930c      	str	r3, [sp, #48]	@ 0x30
 8010858:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801085a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801085c:	4299      	cmp	r1, r3
 801085e:	db06      	blt.n	801086e <_printf_float+0x1ea>
 8010860:	682b      	ldr	r3, [r5, #0]
 8010862:	6129      	str	r1, [r5, #16]
 8010864:	07db      	lsls	r3, r3, #31
 8010866:	d5f1      	bpl.n	801084c <_printf_float+0x1c8>
 8010868:	3101      	adds	r1, #1
 801086a:	6129      	str	r1, [r5, #16]
 801086c:	e7ee      	b.n	801084c <_printf_float+0x1c8>
 801086e:	2201      	movs	r2, #1
 8010870:	2900      	cmp	r1, #0
 8010872:	dce0      	bgt.n	8010836 <_printf_float+0x1b2>
 8010874:	1892      	adds	r2, r2, r2
 8010876:	1a52      	subs	r2, r2, r1
 8010878:	e7dd      	b.n	8010836 <_printf_float+0x1b2>
 801087a:	682a      	ldr	r2, [r5, #0]
 801087c:	0553      	lsls	r3, r2, #21
 801087e:	d408      	bmi.n	8010892 <_printf_float+0x20e>
 8010880:	692b      	ldr	r3, [r5, #16]
 8010882:	003a      	movs	r2, r7
 8010884:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010888:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801088a:	47a0      	blx	r4
 801088c:	3001      	adds	r0, #1
 801088e:	d129      	bne.n	80108e4 <_printf_float+0x260>
 8010890:	e754      	b.n	801073c <_printf_float+0xb8>
 8010892:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010894:	2b65      	cmp	r3, #101	@ 0x65
 8010896:	d800      	bhi.n	801089a <_printf_float+0x216>
 8010898:	e0db      	b.n	8010a52 <_printf_float+0x3ce>
 801089a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801089c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801089e:	2200      	movs	r2, #0
 80108a0:	2300      	movs	r3, #0
 80108a2:	f7ef fddb 	bl	800045c <__aeabi_dcmpeq>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d033      	beq.n	8010912 <_printf_float+0x28e>
 80108aa:	2301      	movs	r3, #1
 80108ac:	4a37      	ldr	r2, [pc, #220]	@ (801098c <_printf_float+0x308>)
 80108ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80108b4:	47a0      	blx	r4
 80108b6:	3001      	adds	r0, #1
 80108b8:	d100      	bne.n	80108bc <_printf_float+0x238>
 80108ba:	e73f      	b.n	801073c <_printf_float+0xb8>
 80108bc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80108be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80108c0:	42b3      	cmp	r3, r6
 80108c2:	db02      	blt.n	80108ca <_printf_float+0x246>
 80108c4:	682b      	ldr	r3, [r5, #0]
 80108c6:	07db      	lsls	r3, r3, #31
 80108c8:	d50c      	bpl.n	80108e4 <_printf_float+0x260>
 80108ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80108cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80108d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108d4:	47a0      	blx	r4
 80108d6:	2400      	movs	r4, #0
 80108d8:	3001      	adds	r0, #1
 80108da:	d100      	bne.n	80108de <_printf_float+0x25a>
 80108dc:	e72e      	b.n	801073c <_printf_float+0xb8>
 80108de:	1e73      	subs	r3, r6, #1
 80108e0:	42a3      	cmp	r3, r4
 80108e2:	dc0a      	bgt.n	80108fa <_printf_float+0x276>
 80108e4:	682b      	ldr	r3, [r5, #0]
 80108e6:	079b      	lsls	r3, r3, #30
 80108e8:	d500      	bpl.n	80108ec <_printf_float+0x268>
 80108ea:	e106      	b.n	8010afa <_printf_float+0x476>
 80108ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80108ee:	68e8      	ldr	r0, [r5, #12]
 80108f0:	4298      	cmp	r0, r3
 80108f2:	db00      	blt.n	80108f6 <_printf_float+0x272>
 80108f4:	e724      	b.n	8010740 <_printf_float+0xbc>
 80108f6:	0018      	movs	r0, r3
 80108f8:	e722      	b.n	8010740 <_printf_float+0xbc>
 80108fa:	002a      	movs	r2, r5
 80108fc:	2301      	movs	r3, #1
 80108fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010900:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010902:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010904:	321a      	adds	r2, #26
 8010906:	47b8      	blx	r7
 8010908:	3001      	adds	r0, #1
 801090a:	d100      	bne.n	801090e <_printf_float+0x28a>
 801090c:	e716      	b.n	801073c <_printf_float+0xb8>
 801090e:	3401      	adds	r4, #1
 8010910:	e7e5      	b.n	80108de <_printf_float+0x25a>
 8010912:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010914:	2b00      	cmp	r3, #0
 8010916:	dc3b      	bgt.n	8010990 <_printf_float+0x30c>
 8010918:	2301      	movs	r3, #1
 801091a:	4a1c      	ldr	r2, [pc, #112]	@ (801098c <_printf_float+0x308>)
 801091c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801091e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010920:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8010922:	47a0      	blx	r4
 8010924:	3001      	adds	r0, #1
 8010926:	d100      	bne.n	801092a <_printf_float+0x2a6>
 8010928:	e708      	b.n	801073c <_printf_float+0xb8>
 801092a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801092c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801092e:	4333      	orrs	r3, r6
 8010930:	d102      	bne.n	8010938 <_printf_float+0x2b4>
 8010932:	682b      	ldr	r3, [r5, #0]
 8010934:	07db      	lsls	r3, r3, #31
 8010936:	d5d5      	bpl.n	80108e4 <_printf_float+0x260>
 8010938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801093a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801093c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801093e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010940:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8010942:	47a0      	blx	r4
 8010944:	2300      	movs	r3, #0
 8010946:	3001      	adds	r0, #1
 8010948:	d100      	bne.n	801094c <_printf_float+0x2c8>
 801094a:	e6f7      	b.n	801073c <_printf_float+0xb8>
 801094c:	930c      	str	r3, [sp, #48]	@ 0x30
 801094e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010950:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010952:	425b      	negs	r3, r3
 8010954:	4293      	cmp	r3, r2
 8010956:	dc01      	bgt.n	801095c <_printf_float+0x2d8>
 8010958:	0033      	movs	r3, r6
 801095a:	e792      	b.n	8010882 <_printf_float+0x1fe>
 801095c:	002a      	movs	r2, r5
 801095e:	2301      	movs	r3, #1
 8010960:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010964:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8010966:	321a      	adds	r2, #26
 8010968:	47a0      	blx	r4
 801096a:	3001      	adds	r0, #1
 801096c:	d100      	bne.n	8010970 <_printf_float+0x2ec>
 801096e:	e6e5      	b.n	801073c <_printf_float+0xb8>
 8010970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010972:	3301      	adds	r3, #1
 8010974:	e7ea      	b.n	801094c <_printf_float+0x2c8>
 8010976:	46c0      	nop			@ (mov r8, r8)
 8010978:	7fefffff 	.word	0x7fefffff
 801097c:	0801643a 	.word	0x0801643a
 8010980:	08016436 	.word	0x08016436
 8010984:	08016442 	.word	0x08016442
 8010988:	0801643e 	.word	0x0801643e
 801098c:	08016446 	.word	0x08016446
 8010990:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010992:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8010994:	930c      	str	r3, [sp, #48]	@ 0x30
 8010996:	429e      	cmp	r6, r3
 8010998:	dd00      	ble.n	801099c <_printf_float+0x318>
 801099a:	001e      	movs	r6, r3
 801099c:	2e00      	cmp	r6, #0
 801099e:	dc31      	bgt.n	8010a04 <_printf_float+0x380>
 80109a0:	43f3      	mvns	r3, r6
 80109a2:	2400      	movs	r4, #0
 80109a4:	17db      	asrs	r3, r3, #31
 80109a6:	4033      	ands	r3, r6
 80109a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80109aa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80109ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109ae:	1af3      	subs	r3, r6, r3
 80109b0:	42a3      	cmp	r3, r4
 80109b2:	dc30      	bgt.n	8010a16 <_printf_float+0x392>
 80109b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80109b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80109b8:	429a      	cmp	r2, r3
 80109ba:	dc38      	bgt.n	8010a2e <_printf_float+0x3aa>
 80109bc:	682b      	ldr	r3, [r5, #0]
 80109be:	07db      	lsls	r3, r3, #31
 80109c0:	d435      	bmi.n	8010a2e <_printf_float+0x3aa>
 80109c2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80109c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80109c8:	1b9b      	subs	r3, r3, r6
 80109ca:	1b14      	subs	r4, r2, r4
 80109cc:	429c      	cmp	r4, r3
 80109ce:	dd00      	ble.n	80109d2 <_printf_float+0x34e>
 80109d0:	001c      	movs	r4, r3
 80109d2:	2c00      	cmp	r4, #0
 80109d4:	dc34      	bgt.n	8010a40 <_printf_float+0x3bc>
 80109d6:	43e3      	mvns	r3, r4
 80109d8:	2600      	movs	r6, #0
 80109da:	17db      	asrs	r3, r3, #31
 80109dc:	401c      	ands	r4, r3
 80109de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80109e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80109e2:	1ad3      	subs	r3, r2, r3
 80109e4:	1b1b      	subs	r3, r3, r4
 80109e6:	42b3      	cmp	r3, r6
 80109e8:	dc00      	bgt.n	80109ec <_printf_float+0x368>
 80109ea:	e77b      	b.n	80108e4 <_printf_float+0x260>
 80109ec:	002a      	movs	r2, r5
 80109ee:	2301      	movs	r3, #1
 80109f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80109f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80109f6:	321a      	adds	r2, #26
 80109f8:	47b8      	blx	r7
 80109fa:	3001      	adds	r0, #1
 80109fc:	d100      	bne.n	8010a00 <_printf_float+0x37c>
 80109fe:	e69d      	b.n	801073c <_printf_float+0xb8>
 8010a00:	3601      	adds	r6, #1
 8010a02:	e7ec      	b.n	80109de <_printf_float+0x35a>
 8010a04:	0033      	movs	r3, r6
 8010a06:	003a      	movs	r2, r7
 8010a08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a0c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8010a0e:	47a0      	blx	r4
 8010a10:	3001      	adds	r0, #1
 8010a12:	d1c5      	bne.n	80109a0 <_printf_float+0x31c>
 8010a14:	e692      	b.n	801073c <_printf_float+0xb8>
 8010a16:	002a      	movs	r2, r5
 8010a18:	2301      	movs	r3, #1
 8010a1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a1e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010a20:	321a      	adds	r2, #26
 8010a22:	47b0      	blx	r6
 8010a24:	3001      	adds	r0, #1
 8010a26:	d100      	bne.n	8010a2a <_printf_float+0x3a6>
 8010a28:	e688      	b.n	801073c <_printf_float+0xb8>
 8010a2a:	3401      	adds	r4, #1
 8010a2c:	e7bd      	b.n	80109aa <_printf_float+0x326>
 8010a2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8010a38:	47a0      	blx	r4
 8010a3a:	3001      	adds	r0, #1
 8010a3c:	d1c1      	bne.n	80109c2 <_printf_float+0x33e>
 8010a3e:	e67d      	b.n	801073c <_printf_float+0xb8>
 8010a40:	19ba      	adds	r2, r7, r6
 8010a42:	0023      	movs	r3, r4
 8010a44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a48:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010a4a:	47b0      	blx	r6
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	d1c2      	bne.n	80109d6 <_printf_float+0x352>
 8010a50:	e674      	b.n	801073c <_printf_float+0xb8>
 8010a52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010a54:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	dc02      	bgt.n	8010a60 <_printf_float+0x3dc>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	421a      	tst	r2, r3
 8010a5e:	d039      	beq.n	8010ad4 <_printf_float+0x450>
 8010a60:	2301      	movs	r3, #1
 8010a62:	003a      	movs	r2, r7
 8010a64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a68:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010a6a:	47b0      	blx	r6
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	d100      	bne.n	8010a72 <_printf_float+0x3ee>
 8010a70:	e664      	b.n	801073c <_printf_float+0xb8>
 8010a72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a7a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010a7c:	47b0      	blx	r6
 8010a7e:	3001      	adds	r0, #1
 8010a80:	d100      	bne.n	8010a84 <_printf_float+0x400>
 8010a82:	e65b      	b.n	801073c <_printf_float+0xb8>
 8010a84:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8010a86:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8010a88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a90:	2300      	movs	r3, #0
 8010a92:	f7ef fce3 	bl	800045c <__aeabi_dcmpeq>
 8010a96:	2800      	cmp	r0, #0
 8010a98:	d11a      	bne.n	8010ad0 <_printf_float+0x44c>
 8010a9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a9c:	1c7a      	adds	r2, r7, #1
 8010a9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010aa0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010aa2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010aa4:	47b0      	blx	r6
 8010aa6:	3001      	adds	r0, #1
 8010aa8:	d10e      	bne.n	8010ac8 <_printf_float+0x444>
 8010aaa:	e647      	b.n	801073c <_printf_float+0xb8>
 8010aac:	002a      	movs	r2, r5
 8010aae:	2301      	movs	r3, #1
 8010ab0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ab4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010ab6:	321a      	adds	r2, #26
 8010ab8:	47b8      	blx	r7
 8010aba:	3001      	adds	r0, #1
 8010abc:	d100      	bne.n	8010ac0 <_printf_float+0x43c>
 8010abe:	e63d      	b.n	801073c <_printf_float+0xb8>
 8010ac0:	3601      	adds	r6, #1
 8010ac2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ac4:	429e      	cmp	r6, r3
 8010ac6:	dbf1      	blt.n	8010aac <_printf_float+0x428>
 8010ac8:	002a      	movs	r2, r5
 8010aca:	0023      	movs	r3, r4
 8010acc:	3250      	adds	r2, #80	@ 0x50
 8010ace:	e6d9      	b.n	8010884 <_printf_float+0x200>
 8010ad0:	2600      	movs	r6, #0
 8010ad2:	e7f6      	b.n	8010ac2 <_printf_float+0x43e>
 8010ad4:	003a      	movs	r2, r7
 8010ad6:	e7e2      	b.n	8010a9e <_printf_float+0x41a>
 8010ad8:	002a      	movs	r2, r5
 8010ada:	2301      	movs	r3, #1
 8010adc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ae0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010ae2:	3219      	adds	r2, #25
 8010ae4:	47b0      	blx	r6
 8010ae6:	3001      	adds	r0, #1
 8010ae8:	d100      	bne.n	8010aec <_printf_float+0x468>
 8010aea:	e627      	b.n	801073c <_printf_float+0xb8>
 8010aec:	3401      	adds	r4, #1
 8010aee:	68eb      	ldr	r3, [r5, #12]
 8010af0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010af2:	1a9b      	subs	r3, r3, r2
 8010af4:	42a3      	cmp	r3, r4
 8010af6:	dcef      	bgt.n	8010ad8 <_printf_float+0x454>
 8010af8:	e6f8      	b.n	80108ec <_printf_float+0x268>
 8010afa:	2400      	movs	r4, #0
 8010afc:	e7f7      	b.n	8010aee <_printf_float+0x46a>
 8010afe:	46c0      	nop			@ (mov r8, r8)

08010b00 <_printf_common>:
 8010b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b02:	0016      	movs	r6, r2
 8010b04:	9301      	str	r3, [sp, #4]
 8010b06:	688a      	ldr	r2, [r1, #8]
 8010b08:	690b      	ldr	r3, [r1, #16]
 8010b0a:	000c      	movs	r4, r1
 8010b0c:	9000      	str	r0, [sp, #0]
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	da00      	bge.n	8010b14 <_printf_common+0x14>
 8010b12:	0013      	movs	r3, r2
 8010b14:	0022      	movs	r2, r4
 8010b16:	6033      	str	r3, [r6, #0]
 8010b18:	3243      	adds	r2, #67	@ 0x43
 8010b1a:	7812      	ldrb	r2, [r2, #0]
 8010b1c:	2a00      	cmp	r2, #0
 8010b1e:	d001      	beq.n	8010b24 <_printf_common+0x24>
 8010b20:	3301      	adds	r3, #1
 8010b22:	6033      	str	r3, [r6, #0]
 8010b24:	6823      	ldr	r3, [r4, #0]
 8010b26:	069b      	lsls	r3, r3, #26
 8010b28:	d502      	bpl.n	8010b30 <_printf_common+0x30>
 8010b2a:	6833      	ldr	r3, [r6, #0]
 8010b2c:	3302      	adds	r3, #2
 8010b2e:	6033      	str	r3, [r6, #0]
 8010b30:	6822      	ldr	r2, [r4, #0]
 8010b32:	2306      	movs	r3, #6
 8010b34:	0015      	movs	r5, r2
 8010b36:	401d      	ands	r5, r3
 8010b38:	421a      	tst	r2, r3
 8010b3a:	d027      	beq.n	8010b8c <_printf_common+0x8c>
 8010b3c:	0023      	movs	r3, r4
 8010b3e:	3343      	adds	r3, #67	@ 0x43
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	1e5a      	subs	r2, r3, #1
 8010b44:	4193      	sbcs	r3, r2
 8010b46:	6822      	ldr	r2, [r4, #0]
 8010b48:	0692      	lsls	r2, r2, #26
 8010b4a:	d430      	bmi.n	8010bae <_printf_common+0xae>
 8010b4c:	0022      	movs	r2, r4
 8010b4e:	9901      	ldr	r1, [sp, #4]
 8010b50:	9800      	ldr	r0, [sp, #0]
 8010b52:	9d08      	ldr	r5, [sp, #32]
 8010b54:	3243      	adds	r2, #67	@ 0x43
 8010b56:	47a8      	blx	r5
 8010b58:	3001      	adds	r0, #1
 8010b5a:	d025      	beq.n	8010ba8 <_printf_common+0xa8>
 8010b5c:	2206      	movs	r2, #6
 8010b5e:	6823      	ldr	r3, [r4, #0]
 8010b60:	2500      	movs	r5, #0
 8010b62:	4013      	ands	r3, r2
 8010b64:	2b04      	cmp	r3, #4
 8010b66:	d105      	bne.n	8010b74 <_printf_common+0x74>
 8010b68:	6833      	ldr	r3, [r6, #0]
 8010b6a:	68e5      	ldr	r5, [r4, #12]
 8010b6c:	1aed      	subs	r5, r5, r3
 8010b6e:	43eb      	mvns	r3, r5
 8010b70:	17db      	asrs	r3, r3, #31
 8010b72:	401d      	ands	r5, r3
 8010b74:	68a3      	ldr	r3, [r4, #8]
 8010b76:	6922      	ldr	r2, [r4, #16]
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	dd01      	ble.n	8010b80 <_printf_common+0x80>
 8010b7c:	1a9b      	subs	r3, r3, r2
 8010b7e:	18ed      	adds	r5, r5, r3
 8010b80:	2600      	movs	r6, #0
 8010b82:	42b5      	cmp	r5, r6
 8010b84:	d120      	bne.n	8010bc8 <_printf_common+0xc8>
 8010b86:	2000      	movs	r0, #0
 8010b88:	e010      	b.n	8010bac <_printf_common+0xac>
 8010b8a:	3501      	adds	r5, #1
 8010b8c:	68e3      	ldr	r3, [r4, #12]
 8010b8e:	6832      	ldr	r2, [r6, #0]
 8010b90:	1a9b      	subs	r3, r3, r2
 8010b92:	42ab      	cmp	r3, r5
 8010b94:	ddd2      	ble.n	8010b3c <_printf_common+0x3c>
 8010b96:	0022      	movs	r2, r4
 8010b98:	2301      	movs	r3, #1
 8010b9a:	9901      	ldr	r1, [sp, #4]
 8010b9c:	9800      	ldr	r0, [sp, #0]
 8010b9e:	9f08      	ldr	r7, [sp, #32]
 8010ba0:	3219      	adds	r2, #25
 8010ba2:	47b8      	blx	r7
 8010ba4:	3001      	adds	r0, #1
 8010ba6:	d1f0      	bne.n	8010b8a <_printf_common+0x8a>
 8010ba8:	2001      	movs	r0, #1
 8010baa:	4240      	negs	r0, r0
 8010bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010bae:	2030      	movs	r0, #48	@ 0x30
 8010bb0:	18e1      	adds	r1, r4, r3
 8010bb2:	3143      	adds	r1, #67	@ 0x43
 8010bb4:	7008      	strb	r0, [r1, #0]
 8010bb6:	0021      	movs	r1, r4
 8010bb8:	1c5a      	adds	r2, r3, #1
 8010bba:	3145      	adds	r1, #69	@ 0x45
 8010bbc:	7809      	ldrb	r1, [r1, #0]
 8010bbe:	18a2      	adds	r2, r4, r2
 8010bc0:	3243      	adds	r2, #67	@ 0x43
 8010bc2:	3302      	adds	r3, #2
 8010bc4:	7011      	strb	r1, [r2, #0]
 8010bc6:	e7c1      	b.n	8010b4c <_printf_common+0x4c>
 8010bc8:	0022      	movs	r2, r4
 8010bca:	2301      	movs	r3, #1
 8010bcc:	9901      	ldr	r1, [sp, #4]
 8010bce:	9800      	ldr	r0, [sp, #0]
 8010bd0:	9f08      	ldr	r7, [sp, #32]
 8010bd2:	321a      	adds	r2, #26
 8010bd4:	47b8      	blx	r7
 8010bd6:	3001      	adds	r0, #1
 8010bd8:	d0e6      	beq.n	8010ba8 <_printf_common+0xa8>
 8010bda:	3601      	adds	r6, #1
 8010bdc:	e7d1      	b.n	8010b82 <_printf_common+0x82>
	...

08010be0 <_printf_i>:
 8010be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010be2:	b08b      	sub	sp, #44	@ 0x2c
 8010be4:	9206      	str	r2, [sp, #24]
 8010be6:	000a      	movs	r2, r1
 8010be8:	3243      	adds	r2, #67	@ 0x43
 8010bea:	9307      	str	r3, [sp, #28]
 8010bec:	9005      	str	r0, [sp, #20]
 8010bee:	9203      	str	r2, [sp, #12]
 8010bf0:	7e0a      	ldrb	r2, [r1, #24]
 8010bf2:	000c      	movs	r4, r1
 8010bf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010bf6:	2a78      	cmp	r2, #120	@ 0x78
 8010bf8:	d809      	bhi.n	8010c0e <_printf_i+0x2e>
 8010bfa:	2a62      	cmp	r2, #98	@ 0x62
 8010bfc:	d80b      	bhi.n	8010c16 <_printf_i+0x36>
 8010bfe:	2a00      	cmp	r2, #0
 8010c00:	d100      	bne.n	8010c04 <_printf_i+0x24>
 8010c02:	e0ba      	b.n	8010d7a <_printf_i+0x19a>
 8010c04:	497a      	ldr	r1, [pc, #488]	@ (8010df0 <_printf_i+0x210>)
 8010c06:	9104      	str	r1, [sp, #16]
 8010c08:	2a58      	cmp	r2, #88	@ 0x58
 8010c0a:	d100      	bne.n	8010c0e <_printf_i+0x2e>
 8010c0c:	e08e      	b.n	8010d2c <_printf_i+0x14c>
 8010c0e:	0025      	movs	r5, r4
 8010c10:	3542      	adds	r5, #66	@ 0x42
 8010c12:	702a      	strb	r2, [r5, #0]
 8010c14:	e022      	b.n	8010c5c <_printf_i+0x7c>
 8010c16:	0010      	movs	r0, r2
 8010c18:	3863      	subs	r0, #99	@ 0x63
 8010c1a:	2815      	cmp	r0, #21
 8010c1c:	d8f7      	bhi.n	8010c0e <_printf_i+0x2e>
 8010c1e:	f7ef fa8d 	bl	800013c <__gnu_thumb1_case_shi>
 8010c22:	0016      	.short	0x0016
 8010c24:	fff6001f 	.word	0xfff6001f
 8010c28:	fff6fff6 	.word	0xfff6fff6
 8010c2c:	001ffff6 	.word	0x001ffff6
 8010c30:	fff6fff6 	.word	0xfff6fff6
 8010c34:	fff6fff6 	.word	0xfff6fff6
 8010c38:	0036009f 	.word	0x0036009f
 8010c3c:	fff6007e 	.word	0xfff6007e
 8010c40:	00b0fff6 	.word	0x00b0fff6
 8010c44:	0036fff6 	.word	0x0036fff6
 8010c48:	fff6fff6 	.word	0xfff6fff6
 8010c4c:	0082      	.short	0x0082
 8010c4e:	0025      	movs	r5, r4
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	3542      	adds	r5, #66	@ 0x42
 8010c54:	1d11      	adds	r1, r2, #4
 8010c56:	6019      	str	r1, [r3, #0]
 8010c58:	6813      	ldr	r3, [r2, #0]
 8010c5a:	702b      	strb	r3, [r5, #0]
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	e09e      	b.n	8010d9e <_printf_i+0x1be>
 8010c60:	6818      	ldr	r0, [r3, #0]
 8010c62:	6809      	ldr	r1, [r1, #0]
 8010c64:	1d02      	adds	r2, r0, #4
 8010c66:	060d      	lsls	r5, r1, #24
 8010c68:	d50b      	bpl.n	8010c82 <_printf_i+0xa2>
 8010c6a:	6806      	ldr	r6, [r0, #0]
 8010c6c:	601a      	str	r2, [r3, #0]
 8010c6e:	2e00      	cmp	r6, #0
 8010c70:	da03      	bge.n	8010c7a <_printf_i+0x9a>
 8010c72:	232d      	movs	r3, #45	@ 0x2d
 8010c74:	9a03      	ldr	r2, [sp, #12]
 8010c76:	4276      	negs	r6, r6
 8010c78:	7013      	strb	r3, [r2, #0]
 8010c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8010df0 <_printf_i+0x210>)
 8010c7c:	270a      	movs	r7, #10
 8010c7e:	9304      	str	r3, [sp, #16]
 8010c80:	e018      	b.n	8010cb4 <_printf_i+0xd4>
 8010c82:	6806      	ldr	r6, [r0, #0]
 8010c84:	601a      	str	r2, [r3, #0]
 8010c86:	0649      	lsls	r1, r1, #25
 8010c88:	d5f1      	bpl.n	8010c6e <_printf_i+0x8e>
 8010c8a:	b236      	sxth	r6, r6
 8010c8c:	e7ef      	b.n	8010c6e <_printf_i+0x8e>
 8010c8e:	6808      	ldr	r0, [r1, #0]
 8010c90:	6819      	ldr	r1, [r3, #0]
 8010c92:	c940      	ldmia	r1!, {r6}
 8010c94:	0605      	lsls	r5, r0, #24
 8010c96:	d402      	bmi.n	8010c9e <_printf_i+0xbe>
 8010c98:	0640      	lsls	r0, r0, #25
 8010c9a:	d500      	bpl.n	8010c9e <_printf_i+0xbe>
 8010c9c:	b2b6      	uxth	r6, r6
 8010c9e:	6019      	str	r1, [r3, #0]
 8010ca0:	4b53      	ldr	r3, [pc, #332]	@ (8010df0 <_printf_i+0x210>)
 8010ca2:	270a      	movs	r7, #10
 8010ca4:	9304      	str	r3, [sp, #16]
 8010ca6:	2a6f      	cmp	r2, #111	@ 0x6f
 8010ca8:	d100      	bne.n	8010cac <_printf_i+0xcc>
 8010caa:	3f02      	subs	r7, #2
 8010cac:	0023      	movs	r3, r4
 8010cae:	2200      	movs	r2, #0
 8010cb0:	3343      	adds	r3, #67	@ 0x43
 8010cb2:	701a      	strb	r2, [r3, #0]
 8010cb4:	6863      	ldr	r3, [r4, #4]
 8010cb6:	60a3      	str	r3, [r4, #8]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	db06      	blt.n	8010cca <_printf_i+0xea>
 8010cbc:	2104      	movs	r1, #4
 8010cbe:	6822      	ldr	r2, [r4, #0]
 8010cc0:	9d03      	ldr	r5, [sp, #12]
 8010cc2:	438a      	bics	r2, r1
 8010cc4:	6022      	str	r2, [r4, #0]
 8010cc6:	4333      	orrs	r3, r6
 8010cc8:	d00c      	beq.n	8010ce4 <_printf_i+0x104>
 8010cca:	9d03      	ldr	r5, [sp, #12]
 8010ccc:	0030      	movs	r0, r6
 8010cce:	0039      	movs	r1, r7
 8010cd0:	f7ef fac4 	bl	800025c <__aeabi_uidivmod>
 8010cd4:	9b04      	ldr	r3, [sp, #16]
 8010cd6:	3d01      	subs	r5, #1
 8010cd8:	5c5b      	ldrb	r3, [r3, r1]
 8010cda:	702b      	strb	r3, [r5, #0]
 8010cdc:	0033      	movs	r3, r6
 8010cde:	0006      	movs	r6, r0
 8010ce0:	429f      	cmp	r7, r3
 8010ce2:	d9f3      	bls.n	8010ccc <_printf_i+0xec>
 8010ce4:	2f08      	cmp	r7, #8
 8010ce6:	d109      	bne.n	8010cfc <_printf_i+0x11c>
 8010ce8:	6823      	ldr	r3, [r4, #0]
 8010cea:	07db      	lsls	r3, r3, #31
 8010cec:	d506      	bpl.n	8010cfc <_printf_i+0x11c>
 8010cee:	6862      	ldr	r2, [r4, #4]
 8010cf0:	6923      	ldr	r3, [r4, #16]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	dc02      	bgt.n	8010cfc <_printf_i+0x11c>
 8010cf6:	2330      	movs	r3, #48	@ 0x30
 8010cf8:	3d01      	subs	r5, #1
 8010cfa:	702b      	strb	r3, [r5, #0]
 8010cfc:	9b03      	ldr	r3, [sp, #12]
 8010cfe:	1b5b      	subs	r3, r3, r5
 8010d00:	6123      	str	r3, [r4, #16]
 8010d02:	9b07      	ldr	r3, [sp, #28]
 8010d04:	0021      	movs	r1, r4
 8010d06:	9300      	str	r3, [sp, #0]
 8010d08:	9805      	ldr	r0, [sp, #20]
 8010d0a:	9b06      	ldr	r3, [sp, #24]
 8010d0c:	aa09      	add	r2, sp, #36	@ 0x24
 8010d0e:	f7ff fef7 	bl	8010b00 <_printf_common>
 8010d12:	3001      	adds	r0, #1
 8010d14:	d148      	bne.n	8010da8 <_printf_i+0x1c8>
 8010d16:	2001      	movs	r0, #1
 8010d18:	4240      	negs	r0, r0
 8010d1a:	b00b      	add	sp, #44	@ 0x2c
 8010d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d1e:	2220      	movs	r2, #32
 8010d20:	6809      	ldr	r1, [r1, #0]
 8010d22:	430a      	orrs	r2, r1
 8010d24:	6022      	str	r2, [r4, #0]
 8010d26:	2278      	movs	r2, #120	@ 0x78
 8010d28:	4932      	ldr	r1, [pc, #200]	@ (8010df4 <_printf_i+0x214>)
 8010d2a:	9104      	str	r1, [sp, #16]
 8010d2c:	0021      	movs	r1, r4
 8010d2e:	3145      	adds	r1, #69	@ 0x45
 8010d30:	700a      	strb	r2, [r1, #0]
 8010d32:	6819      	ldr	r1, [r3, #0]
 8010d34:	6822      	ldr	r2, [r4, #0]
 8010d36:	c940      	ldmia	r1!, {r6}
 8010d38:	0610      	lsls	r0, r2, #24
 8010d3a:	d402      	bmi.n	8010d42 <_printf_i+0x162>
 8010d3c:	0650      	lsls	r0, r2, #25
 8010d3e:	d500      	bpl.n	8010d42 <_printf_i+0x162>
 8010d40:	b2b6      	uxth	r6, r6
 8010d42:	6019      	str	r1, [r3, #0]
 8010d44:	07d3      	lsls	r3, r2, #31
 8010d46:	d502      	bpl.n	8010d4e <_printf_i+0x16e>
 8010d48:	2320      	movs	r3, #32
 8010d4a:	4313      	orrs	r3, r2
 8010d4c:	6023      	str	r3, [r4, #0]
 8010d4e:	2e00      	cmp	r6, #0
 8010d50:	d001      	beq.n	8010d56 <_printf_i+0x176>
 8010d52:	2710      	movs	r7, #16
 8010d54:	e7aa      	b.n	8010cac <_printf_i+0xcc>
 8010d56:	2220      	movs	r2, #32
 8010d58:	6823      	ldr	r3, [r4, #0]
 8010d5a:	4393      	bics	r3, r2
 8010d5c:	6023      	str	r3, [r4, #0]
 8010d5e:	e7f8      	b.n	8010d52 <_printf_i+0x172>
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	680d      	ldr	r5, [r1, #0]
 8010d64:	1d10      	adds	r0, r2, #4
 8010d66:	6949      	ldr	r1, [r1, #20]
 8010d68:	6018      	str	r0, [r3, #0]
 8010d6a:	6813      	ldr	r3, [r2, #0]
 8010d6c:	062e      	lsls	r6, r5, #24
 8010d6e:	d501      	bpl.n	8010d74 <_printf_i+0x194>
 8010d70:	6019      	str	r1, [r3, #0]
 8010d72:	e002      	b.n	8010d7a <_printf_i+0x19a>
 8010d74:	066d      	lsls	r5, r5, #25
 8010d76:	d5fb      	bpl.n	8010d70 <_printf_i+0x190>
 8010d78:	8019      	strh	r1, [r3, #0]
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	9d03      	ldr	r5, [sp, #12]
 8010d7e:	6123      	str	r3, [r4, #16]
 8010d80:	e7bf      	b.n	8010d02 <_printf_i+0x122>
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	1d11      	adds	r1, r2, #4
 8010d86:	6019      	str	r1, [r3, #0]
 8010d88:	6815      	ldr	r5, [r2, #0]
 8010d8a:	2100      	movs	r1, #0
 8010d8c:	0028      	movs	r0, r5
 8010d8e:	6862      	ldr	r2, [r4, #4]
 8010d90:	f000 fa71 	bl	8011276 <memchr>
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d001      	beq.n	8010d9c <_printf_i+0x1bc>
 8010d98:	1b40      	subs	r0, r0, r5
 8010d9a:	6060      	str	r0, [r4, #4]
 8010d9c:	6863      	ldr	r3, [r4, #4]
 8010d9e:	6123      	str	r3, [r4, #16]
 8010da0:	2300      	movs	r3, #0
 8010da2:	9a03      	ldr	r2, [sp, #12]
 8010da4:	7013      	strb	r3, [r2, #0]
 8010da6:	e7ac      	b.n	8010d02 <_printf_i+0x122>
 8010da8:	002a      	movs	r2, r5
 8010daa:	6923      	ldr	r3, [r4, #16]
 8010dac:	9906      	ldr	r1, [sp, #24]
 8010dae:	9805      	ldr	r0, [sp, #20]
 8010db0:	9d07      	ldr	r5, [sp, #28]
 8010db2:	47a8      	blx	r5
 8010db4:	3001      	adds	r0, #1
 8010db6:	d0ae      	beq.n	8010d16 <_printf_i+0x136>
 8010db8:	6823      	ldr	r3, [r4, #0]
 8010dba:	079b      	lsls	r3, r3, #30
 8010dbc:	d415      	bmi.n	8010dea <_printf_i+0x20a>
 8010dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dc0:	68e0      	ldr	r0, [r4, #12]
 8010dc2:	4298      	cmp	r0, r3
 8010dc4:	daa9      	bge.n	8010d1a <_printf_i+0x13a>
 8010dc6:	0018      	movs	r0, r3
 8010dc8:	e7a7      	b.n	8010d1a <_printf_i+0x13a>
 8010dca:	0022      	movs	r2, r4
 8010dcc:	2301      	movs	r3, #1
 8010dce:	9906      	ldr	r1, [sp, #24]
 8010dd0:	9805      	ldr	r0, [sp, #20]
 8010dd2:	9e07      	ldr	r6, [sp, #28]
 8010dd4:	3219      	adds	r2, #25
 8010dd6:	47b0      	blx	r6
 8010dd8:	3001      	adds	r0, #1
 8010dda:	d09c      	beq.n	8010d16 <_printf_i+0x136>
 8010ddc:	3501      	adds	r5, #1
 8010dde:	68e3      	ldr	r3, [r4, #12]
 8010de0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010de2:	1a9b      	subs	r3, r3, r2
 8010de4:	42ab      	cmp	r3, r5
 8010de6:	dcf0      	bgt.n	8010dca <_printf_i+0x1ea>
 8010de8:	e7e9      	b.n	8010dbe <_printf_i+0x1de>
 8010dea:	2500      	movs	r5, #0
 8010dec:	e7f7      	b.n	8010dde <_printf_i+0x1fe>
 8010dee:	46c0      	nop			@ (mov r8, r8)
 8010df0:	08016448 	.word	0x08016448
 8010df4:	08016459 	.word	0x08016459

08010df8 <std>:
 8010df8:	2300      	movs	r3, #0
 8010dfa:	b510      	push	{r4, lr}
 8010dfc:	0004      	movs	r4, r0
 8010dfe:	6003      	str	r3, [r0, #0]
 8010e00:	6043      	str	r3, [r0, #4]
 8010e02:	6083      	str	r3, [r0, #8]
 8010e04:	8181      	strh	r1, [r0, #12]
 8010e06:	6643      	str	r3, [r0, #100]	@ 0x64
 8010e08:	81c2      	strh	r2, [r0, #14]
 8010e0a:	6103      	str	r3, [r0, #16]
 8010e0c:	6143      	str	r3, [r0, #20]
 8010e0e:	6183      	str	r3, [r0, #24]
 8010e10:	0019      	movs	r1, r3
 8010e12:	2208      	movs	r2, #8
 8010e14:	305c      	adds	r0, #92	@ 0x5c
 8010e16:	f000 f935 	bl	8011084 <memset>
 8010e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e48 <std+0x50>)
 8010e1c:	6224      	str	r4, [r4, #32]
 8010e1e:	6263      	str	r3, [r4, #36]	@ 0x24
 8010e20:	4b0a      	ldr	r3, [pc, #40]	@ (8010e4c <std+0x54>)
 8010e22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010e24:	4b0a      	ldr	r3, [pc, #40]	@ (8010e50 <std+0x58>)
 8010e26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010e28:	4b0a      	ldr	r3, [pc, #40]	@ (8010e54 <std+0x5c>)
 8010e2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8010e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8010e58 <std+0x60>)
 8010e2e:	429c      	cmp	r4, r3
 8010e30:	d005      	beq.n	8010e3e <std+0x46>
 8010e32:	4b0a      	ldr	r3, [pc, #40]	@ (8010e5c <std+0x64>)
 8010e34:	429c      	cmp	r4, r3
 8010e36:	d002      	beq.n	8010e3e <std+0x46>
 8010e38:	4b09      	ldr	r3, [pc, #36]	@ (8010e60 <std+0x68>)
 8010e3a:	429c      	cmp	r4, r3
 8010e3c:	d103      	bne.n	8010e46 <std+0x4e>
 8010e3e:	0020      	movs	r0, r4
 8010e40:	3058      	adds	r0, #88	@ 0x58
 8010e42:	f000 fa15 	bl	8011270 <__retarget_lock_init_recursive>
 8010e46:	bd10      	pop	{r4, pc}
 8010e48:	08010fed 	.word	0x08010fed
 8010e4c:	08011015 	.word	0x08011015
 8010e50:	0801104d 	.word	0x0801104d
 8010e54:	08011079 	.word	0x08011079
 8010e58:	200004d0 	.word	0x200004d0
 8010e5c:	20000538 	.word	0x20000538
 8010e60:	200005a0 	.word	0x200005a0

08010e64 <stdio_exit_handler>:
 8010e64:	b510      	push	{r4, lr}
 8010e66:	4a03      	ldr	r2, [pc, #12]	@ (8010e74 <stdio_exit_handler+0x10>)
 8010e68:	4903      	ldr	r1, [pc, #12]	@ (8010e78 <stdio_exit_handler+0x14>)
 8010e6a:	4804      	ldr	r0, [pc, #16]	@ (8010e7c <stdio_exit_handler+0x18>)
 8010e6c:	f000 f86c 	bl	8010f48 <_fwalk_sglue>
 8010e70:	bd10      	pop	{r4, pc}
 8010e72:	46c0      	nop			@ (mov r8, r8)
 8010e74:	2000002c 	.word	0x2000002c
 8010e78:	08013621 	.word	0x08013621
 8010e7c:	200001a8 	.word	0x200001a8

08010e80 <cleanup_stdio>:
 8010e80:	6841      	ldr	r1, [r0, #4]
 8010e82:	4b0b      	ldr	r3, [pc, #44]	@ (8010eb0 <cleanup_stdio+0x30>)
 8010e84:	b510      	push	{r4, lr}
 8010e86:	0004      	movs	r4, r0
 8010e88:	4299      	cmp	r1, r3
 8010e8a:	d001      	beq.n	8010e90 <cleanup_stdio+0x10>
 8010e8c:	f002 fbc8 	bl	8013620 <_fflush_r>
 8010e90:	68a1      	ldr	r1, [r4, #8]
 8010e92:	4b08      	ldr	r3, [pc, #32]	@ (8010eb4 <cleanup_stdio+0x34>)
 8010e94:	4299      	cmp	r1, r3
 8010e96:	d002      	beq.n	8010e9e <cleanup_stdio+0x1e>
 8010e98:	0020      	movs	r0, r4
 8010e9a:	f002 fbc1 	bl	8013620 <_fflush_r>
 8010e9e:	68e1      	ldr	r1, [r4, #12]
 8010ea0:	4b05      	ldr	r3, [pc, #20]	@ (8010eb8 <cleanup_stdio+0x38>)
 8010ea2:	4299      	cmp	r1, r3
 8010ea4:	d002      	beq.n	8010eac <cleanup_stdio+0x2c>
 8010ea6:	0020      	movs	r0, r4
 8010ea8:	f002 fbba 	bl	8013620 <_fflush_r>
 8010eac:	bd10      	pop	{r4, pc}
 8010eae:	46c0      	nop			@ (mov r8, r8)
 8010eb0:	200004d0 	.word	0x200004d0
 8010eb4:	20000538 	.word	0x20000538
 8010eb8:	200005a0 	.word	0x200005a0

08010ebc <global_stdio_init.part.0>:
 8010ebc:	b510      	push	{r4, lr}
 8010ebe:	4b09      	ldr	r3, [pc, #36]	@ (8010ee4 <global_stdio_init.part.0+0x28>)
 8010ec0:	4a09      	ldr	r2, [pc, #36]	@ (8010ee8 <global_stdio_init.part.0+0x2c>)
 8010ec2:	2104      	movs	r1, #4
 8010ec4:	601a      	str	r2, [r3, #0]
 8010ec6:	4809      	ldr	r0, [pc, #36]	@ (8010eec <global_stdio_init.part.0+0x30>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	f7ff ff95 	bl	8010df8 <std>
 8010ece:	2201      	movs	r2, #1
 8010ed0:	2109      	movs	r1, #9
 8010ed2:	4807      	ldr	r0, [pc, #28]	@ (8010ef0 <global_stdio_init.part.0+0x34>)
 8010ed4:	f7ff ff90 	bl	8010df8 <std>
 8010ed8:	2202      	movs	r2, #2
 8010eda:	2112      	movs	r1, #18
 8010edc:	4805      	ldr	r0, [pc, #20]	@ (8010ef4 <global_stdio_init.part.0+0x38>)
 8010ede:	f7ff ff8b 	bl	8010df8 <std>
 8010ee2:	bd10      	pop	{r4, pc}
 8010ee4:	20000608 	.word	0x20000608
 8010ee8:	08010e65 	.word	0x08010e65
 8010eec:	200004d0 	.word	0x200004d0
 8010ef0:	20000538 	.word	0x20000538
 8010ef4:	200005a0 	.word	0x200005a0

08010ef8 <__sfp_lock_acquire>:
 8010ef8:	b510      	push	{r4, lr}
 8010efa:	4802      	ldr	r0, [pc, #8]	@ (8010f04 <__sfp_lock_acquire+0xc>)
 8010efc:	f000 f9b9 	bl	8011272 <__retarget_lock_acquire_recursive>
 8010f00:	bd10      	pop	{r4, pc}
 8010f02:	46c0      	nop			@ (mov r8, r8)
 8010f04:	20000611 	.word	0x20000611

08010f08 <__sfp_lock_release>:
 8010f08:	b510      	push	{r4, lr}
 8010f0a:	4802      	ldr	r0, [pc, #8]	@ (8010f14 <__sfp_lock_release+0xc>)
 8010f0c:	f000 f9b2 	bl	8011274 <__retarget_lock_release_recursive>
 8010f10:	bd10      	pop	{r4, pc}
 8010f12:	46c0      	nop			@ (mov r8, r8)
 8010f14:	20000611 	.word	0x20000611

08010f18 <__sinit>:
 8010f18:	b510      	push	{r4, lr}
 8010f1a:	0004      	movs	r4, r0
 8010f1c:	f7ff ffec 	bl	8010ef8 <__sfp_lock_acquire>
 8010f20:	6a23      	ldr	r3, [r4, #32]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d002      	beq.n	8010f2c <__sinit+0x14>
 8010f26:	f7ff ffef 	bl	8010f08 <__sfp_lock_release>
 8010f2a:	bd10      	pop	{r4, pc}
 8010f2c:	4b04      	ldr	r3, [pc, #16]	@ (8010f40 <__sinit+0x28>)
 8010f2e:	6223      	str	r3, [r4, #32]
 8010f30:	4b04      	ldr	r3, [pc, #16]	@ (8010f44 <__sinit+0x2c>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1f6      	bne.n	8010f26 <__sinit+0xe>
 8010f38:	f7ff ffc0 	bl	8010ebc <global_stdio_init.part.0>
 8010f3c:	e7f3      	b.n	8010f26 <__sinit+0xe>
 8010f3e:	46c0      	nop			@ (mov r8, r8)
 8010f40:	08010e81 	.word	0x08010e81
 8010f44:	20000608 	.word	0x20000608

08010f48 <_fwalk_sglue>:
 8010f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f4a:	0014      	movs	r4, r2
 8010f4c:	2600      	movs	r6, #0
 8010f4e:	9000      	str	r0, [sp, #0]
 8010f50:	9101      	str	r1, [sp, #4]
 8010f52:	68a5      	ldr	r5, [r4, #8]
 8010f54:	6867      	ldr	r7, [r4, #4]
 8010f56:	3f01      	subs	r7, #1
 8010f58:	d504      	bpl.n	8010f64 <_fwalk_sglue+0x1c>
 8010f5a:	6824      	ldr	r4, [r4, #0]
 8010f5c:	2c00      	cmp	r4, #0
 8010f5e:	d1f8      	bne.n	8010f52 <_fwalk_sglue+0xa>
 8010f60:	0030      	movs	r0, r6
 8010f62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f64:	89ab      	ldrh	r3, [r5, #12]
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d908      	bls.n	8010f7c <_fwalk_sglue+0x34>
 8010f6a:	220e      	movs	r2, #14
 8010f6c:	5eab      	ldrsh	r3, [r5, r2]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	d004      	beq.n	8010f7c <_fwalk_sglue+0x34>
 8010f72:	0029      	movs	r1, r5
 8010f74:	9800      	ldr	r0, [sp, #0]
 8010f76:	9b01      	ldr	r3, [sp, #4]
 8010f78:	4798      	blx	r3
 8010f7a:	4306      	orrs	r6, r0
 8010f7c:	3568      	adds	r5, #104	@ 0x68
 8010f7e:	e7ea      	b.n	8010f56 <_fwalk_sglue+0xe>

08010f80 <sniprintf>:
 8010f80:	b40c      	push	{r2, r3}
 8010f82:	b530      	push	{r4, r5, lr}
 8010f84:	4b18      	ldr	r3, [pc, #96]	@ (8010fe8 <sniprintf+0x68>)
 8010f86:	000c      	movs	r4, r1
 8010f88:	681d      	ldr	r5, [r3, #0]
 8010f8a:	b09d      	sub	sp, #116	@ 0x74
 8010f8c:	2900      	cmp	r1, #0
 8010f8e:	da08      	bge.n	8010fa2 <sniprintf+0x22>
 8010f90:	238b      	movs	r3, #139	@ 0x8b
 8010f92:	2001      	movs	r0, #1
 8010f94:	602b      	str	r3, [r5, #0]
 8010f96:	4240      	negs	r0, r0
 8010f98:	b01d      	add	sp, #116	@ 0x74
 8010f9a:	bc30      	pop	{r4, r5}
 8010f9c:	bc08      	pop	{r3}
 8010f9e:	b002      	add	sp, #8
 8010fa0:	4718      	bx	r3
 8010fa2:	2382      	movs	r3, #130	@ 0x82
 8010fa4:	466a      	mov	r2, sp
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	8293      	strh	r3, [r2, #20]
 8010faa:	2300      	movs	r3, #0
 8010fac:	9002      	str	r0, [sp, #8]
 8010fae:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010fb0:	9006      	str	r0, [sp, #24]
 8010fb2:	4299      	cmp	r1, r3
 8010fb4:	d000      	beq.n	8010fb8 <sniprintf+0x38>
 8010fb6:	1e4b      	subs	r3, r1, #1
 8010fb8:	9304      	str	r3, [sp, #16]
 8010fba:	9307      	str	r3, [sp, #28]
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	466a      	mov	r2, sp
 8010fc0:	425b      	negs	r3, r3
 8010fc2:	82d3      	strh	r3, [r2, #22]
 8010fc4:	0028      	movs	r0, r5
 8010fc6:	ab21      	add	r3, sp, #132	@ 0x84
 8010fc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010fca:	a902      	add	r1, sp, #8
 8010fcc:	9301      	str	r3, [sp, #4]
 8010fce:	f002 f9a3 	bl	8013318 <_svfiprintf_r>
 8010fd2:	1c43      	adds	r3, r0, #1
 8010fd4:	da01      	bge.n	8010fda <sniprintf+0x5a>
 8010fd6:	238b      	movs	r3, #139	@ 0x8b
 8010fd8:	602b      	str	r3, [r5, #0]
 8010fda:	2c00      	cmp	r4, #0
 8010fdc:	d0dc      	beq.n	8010f98 <sniprintf+0x18>
 8010fde:	2200      	movs	r2, #0
 8010fe0:	9b02      	ldr	r3, [sp, #8]
 8010fe2:	701a      	strb	r2, [r3, #0]
 8010fe4:	e7d8      	b.n	8010f98 <sniprintf+0x18>
 8010fe6:	46c0      	nop			@ (mov r8, r8)
 8010fe8:	200001a4 	.word	0x200001a4

08010fec <__sread>:
 8010fec:	b570      	push	{r4, r5, r6, lr}
 8010fee:	000c      	movs	r4, r1
 8010ff0:	250e      	movs	r5, #14
 8010ff2:	5f49      	ldrsh	r1, [r1, r5]
 8010ff4:	f000 f8ea 	bl	80111cc <_read_r>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	db03      	blt.n	8011004 <__sread+0x18>
 8010ffc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8010ffe:	181b      	adds	r3, r3, r0
 8011000:	6563      	str	r3, [r4, #84]	@ 0x54
 8011002:	bd70      	pop	{r4, r5, r6, pc}
 8011004:	89a3      	ldrh	r3, [r4, #12]
 8011006:	4a02      	ldr	r2, [pc, #8]	@ (8011010 <__sread+0x24>)
 8011008:	4013      	ands	r3, r2
 801100a:	81a3      	strh	r3, [r4, #12]
 801100c:	e7f9      	b.n	8011002 <__sread+0x16>
 801100e:	46c0      	nop			@ (mov r8, r8)
 8011010:	ffffefff 	.word	0xffffefff

08011014 <__swrite>:
 8011014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011016:	001f      	movs	r7, r3
 8011018:	898b      	ldrh	r3, [r1, #12]
 801101a:	0005      	movs	r5, r0
 801101c:	000c      	movs	r4, r1
 801101e:	0016      	movs	r6, r2
 8011020:	05db      	lsls	r3, r3, #23
 8011022:	d505      	bpl.n	8011030 <__swrite+0x1c>
 8011024:	230e      	movs	r3, #14
 8011026:	5ec9      	ldrsh	r1, [r1, r3]
 8011028:	2200      	movs	r2, #0
 801102a:	2302      	movs	r3, #2
 801102c:	f000 f8ba 	bl	80111a4 <_lseek_r>
 8011030:	89a3      	ldrh	r3, [r4, #12]
 8011032:	4a05      	ldr	r2, [pc, #20]	@ (8011048 <__swrite+0x34>)
 8011034:	0028      	movs	r0, r5
 8011036:	4013      	ands	r3, r2
 8011038:	81a3      	strh	r3, [r4, #12]
 801103a:	0032      	movs	r2, r6
 801103c:	230e      	movs	r3, #14
 801103e:	5ee1      	ldrsh	r1, [r4, r3]
 8011040:	003b      	movs	r3, r7
 8011042:	f000 f8d7 	bl	80111f4 <_write_r>
 8011046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011048:	ffffefff 	.word	0xffffefff

0801104c <__sseek>:
 801104c:	b570      	push	{r4, r5, r6, lr}
 801104e:	000c      	movs	r4, r1
 8011050:	250e      	movs	r5, #14
 8011052:	5f49      	ldrsh	r1, [r1, r5]
 8011054:	f000 f8a6 	bl	80111a4 <_lseek_r>
 8011058:	89a3      	ldrh	r3, [r4, #12]
 801105a:	1c42      	adds	r2, r0, #1
 801105c:	d103      	bne.n	8011066 <__sseek+0x1a>
 801105e:	4a05      	ldr	r2, [pc, #20]	@ (8011074 <__sseek+0x28>)
 8011060:	4013      	ands	r3, r2
 8011062:	81a3      	strh	r3, [r4, #12]
 8011064:	bd70      	pop	{r4, r5, r6, pc}
 8011066:	2280      	movs	r2, #128	@ 0x80
 8011068:	0152      	lsls	r2, r2, #5
 801106a:	4313      	orrs	r3, r2
 801106c:	81a3      	strh	r3, [r4, #12]
 801106e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011070:	e7f8      	b.n	8011064 <__sseek+0x18>
 8011072:	46c0      	nop			@ (mov r8, r8)
 8011074:	ffffefff 	.word	0xffffefff

08011078 <__sclose>:
 8011078:	b510      	push	{r4, lr}
 801107a:	230e      	movs	r3, #14
 801107c:	5ec9      	ldrsh	r1, [r1, r3]
 801107e:	f000 f87f 	bl	8011180 <_close_r>
 8011082:	bd10      	pop	{r4, pc}

08011084 <memset>:
 8011084:	0003      	movs	r3, r0
 8011086:	1882      	adds	r2, r0, r2
 8011088:	4293      	cmp	r3, r2
 801108a:	d100      	bne.n	801108e <memset+0xa>
 801108c:	4770      	bx	lr
 801108e:	7019      	strb	r1, [r3, #0]
 8011090:	3301      	adds	r3, #1
 8011092:	e7f9      	b.n	8011088 <memset+0x4>

08011094 <strncmp>:
 8011094:	b530      	push	{r4, r5, lr}
 8011096:	0005      	movs	r5, r0
 8011098:	1e10      	subs	r0, r2, #0
 801109a:	d00b      	beq.n	80110b4 <strncmp+0x20>
 801109c:	2400      	movs	r4, #0
 801109e:	3a01      	subs	r2, #1
 80110a0:	5d2b      	ldrb	r3, [r5, r4]
 80110a2:	5d08      	ldrb	r0, [r1, r4]
 80110a4:	4283      	cmp	r3, r0
 80110a6:	d104      	bne.n	80110b2 <strncmp+0x1e>
 80110a8:	4294      	cmp	r4, r2
 80110aa:	d002      	beq.n	80110b2 <strncmp+0x1e>
 80110ac:	3401      	adds	r4, #1
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1f6      	bne.n	80110a0 <strncmp+0xc>
 80110b2:	1a18      	subs	r0, r3, r0
 80110b4:	bd30      	pop	{r4, r5, pc}
	...

080110b8 <strtok>:
 80110b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ba:	4b16      	ldr	r3, [pc, #88]	@ (8011114 <strtok+0x5c>)
 80110bc:	0005      	movs	r5, r0
 80110be:	681f      	ldr	r7, [r3, #0]
 80110c0:	000e      	movs	r6, r1
 80110c2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80110c4:	2c00      	cmp	r4, #0
 80110c6:	d11d      	bne.n	8011104 <strtok+0x4c>
 80110c8:	2050      	movs	r0, #80	@ 0x50
 80110ca:	f001 fb27 	bl	801271c <malloc>
 80110ce:	1e02      	subs	r2, r0, #0
 80110d0:	6478      	str	r0, [r7, #68]	@ 0x44
 80110d2:	d104      	bne.n	80110de <strtok+0x26>
 80110d4:	215b      	movs	r1, #91	@ 0x5b
 80110d6:	4b10      	ldr	r3, [pc, #64]	@ (8011118 <strtok+0x60>)
 80110d8:	4810      	ldr	r0, [pc, #64]	@ (801111c <strtok+0x64>)
 80110da:	f000 f8e7 	bl	80112ac <__assert_func>
 80110de:	6004      	str	r4, [r0, #0]
 80110e0:	6044      	str	r4, [r0, #4]
 80110e2:	6084      	str	r4, [r0, #8]
 80110e4:	60c4      	str	r4, [r0, #12]
 80110e6:	6104      	str	r4, [r0, #16]
 80110e8:	6144      	str	r4, [r0, #20]
 80110ea:	6184      	str	r4, [r0, #24]
 80110ec:	6284      	str	r4, [r0, #40]	@ 0x28
 80110ee:	62c4      	str	r4, [r0, #44]	@ 0x2c
 80110f0:	6304      	str	r4, [r0, #48]	@ 0x30
 80110f2:	6344      	str	r4, [r0, #52]	@ 0x34
 80110f4:	6384      	str	r4, [r0, #56]	@ 0x38
 80110f6:	63c4      	str	r4, [r0, #60]	@ 0x3c
 80110f8:	6404      	str	r4, [r0, #64]	@ 0x40
 80110fa:	6444      	str	r4, [r0, #68]	@ 0x44
 80110fc:	6484      	str	r4, [r0, #72]	@ 0x48
 80110fe:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8011100:	7704      	strb	r4, [r0, #28]
 8011102:	6244      	str	r4, [r0, #36]	@ 0x24
 8011104:	0031      	movs	r1, r6
 8011106:	0028      	movs	r0, r5
 8011108:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801110a:	2301      	movs	r3, #1
 801110c:	f000 f808 	bl	8011120 <__strtok_r>
 8011110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011112:	46c0      	nop			@ (mov r8, r8)
 8011114:	200001a4 	.word	0x200001a4
 8011118:	0801646a 	.word	0x0801646a
 801111c:	08016481 	.word	0x08016481

08011120 <__strtok_r>:
 8011120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011122:	1e04      	subs	r4, r0, #0
 8011124:	d102      	bne.n	801112c <__strtok_r+0xc>
 8011126:	6814      	ldr	r4, [r2, #0]
 8011128:	2c00      	cmp	r4, #0
 801112a:	d009      	beq.n	8011140 <__strtok_r+0x20>
 801112c:	0020      	movs	r0, r4
 801112e:	000e      	movs	r6, r1
 8011130:	7805      	ldrb	r5, [r0, #0]
 8011132:	3401      	adds	r4, #1
 8011134:	7837      	ldrb	r7, [r6, #0]
 8011136:	2f00      	cmp	r7, #0
 8011138:	d104      	bne.n	8011144 <__strtok_r+0x24>
 801113a:	2d00      	cmp	r5, #0
 801113c:	d10d      	bne.n	801115a <__strtok_r+0x3a>
 801113e:	6015      	str	r5, [r2, #0]
 8011140:	2000      	movs	r0, #0
 8011142:	e006      	b.n	8011152 <__strtok_r+0x32>
 8011144:	3601      	adds	r6, #1
 8011146:	42bd      	cmp	r5, r7
 8011148:	d1f4      	bne.n	8011134 <__strtok_r+0x14>
 801114a:	2b00      	cmp	r3, #0
 801114c:	d1ee      	bne.n	801112c <__strtok_r+0xc>
 801114e:	6014      	str	r4, [r2, #0]
 8011150:	7003      	strb	r3, [r0, #0]
 8011152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011154:	3301      	adds	r3, #1
 8011156:	2d00      	cmp	r5, #0
 8011158:	d103      	bne.n	8011162 <__strtok_r+0x42>
 801115a:	0026      	movs	r6, r4
 801115c:	000b      	movs	r3, r1
 801115e:	7837      	ldrb	r7, [r6, #0]
 8011160:	3401      	adds	r4, #1
 8011162:	781d      	ldrb	r5, [r3, #0]
 8011164:	42af      	cmp	r7, r5
 8011166:	d1f5      	bne.n	8011154 <__strtok_r+0x34>
 8011168:	2300      	movs	r3, #0
 801116a:	0019      	movs	r1, r3
 801116c:	429f      	cmp	r7, r3
 801116e:	d001      	beq.n	8011174 <__strtok_r+0x54>
 8011170:	0023      	movs	r3, r4
 8011172:	7031      	strb	r1, [r6, #0]
 8011174:	6013      	str	r3, [r2, #0]
 8011176:	e7ec      	b.n	8011152 <__strtok_r+0x32>

08011178 <_localeconv_r>:
 8011178:	4800      	ldr	r0, [pc, #0]	@ (801117c <_localeconv_r+0x4>)
 801117a:	4770      	bx	lr
 801117c:	20000128 	.word	0x20000128

08011180 <_close_r>:
 8011180:	2300      	movs	r3, #0
 8011182:	b570      	push	{r4, r5, r6, lr}
 8011184:	4d06      	ldr	r5, [pc, #24]	@ (80111a0 <_close_r+0x20>)
 8011186:	0004      	movs	r4, r0
 8011188:	0008      	movs	r0, r1
 801118a:	602b      	str	r3, [r5, #0]
 801118c:	f7fa fab2 	bl	800b6f4 <_close>
 8011190:	1c43      	adds	r3, r0, #1
 8011192:	d103      	bne.n	801119c <_close_r+0x1c>
 8011194:	682b      	ldr	r3, [r5, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d000      	beq.n	801119c <_close_r+0x1c>
 801119a:	6023      	str	r3, [r4, #0]
 801119c:	bd70      	pop	{r4, r5, r6, pc}
 801119e:	46c0      	nop			@ (mov r8, r8)
 80111a0:	2000060c 	.word	0x2000060c

080111a4 <_lseek_r>:
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	0004      	movs	r4, r0
 80111a8:	0008      	movs	r0, r1
 80111aa:	0011      	movs	r1, r2
 80111ac:	001a      	movs	r2, r3
 80111ae:	2300      	movs	r3, #0
 80111b0:	4d05      	ldr	r5, [pc, #20]	@ (80111c8 <_lseek_r+0x24>)
 80111b2:	602b      	str	r3, [r5, #0]
 80111b4:	f7fa fabf 	bl	800b736 <_lseek>
 80111b8:	1c43      	adds	r3, r0, #1
 80111ba:	d103      	bne.n	80111c4 <_lseek_r+0x20>
 80111bc:	682b      	ldr	r3, [r5, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d000      	beq.n	80111c4 <_lseek_r+0x20>
 80111c2:	6023      	str	r3, [r4, #0]
 80111c4:	bd70      	pop	{r4, r5, r6, pc}
 80111c6:	46c0      	nop			@ (mov r8, r8)
 80111c8:	2000060c 	.word	0x2000060c

080111cc <_read_r>:
 80111cc:	b570      	push	{r4, r5, r6, lr}
 80111ce:	0004      	movs	r4, r0
 80111d0:	0008      	movs	r0, r1
 80111d2:	0011      	movs	r1, r2
 80111d4:	001a      	movs	r2, r3
 80111d6:	2300      	movs	r3, #0
 80111d8:	4d05      	ldr	r5, [pc, #20]	@ (80111f0 <_read_r+0x24>)
 80111da:	602b      	str	r3, [r5, #0]
 80111dc:	f7fa fa51 	bl	800b682 <_read>
 80111e0:	1c43      	adds	r3, r0, #1
 80111e2:	d103      	bne.n	80111ec <_read_r+0x20>
 80111e4:	682b      	ldr	r3, [r5, #0]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d000      	beq.n	80111ec <_read_r+0x20>
 80111ea:	6023      	str	r3, [r4, #0]
 80111ec:	bd70      	pop	{r4, r5, r6, pc}
 80111ee:	46c0      	nop			@ (mov r8, r8)
 80111f0:	2000060c 	.word	0x2000060c

080111f4 <_write_r>:
 80111f4:	b570      	push	{r4, r5, r6, lr}
 80111f6:	0004      	movs	r4, r0
 80111f8:	0008      	movs	r0, r1
 80111fa:	0011      	movs	r1, r2
 80111fc:	001a      	movs	r2, r3
 80111fe:	2300      	movs	r3, #0
 8011200:	4d05      	ldr	r5, [pc, #20]	@ (8011218 <_write_r+0x24>)
 8011202:	602b      	str	r3, [r5, #0]
 8011204:	f7fa fa5a 	bl	800b6bc <_write>
 8011208:	1c43      	adds	r3, r0, #1
 801120a:	d103      	bne.n	8011214 <_write_r+0x20>
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d000      	beq.n	8011214 <_write_r+0x20>
 8011212:	6023      	str	r3, [r4, #0]
 8011214:	bd70      	pop	{r4, r5, r6, pc}
 8011216:	46c0      	nop			@ (mov r8, r8)
 8011218:	2000060c 	.word	0x2000060c

0801121c <__errno>:
 801121c:	4b01      	ldr	r3, [pc, #4]	@ (8011224 <__errno+0x8>)
 801121e:	6818      	ldr	r0, [r3, #0]
 8011220:	4770      	bx	lr
 8011222:	46c0      	nop			@ (mov r8, r8)
 8011224:	200001a4 	.word	0x200001a4

08011228 <__libc_init_array>:
 8011228:	b570      	push	{r4, r5, r6, lr}
 801122a:	2600      	movs	r6, #0
 801122c:	4c0c      	ldr	r4, [pc, #48]	@ (8011260 <__libc_init_array+0x38>)
 801122e:	4d0d      	ldr	r5, [pc, #52]	@ (8011264 <__libc_init_array+0x3c>)
 8011230:	1b64      	subs	r4, r4, r5
 8011232:	10a4      	asrs	r4, r4, #2
 8011234:	42a6      	cmp	r6, r4
 8011236:	d109      	bne.n	801124c <__libc_init_array+0x24>
 8011238:	2600      	movs	r6, #0
 801123a:	f002 fd7b 	bl	8013d34 <_init>
 801123e:	4c0a      	ldr	r4, [pc, #40]	@ (8011268 <__libc_init_array+0x40>)
 8011240:	4d0a      	ldr	r5, [pc, #40]	@ (801126c <__libc_init_array+0x44>)
 8011242:	1b64      	subs	r4, r4, r5
 8011244:	10a4      	asrs	r4, r4, #2
 8011246:	42a6      	cmp	r6, r4
 8011248:	d105      	bne.n	8011256 <__libc_init_array+0x2e>
 801124a:	bd70      	pop	{r4, r5, r6, pc}
 801124c:	00b3      	lsls	r3, r6, #2
 801124e:	58eb      	ldr	r3, [r5, r3]
 8011250:	4798      	blx	r3
 8011252:	3601      	adds	r6, #1
 8011254:	e7ee      	b.n	8011234 <__libc_init_array+0xc>
 8011256:	00b3      	lsls	r3, r6, #2
 8011258:	58eb      	ldr	r3, [r5, r3]
 801125a:	4798      	blx	r3
 801125c:	3601      	adds	r6, #1
 801125e:	e7f2      	b.n	8011246 <__libc_init_array+0x1e>
 8011260:	080168bc 	.word	0x080168bc
 8011264:	080168bc 	.word	0x080168bc
 8011268:	080168c0 	.word	0x080168c0
 801126c:	080168bc 	.word	0x080168bc

08011270 <__retarget_lock_init_recursive>:
 8011270:	4770      	bx	lr

08011272 <__retarget_lock_acquire_recursive>:
 8011272:	4770      	bx	lr

08011274 <__retarget_lock_release_recursive>:
 8011274:	4770      	bx	lr

08011276 <memchr>:
 8011276:	b2c9      	uxtb	r1, r1
 8011278:	1882      	adds	r2, r0, r2
 801127a:	4290      	cmp	r0, r2
 801127c:	d101      	bne.n	8011282 <memchr+0xc>
 801127e:	2000      	movs	r0, #0
 8011280:	4770      	bx	lr
 8011282:	7803      	ldrb	r3, [r0, #0]
 8011284:	428b      	cmp	r3, r1
 8011286:	d0fb      	beq.n	8011280 <memchr+0xa>
 8011288:	3001      	adds	r0, #1
 801128a:	e7f6      	b.n	801127a <memchr+0x4>

0801128c <memcpy>:
 801128c:	2300      	movs	r3, #0
 801128e:	b510      	push	{r4, lr}
 8011290:	429a      	cmp	r2, r3
 8011292:	d100      	bne.n	8011296 <memcpy+0xa>
 8011294:	bd10      	pop	{r4, pc}
 8011296:	5ccc      	ldrb	r4, [r1, r3]
 8011298:	54c4      	strb	r4, [r0, r3]
 801129a:	3301      	adds	r3, #1
 801129c:	e7f8      	b.n	8011290 <memcpy+0x4>
	...

080112a0 <nan>:
 80112a0:	2000      	movs	r0, #0
 80112a2:	4901      	ldr	r1, [pc, #4]	@ (80112a8 <nan+0x8>)
 80112a4:	4770      	bx	lr
 80112a6:	46c0      	nop			@ (mov r8, r8)
 80112a8:	7ff80000 	.word	0x7ff80000

080112ac <__assert_func>:
 80112ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80112ae:	0014      	movs	r4, r2
 80112b0:	001a      	movs	r2, r3
 80112b2:	4b09      	ldr	r3, [pc, #36]	@ (80112d8 <__assert_func+0x2c>)
 80112b4:	0005      	movs	r5, r0
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	000e      	movs	r6, r1
 80112ba:	68d8      	ldr	r0, [r3, #12]
 80112bc:	4b07      	ldr	r3, [pc, #28]	@ (80112dc <__assert_func+0x30>)
 80112be:	2c00      	cmp	r4, #0
 80112c0:	d101      	bne.n	80112c6 <__assert_func+0x1a>
 80112c2:	4b07      	ldr	r3, [pc, #28]	@ (80112e0 <__assert_func+0x34>)
 80112c4:	001c      	movs	r4, r3
 80112c6:	4907      	ldr	r1, [pc, #28]	@ (80112e4 <__assert_func+0x38>)
 80112c8:	9301      	str	r3, [sp, #4]
 80112ca:	9402      	str	r4, [sp, #8]
 80112cc:	002b      	movs	r3, r5
 80112ce:	9600      	str	r6, [sp, #0]
 80112d0:	f002 f9d2 	bl	8013678 <fiprintf>
 80112d4:	f002 fa04 	bl	80136e0 <abort>
 80112d8:	200001a4 	.word	0x200001a4
 80112dc:	080164e3 	.word	0x080164e3
 80112e0:	0801651e 	.word	0x0801651e
 80112e4:	080164f0 	.word	0x080164f0

080112e8 <quorem>:
 80112e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112ea:	6903      	ldr	r3, [r0, #16]
 80112ec:	690c      	ldr	r4, [r1, #16]
 80112ee:	b089      	sub	sp, #36	@ 0x24
 80112f0:	9003      	str	r0, [sp, #12]
 80112f2:	9106      	str	r1, [sp, #24]
 80112f4:	2000      	movs	r0, #0
 80112f6:	42a3      	cmp	r3, r4
 80112f8:	db63      	blt.n	80113c2 <quorem+0xda>
 80112fa:	000b      	movs	r3, r1
 80112fc:	3c01      	subs	r4, #1
 80112fe:	3314      	adds	r3, #20
 8011300:	00a5      	lsls	r5, r4, #2
 8011302:	9304      	str	r3, [sp, #16]
 8011304:	195b      	adds	r3, r3, r5
 8011306:	9305      	str	r3, [sp, #20]
 8011308:	9b03      	ldr	r3, [sp, #12]
 801130a:	3314      	adds	r3, #20
 801130c:	9301      	str	r3, [sp, #4]
 801130e:	195d      	adds	r5, r3, r5
 8011310:	9b05      	ldr	r3, [sp, #20]
 8011312:	682f      	ldr	r7, [r5, #0]
 8011314:	681e      	ldr	r6, [r3, #0]
 8011316:	0038      	movs	r0, r7
 8011318:	3601      	adds	r6, #1
 801131a:	0031      	movs	r1, r6
 801131c:	f7ee ff18 	bl	8000150 <__udivsi3>
 8011320:	9002      	str	r0, [sp, #8]
 8011322:	42b7      	cmp	r7, r6
 8011324:	d327      	bcc.n	8011376 <quorem+0x8e>
 8011326:	9b04      	ldr	r3, [sp, #16]
 8011328:	2700      	movs	r7, #0
 801132a:	469c      	mov	ip, r3
 801132c:	9e01      	ldr	r6, [sp, #4]
 801132e:	9707      	str	r7, [sp, #28]
 8011330:	4662      	mov	r2, ip
 8011332:	ca08      	ldmia	r2!, {r3}
 8011334:	6830      	ldr	r0, [r6, #0]
 8011336:	4694      	mov	ip, r2
 8011338:	9a02      	ldr	r2, [sp, #8]
 801133a:	b299      	uxth	r1, r3
 801133c:	4351      	muls	r1, r2
 801133e:	0c1b      	lsrs	r3, r3, #16
 8011340:	4353      	muls	r3, r2
 8011342:	19c9      	adds	r1, r1, r7
 8011344:	0c0a      	lsrs	r2, r1, #16
 8011346:	189b      	adds	r3, r3, r2
 8011348:	b289      	uxth	r1, r1
 801134a:	b282      	uxth	r2, r0
 801134c:	1a52      	subs	r2, r2, r1
 801134e:	9907      	ldr	r1, [sp, #28]
 8011350:	0c1f      	lsrs	r7, r3, #16
 8011352:	1852      	adds	r2, r2, r1
 8011354:	0c00      	lsrs	r0, r0, #16
 8011356:	b29b      	uxth	r3, r3
 8011358:	1411      	asrs	r1, r2, #16
 801135a:	1ac3      	subs	r3, r0, r3
 801135c:	185b      	adds	r3, r3, r1
 801135e:	1419      	asrs	r1, r3, #16
 8011360:	b292      	uxth	r2, r2
 8011362:	041b      	lsls	r3, r3, #16
 8011364:	431a      	orrs	r2, r3
 8011366:	9b05      	ldr	r3, [sp, #20]
 8011368:	9107      	str	r1, [sp, #28]
 801136a:	c604      	stmia	r6!, {r2}
 801136c:	4563      	cmp	r3, ip
 801136e:	d2df      	bcs.n	8011330 <quorem+0x48>
 8011370:	682b      	ldr	r3, [r5, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d02b      	beq.n	80113ce <quorem+0xe6>
 8011376:	9906      	ldr	r1, [sp, #24]
 8011378:	9803      	ldr	r0, [sp, #12]
 801137a:	f001 fd6f 	bl	8012e5c <__mcmp>
 801137e:	2800      	cmp	r0, #0
 8011380:	db1e      	blt.n	80113c0 <quorem+0xd8>
 8011382:	2600      	movs	r6, #0
 8011384:	9d01      	ldr	r5, [sp, #4]
 8011386:	9904      	ldr	r1, [sp, #16]
 8011388:	c901      	ldmia	r1!, {r0}
 801138a:	682b      	ldr	r3, [r5, #0]
 801138c:	b287      	uxth	r7, r0
 801138e:	b29a      	uxth	r2, r3
 8011390:	1bd2      	subs	r2, r2, r7
 8011392:	1992      	adds	r2, r2, r6
 8011394:	0c00      	lsrs	r0, r0, #16
 8011396:	0c1b      	lsrs	r3, r3, #16
 8011398:	1a1b      	subs	r3, r3, r0
 801139a:	1410      	asrs	r0, r2, #16
 801139c:	181b      	adds	r3, r3, r0
 801139e:	141e      	asrs	r6, r3, #16
 80113a0:	b292      	uxth	r2, r2
 80113a2:	041b      	lsls	r3, r3, #16
 80113a4:	431a      	orrs	r2, r3
 80113a6:	9b05      	ldr	r3, [sp, #20]
 80113a8:	c504      	stmia	r5!, {r2}
 80113aa:	428b      	cmp	r3, r1
 80113ac:	d2ec      	bcs.n	8011388 <quorem+0xa0>
 80113ae:	9a01      	ldr	r2, [sp, #4]
 80113b0:	00a3      	lsls	r3, r4, #2
 80113b2:	18d3      	adds	r3, r2, r3
 80113b4:	681a      	ldr	r2, [r3, #0]
 80113b6:	2a00      	cmp	r2, #0
 80113b8:	d014      	beq.n	80113e4 <quorem+0xfc>
 80113ba:	9b02      	ldr	r3, [sp, #8]
 80113bc:	3301      	adds	r3, #1
 80113be:	9302      	str	r3, [sp, #8]
 80113c0:	9802      	ldr	r0, [sp, #8]
 80113c2:	b009      	add	sp, #36	@ 0x24
 80113c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113c6:	682b      	ldr	r3, [r5, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d104      	bne.n	80113d6 <quorem+0xee>
 80113cc:	3c01      	subs	r4, #1
 80113ce:	9b01      	ldr	r3, [sp, #4]
 80113d0:	3d04      	subs	r5, #4
 80113d2:	42ab      	cmp	r3, r5
 80113d4:	d3f7      	bcc.n	80113c6 <quorem+0xde>
 80113d6:	9b03      	ldr	r3, [sp, #12]
 80113d8:	611c      	str	r4, [r3, #16]
 80113da:	e7cc      	b.n	8011376 <quorem+0x8e>
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	2a00      	cmp	r2, #0
 80113e0:	d104      	bne.n	80113ec <quorem+0x104>
 80113e2:	3c01      	subs	r4, #1
 80113e4:	9a01      	ldr	r2, [sp, #4]
 80113e6:	3b04      	subs	r3, #4
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d3f7      	bcc.n	80113dc <quorem+0xf4>
 80113ec:	9b03      	ldr	r3, [sp, #12]
 80113ee:	611c      	str	r4, [r3, #16]
 80113f0:	e7e3      	b.n	80113ba <quorem+0xd2>
	...

080113f4 <_dtoa_r>:
 80113f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113f6:	0014      	movs	r4, r2
 80113f8:	001d      	movs	r5, r3
 80113fa:	69c6      	ldr	r6, [r0, #28]
 80113fc:	b09d      	sub	sp, #116	@ 0x74
 80113fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8011400:	950b      	str	r5, [sp, #44]	@ 0x2c
 8011402:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8011404:	9003      	str	r0, [sp, #12]
 8011406:	2e00      	cmp	r6, #0
 8011408:	d10f      	bne.n	801142a <_dtoa_r+0x36>
 801140a:	2010      	movs	r0, #16
 801140c:	f001 f986 	bl	801271c <malloc>
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	1e02      	subs	r2, r0, #0
 8011414:	61d8      	str	r0, [r3, #28]
 8011416:	d104      	bne.n	8011422 <_dtoa_r+0x2e>
 8011418:	21ef      	movs	r1, #239	@ 0xef
 801141a:	4bc7      	ldr	r3, [pc, #796]	@ (8011738 <_dtoa_r+0x344>)
 801141c:	48c7      	ldr	r0, [pc, #796]	@ (801173c <_dtoa_r+0x348>)
 801141e:	f7ff ff45 	bl	80112ac <__assert_func>
 8011422:	6046      	str	r6, [r0, #4]
 8011424:	6086      	str	r6, [r0, #8]
 8011426:	6006      	str	r6, [r0, #0]
 8011428:	60c6      	str	r6, [r0, #12]
 801142a:	9b03      	ldr	r3, [sp, #12]
 801142c:	69db      	ldr	r3, [r3, #28]
 801142e:	6819      	ldr	r1, [r3, #0]
 8011430:	2900      	cmp	r1, #0
 8011432:	d00b      	beq.n	801144c <_dtoa_r+0x58>
 8011434:	685a      	ldr	r2, [r3, #4]
 8011436:	2301      	movs	r3, #1
 8011438:	4093      	lsls	r3, r2
 801143a:	604a      	str	r2, [r1, #4]
 801143c:	608b      	str	r3, [r1, #8]
 801143e:	9803      	ldr	r0, [sp, #12]
 8011440:	f001 fa7e 	bl	8012940 <_Bfree>
 8011444:	2200      	movs	r2, #0
 8011446:	9b03      	ldr	r3, [sp, #12]
 8011448:	69db      	ldr	r3, [r3, #28]
 801144a:	601a      	str	r2, [r3, #0]
 801144c:	2d00      	cmp	r5, #0
 801144e:	da1e      	bge.n	801148e <_dtoa_r+0x9a>
 8011450:	2301      	movs	r3, #1
 8011452:	603b      	str	r3, [r7, #0]
 8011454:	006b      	lsls	r3, r5, #1
 8011456:	085b      	lsrs	r3, r3, #1
 8011458:	930b      	str	r3, [sp, #44]	@ 0x2c
 801145a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801145c:	4bb8      	ldr	r3, [pc, #736]	@ (8011740 <_dtoa_r+0x34c>)
 801145e:	4ab8      	ldr	r2, [pc, #736]	@ (8011740 <_dtoa_r+0x34c>)
 8011460:	403b      	ands	r3, r7
 8011462:	4293      	cmp	r3, r2
 8011464:	d116      	bne.n	8011494 <_dtoa_r+0xa0>
 8011466:	4bb7      	ldr	r3, [pc, #732]	@ (8011744 <_dtoa_r+0x350>)
 8011468:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801146a:	6013      	str	r3, [r2, #0]
 801146c:	033b      	lsls	r3, r7, #12
 801146e:	0b1b      	lsrs	r3, r3, #12
 8011470:	4323      	orrs	r3, r4
 8011472:	d101      	bne.n	8011478 <_dtoa_r+0x84>
 8011474:	f000 fd80 	bl	8011f78 <_dtoa_r+0xb84>
 8011478:	4bb3      	ldr	r3, [pc, #716]	@ (8011748 <_dtoa_r+0x354>)
 801147a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801147c:	9308      	str	r3, [sp, #32]
 801147e:	2a00      	cmp	r2, #0
 8011480:	d002      	beq.n	8011488 <_dtoa_r+0x94>
 8011482:	4bb2      	ldr	r3, [pc, #712]	@ (801174c <_dtoa_r+0x358>)
 8011484:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8011486:	6013      	str	r3, [r2, #0]
 8011488:	9808      	ldr	r0, [sp, #32]
 801148a:	b01d      	add	sp, #116	@ 0x74
 801148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801148e:	2300      	movs	r3, #0
 8011490:	603b      	str	r3, [r7, #0]
 8011492:	e7e2      	b.n	801145a <_dtoa_r+0x66>
 8011494:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011498:	9212      	str	r2, [sp, #72]	@ 0x48
 801149a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801149c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801149e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80114a0:	2200      	movs	r2, #0
 80114a2:	2300      	movs	r3, #0
 80114a4:	f7ee ffda 	bl	800045c <__aeabi_dcmpeq>
 80114a8:	1e06      	subs	r6, r0, #0
 80114aa:	d00b      	beq.n	80114c4 <_dtoa_r+0xd0>
 80114ac:	2301      	movs	r3, #1
 80114ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80114b0:	6013      	str	r3, [r2, #0]
 80114b2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d002      	beq.n	80114be <_dtoa_r+0xca>
 80114b8:	4ba5      	ldr	r3, [pc, #660]	@ (8011750 <_dtoa_r+0x35c>)
 80114ba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80114bc:	6013      	str	r3, [r2, #0]
 80114be:	4ba5      	ldr	r3, [pc, #660]	@ (8011754 <_dtoa_r+0x360>)
 80114c0:	9308      	str	r3, [sp, #32]
 80114c2:	e7e1      	b.n	8011488 <_dtoa_r+0x94>
 80114c4:	ab1a      	add	r3, sp, #104	@ 0x68
 80114c6:	9301      	str	r3, [sp, #4]
 80114c8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80114ca:	9300      	str	r3, [sp, #0]
 80114cc:	9803      	ldr	r0, [sp, #12]
 80114ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80114d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80114d2:	f001 fde5 	bl	80130a0 <__d2b>
 80114d6:	007a      	lsls	r2, r7, #1
 80114d8:	9005      	str	r0, [sp, #20]
 80114da:	0d52      	lsrs	r2, r2, #21
 80114dc:	d100      	bne.n	80114e0 <_dtoa_r+0xec>
 80114de:	e07b      	b.n	80115d8 <_dtoa_r+0x1e4>
 80114e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80114e2:	9618      	str	r6, [sp, #96]	@ 0x60
 80114e4:	0319      	lsls	r1, r3, #12
 80114e6:	4b9c      	ldr	r3, [pc, #624]	@ (8011758 <_dtoa_r+0x364>)
 80114e8:	0b09      	lsrs	r1, r1, #12
 80114ea:	430b      	orrs	r3, r1
 80114ec:	499b      	ldr	r1, [pc, #620]	@ (801175c <_dtoa_r+0x368>)
 80114ee:	1857      	adds	r7, r2, r1
 80114f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80114f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80114f4:	0019      	movs	r1, r3
 80114f6:	2200      	movs	r2, #0
 80114f8:	4b99      	ldr	r3, [pc, #612]	@ (8011760 <_dtoa_r+0x36c>)
 80114fa:	f7f1 fca3 	bl	8002e44 <__aeabi_dsub>
 80114fe:	4a99      	ldr	r2, [pc, #612]	@ (8011764 <_dtoa_r+0x370>)
 8011500:	4b99      	ldr	r3, [pc, #612]	@ (8011768 <_dtoa_r+0x374>)
 8011502:	f7f1 f9b9 	bl	8002878 <__aeabi_dmul>
 8011506:	4a99      	ldr	r2, [pc, #612]	@ (801176c <_dtoa_r+0x378>)
 8011508:	4b99      	ldr	r3, [pc, #612]	@ (8011770 <_dtoa_r+0x37c>)
 801150a:	f7f0 f9b5 	bl	8001878 <__aeabi_dadd>
 801150e:	0004      	movs	r4, r0
 8011510:	0038      	movs	r0, r7
 8011512:	000d      	movs	r5, r1
 8011514:	f7f2 f8fe 	bl	8003714 <__aeabi_i2d>
 8011518:	4a96      	ldr	r2, [pc, #600]	@ (8011774 <_dtoa_r+0x380>)
 801151a:	4b97      	ldr	r3, [pc, #604]	@ (8011778 <_dtoa_r+0x384>)
 801151c:	f7f1 f9ac 	bl	8002878 <__aeabi_dmul>
 8011520:	0002      	movs	r2, r0
 8011522:	000b      	movs	r3, r1
 8011524:	0020      	movs	r0, r4
 8011526:	0029      	movs	r1, r5
 8011528:	f7f0 f9a6 	bl	8001878 <__aeabi_dadd>
 801152c:	0004      	movs	r4, r0
 801152e:	000d      	movs	r5, r1
 8011530:	f7f2 f8b4 	bl	800369c <__aeabi_d2iz>
 8011534:	2200      	movs	r2, #0
 8011536:	9004      	str	r0, [sp, #16]
 8011538:	2300      	movs	r3, #0
 801153a:	0020      	movs	r0, r4
 801153c:	0029      	movs	r1, r5
 801153e:	f7ee ff93 	bl	8000468 <__aeabi_dcmplt>
 8011542:	2800      	cmp	r0, #0
 8011544:	d00b      	beq.n	801155e <_dtoa_r+0x16a>
 8011546:	9804      	ldr	r0, [sp, #16]
 8011548:	f7f2 f8e4 	bl	8003714 <__aeabi_i2d>
 801154c:	002b      	movs	r3, r5
 801154e:	0022      	movs	r2, r4
 8011550:	f7ee ff84 	bl	800045c <__aeabi_dcmpeq>
 8011554:	4243      	negs	r3, r0
 8011556:	4158      	adcs	r0, r3
 8011558:	9b04      	ldr	r3, [sp, #16]
 801155a:	1a1b      	subs	r3, r3, r0
 801155c:	9304      	str	r3, [sp, #16]
 801155e:	2301      	movs	r3, #1
 8011560:	9315      	str	r3, [sp, #84]	@ 0x54
 8011562:	9b04      	ldr	r3, [sp, #16]
 8011564:	2b16      	cmp	r3, #22
 8011566:	d810      	bhi.n	801158a <_dtoa_r+0x196>
 8011568:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801156a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801156c:	9a04      	ldr	r2, [sp, #16]
 801156e:	4b83      	ldr	r3, [pc, #524]	@ (801177c <_dtoa_r+0x388>)
 8011570:	00d2      	lsls	r2, r2, #3
 8011572:	189b      	adds	r3, r3, r2
 8011574:	681a      	ldr	r2, [r3, #0]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	f7ee ff76 	bl	8000468 <__aeabi_dcmplt>
 801157c:	2800      	cmp	r0, #0
 801157e:	d047      	beq.n	8011610 <_dtoa_r+0x21c>
 8011580:	9b04      	ldr	r3, [sp, #16]
 8011582:	3b01      	subs	r3, #1
 8011584:	9304      	str	r3, [sp, #16]
 8011586:	2300      	movs	r3, #0
 8011588:	9315      	str	r3, [sp, #84]	@ 0x54
 801158a:	2200      	movs	r2, #0
 801158c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801158e:	9206      	str	r2, [sp, #24]
 8011590:	1bdb      	subs	r3, r3, r7
 8011592:	1e5a      	subs	r2, r3, #1
 8011594:	d53e      	bpl.n	8011614 <_dtoa_r+0x220>
 8011596:	2201      	movs	r2, #1
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	9306      	str	r3, [sp, #24]
 801159c:	2300      	movs	r3, #0
 801159e:	930d      	str	r3, [sp, #52]	@ 0x34
 80115a0:	9b04      	ldr	r3, [sp, #16]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	db38      	blt.n	8011618 <_dtoa_r+0x224>
 80115a6:	9a04      	ldr	r2, [sp, #16]
 80115a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80115aa:	4694      	mov	ip, r2
 80115ac:	4463      	add	r3, ip
 80115ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80115b0:	2300      	movs	r3, #0
 80115b2:	9214      	str	r2, [sp, #80]	@ 0x50
 80115b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80115b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80115b8:	2401      	movs	r4, #1
 80115ba:	2b09      	cmp	r3, #9
 80115bc:	d862      	bhi.n	8011684 <_dtoa_r+0x290>
 80115be:	2b05      	cmp	r3, #5
 80115c0:	dd02      	ble.n	80115c8 <_dtoa_r+0x1d4>
 80115c2:	2400      	movs	r4, #0
 80115c4:	3b04      	subs	r3, #4
 80115c6:	9322      	str	r3, [sp, #136]	@ 0x88
 80115c8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80115ca:	1e98      	subs	r0, r3, #2
 80115cc:	2803      	cmp	r0, #3
 80115ce:	d863      	bhi.n	8011698 <_dtoa_r+0x2a4>
 80115d0:	f7ee fdaa 	bl	8000128 <__gnu_thumb1_case_uqi>
 80115d4:	2b385654 	.word	0x2b385654
 80115d8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80115da:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80115dc:	18f6      	adds	r6, r6, r3
 80115de:	4b68      	ldr	r3, [pc, #416]	@ (8011780 <_dtoa_r+0x38c>)
 80115e0:	18f2      	adds	r2, r6, r3
 80115e2:	2a20      	cmp	r2, #32
 80115e4:	dd0f      	ble.n	8011606 <_dtoa_r+0x212>
 80115e6:	2340      	movs	r3, #64	@ 0x40
 80115e8:	1a9b      	subs	r3, r3, r2
 80115ea:	409f      	lsls	r7, r3
 80115ec:	4b65      	ldr	r3, [pc, #404]	@ (8011784 <_dtoa_r+0x390>)
 80115ee:	0038      	movs	r0, r7
 80115f0:	18f3      	adds	r3, r6, r3
 80115f2:	40dc      	lsrs	r4, r3
 80115f4:	4320      	orrs	r0, r4
 80115f6:	f7f2 f8bb 	bl	8003770 <__aeabi_ui2d>
 80115fa:	2201      	movs	r2, #1
 80115fc:	4b62      	ldr	r3, [pc, #392]	@ (8011788 <_dtoa_r+0x394>)
 80115fe:	1e77      	subs	r7, r6, #1
 8011600:	18cb      	adds	r3, r1, r3
 8011602:	9218      	str	r2, [sp, #96]	@ 0x60
 8011604:	e776      	b.n	80114f4 <_dtoa_r+0x100>
 8011606:	2320      	movs	r3, #32
 8011608:	0020      	movs	r0, r4
 801160a:	1a9b      	subs	r3, r3, r2
 801160c:	4098      	lsls	r0, r3
 801160e:	e7f2      	b.n	80115f6 <_dtoa_r+0x202>
 8011610:	9015      	str	r0, [sp, #84]	@ 0x54
 8011612:	e7ba      	b.n	801158a <_dtoa_r+0x196>
 8011614:	920d      	str	r2, [sp, #52]	@ 0x34
 8011616:	e7c3      	b.n	80115a0 <_dtoa_r+0x1ac>
 8011618:	9b06      	ldr	r3, [sp, #24]
 801161a:	9a04      	ldr	r2, [sp, #16]
 801161c:	1a9b      	subs	r3, r3, r2
 801161e:	9306      	str	r3, [sp, #24]
 8011620:	4253      	negs	r3, r2
 8011622:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011624:	2300      	movs	r3, #0
 8011626:	9314      	str	r3, [sp, #80]	@ 0x50
 8011628:	e7c5      	b.n	80115b6 <_dtoa_r+0x1c2>
 801162a:	2301      	movs	r3, #1
 801162c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801162e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011630:	4694      	mov	ip, r2
 8011632:	9b04      	ldr	r3, [sp, #16]
 8011634:	4463      	add	r3, ip
 8011636:	930e      	str	r3, [sp, #56]	@ 0x38
 8011638:	3301      	adds	r3, #1
 801163a:	9309      	str	r3, [sp, #36]	@ 0x24
 801163c:	2b00      	cmp	r3, #0
 801163e:	dc08      	bgt.n	8011652 <_dtoa_r+0x25e>
 8011640:	2301      	movs	r3, #1
 8011642:	e006      	b.n	8011652 <_dtoa_r+0x25e>
 8011644:	2301      	movs	r3, #1
 8011646:	9310      	str	r3, [sp, #64]	@ 0x40
 8011648:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801164a:	2b00      	cmp	r3, #0
 801164c:	dd28      	ble.n	80116a0 <_dtoa_r+0x2ac>
 801164e:	930e      	str	r3, [sp, #56]	@ 0x38
 8011650:	9309      	str	r3, [sp, #36]	@ 0x24
 8011652:	9a03      	ldr	r2, [sp, #12]
 8011654:	2100      	movs	r1, #0
 8011656:	69d0      	ldr	r0, [r2, #28]
 8011658:	2204      	movs	r2, #4
 801165a:	0015      	movs	r5, r2
 801165c:	3514      	adds	r5, #20
 801165e:	429d      	cmp	r5, r3
 8011660:	d923      	bls.n	80116aa <_dtoa_r+0x2b6>
 8011662:	6041      	str	r1, [r0, #4]
 8011664:	9803      	ldr	r0, [sp, #12]
 8011666:	f001 f927 	bl	80128b8 <_Balloc>
 801166a:	9008      	str	r0, [sp, #32]
 801166c:	2800      	cmp	r0, #0
 801166e:	d11f      	bne.n	80116b0 <_dtoa_r+0x2bc>
 8011670:	21b0      	movs	r1, #176	@ 0xb0
 8011672:	4b46      	ldr	r3, [pc, #280]	@ (801178c <_dtoa_r+0x398>)
 8011674:	4831      	ldr	r0, [pc, #196]	@ (801173c <_dtoa_r+0x348>)
 8011676:	9a08      	ldr	r2, [sp, #32]
 8011678:	31ff      	adds	r1, #255	@ 0xff
 801167a:	e6d0      	b.n	801141e <_dtoa_r+0x2a>
 801167c:	2300      	movs	r3, #0
 801167e:	e7e2      	b.n	8011646 <_dtoa_r+0x252>
 8011680:	2300      	movs	r3, #0
 8011682:	e7d3      	b.n	801162c <_dtoa_r+0x238>
 8011684:	2300      	movs	r3, #0
 8011686:	9410      	str	r4, [sp, #64]	@ 0x40
 8011688:	9322      	str	r3, [sp, #136]	@ 0x88
 801168a:	3b01      	subs	r3, #1
 801168c:	2200      	movs	r2, #0
 801168e:	930e      	str	r3, [sp, #56]	@ 0x38
 8011690:	9309      	str	r3, [sp, #36]	@ 0x24
 8011692:	3313      	adds	r3, #19
 8011694:	9223      	str	r2, [sp, #140]	@ 0x8c
 8011696:	e7dc      	b.n	8011652 <_dtoa_r+0x25e>
 8011698:	2301      	movs	r3, #1
 801169a:	9310      	str	r3, [sp, #64]	@ 0x40
 801169c:	3b02      	subs	r3, #2
 801169e:	e7f5      	b.n	801168c <_dtoa_r+0x298>
 80116a0:	2301      	movs	r3, #1
 80116a2:	001a      	movs	r2, r3
 80116a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80116a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80116a8:	e7f4      	b.n	8011694 <_dtoa_r+0x2a0>
 80116aa:	3101      	adds	r1, #1
 80116ac:	0052      	lsls	r2, r2, #1
 80116ae:	e7d4      	b.n	801165a <_dtoa_r+0x266>
 80116b0:	9b03      	ldr	r3, [sp, #12]
 80116b2:	9a08      	ldr	r2, [sp, #32]
 80116b4:	69db      	ldr	r3, [r3, #28]
 80116b6:	601a      	str	r2, [r3, #0]
 80116b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116ba:	2b0e      	cmp	r3, #14
 80116bc:	d900      	bls.n	80116c0 <_dtoa_r+0x2cc>
 80116be:	e0d6      	b.n	801186e <_dtoa_r+0x47a>
 80116c0:	2c00      	cmp	r4, #0
 80116c2:	d100      	bne.n	80116c6 <_dtoa_r+0x2d2>
 80116c4:	e0d3      	b.n	801186e <_dtoa_r+0x47a>
 80116c6:	9b04      	ldr	r3, [sp, #16]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	dd63      	ble.n	8011794 <_dtoa_r+0x3a0>
 80116cc:	210f      	movs	r1, #15
 80116ce:	9a04      	ldr	r2, [sp, #16]
 80116d0:	4b2a      	ldr	r3, [pc, #168]	@ (801177c <_dtoa_r+0x388>)
 80116d2:	400a      	ands	r2, r1
 80116d4:	00d2      	lsls	r2, r2, #3
 80116d6:	189b      	adds	r3, r3, r2
 80116d8:	681e      	ldr	r6, [r3, #0]
 80116da:	685f      	ldr	r7, [r3, #4]
 80116dc:	9b04      	ldr	r3, [sp, #16]
 80116de:	2402      	movs	r4, #2
 80116e0:	111d      	asrs	r5, r3, #4
 80116e2:	05db      	lsls	r3, r3, #23
 80116e4:	d50a      	bpl.n	80116fc <_dtoa_r+0x308>
 80116e6:	4b2a      	ldr	r3, [pc, #168]	@ (8011790 <_dtoa_r+0x39c>)
 80116e8:	400d      	ands	r5, r1
 80116ea:	6a1a      	ldr	r2, [r3, #32]
 80116ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116ee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80116f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80116f2:	f7f0 fc87 	bl	8002004 <__aeabi_ddiv>
 80116f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80116f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80116fa:	3401      	adds	r4, #1
 80116fc:	4b24      	ldr	r3, [pc, #144]	@ (8011790 <_dtoa_r+0x39c>)
 80116fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8011700:	2d00      	cmp	r5, #0
 8011702:	d108      	bne.n	8011716 <_dtoa_r+0x322>
 8011704:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011706:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011708:	0032      	movs	r2, r6
 801170a:	003b      	movs	r3, r7
 801170c:	f7f0 fc7a 	bl	8002004 <__aeabi_ddiv>
 8011710:	900a      	str	r0, [sp, #40]	@ 0x28
 8011712:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011714:	e059      	b.n	80117ca <_dtoa_r+0x3d6>
 8011716:	2301      	movs	r3, #1
 8011718:	421d      	tst	r5, r3
 801171a:	d009      	beq.n	8011730 <_dtoa_r+0x33c>
 801171c:	18e4      	adds	r4, r4, r3
 801171e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011720:	0030      	movs	r0, r6
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	0039      	movs	r1, r7
 8011728:	f7f1 f8a6 	bl	8002878 <__aeabi_dmul>
 801172c:	0006      	movs	r6, r0
 801172e:	000f      	movs	r7, r1
 8011730:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011732:	106d      	asrs	r5, r5, #1
 8011734:	3308      	adds	r3, #8
 8011736:	e7e2      	b.n	80116fe <_dtoa_r+0x30a>
 8011738:	0801646a 	.word	0x0801646a
 801173c:	0801652c 	.word	0x0801652c
 8011740:	7ff00000 	.word	0x7ff00000
 8011744:	0000270f 	.word	0x0000270f
 8011748:	08016528 	.word	0x08016528
 801174c:	0801652b 	.word	0x0801652b
 8011750:	08016447 	.word	0x08016447
 8011754:	08016446 	.word	0x08016446
 8011758:	3ff00000 	.word	0x3ff00000
 801175c:	fffffc01 	.word	0xfffffc01
 8011760:	3ff80000 	.word	0x3ff80000
 8011764:	636f4361 	.word	0x636f4361
 8011768:	3fd287a7 	.word	0x3fd287a7
 801176c:	8b60c8b3 	.word	0x8b60c8b3
 8011770:	3fc68a28 	.word	0x3fc68a28
 8011774:	509f79fb 	.word	0x509f79fb
 8011778:	3fd34413 	.word	0x3fd34413
 801177c:	080166e8 	.word	0x080166e8
 8011780:	00000432 	.word	0x00000432
 8011784:	00000412 	.word	0x00000412
 8011788:	fe100000 	.word	0xfe100000
 801178c:	08016584 	.word	0x08016584
 8011790:	080166c0 	.word	0x080166c0
 8011794:	9b04      	ldr	r3, [sp, #16]
 8011796:	2402      	movs	r4, #2
 8011798:	2b00      	cmp	r3, #0
 801179a:	d016      	beq.n	80117ca <_dtoa_r+0x3d6>
 801179c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801179e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80117a0:	220f      	movs	r2, #15
 80117a2:	425d      	negs	r5, r3
 80117a4:	402a      	ands	r2, r5
 80117a6:	4bd5      	ldr	r3, [pc, #852]	@ (8011afc <_dtoa_r+0x708>)
 80117a8:	00d2      	lsls	r2, r2, #3
 80117aa:	189b      	adds	r3, r3, r2
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	f7f1 f862 	bl	8002878 <__aeabi_dmul>
 80117b4:	2701      	movs	r7, #1
 80117b6:	2300      	movs	r3, #0
 80117b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80117ba:	910b      	str	r1, [sp, #44]	@ 0x2c
 80117bc:	4ed0      	ldr	r6, [pc, #832]	@ (8011b00 <_dtoa_r+0x70c>)
 80117be:	112d      	asrs	r5, r5, #4
 80117c0:	2d00      	cmp	r5, #0
 80117c2:	d000      	beq.n	80117c6 <_dtoa_r+0x3d2>
 80117c4:	e095      	b.n	80118f2 <_dtoa_r+0x4fe>
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1a2      	bne.n	8011710 <_dtoa_r+0x31c>
 80117ca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80117cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80117ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d100      	bne.n	80117d6 <_dtoa_r+0x3e2>
 80117d4:	e098      	b.n	8011908 <_dtoa_r+0x514>
 80117d6:	2200      	movs	r2, #0
 80117d8:	0030      	movs	r0, r6
 80117da:	0039      	movs	r1, r7
 80117dc:	4bc9      	ldr	r3, [pc, #804]	@ (8011b04 <_dtoa_r+0x710>)
 80117de:	f7ee fe43 	bl	8000468 <__aeabi_dcmplt>
 80117e2:	2800      	cmp	r0, #0
 80117e4:	d100      	bne.n	80117e8 <_dtoa_r+0x3f4>
 80117e6:	e08f      	b.n	8011908 <_dtoa_r+0x514>
 80117e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d100      	bne.n	80117f0 <_dtoa_r+0x3fc>
 80117ee:	e08b      	b.n	8011908 <_dtoa_r+0x514>
 80117f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	dd37      	ble.n	8011866 <_dtoa_r+0x472>
 80117f6:	9b04      	ldr	r3, [sp, #16]
 80117f8:	2200      	movs	r2, #0
 80117fa:	3b01      	subs	r3, #1
 80117fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80117fe:	0030      	movs	r0, r6
 8011800:	4bc1      	ldr	r3, [pc, #772]	@ (8011b08 <_dtoa_r+0x714>)
 8011802:	0039      	movs	r1, r7
 8011804:	f7f1 f838 	bl	8002878 <__aeabi_dmul>
 8011808:	900a      	str	r0, [sp, #40]	@ 0x28
 801180a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801180c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801180e:	3401      	adds	r4, #1
 8011810:	0020      	movs	r0, r4
 8011812:	9311      	str	r3, [sp, #68]	@ 0x44
 8011814:	f7f1 ff7e 	bl	8003714 <__aeabi_i2d>
 8011818:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801181a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801181c:	f7f1 f82c 	bl	8002878 <__aeabi_dmul>
 8011820:	4bba      	ldr	r3, [pc, #744]	@ (8011b0c <_dtoa_r+0x718>)
 8011822:	2200      	movs	r2, #0
 8011824:	f7f0 f828 	bl	8001878 <__aeabi_dadd>
 8011828:	4bb9      	ldr	r3, [pc, #740]	@ (8011b10 <_dtoa_r+0x71c>)
 801182a:	0006      	movs	r6, r0
 801182c:	18cf      	adds	r7, r1, r3
 801182e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011830:	2b00      	cmp	r3, #0
 8011832:	d16d      	bne.n	8011910 <_dtoa_r+0x51c>
 8011834:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011836:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011838:	2200      	movs	r2, #0
 801183a:	4bb6      	ldr	r3, [pc, #728]	@ (8011b14 <_dtoa_r+0x720>)
 801183c:	f7f1 fb02 	bl	8002e44 <__aeabi_dsub>
 8011840:	0032      	movs	r2, r6
 8011842:	003b      	movs	r3, r7
 8011844:	0004      	movs	r4, r0
 8011846:	000d      	movs	r5, r1
 8011848:	f7ee fe22 	bl	8000490 <__aeabi_dcmpgt>
 801184c:	2800      	cmp	r0, #0
 801184e:	d000      	beq.n	8011852 <_dtoa_r+0x45e>
 8011850:	e2b6      	b.n	8011dc0 <_dtoa_r+0x9cc>
 8011852:	2180      	movs	r1, #128	@ 0x80
 8011854:	0609      	lsls	r1, r1, #24
 8011856:	187b      	adds	r3, r7, r1
 8011858:	0032      	movs	r2, r6
 801185a:	0020      	movs	r0, r4
 801185c:	0029      	movs	r1, r5
 801185e:	f7ee fe03 	bl	8000468 <__aeabi_dcmplt>
 8011862:	2800      	cmp	r0, #0
 8011864:	d128      	bne.n	80118b8 <_dtoa_r+0x4c4>
 8011866:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011868:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801186a:	930a      	str	r3, [sp, #40]	@ 0x28
 801186c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801186e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011870:	2b00      	cmp	r3, #0
 8011872:	da00      	bge.n	8011876 <_dtoa_r+0x482>
 8011874:	e174      	b.n	8011b60 <_dtoa_r+0x76c>
 8011876:	9a04      	ldr	r2, [sp, #16]
 8011878:	2a0e      	cmp	r2, #14
 801187a:	dd00      	ble.n	801187e <_dtoa_r+0x48a>
 801187c:	e170      	b.n	8011b60 <_dtoa_r+0x76c>
 801187e:	4b9f      	ldr	r3, [pc, #636]	@ (8011afc <_dtoa_r+0x708>)
 8011880:	00d2      	lsls	r2, r2, #3
 8011882:	189b      	adds	r3, r3, r2
 8011884:	685c      	ldr	r4, [r3, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	9306      	str	r3, [sp, #24]
 801188a:	9407      	str	r4, [sp, #28]
 801188c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801188e:	2b00      	cmp	r3, #0
 8011890:	db00      	blt.n	8011894 <_dtoa_r+0x4a0>
 8011892:	e0e7      	b.n	8011a64 <_dtoa_r+0x670>
 8011894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011896:	2b00      	cmp	r3, #0
 8011898:	dd00      	ble.n	801189c <_dtoa_r+0x4a8>
 801189a:	e0e3      	b.n	8011a64 <_dtoa_r+0x670>
 801189c:	d10c      	bne.n	80118b8 <_dtoa_r+0x4c4>
 801189e:	9806      	ldr	r0, [sp, #24]
 80118a0:	9907      	ldr	r1, [sp, #28]
 80118a2:	2200      	movs	r2, #0
 80118a4:	4b9b      	ldr	r3, [pc, #620]	@ (8011b14 <_dtoa_r+0x720>)
 80118a6:	f7f0 ffe7 	bl	8002878 <__aeabi_dmul>
 80118aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118ae:	f7ee fdf9 	bl	80004a4 <__aeabi_dcmpge>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	d100      	bne.n	80118b8 <_dtoa_r+0x4c4>
 80118b6:	e286      	b.n	8011dc6 <_dtoa_r+0x9d2>
 80118b8:	2600      	movs	r6, #0
 80118ba:	0037      	movs	r7, r6
 80118bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118be:	9c08      	ldr	r4, [sp, #32]
 80118c0:	43db      	mvns	r3, r3
 80118c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80118c4:	9704      	str	r7, [sp, #16]
 80118c6:	2700      	movs	r7, #0
 80118c8:	0031      	movs	r1, r6
 80118ca:	9803      	ldr	r0, [sp, #12]
 80118cc:	f001 f838 	bl	8012940 <_Bfree>
 80118d0:	9b04      	ldr	r3, [sp, #16]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d100      	bne.n	80118d8 <_dtoa_r+0x4e4>
 80118d6:	e0bb      	b.n	8011a50 <_dtoa_r+0x65c>
 80118d8:	2f00      	cmp	r7, #0
 80118da:	d005      	beq.n	80118e8 <_dtoa_r+0x4f4>
 80118dc:	429f      	cmp	r7, r3
 80118de:	d003      	beq.n	80118e8 <_dtoa_r+0x4f4>
 80118e0:	0039      	movs	r1, r7
 80118e2:	9803      	ldr	r0, [sp, #12]
 80118e4:	f001 f82c 	bl	8012940 <_Bfree>
 80118e8:	9904      	ldr	r1, [sp, #16]
 80118ea:	9803      	ldr	r0, [sp, #12]
 80118ec:	f001 f828 	bl	8012940 <_Bfree>
 80118f0:	e0ae      	b.n	8011a50 <_dtoa_r+0x65c>
 80118f2:	423d      	tst	r5, r7
 80118f4:	d005      	beq.n	8011902 <_dtoa_r+0x50e>
 80118f6:	6832      	ldr	r2, [r6, #0]
 80118f8:	6873      	ldr	r3, [r6, #4]
 80118fa:	f7f0 ffbd 	bl	8002878 <__aeabi_dmul>
 80118fe:	003b      	movs	r3, r7
 8011900:	3401      	adds	r4, #1
 8011902:	106d      	asrs	r5, r5, #1
 8011904:	3608      	adds	r6, #8
 8011906:	e75b      	b.n	80117c0 <_dtoa_r+0x3cc>
 8011908:	9b04      	ldr	r3, [sp, #16]
 801190a:	930c      	str	r3, [sp, #48]	@ 0x30
 801190c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801190e:	e77f      	b.n	8011810 <_dtoa_r+0x41c>
 8011910:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011912:	4b7a      	ldr	r3, [pc, #488]	@ (8011afc <_dtoa_r+0x708>)
 8011914:	3a01      	subs	r2, #1
 8011916:	00d2      	lsls	r2, r2, #3
 8011918:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801191a:	189b      	adds	r3, r3, r2
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	2900      	cmp	r1, #0
 8011922:	d04c      	beq.n	80119be <_dtoa_r+0x5ca>
 8011924:	2000      	movs	r0, #0
 8011926:	497c      	ldr	r1, [pc, #496]	@ (8011b18 <_dtoa_r+0x724>)
 8011928:	f7f0 fb6c 	bl	8002004 <__aeabi_ddiv>
 801192c:	0032      	movs	r2, r6
 801192e:	003b      	movs	r3, r7
 8011930:	f7f1 fa88 	bl	8002e44 <__aeabi_dsub>
 8011934:	9a08      	ldr	r2, [sp, #32]
 8011936:	0006      	movs	r6, r0
 8011938:	4694      	mov	ip, r2
 801193a:	000f      	movs	r7, r1
 801193c:	9b08      	ldr	r3, [sp, #32]
 801193e:	9316      	str	r3, [sp, #88]	@ 0x58
 8011940:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011942:	4463      	add	r3, ip
 8011944:	9311      	str	r3, [sp, #68]	@ 0x44
 8011946:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801194a:	f7f1 fea7 	bl	800369c <__aeabi_d2iz>
 801194e:	0005      	movs	r5, r0
 8011950:	f7f1 fee0 	bl	8003714 <__aeabi_i2d>
 8011954:	0002      	movs	r2, r0
 8011956:	000b      	movs	r3, r1
 8011958:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801195a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801195c:	f7f1 fa72 	bl	8002e44 <__aeabi_dsub>
 8011960:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011962:	3530      	adds	r5, #48	@ 0x30
 8011964:	1c5c      	adds	r4, r3, #1
 8011966:	701d      	strb	r5, [r3, #0]
 8011968:	0032      	movs	r2, r6
 801196a:	003b      	movs	r3, r7
 801196c:	900a      	str	r0, [sp, #40]	@ 0x28
 801196e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011970:	f7ee fd7a 	bl	8000468 <__aeabi_dcmplt>
 8011974:	2800      	cmp	r0, #0
 8011976:	d16b      	bne.n	8011a50 <_dtoa_r+0x65c>
 8011978:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801197a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801197c:	2000      	movs	r0, #0
 801197e:	4961      	ldr	r1, [pc, #388]	@ (8011b04 <_dtoa_r+0x710>)
 8011980:	f7f1 fa60 	bl	8002e44 <__aeabi_dsub>
 8011984:	0032      	movs	r2, r6
 8011986:	003b      	movs	r3, r7
 8011988:	f7ee fd6e 	bl	8000468 <__aeabi_dcmplt>
 801198c:	2800      	cmp	r0, #0
 801198e:	d000      	beq.n	8011992 <_dtoa_r+0x59e>
 8011990:	e0c6      	b.n	8011b20 <_dtoa_r+0x72c>
 8011992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011994:	42a3      	cmp	r3, r4
 8011996:	d100      	bne.n	801199a <_dtoa_r+0x5a6>
 8011998:	e765      	b.n	8011866 <_dtoa_r+0x472>
 801199a:	2200      	movs	r2, #0
 801199c:	0030      	movs	r0, r6
 801199e:	0039      	movs	r1, r7
 80119a0:	4b59      	ldr	r3, [pc, #356]	@ (8011b08 <_dtoa_r+0x714>)
 80119a2:	f7f0 ff69 	bl	8002878 <__aeabi_dmul>
 80119a6:	2200      	movs	r2, #0
 80119a8:	0006      	movs	r6, r0
 80119aa:	000f      	movs	r7, r1
 80119ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80119ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80119b0:	4b55      	ldr	r3, [pc, #340]	@ (8011b08 <_dtoa_r+0x714>)
 80119b2:	f7f0 ff61 	bl	8002878 <__aeabi_dmul>
 80119b6:	9416      	str	r4, [sp, #88]	@ 0x58
 80119b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80119ba:	910b      	str	r1, [sp, #44]	@ 0x2c
 80119bc:	e7c3      	b.n	8011946 <_dtoa_r+0x552>
 80119be:	0030      	movs	r0, r6
 80119c0:	0039      	movs	r1, r7
 80119c2:	f7f0 ff59 	bl	8002878 <__aeabi_dmul>
 80119c6:	9d08      	ldr	r5, [sp, #32]
 80119c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80119ca:	002b      	movs	r3, r5
 80119cc:	4694      	mov	ip, r2
 80119ce:	9016      	str	r0, [sp, #88]	@ 0x58
 80119d0:	9117      	str	r1, [sp, #92]	@ 0x5c
 80119d2:	4463      	add	r3, ip
 80119d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80119d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80119d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80119da:	f7f1 fe5f 	bl	800369c <__aeabi_d2iz>
 80119de:	0004      	movs	r4, r0
 80119e0:	f7f1 fe98 	bl	8003714 <__aeabi_i2d>
 80119e4:	000b      	movs	r3, r1
 80119e6:	0002      	movs	r2, r0
 80119e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80119ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80119ec:	f7f1 fa2a 	bl	8002e44 <__aeabi_dsub>
 80119f0:	3430      	adds	r4, #48	@ 0x30
 80119f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119f4:	702c      	strb	r4, [r5, #0]
 80119f6:	3501      	adds	r5, #1
 80119f8:	0006      	movs	r6, r0
 80119fa:	000f      	movs	r7, r1
 80119fc:	42ab      	cmp	r3, r5
 80119fe:	d12a      	bne.n	8011a56 <_dtoa_r+0x662>
 8011a00:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8011a02:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8011a04:	9b08      	ldr	r3, [sp, #32]
 8011a06:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8011a08:	469c      	mov	ip, r3
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	4b42      	ldr	r3, [pc, #264]	@ (8011b18 <_dtoa_r+0x724>)
 8011a0e:	4464      	add	r4, ip
 8011a10:	f7ef ff32 	bl	8001878 <__aeabi_dadd>
 8011a14:	0002      	movs	r2, r0
 8011a16:	000b      	movs	r3, r1
 8011a18:	0030      	movs	r0, r6
 8011a1a:	0039      	movs	r1, r7
 8011a1c:	f7ee fd38 	bl	8000490 <__aeabi_dcmpgt>
 8011a20:	2800      	cmp	r0, #0
 8011a22:	d000      	beq.n	8011a26 <_dtoa_r+0x632>
 8011a24:	e07c      	b.n	8011b20 <_dtoa_r+0x72c>
 8011a26:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011a28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	493a      	ldr	r1, [pc, #232]	@ (8011b18 <_dtoa_r+0x724>)
 8011a2e:	f7f1 fa09 	bl	8002e44 <__aeabi_dsub>
 8011a32:	0002      	movs	r2, r0
 8011a34:	000b      	movs	r3, r1
 8011a36:	0030      	movs	r0, r6
 8011a38:	0039      	movs	r1, r7
 8011a3a:	f7ee fd15 	bl	8000468 <__aeabi_dcmplt>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d100      	bne.n	8011a44 <_dtoa_r+0x650>
 8011a42:	e710      	b.n	8011866 <_dtoa_r+0x472>
 8011a44:	0023      	movs	r3, r4
 8011a46:	3c01      	subs	r4, #1
 8011a48:	7822      	ldrb	r2, [r4, #0]
 8011a4a:	2a30      	cmp	r2, #48	@ 0x30
 8011a4c:	d0fa      	beq.n	8011a44 <_dtoa_r+0x650>
 8011a4e:	001c      	movs	r4, r3
 8011a50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a52:	9304      	str	r3, [sp, #16]
 8011a54:	e042      	b.n	8011adc <_dtoa_r+0x6e8>
 8011a56:	2200      	movs	r2, #0
 8011a58:	4b2b      	ldr	r3, [pc, #172]	@ (8011b08 <_dtoa_r+0x714>)
 8011a5a:	f7f0 ff0d 	bl	8002878 <__aeabi_dmul>
 8011a5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a60:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011a62:	e7b8      	b.n	80119d6 <_dtoa_r+0x5e2>
 8011a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a66:	9d08      	ldr	r5, [sp, #32]
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	195b      	adds	r3, r3, r5
 8011a6c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011a6e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011a70:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a72:	9a06      	ldr	r2, [sp, #24]
 8011a74:	9b07      	ldr	r3, [sp, #28]
 8011a76:	0030      	movs	r0, r6
 8011a78:	0039      	movs	r1, r7
 8011a7a:	f7f0 fac3 	bl	8002004 <__aeabi_ddiv>
 8011a7e:	f7f1 fe0d 	bl	800369c <__aeabi_d2iz>
 8011a82:	9009      	str	r0, [sp, #36]	@ 0x24
 8011a84:	f7f1 fe46 	bl	8003714 <__aeabi_i2d>
 8011a88:	9a06      	ldr	r2, [sp, #24]
 8011a8a:	9b07      	ldr	r3, [sp, #28]
 8011a8c:	f7f0 fef4 	bl	8002878 <__aeabi_dmul>
 8011a90:	0002      	movs	r2, r0
 8011a92:	000b      	movs	r3, r1
 8011a94:	0030      	movs	r0, r6
 8011a96:	0039      	movs	r1, r7
 8011a98:	f7f1 f9d4 	bl	8002e44 <__aeabi_dsub>
 8011a9c:	002b      	movs	r3, r5
 8011a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011aa0:	3501      	adds	r5, #1
 8011aa2:	3230      	adds	r2, #48	@ 0x30
 8011aa4:	701a      	strb	r2, [r3, #0]
 8011aa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011aa8:	002c      	movs	r4, r5
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d14b      	bne.n	8011b46 <_dtoa_r+0x752>
 8011aae:	0002      	movs	r2, r0
 8011ab0:	000b      	movs	r3, r1
 8011ab2:	f7ef fee1 	bl	8001878 <__aeabi_dadd>
 8011ab6:	9a06      	ldr	r2, [sp, #24]
 8011ab8:	9b07      	ldr	r3, [sp, #28]
 8011aba:	0006      	movs	r6, r0
 8011abc:	000f      	movs	r7, r1
 8011abe:	f7ee fce7 	bl	8000490 <__aeabi_dcmpgt>
 8011ac2:	2800      	cmp	r0, #0
 8011ac4:	d12a      	bne.n	8011b1c <_dtoa_r+0x728>
 8011ac6:	9a06      	ldr	r2, [sp, #24]
 8011ac8:	9b07      	ldr	r3, [sp, #28]
 8011aca:	0030      	movs	r0, r6
 8011acc:	0039      	movs	r1, r7
 8011ace:	f7ee fcc5 	bl	800045c <__aeabi_dcmpeq>
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	d002      	beq.n	8011adc <_dtoa_r+0x6e8>
 8011ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ad8:	07dd      	lsls	r5, r3, #31
 8011ada:	d41f      	bmi.n	8011b1c <_dtoa_r+0x728>
 8011adc:	9905      	ldr	r1, [sp, #20]
 8011ade:	9803      	ldr	r0, [sp, #12]
 8011ae0:	f000 ff2e 	bl	8012940 <_Bfree>
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	7023      	strb	r3, [r4, #0]
 8011ae8:	9b04      	ldr	r3, [sp, #16]
 8011aea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011aec:	3301      	adds	r3, #1
 8011aee:	6013      	str	r3, [r2, #0]
 8011af0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d100      	bne.n	8011af8 <_dtoa_r+0x704>
 8011af6:	e4c7      	b.n	8011488 <_dtoa_r+0x94>
 8011af8:	601c      	str	r4, [r3, #0]
 8011afa:	e4c5      	b.n	8011488 <_dtoa_r+0x94>
 8011afc:	080166e8 	.word	0x080166e8
 8011b00:	080166c0 	.word	0x080166c0
 8011b04:	3ff00000 	.word	0x3ff00000
 8011b08:	40240000 	.word	0x40240000
 8011b0c:	401c0000 	.word	0x401c0000
 8011b10:	fcc00000 	.word	0xfcc00000
 8011b14:	40140000 	.word	0x40140000
 8011b18:	3fe00000 	.word	0x3fe00000
 8011b1c:	9b04      	ldr	r3, [sp, #16]
 8011b1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011b20:	0023      	movs	r3, r4
 8011b22:	001c      	movs	r4, r3
 8011b24:	3b01      	subs	r3, #1
 8011b26:	781a      	ldrb	r2, [r3, #0]
 8011b28:	2a39      	cmp	r2, #57	@ 0x39
 8011b2a:	d108      	bne.n	8011b3e <_dtoa_r+0x74a>
 8011b2c:	9a08      	ldr	r2, [sp, #32]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d1f7      	bne.n	8011b22 <_dtoa_r+0x72e>
 8011b32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011b34:	9908      	ldr	r1, [sp, #32]
 8011b36:	3201      	adds	r2, #1
 8011b38:	920c      	str	r2, [sp, #48]	@ 0x30
 8011b3a:	2230      	movs	r2, #48	@ 0x30
 8011b3c:	700a      	strb	r2, [r1, #0]
 8011b3e:	781a      	ldrb	r2, [r3, #0]
 8011b40:	3201      	adds	r2, #1
 8011b42:	701a      	strb	r2, [r3, #0]
 8011b44:	e784      	b.n	8011a50 <_dtoa_r+0x65c>
 8011b46:	2200      	movs	r2, #0
 8011b48:	4bc6      	ldr	r3, [pc, #792]	@ (8011e64 <_dtoa_r+0xa70>)
 8011b4a:	f7f0 fe95 	bl	8002878 <__aeabi_dmul>
 8011b4e:	2200      	movs	r2, #0
 8011b50:	2300      	movs	r3, #0
 8011b52:	0006      	movs	r6, r0
 8011b54:	000f      	movs	r7, r1
 8011b56:	f7ee fc81 	bl	800045c <__aeabi_dcmpeq>
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	d089      	beq.n	8011a72 <_dtoa_r+0x67e>
 8011b5e:	e7bd      	b.n	8011adc <_dtoa_r+0x6e8>
 8011b60:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8011b62:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8011b64:	9c06      	ldr	r4, [sp, #24]
 8011b66:	2f00      	cmp	r7, #0
 8011b68:	d014      	beq.n	8011b94 <_dtoa_r+0x7a0>
 8011b6a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011b6c:	2a01      	cmp	r2, #1
 8011b6e:	dd00      	ble.n	8011b72 <_dtoa_r+0x77e>
 8011b70:	e0e4      	b.n	8011d3c <_dtoa_r+0x948>
 8011b72:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011b74:	2a00      	cmp	r2, #0
 8011b76:	d100      	bne.n	8011b7a <_dtoa_r+0x786>
 8011b78:	e0da      	b.n	8011d30 <_dtoa_r+0x93c>
 8011b7a:	4abb      	ldr	r2, [pc, #748]	@ (8011e68 <_dtoa_r+0xa74>)
 8011b7c:	189b      	adds	r3, r3, r2
 8011b7e:	9a06      	ldr	r2, [sp, #24]
 8011b80:	2101      	movs	r1, #1
 8011b82:	18d2      	adds	r2, r2, r3
 8011b84:	9206      	str	r2, [sp, #24]
 8011b86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011b88:	9803      	ldr	r0, [sp, #12]
 8011b8a:	18d3      	adds	r3, r2, r3
 8011b8c:	930d      	str	r3, [sp, #52]	@ 0x34
 8011b8e:	f000 ffdb 	bl	8012b48 <__i2b>
 8011b92:	0007      	movs	r7, r0
 8011b94:	2c00      	cmp	r4, #0
 8011b96:	d00e      	beq.n	8011bb6 <_dtoa_r+0x7c2>
 8011b98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	dd0b      	ble.n	8011bb6 <_dtoa_r+0x7c2>
 8011b9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011ba0:	0023      	movs	r3, r4
 8011ba2:	4294      	cmp	r4, r2
 8011ba4:	dd00      	ble.n	8011ba8 <_dtoa_r+0x7b4>
 8011ba6:	0013      	movs	r3, r2
 8011ba8:	9a06      	ldr	r2, [sp, #24]
 8011baa:	1ae4      	subs	r4, r4, r3
 8011bac:	1ad2      	subs	r2, r2, r3
 8011bae:	9206      	str	r2, [sp, #24]
 8011bb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	930d      	str	r3, [sp, #52]	@ 0x34
 8011bb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d021      	beq.n	8011c00 <_dtoa_r+0x80c>
 8011bbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d100      	bne.n	8011bc4 <_dtoa_r+0x7d0>
 8011bc2:	e0d3      	b.n	8011d6c <_dtoa_r+0x978>
 8011bc4:	9e05      	ldr	r6, [sp, #20]
 8011bc6:	2d00      	cmp	r5, #0
 8011bc8:	d014      	beq.n	8011bf4 <_dtoa_r+0x800>
 8011bca:	0039      	movs	r1, r7
 8011bcc:	002a      	movs	r2, r5
 8011bce:	9803      	ldr	r0, [sp, #12]
 8011bd0:	f001 f87c 	bl	8012ccc <__pow5mult>
 8011bd4:	9a05      	ldr	r2, [sp, #20]
 8011bd6:	0001      	movs	r1, r0
 8011bd8:	0007      	movs	r7, r0
 8011bda:	9803      	ldr	r0, [sp, #12]
 8011bdc:	f000 ffcc 	bl	8012b78 <__multiply>
 8011be0:	0006      	movs	r6, r0
 8011be2:	9905      	ldr	r1, [sp, #20]
 8011be4:	9803      	ldr	r0, [sp, #12]
 8011be6:	f000 feab 	bl	8012940 <_Bfree>
 8011bea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bec:	9605      	str	r6, [sp, #20]
 8011bee:	1b5b      	subs	r3, r3, r5
 8011bf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011bf2:	d005      	beq.n	8011c00 <_dtoa_r+0x80c>
 8011bf4:	0031      	movs	r1, r6
 8011bf6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011bf8:	9803      	ldr	r0, [sp, #12]
 8011bfa:	f001 f867 	bl	8012ccc <__pow5mult>
 8011bfe:	9005      	str	r0, [sp, #20]
 8011c00:	2101      	movs	r1, #1
 8011c02:	9803      	ldr	r0, [sp, #12]
 8011c04:	f000 ffa0 	bl	8012b48 <__i2b>
 8011c08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c0a:	0006      	movs	r6, r0
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d100      	bne.n	8011c12 <_dtoa_r+0x81e>
 8011c10:	e1bc      	b.n	8011f8c <_dtoa_r+0xb98>
 8011c12:	001a      	movs	r2, r3
 8011c14:	0001      	movs	r1, r0
 8011c16:	9803      	ldr	r0, [sp, #12]
 8011c18:	f001 f858 	bl	8012ccc <__pow5mult>
 8011c1c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011c1e:	0006      	movs	r6, r0
 8011c20:	2500      	movs	r5, #0
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	dc16      	bgt.n	8011c54 <_dtoa_r+0x860>
 8011c26:	2500      	movs	r5, #0
 8011c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c2a:	42ab      	cmp	r3, r5
 8011c2c:	d10e      	bne.n	8011c4c <_dtoa_r+0x858>
 8011c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c30:	031b      	lsls	r3, r3, #12
 8011c32:	42ab      	cmp	r3, r5
 8011c34:	d10a      	bne.n	8011c4c <_dtoa_r+0x858>
 8011c36:	4b8d      	ldr	r3, [pc, #564]	@ (8011e6c <_dtoa_r+0xa78>)
 8011c38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011c3a:	4213      	tst	r3, r2
 8011c3c:	d006      	beq.n	8011c4c <_dtoa_r+0x858>
 8011c3e:	9b06      	ldr	r3, [sp, #24]
 8011c40:	3501      	adds	r5, #1
 8011c42:	3301      	adds	r3, #1
 8011c44:	9306      	str	r3, [sp, #24]
 8011c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c48:	3301      	adds	r3, #1
 8011c4a:	930d      	str	r3, [sp, #52]	@ 0x34
 8011c4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c4e:	2001      	movs	r0, #1
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d008      	beq.n	8011c66 <_dtoa_r+0x872>
 8011c54:	6933      	ldr	r3, [r6, #16]
 8011c56:	3303      	adds	r3, #3
 8011c58:	009b      	lsls	r3, r3, #2
 8011c5a:	18f3      	adds	r3, r6, r3
 8011c5c:	6858      	ldr	r0, [r3, #4]
 8011c5e:	f000 ff23 	bl	8012aa8 <__hi0bits>
 8011c62:	2320      	movs	r3, #32
 8011c64:	1a18      	subs	r0, r3, r0
 8011c66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c68:	1818      	adds	r0, r3, r0
 8011c6a:	0002      	movs	r2, r0
 8011c6c:	231f      	movs	r3, #31
 8011c6e:	401a      	ands	r2, r3
 8011c70:	4218      	tst	r0, r3
 8011c72:	d100      	bne.n	8011c76 <_dtoa_r+0x882>
 8011c74:	e081      	b.n	8011d7a <_dtoa_r+0x986>
 8011c76:	3301      	adds	r3, #1
 8011c78:	1a9b      	subs	r3, r3, r2
 8011c7a:	2b04      	cmp	r3, #4
 8011c7c:	dd79      	ble.n	8011d72 <_dtoa_r+0x97e>
 8011c7e:	231c      	movs	r3, #28
 8011c80:	1a9b      	subs	r3, r3, r2
 8011c82:	9a06      	ldr	r2, [sp, #24]
 8011c84:	18e4      	adds	r4, r4, r3
 8011c86:	18d2      	adds	r2, r2, r3
 8011c88:	9206      	str	r2, [sp, #24]
 8011c8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c8c:	18d3      	adds	r3, r2, r3
 8011c8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011c90:	9b06      	ldr	r3, [sp, #24]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	dd05      	ble.n	8011ca2 <_dtoa_r+0x8ae>
 8011c96:	001a      	movs	r2, r3
 8011c98:	9905      	ldr	r1, [sp, #20]
 8011c9a:	9803      	ldr	r0, [sp, #12]
 8011c9c:	f001 f872 	bl	8012d84 <__lshift>
 8011ca0:	9005      	str	r0, [sp, #20]
 8011ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	dd05      	ble.n	8011cb4 <_dtoa_r+0x8c0>
 8011ca8:	0031      	movs	r1, r6
 8011caa:	001a      	movs	r2, r3
 8011cac:	9803      	ldr	r0, [sp, #12]
 8011cae:	f001 f869 	bl	8012d84 <__lshift>
 8011cb2:	0006      	movs	r6, r0
 8011cb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d061      	beq.n	8011d7e <_dtoa_r+0x98a>
 8011cba:	0031      	movs	r1, r6
 8011cbc:	9805      	ldr	r0, [sp, #20]
 8011cbe:	f001 f8cd 	bl	8012e5c <__mcmp>
 8011cc2:	2800      	cmp	r0, #0
 8011cc4:	da5b      	bge.n	8011d7e <_dtoa_r+0x98a>
 8011cc6:	9b04      	ldr	r3, [sp, #16]
 8011cc8:	220a      	movs	r2, #10
 8011cca:	3b01      	subs	r3, #1
 8011ccc:	930c      	str	r3, [sp, #48]	@ 0x30
 8011cce:	9905      	ldr	r1, [sp, #20]
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	9803      	ldr	r0, [sp, #12]
 8011cd4:	f000 fe58 	bl	8012988 <__multadd>
 8011cd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011cda:	9005      	str	r0, [sp, #20]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d100      	bne.n	8011ce2 <_dtoa_r+0x8ee>
 8011ce0:	e15b      	b.n	8011f9a <_dtoa_r+0xba6>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	0039      	movs	r1, r7
 8011ce6:	220a      	movs	r2, #10
 8011ce8:	9803      	ldr	r0, [sp, #12]
 8011cea:	f000 fe4d 	bl	8012988 <__multadd>
 8011cee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cf0:	0007      	movs	r7, r0
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	dc4d      	bgt.n	8011d92 <_dtoa_r+0x99e>
 8011cf6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	dd46      	ble.n	8011d8a <_dtoa_r+0x996>
 8011cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d000      	beq.n	8011d04 <_dtoa_r+0x910>
 8011d02:	e5db      	b.n	80118bc <_dtoa_r+0x4c8>
 8011d04:	0031      	movs	r1, r6
 8011d06:	2205      	movs	r2, #5
 8011d08:	9803      	ldr	r0, [sp, #12]
 8011d0a:	f000 fe3d 	bl	8012988 <__multadd>
 8011d0e:	0006      	movs	r6, r0
 8011d10:	0001      	movs	r1, r0
 8011d12:	9805      	ldr	r0, [sp, #20]
 8011d14:	f001 f8a2 	bl	8012e5c <__mcmp>
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	dc00      	bgt.n	8011d1e <_dtoa_r+0x92a>
 8011d1c:	e5ce      	b.n	80118bc <_dtoa_r+0x4c8>
 8011d1e:	9b08      	ldr	r3, [sp, #32]
 8011d20:	9a08      	ldr	r2, [sp, #32]
 8011d22:	1c5c      	adds	r4, r3, #1
 8011d24:	2331      	movs	r3, #49	@ 0x31
 8011d26:	7013      	strb	r3, [r2, #0]
 8011d28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8011d2e:	e5c9      	b.n	80118c4 <_dtoa_r+0x4d0>
 8011d30:	2336      	movs	r3, #54	@ 0x36
 8011d32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011d34:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8011d36:	1a9b      	subs	r3, r3, r2
 8011d38:	9c06      	ldr	r4, [sp, #24]
 8011d3a:	e720      	b.n	8011b7e <_dtoa_r+0x78a>
 8011d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d3e:	1e5d      	subs	r5, r3, #1
 8011d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d42:	42ab      	cmp	r3, r5
 8011d44:	db08      	blt.n	8011d58 <_dtoa_r+0x964>
 8011d46:	1b5d      	subs	r5, r3, r5
 8011d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	daf4      	bge.n	8011d38 <_dtoa_r+0x944>
 8011d4e:	9b06      	ldr	r3, [sp, #24]
 8011d50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d52:	1a9c      	subs	r4, r3, r2
 8011d54:	2300      	movs	r3, #0
 8011d56:	e712      	b.n	8011b7e <_dtoa_r+0x78a>
 8011d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d5a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011d5c:	1aeb      	subs	r3, r5, r3
 8011d5e:	18d3      	adds	r3, r2, r3
 8011d60:	9314      	str	r3, [sp, #80]	@ 0x50
 8011d62:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011d64:	9c06      	ldr	r4, [sp, #24]
 8011d66:	2500      	movs	r5, #0
 8011d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d6a:	e708      	b.n	8011b7e <_dtoa_r+0x78a>
 8011d6c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011d6e:	9905      	ldr	r1, [sp, #20]
 8011d70:	e742      	b.n	8011bf8 <_dtoa_r+0x804>
 8011d72:	2b04      	cmp	r3, #4
 8011d74:	d08c      	beq.n	8011c90 <_dtoa_r+0x89c>
 8011d76:	331c      	adds	r3, #28
 8011d78:	e783      	b.n	8011c82 <_dtoa_r+0x88e>
 8011d7a:	0013      	movs	r3, r2
 8011d7c:	e7fb      	b.n	8011d76 <_dtoa_r+0x982>
 8011d7e:	9b04      	ldr	r3, [sp, #16]
 8011d80:	930c      	str	r3, [sp, #48]	@ 0x30
 8011d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d84:	930e      	str	r3, [sp, #56]	@ 0x38
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	ddb5      	ble.n	8011cf6 <_dtoa_r+0x902>
 8011d8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d100      	bne.n	8011d92 <_dtoa_r+0x99e>
 8011d90:	e107      	b.n	8011fa2 <_dtoa_r+0xbae>
 8011d92:	2c00      	cmp	r4, #0
 8011d94:	dd05      	ble.n	8011da2 <_dtoa_r+0x9ae>
 8011d96:	0039      	movs	r1, r7
 8011d98:	0022      	movs	r2, r4
 8011d9a:	9803      	ldr	r0, [sp, #12]
 8011d9c:	f000 fff2 	bl	8012d84 <__lshift>
 8011da0:	0007      	movs	r7, r0
 8011da2:	9704      	str	r7, [sp, #16]
 8011da4:	2d00      	cmp	r5, #0
 8011da6:	d020      	beq.n	8011dea <_dtoa_r+0x9f6>
 8011da8:	6879      	ldr	r1, [r7, #4]
 8011daa:	9803      	ldr	r0, [sp, #12]
 8011dac:	f000 fd84 	bl	80128b8 <_Balloc>
 8011db0:	1e04      	subs	r4, r0, #0
 8011db2:	d10c      	bne.n	8011dce <_dtoa_r+0x9da>
 8011db4:	0022      	movs	r2, r4
 8011db6:	4b2e      	ldr	r3, [pc, #184]	@ (8011e70 <_dtoa_r+0xa7c>)
 8011db8:	482e      	ldr	r0, [pc, #184]	@ (8011e74 <_dtoa_r+0xa80>)
 8011dba:	492f      	ldr	r1, [pc, #188]	@ (8011e78 <_dtoa_r+0xa84>)
 8011dbc:	f7ff fb2f 	bl	801141e <_dtoa_r+0x2a>
 8011dc0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011dc2:	0037      	movs	r7, r6
 8011dc4:	e7ab      	b.n	8011d1e <_dtoa_r+0x92a>
 8011dc6:	9b04      	ldr	r3, [sp, #16]
 8011dc8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8011dca:	930c      	str	r3, [sp, #48]	@ 0x30
 8011dcc:	e7f9      	b.n	8011dc2 <_dtoa_r+0x9ce>
 8011dce:	0039      	movs	r1, r7
 8011dd0:	693a      	ldr	r2, [r7, #16]
 8011dd2:	310c      	adds	r1, #12
 8011dd4:	3202      	adds	r2, #2
 8011dd6:	0092      	lsls	r2, r2, #2
 8011dd8:	300c      	adds	r0, #12
 8011dda:	f7ff fa57 	bl	801128c <memcpy>
 8011dde:	2201      	movs	r2, #1
 8011de0:	0021      	movs	r1, r4
 8011de2:	9803      	ldr	r0, [sp, #12]
 8011de4:	f000 ffce 	bl	8012d84 <__lshift>
 8011de8:	9004      	str	r0, [sp, #16]
 8011dea:	9b08      	ldr	r3, [sp, #32]
 8011dec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011dee:	9306      	str	r3, [sp, #24]
 8011df0:	3b01      	subs	r3, #1
 8011df2:	189b      	adds	r3, r3, r2
 8011df4:	2201      	movs	r2, #1
 8011df6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dfa:	4013      	ands	r3, r2
 8011dfc:	930e      	str	r3, [sp, #56]	@ 0x38
 8011dfe:	0031      	movs	r1, r6
 8011e00:	9805      	ldr	r0, [sp, #20]
 8011e02:	f7ff fa71 	bl	80112e8 <quorem>
 8011e06:	0039      	movs	r1, r7
 8011e08:	0005      	movs	r5, r0
 8011e0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8011e0c:	9805      	ldr	r0, [sp, #20]
 8011e0e:	f001 f825 	bl	8012e5c <__mcmp>
 8011e12:	9a04      	ldr	r2, [sp, #16]
 8011e14:	900d      	str	r0, [sp, #52]	@ 0x34
 8011e16:	0031      	movs	r1, r6
 8011e18:	9803      	ldr	r0, [sp, #12]
 8011e1a:	f001 f83b 	bl	8012e94 <__mdiff>
 8011e1e:	2201      	movs	r2, #1
 8011e20:	68c3      	ldr	r3, [r0, #12]
 8011e22:	0004      	movs	r4, r0
 8011e24:	3530      	adds	r5, #48	@ 0x30
 8011e26:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d104      	bne.n	8011e36 <_dtoa_r+0xa42>
 8011e2c:	0001      	movs	r1, r0
 8011e2e:	9805      	ldr	r0, [sp, #20]
 8011e30:	f001 f814 	bl	8012e5c <__mcmp>
 8011e34:	9009      	str	r0, [sp, #36]	@ 0x24
 8011e36:	0021      	movs	r1, r4
 8011e38:	9803      	ldr	r0, [sp, #12]
 8011e3a:	f000 fd81 	bl	8012940 <_Bfree>
 8011e3e:	9b06      	ldr	r3, [sp, #24]
 8011e40:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011e42:	1c5c      	adds	r4, r3, #1
 8011e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e46:	4313      	orrs	r3, r2
 8011e48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e4a:	4313      	orrs	r3, r2
 8011e4c:	d116      	bne.n	8011e7c <_dtoa_r+0xa88>
 8011e4e:	2d39      	cmp	r5, #57	@ 0x39
 8011e50:	d02f      	beq.n	8011eb2 <_dtoa_r+0xabe>
 8011e52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	dd01      	ble.n	8011e5c <_dtoa_r+0xa68>
 8011e58:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011e5a:	3531      	adds	r5, #49	@ 0x31
 8011e5c:	9b06      	ldr	r3, [sp, #24]
 8011e5e:	701d      	strb	r5, [r3, #0]
 8011e60:	e532      	b.n	80118c8 <_dtoa_r+0x4d4>
 8011e62:	46c0      	nop			@ (mov r8, r8)
 8011e64:	40240000 	.word	0x40240000
 8011e68:	00000433 	.word	0x00000433
 8011e6c:	7ff00000 	.word	0x7ff00000
 8011e70:	08016584 	.word	0x08016584
 8011e74:	0801652c 	.word	0x0801652c
 8011e78:	000002ef 	.word	0x000002ef
 8011e7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	db04      	blt.n	8011e8c <_dtoa_r+0xa98>
 8011e82:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011e84:	4313      	orrs	r3, r2
 8011e86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	d11e      	bne.n	8011eca <_dtoa_r+0xad6>
 8011e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	dde4      	ble.n	8011e5c <_dtoa_r+0xa68>
 8011e92:	9905      	ldr	r1, [sp, #20]
 8011e94:	2201      	movs	r2, #1
 8011e96:	9803      	ldr	r0, [sp, #12]
 8011e98:	f000 ff74 	bl	8012d84 <__lshift>
 8011e9c:	0031      	movs	r1, r6
 8011e9e:	9005      	str	r0, [sp, #20]
 8011ea0:	f000 ffdc 	bl	8012e5c <__mcmp>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	dc02      	bgt.n	8011eae <_dtoa_r+0xaba>
 8011ea8:	d1d8      	bne.n	8011e5c <_dtoa_r+0xa68>
 8011eaa:	07eb      	lsls	r3, r5, #31
 8011eac:	d5d6      	bpl.n	8011e5c <_dtoa_r+0xa68>
 8011eae:	2d39      	cmp	r5, #57	@ 0x39
 8011eb0:	d1d2      	bne.n	8011e58 <_dtoa_r+0xa64>
 8011eb2:	2339      	movs	r3, #57	@ 0x39
 8011eb4:	9a06      	ldr	r2, [sp, #24]
 8011eb6:	7013      	strb	r3, [r2, #0]
 8011eb8:	0023      	movs	r3, r4
 8011eba:	001c      	movs	r4, r3
 8011ebc:	3b01      	subs	r3, #1
 8011ebe:	781a      	ldrb	r2, [r3, #0]
 8011ec0:	2a39      	cmp	r2, #57	@ 0x39
 8011ec2:	d050      	beq.n	8011f66 <_dtoa_r+0xb72>
 8011ec4:	3201      	adds	r2, #1
 8011ec6:	701a      	strb	r2, [r3, #0]
 8011ec8:	e4fe      	b.n	80118c8 <_dtoa_r+0x4d4>
 8011eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	dd03      	ble.n	8011ed8 <_dtoa_r+0xae4>
 8011ed0:	2d39      	cmp	r5, #57	@ 0x39
 8011ed2:	d0ee      	beq.n	8011eb2 <_dtoa_r+0xabe>
 8011ed4:	3501      	adds	r5, #1
 8011ed6:	e7c1      	b.n	8011e5c <_dtoa_r+0xa68>
 8011ed8:	9b06      	ldr	r3, [sp, #24]
 8011eda:	9a06      	ldr	r2, [sp, #24]
 8011edc:	701d      	strb	r5, [r3, #0]
 8011ede:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	d02b      	beq.n	8011f3c <_dtoa_r+0xb48>
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	220a      	movs	r2, #10
 8011ee8:	9905      	ldr	r1, [sp, #20]
 8011eea:	9803      	ldr	r0, [sp, #12]
 8011eec:	f000 fd4c 	bl	8012988 <__multadd>
 8011ef0:	9b04      	ldr	r3, [sp, #16]
 8011ef2:	9005      	str	r0, [sp, #20]
 8011ef4:	429f      	cmp	r7, r3
 8011ef6:	d109      	bne.n	8011f0c <_dtoa_r+0xb18>
 8011ef8:	0039      	movs	r1, r7
 8011efa:	2300      	movs	r3, #0
 8011efc:	220a      	movs	r2, #10
 8011efe:	9803      	ldr	r0, [sp, #12]
 8011f00:	f000 fd42 	bl	8012988 <__multadd>
 8011f04:	0007      	movs	r7, r0
 8011f06:	9004      	str	r0, [sp, #16]
 8011f08:	9406      	str	r4, [sp, #24]
 8011f0a:	e778      	b.n	8011dfe <_dtoa_r+0xa0a>
 8011f0c:	0039      	movs	r1, r7
 8011f0e:	2300      	movs	r3, #0
 8011f10:	220a      	movs	r2, #10
 8011f12:	9803      	ldr	r0, [sp, #12]
 8011f14:	f000 fd38 	bl	8012988 <__multadd>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	0007      	movs	r7, r0
 8011f1c:	220a      	movs	r2, #10
 8011f1e:	9904      	ldr	r1, [sp, #16]
 8011f20:	9803      	ldr	r0, [sp, #12]
 8011f22:	f000 fd31 	bl	8012988 <__multadd>
 8011f26:	9004      	str	r0, [sp, #16]
 8011f28:	e7ee      	b.n	8011f08 <_dtoa_r+0xb14>
 8011f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f2c:	2401      	movs	r4, #1
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	dd00      	ble.n	8011f34 <_dtoa_r+0xb40>
 8011f32:	001c      	movs	r4, r3
 8011f34:	9704      	str	r7, [sp, #16]
 8011f36:	2700      	movs	r7, #0
 8011f38:	9b08      	ldr	r3, [sp, #32]
 8011f3a:	191c      	adds	r4, r3, r4
 8011f3c:	9905      	ldr	r1, [sp, #20]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	9803      	ldr	r0, [sp, #12]
 8011f42:	f000 ff1f 	bl	8012d84 <__lshift>
 8011f46:	0031      	movs	r1, r6
 8011f48:	9005      	str	r0, [sp, #20]
 8011f4a:	f000 ff87 	bl	8012e5c <__mcmp>
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	dcb2      	bgt.n	8011eb8 <_dtoa_r+0xac4>
 8011f52:	d101      	bne.n	8011f58 <_dtoa_r+0xb64>
 8011f54:	07ed      	lsls	r5, r5, #31
 8011f56:	d4af      	bmi.n	8011eb8 <_dtoa_r+0xac4>
 8011f58:	0023      	movs	r3, r4
 8011f5a:	001c      	movs	r4, r3
 8011f5c:	3b01      	subs	r3, #1
 8011f5e:	781a      	ldrb	r2, [r3, #0]
 8011f60:	2a30      	cmp	r2, #48	@ 0x30
 8011f62:	d0fa      	beq.n	8011f5a <_dtoa_r+0xb66>
 8011f64:	e4b0      	b.n	80118c8 <_dtoa_r+0x4d4>
 8011f66:	9a08      	ldr	r2, [sp, #32]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d1a6      	bne.n	8011eba <_dtoa_r+0xac6>
 8011f6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f6e:	3301      	adds	r3, #1
 8011f70:	930c      	str	r3, [sp, #48]	@ 0x30
 8011f72:	2331      	movs	r3, #49	@ 0x31
 8011f74:	7013      	strb	r3, [r2, #0]
 8011f76:	e4a7      	b.n	80118c8 <_dtoa_r+0x4d4>
 8011f78:	4b14      	ldr	r3, [pc, #80]	@ (8011fcc <_dtoa_r+0xbd8>)
 8011f7a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8011f7c:	9308      	str	r3, [sp, #32]
 8011f7e:	4b14      	ldr	r3, [pc, #80]	@ (8011fd0 <_dtoa_r+0xbdc>)
 8011f80:	2a00      	cmp	r2, #0
 8011f82:	d001      	beq.n	8011f88 <_dtoa_r+0xb94>
 8011f84:	f7ff fa7e 	bl	8011484 <_dtoa_r+0x90>
 8011f88:	f7ff fa7e 	bl	8011488 <_dtoa_r+0x94>
 8011f8c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	dc00      	bgt.n	8011f94 <_dtoa_r+0xba0>
 8011f92:	e648      	b.n	8011c26 <_dtoa_r+0x832>
 8011f94:	2001      	movs	r0, #1
 8011f96:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8011f98:	e665      	b.n	8011c66 <_dtoa_r+0x872>
 8011f9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	dc00      	bgt.n	8011fa2 <_dtoa_r+0xbae>
 8011fa0:	e6a9      	b.n	8011cf6 <_dtoa_r+0x902>
 8011fa2:	2400      	movs	r4, #0
 8011fa4:	0031      	movs	r1, r6
 8011fa6:	9805      	ldr	r0, [sp, #20]
 8011fa8:	f7ff f99e 	bl	80112e8 <quorem>
 8011fac:	9b08      	ldr	r3, [sp, #32]
 8011fae:	3030      	adds	r0, #48	@ 0x30
 8011fb0:	5518      	strb	r0, [r3, r4]
 8011fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011fb4:	3401      	adds	r4, #1
 8011fb6:	0005      	movs	r5, r0
 8011fb8:	42a3      	cmp	r3, r4
 8011fba:	ddb6      	ble.n	8011f2a <_dtoa_r+0xb36>
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	220a      	movs	r2, #10
 8011fc0:	9905      	ldr	r1, [sp, #20]
 8011fc2:	9803      	ldr	r0, [sp, #12]
 8011fc4:	f000 fce0 	bl	8012988 <__multadd>
 8011fc8:	9005      	str	r0, [sp, #20]
 8011fca:	e7eb      	b.n	8011fa4 <_dtoa_r+0xbb0>
 8011fcc:	0801651f 	.word	0x0801651f
 8011fd0:	08016527 	.word	0x08016527

08011fd4 <_free_r>:
 8011fd4:	b570      	push	{r4, r5, r6, lr}
 8011fd6:	0005      	movs	r5, r0
 8011fd8:	1e0c      	subs	r4, r1, #0
 8011fda:	d010      	beq.n	8011ffe <_free_r+0x2a>
 8011fdc:	3c04      	subs	r4, #4
 8011fde:	6823      	ldr	r3, [r4, #0]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	da00      	bge.n	8011fe6 <_free_r+0x12>
 8011fe4:	18e4      	adds	r4, r4, r3
 8011fe6:	0028      	movs	r0, r5
 8011fe8:	f000 fc56 	bl	8012898 <__malloc_lock>
 8011fec:	4a1d      	ldr	r2, [pc, #116]	@ (8012064 <_free_r+0x90>)
 8011fee:	6813      	ldr	r3, [r2, #0]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d105      	bne.n	8012000 <_free_r+0x2c>
 8011ff4:	6063      	str	r3, [r4, #4]
 8011ff6:	6014      	str	r4, [r2, #0]
 8011ff8:	0028      	movs	r0, r5
 8011ffa:	f000 fc55 	bl	80128a8 <__malloc_unlock>
 8011ffe:	bd70      	pop	{r4, r5, r6, pc}
 8012000:	42a3      	cmp	r3, r4
 8012002:	d908      	bls.n	8012016 <_free_r+0x42>
 8012004:	6820      	ldr	r0, [r4, #0]
 8012006:	1821      	adds	r1, r4, r0
 8012008:	428b      	cmp	r3, r1
 801200a:	d1f3      	bne.n	8011ff4 <_free_r+0x20>
 801200c:	6819      	ldr	r1, [r3, #0]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	1809      	adds	r1, r1, r0
 8012012:	6021      	str	r1, [r4, #0]
 8012014:	e7ee      	b.n	8011ff4 <_free_r+0x20>
 8012016:	001a      	movs	r2, r3
 8012018:	685b      	ldr	r3, [r3, #4]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d001      	beq.n	8012022 <_free_r+0x4e>
 801201e:	42a3      	cmp	r3, r4
 8012020:	d9f9      	bls.n	8012016 <_free_r+0x42>
 8012022:	6811      	ldr	r1, [r2, #0]
 8012024:	1850      	adds	r0, r2, r1
 8012026:	42a0      	cmp	r0, r4
 8012028:	d10b      	bne.n	8012042 <_free_r+0x6e>
 801202a:	6820      	ldr	r0, [r4, #0]
 801202c:	1809      	adds	r1, r1, r0
 801202e:	1850      	adds	r0, r2, r1
 8012030:	6011      	str	r1, [r2, #0]
 8012032:	4283      	cmp	r3, r0
 8012034:	d1e0      	bne.n	8011ff8 <_free_r+0x24>
 8012036:	6818      	ldr	r0, [r3, #0]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	1841      	adds	r1, r0, r1
 801203c:	6011      	str	r1, [r2, #0]
 801203e:	6053      	str	r3, [r2, #4]
 8012040:	e7da      	b.n	8011ff8 <_free_r+0x24>
 8012042:	42a0      	cmp	r0, r4
 8012044:	d902      	bls.n	801204c <_free_r+0x78>
 8012046:	230c      	movs	r3, #12
 8012048:	602b      	str	r3, [r5, #0]
 801204a:	e7d5      	b.n	8011ff8 <_free_r+0x24>
 801204c:	6820      	ldr	r0, [r4, #0]
 801204e:	1821      	adds	r1, r4, r0
 8012050:	428b      	cmp	r3, r1
 8012052:	d103      	bne.n	801205c <_free_r+0x88>
 8012054:	6819      	ldr	r1, [r3, #0]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	1809      	adds	r1, r1, r0
 801205a:	6021      	str	r1, [r4, #0]
 801205c:	6063      	str	r3, [r4, #4]
 801205e:	6054      	str	r4, [r2, #4]
 8012060:	e7ca      	b.n	8011ff8 <_free_r+0x24>
 8012062:	46c0      	nop			@ (mov r8, r8)
 8012064:	20000618 	.word	0x20000618

08012068 <rshift>:
 8012068:	0002      	movs	r2, r0
 801206a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801206c:	6904      	ldr	r4, [r0, #16]
 801206e:	b085      	sub	sp, #20
 8012070:	3214      	adds	r2, #20
 8012072:	114b      	asrs	r3, r1, #5
 8012074:	0016      	movs	r6, r2
 8012076:	9302      	str	r3, [sp, #8]
 8012078:	429c      	cmp	r4, r3
 801207a:	dd31      	ble.n	80120e0 <rshift+0x78>
 801207c:	261f      	movs	r6, #31
 801207e:	000f      	movs	r7, r1
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	00a5      	lsls	r5, r4, #2
 8012084:	18d3      	adds	r3, r2, r3
 8012086:	4037      	ands	r7, r6
 8012088:	1955      	adds	r5, r2, r5
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	9701      	str	r7, [sp, #4]
 801208e:	4231      	tst	r1, r6
 8012090:	d10d      	bne.n	80120ae <rshift+0x46>
 8012092:	0016      	movs	r6, r2
 8012094:	0019      	movs	r1, r3
 8012096:	428d      	cmp	r5, r1
 8012098:	d836      	bhi.n	8012108 <rshift+0xa0>
 801209a:	9b00      	ldr	r3, [sp, #0]
 801209c:	2600      	movs	r6, #0
 801209e:	3b03      	subs	r3, #3
 80120a0:	429d      	cmp	r5, r3
 80120a2:	d302      	bcc.n	80120aa <rshift+0x42>
 80120a4:	9b02      	ldr	r3, [sp, #8]
 80120a6:	1ae4      	subs	r4, r4, r3
 80120a8:	00a6      	lsls	r6, r4, #2
 80120aa:	1996      	adds	r6, r2, r6
 80120ac:	e018      	b.n	80120e0 <rshift+0x78>
 80120ae:	2120      	movs	r1, #32
 80120b0:	9e01      	ldr	r6, [sp, #4]
 80120b2:	9f01      	ldr	r7, [sp, #4]
 80120b4:	1b89      	subs	r1, r1, r6
 80120b6:	9e00      	ldr	r6, [sp, #0]
 80120b8:	9103      	str	r1, [sp, #12]
 80120ba:	ce02      	ldmia	r6!, {r1}
 80120bc:	4694      	mov	ip, r2
 80120be:	40f9      	lsrs	r1, r7
 80120c0:	42b5      	cmp	r5, r6
 80120c2:	d816      	bhi.n	80120f2 <rshift+0x8a>
 80120c4:	9b00      	ldr	r3, [sp, #0]
 80120c6:	2600      	movs	r6, #0
 80120c8:	3301      	adds	r3, #1
 80120ca:	429d      	cmp	r5, r3
 80120cc:	d303      	bcc.n	80120d6 <rshift+0x6e>
 80120ce:	9b02      	ldr	r3, [sp, #8]
 80120d0:	1ae4      	subs	r4, r4, r3
 80120d2:	00a6      	lsls	r6, r4, #2
 80120d4:	3e04      	subs	r6, #4
 80120d6:	1996      	adds	r6, r2, r6
 80120d8:	6031      	str	r1, [r6, #0]
 80120da:	2900      	cmp	r1, #0
 80120dc:	d000      	beq.n	80120e0 <rshift+0x78>
 80120de:	3604      	adds	r6, #4
 80120e0:	1ab1      	subs	r1, r6, r2
 80120e2:	1089      	asrs	r1, r1, #2
 80120e4:	6101      	str	r1, [r0, #16]
 80120e6:	4296      	cmp	r6, r2
 80120e8:	d101      	bne.n	80120ee <rshift+0x86>
 80120ea:	2300      	movs	r3, #0
 80120ec:	6143      	str	r3, [r0, #20]
 80120ee:	b005      	add	sp, #20
 80120f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f2:	6837      	ldr	r7, [r6, #0]
 80120f4:	9b03      	ldr	r3, [sp, #12]
 80120f6:	409f      	lsls	r7, r3
 80120f8:	430f      	orrs	r7, r1
 80120fa:	4661      	mov	r1, ip
 80120fc:	c180      	stmia	r1!, {r7}
 80120fe:	468c      	mov	ip, r1
 8012100:	9b01      	ldr	r3, [sp, #4]
 8012102:	ce02      	ldmia	r6!, {r1}
 8012104:	40d9      	lsrs	r1, r3
 8012106:	e7db      	b.n	80120c0 <rshift+0x58>
 8012108:	c980      	ldmia	r1!, {r7}
 801210a:	c680      	stmia	r6!, {r7}
 801210c:	e7c3      	b.n	8012096 <rshift+0x2e>

0801210e <__hexdig_fun>:
 801210e:	0002      	movs	r2, r0
 8012110:	3a30      	subs	r2, #48	@ 0x30
 8012112:	0003      	movs	r3, r0
 8012114:	2a09      	cmp	r2, #9
 8012116:	d802      	bhi.n	801211e <__hexdig_fun+0x10>
 8012118:	3b20      	subs	r3, #32
 801211a:	b2d8      	uxtb	r0, r3
 801211c:	4770      	bx	lr
 801211e:	0002      	movs	r2, r0
 8012120:	3a61      	subs	r2, #97	@ 0x61
 8012122:	2a05      	cmp	r2, #5
 8012124:	d801      	bhi.n	801212a <__hexdig_fun+0x1c>
 8012126:	3b47      	subs	r3, #71	@ 0x47
 8012128:	e7f7      	b.n	801211a <__hexdig_fun+0xc>
 801212a:	001a      	movs	r2, r3
 801212c:	3a41      	subs	r2, #65	@ 0x41
 801212e:	2000      	movs	r0, #0
 8012130:	2a05      	cmp	r2, #5
 8012132:	d8f3      	bhi.n	801211c <__hexdig_fun+0xe>
 8012134:	3b27      	subs	r3, #39	@ 0x27
 8012136:	e7f0      	b.n	801211a <__hexdig_fun+0xc>

08012138 <__gethex>:
 8012138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801213a:	b089      	sub	sp, #36	@ 0x24
 801213c:	9307      	str	r3, [sp, #28]
 801213e:	680b      	ldr	r3, [r1, #0]
 8012140:	9201      	str	r2, [sp, #4]
 8012142:	9003      	str	r0, [sp, #12]
 8012144:	9106      	str	r1, [sp, #24]
 8012146:	1c9a      	adds	r2, r3, #2
 8012148:	0011      	movs	r1, r2
 801214a:	3201      	adds	r2, #1
 801214c:	1e50      	subs	r0, r2, #1
 801214e:	7800      	ldrb	r0, [r0, #0]
 8012150:	2830      	cmp	r0, #48	@ 0x30
 8012152:	d0f9      	beq.n	8012148 <__gethex+0x10>
 8012154:	1acb      	subs	r3, r1, r3
 8012156:	3b02      	subs	r3, #2
 8012158:	9305      	str	r3, [sp, #20]
 801215a:	9100      	str	r1, [sp, #0]
 801215c:	f7ff ffd7 	bl	801210e <__hexdig_fun>
 8012160:	2300      	movs	r3, #0
 8012162:	001d      	movs	r5, r3
 8012164:	9302      	str	r3, [sp, #8]
 8012166:	4298      	cmp	r0, r3
 8012168:	d11e      	bne.n	80121a8 <__gethex+0x70>
 801216a:	2201      	movs	r2, #1
 801216c:	49a6      	ldr	r1, [pc, #664]	@ (8012408 <__gethex+0x2d0>)
 801216e:	9800      	ldr	r0, [sp, #0]
 8012170:	f7fe ff90 	bl	8011094 <strncmp>
 8012174:	0007      	movs	r7, r0
 8012176:	42a8      	cmp	r0, r5
 8012178:	d000      	beq.n	801217c <__gethex+0x44>
 801217a:	e06a      	b.n	8012252 <__gethex+0x11a>
 801217c:	9b00      	ldr	r3, [sp, #0]
 801217e:	7858      	ldrb	r0, [r3, #1]
 8012180:	1c5c      	adds	r4, r3, #1
 8012182:	f7ff ffc4 	bl	801210e <__hexdig_fun>
 8012186:	2301      	movs	r3, #1
 8012188:	9302      	str	r3, [sp, #8]
 801218a:	42a8      	cmp	r0, r5
 801218c:	d02f      	beq.n	80121ee <__gethex+0xb6>
 801218e:	9400      	str	r4, [sp, #0]
 8012190:	9b00      	ldr	r3, [sp, #0]
 8012192:	7818      	ldrb	r0, [r3, #0]
 8012194:	2830      	cmp	r0, #48	@ 0x30
 8012196:	d009      	beq.n	80121ac <__gethex+0x74>
 8012198:	f7ff ffb9 	bl	801210e <__hexdig_fun>
 801219c:	4242      	negs	r2, r0
 801219e:	4142      	adcs	r2, r0
 80121a0:	2301      	movs	r3, #1
 80121a2:	0025      	movs	r5, r4
 80121a4:	9202      	str	r2, [sp, #8]
 80121a6:	9305      	str	r3, [sp, #20]
 80121a8:	9c00      	ldr	r4, [sp, #0]
 80121aa:	e004      	b.n	80121b6 <__gethex+0x7e>
 80121ac:	9b00      	ldr	r3, [sp, #0]
 80121ae:	3301      	adds	r3, #1
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	e7ed      	b.n	8012190 <__gethex+0x58>
 80121b4:	3401      	adds	r4, #1
 80121b6:	7820      	ldrb	r0, [r4, #0]
 80121b8:	f7ff ffa9 	bl	801210e <__hexdig_fun>
 80121bc:	1e07      	subs	r7, r0, #0
 80121be:	d1f9      	bne.n	80121b4 <__gethex+0x7c>
 80121c0:	2201      	movs	r2, #1
 80121c2:	0020      	movs	r0, r4
 80121c4:	4990      	ldr	r1, [pc, #576]	@ (8012408 <__gethex+0x2d0>)
 80121c6:	f7fe ff65 	bl	8011094 <strncmp>
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d10d      	bne.n	80121ea <__gethex+0xb2>
 80121ce:	2d00      	cmp	r5, #0
 80121d0:	d106      	bne.n	80121e0 <__gethex+0xa8>
 80121d2:	3401      	adds	r4, #1
 80121d4:	0025      	movs	r5, r4
 80121d6:	7820      	ldrb	r0, [r4, #0]
 80121d8:	f7ff ff99 	bl	801210e <__hexdig_fun>
 80121dc:	2800      	cmp	r0, #0
 80121de:	d102      	bne.n	80121e6 <__gethex+0xae>
 80121e0:	1b2d      	subs	r5, r5, r4
 80121e2:	00af      	lsls	r7, r5, #2
 80121e4:	e003      	b.n	80121ee <__gethex+0xb6>
 80121e6:	3401      	adds	r4, #1
 80121e8:	e7f5      	b.n	80121d6 <__gethex+0x9e>
 80121ea:	2d00      	cmp	r5, #0
 80121ec:	d1f8      	bne.n	80121e0 <__gethex+0xa8>
 80121ee:	2220      	movs	r2, #32
 80121f0:	7823      	ldrb	r3, [r4, #0]
 80121f2:	0026      	movs	r6, r4
 80121f4:	4393      	bics	r3, r2
 80121f6:	2b50      	cmp	r3, #80	@ 0x50
 80121f8:	d11d      	bne.n	8012236 <__gethex+0xfe>
 80121fa:	7863      	ldrb	r3, [r4, #1]
 80121fc:	2b2b      	cmp	r3, #43	@ 0x2b
 80121fe:	d02d      	beq.n	801225c <__gethex+0x124>
 8012200:	2b2d      	cmp	r3, #45	@ 0x2d
 8012202:	d02f      	beq.n	8012264 <__gethex+0x12c>
 8012204:	2300      	movs	r3, #0
 8012206:	1c66      	adds	r6, r4, #1
 8012208:	9304      	str	r3, [sp, #16]
 801220a:	7830      	ldrb	r0, [r6, #0]
 801220c:	f7ff ff7f 	bl	801210e <__hexdig_fun>
 8012210:	1e43      	subs	r3, r0, #1
 8012212:	b2db      	uxtb	r3, r3
 8012214:	0005      	movs	r5, r0
 8012216:	2b18      	cmp	r3, #24
 8012218:	d82a      	bhi.n	8012270 <__gethex+0x138>
 801221a:	7870      	ldrb	r0, [r6, #1]
 801221c:	f7ff ff77 	bl	801210e <__hexdig_fun>
 8012220:	1e43      	subs	r3, r0, #1
 8012222:	b2db      	uxtb	r3, r3
 8012224:	3601      	adds	r6, #1
 8012226:	3d10      	subs	r5, #16
 8012228:	2b18      	cmp	r3, #24
 801222a:	d91d      	bls.n	8012268 <__gethex+0x130>
 801222c:	9b04      	ldr	r3, [sp, #16]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d000      	beq.n	8012234 <__gethex+0xfc>
 8012232:	426d      	negs	r5, r5
 8012234:	197f      	adds	r7, r7, r5
 8012236:	9b06      	ldr	r3, [sp, #24]
 8012238:	601e      	str	r6, [r3, #0]
 801223a:	9b02      	ldr	r3, [sp, #8]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d019      	beq.n	8012274 <__gethex+0x13c>
 8012240:	9b05      	ldr	r3, [sp, #20]
 8012242:	2606      	movs	r6, #6
 8012244:	425a      	negs	r2, r3
 8012246:	4153      	adcs	r3, r2
 8012248:	425b      	negs	r3, r3
 801224a:	401e      	ands	r6, r3
 801224c:	0030      	movs	r0, r6
 801224e:	b009      	add	sp, #36	@ 0x24
 8012250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012252:	2301      	movs	r3, #1
 8012254:	2700      	movs	r7, #0
 8012256:	9c00      	ldr	r4, [sp, #0]
 8012258:	9302      	str	r3, [sp, #8]
 801225a:	e7c8      	b.n	80121ee <__gethex+0xb6>
 801225c:	2300      	movs	r3, #0
 801225e:	9304      	str	r3, [sp, #16]
 8012260:	1ca6      	adds	r6, r4, #2
 8012262:	e7d2      	b.n	801220a <__gethex+0xd2>
 8012264:	2301      	movs	r3, #1
 8012266:	e7fa      	b.n	801225e <__gethex+0x126>
 8012268:	230a      	movs	r3, #10
 801226a:	435d      	muls	r5, r3
 801226c:	182d      	adds	r5, r5, r0
 801226e:	e7d4      	b.n	801221a <__gethex+0xe2>
 8012270:	0026      	movs	r6, r4
 8012272:	e7e0      	b.n	8012236 <__gethex+0xfe>
 8012274:	9b00      	ldr	r3, [sp, #0]
 8012276:	9902      	ldr	r1, [sp, #8]
 8012278:	1ae3      	subs	r3, r4, r3
 801227a:	3b01      	subs	r3, #1
 801227c:	2b07      	cmp	r3, #7
 801227e:	dc0a      	bgt.n	8012296 <__gethex+0x15e>
 8012280:	9803      	ldr	r0, [sp, #12]
 8012282:	f000 fb19 	bl	80128b8 <_Balloc>
 8012286:	1e05      	subs	r5, r0, #0
 8012288:	d108      	bne.n	801229c <__gethex+0x164>
 801228a:	002a      	movs	r2, r5
 801228c:	21e4      	movs	r1, #228	@ 0xe4
 801228e:	4b5f      	ldr	r3, [pc, #380]	@ (801240c <__gethex+0x2d4>)
 8012290:	485f      	ldr	r0, [pc, #380]	@ (8012410 <__gethex+0x2d8>)
 8012292:	f7ff f80b 	bl	80112ac <__assert_func>
 8012296:	3101      	adds	r1, #1
 8012298:	105b      	asrs	r3, r3, #1
 801229a:	e7ef      	b.n	801227c <__gethex+0x144>
 801229c:	0003      	movs	r3, r0
 801229e:	3314      	adds	r3, #20
 80122a0:	9302      	str	r3, [sp, #8]
 80122a2:	9305      	str	r3, [sp, #20]
 80122a4:	2300      	movs	r3, #0
 80122a6:	001e      	movs	r6, r3
 80122a8:	9304      	str	r3, [sp, #16]
 80122aa:	9b00      	ldr	r3, [sp, #0]
 80122ac:	42a3      	cmp	r3, r4
 80122ae:	d338      	bcc.n	8012322 <__gethex+0x1ea>
 80122b0:	9c05      	ldr	r4, [sp, #20]
 80122b2:	9b02      	ldr	r3, [sp, #8]
 80122b4:	c440      	stmia	r4!, {r6}
 80122b6:	1ae4      	subs	r4, r4, r3
 80122b8:	10a4      	asrs	r4, r4, #2
 80122ba:	0030      	movs	r0, r6
 80122bc:	612c      	str	r4, [r5, #16]
 80122be:	f000 fbf3 	bl	8012aa8 <__hi0bits>
 80122c2:	9b01      	ldr	r3, [sp, #4]
 80122c4:	0164      	lsls	r4, r4, #5
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	1a26      	subs	r6, r4, r0
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	429e      	cmp	r6, r3
 80122ce:	dd52      	ble.n	8012376 <__gethex+0x23e>
 80122d0:	1af6      	subs	r6, r6, r3
 80122d2:	0031      	movs	r1, r6
 80122d4:	0028      	movs	r0, r5
 80122d6:	f000 ff8e 	bl	80131f6 <__any_on>
 80122da:	1e04      	subs	r4, r0, #0
 80122dc:	d00f      	beq.n	80122fe <__gethex+0x1c6>
 80122de:	2401      	movs	r4, #1
 80122e0:	211f      	movs	r1, #31
 80122e2:	0020      	movs	r0, r4
 80122e4:	1e73      	subs	r3, r6, #1
 80122e6:	4019      	ands	r1, r3
 80122e8:	4088      	lsls	r0, r1
 80122ea:	0001      	movs	r1, r0
 80122ec:	115a      	asrs	r2, r3, #5
 80122ee:	9802      	ldr	r0, [sp, #8]
 80122f0:	0092      	lsls	r2, r2, #2
 80122f2:	5812      	ldr	r2, [r2, r0]
 80122f4:	420a      	tst	r2, r1
 80122f6:	d002      	beq.n	80122fe <__gethex+0x1c6>
 80122f8:	42a3      	cmp	r3, r4
 80122fa:	dc34      	bgt.n	8012366 <__gethex+0x22e>
 80122fc:	2402      	movs	r4, #2
 80122fe:	0031      	movs	r1, r6
 8012300:	0028      	movs	r0, r5
 8012302:	f7ff feb1 	bl	8012068 <rshift>
 8012306:	19bf      	adds	r7, r7, r6
 8012308:	9b01      	ldr	r3, [sp, #4]
 801230a:	689b      	ldr	r3, [r3, #8]
 801230c:	42bb      	cmp	r3, r7
 801230e:	da42      	bge.n	8012396 <__gethex+0x25e>
 8012310:	0029      	movs	r1, r5
 8012312:	9803      	ldr	r0, [sp, #12]
 8012314:	f000 fb14 	bl	8012940 <_Bfree>
 8012318:	2300      	movs	r3, #0
 801231a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801231c:	26a3      	movs	r6, #163	@ 0xa3
 801231e:	6013      	str	r3, [r2, #0]
 8012320:	e794      	b.n	801224c <__gethex+0x114>
 8012322:	3c01      	subs	r4, #1
 8012324:	7823      	ldrb	r3, [r4, #0]
 8012326:	2b2e      	cmp	r3, #46	@ 0x2e
 8012328:	d012      	beq.n	8012350 <__gethex+0x218>
 801232a:	9b04      	ldr	r3, [sp, #16]
 801232c:	2b20      	cmp	r3, #32
 801232e:	d104      	bne.n	801233a <__gethex+0x202>
 8012330:	9b05      	ldr	r3, [sp, #20]
 8012332:	c340      	stmia	r3!, {r6}
 8012334:	2600      	movs	r6, #0
 8012336:	9305      	str	r3, [sp, #20]
 8012338:	9604      	str	r6, [sp, #16]
 801233a:	7820      	ldrb	r0, [r4, #0]
 801233c:	f7ff fee7 	bl	801210e <__hexdig_fun>
 8012340:	230f      	movs	r3, #15
 8012342:	4018      	ands	r0, r3
 8012344:	9b04      	ldr	r3, [sp, #16]
 8012346:	4098      	lsls	r0, r3
 8012348:	3304      	adds	r3, #4
 801234a:	4306      	orrs	r6, r0
 801234c:	9304      	str	r3, [sp, #16]
 801234e:	e7ac      	b.n	80122aa <__gethex+0x172>
 8012350:	9b00      	ldr	r3, [sp, #0]
 8012352:	42a3      	cmp	r3, r4
 8012354:	d8e9      	bhi.n	801232a <__gethex+0x1f2>
 8012356:	2201      	movs	r2, #1
 8012358:	0020      	movs	r0, r4
 801235a:	492b      	ldr	r1, [pc, #172]	@ (8012408 <__gethex+0x2d0>)
 801235c:	f7fe fe9a 	bl	8011094 <strncmp>
 8012360:	2800      	cmp	r0, #0
 8012362:	d1e2      	bne.n	801232a <__gethex+0x1f2>
 8012364:	e7a1      	b.n	80122aa <__gethex+0x172>
 8012366:	0028      	movs	r0, r5
 8012368:	1eb1      	subs	r1, r6, #2
 801236a:	f000 ff44 	bl	80131f6 <__any_on>
 801236e:	2800      	cmp	r0, #0
 8012370:	d0c4      	beq.n	80122fc <__gethex+0x1c4>
 8012372:	2403      	movs	r4, #3
 8012374:	e7c3      	b.n	80122fe <__gethex+0x1c6>
 8012376:	9b00      	ldr	r3, [sp, #0]
 8012378:	2400      	movs	r4, #0
 801237a:	429e      	cmp	r6, r3
 801237c:	dac4      	bge.n	8012308 <__gethex+0x1d0>
 801237e:	1b9e      	subs	r6, r3, r6
 8012380:	0029      	movs	r1, r5
 8012382:	0032      	movs	r2, r6
 8012384:	9803      	ldr	r0, [sp, #12]
 8012386:	f000 fcfd 	bl	8012d84 <__lshift>
 801238a:	0003      	movs	r3, r0
 801238c:	3314      	adds	r3, #20
 801238e:	0005      	movs	r5, r0
 8012390:	1bbf      	subs	r7, r7, r6
 8012392:	9302      	str	r3, [sp, #8]
 8012394:	e7b8      	b.n	8012308 <__gethex+0x1d0>
 8012396:	9b01      	ldr	r3, [sp, #4]
 8012398:	685e      	ldr	r6, [r3, #4]
 801239a:	42be      	cmp	r6, r7
 801239c:	dd6f      	ble.n	801247e <__gethex+0x346>
 801239e:	9b00      	ldr	r3, [sp, #0]
 80123a0:	1bf6      	subs	r6, r6, r7
 80123a2:	42b3      	cmp	r3, r6
 80123a4:	dc36      	bgt.n	8012414 <__gethex+0x2dc>
 80123a6:	9b01      	ldr	r3, [sp, #4]
 80123a8:	68db      	ldr	r3, [r3, #12]
 80123aa:	2b02      	cmp	r3, #2
 80123ac:	d024      	beq.n	80123f8 <__gethex+0x2c0>
 80123ae:	2b03      	cmp	r3, #3
 80123b0:	d026      	beq.n	8012400 <__gethex+0x2c8>
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d117      	bne.n	80123e6 <__gethex+0x2ae>
 80123b6:	9b00      	ldr	r3, [sp, #0]
 80123b8:	42b3      	cmp	r3, r6
 80123ba:	d114      	bne.n	80123e6 <__gethex+0x2ae>
 80123bc:	2b01      	cmp	r3, #1
 80123be:	d10b      	bne.n	80123d8 <__gethex+0x2a0>
 80123c0:	9b01      	ldr	r3, [sp, #4]
 80123c2:	9a07      	ldr	r2, [sp, #28]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	2662      	movs	r6, #98	@ 0x62
 80123c8:	6013      	str	r3, [r2, #0]
 80123ca:	2301      	movs	r3, #1
 80123cc:	9a02      	ldr	r2, [sp, #8]
 80123ce:	612b      	str	r3, [r5, #16]
 80123d0:	6013      	str	r3, [r2, #0]
 80123d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123d4:	601d      	str	r5, [r3, #0]
 80123d6:	e739      	b.n	801224c <__gethex+0x114>
 80123d8:	9900      	ldr	r1, [sp, #0]
 80123da:	0028      	movs	r0, r5
 80123dc:	3901      	subs	r1, #1
 80123de:	f000 ff0a 	bl	80131f6 <__any_on>
 80123e2:	2800      	cmp	r0, #0
 80123e4:	d1ec      	bne.n	80123c0 <__gethex+0x288>
 80123e6:	0029      	movs	r1, r5
 80123e8:	9803      	ldr	r0, [sp, #12]
 80123ea:	f000 faa9 	bl	8012940 <_Bfree>
 80123ee:	2300      	movs	r3, #0
 80123f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123f2:	2650      	movs	r6, #80	@ 0x50
 80123f4:	6013      	str	r3, [r2, #0]
 80123f6:	e729      	b.n	801224c <__gethex+0x114>
 80123f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d1f3      	bne.n	80123e6 <__gethex+0x2ae>
 80123fe:	e7df      	b.n	80123c0 <__gethex+0x288>
 8012400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012402:	2b00      	cmp	r3, #0
 8012404:	d1dc      	bne.n	80123c0 <__gethex+0x288>
 8012406:	e7ee      	b.n	80123e6 <__gethex+0x2ae>
 8012408:	08016434 	.word	0x08016434
 801240c:	08016584 	.word	0x08016584
 8012410:	08016595 	.word	0x08016595
 8012414:	1e77      	subs	r7, r6, #1
 8012416:	2c00      	cmp	r4, #0
 8012418:	d12f      	bne.n	801247a <__gethex+0x342>
 801241a:	2f00      	cmp	r7, #0
 801241c:	d004      	beq.n	8012428 <__gethex+0x2f0>
 801241e:	0039      	movs	r1, r7
 8012420:	0028      	movs	r0, r5
 8012422:	f000 fee8 	bl	80131f6 <__any_on>
 8012426:	0004      	movs	r4, r0
 8012428:	231f      	movs	r3, #31
 801242a:	117a      	asrs	r2, r7, #5
 801242c:	401f      	ands	r7, r3
 801242e:	3b1e      	subs	r3, #30
 8012430:	40bb      	lsls	r3, r7
 8012432:	9902      	ldr	r1, [sp, #8]
 8012434:	0092      	lsls	r2, r2, #2
 8012436:	5852      	ldr	r2, [r2, r1]
 8012438:	421a      	tst	r2, r3
 801243a:	d001      	beq.n	8012440 <__gethex+0x308>
 801243c:	2302      	movs	r3, #2
 801243e:	431c      	orrs	r4, r3
 8012440:	9b00      	ldr	r3, [sp, #0]
 8012442:	0031      	movs	r1, r6
 8012444:	1b9b      	subs	r3, r3, r6
 8012446:	2602      	movs	r6, #2
 8012448:	0028      	movs	r0, r5
 801244a:	9300      	str	r3, [sp, #0]
 801244c:	f7ff fe0c 	bl	8012068 <rshift>
 8012450:	9b01      	ldr	r3, [sp, #4]
 8012452:	685f      	ldr	r7, [r3, #4]
 8012454:	2c00      	cmp	r4, #0
 8012456:	d03f      	beq.n	80124d8 <__gethex+0x3a0>
 8012458:	9b01      	ldr	r3, [sp, #4]
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	2b02      	cmp	r3, #2
 801245e:	d010      	beq.n	8012482 <__gethex+0x34a>
 8012460:	2b03      	cmp	r3, #3
 8012462:	d012      	beq.n	801248a <__gethex+0x352>
 8012464:	2b01      	cmp	r3, #1
 8012466:	d106      	bne.n	8012476 <__gethex+0x33e>
 8012468:	07a2      	lsls	r2, r4, #30
 801246a:	d504      	bpl.n	8012476 <__gethex+0x33e>
 801246c:	9a02      	ldr	r2, [sp, #8]
 801246e:	6812      	ldr	r2, [r2, #0]
 8012470:	4314      	orrs	r4, r2
 8012472:	421c      	tst	r4, r3
 8012474:	d10c      	bne.n	8012490 <__gethex+0x358>
 8012476:	2310      	movs	r3, #16
 8012478:	e02d      	b.n	80124d6 <__gethex+0x39e>
 801247a:	2401      	movs	r4, #1
 801247c:	e7d4      	b.n	8012428 <__gethex+0x2f0>
 801247e:	2601      	movs	r6, #1
 8012480:	e7e8      	b.n	8012454 <__gethex+0x31c>
 8012482:	2301      	movs	r3, #1
 8012484:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012486:	1a9b      	subs	r3, r3, r2
 8012488:	930f      	str	r3, [sp, #60]	@ 0x3c
 801248a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801248c:	2b00      	cmp	r3, #0
 801248e:	d0f2      	beq.n	8012476 <__gethex+0x33e>
 8012490:	692b      	ldr	r3, [r5, #16]
 8012492:	2000      	movs	r0, #0
 8012494:	9302      	str	r3, [sp, #8]
 8012496:	009b      	lsls	r3, r3, #2
 8012498:	9304      	str	r3, [sp, #16]
 801249a:	002b      	movs	r3, r5
 801249c:	9a04      	ldr	r2, [sp, #16]
 801249e:	3314      	adds	r3, #20
 80124a0:	1899      	adds	r1, r3, r2
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	1c54      	adds	r4, r2, #1
 80124a6:	d01c      	beq.n	80124e2 <__gethex+0x3aa>
 80124a8:	3201      	adds	r2, #1
 80124aa:	601a      	str	r2, [r3, #0]
 80124ac:	002b      	movs	r3, r5
 80124ae:	3314      	adds	r3, #20
 80124b0:	2e02      	cmp	r6, #2
 80124b2:	d13f      	bne.n	8012534 <__gethex+0x3fc>
 80124b4:	9a01      	ldr	r2, [sp, #4]
 80124b6:	9900      	ldr	r1, [sp, #0]
 80124b8:	6812      	ldr	r2, [r2, #0]
 80124ba:	3a01      	subs	r2, #1
 80124bc:	428a      	cmp	r2, r1
 80124be:	d109      	bne.n	80124d4 <__gethex+0x39c>
 80124c0:	000a      	movs	r2, r1
 80124c2:	201f      	movs	r0, #31
 80124c4:	4010      	ands	r0, r2
 80124c6:	2201      	movs	r2, #1
 80124c8:	4082      	lsls	r2, r0
 80124ca:	1149      	asrs	r1, r1, #5
 80124cc:	0089      	lsls	r1, r1, #2
 80124ce:	58cb      	ldr	r3, [r1, r3]
 80124d0:	4213      	tst	r3, r2
 80124d2:	d13d      	bne.n	8012550 <__gethex+0x418>
 80124d4:	2320      	movs	r3, #32
 80124d6:	431e      	orrs	r6, r3
 80124d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124da:	601d      	str	r5, [r3, #0]
 80124dc:	9b07      	ldr	r3, [sp, #28]
 80124de:	601f      	str	r7, [r3, #0]
 80124e0:	e6b4      	b.n	801224c <__gethex+0x114>
 80124e2:	c301      	stmia	r3!, {r0}
 80124e4:	4299      	cmp	r1, r3
 80124e6:	d8dc      	bhi.n	80124a2 <__gethex+0x36a>
 80124e8:	68ab      	ldr	r3, [r5, #8]
 80124ea:	9a02      	ldr	r2, [sp, #8]
 80124ec:	429a      	cmp	r2, r3
 80124ee:	db18      	blt.n	8012522 <__gethex+0x3ea>
 80124f0:	6869      	ldr	r1, [r5, #4]
 80124f2:	9803      	ldr	r0, [sp, #12]
 80124f4:	3101      	adds	r1, #1
 80124f6:	f000 f9df 	bl	80128b8 <_Balloc>
 80124fa:	1e04      	subs	r4, r0, #0
 80124fc:	d104      	bne.n	8012508 <__gethex+0x3d0>
 80124fe:	0022      	movs	r2, r4
 8012500:	2184      	movs	r1, #132	@ 0x84
 8012502:	4b1d      	ldr	r3, [pc, #116]	@ (8012578 <__gethex+0x440>)
 8012504:	481d      	ldr	r0, [pc, #116]	@ (801257c <__gethex+0x444>)
 8012506:	e6c4      	b.n	8012292 <__gethex+0x15a>
 8012508:	0029      	movs	r1, r5
 801250a:	692a      	ldr	r2, [r5, #16]
 801250c:	310c      	adds	r1, #12
 801250e:	3202      	adds	r2, #2
 8012510:	0092      	lsls	r2, r2, #2
 8012512:	300c      	adds	r0, #12
 8012514:	f7fe feba 	bl	801128c <memcpy>
 8012518:	0029      	movs	r1, r5
 801251a:	9803      	ldr	r0, [sp, #12]
 801251c:	f000 fa10 	bl	8012940 <_Bfree>
 8012520:	0025      	movs	r5, r4
 8012522:	692b      	ldr	r3, [r5, #16]
 8012524:	1c5a      	adds	r2, r3, #1
 8012526:	612a      	str	r2, [r5, #16]
 8012528:	2201      	movs	r2, #1
 801252a:	3304      	adds	r3, #4
 801252c:	009b      	lsls	r3, r3, #2
 801252e:	18eb      	adds	r3, r5, r3
 8012530:	605a      	str	r2, [r3, #4]
 8012532:	e7bb      	b.n	80124ac <__gethex+0x374>
 8012534:	692a      	ldr	r2, [r5, #16]
 8012536:	9902      	ldr	r1, [sp, #8]
 8012538:	428a      	cmp	r2, r1
 801253a:	dd0b      	ble.n	8012554 <__gethex+0x41c>
 801253c:	2101      	movs	r1, #1
 801253e:	0028      	movs	r0, r5
 8012540:	f7ff fd92 	bl	8012068 <rshift>
 8012544:	9b01      	ldr	r3, [sp, #4]
 8012546:	3701      	adds	r7, #1
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	42bb      	cmp	r3, r7
 801254c:	da00      	bge.n	8012550 <__gethex+0x418>
 801254e:	e6df      	b.n	8012310 <__gethex+0x1d8>
 8012550:	2601      	movs	r6, #1
 8012552:	e7bf      	b.n	80124d4 <__gethex+0x39c>
 8012554:	221f      	movs	r2, #31
 8012556:	9c00      	ldr	r4, [sp, #0]
 8012558:	9900      	ldr	r1, [sp, #0]
 801255a:	4014      	ands	r4, r2
 801255c:	4211      	tst	r1, r2
 801255e:	d0f7      	beq.n	8012550 <__gethex+0x418>
 8012560:	9a04      	ldr	r2, [sp, #16]
 8012562:	189b      	adds	r3, r3, r2
 8012564:	3b04      	subs	r3, #4
 8012566:	6818      	ldr	r0, [r3, #0]
 8012568:	f000 fa9e 	bl	8012aa8 <__hi0bits>
 801256c:	2320      	movs	r3, #32
 801256e:	1b1b      	subs	r3, r3, r4
 8012570:	4298      	cmp	r0, r3
 8012572:	dbe3      	blt.n	801253c <__gethex+0x404>
 8012574:	e7ec      	b.n	8012550 <__gethex+0x418>
 8012576:	46c0      	nop			@ (mov r8, r8)
 8012578:	08016584 	.word	0x08016584
 801257c:	08016595 	.word	0x08016595

08012580 <L_shift>:
 8012580:	2308      	movs	r3, #8
 8012582:	b570      	push	{r4, r5, r6, lr}
 8012584:	2520      	movs	r5, #32
 8012586:	1a9a      	subs	r2, r3, r2
 8012588:	0092      	lsls	r2, r2, #2
 801258a:	1aad      	subs	r5, r5, r2
 801258c:	6843      	ldr	r3, [r0, #4]
 801258e:	6804      	ldr	r4, [r0, #0]
 8012590:	001e      	movs	r6, r3
 8012592:	40ae      	lsls	r6, r5
 8012594:	40d3      	lsrs	r3, r2
 8012596:	4334      	orrs	r4, r6
 8012598:	6004      	str	r4, [r0, #0]
 801259a:	6043      	str	r3, [r0, #4]
 801259c:	3004      	adds	r0, #4
 801259e:	4288      	cmp	r0, r1
 80125a0:	d3f4      	bcc.n	801258c <L_shift+0xc>
 80125a2:	bd70      	pop	{r4, r5, r6, pc}

080125a4 <__match>:
 80125a4:	b530      	push	{r4, r5, lr}
 80125a6:	6803      	ldr	r3, [r0, #0]
 80125a8:	780c      	ldrb	r4, [r1, #0]
 80125aa:	3301      	adds	r3, #1
 80125ac:	2c00      	cmp	r4, #0
 80125ae:	d102      	bne.n	80125b6 <__match+0x12>
 80125b0:	6003      	str	r3, [r0, #0]
 80125b2:	2001      	movs	r0, #1
 80125b4:	bd30      	pop	{r4, r5, pc}
 80125b6:	781a      	ldrb	r2, [r3, #0]
 80125b8:	0015      	movs	r5, r2
 80125ba:	3d41      	subs	r5, #65	@ 0x41
 80125bc:	2d19      	cmp	r5, #25
 80125be:	d800      	bhi.n	80125c2 <__match+0x1e>
 80125c0:	3220      	adds	r2, #32
 80125c2:	3101      	adds	r1, #1
 80125c4:	42a2      	cmp	r2, r4
 80125c6:	d0ef      	beq.n	80125a8 <__match+0x4>
 80125c8:	2000      	movs	r0, #0
 80125ca:	e7f3      	b.n	80125b4 <__match+0x10>

080125cc <__hexnan>:
 80125cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ce:	680b      	ldr	r3, [r1, #0]
 80125d0:	b08b      	sub	sp, #44	@ 0x2c
 80125d2:	9201      	str	r2, [sp, #4]
 80125d4:	9901      	ldr	r1, [sp, #4]
 80125d6:	115a      	asrs	r2, r3, #5
 80125d8:	0092      	lsls	r2, r2, #2
 80125da:	188a      	adds	r2, r1, r2
 80125dc:	9202      	str	r2, [sp, #8]
 80125de:	0019      	movs	r1, r3
 80125e0:	221f      	movs	r2, #31
 80125e2:	4011      	ands	r1, r2
 80125e4:	9008      	str	r0, [sp, #32]
 80125e6:	9106      	str	r1, [sp, #24]
 80125e8:	4213      	tst	r3, r2
 80125ea:	d002      	beq.n	80125f2 <__hexnan+0x26>
 80125ec:	9b02      	ldr	r3, [sp, #8]
 80125ee:	3304      	adds	r3, #4
 80125f0:	9302      	str	r3, [sp, #8]
 80125f2:	9b02      	ldr	r3, [sp, #8]
 80125f4:	2500      	movs	r5, #0
 80125f6:	1f1f      	subs	r7, r3, #4
 80125f8:	003e      	movs	r6, r7
 80125fa:	003c      	movs	r4, r7
 80125fc:	9b08      	ldr	r3, [sp, #32]
 80125fe:	603d      	str	r5, [r7, #0]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	9507      	str	r5, [sp, #28]
 8012604:	9305      	str	r3, [sp, #20]
 8012606:	9503      	str	r5, [sp, #12]
 8012608:	9b05      	ldr	r3, [sp, #20]
 801260a:	3301      	adds	r3, #1
 801260c:	9309      	str	r3, [sp, #36]	@ 0x24
 801260e:	9b05      	ldr	r3, [sp, #20]
 8012610:	785b      	ldrb	r3, [r3, #1]
 8012612:	9304      	str	r3, [sp, #16]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d028      	beq.n	801266a <__hexnan+0x9e>
 8012618:	9804      	ldr	r0, [sp, #16]
 801261a:	f7ff fd78 	bl	801210e <__hexdig_fun>
 801261e:	2800      	cmp	r0, #0
 8012620:	d155      	bne.n	80126ce <__hexnan+0x102>
 8012622:	9b04      	ldr	r3, [sp, #16]
 8012624:	2b20      	cmp	r3, #32
 8012626:	d819      	bhi.n	801265c <__hexnan+0x90>
 8012628:	9b03      	ldr	r3, [sp, #12]
 801262a:	9a07      	ldr	r2, [sp, #28]
 801262c:	4293      	cmp	r3, r2
 801262e:	dd12      	ble.n	8012656 <__hexnan+0x8a>
 8012630:	42b4      	cmp	r4, r6
 8012632:	d206      	bcs.n	8012642 <__hexnan+0x76>
 8012634:	2d07      	cmp	r5, #7
 8012636:	dc04      	bgt.n	8012642 <__hexnan+0x76>
 8012638:	002a      	movs	r2, r5
 801263a:	0031      	movs	r1, r6
 801263c:	0020      	movs	r0, r4
 801263e:	f7ff ff9f 	bl	8012580 <L_shift>
 8012642:	9b01      	ldr	r3, [sp, #4]
 8012644:	2508      	movs	r5, #8
 8012646:	429c      	cmp	r4, r3
 8012648:	d905      	bls.n	8012656 <__hexnan+0x8a>
 801264a:	1f26      	subs	r6, r4, #4
 801264c:	2500      	movs	r5, #0
 801264e:	0034      	movs	r4, r6
 8012650:	9b03      	ldr	r3, [sp, #12]
 8012652:	6035      	str	r5, [r6, #0]
 8012654:	9307      	str	r3, [sp, #28]
 8012656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012658:	9305      	str	r3, [sp, #20]
 801265a:	e7d5      	b.n	8012608 <__hexnan+0x3c>
 801265c:	9b04      	ldr	r3, [sp, #16]
 801265e:	2b29      	cmp	r3, #41	@ 0x29
 8012660:	d15a      	bne.n	8012718 <__hexnan+0x14c>
 8012662:	9b05      	ldr	r3, [sp, #20]
 8012664:	9a08      	ldr	r2, [sp, #32]
 8012666:	3302      	adds	r3, #2
 8012668:	6013      	str	r3, [r2, #0]
 801266a:	9b03      	ldr	r3, [sp, #12]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d053      	beq.n	8012718 <__hexnan+0x14c>
 8012670:	42b4      	cmp	r4, r6
 8012672:	d206      	bcs.n	8012682 <__hexnan+0xb6>
 8012674:	2d07      	cmp	r5, #7
 8012676:	dc04      	bgt.n	8012682 <__hexnan+0xb6>
 8012678:	002a      	movs	r2, r5
 801267a:	0031      	movs	r1, r6
 801267c:	0020      	movs	r0, r4
 801267e:	f7ff ff7f 	bl	8012580 <L_shift>
 8012682:	9b01      	ldr	r3, [sp, #4]
 8012684:	429c      	cmp	r4, r3
 8012686:	d936      	bls.n	80126f6 <__hexnan+0x12a>
 8012688:	001a      	movs	r2, r3
 801268a:	0023      	movs	r3, r4
 801268c:	cb02      	ldmia	r3!, {r1}
 801268e:	c202      	stmia	r2!, {r1}
 8012690:	429f      	cmp	r7, r3
 8012692:	d2fb      	bcs.n	801268c <__hexnan+0xc0>
 8012694:	9b02      	ldr	r3, [sp, #8]
 8012696:	1c62      	adds	r2, r4, #1
 8012698:	1ed9      	subs	r1, r3, #3
 801269a:	2304      	movs	r3, #4
 801269c:	4291      	cmp	r1, r2
 801269e:	d305      	bcc.n	80126ac <__hexnan+0xe0>
 80126a0:	9b02      	ldr	r3, [sp, #8]
 80126a2:	3b04      	subs	r3, #4
 80126a4:	1b1b      	subs	r3, r3, r4
 80126a6:	089b      	lsrs	r3, r3, #2
 80126a8:	3301      	adds	r3, #1
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	9a01      	ldr	r2, [sp, #4]
 80126ae:	18d3      	adds	r3, r2, r3
 80126b0:	2200      	movs	r2, #0
 80126b2:	c304      	stmia	r3!, {r2}
 80126b4:	429f      	cmp	r7, r3
 80126b6:	d2fc      	bcs.n	80126b2 <__hexnan+0xe6>
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d104      	bne.n	80126c8 <__hexnan+0xfc>
 80126be:	9b01      	ldr	r3, [sp, #4]
 80126c0:	429f      	cmp	r7, r3
 80126c2:	d127      	bne.n	8012714 <__hexnan+0x148>
 80126c4:	2301      	movs	r3, #1
 80126c6:	603b      	str	r3, [r7, #0]
 80126c8:	2005      	movs	r0, #5
 80126ca:	b00b      	add	sp, #44	@ 0x2c
 80126cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126ce:	9b03      	ldr	r3, [sp, #12]
 80126d0:	3501      	adds	r5, #1
 80126d2:	3301      	adds	r3, #1
 80126d4:	9303      	str	r3, [sp, #12]
 80126d6:	2d08      	cmp	r5, #8
 80126d8:	dd06      	ble.n	80126e8 <__hexnan+0x11c>
 80126da:	9b01      	ldr	r3, [sp, #4]
 80126dc:	429c      	cmp	r4, r3
 80126de:	d9ba      	bls.n	8012656 <__hexnan+0x8a>
 80126e0:	2300      	movs	r3, #0
 80126e2:	2501      	movs	r5, #1
 80126e4:	3c04      	subs	r4, #4
 80126e6:	6023      	str	r3, [r4, #0]
 80126e8:	220f      	movs	r2, #15
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	4010      	ands	r0, r2
 80126ee:	011b      	lsls	r3, r3, #4
 80126f0:	4303      	orrs	r3, r0
 80126f2:	6023      	str	r3, [r4, #0]
 80126f4:	e7af      	b.n	8012656 <__hexnan+0x8a>
 80126f6:	9b06      	ldr	r3, [sp, #24]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d0dd      	beq.n	80126b8 <__hexnan+0xec>
 80126fc:	2320      	movs	r3, #32
 80126fe:	9a06      	ldr	r2, [sp, #24]
 8012700:	9902      	ldr	r1, [sp, #8]
 8012702:	1a9b      	subs	r3, r3, r2
 8012704:	2201      	movs	r2, #1
 8012706:	4252      	negs	r2, r2
 8012708:	40da      	lsrs	r2, r3
 801270a:	3904      	subs	r1, #4
 801270c:	680b      	ldr	r3, [r1, #0]
 801270e:	4013      	ands	r3, r2
 8012710:	600b      	str	r3, [r1, #0]
 8012712:	e7d1      	b.n	80126b8 <__hexnan+0xec>
 8012714:	3f04      	subs	r7, #4
 8012716:	e7cf      	b.n	80126b8 <__hexnan+0xec>
 8012718:	2004      	movs	r0, #4
 801271a:	e7d6      	b.n	80126ca <__hexnan+0xfe>

0801271c <malloc>:
 801271c:	b510      	push	{r4, lr}
 801271e:	4b03      	ldr	r3, [pc, #12]	@ (801272c <malloc+0x10>)
 8012720:	0001      	movs	r1, r0
 8012722:	6818      	ldr	r0, [r3, #0]
 8012724:	f000 f826 	bl	8012774 <_malloc_r>
 8012728:	bd10      	pop	{r4, pc}
 801272a:	46c0      	nop			@ (mov r8, r8)
 801272c:	200001a4 	.word	0x200001a4

08012730 <sbrk_aligned>:
 8012730:	b570      	push	{r4, r5, r6, lr}
 8012732:	4e0f      	ldr	r6, [pc, #60]	@ (8012770 <sbrk_aligned+0x40>)
 8012734:	000d      	movs	r5, r1
 8012736:	6831      	ldr	r1, [r6, #0]
 8012738:	0004      	movs	r4, r0
 801273a:	2900      	cmp	r1, #0
 801273c:	d102      	bne.n	8012744 <sbrk_aligned+0x14>
 801273e:	f000 ffbd 	bl	80136bc <_sbrk_r>
 8012742:	6030      	str	r0, [r6, #0]
 8012744:	0029      	movs	r1, r5
 8012746:	0020      	movs	r0, r4
 8012748:	f000 ffb8 	bl	80136bc <_sbrk_r>
 801274c:	1c43      	adds	r3, r0, #1
 801274e:	d103      	bne.n	8012758 <sbrk_aligned+0x28>
 8012750:	2501      	movs	r5, #1
 8012752:	426d      	negs	r5, r5
 8012754:	0028      	movs	r0, r5
 8012756:	bd70      	pop	{r4, r5, r6, pc}
 8012758:	2303      	movs	r3, #3
 801275a:	1cc5      	adds	r5, r0, #3
 801275c:	439d      	bics	r5, r3
 801275e:	42a8      	cmp	r0, r5
 8012760:	d0f8      	beq.n	8012754 <sbrk_aligned+0x24>
 8012762:	1a29      	subs	r1, r5, r0
 8012764:	0020      	movs	r0, r4
 8012766:	f000 ffa9 	bl	80136bc <_sbrk_r>
 801276a:	3001      	adds	r0, #1
 801276c:	d1f2      	bne.n	8012754 <sbrk_aligned+0x24>
 801276e:	e7ef      	b.n	8012750 <sbrk_aligned+0x20>
 8012770:	20000614 	.word	0x20000614

08012774 <_malloc_r>:
 8012774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012776:	2203      	movs	r2, #3
 8012778:	1ccb      	adds	r3, r1, #3
 801277a:	4393      	bics	r3, r2
 801277c:	3308      	adds	r3, #8
 801277e:	0005      	movs	r5, r0
 8012780:	001f      	movs	r7, r3
 8012782:	2b0c      	cmp	r3, #12
 8012784:	d234      	bcs.n	80127f0 <_malloc_r+0x7c>
 8012786:	270c      	movs	r7, #12
 8012788:	42b9      	cmp	r1, r7
 801278a:	d833      	bhi.n	80127f4 <_malloc_r+0x80>
 801278c:	0028      	movs	r0, r5
 801278e:	f000 f883 	bl	8012898 <__malloc_lock>
 8012792:	4e37      	ldr	r6, [pc, #220]	@ (8012870 <_malloc_r+0xfc>)
 8012794:	6833      	ldr	r3, [r6, #0]
 8012796:	001c      	movs	r4, r3
 8012798:	2c00      	cmp	r4, #0
 801279a:	d12f      	bne.n	80127fc <_malloc_r+0x88>
 801279c:	0039      	movs	r1, r7
 801279e:	0028      	movs	r0, r5
 80127a0:	f7ff ffc6 	bl	8012730 <sbrk_aligned>
 80127a4:	0004      	movs	r4, r0
 80127a6:	1c43      	adds	r3, r0, #1
 80127a8:	d15f      	bne.n	801286a <_malloc_r+0xf6>
 80127aa:	6834      	ldr	r4, [r6, #0]
 80127ac:	9400      	str	r4, [sp, #0]
 80127ae:	9b00      	ldr	r3, [sp, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d14a      	bne.n	801284a <_malloc_r+0xd6>
 80127b4:	2c00      	cmp	r4, #0
 80127b6:	d052      	beq.n	801285e <_malloc_r+0xea>
 80127b8:	6823      	ldr	r3, [r4, #0]
 80127ba:	0028      	movs	r0, r5
 80127bc:	18e3      	adds	r3, r4, r3
 80127be:	9900      	ldr	r1, [sp, #0]
 80127c0:	9301      	str	r3, [sp, #4]
 80127c2:	f000 ff7b 	bl	80136bc <_sbrk_r>
 80127c6:	9b01      	ldr	r3, [sp, #4]
 80127c8:	4283      	cmp	r3, r0
 80127ca:	d148      	bne.n	801285e <_malloc_r+0xea>
 80127cc:	6823      	ldr	r3, [r4, #0]
 80127ce:	0028      	movs	r0, r5
 80127d0:	1aff      	subs	r7, r7, r3
 80127d2:	0039      	movs	r1, r7
 80127d4:	f7ff ffac 	bl	8012730 <sbrk_aligned>
 80127d8:	3001      	adds	r0, #1
 80127da:	d040      	beq.n	801285e <_malloc_r+0xea>
 80127dc:	6823      	ldr	r3, [r4, #0]
 80127de:	19db      	adds	r3, r3, r7
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	6833      	ldr	r3, [r6, #0]
 80127e4:	685a      	ldr	r2, [r3, #4]
 80127e6:	2a00      	cmp	r2, #0
 80127e8:	d133      	bne.n	8012852 <_malloc_r+0xde>
 80127ea:	9b00      	ldr	r3, [sp, #0]
 80127ec:	6033      	str	r3, [r6, #0]
 80127ee:	e019      	b.n	8012824 <_malloc_r+0xb0>
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	dac9      	bge.n	8012788 <_malloc_r+0x14>
 80127f4:	230c      	movs	r3, #12
 80127f6:	602b      	str	r3, [r5, #0]
 80127f8:	2000      	movs	r0, #0
 80127fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80127fc:	6821      	ldr	r1, [r4, #0]
 80127fe:	1bc9      	subs	r1, r1, r7
 8012800:	d420      	bmi.n	8012844 <_malloc_r+0xd0>
 8012802:	290b      	cmp	r1, #11
 8012804:	d90a      	bls.n	801281c <_malloc_r+0xa8>
 8012806:	19e2      	adds	r2, r4, r7
 8012808:	6027      	str	r7, [r4, #0]
 801280a:	42a3      	cmp	r3, r4
 801280c:	d104      	bne.n	8012818 <_malloc_r+0xa4>
 801280e:	6032      	str	r2, [r6, #0]
 8012810:	6863      	ldr	r3, [r4, #4]
 8012812:	6011      	str	r1, [r2, #0]
 8012814:	6053      	str	r3, [r2, #4]
 8012816:	e005      	b.n	8012824 <_malloc_r+0xb0>
 8012818:	605a      	str	r2, [r3, #4]
 801281a:	e7f9      	b.n	8012810 <_malloc_r+0x9c>
 801281c:	6862      	ldr	r2, [r4, #4]
 801281e:	42a3      	cmp	r3, r4
 8012820:	d10e      	bne.n	8012840 <_malloc_r+0xcc>
 8012822:	6032      	str	r2, [r6, #0]
 8012824:	0028      	movs	r0, r5
 8012826:	f000 f83f 	bl	80128a8 <__malloc_unlock>
 801282a:	0020      	movs	r0, r4
 801282c:	2207      	movs	r2, #7
 801282e:	300b      	adds	r0, #11
 8012830:	1d23      	adds	r3, r4, #4
 8012832:	4390      	bics	r0, r2
 8012834:	1ac2      	subs	r2, r0, r3
 8012836:	4298      	cmp	r0, r3
 8012838:	d0df      	beq.n	80127fa <_malloc_r+0x86>
 801283a:	1a1b      	subs	r3, r3, r0
 801283c:	50a3      	str	r3, [r4, r2]
 801283e:	e7dc      	b.n	80127fa <_malloc_r+0x86>
 8012840:	605a      	str	r2, [r3, #4]
 8012842:	e7ef      	b.n	8012824 <_malloc_r+0xb0>
 8012844:	0023      	movs	r3, r4
 8012846:	6864      	ldr	r4, [r4, #4]
 8012848:	e7a6      	b.n	8012798 <_malloc_r+0x24>
 801284a:	9c00      	ldr	r4, [sp, #0]
 801284c:	6863      	ldr	r3, [r4, #4]
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	e7ad      	b.n	80127ae <_malloc_r+0x3a>
 8012852:	001a      	movs	r2, r3
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	42a3      	cmp	r3, r4
 8012858:	d1fb      	bne.n	8012852 <_malloc_r+0xde>
 801285a:	2300      	movs	r3, #0
 801285c:	e7da      	b.n	8012814 <_malloc_r+0xa0>
 801285e:	230c      	movs	r3, #12
 8012860:	0028      	movs	r0, r5
 8012862:	602b      	str	r3, [r5, #0]
 8012864:	f000 f820 	bl	80128a8 <__malloc_unlock>
 8012868:	e7c6      	b.n	80127f8 <_malloc_r+0x84>
 801286a:	6007      	str	r7, [r0, #0]
 801286c:	e7da      	b.n	8012824 <_malloc_r+0xb0>
 801286e:	46c0      	nop			@ (mov r8, r8)
 8012870:	20000618 	.word	0x20000618

08012874 <__ascii_mbtowc>:
 8012874:	b082      	sub	sp, #8
 8012876:	2900      	cmp	r1, #0
 8012878:	d100      	bne.n	801287c <__ascii_mbtowc+0x8>
 801287a:	a901      	add	r1, sp, #4
 801287c:	1e10      	subs	r0, r2, #0
 801287e:	d006      	beq.n	801288e <__ascii_mbtowc+0x1a>
 8012880:	2b00      	cmp	r3, #0
 8012882:	d006      	beq.n	8012892 <__ascii_mbtowc+0x1e>
 8012884:	7813      	ldrb	r3, [r2, #0]
 8012886:	600b      	str	r3, [r1, #0]
 8012888:	7810      	ldrb	r0, [r2, #0]
 801288a:	1e43      	subs	r3, r0, #1
 801288c:	4198      	sbcs	r0, r3
 801288e:	b002      	add	sp, #8
 8012890:	4770      	bx	lr
 8012892:	2002      	movs	r0, #2
 8012894:	4240      	negs	r0, r0
 8012896:	e7fa      	b.n	801288e <__ascii_mbtowc+0x1a>

08012898 <__malloc_lock>:
 8012898:	b510      	push	{r4, lr}
 801289a:	4802      	ldr	r0, [pc, #8]	@ (80128a4 <__malloc_lock+0xc>)
 801289c:	f7fe fce9 	bl	8011272 <__retarget_lock_acquire_recursive>
 80128a0:	bd10      	pop	{r4, pc}
 80128a2:	46c0      	nop			@ (mov r8, r8)
 80128a4:	20000610 	.word	0x20000610

080128a8 <__malloc_unlock>:
 80128a8:	b510      	push	{r4, lr}
 80128aa:	4802      	ldr	r0, [pc, #8]	@ (80128b4 <__malloc_unlock+0xc>)
 80128ac:	f7fe fce2 	bl	8011274 <__retarget_lock_release_recursive>
 80128b0:	bd10      	pop	{r4, pc}
 80128b2:	46c0      	nop			@ (mov r8, r8)
 80128b4:	20000610 	.word	0x20000610

080128b8 <_Balloc>:
 80128b8:	b570      	push	{r4, r5, r6, lr}
 80128ba:	69c5      	ldr	r5, [r0, #28]
 80128bc:	0006      	movs	r6, r0
 80128be:	000c      	movs	r4, r1
 80128c0:	2d00      	cmp	r5, #0
 80128c2:	d10e      	bne.n	80128e2 <_Balloc+0x2a>
 80128c4:	2010      	movs	r0, #16
 80128c6:	f7ff ff29 	bl	801271c <malloc>
 80128ca:	1e02      	subs	r2, r0, #0
 80128cc:	61f0      	str	r0, [r6, #28]
 80128ce:	d104      	bne.n	80128da <_Balloc+0x22>
 80128d0:	216b      	movs	r1, #107	@ 0x6b
 80128d2:	4b19      	ldr	r3, [pc, #100]	@ (8012938 <_Balloc+0x80>)
 80128d4:	4819      	ldr	r0, [pc, #100]	@ (801293c <_Balloc+0x84>)
 80128d6:	f7fe fce9 	bl	80112ac <__assert_func>
 80128da:	6045      	str	r5, [r0, #4]
 80128dc:	6085      	str	r5, [r0, #8]
 80128de:	6005      	str	r5, [r0, #0]
 80128e0:	60c5      	str	r5, [r0, #12]
 80128e2:	69f5      	ldr	r5, [r6, #28]
 80128e4:	68eb      	ldr	r3, [r5, #12]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d013      	beq.n	8012912 <_Balloc+0x5a>
 80128ea:	69f3      	ldr	r3, [r6, #28]
 80128ec:	00a2      	lsls	r2, r4, #2
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	189b      	adds	r3, r3, r2
 80128f2:	6818      	ldr	r0, [r3, #0]
 80128f4:	2800      	cmp	r0, #0
 80128f6:	d118      	bne.n	801292a <_Balloc+0x72>
 80128f8:	2101      	movs	r1, #1
 80128fa:	000d      	movs	r5, r1
 80128fc:	40a5      	lsls	r5, r4
 80128fe:	1d6a      	adds	r2, r5, #5
 8012900:	0030      	movs	r0, r6
 8012902:	0092      	lsls	r2, r2, #2
 8012904:	f000 fef3 	bl	80136ee <_calloc_r>
 8012908:	2800      	cmp	r0, #0
 801290a:	d00c      	beq.n	8012926 <_Balloc+0x6e>
 801290c:	6044      	str	r4, [r0, #4]
 801290e:	6085      	str	r5, [r0, #8]
 8012910:	e00d      	b.n	801292e <_Balloc+0x76>
 8012912:	2221      	movs	r2, #33	@ 0x21
 8012914:	2104      	movs	r1, #4
 8012916:	0030      	movs	r0, r6
 8012918:	f000 fee9 	bl	80136ee <_calloc_r>
 801291c:	69f3      	ldr	r3, [r6, #28]
 801291e:	60e8      	str	r0, [r5, #12]
 8012920:	68db      	ldr	r3, [r3, #12]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1e1      	bne.n	80128ea <_Balloc+0x32>
 8012926:	2000      	movs	r0, #0
 8012928:	bd70      	pop	{r4, r5, r6, pc}
 801292a:	6802      	ldr	r2, [r0, #0]
 801292c:	601a      	str	r2, [r3, #0]
 801292e:	2300      	movs	r3, #0
 8012930:	6103      	str	r3, [r0, #16]
 8012932:	60c3      	str	r3, [r0, #12]
 8012934:	e7f8      	b.n	8012928 <_Balloc+0x70>
 8012936:	46c0      	nop			@ (mov r8, r8)
 8012938:	0801646a 	.word	0x0801646a
 801293c:	080165f5 	.word	0x080165f5

08012940 <_Bfree>:
 8012940:	b570      	push	{r4, r5, r6, lr}
 8012942:	69c6      	ldr	r6, [r0, #28]
 8012944:	0005      	movs	r5, r0
 8012946:	000c      	movs	r4, r1
 8012948:	2e00      	cmp	r6, #0
 801294a:	d10e      	bne.n	801296a <_Bfree+0x2a>
 801294c:	2010      	movs	r0, #16
 801294e:	f7ff fee5 	bl	801271c <malloc>
 8012952:	1e02      	subs	r2, r0, #0
 8012954:	61e8      	str	r0, [r5, #28]
 8012956:	d104      	bne.n	8012962 <_Bfree+0x22>
 8012958:	218f      	movs	r1, #143	@ 0x8f
 801295a:	4b09      	ldr	r3, [pc, #36]	@ (8012980 <_Bfree+0x40>)
 801295c:	4809      	ldr	r0, [pc, #36]	@ (8012984 <_Bfree+0x44>)
 801295e:	f7fe fca5 	bl	80112ac <__assert_func>
 8012962:	6046      	str	r6, [r0, #4]
 8012964:	6086      	str	r6, [r0, #8]
 8012966:	6006      	str	r6, [r0, #0]
 8012968:	60c6      	str	r6, [r0, #12]
 801296a:	2c00      	cmp	r4, #0
 801296c:	d007      	beq.n	801297e <_Bfree+0x3e>
 801296e:	69eb      	ldr	r3, [r5, #28]
 8012970:	6862      	ldr	r2, [r4, #4]
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	0092      	lsls	r2, r2, #2
 8012976:	189b      	adds	r3, r3, r2
 8012978:	681a      	ldr	r2, [r3, #0]
 801297a:	6022      	str	r2, [r4, #0]
 801297c:	601c      	str	r4, [r3, #0]
 801297e:	bd70      	pop	{r4, r5, r6, pc}
 8012980:	0801646a 	.word	0x0801646a
 8012984:	080165f5 	.word	0x080165f5

08012988 <__multadd>:
 8012988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801298a:	000f      	movs	r7, r1
 801298c:	9001      	str	r0, [sp, #4]
 801298e:	000c      	movs	r4, r1
 8012990:	001e      	movs	r6, r3
 8012992:	2000      	movs	r0, #0
 8012994:	690d      	ldr	r5, [r1, #16]
 8012996:	3714      	adds	r7, #20
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	3001      	adds	r0, #1
 801299c:	b299      	uxth	r1, r3
 801299e:	4351      	muls	r1, r2
 80129a0:	0c1b      	lsrs	r3, r3, #16
 80129a2:	4353      	muls	r3, r2
 80129a4:	1989      	adds	r1, r1, r6
 80129a6:	0c0e      	lsrs	r6, r1, #16
 80129a8:	199b      	adds	r3, r3, r6
 80129aa:	0c1e      	lsrs	r6, r3, #16
 80129ac:	b289      	uxth	r1, r1
 80129ae:	041b      	lsls	r3, r3, #16
 80129b0:	185b      	adds	r3, r3, r1
 80129b2:	c708      	stmia	r7!, {r3}
 80129b4:	4285      	cmp	r5, r0
 80129b6:	dcef      	bgt.n	8012998 <__multadd+0x10>
 80129b8:	2e00      	cmp	r6, #0
 80129ba:	d022      	beq.n	8012a02 <__multadd+0x7a>
 80129bc:	68a3      	ldr	r3, [r4, #8]
 80129be:	42ab      	cmp	r3, r5
 80129c0:	dc19      	bgt.n	80129f6 <__multadd+0x6e>
 80129c2:	6861      	ldr	r1, [r4, #4]
 80129c4:	9801      	ldr	r0, [sp, #4]
 80129c6:	3101      	adds	r1, #1
 80129c8:	f7ff ff76 	bl	80128b8 <_Balloc>
 80129cc:	1e07      	subs	r7, r0, #0
 80129ce:	d105      	bne.n	80129dc <__multadd+0x54>
 80129d0:	003a      	movs	r2, r7
 80129d2:	21ba      	movs	r1, #186	@ 0xba
 80129d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012a08 <__multadd+0x80>)
 80129d6:	480d      	ldr	r0, [pc, #52]	@ (8012a0c <__multadd+0x84>)
 80129d8:	f7fe fc68 	bl	80112ac <__assert_func>
 80129dc:	0021      	movs	r1, r4
 80129de:	6922      	ldr	r2, [r4, #16]
 80129e0:	310c      	adds	r1, #12
 80129e2:	3202      	adds	r2, #2
 80129e4:	0092      	lsls	r2, r2, #2
 80129e6:	300c      	adds	r0, #12
 80129e8:	f7fe fc50 	bl	801128c <memcpy>
 80129ec:	0021      	movs	r1, r4
 80129ee:	9801      	ldr	r0, [sp, #4]
 80129f0:	f7ff ffa6 	bl	8012940 <_Bfree>
 80129f4:	003c      	movs	r4, r7
 80129f6:	1d2b      	adds	r3, r5, #4
 80129f8:	009b      	lsls	r3, r3, #2
 80129fa:	18e3      	adds	r3, r4, r3
 80129fc:	3501      	adds	r5, #1
 80129fe:	605e      	str	r6, [r3, #4]
 8012a00:	6125      	str	r5, [r4, #16]
 8012a02:	0020      	movs	r0, r4
 8012a04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012a06:	46c0      	nop			@ (mov r8, r8)
 8012a08:	08016584 	.word	0x08016584
 8012a0c:	080165f5 	.word	0x080165f5

08012a10 <__s2b>:
 8012a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a12:	0007      	movs	r7, r0
 8012a14:	0018      	movs	r0, r3
 8012a16:	000c      	movs	r4, r1
 8012a18:	3008      	adds	r0, #8
 8012a1a:	2109      	movs	r1, #9
 8012a1c:	9301      	str	r3, [sp, #4]
 8012a1e:	0015      	movs	r5, r2
 8012a20:	f7ed fc20 	bl	8000264 <__divsi3>
 8012a24:	2301      	movs	r3, #1
 8012a26:	2100      	movs	r1, #0
 8012a28:	4283      	cmp	r3, r0
 8012a2a:	db0a      	blt.n	8012a42 <__s2b+0x32>
 8012a2c:	0038      	movs	r0, r7
 8012a2e:	f7ff ff43 	bl	80128b8 <_Balloc>
 8012a32:	1e01      	subs	r1, r0, #0
 8012a34:	d108      	bne.n	8012a48 <__s2b+0x38>
 8012a36:	000a      	movs	r2, r1
 8012a38:	4b19      	ldr	r3, [pc, #100]	@ (8012aa0 <__s2b+0x90>)
 8012a3a:	481a      	ldr	r0, [pc, #104]	@ (8012aa4 <__s2b+0x94>)
 8012a3c:	31d3      	adds	r1, #211	@ 0xd3
 8012a3e:	f7fe fc35 	bl	80112ac <__assert_func>
 8012a42:	005b      	lsls	r3, r3, #1
 8012a44:	3101      	adds	r1, #1
 8012a46:	e7ef      	b.n	8012a28 <__s2b+0x18>
 8012a48:	9b08      	ldr	r3, [sp, #32]
 8012a4a:	6143      	str	r3, [r0, #20]
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	6103      	str	r3, [r0, #16]
 8012a50:	2d09      	cmp	r5, #9
 8012a52:	dd18      	ble.n	8012a86 <__s2b+0x76>
 8012a54:	0023      	movs	r3, r4
 8012a56:	3309      	adds	r3, #9
 8012a58:	001e      	movs	r6, r3
 8012a5a:	9300      	str	r3, [sp, #0]
 8012a5c:	1964      	adds	r4, r4, r5
 8012a5e:	7833      	ldrb	r3, [r6, #0]
 8012a60:	220a      	movs	r2, #10
 8012a62:	0038      	movs	r0, r7
 8012a64:	3b30      	subs	r3, #48	@ 0x30
 8012a66:	f7ff ff8f 	bl	8012988 <__multadd>
 8012a6a:	3601      	adds	r6, #1
 8012a6c:	0001      	movs	r1, r0
 8012a6e:	42a6      	cmp	r6, r4
 8012a70:	d1f5      	bne.n	8012a5e <__s2b+0x4e>
 8012a72:	002c      	movs	r4, r5
 8012a74:	9b00      	ldr	r3, [sp, #0]
 8012a76:	3c08      	subs	r4, #8
 8012a78:	191c      	adds	r4, r3, r4
 8012a7a:	002e      	movs	r6, r5
 8012a7c:	9b01      	ldr	r3, [sp, #4]
 8012a7e:	429e      	cmp	r6, r3
 8012a80:	db04      	blt.n	8012a8c <__s2b+0x7c>
 8012a82:	0008      	movs	r0, r1
 8012a84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012a86:	2509      	movs	r5, #9
 8012a88:	340a      	adds	r4, #10
 8012a8a:	e7f6      	b.n	8012a7a <__s2b+0x6a>
 8012a8c:	1b63      	subs	r3, r4, r5
 8012a8e:	5d9b      	ldrb	r3, [r3, r6]
 8012a90:	220a      	movs	r2, #10
 8012a92:	0038      	movs	r0, r7
 8012a94:	3b30      	subs	r3, #48	@ 0x30
 8012a96:	f7ff ff77 	bl	8012988 <__multadd>
 8012a9a:	3601      	adds	r6, #1
 8012a9c:	0001      	movs	r1, r0
 8012a9e:	e7ed      	b.n	8012a7c <__s2b+0x6c>
 8012aa0:	08016584 	.word	0x08016584
 8012aa4:	080165f5 	.word	0x080165f5

08012aa8 <__hi0bits>:
 8012aa8:	2280      	movs	r2, #128	@ 0x80
 8012aaa:	0003      	movs	r3, r0
 8012aac:	0252      	lsls	r2, r2, #9
 8012aae:	2000      	movs	r0, #0
 8012ab0:	4293      	cmp	r3, r2
 8012ab2:	d201      	bcs.n	8012ab8 <__hi0bits+0x10>
 8012ab4:	041b      	lsls	r3, r3, #16
 8012ab6:	3010      	adds	r0, #16
 8012ab8:	2280      	movs	r2, #128	@ 0x80
 8012aba:	0452      	lsls	r2, r2, #17
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d201      	bcs.n	8012ac4 <__hi0bits+0x1c>
 8012ac0:	3008      	adds	r0, #8
 8012ac2:	021b      	lsls	r3, r3, #8
 8012ac4:	2280      	movs	r2, #128	@ 0x80
 8012ac6:	0552      	lsls	r2, r2, #21
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	d201      	bcs.n	8012ad0 <__hi0bits+0x28>
 8012acc:	3004      	adds	r0, #4
 8012ace:	011b      	lsls	r3, r3, #4
 8012ad0:	2280      	movs	r2, #128	@ 0x80
 8012ad2:	05d2      	lsls	r2, r2, #23
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	d201      	bcs.n	8012adc <__hi0bits+0x34>
 8012ad8:	3002      	adds	r0, #2
 8012ada:	009b      	lsls	r3, r3, #2
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	db03      	blt.n	8012ae8 <__hi0bits+0x40>
 8012ae0:	3001      	adds	r0, #1
 8012ae2:	4213      	tst	r3, r2
 8012ae4:	d100      	bne.n	8012ae8 <__hi0bits+0x40>
 8012ae6:	2020      	movs	r0, #32
 8012ae8:	4770      	bx	lr

08012aea <__lo0bits>:
 8012aea:	6803      	ldr	r3, [r0, #0]
 8012aec:	0001      	movs	r1, r0
 8012aee:	2207      	movs	r2, #7
 8012af0:	0018      	movs	r0, r3
 8012af2:	4010      	ands	r0, r2
 8012af4:	4213      	tst	r3, r2
 8012af6:	d00d      	beq.n	8012b14 <__lo0bits+0x2a>
 8012af8:	3a06      	subs	r2, #6
 8012afa:	2000      	movs	r0, #0
 8012afc:	4213      	tst	r3, r2
 8012afe:	d105      	bne.n	8012b0c <__lo0bits+0x22>
 8012b00:	3002      	adds	r0, #2
 8012b02:	4203      	tst	r3, r0
 8012b04:	d003      	beq.n	8012b0e <__lo0bits+0x24>
 8012b06:	40d3      	lsrs	r3, r2
 8012b08:	0010      	movs	r0, r2
 8012b0a:	600b      	str	r3, [r1, #0]
 8012b0c:	4770      	bx	lr
 8012b0e:	089b      	lsrs	r3, r3, #2
 8012b10:	600b      	str	r3, [r1, #0]
 8012b12:	e7fb      	b.n	8012b0c <__lo0bits+0x22>
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	2a00      	cmp	r2, #0
 8012b18:	d101      	bne.n	8012b1e <__lo0bits+0x34>
 8012b1a:	2010      	movs	r0, #16
 8012b1c:	0c1b      	lsrs	r3, r3, #16
 8012b1e:	b2da      	uxtb	r2, r3
 8012b20:	2a00      	cmp	r2, #0
 8012b22:	d101      	bne.n	8012b28 <__lo0bits+0x3e>
 8012b24:	3008      	adds	r0, #8
 8012b26:	0a1b      	lsrs	r3, r3, #8
 8012b28:	071a      	lsls	r2, r3, #28
 8012b2a:	d101      	bne.n	8012b30 <__lo0bits+0x46>
 8012b2c:	3004      	adds	r0, #4
 8012b2e:	091b      	lsrs	r3, r3, #4
 8012b30:	079a      	lsls	r2, r3, #30
 8012b32:	d101      	bne.n	8012b38 <__lo0bits+0x4e>
 8012b34:	3002      	adds	r0, #2
 8012b36:	089b      	lsrs	r3, r3, #2
 8012b38:	07da      	lsls	r2, r3, #31
 8012b3a:	d4e9      	bmi.n	8012b10 <__lo0bits+0x26>
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	085b      	lsrs	r3, r3, #1
 8012b40:	d1e6      	bne.n	8012b10 <__lo0bits+0x26>
 8012b42:	2020      	movs	r0, #32
 8012b44:	e7e2      	b.n	8012b0c <__lo0bits+0x22>
	...

08012b48 <__i2b>:
 8012b48:	b510      	push	{r4, lr}
 8012b4a:	000c      	movs	r4, r1
 8012b4c:	2101      	movs	r1, #1
 8012b4e:	f7ff feb3 	bl	80128b8 <_Balloc>
 8012b52:	2800      	cmp	r0, #0
 8012b54:	d107      	bne.n	8012b66 <__i2b+0x1e>
 8012b56:	2146      	movs	r1, #70	@ 0x46
 8012b58:	4c05      	ldr	r4, [pc, #20]	@ (8012b70 <__i2b+0x28>)
 8012b5a:	0002      	movs	r2, r0
 8012b5c:	4b05      	ldr	r3, [pc, #20]	@ (8012b74 <__i2b+0x2c>)
 8012b5e:	0020      	movs	r0, r4
 8012b60:	31ff      	adds	r1, #255	@ 0xff
 8012b62:	f7fe fba3 	bl	80112ac <__assert_func>
 8012b66:	2301      	movs	r3, #1
 8012b68:	6144      	str	r4, [r0, #20]
 8012b6a:	6103      	str	r3, [r0, #16]
 8012b6c:	bd10      	pop	{r4, pc}
 8012b6e:	46c0      	nop			@ (mov r8, r8)
 8012b70:	080165f5 	.word	0x080165f5
 8012b74:	08016584 	.word	0x08016584

08012b78 <__multiply>:
 8012b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b7a:	0014      	movs	r4, r2
 8012b7c:	690a      	ldr	r2, [r1, #16]
 8012b7e:	6923      	ldr	r3, [r4, #16]
 8012b80:	000d      	movs	r5, r1
 8012b82:	b089      	sub	sp, #36	@ 0x24
 8012b84:	429a      	cmp	r2, r3
 8012b86:	db02      	blt.n	8012b8e <__multiply+0x16>
 8012b88:	0023      	movs	r3, r4
 8012b8a:	000c      	movs	r4, r1
 8012b8c:	001d      	movs	r5, r3
 8012b8e:	6927      	ldr	r7, [r4, #16]
 8012b90:	692e      	ldr	r6, [r5, #16]
 8012b92:	6861      	ldr	r1, [r4, #4]
 8012b94:	19bb      	adds	r3, r7, r6
 8012b96:	9300      	str	r3, [sp, #0]
 8012b98:	68a3      	ldr	r3, [r4, #8]
 8012b9a:	19ba      	adds	r2, r7, r6
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	da00      	bge.n	8012ba2 <__multiply+0x2a>
 8012ba0:	3101      	adds	r1, #1
 8012ba2:	f7ff fe89 	bl	80128b8 <_Balloc>
 8012ba6:	4684      	mov	ip, r0
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	d106      	bne.n	8012bba <__multiply+0x42>
 8012bac:	21b1      	movs	r1, #177	@ 0xb1
 8012bae:	4662      	mov	r2, ip
 8012bb0:	4b44      	ldr	r3, [pc, #272]	@ (8012cc4 <__multiply+0x14c>)
 8012bb2:	4845      	ldr	r0, [pc, #276]	@ (8012cc8 <__multiply+0x150>)
 8012bb4:	0049      	lsls	r1, r1, #1
 8012bb6:	f7fe fb79 	bl	80112ac <__assert_func>
 8012bba:	0002      	movs	r2, r0
 8012bbc:	19bb      	adds	r3, r7, r6
 8012bbe:	3214      	adds	r2, #20
 8012bc0:	009b      	lsls	r3, r3, #2
 8012bc2:	18d3      	adds	r3, r2, r3
 8012bc4:	9301      	str	r3, [sp, #4]
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	0013      	movs	r3, r2
 8012bca:	9801      	ldr	r0, [sp, #4]
 8012bcc:	4283      	cmp	r3, r0
 8012bce:	d328      	bcc.n	8012c22 <__multiply+0xaa>
 8012bd0:	0023      	movs	r3, r4
 8012bd2:	00bf      	lsls	r7, r7, #2
 8012bd4:	3314      	adds	r3, #20
 8012bd6:	9304      	str	r3, [sp, #16]
 8012bd8:	3514      	adds	r5, #20
 8012bda:	19db      	adds	r3, r3, r7
 8012bdc:	00b6      	lsls	r6, r6, #2
 8012bde:	9302      	str	r3, [sp, #8]
 8012be0:	19ab      	adds	r3, r5, r6
 8012be2:	9307      	str	r3, [sp, #28]
 8012be4:	2304      	movs	r3, #4
 8012be6:	9305      	str	r3, [sp, #20]
 8012be8:	0023      	movs	r3, r4
 8012bea:	9902      	ldr	r1, [sp, #8]
 8012bec:	3315      	adds	r3, #21
 8012bee:	4299      	cmp	r1, r3
 8012bf0:	d305      	bcc.n	8012bfe <__multiply+0x86>
 8012bf2:	1b0c      	subs	r4, r1, r4
 8012bf4:	3c15      	subs	r4, #21
 8012bf6:	08a4      	lsrs	r4, r4, #2
 8012bf8:	3401      	adds	r4, #1
 8012bfa:	00a3      	lsls	r3, r4, #2
 8012bfc:	9305      	str	r3, [sp, #20]
 8012bfe:	9b07      	ldr	r3, [sp, #28]
 8012c00:	429d      	cmp	r5, r3
 8012c02:	d310      	bcc.n	8012c26 <__multiply+0xae>
 8012c04:	9b00      	ldr	r3, [sp, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	dd05      	ble.n	8012c16 <__multiply+0x9e>
 8012c0a:	9b01      	ldr	r3, [sp, #4]
 8012c0c:	3b04      	subs	r3, #4
 8012c0e:	9301      	str	r3, [sp, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d052      	beq.n	8012cbc <__multiply+0x144>
 8012c16:	4663      	mov	r3, ip
 8012c18:	4660      	mov	r0, ip
 8012c1a:	9a00      	ldr	r2, [sp, #0]
 8012c1c:	611a      	str	r2, [r3, #16]
 8012c1e:	b009      	add	sp, #36	@ 0x24
 8012c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c22:	c302      	stmia	r3!, {r1}
 8012c24:	e7d1      	b.n	8012bca <__multiply+0x52>
 8012c26:	682c      	ldr	r4, [r5, #0]
 8012c28:	b2a4      	uxth	r4, r4
 8012c2a:	2c00      	cmp	r4, #0
 8012c2c:	d01f      	beq.n	8012c6e <__multiply+0xf6>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	0017      	movs	r7, r2
 8012c32:	9e04      	ldr	r6, [sp, #16]
 8012c34:	9303      	str	r3, [sp, #12]
 8012c36:	ce08      	ldmia	r6!, {r3}
 8012c38:	6839      	ldr	r1, [r7, #0]
 8012c3a:	9306      	str	r3, [sp, #24]
 8012c3c:	466b      	mov	r3, sp
 8012c3e:	8b1b      	ldrh	r3, [r3, #24]
 8012c40:	b288      	uxth	r0, r1
 8012c42:	4363      	muls	r3, r4
 8012c44:	181b      	adds	r3, r3, r0
 8012c46:	9803      	ldr	r0, [sp, #12]
 8012c48:	0c09      	lsrs	r1, r1, #16
 8012c4a:	181b      	adds	r3, r3, r0
 8012c4c:	9806      	ldr	r0, [sp, #24]
 8012c4e:	0c00      	lsrs	r0, r0, #16
 8012c50:	4360      	muls	r0, r4
 8012c52:	1840      	adds	r0, r0, r1
 8012c54:	0c19      	lsrs	r1, r3, #16
 8012c56:	1841      	adds	r1, r0, r1
 8012c58:	0c08      	lsrs	r0, r1, #16
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	0409      	lsls	r1, r1, #16
 8012c5e:	4319      	orrs	r1, r3
 8012c60:	9b02      	ldr	r3, [sp, #8]
 8012c62:	9003      	str	r0, [sp, #12]
 8012c64:	c702      	stmia	r7!, {r1}
 8012c66:	42b3      	cmp	r3, r6
 8012c68:	d8e5      	bhi.n	8012c36 <__multiply+0xbe>
 8012c6a:	9b05      	ldr	r3, [sp, #20]
 8012c6c:	50d0      	str	r0, [r2, r3]
 8012c6e:	682c      	ldr	r4, [r5, #0]
 8012c70:	0c24      	lsrs	r4, r4, #16
 8012c72:	d020      	beq.n	8012cb6 <__multiply+0x13e>
 8012c74:	2100      	movs	r1, #0
 8012c76:	0010      	movs	r0, r2
 8012c78:	6813      	ldr	r3, [r2, #0]
 8012c7a:	9e04      	ldr	r6, [sp, #16]
 8012c7c:	9103      	str	r1, [sp, #12]
 8012c7e:	6831      	ldr	r1, [r6, #0]
 8012c80:	6807      	ldr	r7, [r0, #0]
 8012c82:	b289      	uxth	r1, r1
 8012c84:	4361      	muls	r1, r4
 8012c86:	0c3f      	lsrs	r7, r7, #16
 8012c88:	19c9      	adds	r1, r1, r7
 8012c8a:	9f03      	ldr	r7, [sp, #12]
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	19c9      	adds	r1, r1, r7
 8012c90:	040f      	lsls	r7, r1, #16
 8012c92:	431f      	orrs	r7, r3
 8012c94:	6007      	str	r7, [r0, #0]
 8012c96:	ce80      	ldmia	r6!, {r7}
 8012c98:	6843      	ldr	r3, [r0, #4]
 8012c9a:	0c3f      	lsrs	r7, r7, #16
 8012c9c:	4367      	muls	r7, r4
 8012c9e:	b29b      	uxth	r3, r3
 8012ca0:	0c09      	lsrs	r1, r1, #16
 8012ca2:	18fb      	adds	r3, r7, r3
 8012ca4:	185b      	adds	r3, r3, r1
 8012ca6:	0c19      	lsrs	r1, r3, #16
 8012ca8:	9103      	str	r1, [sp, #12]
 8012caa:	9902      	ldr	r1, [sp, #8]
 8012cac:	3004      	adds	r0, #4
 8012cae:	42b1      	cmp	r1, r6
 8012cb0:	d8e5      	bhi.n	8012c7e <__multiply+0x106>
 8012cb2:	9905      	ldr	r1, [sp, #20]
 8012cb4:	5053      	str	r3, [r2, r1]
 8012cb6:	3504      	adds	r5, #4
 8012cb8:	3204      	adds	r2, #4
 8012cba:	e7a0      	b.n	8012bfe <__multiply+0x86>
 8012cbc:	9b00      	ldr	r3, [sp, #0]
 8012cbe:	3b01      	subs	r3, #1
 8012cc0:	9300      	str	r3, [sp, #0]
 8012cc2:	e79f      	b.n	8012c04 <__multiply+0x8c>
 8012cc4:	08016584 	.word	0x08016584
 8012cc8:	080165f5 	.word	0x080165f5

08012ccc <__pow5mult>:
 8012ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cce:	2303      	movs	r3, #3
 8012cd0:	0015      	movs	r5, r2
 8012cd2:	0007      	movs	r7, r0
 8012cd4:	000e      	movs	r6, r1
 8012cd6:	401a      	ands	r2, r3
 8012cd8:	421d      	tst	r5, r3
 8012cda:	d008      	beq.n	8012cee <__pow5mult+0x22>
 8012cdc:	4925      	ldr	r1, [pc, #148]	@ (8012d74 <__pow5mult+0xa8>)
 8012cde:	3a01      	subs	r2, #1
 8012ce0:	0092      	lsls	r2, r2, #2
 8012ce2:	5852      	ldr	r2, [r2, r1]
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	0031      	movs	r1, r6
 8012ce8:	f7ff fe4e 	bl	8012988 <__multadd>
 8012cec:	0006      	movs	r6, r0
 8012cee:	10ad      	asrs	r5, r5, #2
 8012cf0:	d03d      	beq.n	8012d6e <__pow5mult+0xa2>
 8012cf2:	69fc      	ldr	r4, [r7, #28]
 8012cf4:	2c00      	cmp	r4, #0
 8012cf6:	d10f      	bne.n	8012d18 <__pow5mult+0x4c>
 8012cf8:	2010      	movs	r0, #16
 8012cfa:	f7ff fd0f 	bl	801271c <malloc>
 8012cfe:	1e02      	subs	r2, r0, #0
 8012d00:	61f8      	str	r0, [r7, #28]
 8012d02:	d105      	bne.n	8012d10 <__pow5mult+0x44>
 8012d04:	21b4      	movs	r1, #180	@ 0xb4
 8012d06:	4b1c      	ldr	r3, [pc, #112]	@ (8012d78 <__pow5mult+0xac>)
 8012d08:	481c      	ldr	r0, [pc, #112]	@ (8012d7c <__pow5mult+0xb0>)
 8012d0a:	31ff      	adds	r1, #255	@ 0xff
 8012d0c:	f7fe face 	bl	80112ac <__assert_func>
 8012d10:	6044      	str	r4, [r0, #4]
 8012d12:	6084      	str	r4, [r0, #8]
 8012d14:	6004      	str	r4, [r0, #0]
 8012d16:	60c4      	str	r4, [r0, #12]
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	689c      	ldr	r4, [r3, #8]
 8012d1c:	9301      	str	r3, [sp, #4]
 8012d1e:	2c00      	cmp	r4, #0
 8012d20:	d108      	bne.n	8012d34 <__pow5mult+0x68>
 8012d22:	0038      	movs	r0, r7
 8012d24:	4916      	ldr	r1, [pc, #88]	@ (8012d80 <__pow5mult+0xb4>)
 8012d26:	f7ff ff0f 	bl	8012b48 <__i2b>
 8012d2a:	9b01      	ldr	r3, [sp, #4]
 8012d2c:	0004      	movs	r4, r0
 8012d2e:	6098      	str	r0, [r3, #8]
 8012d30:	2300      	movs	r3, #0
 8012d32:	6003      	str	r3, [r0, #0]
 8012d34:	2301      	movs	r3, #1
 8012d36:	421d      	tst	r5, r3
 8012d38:	d00a      	beq.n	8012d50 <__pow5mult+0x84>
 8012d3a:	0031      	movs	r1, r6
 8012d3c:	0022      	movs	r2, r4
 8012d3e:	0038      	movs	r0, r7
 8012d40:	f7ff ff1a 	bl	8012b78 <__multiply>
 8012d44:	0031      	movs	r1, r6
 8012d46:	9001      	str	r0, [sp, #4]
 8012d48:	0038      	movs	r0, r7
 8012d4a:	f7ff fdf9 	bl	8012940 <_Bfree>
 8012d4e:	9e01      	ldr	r6, [sp, #4]
 8012d50:	106d      	asrs	r5, r5, #1
 8012d52:	d00c      	beq.n	8012d6e <__pow5mult+0xa2>
 8012d54:	6820      	ldr	r0, [r4, #0]
 8012d56:	2800      	cmp	r0, #0
 8012d58:	d107      	bne.n	8012d6a <__pow5mult+0x9e>
 8012d5a:	0022      	movs	r2, r4
 8012d5c:	0021      	movs	r1, r4
 8012d5e:	0038      	movs	r0, r7
 8012d60:	f7ff ff0a 	bl	8012b78 <__multiply>
 8012d64:	2300      	movs	r3, #0
 8012d66:	6020      	str	r0, [r4, #0]
 8012d68:	6003      	str	r3, [r0, #0]
 8012d6a:	0004      	movs	r4, r0
 8012d6c:	e7e2      	b.n	8012d34 <__pow5mult+0x68>
 8012d6e:	0030      	movs	r0, r6
 8012d70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012d72:	46c0      	nop			@ (mov r8, r8)
 8012d74:	080166b0 	.word	0x080166b0
 8012d78:	0801646a 	.word	0x0801646a
 8012d7c:	080165f5 	.word	0x080165f5
 8012d80:	00000271 	.word	0x00000271

08012d84 <__lshift>:
 8012d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d86:	000c      	movs	r4, r1
 8012d88:	0016      	movs	r6, r2
 8012d8a:	6923      	ldr	r3, [r4, #16]
 8012d8c:	1157      	asrs	r7, r2, #5
 8012d8e:	b085      	sub	sp, #20
 8012d90:	18fb      	adds	r3, r7, r3
 8012d92:	9301      	str	r3, [sp, #4]
 8012d94:	3301      	adds	r3, #1
 8012d96:	9300      	str	r3, [sp, #0]
 8012d98:	6849      	ldr	r1, [r1, #4]
 8012d9a:	68a3      	ldr	r3, [r4, #8]
 8012d9c:	9002      	str	r0, [sp, #8]
 8012d9e:	9a00      	ldr	r2, [sp, #0]
 8012da0:	4293      	cmp	r3, r2
 8012da2:	db10      	blt.n	8012dc6 <__lshift+0x42>
 8012da4:	9802      	ldr	r0, [sp, #8]
 8012da6:	f7ff fd87 	bl	80128b8 <_Balloc>
 8012daa:	2300      	movs	r3, #0
 8012dac:	0001      	movs	r1, r0
 8012dae:	0005      	movs	r5, r0
 8012db0:	001a      	movs	r2, r3
 8012db2:	3114      	adds	r1, #20
 8012db4:	4298      	cmp	r0, r3
 8012db6:	d10c      	bne.n	8012dd2 <__lshift+0x4e>
 8012db8:	21ef      	movs	r1, #239	@ 0xef
 8012dba:	002a      	movs	r2, r5
 8012dbc:	4b25      	ldr	r3, [pc, #148]	@ (8012e54 <__lshift+0xd0>)
 8012dbe:	4826      	ldr	r0, [pc, #152]	@ (8012e58 <__lshift+0xd4>)
 8012dc0:	0049      	lsls	r1, r1, #1
 8012dc2:	f7fe fa73 	bl	80112ac <__assert_func>
 8012dc6:	3101      	adds	r1, #1
 8012dc8:	005b      	lsls	r3, r3, #1
 8012dca:	e7e8      	b.n	8012d9e <__lshift+0x1a>
 8012dcc:	0098      	lsls	r0, r3, #2
 8012dce:	500a      	str	r2, [r1, r0]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	42bb      	cmp	r3, r7
 8012dd4:	dbfa      	blt.n	8012dcc <__lshift+0x48>
 8012dd6:	43fb      	mvns	r3, r7
 8012dd8:	17db      	asrs	r3, r3, #31
 8012dda:	401f      	ands	r7, r3
 8012ddc:	00bf      	lsls	r7, r7, #2
 8012dde:	0023      	movs	r3, r4
 8012de0:	201f      	movs	r0, #31
 8012de2:	19c9      	adds	r1, r1, r7
 8012de4:	0037      	movs	r7, r6
 8012de6:	6922      	ldr	r2, [r4, #16]
 8012de8:	3314      	adds	r3, #20
 8012dea:	0092      	lsls	r2, r2, #2
 8012dec:	189a      	adds	r2, r3, r2
 8012dee:	4007      	ands	r7, r0
 8012df0:	4206      	tst	r6, r0
 8012df2:	d029      	beq.n	8012e48 <__lshift+0xc4>
 8012df4:	3001      	adds	r0, #1
 8012df6:	1bc0      	subs	r0, r0, r7
 8012df8:	9003      	str	r0, [sp, #12]
 8012dfa:	468c      	mov	ip, r1
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	681e      	ldr	r6, [r3, #0]
 8012e00:	40be      	lsls	r6, r7
 8012e02:	4306      	orrs	r6, r0
 8012e04:	4660      	mov	r0, ip
 8012e06:	c040      	stmia	r0!, {r6}
 8012e08:	4684      	mov	ip, r0
 8012e0a:	9e03      	ldr	r6, [sp, #12]
 8012e0c:	cb01      	ldmia	r3!, {r0}
 8012e0e:	40f0      	lsrs	r0, r6
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d8f4      	bhi.n	8012dfe <__lshift+0x7a>
 8012e14:	0026      	movs	r6, r4
 8012e16:	3615      	adds	r6, #21
 8012e18:	2304      	movs	r3, #4
 8012e1a:	42b2      	cmp	r2, r6
 8012e1c:	d304      	bcc.n	8012e28 <__lshift+0xa4>
 8012e1e:	1b13      	subs	r3, r2, r4
 8012e20:	3b15      	subs	r3, #21
 8012e22:	089b      	lsrs	r3, r3, #2
 8012e24:	3301      	adds	r3, #1
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	50c8      	str	r0, [r1, r3]
 8012e2a:	2800      	cmp	r0, #0
 8012e2c:	d002      	beq.n	8012e34 <__lshift+0xb0>
 8012e2e:	9b01      	ldr	r3, [sp, #4]
 8012e30:	3302      	adds	r3, #2
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	9b00      	ldr	r3, [sp, #0]
 8012e36:	9802      	ldr	r0, [sp, #8]
 8012e38:	3b01      	subs	r3, #1
 8012e3a:	0021      	movs	r1, r4
 8012e3c:	612b      	str	r3, [r5, #16]
 8012e3e:	f7ff fd7f 	bl	8012940 <_Bfree>
 8012e42:	0028      	movs	r0, r5
 8012e44:	b005      	add	sp, #20
 8012e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e48:	cb01      	ldmia	r3!, {r0}
 8012e4a:	c101      	stmia	r1!, {r0}
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d8fb      	bhi.n	8012e48 <__lshift+0xc4>
 8012e50:	e7f0      	b.n	8012e34 <__lshift+0xb0>
 8012e52:	46c0      	nop			@ (mov r8, r8)
 8012e54:	08016584 	.word	0x08016584
 8012e58:	080165f5 	.word	0x080165f5

08012e5c <__mcmp>:
 8012e5c:	b530      	push	{r4, r5, lr}
 8012e5e:	690b      	ldr	r3, [r1, #16]
 8012e60:	6904      	ldr	r4, [r0, #16]
 8012e62:	0002      	movs	r2, r0
 8012e64:	1ae0      	subs	r0, r4, r3
 8012e66:	429c      	cmp	r4, r3
 8012e68:	d10f      	bne.n	8012e8a <__mcmp+0x2e>
 8012e6a:	3214      	adds	r2, #20
 8012e6c:	009b      	lsls	r3, r3, #2
 8012e6e:	3114      	adds	r1, #20
 8012e70:	0014      	movs	r4, r2
 8012e72:	18c9      	adds	r1, r1, r3
 8012e74:	18d2      	adds	r2, r2, r3
 8012e76:	3a04      	subs	r2, #4
 8012e78:	3904      	subs	r1, #4
 8012e7a:	6815      	ldr	r5, [r2, #0]
 8012e7c:	680b      	ldr	r3, [r1, #0]
 8012e7e:	429d      	cmp	r5, r3
 8012e80:	d004      	beq.n	8012e8c <__mcmp+0x30>
 8012e82:	2001      	movs	r0, #1
 8012e84:	429d      	cmp	r5, r3
 8012e86:	d200      	bcs.n	8012e8a <__mcmp+0x2e>
 8012e88:	3802      	subs	r0, #2
 8012e8a:	bd30      	pop	{r4, r5, pc}
 8012e8c:	4294      	cmp	r4, r2
 8012e8e:	d3f2      	bcc.n	8012e76 <__mcmp+0x1a>
 8012e90:	e7fb      	b.n	8012e8a <__mcmp+0x2e>
	...

08012e94 <__mdiff>:
 8012e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e96:	000c      	movs	r4, r1
 8012e98:	b087      	sub	sp, #28
 8012e9a:	9000      	str	r0, [sp, #0]
 8012e9c:	0011      	movs	r1, r2
 8012e9e:	0020      	movs	r0, r4
 8012ea0:	0017      	movs	r7, r2
 8012ea2:	f7ff ffdb 	bl	8012e5c <__mcmp>
 8012ea6:	1e05      	subs	r5, r0, #0
 8012ea8:	d110      	bne.n	8012ecc <__mdiff+0x38>
 8012eaa:	0001      	movs	r1, r0
 8012eac:	9800      	ldr	r0, [sp, #0]
 8012eae:	f7ff fd03 	bl	80128b8 <_Balloc>
 8012eb2:	1e02      	subs	r2, r0, #0
 8012eb4:	d104      	bne.n	8012ec0 <__mdiff+0x2c>
 8012eb6:	4b40      	ldr	r3, [pc, #256]	@ (8012fb8 <__mdiff+0x124>)
 8012eb8:	4840      	ldr	r0, [pc, #256]	@ (8012fbc <__mdiff+0x128>)
 8012eba:	4941      	ldr	r1, [pc, #260]	@ (8012fc0 <__mdiff+0x12c>)
 8012ebc:	f7fe f9f6 	bl	80112ac <__assert_func>
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	6145      	str	r5, [r0, #20]
 8012ec4:	6103      	str	r3, [r0, #16]
 8012ec6:	0010      	movs	r0, r2
 8012ec8:	b007      	add	sp, #28
 8012eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ecc:	2600      	movs	r6, #0
 8012ece:	42b0      	cmp	r0, r6
 8012ed0:	da03      	bge.n	8012eda <__mdiff+0x46>
 8012ed2:	0023      	movs	r3, r4
 8012ed4:	003c      	movs	r4, r7
 8012ed6:	001f      	movs	r7, r3
 8012ed8:	3601      	adds	r6, #1
 8012eda:	6861      	ldr	r1, [r4, #4]
 8012edc:	9800      	ldr	r0, [sp, #0]
 8012ede:	f7ff fceb 	bl	80128b8 <_Balloc>
 8012ee2:	1e02      	subs	r2, r0, #0
 8012ee4:	d103      	bne.n	8012eee <__mdiff+0x5a>
 8012ee6:	4b34      	ldr	r3, [pc, #208]	@ (8012fb8 <__mdiff+0x124>)
 8012ee8:	4834      	ldr	r0, [pc, #208]	@ (8012fbc <__mdiff+0x128>)
 8012eea:	4936      	ldr	r1, [pc, #216]	@ (8012fc4 <__mdiff+0x130>)
 8012eec:	e7e6      	b.n	8012ebc <__mdiff+0x28>
 8012eee:	6923      	ldr	r3, [r4, #16]
 8012ef0:	3414      	adds	r4, #20
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	18e3      	adds	r3, r4, r3
 8012ef8:	0021      	movs	r1, r4
 8012efa:	9401      	str	r4, [sp, #4]
 8012efc:	003c      	movs	r4, r7
 8012efe:	9302      	str	r3, [sp, #8]
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	3414      	adds	r4, #20
 8012f04:	009b      	lsls	r3, r3, #2
 8012f06:	18e3      	adds	r3, r4, r3
 8012f08:	9303      	str	r3, [sp, #12]
 8012f0a:	0003      	movs	r3, r0
 8012f0c:	60c6      	str	r6, [r0, #12]
 8012f0e:	468c      	mov	ip, r1
 8012f10:	2000      	movs	r0, #0
 8012f12:	3314      	adds	r3, #20
 8012f14:	9304      	str	r3, [sp, #16]
 8012f16:	9305      	str	r3, [sp, #20]
 8012f18:	4663      	mov	r3, ip
 8012f1a:	cb20      	ldmia	r3!, {r5}
 8012f1c:	b2a9      	uxth	r1, r5
 8012f1e:	000e      	movs	r6, r1
 8012f20:	469c      	mov	ip, r3
 8012f22:	cc08      	ldmia	r4!, {r3}
 8012f24:	0c2d      	lsrs	r5, r5, #16
 8012f26:	b299      	uxth	r1, r3
 8012f28:	1a71      	subs	r1, r6, r1
 8012f2a:	1809      	adds	r1, r1, r0
 8012f2c:	0c1b      	lsrs	r3, r3, #16
 8012f2e:	1408      	asrs	r0, r1, #16
 8012f30:	1aeb      	subs	r3, r5, r3
 8012f32:	181b      	adds	r3, r3, r0
 8012f34:	1418      	asrs	r0, r3, #16
 8012f36:	b289      	uxth	r1, r1
 8012f38:	041b      	lsls	r3, r3, #16
 8012f3a:	4319      	orrs	r1, r3
 8012f3c:	9b05      	ldr	r3, [sp, #20]
 8012f3e:	c302      	stmia	r3!, {r1}
 8012f40:	9305      	str	r3, [sp, #20]
 8012f42:	9b03      	ldr	r3, [sp, #12]
 8012f44:	42a3      	cmp	r3, r4
 8012f46:	d8e7      	bhi.n	8012f18 <__mdiff+0x84>
 8012f48:	0039      	movs	r1, r7
 8012f4a:	9c03      	ldr	r4, [sp, #12]
 8012f4c:	3115      	adds	r1, #21
 8012f4e:	2304      	movs	r3, #4
 8012f50:	428c      	cmp	r4, r1
 8012f52:	d304      	bcc.n	8012f5e <__mdiff+0xca>
 8012f54:	1be3      	subs	r3, r4, r7
 8012f56:	3b15      	subs	r3, #21
 8012f58:	089b      	lsrs	r3, r3, #2
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	009b      	lsls	r3, r3, #2
 8012f5e:	9901      	ldr	r1, [sp, #4]
 8012f60:	18cd      	adds	r5, r1, r3
 8012f62:	9904      	ldr	r1, [sp, #16]
 8012f64:	002e      	movs	r6, r5
 8012f66:	18cb      	adds	r3, r1, r3
 8012f68:	001f      	movs	r7, r3
 8012f6a:	9902      	ldr	r1, [sp, #8]
 8012f6c:	428e      	cmp	r6, r1
 8012f6e:	d311      	bcc.n	8012f94 <__mdiff+0x100>
 8012f70:	9c02      	ldr	r4, [sp, #8]
 8012f72:	1ee9      	subs	r1, r5, #3
 8012f74:	2000      	movs	r0, #0
 8012f76:	428c      	cmp	r4, r1
 8012f78:	d304      	bcc.n	8012f84 <__mdiff+0xf0>
 8012f7a:	0021      	movs	r1, r4
 8012f7c:	3103      	adds	r1, #3
 8012f7e:	1b49      	subs	r1, r1, r5
 8012f80:	0889      	lsrs	r1, r1, #2
 8012f82:	0088      	lsls	r0, r1, #2
 8012f84:	181b      	adds	r3, r3, r0
 8012f86:	3b04      	subs	r3, #4
 8012f88:	6819      	ldr	r1, [r3, #0]
 8012f8a:	2900      	cmp	r1, #0
 8012f8c:	d010      	beq.n	8012fb0 <__mdiff+0x11c>
 8012f8e:	9b00      	ldr	r3, [sp, #0]
 8012f90:	6113      	str	r3, [r2, #16]
 8012f92:	e798      	b.n	8012ec6 <__mdiff+0x32>
 8012f94:	4684      	mov	ip, r0
 8012f96:	ce02      	ldmia	r6!, {r1}
 8012f98:	b288      	uxth	r0, r1
 8012f9a:	4460      	add	r0, ip
 8012f9c:	1400      	asrs	r0, r0, #16
 8012f9e:	0c0c      	lsrs	r4, r1, #16
 8012fa0:	1904      	adds	r4, r0, r4
 8012fa2:	4461      	add	r1, ip
 8012fa4:	1420      	asrs	r0, r4, #16
 8012fa6:	b289      	uxth	r1, r1
 8012fa8:	0424      	lsls	r4, r4, #16
 8012faa:	4321      	orrs	r1, r4
 8012fac:	c702      	stmia	r7!, {r1}
 8012fae:	e7dc      	b.n	8012f6a <__mdiff+0xd6>
 8012fb0:	9900      	ldr	r1, [sp, #0]
 8012fb2:	3901      	subs	r1, #1
 8012fb4:	9100      	str	r1, [sp, #0]
 8012fb6:	e7e6      	b.n	8012f86 <__mdiff+0xf2>
 8012fb8:	08016584 	.word	0x08016584
 8012fbc:	080165f5 	.word	0x080165f5
 8012fc0:	00000237 	.word	0x00000237
 8012fc4:	00000245 	.word	0x00000245

08012fc8 <__ulp>:
 8012fc8:	b510      	push	{r4, lr}
 8012fca:	2400      	movs	r4, #0
 8012fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8013000 <__ulp+0x38>)
 8012fce:	4a0d      	ldr	r2, [pc, #52]	@ (8013004 <__ulp+0x3c>)
 8012fd0:	400b      	ands	r3, r1
 8012fd2:	189b      	adds	r3, r3, r2
 8012fd4:	42a3      	cmp	r3, r4
 8012fd6:	dc06      	bgt.n	8012fe6 <__ulp+0x1e>
 8012fd8:	425b      	negs	r3, r3
 8012fda:	151a      	asrs	r2, r3, #20
 8012fdc:	2a13      	cmp	r2, #19
 8012fde:	dc05      	bgt.n	8012fec <__ulp+0x24>
 8012fe0:	2380      	movs	r3, #128	@ 0x80
 8012fe2:	031b      	lsls	r3, r3, #12
 8012fe4:	4113      	asrs	r3, r2
 8012fe6:	0019      	movs	r1, r3
 8012fe8:	0020      	movs	r0, r4
 8012fea:	bd10      	pop	{r4, pc}
 8012fec:	3a14      	subs	r2, #20
 8012fee:	2401      	movs	r4, #1
 8012ff0:	2a1e      	cmp	r2, #30
 8012ff2:	dc02      	bgt.n	8012ffa <__ulp+0x32>
 8012ff4:	2480      	movs	r4, #128	@ 0x80
 8012ff6:	0624      	lsls	r4, r4, #24
 8012ff8:	40d4      	lsrs	r4, r2
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	e7f3      	b.n	8012fe6 <__ulp+0x1e>
 8012ffe:	46c0      	nop			@ (mov r8, r8)
 8013000:	7ff00000 	.word	0x7ff00000
 8013004:	fcc00000 	.word	0xfcc00000

08013008 <__b2d>:
 8013008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801300a:	0006      	movs	r6, r0
 801300c:	6903      	ldr	r3, [r0, #16]
 801300e:	3614      	adds	r6, #20
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	18f3      	adds	r3, r6, r3
 8013014:	1f1d      	subs	r5, r3, #4
 8013016:	682c      	ldr	r4, [r5, #0]
 8013018:	000f      	movs	r7, r1
 801301a:	0020      	movs	r0, r4
 801301c:	9301      	str	r3, [sp, #4]
 801301e:	f7ff fd43 	bl	8012aa8 <__hi0bits>
 8013022:	2220      	movs	r2, #32
 8013024:	1a12      	subs	r2, r2, r0
 8013026:	603a      	str	r2, [r7, #0]
 8013028:	0003      	movs	r3, r0
 801302a:	4a1c      	ldr	r2, [pc, #112]	@ (801309c <__b2d+0x94>)
 801302c:	280a      	cmp	r0, #10
 801302e:	dc15      	bgt.n	801305c <__b2d+0x54>
 8013030:	210b      	movs	r1, #11
 8013032:	0027      	movs	r7, r4
 8013034:	1a09      	subs	r1, r1, r0
 8013036:	40cf      	lsrs	r7, r1
 8013038:	433a      	orrs	r2, r7
 801303a:	468c      	mov	ip, r1
 801303c:	0011      	movs	r1, r2
 801303e:	2200      	movs	r2, #0
 8013040:	42ae      	cmp	r6, r5
 8013042:	d202      	bcs.n	801304a <__b2d+0x42>
 8013044:	9a01      	ldr	r2, [sp, #4]
 8013046:	3a08      	subs	r2, #8
 8013048:	6812      	ldr	r2, [r2, #0]
 801304a:	3315      	adds	r3, #21
 801304c:	409c      	lsls	r4, r3
 801304e:	4663      	mov	r3, ip
 8013050:	0027      	movs	r7, r4
 8013052:	40da      	lsrs	r2, r3
 8013054:	4317      	orrs	r7, r2
 8013056:	0038      	movs	r0, r7
 8013058:	b003      	add	sp, #12
 801305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801305c:	2700      	movs	r7, #0
 801305e:	42ae      	cmp	r6, r5
 8013060:	d202      	bcs.n	8013068 <__b2d+0x60>
 8013062:	9d01      	ldr	r5, [sp, #4]
 8013064:	3d08      	subs	r5, #8
 8013066:	682f      	ldr	r7, [r5, #0]
 8013068:	210b      	movs	r1, #11
 801306a:	4249      	negs	r1, r1
 801306c:	468c      	mov	ip, r1
 801306e:	449c      	add	ip, r3
 8013070:	2b0b      	cmp	r3, #11
 8013072:	d010      	beq.n	8013096 <__b2d+0x8e>
 8013074:	4661      	mov	r1, ip
 8013076:	2320      	movs	r3, #32
 8013078:	408c      	lsls	r4, r1
 801307a:	1a5b      	subs	r3, r3, r1
 801307c:	0039      	movs	r1, r7
 801307e:	40d9      	lsrs	r1, r3
 8013080:	430c      	orrs	r4, r1
 8013082:	4322      	orrs	r2, r4
 8013084:	0011      	movs	r1, r2
 8013086:	2200      	movs	r2, #0
 8013088:	42b5      	cmp	r5, r6
 801308a:	d901      	bls.n	8013090 <__b2d+0x88>
 801308c:	3d04      	subs	r5, #4
 801308e:	682a      	ldr	r2, [r5, #0]
 8013090:	4664      	mov	r4, ip
 8013092:	40a7      	lsls	r7, r4
 8013094:	e7dd      	b.n	8013052 <__b2d+0x4a>
 8013096:	4322      	orrs	r2, r4
 8013098:	0011      	movs	r1, r2
 801309a:	e7dc      	b.n	8013056 <__b2d+0x4e>
 801309c:	3ff00000 	.word	0x3ff00000

080130a0 <__d2b>:
 80130a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130a2:	2101      	movs	r1, #1
 80130a4:	0016      	movs	r6, r2
 80130a6:	001f      	movs	r7, r3
 80130a8:	f7ff fc06 	bl	80128b8 <_Balloc>
 80130ac:	1e04      	subs	r4, r0, #0
 80130ae:	d105      	bne.n	80130bc <__d2b+0x1c>
 80130b0:	0022      	movs	r2, r4
 80130b2:	4b25      	ldr	r3, [pc, #148]	@ (8013148 <__d2b+0xa8>)
 80130b4:	4825      	ldr	r0, [pc, #148]	@ (801314c <__d2b+0xac>)
 80130b6:	4926      	ldr	r1, [pc, #152]	@ (8013150 <__d2b+0xb0>)
 80130b8:	f7fe f8f8 	bl	80112ac <__assert_func>
 80130bc:	033b      	lsls	r3, r7, #12
 80130be:	007d      	lsls	r5, r7, #1
 80130c0:	0b1b      	lsrs	r3, r3, #12
 80130c2:	0d6d      	lsrs	r5, r5, #21
 80130c4:	d002      	beq.n	80130cc <__d2b+0x2c>
 80130c6:	2280      	movs	r2, #128	@ 0x80
 80130c8:	0352      	lsls	r2, r2, #13
 80130ca:	4313      	orrs	r3, r2
 80130cc:	9301      	str	r3, [sp, #4]
 80130ce:	2e00      	cmp	r6, #0
 80130d0:	d025      	beq.n	801311e <__d2b+0x7e>
 80130d2:	4668      	mov	r0, sp
 80130d4:	9600      	str	r6, [sp, #0]
 80130d6:	f7ff fd08 	bl	8012aea <__lo0bits>
 80130da:	9b01      	ldr	r3, [sp, #4]
 80130dc:	9900      	ldr	r1, [sp, #0]
 80130de:	2800      	cmp	r0, #0
 80130e0:	d01b      	beq.n	801311a <__d2b+0x7a>
 80130e2:	2220      	movs	r2, #32
 80130e4:	001e      	movs	r6, r3
 80130e6:	1a12      	subs	r2, r2, r0
 80130e8:	4096      	lsls	r6, r2
 80130ea:	0032      	movs	r2, r6
 80130ec:	40c3      	lsrs	r3, r0
 80130ee:	430a      	orrs	r2, r1
 80130f0:	6162      	str	r2, [r4, #20]
 80130f2:	9301      	str	r3, [sp, #4]
 80130f4:	9e01      	ldr	r6, [sp, #4]
 80130f6:	61a6      	str	r6, [r4, #24]
 80130f8:	1e73      	subs	r3, r6, #1
 80130fa:	419e      	sbcs	r6, r3
 80130fc:	3601      	adds	r6, #1
 80130fe:	6126      	str	r6, [r4, #16]
 8013100:	2d00      	cmp	r5, #0
 8013102:	d014      	beq.n	801312e <__d2b+0x8e>
 8013104:	2635      	movs	r6, #53	@ 0x35
 8013106:	4b13      	ldr	r3, [pc, #76]	@ (8013154 <__d2b+0xb4>)
 8013108:	18ed      	adds	r5, r5, r3
 801310a:	9b08      	ldr	r3, [sp, #32]
 801310c:	182d      	adds	r5, r5, r0
 801310e:	601d      	str	r5, [r3, #0]
 8013110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013112:	1a36      	subs	r6, r6, r0
 8013114:	601e      	str	r6, [r3, #0]
 8013116:	0020      	movs	r0, r4
 8013118:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801311a:	6161      	str	r1, [r4, #20]
 801311c:	e7ea      	b.n	80130f4 <__d2b+0x54>
 801311e:	a801      	add	r0, sp, #4
 8013120:	f7ff fce3 	bl	8012aea <__lo0bits>
 8013124:	9b01      	ldr	r3, [sp, #4]
 8013126:	2601      	movs	r6, #1
 8013128:	6163      	str	r3, [r4, #20]
 801312a:	3020      	adds	r0, #32
 801312c:	e7e7      	b.n	80130fe <__d2b+0x5e>
 801312e:	4b0a      	ldr	r3, [pc, #40]	@ (8013158 <__d2b+0xb8>)
 8013130:	18c0      	adds	r0, r0, r3
 8013132:	9b08      	ldr	r3, [sp, #32]
 8013134:	6018      	str	r0, [r3, #0]
 8013136:	4b09      	ldr	r3, [pc, #36]	@ (801315c <__d2b+0xbc>)
 8013138:	18f3      	adds	r3, r6, r3
 801313a:	009b      	lsls	r3, r3, #2
 801313c:	18e3      	adds	r3, r4, r3
 801313e:	6958      	ldr	r0, [r3, #20]
 8013140:	f7ff fcb2 	bl	8012aa8 <__hi0bits>
 8013144:	0176      	lsls	r6, r6, #5
 8013146:	e7e3      	b.n	8013110 <__d2b+0x70>
 8013148:	08016584 	.word	0x08016584
 801314c:	080165f5 	.word	0x080165f5
 8013150:	0000030f 	.word	0x0000030f
 8013154:	fffffbcd 	.word	0xfffffbcd
 8013158:	fffffbce 	.word	0xfffffbce
 801315c:	3fffffff 	.word	0x3fffffff

08013160 <__ratio>:
 8013160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013162:	b087      	sub	sp, #28
 8013164:	000f      	movs	r7, r1
 8013166:	a904      	add	r1, sp, #16
 8013168:	0006      	movs	r6, r0
 801316a:	f7ff ff4d 	bl	8013008 <__b2d>
 801316e:	9000      	str	r0, [sp, #0]
 8013170:	9101      	str	r1, [sp, #4]
 8013172:	9b00      	ldr	r3, [sp, #0]
 8013174:	9c01      	ldr	r4, [sp, #4]
 8013176:	0038      	movs	r0, r7
 8013178:	a905      	add	r1, sp, #20
 801317a:	9302      	str	r3, [sp, #8]
 801317c:	9403      	str	r4, [sp, #12]
 801317e:	f7ff ff43 	bl	8013008 <__b2d>
 8013182:	000d      	movs	r5, r1
 8013184:	0002      	movs	r2, r0
 8013186:	000b      	movs	r3, r1
 8013188:	6930      	ldr	r0, [r6, #16]
 801318a:	6939      	ldr	r1, [r7, #16]
 801318c:	9e04      	ldr	r6, [sp, #16]
 801318e:	1a40      	subs	r0, r0, r1
 8013190:	9905      	ldr	r1, [sp, #20]
 8013192:	0140      	lsls	r0, r0, #5
 8013194:	1a71      	subs	r1, r6, r1
 8013196:	1841      	adds	r1, r0, r1
 8013198:	0508      	lsls	r0, r1, #20
 801319a:	2900      	cmp	r1, #0
 801319c:	dd08      	ble.n	80131b0 <__ratio+0x50>
 801319e:	9901      	ldr	r1, [sp, #4]
 80131a0:	1841      	adds	r1, r0, r1
 80131a2:	9103      	str	r1, [sp, #12]
 80131a4:	9802      	ldr	r0, [sp, #8]
 80131a6:	9903      	ldr	r1, [sp, #12]
 80131a8:	f7ee ff2c 	bl	8002004 <__aeabi_ddiv>
 80131ac:	b007      	add	sp, #28
 80131ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131b0:	1a2b      	subs	r3, r5, r0
 80131b2:	e7f7      	b.n	80131a4 <__ratio+0x44>

080131b4 <__copybits>:
 80131b4:	b570      	push	{r4, r5, r6, lr}
 80131b6:	0014      	movs	r4, r2
 80131b8:	0005      	movs	r5, r0
 80131ba:	3901      	subs	r1, #1
 80131bc:	6913      	ldr	r3, [r2, #16]
 80131be:	1149      	asrs	r1, r1, #5
 80131c0:	3101      	adds	r1, #1
 80131c2:	0089      	lsls	r1, r1, #2
 80131c4:	3414      	adds	r4, #20
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	1841      	adds	r1, r0, r1
 80131ca:	18e3      	adds	r3, r4, r3
 80131cc:	42a3      	cmp	r3, r4
 80131ce:	d80d      	bhi.n	80131ec <__copybits+0x38>
 80131d0:	0014      	movs	r4, r2
 80131d2:	3411      	adds	r4, #17
 80131d4:	2500      	movs	r5, #0
 80131d6:	42a3      	cmp	r3, r4
 80131d8:	d303      	bcc.n	80131e2 <__copybits+0x2e>
 80131da:	1a9b      	subs	r3, r3, r2
 80131dc:	3b11      	subs	r3, #17
 80131de:	089b      	lsrs	r3, r3, #2
 80131e0:	009d      	lsls	r5, r3, #2
 80131e2:	2300      	movs	r3, #0
 80131e4:	1940      	adds	r0, r0, r5
 80131e6:	4281      	cmp	r1, r0
 80131e8:	d803      	bhi.n	80131f2 <__copybits+0x3e>
 80131ea:	bd70      	pop	{r4, r5, r6, pc}
 80131ec:	cc40      	ldmia	r4!, {r6}
 80131ee:	c540      	stmia	r5!, {r6}
 80131f0:	e7ec      	b.n	80131cc <__copybits+0x18>
 80131f2:	c008      	stmia	r0!, {r3}
 80131f4:	e7f7      	b.n	80131e6 <__copybits+0x32>

080131f6 <__any_on>:
 80131f6:	0002      	movs	r2, r0
 80131f8:	6900      	ldr	r0, [r0, #16]
 80131fa:	b510      	push	{r4, lr}
 80131fc:	3214      	adds	r2, #20
 80131fe:	114b      	asrs	r3, r1, #5
 8013200:	4298      	cmp	r0, r3
 8013202:	db13      	blt.n	801322c <__any_on+0x36>
 8013204:	dd0c      	ble.n	8013220 <__any_on+0x2a>
 8013206:	241f      	movs	r4, #31
 8013208:	0008      	movs	r0, r1
 801320a:	4020      	ands	r0, r4
 801320c:	4221      	tst	r1, r4
 801320e:	d007      	beq.n	8013220 <__any_on+0x2a>
 8013210:	0099      	lsls	r1, r3, #2
 8013212:	588c      	ldr	r4, [r1, r2]
 8013214:	0021      	movs	r1, r4
 8013216:	40c1      	lsrs	r1, r0
 8013218:	4081      	lsls	r1, r0
 801321a:	2001      	movs	r0, #1
 801321c:	428c      	cmp	r4, r1
 801321e:	d104      	bne.n	801322a <__any_on+0x34>
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	18d3      	adds	r3, r2, r3
 8013224:	4293      	cmp	r3, r2
 8013226:	d803      	bhi.n	8013230 <__any_on+0x3a>
 8013228:	2000      	movs	r0, #0
 801322a:	bd10      	pop	{r4, pc}
 801322c:	0003      	movs	r3, r0
 801322e:	e7f7      	b.n	8013220 <__any_on+0x2a>
 8013230:	3b04      	subs	r3, #4
 8013232:	6819      	ldr	r1, [r3, #0]
 8013234:	2900      	cmp	r1, #0
 8013236:	d0f5      	beq.n	8013224 <__any_on+0x2e>
 8013238:	2001      	movs	r0, #1
 801323a:	e7f6      	b.n	801322a <__any_on+0x34>

0801323c <__ascii_wctomb>:
 801323c:	0003      	movs	r3, r0
 801323e:	1e08      	subs	r0, r1, #0
 8013240:	d005      	beq.n	801324e <__ascii_wctomb+0x12>
 8013242:	2aff      	cmp	r2, #255	@ 0xff
 8013244:	d904      	bls.n	8013250 <__ascii_wctomb+0x14>
 8013246:	228a      	movs	r2, #138	@ 0x8a
 8013248:	2001      	movs	r0, #1
 801324a:	601a      	str	r2, [r3, #0]
 801324c:	4240      	negs	r0, r0
 801324e:	4770      	bx	lr
 8013250:	2001      	movs	r0, #1
 8013252:	700a      	strb	r2, [r1, #0]
 8013254:	e7fb      	b.n	801324e <__ascii_wctomb+0x12>
	...

08013258 <__ssputs_r>:
 8013258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801325a:	688e      	ldr	r6, [r1, #8]
 801325c:	b085      	sub	sp, #20
 801325e:	001f      	movs	r7, r3
 8013260:	000c      	movs	r4, r1
 8013262:	680b      	ldr	r3, [r1, #0]
 8013264:	9002      	str	r0, [sp, #8]
 8013266:	9203      	str	r2, [sp, #12]
 8013268:	42be      	cmp	r6, r7
 801326a:	d830      	bhi.n	80132ce <__ssputs_r+0x76>
 801326c:	210c      	movs	r1, #12
 801326e:	5e62      	ldrsh	r2, [r4, r1]
 8013270:	2190      	movs	r1, #144	@ 0x90
 8013272:	00c9      	lsls	r1, r1, #3
 8013274:	420a      	tst	r2, r1
 8013276:	d028      	beq.n	80132ca <__ssputs_r+0x72>
 8013278:	2003      	movs	r0, #3
 801327a:	6921      	ldr	r1, [r4, #16]
 801327c:	1a5b      	subs	r3, r3, r1
 801327e:	9301      	str	r3, [sp, #4]
 8013280:	6963      	ldr	r3, [r4, #20]
 8013282:	4343      	muls	r3, r0
 8013284:	9801      	ldr	r0, [sp, #4]
 8013286:	0fdd      	lsrs	r5, r3, #31
 8013288:	18ed      	adds	r5, r5, r3
 801328a:	1c7b      	adds	r3, r7, #1
 801328c:	181b      	adds	r3, r3, r0
 801328e:	106d      	asrs	r5, r5, #1
 8013290:	42ab      	cmp	r3, r5
 8013292:	d900      	bls.n	8013296 <__ssputs_r+0x3e>
 8013294:	001d      	movs	r5, r3
 8013296:	0552      	lsls	r2, r2, #21
 8013298:	d528      	bpl.n	80132ec <__ssputs_r+0x94>
 801329a:	0029      	movs	r1, r5
 801329c:	9802      	ldr	r0, [sp, #8]
 801329e:	f7ff fa69 	bl	8012774 <_malloc_r>
 80132a2:	1e06      	subs	r6, r0, #0
 80132a4:	d02c      	beq.n	8013300 <__ssputs_r+0xa8>
 80132a6:	9a01      	ldr	r2, [sp, #4]
 80132a8:	6921      	ldr	r1, [r4, #16]
 80132aa:	f7fd ffef 	bl	801128c <memcpy>
 80132ae:	89a2      	ldrh	r2, [r4, #12]
 80132b0:	4b18      	ldr	r3, [pc, #96]	@ (8013314 <__ssputs_r+0xbc>)
 80132b2:	401a      	ands	r2, r3
 80132b4:	2380      	movs	r3, #128	@ 0x80
 80132b6:	4313      	orrs	r3, r2
 80132b8:	81a3      	strh	r3, [r4, #12]
 80132ba:	9b01      	ldr	r3, [sp, #4]
 80132bc:	6126      	str	r6, [r4, #16]
 80132be:	18f6      	adds	r6, r6, r3
 80132c0:	6026      	str	r6, [r4, #0]
 80132c2:	003e      	movs	r6, r7
 80132c4:	6165      	str	r5, [r4, #20]
 80132c6:	1aed      	subs	r5, r5, r3
 80132c8:	60a5      	str	r5, [r4, #8]
 80132ca:	42be      	cmp	r6, r7
 80132cc:	d900      	bls.n	80132d0 <__ssputs_r+0x78>
 80132ce:	003e      	movs	r6, r7
 80132d0:	0032      	movs	r2, r6
 80132d2:	9903      	ldr	r1, [sp, #12]
 80132d4:	6820      	ldr	r0, [r4, #0]
 80132d6:	f000 f9df 	bl	8013698 <memmove>
 80132da:	2000      	movs	r0, #0
 80132dc:	68a3      	ldr	r3, [r4, #8]
 80132de:	1b9b      	subs	r3, r3, r6
 80132e0:	60a3      	str	r3, [r4, #8]
 80132e2:	6823      	ldr	r3, [r4, #0]
 80132e4:	199b      	adds	r3, r3, r6
 80132e6:	6023      	str	r3, [r4, #0]
 80132e8:	b005      	add	sp, #20
 80132ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132ec:	002a      	movs	r2, r5
 80132ee:	9802      	ldr	r0, [sp, #8]
 80132f0:	f000 fa2a 	bl	8013748 <_realloc_r>
 80132f4:	1e06      	subs	r6, r0, #0
 80132f6:	d1e0      	bne.n	80132ba <__ssputs_r+0x62>
 80132f8:	6921      	ldr	r1, [r4, #16]
 80132fa:	9802      	ldr	r0, [sp, #8]
 80132fc:	f7fe fe6a 	bl	8011fd4 <_free_r>
 8013300:	230c      	movs	r3, #12
 8013302:	2001      	movs	r0, #1
 8013304:	9a02      	ldr	r2, [sp, #8]
 8013306:	4240      	negs	r0, r0
 8013308:	6013      	str	r3, [r2, #0]
 801330a:	89a2      	ldrh	r2, [r4, #12]
 801330c:	3334      	adds	r3, #52	@ 0x34
 801330e:	4313      	orrs	r3, r2
 8013310:	81a3      	strh	r3, [r4, #12]
 8013312:	e7e9      	b.n	80132e8 <__ssputs_r+0x90>
 8013314:	fffffb7f 	.word	0xfffffb7f

08013318 <_svfiprintf_r>:
 8013318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801331a:	b0a1      	sub	sp, #132	@ 0x84
 801331c:	9003      	str	r0, [sp, #12]
 801331e:	001d      	movs	r5, r3
 8013320:	898b      	ldrh	r3, [r1, #12]
 8013322:	000f      	movs	r7, r1
 8013324:	0016      	movs	r6, r2
 8013326:	061b      	lsls	r3, r3, #24
 8013328:	d511      	bpl.n	801334e <_svfiprintf_r+0x36>
 801332a:	690b      	ldr	r3, [r1, #16]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d10e      	bne.n	801334e <_svfiprintf_r+0x36>
 8013330:	2140      	movs	r1, #64	@ 0x40
 8013332:	f7ff fa1f 	bl	8012774 <_malloc_r>
 8013336:	6038      	str	r0, [r7, #0]
 8013338:	6138      	str	r0, [r7, #16]
 801333a:	2800      	cmp	r0, #0
 801333c:	d105      	bne.n	801334a <_svfiprintf_r+0x32>
 801333e:	230c      	movs	r3, #12
 8013340:	9a03      	ldr	r2, [sp, #12]
 8013342:	6013      	str	r3, [r2, #0]
 8013344:	2001      	movs	r0, #1
 8013346:	4240      	negs	r0, r0
 8013348:	e0cf      	b.n	80134ea <_svfiprintf_r+0x1d2>
 801334a:	2340      	movs	r3, #64	@ 0x40
 801334c:	617b      	str	r3, [r7, #20]
 801334e:	2300      	movs	r3, #0
 8013350:	ac08      	add	r4, sp, #32
 8013352:	6163      	str	r3, [r4, #20]
 8013354:	3320      	adds	r3, #32
 8013356:	7663      	strb	r3, [r4, #25]
 8013358:	3310      	adds	r3, #16
 801335a:	76a3      	strb	r3, [r4, #26]
 801335c:	9507      	str	r5, [sp, #28]
 801335e:	0035      	movs	r5, r6
 8013360:	782b      	ldrb	r3, [r5, #0]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d001      	beq.n	801336a <_svfiprintf_r+0x52>
 8013366:	2b25      	cmp	r3, #37	@ 0x25
 8013368:	d148      	bne.n	80133fc <_svfiprintf_r+0xe4>
 801336a:	1bab      	subs	r3, r5, r6
 801336c:	9305      	str	r3, [sp, #20]
 801336e:	42b5      	cmp	r5, r6
 8013370:	d00b      	beq.n	801338a <_svfiprintf_r+0x72>
 8013372:	0032      	movs	r2, r6
 8013374:	0039      	movs	r1, r7
 8013376:	9803      	ldr	r0, [sp, #12]
 8013378:	f7ff ff6e 	bl	8013258 <__ssputs_r>
 801337c:	3001      	adds	r0, #1
 801337e:	d100      	bne.n	8013382 <_svfiprintf_r+0x6a>
 8013380:	e0ae      	b.n	80134e0 <_svfiprintf_r+0x1c8>
 8013382:	6963      	ldr	r3, [r4, #20]
 8013384:	9a05      	ldr	r2, [sp, #20]
 8013386:	189b      	adds	r3, r3, r2
 8013388:	6163      	str	r3, [r4, #20]
 801338a:	782b      	ldrb	r3, [r5, #0]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d100      	bne.n	8013392 <_svfiprintf_r+0x7a>
 8013390:	e0a6      	b.n	80134e0 <_svfiprintf_r+0x1c8>
 8013392:	2201      	movs	r2, #1
 8013394:	2300      	movs	r3, #0
 8013396:	4252      	negs	r2, r2
 8013398:	6062      	str	r2, [r4, #4]
 801339a:	a904      	add	r1, sp, #16
 801339c:	3254      	adds	r2, #84	@ 0x54
 801339e:	1852      	adds	r2, r2, r1
 80133a0:	1c6e      	adds	r6, r5, #1
 80133a2:	6023      	str	r3, [r4, #0]
 80133a4:	60e3      	str	r3, [r4, #12]
 80133a6:	60a3      	str	r3, [r4, #8]
 80133a8:	7013      	strb	r3, [r2, #0]
 80133aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80133ac:	4b54      	ldr	r3, [pc, #336]	@ (8013500 <_svfiprintf_r+0x1e8>)
 80133ae:	2205      	movs	r2, #5
 80133b0:	0018      	movs	r0, r3
 80133b2:	7831      	ldrb	r1, [r6, #0]
 80133b4:	9305      	str	r3, [sp, #20]
 80133b6:	f7fd ff5e 	bl	8011276 <memchr>
 80133ba:	1c75      	adds	r5, r6, #1
 80133bc:	2800      	cmp	r0, #0
 80133be:	d11f      	bne.n	8013400 <_svfiprintf_r+0xe8>
 80133c0:	6822      	ldr	r2, [r4, #0]
 80133c2:	06d3      	lsls	r3, r2, #27
 80133c4:	d504      	bpl.n	80133d0 <_svfiprintf_r+0xb8>
 80133c6:	2353      	movs	r3, #83	@ 0x53
 80133c8:	a904      	add	r1, sp, #16
 80133ca:	185b      	adds	r3, r3, r1
 80133cc:	2120      	movs	r1, #32
 80133ce:	7019      	strb	r1, [r3, #0]
 80133d0:	0713      	lsls	r3, r2, #28
 80133d2:	d504      	bpl.n	80133de <_svfiprintf_r+0xc6>
 80133d4:	2353      	movs	r3, #83	@ 0x53
 80133d6:	a904      	add	r1, sp, #16
 80133d8:	185b      	adds	r3, r3, r1
 80133da:	212b      	movs	r1, #43	@ 0x2b
 80133dc:	7019      	strb	r1, [r3, #0]
 80133de:	7833      	ldrb	r3, [r6, #0]
 80133e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80133e2:	d016      	beq.n	8013412 <_svfiprintf_r+0xfa>
 80133e4:	0035      	movs	r5, r6
 80133e6:	2100      	movs	r1, #0
 80133e8:	200a      	movs	r0, #10
 80133ea:	68e3      	ldr	r3, [r4, #12]
 80133ec:	782a      	ldrb	r2, [r5, #0]
 80133ee:	1c6e      	adds	r6, r5, #1
 80133f0:	3a30      	subs	r2, #48	@ 0x30
 80133f2:	2a09      	cmp	r2, #9
 80133f4:	d950      	bls.n	8013498 <_svfiprintf_r+0x180>
 80133f6:	2900      	cmp	r1, #0
 80133f8:	d111      	bne.n	801341e <_svfiprintf_r+0x106>
 80133fa:	e017      	b.n	801342c <_svfiprintf_r+0x114>
 80133fc:	3501      	adds	r5, #1
 80133fe:	e7af      	b.n	8013360 <_svfiprintf_r+0x48>
 8013400:	9b05      	ldr	r3, [sp, #20]
 8013402:	6822      	ldr	r2, [r4, #0]
 8013404:	1ac0      	subs	r0, r0, r3
 8013406:	2301      	movs	r3, #1
 8013408:	4083      	lsls	r3, r0
 801340a:	4313      	orrs	r3, r2
 801340c:	002e      	movs	r6, r5
 801340e:	6023      	str	r3, [r4, #0]
 8013410:	e7cc      	b.n	80133ac <_svfiprintf_r+0x94>
 8013412:	9b07      	ldr	r3, [sp, #28]
 8013414:	1d19      	adds	r1, r3, #4
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	9107      	str	r1, [sp, #28]
 801341a:	2b00      	cmp	r3, #0
 801341c:	db01      	blt.n	8013422 <_svfiprintf_r+0x10a>
 801341e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013420:	e004      	b.n	801342c <_svfiprintf_r+0x114>
 8013422:	425b      	negs	r3, r3
 8013424:	60e3      	str	r3, [r4, #12]
 8013426:	2302      	movs	r3, #2
 8013428:	4313      	orrs	r3, r2
 801342a:	6023      	str	r3, [r4, #0]
 801342c:	782b      	ldrb	r3, [r5, #0]
 801342e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013430:	d10c      	bne.n	801344c <_svfiprintf_r+0x134>
 8013432:	786b      	ldrb	r3, [r5, #1]
 8013434:	2b2a      	cmp	r3, #42	@ 0x2a
 8013436:	d134      	bne.n	80134a2 <_svfiprintf_r+0x18a>
 8013438:	9b07      	ldr	r3, [sp, #28]
 801343a:	3502      	adds	r5, #2
 801343c:	1d1a      	adds	r2, r3, #4
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	9207      	str	r2, [sp, #28]
 8013442:	2b00      	cmp	r3, #0
 8013444:	da01      	bge.n	801344a <_svfiprintf_r+0x132>
 8013446:	2301      	movs	r3, #1
 8013448:	425b      	negs	r3, r3
 801344a:	9309      	str	r3, [sp, #36]	@ 0x24
 801344c:	4e2d      	ldr	r6, [pc, #180]	@ (8013504 <_svfiprintf_r+0x1ec>)
 801344e:	2203      	movs	r2, #3
 8013450:	0030      	movs	r0, r6
 8013452:	7829      	ldrb	r1, [r5, #0]
 8013454:	f7fd ff0f 	bl	8011276 <memchr>
 8013458:	2800      	cmp	r0, #0
 801345a:	d006      	beq.n	801346a <_svfiprintf_r+0x152>
 801345c:	2340      	movs	r3, #64	@ 0x40
 801345e:	1b80      	subs	r0, r0, r6
 8013460:	4083      	lsls	r3, r0
 8013462:	6822      	ldr	r2, [r4, #0]
 8013464:	3501      	adds	r5, #1
 8013466:	4313      	orrs	r3, r2
 8013468:	6023      	str	r3, [r4, #0]
 801346a:	7829      	ldrb	r1, [r5, #0]
 801346c:	2206      	movs	r2, #6
 801346e:	4826      	ldr	r0, [pc, #152]	@ (8013508 <_svfiprintf_r+0x1f0>)
 8013470:	1c6e      	adds	r6, r5, #1
 8013472:	7621      	strb	r1, [r4, #24]
 8013474:	f7fd feff 	bl	8011276 <memchr>
 8013478:	2800      	cmp	r0, #0
 801347a:	d038      	beq.n	80134ee <_svfiprintf_r+0x1d6>
 801347c:	4b23      	ldr	r3, [pc, #140]	@ (801350c <_svfiprintf_r+0x1f4>)
 801347e:	2b00      	cmp	r3, #0
 8013480:	d122      	bne.n	80134c8 <_svfiprintf_r+0x1b0>
 8013482:	2207      	movs	r2, #7
 8013484:	9b07      	ldr	r3, [sp, #28]
 8013486:	3307      	adds	r3, #7
 8013488:	4393      	bics	r3, r2
 801348a:	3308      	adds	r3, #8
 801348c:	9307      	str	r3, [sp, #28]
 801348e:	6963      	ldr	r3, [r4, #20]
 8013490:	9a04      	ldr	r2, [sp, #16]
 8013492:	189b      	adds	r3, r3, r2
 8013494:	6163      	str	r3, [r4, #20]
 8013496:	e762      	b.n	801335e <_svfiprintf_r+0x46>
 8013498:	4343      	muls	r3, r0
 801349a:	0035      	movs	r5, r6
 801349c:	2101      	movs	r1, #1
 801349e:	189b      	adds	r3, r3, r2
 80134a0:	e7a4      	b.n	80133ec <_svfiprintf_r+0xd4>
 80134a2:	2300      	movs	r3, #0
 80134a4:	200a      	movs	r0, #10
 80134a6:	0019      	movs	r1, r3
 80134a8:	3501      	adds	r5, #1
 80134aa:	6063      	str	r3, [r4, #4]
 80134ac:	782a      	ldrb	r2, [r5, #0]
 80134ae:	1c6e      	adds	r6, r5, #1
 80134b0:	3a30      	subs	r2, #48	@ 0x30
 80134b2:	2a09      	cmp	r2, #9
 80134b4:	d903      	bls.n	80134be <_svfiprintf_r+0x1a6>
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d0c8      	beq.n	801344c <_svfiprintf_r+0x134>
 80134ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80134bc:	e7c6      	b.n	801344c <_svfiprintf_r+0x134>
 80134be:	4341      	muls	r1, r0
 80134c0:	0035      	movs	r5, r6
 80134c2:	2301      	movs	r3, #1
 80134c4:	1889      	adds	r1, r1, r2
 80134c6:	e7f1      	b.n	80134ac <_svfiprintf_r+0x194>
 80134c8:	aa07      	add	r2, sp, #28
 80134ca:	9200      	str	r2, [sp, #0]
 80134cc:	0021      	movs	r1, r4
 80134ce:	003a      	movs	r2, r7
 80134d0:	4b0f      	ldr	r3, [pc, #60]	@ (8013510 <_svfiprintf_r+0x1f8>)
 80134d2:	9803      	ldr	r0, [sp, #12]
 80134d4:	f7fd f8d6 	bl	8010684 <_printf_float>
 80134d8:	9004      	str	r0, [sp, #16]
 80134da:	9b04      	ldr	r3, [sp, #16]
 80134dc:	3301      	adds	r3, #1
 80134de:	d1d6      	bne.n	801348e <_svfiprintf_r+0x176>
 80134e0:	89bb      	ldrh	r3, [r7, #12]
 80134e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80134e4:	065b      	lsls	r3, r3, #25
 80134e6:	d500      	bpl.n	80134ea <_svfiprintf_r+0x1d2>
 80134e8:	e72c      	b.n	8013344 <_svfiprintf_r+0x2c>
 80134ea:	b021      	add	sp, #132	@ 0x84
 80134ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134ee:	aa07      	add	r2, sp, #28
 80134f0:	9200      	str	r2, [sp, #0]
 80134f2:	0021      	movs	r1, r4
 80134f4:	003a      	movs	r2, r7
 80134f6:	4b06      	ldr	r3, [pc, #24]	@ (8013510 <_svfiprintf_r+0x1f8>)
 80134f8:	9803      	ldr	r0, [sp, #12]
 80134fa:	f7fd fb71 	bl	8010be0 <_printf_i>
 80134fe:	e7eb      	b.n	80134d8 <_svfiprintf_r+0x1c0>
 8013500:	0801664e 	.word	0x0801664e
 8013504:	08016654 	.word	0x08016654
 8013508:	08016658 	.word	0x08016658
 801350c:	08010685 	.word	0x08010685
 8013510:	08013259 	.word	0x08013259

08013514 <__sflush_r>:
 8013514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013516:	220c      	movs	r2, #12
 8013518:	5e8b      	ldrsh	r3, [r1, r2]
 801351a:	0005      	movs	r5, r0
 801351c:	000c      	movs	r4, r1
 801351e:	071a      	lsls	r2, r3, #28
 8013520:	d456      	bmi.n	80135d0 <__sflush_r+0xbc>
 8013522:	684a      	ldr	r2, [r1, #4]
 8013524:	2a00      	cmp	r2, #0
 8013526:	dc02      	bgt.n	801352e <__sflush_r+0x1a>
 8013528:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801352a:	2a00      	cmp	r2, #0
 801352c:	dd4e      	ble.n	80135cc <__sflush_r+0xb8>
 801352e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013530:	2f00      	cmp	r7, #0
 8013532:	d04b      	beq.n	80135cc <__sflush_r+0xb8>
 8013534:	2200      	movs	r2, #0
 8013536:	2080      	movs	r0, #128	@ 0x80
 8013538:	682e      	ldr	r6, [r5, #0]
 801353a:	602a      	str	r2, [r5, #0]
 801353c:	001a      	movs	r2, r3
 801353e:	0140      	lsls	r0, r0, #5
 8013540:	6a21      	ldr	r1, [r4, #32]
 8013542:	4002      	ands	r2, r0
 8013544:	4203      	tst	r3, r0
 8013546:	d033      	beq.n	80135b0 <__sflush_r+0x9c>
 8013548:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801354a:	89a3      	ldrh	r3, [r4, #12]
 801354c:	075b      	lsls	r3, r3, #29
 801354e:	d506      	bpl.n	801355e <__sflush_r+0x4a>
 8013550:	6863      	ldr	r3, [r4, #4]
 8013552:	1ad2      	subs	r2, r2, r3
 8013554:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013556:	2b00      	cmp	r3, #0
 8013558:	d001      	beq.n	801355e <__sflush_r+0x4a>
 801355a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801355c:	1ad2      	subs	r2, r2, r3
 801355e:	2300      	movs	r3, #0
 8013560:	0028      	movs	r0, r5
 8013562:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013564:	6a21      	ldr	r1, [r4, #32]
 8013566:	47b8      	blx	r7
 8013568:	89a2      	ldrh	r2, [r4, #12]
 801356a:	1c43      	adds	r3, r0, #1
 801356c:	d106      	bne.n	801357c <__sflush_r+0x68>
 801356e:	6829      	ldr	r1, [r5, #0]
 8013570:	291d      	cmp	r1, #29
 8013572:	d846      	bhi.n	8013602 <__sflush_r+0xee>
 8013574:	4b29      	ldr	r3, [pc, #164]	@ (801361c <__sflush_r+0x108>)
 8013576:	40cb      	lsrs	r3, r1
 8013578:	07db      	lsls	r3, r3, #31
 801357a:	d542      	bpl.n	8013602 <__sflush_r+0xee>
 801357c:	2300      	movs	r3, #0
 801357e:	6063      	str	r3, [r4, #4]
 8013580:	6923      	ldr	r3, [r4, #16]
 8013582:	6023      	str	r3, [r4, #0]
 8013584:	04d2      	lsls	r2, r2, #19
 8013586:	d505      	bpl.n	8013594 <__sflush_r+0x80>
 8013588:	1c43      	adds	r3, r0, #1
 801358a:	d102      	bne.n	8013592 <__sflush_r+0x7e>
 801358c:	682b      	ldr	r3, [r5, #0]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d100      	bne.n	8013594 <__sflush_r+0x80>
 8013592:	6560      	str	r0, [r4, #84]	@ 0x54
 8013594:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013596:	602e      	str	r6, [r5, #0]
 8013598:	2900      	cmp	r1, #0
 801359a:	d017      	beq.n	80135cc <__sflush_r+0xb8>
 801359c:	0023      	movs	r3, r4
 801359e:	3344      	adds	r3, #68	@ 0x44
 80135a0:	4299      	cmp	r1, r3
 80135a2:	d002      	beq.n	80135aa <__sflush_r+0x96>
 80135a4:	0028      	movs	r0, r5
 80135a6:	f7fe fd15 	bl	8011fd4 <_free_r>
 80135aa:	2300      	movs	r3, #0
 80135ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80135ae:	e00d      	b.n	80135cc <__sflush_r+0xb8>
 80135b0:	2301      	movs	r3, #1
 80135b2:	0028      	movs	r0, r5
 80135b4:	47b8      	blx	r7
 80135b6:	0002      	movs	r2, r0
 80135b8:	1c43      	adds	r3, r0, #1
 80135ba:	d1c6      	bne.n	801354a <__sflush_r+0x36>
 80135bc:	682b      	ldr	r3, [r5, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d0c3      	beq.n	801354a <__sflush_r+0x36>
 80135c2:	2b1d      	cmp	r3, #29
 80135c4:	d001      	beq.n	80135ca <__sflush_r+0xb6>
 80135c6:	2b16      	cmp	r3, #22
 80135c8:	d11a      	bne.n	8013600 <__sflush_r+0xec>
 80135ca:	602e      	str	r6, [r5, #0]
 80135cc:	2000      	movs	r0, #0
 80135ce:	e01e      	b.n	801360e <__sflush_r+0xfa>
 80135d0:	690e      	ldr	r6, [r1, #16]
 80135d2:	2e00      	cmp	r6, #0
 80135d4:	d0fa      	beq.n	80135cc <__sflush_r+0xb8>
 80135d6:	680f      	ldr	r7, [r1, #0]
 80135d8:	600e      	str	r6, [r1, #0]
 80135da:	1bba      	subs	r2, r7, r6
 80135dc:	9201      	str	r2, [sp, #4]
 80135de:	2200      	movs	r2, #0
 80135e0:	079b      	lsls	r3, r3, #30
 80135e2:	d100      	bne.n	80135e6 <__sflush_r+0xd2>
 80135e4:	694a      	ldr	r2, [r1, #20]
 80135e6:	60a2      	str	r2, [r4, #8]
 80135e8:	9b01      	ldr	r3, [sp, #4]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	ddee      	ble.n	80135cc <__sflush_r+0xb8>
 80135ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80135f0:	0032      	movs	r2, r6
 80135f2:	001f      	movs	r7, r3
 80135f4:	0028      	movs	r0, r5
 80135f6:	9b01      	ldr	r3, [sp, #4]
 80135f8:	6a21      	ldr	r1, [r4, #32]
 80135fa:	47b8      	blx	r7
 80135fc:	2800      	cmp	r0, #0
 80135fe:	dc07      	bgt.n	8013610 <__sflush_r+0xfc>
 8013600:	89a2      	ldrh	r2, [r4, #12]
 8013602:	2340      	movs	r3, #64	@ 0x40
 8013604:	2001      	movs	r0, #1
 8013606:	4313      	orrs	r3, r2
 8013608:	b21b      	sxth	r3, r3
 801360a:	81a3      	strh	r3, [r4, #12]
 801360c:	4240      	negs	r0, r0
 801360e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013610:	9b01      	ldr	r3, [sp, #4]
 8013612:	1836      	adds	r6, r6, r0
 8013614:	1a1b      	subs	r3, r3, r0
 8013616:	9301      	str	r3, [sp, #4]
 8013618:	e7e6      	b.n	80135e8 <__sflush_r+0xd4>
 801361a:	46c0      	nop			@ (mov r8, r8)
 801361c:	20400001 	.word	0x20400001

08013620 <_fflush_r>:
 8013620:	690b      	ldr	r3, [r1, #16]
 8013622:	b570      	push	{r4, r5, r6, lr}
 8013624:	0005      	movs	r5, r0
 8013626:	000c      	movs	r4, r1
 8013628:	2b00      	cmp	r3, #0
 801362a:	d102      	bne.n	8013632 <_fflush_r+0x12>
 801362c:	2500      	movs	r5, #0
 801362e:	0028      	movs	r0, r5
 8013630:	bd70      	pop	{r4, r5, r6, pc}
 8013632:	2800      	cmp	r0, #0
 8013634:	d004      	beq.n	8013640 <_fflush_r+0x20>
 8013636:	6a03      	ldr	r3, [r0, #32]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d101      	bne.n	8013640 <_fflush_r+0x20>
 801363c:	f7fd fc6c 	bl	8010f18 <__sinit>
 8013640:	220c      	movs	r2, #12
 8013642:	5ea3      	ldrsh	r3, [r4, r2]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d0f1      	beq.n	801362c <_fflush_r+0xc>
 8013648:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801364a:	07d2      	lsls	r2, r2, #31
 801364c:	d404      	bmi.n	8013658 <_fflush_r+0x38>
 801364e:	059b      	lsls	r3, r3, #22
 8013650:	d402      	bmi.n	8013658 <_fflush_r+0x38>
 8013652:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013654:	f7fd fe0d 	bl	8011272 <__retarget_lock_acquire_recursive>
 8013658:	0028      	movs	r0, r5
 801365a:	0021      	movs	r1, r4
 801365c:	f7ff ff5a 	bl	8013514 <__sflush_r>
 8013660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013662:	0005      	movs	r5, r0
 8013664:	07db      	lsls	r3, r3, #31
 8013666:	d4e2      	bmi.n	801362e <_fflush_r+0xe>
 8013668:	89a3      	ldrh	r3, [r4, #12]
 801366a:	059b      	lsls	r3, r3, #22
 801366c:	d4df      	bmi.n	801362e <_fflush_r+0xe>
 801366e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013670:	f7fd fe00 	bl	8011274 <__retarget_lock_release_recursive>
 8013674:	e7db      	b.n	801362e <_fflush_r+0xe>
	...

08013678 <fiprintf>:
 8013678:	b40e      	push	{r1, r2, r3}
 801367a:	b517      	push	{r0, r1, r2, r4, lr}
 801367c:	4c05      	ldr	r4, [pc, #20]	@ (8013694 <fiprintf+0x1c>)
 801367e:	ab05      	add	r3, sp, #20
 8013680:	cb04      	ldmia	r3!, {r2}
 8013682:	0001      	movs	r1, r0
 8013684:	6820      	ldr	r0, [r4, #0]
 8013686:	9301      	str	r3, [sp, #4]
 8013688:	f000 f8b6 	bl	80137f8 <_vfiprintf_r>
 801368c:	bc1e      	pop	{r1, r2, r3, r4}
 801368e:	bc08      	pop	{r3}
 8013690:	b003      	add	sp, #12
 8013692:	4718      	bx	r3
 8013694:	200001a4 	.word	0x200001a4

08013698 <memmove>:
 8013698:	b510      	push	{r4, lr}
 801369a:	4288      	cmp	r0, r1
 801369c:	d902      	bls.n	80136a4 <memmove+0xc>
 801369e:	188b      	adds	r3, r1, r2
 80136a0:	4298      	cmp	r0, r3
 80136a2:	d308      	bcc.n	80136b6 <memmove+0x1e>
 80136a4:	2300      	movs	r3, #0
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d007      	beq.n	80136ba <memmove+0x22>
 80136aa:	5ccc      	ldrb	r4, [r1, r3]
 80136ac:	54c4      	strb	r4, [r0, r3]
 80136ae:	3301      	adds	r3, #1
 80136b0:	e7f9      	b.n	80136a6 <memmove+0xe>
 80136b2:	5c8b      	ldrb	r3, [r1, r2]
 80136b4:	5483      	strb	r3, [r0, r2]
 80136b6:	3a01      	subs	r2, #1
 80136b8:	d2fb      	bcs.n	80136b2 <memmove+0x1a>
 80136ba:	bd10      	pop	{r4, pc}

080136bc <_sbrk_r>:
 80136bc:	2300      	movs	r3, #0
 80136be:	b570      	push	{r4, r5, r6, lr}
 80136c0:	4d06      	ldr	r5, [pc, #24]	@ (80136dc <_sbrk_r+0x20>)
 80136c2:	0004      	movs	r4, r0
 80136c4:	0008      	movs	r0, r1
 80136c6:	602b      	str	r3, [r5, #0]
 80136c8:	f7f8 f840 	bl	800b74c <_sbrk>
 80136cc:	1c43      	adds	r3, r0, #1
 80136ce:	d103      	bne.n	80136d8 <_sbrk_r+0x1c>
 80136d0:	682b      	ldr	r3, [r5, #0]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d000      	beq.n	80136d8 <_sbrk_r+0x1c>
 80136d6:	6023      	str	r3, [r4, #0]
 80136d8:	bd70      	pop	{r4, r5, r6, pc}
 80136da:	46c0      	nop			@ (mov r8, r8)
 80136dc:	2000060c 	.word	0x2000060c

080136e0 <abort>:
 80136e0:	2006      	movs	r0, #6
 80136e2:	b510      	push	{r4, lr}
 80136e4:	f000 fa6e 	bl	8013bc4 <raise>
 80136e8:	2001      	movs	r0, #1
 80136ea:	f7f7 ffbd 	bl	800b668 <_exit>

080136ee <_calloc_r>:
 80136ee:	b570      	push	{r4, r5, r6, lr}
 80136f0:	0c0b      	lsrs	r3, r1, #16
 80136f2:	0c15      	lsrs	r5, r2, #16
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d11e      	bne.n	8013736 <_calloc_r+0x48>
 80136f8:	2d00      	cmp	r5, #0
 80136fa:	d10c      	bne.n	8013716 <_calloc_r+0x28>
 80136fc:	b289      	uxth	r1, r1
 80136fe:	b294      	uxth	r4, r2
 8013700:	434c      	muls	r4, r1
 8013702:	0021      	movs	r1, r4
 8013704:	f7ff f836 	bl	8012774 <_malloc_r>
 8013708:	1e05      	subs	r5, r0, #0
 801370a:	d01b      	beq.n	8013744 <_calloc_r+0x56>
 801370c:	0022      	movs	r2, r4
 801370e:	2100      	movs	r1, #0
 8013710:	f7fd fcb8 	bl	8011084 <memset>
 8013714:	e016      	b.n	8013744 <_calloc_r+0x56>
 8013716:	1c2b      	adds	r3, r5, #0
 8013718:	1c0c      	adds	r4, r1, #0
 801371a:	b289      	uxth	r1, r1
 801371c:	b292      	uxth	r2, r2
 801371e:	434a      	muls	r2, r1
 8013720:	b29b      	uxth	r3, r3
 8013722:	b2a1      	uxth	r1, r4
 8013724:	4359      	muls	r1, r3
 8013726:	0c14      	lsrs	r4, r2, #16
 8013728:	190c      	adds	r4, r1, r4
 801372a:	0c23      	lsrs	r3, r4, #16
 801372c:	d107      	bne.n	801373e <_calloc_r+0x50>
 801372e:	0424      	lsls	r4, r4, #16
 8013730:	b292      	uxth	r2, r2
 8013732:	4314      	orrs	r4, r2
 8013734:	e7e5      	b.n	8013702 <_calloc_r+0x14>
 8013736:	2d00      	cmp	r5, #0
 8013738:	d101      	bne.n	801373e <_calloc_r+0x50>
 801373a:	1c14      	adds	r4, r2, #0
 801373c:	e7ed      	b.n	801371a <_calloc_r+0x2c>
 801373e:	230c      	movs	r3, #12
 8013740:	2500      	movs	r5, #0
 8013742:	6003      	str	r3, [r0, #0]
 8013744:	0028      	movs	r0, r5
 8013746:	bd70      	pop	{r4, r5, r6, pc}

08013748 <_realloc_r>:
 8013748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801374a:	0006      	movs	r6, r0
 801374c:	000c      	movs	r4, r1
 801374e:	0015      	movs	r5, r2
 8013750:	2900      	cmp	r1, #0
 8013752:	d105      	bne.n	8013760 <_realloc_r+0x18>
 8013754:	0011      	movs	r1, r2
 8013756:	f7ff f80d 	bl	8012774 <_malloc_r>
 801375a:	0004      	movs	r4, r0
 801375c:	0020      	movs	r0, r4
 801375e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013760:	2a00      	cmp	r2, #0
 8013762:	d103      	bne.n	801376c <_realloc_r+0x24>
 8013764:	f7fe fc36 	bl	8011fd4 <_free_r>
 8013768:	002c      	movs	r4, r5
 801376a:	e7f7      	b.n	801375c <_realloc_r+0x14>
 801376c:	f000 fa4a 	bl	8013c04 <_malloc_usable_size_r>
 8013770:	0007      	movs	r7, r0
 8013772:	4285      	cmp	r5, r0
 8013774:	d802      	bhi.n	801377c <_realloc_r+0x34>
 8013776:	0843      	lsrs	r3, r0, #1
 8013778:	42ab      	cmp	r3, r5
 801377a:	d3ef      	bcc.n	801375c <_realloc_r+0x14>
 801377c:	0029      	movs	r1, r5
 801377e:	0030      	movs	r0, r6
 8013780:	f7fe fff8 	bl	8012774 <_malloc_r>
 8013784:	9001      	str	r0, [sp, #4]
 8013786:	2800      	cmp	r0, #0
 8013788:	d101      	bne.n	801378e <_realloc_r+0x46>
 801378a:	9c01      	ldr	r4, [sp, #4]
 801378c:	e7e6      	b.n	801375c <_realloc_r+0x14>
 801378e:	002a      	movs	r2, r5
 8013790:	42bd      	cmp	r5, r7
 8013792:	d900      	bls.n	8013796 <_realloc_r+0x4e>
 8013794:	003a      	movs	r2, r7
 8013796:	0021      	movs	r1, r4
 8013798:	9801      	ldr	r0, [sp, #4]
 801379a:	f7fd fd77 	bl	801128c <memcpy>
 801379e:	0021      	movs	r1, r4
 80137a0:	0030      	movs	r0, r6
 80137a2:	f7fe fc17 	bl	8011fd4 <_free_r>
 80137a6:	e7f0      	b.n	801378a <_realloc_r+0x42>

080137a8 <__sfputc_r>:
 80137a8:	6893      	ldr	r3, [r2, #8]
 80137aa:	b510      	push	{r4, lr}
 80137ac:	3b01      	subs	r3, #1
 80137ae:	6093      	str	r3, [r2, #8]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	da04      	bge.n	80137be <__sfputc_r+0x16>
 80137b4:	6994      	ldr	r4, [r2, #24]
 80137b6:	42a3      	cmp	r3, r4
 80137b8:	db07      	blt.n	80137ca <__sfputc_r+0x22>
 80137ba:	290a      	cmp	r1, #10
 80137bc:	d005      	beq.n	80137ca <__sfputc_r+0x22>
 80137be:	6813      	ldr	r3, [r2, #0]
 80137c0:	1c58      	adds	r0, r3, #1
 80137c2:	6010      	str	r0, [r2, #0]
 80137c4:	7019      	strb	r1, [r3, #0]
 80137c6:	0008      	movs	r0, r1
 80137c8:	bd10      	pop	{r4, pc}
 80137ca:	f000 f931 	bl	8013a30 <__swbuf_r>
 80137ce:	0001      	movs	r1, r0
 80137d0:	e7f9      	b.n	80137c6 <__sfputc_r+0x1e>

080137d2 <__sfputs_r>:
 80137d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137d4:	0006      	movs	r6, r0
 80137d6:	000f      	movs	r7, r1
 80137d8:	0014      	movs	r4, r2
 80137da:	18d5      	adds	r5, r2, r3
 80137dc:	42ac      	cmp	r4, r5
 80137de:	d101      	bne.n	80137e4 <__sfputs_r+0x12>
 80137e0:	2000      	movs	r0, #0
 80137e2:	e007      	b.n	80137f4 <__sfputs_r+0x22>
 80137e4:	7821      	ldrb	r1, [r4, #0]
 80137e6:	003a      	movs	r2, r7
 80137e8:	0030      	movs	r0, r6
 80137ea:	f7ff ffdd 	bl	80137a8 <__sfputc_r>
 80137ee:	3401      	adds	r4, #1
 80137f0:	1c43      	adds	r3, r0, #1
 80137f2:	d1f3      	bne.n	80137dc <__sfputs_r+0xa>
 80137f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080137f8 <_vfiprintf_r>:
 80137f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137fa:	b0a1      	sub	sp, #132	@ 0x84
 80137fc:	000f      	movs	r7, r1
 80137fe:	0015      	movs	r5, r2
 8013800:	001e      	movs	r6, r3
 8013802:	9003      	str	r0, [sp, #12]
 8013804:	2800      	cmp	r0, #0
 8013806:	d004      	beq.n	8013812 <_vfiprintf_r+0x1a>
 8013808:	6a03      	ldr	r3, [r0, #32]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d101      	bne.n	8013812 <_vfiprintf_r+0x1a>
 801380e:	f7fd fb83 	bl	8010f18 <__sinit>
 8013812:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013814:	07db      	lsls	r3, r3, #31
 8013816:	d405      	bmi.n	8013824 <_vfiprintf_r+0x2c>
 8013818:	89bb      	ldrh	r3, [r7, #12]
 801381a:	059b      	lsls	r3, r3, #22
 801381c:	d402      	bmi.n	8013824 <_vfiprintf_r+0x2c>
 801381e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013820:	f7fd fd27 	bl	8011272 <__retarget_lock_acquire_recursive>
 8013824:	89bb      	ldrh	r3, [r7, #12]
 8013826:	071b      	lsls	r3, r3, #28
 8013828:	d502      	bpl.n	8013830 <_vfiprintf_r+0x38>
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d113      	bne.n	8013858 <_vfiprintf_r+0x60>
 8013830:	0039      	movs	r1, r7
 8013832:	9803      	ldr	r0, [sp, #12]
 8013834:	f000 f93e 	bl	8013ab4 <__swsetup_r>
 8013838:	2800      	cmp	r0, #0
 801383a:	d00d      	beq.n	8013858 <_vfiprintf_r+0x60>
 801383c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801383e:	07db      	lsls	r3, r3, #31
 8013840:	d503      	bpl.n	801384a <_vfiprintf_r+0x52>
 8013842:	2001      	movs	r0, #1
 8013844:	4240      	negs	r0, r0
 8013846:	b021      	add	sp, #132	@ 0x84
 8013848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801384a:	89bb      	ldrh	r3, [r7, #12]
 801384c:	059b      	lsls	r3, r3, #22
 801384e:	d4f8      	bmi.n	8013842 <_vfiprintf_r+0x4a>
 8013850:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013852:	f7fd fd0f 	bl	8011274 <__retarget_lock_release_recursive>
 8013856:	e7f4      	b.n	8013842 <_vfiprintf_r+0x4a>
 8013858:	2300      	movs	r3, #0
 801385a:	ac08      	add	r4, sp, #32
 801385c:	6163      	str	r3, [r4, #20]
 801385e:	3320      	adds	r3, #32
 8013860:	7663      	strb	r3, [r4, #25]
 8013862:	3310      	adds	r3, #16
 8013864:	76a3      	strb	r3, [r4, #26]
 8013866:	9607      	str	r6, [sp, #28]
 8013868:	002e      	movs	r6, r5
 801386a:	7833      	ldrb	r3, [r6, #0]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d001      	beq.n	8013874 <_vfiprintf_r+0x7c>
 8013870:	2b25      	cmp	r3, #37	@ 0x25
 8013872:	d148      	bne.n	8013906 <_vfiprintf_r+0x10e>
 8013874:	1b73      	subs	r3, r6, r5
 8013876:	9305      	str	r3, [sp, #20]
 8013878:	42ae      	cmp	r6, r5
 801387a:	d00b      	beq.n	8013894 <_vfiprintf_r+0x9c>
 801387c:	002a      	movs	r2, r5
 801387e:	0039      	movs	r1, r7
 8013880:	9803      	ldr	r0, [sp, #12]
 8013882:	f7ff ffa6 	bl	80137d2 <__sfputs_r>
 8013886:	3001      	adds	r0, #1
 8013888:	d100      	bne.n	801388c <_vfiprintf_r+0x94>
 801388a:	e0ae      	b.n	80139ea <_vfiprintf_r+0x1f2>
 801388c:	6963      	ldr	r3, [r4, #20]
 801388e:	9a05      	ldr	r2, [sp, #20]
 8013890:	189b      	adds	r3, r3, r2
 8013892:	6163      	str	r3, [r4, #20]
 8013894:	7833      	ldrb	r3, [r6, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d100      	bne.n	801389c <_vfiprintf_r+0xa4>
 801389a:	e0a6      	b.n	80139ea <_vfiprintf_r+0x1f2>
 801389c:	2201      	movs	r2, #1
 801389e:	2300      	movs	r3, #0
 80138a0:	4252      	negs	r2, r2
 80138a2:	6062      	str	r2, [r4, #4]
 80138a4:	a904      	add	r1, sp, #16
 80138a6:	3254      	adds	r2, #84	@ 0x54
 80138a8:	1852      	adds	r2, r2, r1
 80138aa:	1c75      	adds	r5, r6, #1
 80138ac:	6023      	str	r3, [r4, #0]
 80138ae:	60e3      	str	r3, [r4, #12]
 80138b0:	60a3      	str	r3, [r4, #8]
 80138b2:	7013      	strb	r3, [r2, #0]
 80138b4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80138b6:	4b59      	ldr	r3, [pc, #356]	@ (8013a1c <_vfiprintf_r+0x224>)
 80138b8:	2205      	movs	r2, #5
 80138ba:	0018      	movs	r0, r3
 80138bc:	7829      	ldrb	r1, [r5, #0]
 80138be:	9305      	str	r3, [sp, #20]
 80138c0:	f7fd fcd9 	bl	8011276 <memchr>
 80138c4:	1c6e      	adds	r6, r5, #1
 80138c6:	2800      	cmp	r0, #0
 80138c8:	d11f      	bne.n	801390a <_vfiprintf_r+0x112>
 80138ca:	6822      	ldr	r2, [r4, #0]
 80138cc:	06d3      	lsls	r3, r2, #27
 80138ce:	d504      	bpl.n	80138da <_vfiprintf_r+0xe2>
 80138d0:	2353      	movs	r3, #83	@ 0x53
 80138d2:	a904      	add	r1, sp, #16
 80138d4:	185b      	adds	r3, r3, r1
 80138d6:	2120      	movs	r1, #32
 80138d8:	7019      	strb	r1, [r3, #0]
 80138da:	0713      	lsls	r3, r2, #28
 80138dc:	d504      	bpl.n	80138e8 <_vfiprintf_r+0xf0>
 80138de:	2353      	movs	r3, #83	@ 0x53
 80138e0:	a904      	add	r1, sp, #16
 80138e2:	185b      	adds	r3, r3, r1
 80138e4:	212b      	movs	r1, #43	@ 0x2b
 80138e6:	7019      	strb	r1, [r3, #0]
 80138e8:	782b      	ldrb	r3, [r5, #0]
 80138ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80138ec:	d016      	beq.n	801391c <_vfiprintf_r+0x124>
 80138ee:	002e      	movs	r6, r5
 80138f0:	2100      	movs	r1, #0
 80138f2:	200a      	movs	r0, #10
 80138f4:	68e3      	ldr	r3, [r4, #12]
 80138f6:	7832      	ldrb	r2, [r6, #0]
 80138f8:	1c75      	adds	r5, r6, #1
 80138fa:	3a30      	subs	r2, #48	@ 0x30
 80138fc:	2a09      	cmp	r2, #9
 80138fe:	d950      	bls.n	80139a2 <_vfiprintf_r+0x1aa>
 8013900:	2900      	cmp	r1, #0
 8013902:	d111      	bne.n	8013928 <_vfiprintf_r+0x130>
 8013904:	e017      	b.n	8013936 <_vfiprintf_r+0x13e>
 8013906:	3601      	adds	r6, #1
 8013908:	e7af      	b.n	801386a <_vfiprintf_r+0x72>
 801390a:	9b05      	ldr	r3, [sp, #20]
 801390c:	6822      	ldr	r2, [r4, #0]
 801390e:	1ac0      	subs	r0, r0, r3
 8013910:	2301      	movs	r3, #1
 8013912:	4083      	lsls	r3, r0
 8013914:	4313      	orrs	r3, r2
 8013916:	0035      	movs	r5, r6
 8013918:	6023      	str	r3, [r4, #0]
 801391a:	e7cc      	b.n	80138b6 <_vfiprintf_r+0xbe>
 801391c:	9b07      	ldr	r3, [sp, #28]
 801391e:	1d19      	adds	r1, r3, #4
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	9107      	str	r1, [sp, #28]
 8013924:	2b00      	cmp	r3, #0
 8013926:	db01      	blt.n	801392c <_vfiprintf_r+0x134>
 8013928:	930b      	str	r3, [sp, #44]	@ 0x2c
 801392a:	e004      	b.n	8013936 <_vfiprintf_r+0x13e>
 801392c:	425b      	negs	r3, r3
 801392e:	60e3      	str	r3, [r4, #12]
 8013930:	2302      	movs	r3, #2
 8013932:	4313      	orrs	r3, r2
 8013934:	6023      	str	r3, [r4, #0]
 8013936:	7833      	ldrb	r3, [r6, #0]
 8013938:	2b2e      	cmp	r3, #46	@ 0x2e
 801393a:	d10c      	bne.n	8013956 <_vfiprintf_r+0x15e>
 801393c:	7873      	ldrb	r3, [r6, #1]
 801393e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013940:	d134      	bne.n	80139ac <_vfiprintf_r+0x1b4>
 8013942:	9b07      	ldr	r3, [sp, #28]
 8013944:	3602      	adds	r6, #2
 8013946:	1d1a      	adds	r2, r3, #4
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	9207      	str	r2, [sp, #28]
 801394c:	2b00      	cmp	r3, #0
 801394e:	da01      	bge.n	8013954 <_vfiprintf_r+0x15c>
 8013950:	2301      	movs	r3, #1
 8013952:	425b      	negs	r3, r3
 8013954:	9309      	str	r3, [sp, #36]	@ 0x24
 8013956:	4d32      	ldr	r5, [pc, #200]	@ (8013a20 <_vfiprintf_r+0x228>)
 8013958:	2203      	movs	r2, #3
 801395a:	0028      	movs	r0, r5
 801395c:	7831      	ldrb	r1, [r6, #0]
 801395e:	f7fd fc8a 	bl	8011276 <memchr>
 8013962:	2800      	cmp	r0, #0
 8013964:	d006      	beq.n	8013974 <_vfiprintf_r+0x17c>
 8013966:	2340      	movs	r3, #64	@ 0x40
 8013968:	1b40      	subs	r0, r0, r5
 801396a:	4083      	lsls	r3, r0
 801396c:	6822      	ldr	r2, [r4, #0]
 801396e:	3601      	adds	r6, #1
 8013970:	4313      	orrs	r3, r2
 8013972:	6023      	str	r3, [r4, #0]
 8013974:	7831      	ldrb	r1, [r6, #0]
 8013976:	2206      	movs	r2, #6
 8013978:	482a      	ldr	r0, [pc, #168]	@ (8013a24 <_vfiprintf_r+0x22c>)
 801397a:	1c75      	adds	r5, r6, #1
 801397c:	7621      	strb	r1, [r4, #24]
 801397e:	f7fd fc7a 	bl	8011276 <memchr>
 8013982:	2800      	cmp	r0, #0
 8013984:	d040      	beq.n	8013a08 <_vfiprintf_r+0x210>
 8013986:	4b28      	ldr	r3, [pc, #160]	@ (8013a28 <_vfiprintf_r+0x230>)
 8013988:	2b00      	cmp	r3, #0
 801398a:	d122      	bne.n	80139d2 <_vfiprintf_r+0x1da>
 801398c:	2207      	movs	r2, #7
 801398e:	9b07      	ldr	r3, [sp, #28]
 8013990:	3307      	adds	r3, #7
 8013992:	4393      	bics	r3, r2
 8013994:	3308      	adds	r3, #8
 8013996:	9307      	str	r3, [sp, #28]
 8013998:	6963      	ldr	r3, [r4, #20]
 801399a:	9a04      	ldr	r2, [sp, #16]
 801399c:	189b      	adds	r3, r3, r2
 801399e:	6163      	str	r3, [r4, #20]
 80139a0:	e762      	b.n	8013868 <_vfiprintf_r+0x70>
 80139a2:	4343      	muls	r3, r0
 80139a4:	002e      	movs	r6, r5
 80139a6:	2101      	movs	r1, #1
 80139a8:	189b      	adds	r3, r3, r2
 80139aa:	e7a4      	b.n	80138f6 <_vfiprintf_r+0xfe>
 80139ac:	2300      	movs	r3, #0
 80139ae:	200a      	movs	r0, #10
 80139b0:	0019      	movs	r1, r3
 80139b2:	3601      	adds	r6, #1
 80139b4:	6063      	str	r3, [r4, #4]
 80139b6:	7832      	ldrb	r2, [r6, #0]
 80139b8:	1c75      	adds	r5, r6, #1
 80139ba:	3a30      	subs	r2, #48	@ 0x30
 80139bc:	2a09      	cmp	r2, #9
 80139be:	d903      	bls.n	80139c8 <_vfiprintf_r+0x1d0>
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d0c8      	beq.n	8013956 <_vfiprintf_r+0x15e>
 80139c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80139c6:	e7c6      	b.n	8013956 <_vfiprintf_r+0x15e>
 80139c8:	4341      	muls	r1, r0
 80139ca:	002e      	movs	r6, r5
 80139cc:	2301      	movs	r3, #1
 80139ce:	1889      	adds	r1, r1, r2
 80139d0:	e7f1      	b.n	80139b6 <_vfiprintf_r+0x1be>
 80139d2:	aa07      	add	r2, sp, #28
 80139d4:	9200      	str	r2, [sp, #0]
 80139d6:	0021      	movs	r1, r4
 80139d8:	003a      	movs	r2, r7
 80139da:	4b14      	ldr	r3, [pc, #80]	@ (8013a2c <_vfiprintf_r+0x234>)
 80139dc:	9803      	ldr	r0, [sp, #12]
 80139de:	f7fc fe51 	bl	8010684 <_printf_float>
 80139e2:	9004      	str	r0, [sp, #16]
 80139e4:	9b04      	ldr	r3, [sp, #16]
 80139e6:	3301      	adds	r3, #1
 80139e8:	d1d6      	bne.n	8013998 <_vfiprintf_r+0x1a0>
 80139ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80139ec:	07db      	lsls	r3, r3, #31
 80139ee:	d405      	bmi.n	80139fc <_vfiprintf_r+0x204>
 80139f0:	89bb      	ldrh	r3, [r7, #12]
 80139f2:	059b      	lsls	r3, r3, #22
 80139f4:	d402      	bmi.n	80139fc <_vfiprintf_r+0x204>
 80139f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80139f8:	f7fd fc3c 	bl	8011274 <__retarget_lock_release_recursive>
 80139fc:	89bb      	ldrh	r3, [r7, #12]
 80139fe:	065b      	lsls	r3, r3, #25
 8013a00:	d500      	bpl.n	8013a04 <_vfiprintf_r+0x20c>
 8013a02:	e71e      	b.n	8013842 <_vfiprintf_r+0x4a>
 8013a04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8013a06:	e71e      	b.n	8013846 <_vfiprintf_r+0x4e>
 8013a08:	aa07      	add	r2, sp, #28
 8013a0a:	9200      	str	r2, [sp, #0]
 8013a0c:	0021      	movs	r1, r4
 8013a0e:	003a      	movs	r2, r7
 8013a10:	4b06      	ldr	r3, [pc, #24]	@ (8013a2c <_vfiprintf_r+0x234>)
 8013a12:	9803      	ldr	r0, [sp, #12]
 8013a14:	f7fd f8e4 	bl	8010be0 <_printf_i>
 8013a18:	e7e3      	b.n	80139e2 <_vfiprintf_r+0x1ea>
 8013a1a:	46c0      	nop			@ (mov r8, r8)
 8013a1c:	0801664e 	.word	0x0801664e
 8013a20:	08016654 	.word	0x08016654
 8013a24:	08016658 	.word	0x08016658
 8013a28:	08010685 	.word	0x08010685
 8013a2c:	080137d3 	.word	0x080137d3

08013a30 <__swbuf_r>:
 8013a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a32:	0006      	movs	r6, r0
 8013a34:	000d      	movs	r5, r1
 8013a36:	0014      	movs	r4, r2
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	d004      	beq.n	8013a46 <__swbuf_r+0x16>
 8013a3c:	6a03      	ldr	r3, [r0, #32]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <__swbuf_r+0x16>
 8013a42:	f7fd fa69 	bl	8010f18 <__sinit>
 8013a46:	69a3      	ldr	r3, [r4, #24]
 8013a48:	60a3      	str	r3, [r4, #8]
 8013a4a:	89a3      	ldrh	r3, [r4, #12]
 8013a4c:	071b      	lsls	r3, r3, #28
 8013a4e:	d502      	bpl.n	8013a56 <__swbuf_r+0x26>
 8013a50:	6923      	ldr	r3, [r4, #16]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d109      	bne.n	8013a6a <__swbuf_r+0x3a>
 8013a56:	0021      	movs	r1, r4
 8013a58:	0030      	movs	r0, r6
 8013a5a:	f000 f82b 	bl	8013ab4 <__swsetup_r>
 8013a5e:	2800      	cmp	r0, #0
 8013a60:	d003      	beq.n	8013a6a <__swbuf_r+0x3a>
 8013a62:	2501      	movs	r5, #1
 8013a64:	426d      	negs	r5, r5
 8013a66:	0028      	movs	r0, r5
 8013a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a6a:	6923      	ldr	r3, [r4, #16]
 8013a6c:	6820      	ldr	r0, [r4, #0]
 8013a6e:	b2ef      	uxtb	r7, r5
 8013a70:	1ac0      	subs	r0, r0, r3
 8013a72:	6963      	ldr	r3, [r4, #20]
 8013a74:	b2ed      	uxtb	r5, r5
 8013a76:	4283      	cmp	r3, r0
 8013a78:	dc05      	bgt.n	8013a86 <__swbuf_r+0x56>
 8013a7a:	0021      	movs	r1, r4
 8013a7c:	0030      	movs	r0, r6
 8013a7e:	f7ff fdcf 	bl	8013620 <_fflush_r>
 8013a82:	2800      	cmp	r0, #0
 8013a84:	d1ed      	bne.n	8013a62 <__swbuf_r+0x32>
 8013a86:	68a3      	ldr	r3, [r4, #8]
 8013a88:	3001      	adds	r0, #1
 8013a8a:	3b01      	subs	r3, #1
 8013a8c:	60a3      	str	r3, [r4, #8]
 8013a8e:	6823      	ldr	r3, [r4, #0]
 8013a90:	1c5a      	adds	r2, r3, #1
 8013a92:	6022      	str	r2, [r4, #0]
 8013a94:	701f      	strb	r7, [r3, #0]
 8013a96:	6963      	ldr	r3, [r4, #20]
 8013a98:	4283      	cmp	r3, r0
 8013a9a:	d004      	beq.n	8013aa6 <__swbuf_r+0x76>
 8013a9c:	89a3      	ldrh	r3, [r4, #12]
 8013a9e:	07db      	lsls	r3, r3, #31
 8013aa0:	d5e1      	bpl.n	8013a66 <__swbuf_r+0x36>
 8013aa2:	2d0a      	cmp	r5, #10
 8013aa4:	d1df      	bne.n	8013a66 <__swbuf_r+0x36>
 8013aa6:	0021      	movs	r1, r4
 8013aa8:	0030      	movs	r0, r6
 8013aaa:	f7ff fdb9 	bl	8013620 <_fflush_r>
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d0d9      	beq.n	8013a66 <__swbuf_r+0x36>
 8013ab2:	e7d6      	b.n	8013a62 <__swbuf_r+0x32>

08013ab4 <__swsetup_r>:
 8013ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8013b6c <__swsetup_r+0xb8>)
 8013ab6:	b570      	push	{r4, r5, r6, lr}
 8013ab8:	0005      	movs	r5, r0
 8013aba:	6818      	ldr	r0, [r3, #0]
 8013abc:	000c      	movs	r4, r1
 8013abe:	2800      	cmp	r0, #0
 8013ac0:	d004      	beq.n	8013acc <__swsetup_r+0x18>
 8013ac2:	6a03      	ldr	r3, [r0, #32]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d101      	bne.n	8013acc <__swsetup_r+0x18>
 8013ac8:	f7fd fa26 	bl	8010f18 <__sinit>
 8013acc:	220c      	movs	r2, #12
 8013ace:	5ea3      	ldrsh	r3, [r4, r2]
 8013ad0:	071a      	lsls	r2, r3, #28
 8013ad2:	d423      	bmi.n	8013b1c <__swsetup_r+0x68>
 8013ad4:	06da      	lsls	r2, r3, #27
 8013ad6:	d407      	bmi.n	8013ae8 <__swsetup_r+0x34>
 8013ad8:	2209      	movs	r2, #9
 8013ada:	602a      	str	r2, [r5, #0]
 8013adc:	2240      	movs	r2, #64	@ 0x40
 8013ade:	2001      	movs	r0, #1
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	81a3      	strh	r3, [r4, #12]
 8013ae4:	4240      	negs	r0, r0
 8013ae6:	e03a      	b.n	8013b5e <__swsetup_r+0xaa>
 8013ae8:	075b      	lsls	r3, r3, #29
 8013aea:	d513      	bpl.n	8013b14 <__swsetup_r+0x60>
 8013aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013aee:	2900      	cmp	r1, #0
 8013af0:	d008      	beq.n	8013b04 <__swsetup_r+0x50>
 8013af2:	0023      	movs	r3, r4
 8013af4:	3344      	adds	r3, #68	@ 0x44
 8013af6:	4299      	cmp	r1, r3
 8013af8:	d002      	beq.n	8013b00 <__swsetup_r+0x4c>
 8013afa:	0028      	movs	r0, r5
 8013afc:	f7fe fa6a 	bl	8011fd4 <_free_r>
 8013b00:	2300      	movs	r3, #0
 8013b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b04:	2224      	movs	r2, #36	@ 0x24
 8013b06:	89a3      	ldrh	r3, [r4, #12]
 8013b08:	4393      	bics	r3, r2
 8013b0a:	81a3      	strh	r3, [r4, #12]
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	6063      	str	r3, [r4, #4]
 8013b10:	6923      	ldr	r3, [r4, #16]
 8013b12:	6023      	str	r3, [r4, #0]
 8013b14:	2308      	movs	r3, #8
 8013b16:	89a2      	ldrh	r2, [r4, #12]
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	81a3      	strh	r3, [r4, #12]
 8013b1c:	6923      	ldr	r3, [r4, #16]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d10b      	bne.n	8013b3a <__swsetup_r+0x86>
 8013b22:	21a0      	movs	r1, #160	@ 0xa0
 8013b24:	2280      	movs	r2, #128	@ 0x80
 8013b26:	89a3      	ldrh	r3, [r4, #12]
 8013b28:	0089      	lsls	r1, r1, #2
 8013b2a:	0092      	lsls	r2, r2, #2
 8013b2c:	400b      	ands	r3, r1
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	d003      	beq.n	8013b3a <__swsetup_r+0x86>
 8013b32:	0021      	movs	r1, r4
 8013b34:	0028      	movs	r0, r5
 8013b36:	f000 f897 	bl	8013c68 <__smakebuf_r>
 8013b3a:	220c      	movs	r2, #12
 8013b3c:	5ea3      	ldrsh	r3, [r4, r2]
 8013b3e:	2101      	movs	r1, #1
 8013b40:	001a      	movs	r2, r3
 8013b42:	400a      	ands	r2, r1
 8013b44:	420b      	tst	r3, r1
 8013b46:	d00b      	beq.n	8013b60 <__swsetup_r+0xac>
 8013b48:	2200      	movs	r2, #0
 8013b4a:	60a2      	str	r2, [r4, #8]
 8013b4c:	6962      	ldr	r2, [r4, #20]
 8013b4e:	4252      	negs	r2, r2
 8013b50:	61a2      	str	r2, [r4, #24]
 8013b52:	2000      	movs	r0, #0
 8013b54:	6922      	ldr	r2, [r4, #16]
 8013b56:	4282      	cmp	r2, r0
 8013b58:	d101      	bne.n	8013b5e <__swsetup_r+0xaa>
 8013b5a:	061a      	lsls	r2, r3, #24
 8013b5c:	d4be      	bmi.n	8013adc <__swsetup_r+0x28>
 8013b5e:	bd70      	pop	{r4, r5, r6, pc}
 8013b60:	0799      	lsls	r1, r3, #30
 8013b62:	d400      	bmi.n	8013b66 <__swsetup_r+0xb2>
 8013b64:	6962      	ldr	r2, [r4, #20]
 8013b66:	60a2      	str	r2, [r4, #8]
 8013b68:	e7f3      	b.n	8013b52 <__swsetup_r+0x9e>
 8013b6a:	46c0      	nop			@ (mov r8, r8)
 8013b6c:	200001a4 	.word	0x200001a4

08013b70 <_raise_r>:
 8013b70:	b570      	push	{r4, r5, r6, lr}
 8013b72:	0004      	movs	r4, r0
 8013b74:	000d      	movs	r5, r1
 8013b76:	291f      	cmp	r1, #31
 8013b78:	d904      	bls.n	8013b84 <_raise_r+0x14>
 8013b7a:	2316      	movs	r3, #22
 8013b7c:	6003      	str	r3, [r0, #0]
 8013b7e:	2001      	movs	r0, #1
 8013b80:	4240      	negs	r0, r0
 8013b82:	bd70      	pop	{r4, r5, r6, pc}
 8013b84:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d004      	beq.n	8013b94 <_raise_r+0x24>
 8013b8a:	008a      	lsls	r2, r1, #2
 8013b8c:	189b      	adds	r3, r3, r2
 8013b8e:	681a      	ldr	r2, [r3, #0]
 8013b90:	2a00      	cmp	r2, #0
 8013b92:	d108      	bne.n	8013ba6 <_raise_r+0x36>
 8013b94:	0020      	movs	r0, r4
 8013b96:	f000 f831 	bl	8013bfc <_getpid_r>
 8013b9a:	002a      	movs	r2, r5
 8013b9c:	0001      	movs	r1, r0
 8013b9e:	0020      	movs	r0, r4
 8013ba0:	f000 f81a 	bl	8013bd8 <_kill_r>
 8013ba4:	e7ed      	b.n	8013b82 <_raise_r+0x12>
 8013ba6:	2a01      	cmp	r2, #1
 8013ba8:	d009      	beq.n	8013bbe <_raise_r+0x4e>
 8013baa:	1c51      	adds	r1, r2, #1
 8013bac:	d103      	bne.n	8013bb6 <_raise_r+0x46>
 8013bae:	2316      	movs	r3, #22
 8013bb0:	6003      	str	r3, [r0, #0]
 8013bb2:	2001      	movs	r0, #1
 8013bb4:	e7e5      	b.n	8013b82 <_raise_r+0x12>
 8013bb6:	2100      	movs	r1, #0
 8013bb8:	0028      	movs	r0, r5
 8013bba:	6019      	str	r1, [r3, #0]
 8013bbc:	4790      	blx	r2
 8013bbe:	2000      	movs	r0, #0
 8013bc0:	e7df      	b.n	8013b82 <_raise_r+0x12>
	...

08013bc4 <raise>:
 8013bc4:	b510      	push	{r4, lr}
 8013bc6:	4b03      	ldr	r3, [pc, #12]	@ (8013bd4 <raise+0x10>)
 8013bc8:	0001      	movs	r1, r0
 8013bca:	6818      	ldr	r0, [r3, #0]
 8013bcc:	f7ff ffd0 	bl	8013b70 <_raise_r>
 8013bd0:	bd10      	pop	{r4, pc}
 8013bd2:	46c0      	nop			@ (mov r8, r8)
 8013bd4:	200001a4 	.word	0x200001a4

08013bd8 <_kill_r>:
 8013bd8:	2300      	movs	r3, #0
 8013bda:	b570      	push	{r4, r5, r6, lr}
 8013bdc:	4d06      	ldr	r5, [pc, #24]	@ (8013bf8 <_kill_r+0x20>)
 8013bde:	0004      	movs	r4, r0
 8013be0:	0008      	movs	r0, r1
 8013be2:	0011      	movs	r1, r2
 8013be4:	602b      	str	r3, [r5, #0]
 8013be6:	f7f7 fd2f 	bl	800b648 <_kill>
 8013bea:	1c43      	adds	r3, r0, #1
 8013bec:	d103      	bne.n	8013bf6 <_kill_r+0x1e>
 8013bee:	682b      	ldr	r3, [r5, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d000      	beq.n	8013bf6 <_kill_r+0x1e>
 8013bf4:	6023      	str	r3, [r4, #0]
 8013bf6:	bd70      	pop	{r4, r5, r6, pc}
 8013bf8:	2000060c 	.word	0x2000060c

08013bfc <_getpid_r>:
 8013bfc:	b510      	push	{r4, lr}
 8013bfe:	f7f7 fd1d 	bl	800b63c <_getpid>
 8013c02:	bd10      	pop	{r4, pc}

08013c04 <_malloc_usable_size_r>:
 8013c04:	1f0b      	subs	r3, r1, #4
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	1f18      	subs	r0, r3, #4
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	da01      	bge.n	8013c12 <_malloc_usable_size_r+0xe>
 8013c0e:	580b      	ldr	r3, [r1, r0]
 8013c10:	18c0      	adds	r0, r0, r3
 8013c12:	4770      	bx	lr

08013c14 <__swhatbuf_r>:
 8013c14:	b570      	push	{r4, r5, r6, lr}
 8013c16:	000e      	movs	r6, r1
 8013c18:	001d      	movs	r5, r3
 8013c1a:	230e      	movs	r3, #14
 8013c1c:	5ec9      	ldrsh	r1, [r1, r3]
 8013c1e:	0014      	movs	r4, r2
 8013c20:	b096      	sub	sp, #88	@ 0x58
 8013c22:	2900      	cmp	r1, #0
 8013c24:	da0c      	bge.n	8013c40 <__swhatbuf_r+0x2c>
 8013c26:	89b2      	ldrh	r2, [r6, #12]
 8013c28:	2380      	movs	r3, #128	@ 0x80
 8013c2a:	0011      	movs	r1, r2
 8013c2c:	4019      	ands	r1, r3
 8013c2e:	421a      	tst	r2, r3
 8013c30:	d114      	bne.n	8013c5c <__swhatbuf_r+0x48>
 8013c32:	2380      	movs	r3, #128	@ 0x80
 8013c34:	00db      	lsls	r3, r3, #3
 8013c36:	2000      	movs	r0, #0
 8013c38:	6029      	str	r1, [r5, #0]
 8013c3a:	6023      	str	r3, [r4, #0]
 8013c3c:	b016      	add	sp, #88	@ 0x58
 8013c3e:	bd70      	pop	{r4, r5, r6, pc}
 8013c40:	466a      	mov	r2, sp
 8013c42:	f000 f853 	bl	8013cec <_fstat_r>
 8013c46:	2800      	cmp	r0, #0
 8013c48:	dbed      	blt.n	8013c26 <__swhatbuf_r+0x12>
 8013c4a:	23f0      	movs	r3, #240	@ 0xf0
 8013c4c:	9901      	ldr	r1, [sp, #4]
 8013c4e:	021b      	lsls	r3, r3, #8
 8013c50:	4019      	ands	r1, r3
 8013c52:	4b04      	ldr	r3, [pc, #16]	@ (8013c64 <__swhatbuf_r+0x50>)
 8013c54:	18c9      	adds	r1, r1, r3
 8013c56:	424b      	negs	r3, r1
 8013c58:	4159      	adcs	r1, r3
 8013c5a:	e7ea      	b.n	8013c32 <__swhatbuf_r+0x1e>
 8013c5c:	2100      	movs	r1, #0
 8013c5e:	2340      	movs	r3, #64	@ 0x40
 8013c60:	e7e9      	b.n	8013c36 <__swhatbuf_r+0x22>
 8013c62:	46c0      	nop			@ (mov r8, r8)
 8013c64:	ffffe000 	.word	0xffffe000

08013c68 <__smakebuf_r>:
 8013c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c6a:	2602      	movs	r6, #2
 8013c6c:	898b      	ldrh	r3, [r1, #12]
 8013c6e:	0005      	movs	r5, r0
 8013c70:	000c      	movs	r4, r1
 8013c72:	b085      	sub	sp, #20
 8013c74:	4233      	tst	r3, r6
 8013c76:	d007      	beq.n	8013c88 <__smakebuf_r+0x20>
 8013c78:	0023      	movs	r3, r4
 8013c7a:	3347      	adds	r3, #71	@ 0x47
 8013c7c:	6023      	str	r3, [r4, #0]
 8013c7e:	6123      	str	r3, [r4, #16]
 8013c80:	2301      	movs	r3, #1
 8013c82:	6163      	str	r3, [r4, #20]
 8013c84:	b005      	add	sp, #20
 8013c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c88:	ab03      	add	r3, sp, #12
 8013c8a:	aa02      	add	r2, sp, #8
 8013c8c:	f7ff ffc2 	bl	8013c14 <__swhatbuf_r>
 8013c90:	9f02      	ldr	r7, [sp, #8]
 8013c92:	9001      	str	r0, [sp, #4]
 8013c94:	0039      	movs	r1, r7
 8013c96:	0028      	movs	r0, r5
 8013c98:	f7fe fd6c 	bl	8012774 <_malloc_r>
 8013c9c:	2800      	cmp	r0, #0
 8013c9e:	d108      	bne.n	8013cb2 <__smakebuf_r+0x4a>
 8013ca0:	220c      	movs	r2, #12
 8013ca2:	5ea3      	ldrsh	r3, [r4, r2]
 8013ca4:	059a      	lsls	r2, r3, #22
 8013ca6:	d4ed      	bmi.n	8013c84 <__smakebuf_r+0x1c>
 8013ca8:	2203      	movs	r2, #3
 8013caa:	4393      	bics	r3, r2
 8013cac:	431e      	orrs	r6, r3
 8013cae:	81a6      	strh	r6, [r4, #12]
 8013cb0:	e7e2      	b.n	8013c78 <__smakebuf_r+0x10>
 8013cb2:	2380      	movs	r3, #128	@ 0x80
 8013cb4:	89a2      	ldrh	r2, [r4, #12]
 8013cb6:	6020      	str	r0, [r4, #0]
 8013cb8:	4313      	orrs	r3, r2
 8013cba:	81a3      	strh	r3, [r4, #12]
 8013cbc:	9b03      	ldr	r3, [sp, #12]
 8013cbe:	6120      	str	r0, [r4, #16]
 8013cc0:	6167      	str	r7, [r4, #20]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d00c      	beq.n	8013ce0 <__smakebuf_r+0x78>
 8013cc6:	0028      	movs	r0, r5
 8013cc8:	230e      	movs	r3, #14
 8013cca:	5ee1      	ldrsh	r1, [r4, r3]
 8013ccc:	f000 f820 	bl	8013d10 <_isatty_r>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d005      	beq.n	8013ce0 <__smakebuf_r+0x78>
 8013cd4:	2303      	movs	r3, #3
 8013cd6:	89a2      	ldrh	r2, [r4, #12]
 8013cd8:	439a      	bics	r2, r3
 8013cda:	3b02      	subs	r3, #2
 8013cdc:	4313      	orrs	r3, r2
 8013cde:	81a3      	strh	r3, [r4, #12]
 8013ce0:	89a3      	ldrh	r3, [r4, #12]
 8013ce2:	9a01      	ldr	r2, [sp, #4]
 8013ce4:	4313      	orrs	r3, r2
 8013ce6:	81a3      	strh	r3, [r4, #12]
 8013ce8:	e7cc      	b.n	8013c84 <__smakebuf_r+0x1c>
	...

08013cec <_fstat_r>:
 8013cec:	2300      	movs	r3, #0
 8013cee:	b570      	push	{r4, r5, r6, lr}
 8013cf0:	4d06      	ldr	r5, [pc, #24]	@ (8013d0c <_fstat_r+0x20>)
 8013cf2:	0004      	movs	r4, r0
 8013cf4:	0008      	movs	r0, r1
 8013cf6:	0011      	movs	r1, r2
 8013cf8:	602b      	str	r3, [r5, #0]
 8013cfa:	f7f7 fd05 	bl	800b708 <_fstat>
 8013cfe:	1c43      	adds	r3, r0, #1
 8013d00:	d103      	bne.n	8013d0a <_fstat_r+0x1e>
 8013d02:	682b      	ldr	r3, [r5, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d000      	beq.n	8013d0a <_fstat_r+0x1e>
 8013d08:	6023      	str	r3, [r4, #0]
 8013d0a:	bd70      	pop	{r4, r5, r6, pc}
 8013d0c:	2000060c 	.word	0x2000060c

08013d10 <_isatty_r>:
 8013d10:	2300      	movs	r3, #0
 8013d12:	b570      	push	{r4, r5, r6, lr}
 8013d14:	4d06      	ldr	r5, [pc, #24]	@ (8013d30 <_isatty_r+0x20>)
 8013d16:	0004      	movs	r4, r0
 8013d18:	0008      	movs	r0, r1
 8013d1a:	602b      	str	r3, [r5, #0]
 8013d1c:	f7f7 fd02 	bl	800b724 <_isatty>
 8013d20:	1c43      	adds	r3, r0, #1
 8013d22:	d103      	bne.n	8013d2c <_isatty_r+0x1c>
 8013d24:	682b      	ldr	r3, [r5, #0]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d000      	beq.n	8013d2c <_isatty_r+0x1c>
 8013d2a:	6023      	str	r3, [r4, #0]
 8013d2c:	bd70      	pop	{r4, r5, r6, pc}
 8013d2e:	46c0      	nop			@ (mov r8, r8)
 8013d30:	2000060c 	.word	0x2000060c

08013d34 <_init>:
 8013d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d36:	46c0      	nop			@ (mov r8, r8)
 8013d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d3a:	bc08      	pop	{r3}
 8013d3c:	469e      	mov	lr, r3
 8013d3e:	4770      	bx	lr

08013d40 <_fini>:
 8013d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d42:	46c0      	nop			@ (mov r8, r8)
 8013d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d46:	bc08      	pop	{r3}
 8013d48:	469e      	mov	lr, r3
 8013d4a:	4770      	bx	lr
