
final_embedded_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014724  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003884  080147e0  080147e0  000157e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018064  08018064  0001a1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018064  08018064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801806c  0801806c  0001a1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801806c  0801806c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018070  08018070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08018074  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200001f0  08018264  0001a1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08018264  0001a618  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001a1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001584e  00000000  00000000  0001a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002edb  00000000  00000000  0002fa66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d82  00000000  00000000  00033a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa06  00000000  00000000  00034802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176c0  00000000  00000000  0004f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0762  00000000  00000000  000668c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010702a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b4  00000000  00000000  00107070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010c624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001f0 	.word	0x200001f0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080147c8 	.word	0x080147c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001f4 	.word	0x200001f4
 8000100:	080147c8 	.word	0x080147c8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f9bb 	bl	80027c8 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f002 f8ff 	bl	8002660 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f9ad 	bl	80027c8 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f9a3 	bl	80027c8 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f002 f929 	bl	80026e8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f002 f91f 	bl	80026e8 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fd1d 	bl	8000f00 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fca5 	bl	8000e20 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fd0f 	bl	8000f00 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fd05 	bl	8000f00 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fcb3 	bl	8000e70 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fca9 	bl	8000e70 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f88c 	bl	8000678 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	@ 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffd0 	bl	8000518 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f001 f8db 	bl	8001738 <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	@ 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fe5b 	bl	8001244 <__aeabi_fsub>
 800058e:	f001 f8d3 	bl	8001738 <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	@ 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff7d 	bl	80004a4 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f003 f889 	bl	80036c8 <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f002 fc56 	bl	8002e70 <__aeabi_dsub>
 80005c4:	f003 f880 	bl	80036c8 <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	@ 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__aeabi_d2lz>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	2200      	movs	r2, #0
 80005dc:	2300      	movs	r3, #0
 80005de:	0004      	movs	r4, r0
 80005e0:	000d      	movs	r5, r1
 80005e2:	f7ff ff41 	bl	8000468 <__aeabi_dcmplt>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	d108      	bne.n	80005fc <__aeabi_d2lz+0x24>
 80005ea:	0020      	movs	r0, r4
 80005ec:	0029      	movs	r1, r5
 80005ee:	f000 f80f 	bl	8000610 <__aeabi_d2ulz>
 80005f2:	0002      	movs	r2, r0
 80005f4:	000b      	movs	r3, r1
 80005f6:	0010      	movs	r0, r2
 80005f8:	0019      	movs	r1, r3
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	2380      	movs	r3, #128	@ 0x80
 80005fe:	061b      	lsls	r3, r3, #24
 8000600:	18e9      	adds	r1, r5, r3
 8000602:	0020      	movs	r0, r4
 8000604:	f000 f804 	bl	8000610 <__aeabi_d2ulz>
 8000608:	2300      	movs	r3, #0
 800060a:	4242      	negs	r2, r0
 800060c:	418b      	sbcs	r3, r1
 800060e:	e7f2      	b.n	80005f6 <__aeabi_d2lz+0x1e>

08000610 <__aeabi_d2ulz>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	2200      	movs	r2, #0
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <__aeabi_d2ulz+0x34>)
 8000616:	000d      	movs	r5, r1
 8000618:	0004      	movs	r4, r0
 800061a:	f002 f943 	bl	80028a4 <__aeabi_dmul>
 800061e:	f7ff ffbd 	bl	800059c <__aeabi_d2uiz>
 8000622:	0006      	movs	r6, r0
 8000624:	f003 f8ba 	bl	800379c <__aeabi_ui2d>
 8000628:	2200      	movs	r2, #0
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <__aeabi_d2ulz+0x38>)
 800062c:	f002 f93a 	bl	80028a4 <__aeabi_dmul>
 8000630:	0002      	movs	r2, r0
 8000632:	000b      	movs	r3, r1
 8000634:	0020      	movs	r0, r4
 8000636:	0029      	movs	r1, r5
 8000638:	f002 fc1a 	bl	8002e70 <__aeabi_dsub>
 800063c:	f7ff ffae 	bl	800059c <__aeabi_d2uiz>
 8000640:	0031      	movs	r1, r6
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	3df00000 	.word	0x3df00000
 8000648:	41f00000 	.word	0x41f00000

0800064c <__aeabi_l2d>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	0006      	movs	r6, r0
 8000650:	0008      	movs	r0, r1
 8000652:	f003 f875 	bl	8003740 <__aeabi_i2d>
 8000656:	2200      	movs	r2, #0
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <__aeabi_l2d+0x28>)
 800065a:	f002 f923 	bl	80028a4 <__aeabi_dmul>
 800065e:	000d      	movs	r5, r1
 8000660:	0004      	movs	r4, r0
 8000662:	0030      	movs	r0, r6
 8000664:	f003 f89a 	bl	800379c <__aeabi_ui2d>
 8000668:	002b      	movs	r3, r5
 800066a:	0022      	movs	r2, r4
 800066c:	f001 f91a 	bl	80018a4 <__aeabi_dadd>
 8000670:	bd70      	pop	{r4, r5, r6, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	41f00000 	.word	0x41f00000

08000678 <__udivmoddi4>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	4657      	mov	r7, sl
 800067c:	464e      	mov	r6, r9
 800067e:	4645      	mov	r5, r8
 8000680:	46de      	mov	lr, fp
 8000682:	b5e0      	push	{r5, r6, r7, lr}
 8000684:	0004      	movs	r4, r0
 8000686:	000d      	movs	r5, r1
 8000688:	4692      	mov	sl, r2
 800068a:	4699      	mov	r9, r3
 800068c:	b083      	sub	sp, #12
 800068e:	428b      	cmp	r3, r1
 8000690:	d830      	bhi.n	80006f4 <__udivmoddi4+0x7c>
 8000692:	d02d      	beq.n	80006f0 <__udivmoddi4+0x78>
 8000694:	4649      	mov	r1, r9
 8000696:	4650      	mov	r0, sl
 8000698:	f003 f98c 	bl	80039b4 <__clzdi2>
 800069c:	0029      	movs	r1, r5
 800069e:	0006      	movs	r6, r0
 80006a0:	0020      	movs	r0, r4
 80006a2:	f003 f987 	bl	80039b4 <__clzdi2>
 80006a6:	1a33      	subs	r3, r6, r0
 80006a8:	4698      	mov	r8, r3
 80006aa:	3b20      	subs	r3, #32
 80006ac:	d434      	bmi.n	8000718 <__udivmoddi4+0xa0>
 80006ae:	469b      	mov	fp, r3
 80006b0:	4653      	mov	r3, sl
 80006b2:	465a      	mov	r2, fp
 80006b4:	4093      	lsls	r3, r2
 80006b6:	4642      	mov	r2, r8
 80006b8:	001f      	movs	r7, r3
 80006ba:	4653      	mov	r3, sl
 80006bc:	4093      	lsls	r3, r2
 80006be:	001e      	movs	r6, r3
 80006c0:	42af      	cmp	r7, r5
 80006c2:	d83b      	bhi.n	800073c <__udivmoddi4+0xc4>
 80006c4:	42af      	cmp	r7, r5
 80006c6:	d100      	bne.n	80006ca <__udivmoddi4+0x52>
 80006c8:	e079      	b.n	80007be <__udivmoddi4+0x146>
 80006ca:	465b      	mov	r3, fp
 80006cc:	1ba4      	subs	r4, r4, r6
 80006ce:	41bd      	sbcs	r5, r7
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	da00      	bge.n	80006d6 <__udivmoddi4+0x5e>
 80006d4:	e076      	b.n	80007c4 <__udivmoddi4+0x14c>
 80006d6:	2200      	movs	r2, #0
 80006d8:	2300      	movs	r3, #0
 80006da:	9200      	str	r2, [sp, #0]
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	465a      	mov	r2, fp
 80006e2:	4093      	lsls	r3, r2
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2301      	movs	r3, #1
 80006e8:	4642      	mov	r2, r8
 80006ea:	4093      	lsls	r3, r2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	e029      	b.n	8000744 <__udivmoddi4+0xcc>
 80006f0:	4282      	cmp	r2, r0
 80006f2:	d9cf      	bls.n	8000694 <__udivmoddi4+0x1c>
 80006f4:	2200      	movs	r2, #0
 80006f6:	2300      	movs	r3, #0
 80006f8:	9200      	str	r2, [sp, #0]
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <__udivmoddi4+0x8e>
 8000702:	601c      	str	r4, [r3, #0]
 8000704:	605d      	str	r5, [r3, #4]
 8000706:	9800      	ldr	r0, [sp, #0]
 8000708:	9901      	ldr	r1, [sp, #4]
 800070a:	b003      	add	sp, #12
 800070c:	bcf0      	pop	{r4, r5, r6, r7}
 800070e:	46bb      	mov	fp, r7
 8000710:	46b2      	mov	sl, r6
 8000712:	46a9      	mov	r9, r5
 8000714:	46a0      	mov	r8, r4
 8000716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000718:	4642      	mov	r2, r8
 800071a:	469b      	mov	fp, r3
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	4652      	mov	r2, sl
 8000722:	40da      	lsrs	r2, r3
 8000724:	4641      	mov	r1, r8
 8000726:	0013      	movs	r3, r2
 8000728:	464a      	mov	r2, r9
 800072a:	408a      	lsls	r2, r1
 800072c:	0017      	movs	r7, r2
 800072e:	4642      	mov	r2, r8
 8000730:	431f      	orrs	r7, r3
 8000732:	4653      	mov	r3, sl
 8000734:	4093      	lsls	r3, r2
 8000736:	001e      	movs	r6, r3
 8000738:	42af      	cmp	r7, r5
 800073a:	d9c3      	bls.n	80006c4 <__udivmoddi4+0x4c>
 800073c:	2200      	movs	r2, #0
 800073e:	2300      	movs	r3, #0
 8000740:	9200      	str	r2, [sp, #0]
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	4643      	mov	r3, r8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0d8      	beq.n	80006fc <__udivmoddi4+0x84>
 800074a:	07fb      	lsls	r3, r7, #31
 800074c:	0872      	lsrs	r2, r6, #1
 800074e:	431a      	orrs	r2, r3
 8000750:	4646      	mov	r6, r8
 8000752:	087b      	lsrs	r3, r7, #1
 8000754:	e00e      	b.n	8000774 <__udivmoddi4+0xfc>
 8000756:	42ab      	cmp	r3, r5
 8000758:	d101      	bne.n	800075e <__udivmoddi4+0xe6>
 800075a:	42a2      	cmp	r2, r4
 800075c:	d80c      	bhi.n	8000778 <__udivmoddi4+0x100>
 800075e:	1aa4      	subs	r4, r4, r2
 8000760:	419d      	sbcs	r5, r3
 8000762:	2001      	movs	r0, #1
 8000764:	1924      	adds	r4, r4, r4
 8000766:	416d      	adcs	r5, r5
 8000768:	2100      	movs	r1, #0
 800076a:	3e01      	subs	r6, #1
 800076c:	1824      	adds	r4, r4, r0
 800076e:	414d      	adcs	r5, r1
 8000770:	2e00      	cmp	r6, #0
 8000772:	d006      	beq.n	8000782 <__udivmoddi4+0x10a>
 8000774:	42ab      	cmp	r3, r5
 8000776:	d9ee      	bls.n	8000756 <__udivmoddi4+0xde>
 8000778:	3e01      	subs	r6, #1
 800077a:	1924      	adds	r4, r4, r4
 800077c:	416d      	adcs	r5, r5
 800077e:	2e00      	cmp	r6, #0
 8000780:	d1f8      	bne.n	8000774 <__udivmoddi4+0xfc>
 8000782:	9800      	ldr	r0, [sp, #0]
 8000784:	9901      	ldr	r1, [sp, #4]
 8000786:	465b      	mov	r3, fp
 8000788:	1900      	adds	r0, r0, r4
 800078a:	4169      	adcs	r1, r5
 800078c:	2b00      	cmp	r3, #0
 800078e:	db24      	blt.n	80007da <__udivmoddi4+0x162>
 8000790:	002b      	movs	r3, r5
 8000792:	465a      	mov	r2, fp
 8000794:	4644      	mov	r4, r8
 8000796:	40d3      	lsrs	r3, r2
 8000798:	002a      	movs	r2, r5
 800079a:	40e2      	lsrs	r2, r4
 800079c:	001c      	movs	r4, r3
 800079e:	465b      	mov	r3, fp
 80007a0:	0015      	movs	r5, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	db2a      	blt.n	80007fc <__udivmoddi4+0x184>
 80007a6:	0026      	movs	r6, r4
 80007a8:	409e      	lsls	r6, r3
 80007aa:	0033      	movs	r3, r6
 80007ac:	0026      	movs	r6, r4
 80007ae:	4647      	mov	r7, r8
 80007b0:	40be      	lsls	r6, r7
 80007b2:	0032      	movs	r2, r6
 80007b4:	1a80      	subs	r0, r0, r2
 80007b6:	4199      	sbcs	r1, r3
 80007b8:	9000      	str	r0, [sp, #0]
 80007ba:	9101      	str	r1, [sp, #4]
 80007bc:	e79e      	b.n	80006fc <__udivmoddi4+0x84>
 80007be:	42a3      	cmp	r3, r4
 80007c0:	d8bc      	bhi.n	800073c <__udivmoddi4+0xc4>
 80007c2:	e782      	b.n	80006ca <__udivmoddi4+0x52>
 80007c4:	4642      	mov	r2, r8
 80007c6:	2320      	movs	r3, #32
 80007c8:	2100      	movs	r1, #0
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	9100      	str	r1, [sp, #0]
 80007d0:	9201      	str	r2, [sp, #4]
 80007d2:	2201      	movs	r2, #1
 80007d4:	40da      	lsrs	r2, r3
 80007d6:	9201      	str	r2, [sp, #4]
 80007d8:	e785      	b.n	80006e6 <__udivmoddi4+0x6e>
 80007da:	4642      	mov	r2, r8
 80007dc:	2320      	movs	r3, #32
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	002a      	movs	r2, r5
 80007e2:	4646      	mov	r6, r8
 80007e4:	409a      	lsls	r2, r3
 80007e6:	0023      	movs	r3, r4
 80007e8:	40f3      	lsrs	r3, r6
 80007ea:	4644      	mov	r4, r8
 80007ec:	4313      	orrs	r3, r2
 80007ee:	002a      	movs	r2, r5
 80007f0:	40e2      	lsrs	r2, r4
 80007f2:	001c      	movs	r4, r3
 80007f4:	465b      	mov	r3, fp
 80007f6:	0015      	movs	r5, r2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dad4      	bge.n	80007a6 <__udivmoddi4+0x12e>
 80007fc:	4642      	mov	r2, r8
 80007fe:	002f      	movs	r7, r5
 8000800:	2320      	movs	r3, #32
 8000802:	0026      	movs	r6, r4
 8000804:	4097      	lsls	r7, r2
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	40de      	lsrs	r6, r3
 800080a:	003b      	movs	r3, r7
 800080c:	4333      	orrs	r3, r6
 800080e:	e7cd      	b.n	80007ac <__udivmoddi4+0x134>

08000810 <__aeabi_fadd>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	024b      	lsls	r3, r1, #9
 8000814:	0a5a      	lsrs	r2, r3, #9
 8000816:	4694      	mov	ip, r2
 8000818:	004a      	lsls	r2, r1, #1
 800081a:	0fc9      	lsrs	r1, r1, #31
 800081c:	46ce      	mov	lr, r9
 800081e:	4647      	mov	r7, r8
 8000820:	4689      	mov	r9, r1
 8000822:	0045      	lsls	r5, r0, #1
 8000824:	0246      	lsls	r6, r0, #9
 8000826:	0e2d      	lsrs	r5, r5, #24
 8000828:	0e12      	lsrs	r2, r2, #24
 800082a:	b580      	push	{r7, lr}
 800082c:	0999      	lsrs	r1, r3, #6
 800082e:	0a77      	lsrs	r7, r6, #9
 8000830:	0fc4      	lsrs	r4, r0, #31
 8000832:	09b6      	lsrs	r6, r6, #6
 8000834:	1aab      	subs	r3, r5, r2
 8000836:	454c      	cmp	r4, r9
 8000838:	d020      	beq.n	800087c <__aeabi_fadd+0x6c>
 800083a:	2b00      	cmp	r3, #0
 800083c:	dd0c      	ble.n	8000858 <__aeabi_fadd+0x48>
 800083e:	2a00      	cmp	r2, #0
 8000840:	d134      	bne.n	80008ac <__aeabi_fadd+0x9c>
 8000842:	2900      	cmp	r1, #0
 8000844:	d02a      	beq.n	800089c <__aeabi_fadd+0x8c>
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	2b01      	cmp	r3, #1
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x3e>
 800084c:	e08f      	b.n	800096e <__aeabi_fadd+0x15e>
 800084e:	2bff      	cmp	r3, #255	@ 0xff
 8000850:	d100      	bne.n	8000854 <__aeabi_fadd+0x44>
 8000852:	e0cd      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 8000854:	0013      	movs	r3, r2
 8000856:	e02f      	b.n	80008b8 <__aeabi_fadd+0xa8>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d060      	beq.n	800091e <__aeabi_fadd+0x10e>
 800085c:	1b53      	subs	r3, r2, r5
 800085e:	2d00      	cmp	r5, #0
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x54>
 8000862:	e0ee      	b.n	8000a42 <__aeabi_fadd+0x232>
 8000864:	2e00      	cmp	r6, #0
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0x5a>
 8000868:	e13e      	b.n	8000ae8 <__aeabi_fadd+0x2d8>
 800086a:	1e5c      	subs	r4, r3, #1
 800086c:	2b01      	cmp	r3, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x62>
 8000870:	e16b      	b.n	8000b4a <__aeabi_fadd+0x33a>
 8000872:	2bff      	cmp	r3, #255	@ 0xff
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x68>
 8000876:	e0b9      	b.n	80009ec <__aeabi_fadd+0x1dc>
 8000878:	0023      	movs	r3, r4
 800087a:	e0e7      	b.n	8000a4c <__aeabi_fadd+0x23c>
 800087c:	2b00      	cmp	r3, #0
 800087e:	dc00      	bgt.n	8000882 <__aeabi_fadd+0x72>
 8000880:	e0a4      	b.n	80009cc <__aeabi_fadd+0x1bc>
 8000882:	2a00      	cmp	r2, #0
 8000884:	d069      	beq.n	800095a <__aeabi_fadd+0x14a>
 8000886:	2dff      	cmp	r5, #255	@ 0xff
 8000888:	d100      	bne.n	800088c <__aeabi_fadd+0x7c>
 800088a:	e0b1      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	04d2      	lsls	r2, r2, #19
 8000890:	4311      	orrs	r1, r2
 8000892:	2b1b      	cmp	r3, #27
 8000894:	dc00      	bgt.n	8000898 <__aeabi_fadd+0x88>
 8000896:	e0e9      	b.n	8000a6c <__aeabi_fadd+0x25c>
 8000898:	002b      	movs	r3, r5
 800089a:	3605      	adds	r6, #5
 800089c:	08f7      	lsrs	r7, r6, #3
 800089e:	2bff      	cmp	r3, #255	@ 0xff
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x94>
 80008a2:	e0a5      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 80008a4:	027a      	lsls	r2, r7, #9
 80008a6:	0a52      	lsrs	r2, r2, #9
 80008a8:	b2d8      	uxtb	r0, r3
 80008aa:	e030      	b.n	800090e <__aeabi_fadd+0xfe>
 80008ac:	2dff      	cmp	r5, #255	@ 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0xa2>
 80008b0:	e09e      	b.n	80009f0 <__aeabi_fadd+0x1e0>
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	04d2      	lsls	r2, r2, #19
 80008b6:	4311      	orrs	r1, r2
 80008b8:	2001      	movs	r0, #1
 80008ba:	2b1b      	cmp	r3, #27
 80008bc:	dc08      	bgt.n	80008d0 <__aeabi_fadd+0xc0>
 80008be:	0008      	movs	r0, r1
 80008c0:	2220      	movs	r2, #32
 80008c2:	40d8      	lsrs	r0, r3
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	4099      	lsls	r1, r3
 80008c8:	000b      	movs	r3, r1
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	4193      	sbcs	r3, r2
 80008ce:	4318      	orrs	r0, r3
 80008d0:	1a36      	subs	r6, r6, r0
 80008d2:	0173      	lsls	r3, r6, #5
 80008d4:	d400      	bmi.n	80008d8 <__aeabi_fadd+0xc8>
 80008d6:	e071      	b.n	80009bc <__aeabi_fadd+0x1ac>
 80008d8:	01b6      	lsls	r6, r6, #6
 80008da:	09b7      	lsrs	r7, r6, #6
 80008dc:	0038      	movs	r0, r7
 80008de:	f003 f84b 	bl	8003978 <__clzsi2>
 80008e2:	003b      	movs	r3, r7
 80008e4:	3805      	subs	r0, #5
 80008e6:	4083      	lsls	r3, r0
 80008e8:	4285      	cmp	r5, r0
 80008ea:	dd4d      	ble.n	8000988 <__aeabi_fadd+0x178>
 80008ec:	4eb4      	ldr	r6, [pc, #720]	@ (8000bc0 <__aeabi_fadd+0x3b0>)
 80008ee:	1a2d      	subs	r5, r5, r0
 80008f0:	401e      	ands	r6, r3
 80008f2:	075a      	lsls	r2, r3, #29
 80008f4:	d068      	beq.n	80009c8 <__aeabi_fadd+0x1b8>
 80008f6:	220f      	movs	r2, #15
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d064      	beq.n	80009c8 <__aeabi_fadd+0x1b8>
 80008fe:	3604      	adds	r6, #4
 8000900:	0173      	lsls	r3, r6, #5
 8000902:	d561      	bpl.n	80009c8 <__aeabi_fadd+0x1b8>
 8000904:	1c68      	adds	r0, r5, #1
 8000906:	2dfe      	cmp	r5, #254	@ 0xfe
 8000908:	d154      	bne.n	80009b4 <__aeabi_fadd+0x1a4>
 800090a:	20ff      	movs	r0, #255	@ 0xff
 800090c:	2200      	movs	r2, #0
 800090e:	05c0      	lsls	r0, r0, #23
 8000910:	4310      	orrs	r0, r2
 8000912:	07e4      	lsls	r4, r4, #31
 8000914:	4320      	orrs	r0, r4
 8000916:	bcc0      	pop	{r6, r7}
 8000918:	46b9      	mov	r9, r7
 800091a:	46b0      	mov	r8, r6
 800091c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800091e:	22fe      	movs	r2, #254	@ 0xfe
 8000920:	4690      	mov	r8, r2
 8000922:	1c68      	adds	r0, r5, #1
 8000924:	0002      	movs	r2, r0
 8000926:	4640      	mov	r0, r8
 8000928:	4210      	tst	r0, r2
 800092a:	d16b      	bne.n	8000a04 <__aeabi_fadd+0x1f4>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_fadd+0x122>
 8000930:	e0dd      	b.n	8000aee <__aeabi_fadd+0x2de>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x128>
 8000936:	e102      	b.n	8000b3e <__aeabi_fadd+0x32e>
 8000938:	2900      	cmp	r1, #0
 800093a:	d0b3      	beq.n	80008a4 <__aeabi_fadd+0x94>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	1a77      	subs	r7, r6, r1
 8000940:	04d2      	lsls	r2, r2, #19
 8000942:	4217      	tst	r7, r2
 8000944:	d100      	bne.n	8000948 <__aeabi_fadd+0x138>
 8000946:	e136      	b.n	8000bb6 <__aeabi_fadd+0x3a6>
 8000948:	464c      	mov	r4, r9
 800094a:	1b8e      	subs	r6, r1, r6
 800094c:	d061      	beq.n	8000a12 <__aeabi_fadd+0x202>
 800094e:	2001      	movs	r0, #1
 8000950:	4216      	tst	r6, r2
 8000952:	d130      	bne.n	80009b6 <__aeabi_fadd+0x1a6>
 8000954:	2300      	movs	r3, #0
 8000956:	08f7      	lsrs	r7, r6, #3
 8000958:	e7a4      	b.n	80008a4 <__aeabi_fadd+0x94>
 800095a:	2900      	cmp	r1, #0
 800095c:	d09e      	beq.n	800089c <__aeabi_fadd+0x8c>
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	2b01      	cmp	r3, #1
 8000962:	d100      	bne.n	8000966 <__aeabi_fadd+0x156>
 8000964:	e0ca      	b.n	8000afc <__aeabi_fadd+0x2ec>
 8000966:	2bff      	cmp	r3, #255	@ 0xff
 8000968:	d042      	beq.n	80009f0 <__aeabi_fadd+0x1e0>
 800096a:	0013      	movs	r3, r2
 800096c:	e791      	b.n	8000892 <__aeabi_fadd+0x82>
 800096e:	1a71      	subs	r1, r6, r1
 8000970:	014b      	lsls	r3, r1, #5
 8000972:	d400      	bmi.n	8000976 <__aeabi_fadd+0x166>
 8000974:	e0d1      	b.n	8000b1a <__aeabi_fadd+0x30a>
 8000976:	018f      	lsls	r7, r1, #6
 8000978:	09bf      	lsrs	r7, r7, #6
 800097a:	0038      	movs	r0, r7
 800097c:	f002 fffc 	bl	8003978 <__clzsi2>
 8000980:	003b      	movs	r3, r7
 8000982:	3805      	subs	r0, #5
 8000984:	4083      	lsls	r3, r0
 8000986:	2501      	movs	r5, #1
 8000988:	2220      	movs	r2, #32
 800098a:	1b40      	subs	r0, r0, r5
 800098c:	3001      	adds	r0, #1
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	001e      	movs	r6, r3
 8000992:	4093      	lsls	r3, r2
 8000994:	40c6      	lsrs	r6, r0
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	4193      	sbcs	r3, r2
 800099a:	431e      	orrs	r6, r3
 800099c:	d039      	beq.n	8000a12 <__aeabi_fadd+0x202>
 800099e:	0773      	lsls	r3, r6, #29
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fadd+0x194>
 80009a2:	e11b      	b.n	8000bdc <__aeabi_fadd+0x3cc>
 80009a4:	230f      	movs	r3, #15
 80009a6:	2500      	movs	r5, #0
 80009a8:	4033      	ands	r3, r6
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d1a7      	bne.n	80008fe <__aeabi_fadd+0xee>
 80009ae:	2001      	movs	r0, #1
 80009b0:	0172      	lsls	r2, r6, #5
 80009b2:	d57c      	bpl.n	8000aae <__aeabi_fadd+0x29e>
 80009b4:	b2c0      	uxtb	r0, r0
 80009b6:	01b2      	lsls	r2, r6, #6
 80009b8:	0a52      	lsrs	r2, r2, #9
 80009ba:	e7a8      	b.n	800090e <__aeabi_fadd+0xfe>
 80009bc:	0773      	lsls	r3, r6, #29
 80009be:	d003      	beq.n	80009c8 <__aeabi_fadd+0x1b8>
 80009c0:	230f      	movs	r3, #15
 80009c2:	4033      	ands	r3, r6
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d19a      	bne.n	80008fe <__aeabi_fadd+0xee>
 80009c8:	002b      	movs	r3, r5
 80009ca:	e767      	b.n	800089c <__aeabi_fadd+0x8c>
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d023      	beq.n	8000a18 <__aeabi_fadd+0x208>
 80009d0:	1b53      	subs	r3, r2, r5
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d17b      	bne.n	8000ace <__aeabi_fadd+0x2be>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_fadd+0x1cc>
 80009da:	e086      	b.n	8000aea <__aeabi_fadd+0x2da>
 80009dc:	1e5d      	subs	r5, r3, #1
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x1d4>
 80009e2:	e08b      	b.n	8000afc <__aeabi_fadd+0x2ec>
 80009e4:	2bff      	cmp	r3, #255	@ 0xff
 80009e6:	d002      	beq.n	80009ee <__aeabi_fadd+0x1de>
 80009e8:	002b      	movs	r3, r5
 80009ea:	e075      	b.n	8000ad8 <__aeabi_fadd+0x2c8>
 80009ec:	464c      	mov	r4, r9
 80009ee:	4667      	mov	r7, ip
 80009f0:	2f00      	cmp	r7, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fadd+0x1e6>
 80009f4:	e789      	b.n	800090a <__aeabi_fadd+0xfa>
 80009f6:	2280      	movs	r2, #128	@ 0x80
 80009f8:	03d2      	lsls	r2, r2, #15
 80009fa:	433a      	orrs	r2, r7
 80009fc:	0252      	lsls	r2, r2, #9
 80009fe:	20ff      	movs	r0, #255	@ 0xff
 8000a00:	0a52      	lsrs	r2, r2, #9
 8000a02:	e784      	b.n	800090e <__aeabi_fadd+0xfe>
 8000a04:	1a77      	subs	r7, r6, r1
 8000a06:	017b      	lsls	r3, r7, #5
 8000a08:	d46b      	bmi.n	8000ae2 <__aeabi_fadd+0x2d2>
 8000a0a:	2f00      	cmp	r7, #0
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fadd+0x200>
 8000a0e:	e765      	b.n	80008dc <__aeabi_fadd+0xcc>
 8000a10:	2400      	movs	r4, #0
 8000a12:	2000      	movs	r0, #0
 8000a14:	2200      	movs	r2, #0
 8000a16:	e77a      	b.n	800090e <__aeabi_fadd+0xfe>
 8000a18:	22fe      	movs	r2, #254	@ 0xfe
 8000a1a:	1c6b      	adds	r3, r5, #1
 8000a1c:	421a      	tst	r2, r3
 8000a1e:	d149      	bne.n	8000ab4 <__aeabi_fadd+0x2a4>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d000      	beq.n	8000a26 <__aeabi_fadd+0x216>
 8000a24:	e09f      	b.n	8000b66 <__aeabi_fadd+0x356>
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fadd+0x21c>
 8000a2a:	e0ba      	b.n	8000ba2 <__aeabi_fadd+0x392>
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_fadd+0x222>
 8000a30:	e0cf      	b.n	8000bd2 <__aeabi_fadd+0x3c2>
 8000a32:	1872      	adds	r2, r6, r1
 8000a34:	0153      	lsls	r3, r2, #5
 8000a36:	d400      	bmi.n	8000a3a <__aeabi_fadd+0x22a>
 8000a38:	e0cd      	b.n	8000bd6 <__aeabi_fadd+0x3c6>
 8000a3a:	0192      	lsls	r2, r2, #6
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	0a52      	lsrs	r2, r2, #9
 8000a40:	e765      	b.n	800090e <__aeabi_fadd+0xfe>
 8000a42:	2aff      	cmp	r2, #255	@ 0xff
 8000a44:	d0d2      	beq.n	80009ec <__aeabi_fadd+0x1dc>
 8000a46:	2080      	movs	r0, #128	@ 0x80
 8000a48:	04c0      	lsls	r0, r0, #19
 8000a4a:	4306      	orrs	r6, r0
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	2b1b      	cmp	r3, #27
 8000a50:	dc08      	bgt.n	8000a64 <__aeabi_fadd+0x254>
 8000a52:	0030      	movs	r0, r6
 8000a54:	2420      	movs	r4, #32
 8000a56:	40d8      	lsrs	r0, r3
 8000a58:	1ae3      	subs	r3, r4, r3
 8000a5a:	409e      	lsls	r6, r3
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	1e5c      	subs	r4, r3, #1
 8000a60:	41a3      	sbcs	r3, r4
 8000a62:	4318      	orrs	r0, r3
 8000a64:	464c      	mov	r4, r9
 8000a66:	0015      	movs	r5, r2
 8000a68:	1a0e      	subs	r6, r1, r0
 8000a6a:	e732      	b.n	80008d2 <__aeabi_fadd+0xc2>
 8000a6c:	0008      	movs	r0, r1
 8000a6e:	2220      	movs	r2, #32
 8000a70:	40d8      	lsrs	r0, r3
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	4099      	lsls	r1, r3
 8000a76:	000b      	movs	r3, r1
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	4193      	sbcs	r3, r2
 8000a7c:	4303      	orrs	r3, r0
 8000a7e:	18f6      	adds	r6, r6, r3
 8000a80:	0173      	lsls	r3, r6, #5
 8000a82:	d59b      	bpl.n	80009bc <__aeabi_fadd+0x1ac>
 8000a84:	3501      	adds	r5, #1
 8000a86:	2dff      	cmp	r5, #255	@ 0xff
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x27c>
 8000a8a:	e73e      	b.n	800090a <__aeabi_fadd+0xfa>
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	494d      	ldr	r1, [pc, #308]	@ (8000bc4 <__aeabi_fadd+0x3b4>)
 8000a90:	0872      	lsrs	r2, r6, #1
 8000a92:	4033      	ands	r3, r6
 8000a94:	400a      	ands	r2, r1
 8000a96:	431a      	orrs	r2, r3
 8000a98:	0016      	movs	r6, r2
 8000a9a:	0753      	lsls	r3, r2, #29
 8000a9c:	d004      	beq.n	8000aa8 <__aeabi_fadd+0x298>
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fadd+0x298>
 8000aa6:	e72a      	b.n	80008fe <__aeabi_fadd+0xee>
 8000aa8:	0173      	lsls	r3, r6, #5
 8000aaa:	d500      	bpl.n	8000aae <__aeabi_fadd+0x29e>
 8000aac:	e72a      	b.n	8000904 <__aeabi_fadd+0xf4>
 8000aae:	002b      	movs	r3, r5
 8000ab0:	08f7      	lsrs	r7, r6, #3
 8000ab2:	e6f7      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000ab4:	2bff      	cmp	r3, #255	@ 0xff
 8000ab6:	d100      	bne.n	8000aba <__aeabi_fadd+0x2aa>
 8000ab8:	e727      	b.n	800090a <__aeabi_fadd+0xfa>
 8000aba:	1871      	adds	r1, r6, r1
 8000abc:	0849      	lsrs	r1, r1, #1
 8000abe:	074a      	lsls	r2, r1, #29
 8000ac0:	d02f      	beq.n	8000b22 <__aeabi_fadd+0x312>
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	2a04      	cmp	r2, #4
 8000ac8:	d02b      	beq.n	8000b22 <__aeabi_fadd+0x312>
 8000aca:	1d0e      	adds	r6, r1, #4
 8000acc:	e6e6      	b.n	800089c <__aeabi_fadd+0x8c>
 8000ace:	2aff      	cmp	r2, #255	@ 0xff
 8000ad0:	d08d      	beq.n	80009ee <__aeabi_fadd+0x1de>
 8000ad2:	2080      	movs	r0, #128	@ 0x80
 8000ad4:	04c0      	lsls	r0, r0, #19
 8000ad6:	4306      	orrs	r6, r0
 8000ad8:	2b1b      	cmp	r3, #27
 8000ada:	dd24      	ble.n	8000b26 <__aeabi_fadd+0x316>
 8000adc:	0013      	movs	r3, r2
 8000ade:	1d4e      	adds	r6, r1, #5
 8000ae0:	e6dc      	b.n	800089c <__aeabi_fadd+0x8c>
 8000ae2:	464c      	mov	r4, r9
 8000ae4:	1b8f      	subs	r7, r1, r6
 8000ae6:	e6f9      	b.n	80008dc <__aeabi_fadd+0xcc>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	000e      	movs	r6, r1
 8000aec:	e6d6      	b.n	800089c <__aeabi_fadd+0x8c>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d149      	bne.n	8000b86 <__aeabi_fadd+0x376>
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d068      	beq.n	8000bc8 <__aeabi_fadd+0x3b8>
 8000af6:	4667      	mov	r7, ip
 8000af8:	464c      	mov	r4, r9
 8000afa:	e77c      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000afc:	1870      	adds	r0, r6, r1
 8000afe:	0143      	lsls	r3, r0, #5
 8000b00:	d574      	bpl.n	8000bec <__aeabi_fadd+0x3dc>
 8000b02:	4930      	ldr	r1, [pc, #192]	@ (8000bc4 <__aeabi_fadd+0x3b4>)
 8000b04:	0840      	lsrs	r0, r0, #1
 8000b06:	4001      	ands	r1, r0
 8000b08:	0743      	lsls	r3, r0, #29
 8000b0a:	d009      	beq.n	8000b20 <__aeabi_fadd+0x310>
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	4003      	ands	r3, r0
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d005      	beq.n	8000b20 <__aeabi_fadd+0x310>
 8000b14:	2302      	movs	r3, #2
 8000b16:	1d0e      	adds	r6, r1, #4
 8000b18:	e6c0      	b.n	800089c <__aeabi_fadd+0x8c>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	08cf      	lsrs	r7, r1, #3
 8000b1e:	e6c1      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000b20:	2302      	movs	r3, #2
 8000b22:	08cf      	lsrs	r7, r1, #3
 8000b24:	e6be      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000b26:	2520      	movs	r5, #32
 8000b28:	0030      	movs	r0, r6
 8000b2a:	40d8      	lsrs	r0, r3
 8000b2c:	1aeb      	subs	r3, r5, r3
 8000b2e:	409e      	lsls	r6, r3
 8000b30:	0033      	movs	r3, r6
 8000b32:	1e5d      	subs	r5, r3, #1
 8000b34:	41ab      	sbcs	r3, r5
 8000b36:	4303      	orrs	r3, r0
 8000b38:	0015      	movs	r5, r2
 8000b3a:	185e      	adds	r6, r3, r1
 8000b3c:	e7a0      	b.n	8000a80 <__aeabi_fadd+0x270>
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fadd+0x334>
 8000b42:	e765      	b.n	8000a10 <__aeabi_fadd+0x200>
 8000b44:	464c      	mov	r4, r9
 8000b46:	4667      	mov	r7, ip
 8000b48:	e6ac      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000b4a:	1b8f      	subs	r7, r1, r6
 8000b4c:	017b      	lsls	r3, r7, #5
 8000b4e:	d52e      	bpl.n	8000bae <__aeabi_fadd+0x39e>
 8000b50:	01bf      	lsls	r7, r7, #6
 8000b52:	09bf      	lsrs	r7, r7, #6
 8000b54:	0038      	movs	r0, r7
 8000b56:	f002 ff0f 	bl	8003978 <__clzsi2>
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	3805      	subs	r0, #5
 8000b5e:	4083      	lsls	r3, r0
 8000b60:	464c      	mov	r4, r9
 8000b62:	3501      	adds	r5, #1
 8000b64:	e710      	b.n	8000988 <__aeabi_fadd+0x178>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fadd+0x35c>
 8000b6a:	e740      	b.n	80009ee <__aeabi_fadd+0x1de>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fadd+0x362>
 8000b70:	e741      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b72:	2380      	movs	r3, #128	@ 0x80
 8000b74:	03db      	lsls	r3, r3, #15
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d200      	bcs.n	8000b7c <__aeabi_fadd+0x36c>
 8000b7a:	e73c      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b7c:	459c      	cmp	ip, r3
 8000b7e:	d300      	bcc.n	8000b82 <__aeabi_fadd+0x372>
 8000b80:	e739      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b82:	4667      	mov	r7, ip
 8000b84:	e737      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b86:	2900      	cmp	r1, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fadd+0x37c>
 8000b8a:	e734      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b8c:	2380      	movs	r3, #128	@ 0x80
 8000b8e:	03db      	lsls	r3, r3, #15
 8000b90:	429f      	cmp	r7, r3
 8000b92:	d200      	bcs.n	8000b96 <__aeabi_fadd+0x386>
 8000b94:	e72f      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b96:	459c      	cmp	ip, r3
 8000b98:	d300      	bcc.n	8000b9c <__aeabi_fadd+0x38c>
 8000b9a:	e72c      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000b9c:	464c      	mov	r4, r9
 8000b9e:	4667      	mov	r7, ip
 8000ba0:	e729      	b.n	80009f6 <__aeabi_fadd+0x1e6>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fadd+0x398>
 8000ba6:	e734      	b.n	8000a12 <__aeabi_fadd+0x202>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	08cf      	lsrs	r7, r1, #3
 8000bac:	e67a      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bae:	464c      	mov	r4, r9
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	08ff      	lsrs	r7, r7, #3
 8000bb4:	e676      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fadd+0x3ac>
 8000bba:	e729      	b.n	8000a10 <__aeabi_fadd+0x200>
 8000bbc:	08ff      	lsrs	r7, r7, #3
 8000bbe:	e671      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bc0:	fbffffff 	.word	0xfbffffff
 8000bc4:	7dffffff 	.word	0x7dffffff
 8000bc8:	2280      	movs	r2, #128	@ 0x80
 8000bca:	2400      	movs	r4, #0
 8000bcc:	20ff      	movs	r0, #255	@ 0xff
 8000bce:	03d2      	lsls	r2, r2, #15
 8000bd0:	e69d      	b.n	800090e <__aeabi_fadd+0xfe>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e666      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	08d7      	lsrs	r7, r2, #3
 8000bda:	e663      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bdc:	2001      	movs	r0, #1
 8000bde:	0172      	lsls	r2, r6, #5
 8000be0:	d500      	bpl.n	8000be4 <__aeabi_fadd+0x3d4>
 8000be2:	e6e7      	b.n	80009b4 <__aeabi_fadd+0x1a4>
 8000be4:	0031      	movs	r1, r6
 8000be6:	2300      	movs	r3, #0
 8000be8:	08cf      	lsrs	r7, r1, #3
 8000bea:	e65b      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bec:	2301      	movs	r3, #1
 8000bee:	08c7      	lsrs	r7, r0, #3
 8000bf0:	e658      	b.n	80008a4 <__aeabi_fadd+0x94>
 8000bf2:	46c0      	nop			@ (mov r8, r8)

08000bf4 <__aeabi_fdiv>:
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	4646      	mov	r6, r8
 8000bf8:	464f      	mov	r7, r9
 8000bfa:	46d6      	mov	lr, sl
 8000bfc:	0245      	lsls	r5, r0, #9
 8000bfe:	b5c0      	push	{r6, r7, lr}
 8000c00:	0fc3      	lsrs	r3, r0, #31
 8000c02:	0047      	lsls	r7, r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	1c0e      	adds	r6, r1, #0
 8000c08:	0a6d      	lsrs	r5, r5, #9
 8000c0a:	0e3f      	lsrs	r7, r7, #24
 8000c0c:	d05b      	beq.n	8000cc6 <__aeabi_fdiv+0xd2>
 8000c0e:	2fff      	cmp	r7, #255	@ 0xff
 8000c10:	d021      	beq.n	8000c56 <__aeabi_fdiv+0x62>
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	00ed      	lsls	r5, r5, #3
 8000c16:	04db      	lsls	r3, r3, #19
 8000c18:	431d      	orrs	r5, r3
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3f7f      	subs	r7, #127	@ 0x7f
 8000c22:	0274      	lsls	r4, r6, #9
 8000c24:	0073      	lsls	r3, r6, #1
 8000c26:	0a64      	lsrs	r4, r4, #9
 8000c28:	0e1b      	lsrs	r3, r3, #24
 8000c2a:	0ff6      	lsrs	r6, r6, #31
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d020      	beq.n	8000c72 <__aeabi_fdiv+0x7e>
 8000c30:	2bff      	cmp	r3, #255	@ 0xff
 8000c32:	d043      	beq.n	8000cbc <__aeabi_fdiv+0xc8>
 8000c34:	2280      	movs	r2, #128	@ 0x80
 8000c36:	2000      	movs	r0, #0
 8000c38:	00e4      	lsls	r4, r4, #3
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	4314      	orrs	r4, r2
 8000c3e:	3b7f      	subs	r3, #127	@ 0x7f
 8000c40:	4642      	mov	r2, r8
 8000c42:	1aff      	subs	r7, r7, r3
 8000c44:	464b      	mov	r3, r9
 8000c46:	4072      	eors	r2, r6
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d900      	bls.n	8000c4e <__aeabi_fdiv+0x5a>
 8000c4c:	e09d      	b.n	8000d8a <__aeabi_fdiv+0x196>
 8000c4e:	4971      	ldr	r1, [pc, #452]	@ (8000e14 <__aeabi_fdiv+0x220>)
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	58cb      	ldr	r3, [r1, r3]
 8000c54:	469f      	mov	pc, r3
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d15a      	bne.n	8000d10 <__aeabi_fdiv+0x11c>
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	4699      	mov	r9, r3
 8000c5e:	3b06      	subs	r3, #6
 8000c60:	0274      	lsls	r4, r6, #9
 8000c62:	469a      	mov	sl, r3
 8000c64:	0073      	lsls	r3, r6, #1
 8000c66:	27ff      	movs	r7, #255	@ 0xff
 8000c68:	0a64      	lsrs	r4, r4, #9
 8000c6a:	0e1b      	lsrs	r3, r3, #24
 8000c6c:	0ff6      	lsrs	r6, r6, #31
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1de      	bne.n	8000c30 <__aeabi_fdiv+0x3c>
 8000c72:	2c00      	cmp	r4, #0
 8000c74:	d13b      	bne.n	8000cee <__aeabi_fdiv+0xfa>
 8000c76:	2301      	movs	r3, #1
 8000c78:	4642      	mov	r2, r8
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	4072      	eors	r2, r6
 8000c7e:	4319      	orrs	r1, r3
 8000c80:	290e      	cmp	r1, #14
 8000c82:	d818      	bhi.n	8000cb6 <__aeabi_fdiv+0xc2>
 8000c84:	4864      	ldr	r0, [pc, #400]	@ (8000e18 <__aeabi_fdiv+0x224>)
 8000c86:	0089      	lsls	r1, r1, #2
 8000c88:	5841      	ldr	r1, [r0, r1]
 8000c8a:	468f      	mov	pc, r1
 8000c8c:	4653      	mov	r3, sl
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fdiv+0xa0>
 8000c92:	e0b8      	b.n	8000e06 <__aeabi_fdiv+0x212>
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d06e      	beq.n	8000d76 <__aeabi_fdiv+0x182>
 8000c98:	4642      	mov	r2, r8
 8000c9a:	002c      	movs	r4, r5
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d140      	bne.n	8000d22 <__aeabi_fdiv+0x12e>
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	05c0      	lsls	r0, r0, #23
 8000ca6:	4320      	orrs	r0, r4
 8000ca8:	07d2      	lsls	r2, r2, #31
 8000caa:	4310      	orrs	r0, r2
 8000cac:	bce0      	pop	{r5, r6, r7}
 8000cae:	46ba      	mov	sl, r7
 8000cb0:	46b1      	mov	r9, r6
 8000cb2:	46a8      	mov	r8, r5
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb6:	20ff      	movs	r0, #255	@ 0xff
 8000cb8:	2400      	movs	r4, #0
 8000cba:	e7f3      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d120      	bne.n	8000d02 <__aeabi_fdiv+0x10e>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	3fff      	subs	r7, #255	@ 0xff
 8000cc4:	e7d8      	b.n	8000c78 <__aeabi_fdiv+0x84>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d105      	bne.n	8000cd6 <__aeabi_fdiv+0xe2>
 8000cca:	2304      	movs	r3, #4
 8000ccc:	4699      	mov	r9, r3
 8000cce:	3b03      	subs	r3, #3
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	e7a5      	b.n	8000c22 <__aeabi_fdiv+0x2e>
 8000cd6:	0028      	movs	r0, r5
 8000cd8:	f002 fe4e 	bl	8003978 <__clzsi2>
 8000cdc:	2776      	movs	r7, #118	@ 0x76
 8000cde:	1f43      	subs	r3, r0, #5
 8000ce0:	409d      	lsls	r5, r3
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	427f      	negs	r7, r7
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	469a      	mov	sl, r3
 8000cea:	1a3f      	subs	r7, r7, r0
 8000cec:	e799      	b.n	8000c22 <__aeabi_fdiv+0x2e>
 8000cee:	0020      	movs	r0, r4
 8000cf0:	f002 fe42 	bl	8003978 <__clzsi2>
 8000cf4:	1f43      	subs	r3, r0, #5
 8000cf6:	409c      	lsls	r4, r3
 8000cf8:	2376      	movs	r3, #118	@ 0x76
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	1a1b      	subs	r3, r3, r0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	e79e      	b.n	8000c40 <__aeabi_fdiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	464a      	mov	r2, r9
 8000d06:	431a      	orrs	r2, r3
 8000d08:	4691      	mov	r9, r2
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	33fc      	adds	r3, #252	@ 0xfc
 8000d0e:	e797      	b.n	8000c40 <__aeabi_fdiv+0x4c>
 8000d10:	230c      	movs	r3, #12
 8000d12:	4699      	mov	r9, r3
 8000d14:	3b09      	subs	r3, #9
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	469a      	mov	sl, r3
 8000d1a:	e782      	b.n	8000c22 <__aeabi_fdiv+0x2e>
 8000d1c:	2803      	cmp	r0, #3
 8000d1e:	d02c      	beq.n	8000d7a <__aeabi_fdiv+0x186>
 8000d20:	0032      	movs	r2, r6
 8000d22:	0038      	movs	r0, r7
 8000d24:	307f      	adds	r0, #127	@ 0x7f
 8000d26:	2800      	cmp	r0, #0
 8000d28:	dd47      	ble.n	8000dba <__aeabi_fdiv+0x1c6>
 8000d2a:	0763      	lsls	r3, r4, #29
 8000d2c:	d004      	beq.n	8000d38 <__aeabi_fdiv+0x144>
 8000d2e:	230f      	movs	r3, #15
 8000d30:	4023      	ands	r3, r4
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d000      	beq.n	8000d38 <__aeabi_fdiv+0x144>
 8000d36:	3404      	adds	r4, #4
 8000d38:	0123      	lsls	r3, r4, #4
 8000d3a:	d503      	bpl.n	8000d44 <__aeabi_fdiv+0x150>
 8000d3c:	0038      	movs	r0, r7
 8000d3e:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <__aeabi_fdiv+0x228>)
 8000d40:	3080      	adds	r0, #128	@ 0x80
 8000d42:	401c      	ands	r4, r3
 8000d44:	28fe      	cmp	r0, #254	@ 0xfe
 8000d46:	dcb6      	bgt.n	8000cb6 <__aeabi_fdiv+0xc2>
 8000d48:	01a4      	lsls	r4, r4, #6
 8000d4a:	0a64      	lsrs	r4, r4, #9
 8000d4c:	b2c0      	uxtb	r0, r0
 8000d4e:	e7a9      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d50:	2480      	movs	r4, #128	@ 0x80
 8000d52:	2200      	movs	r2, #0
 8000d54:	20ff      	movs	r0, #255	@ 0xff
 8000d56:	03e4      	lsls	r4, r4, #15
 8000d58:	e7a4      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d5a:	2380      	movs	r3, #128	@ 0x80
 8000d5c:	03db      	lsls	r3, r3, #15
 8000d5e:	421d      	tst	r5, r3
 8000d60:	d001      	beq.n	8000d66 <__aeabi_fdiv+0x172>
 8000d62:	421c      	tst	r4, r3
 8000d64:	d00b      	beq.n	8000d7e <__aeabi_fdiv+0x18a>
 8000d66:	2480      	movs	r4, #128	@ 0x80
 8000d68:	03e4      	lsls	r4, r4, #15
 8000d6a:	432c      	orrs	r4, r5
 8000d6c:	0264      	lsls	r4, r4, #9
 8000d6e:	4642      	mov	r2, r8
 8000d70:	20ff      	movs	r0, #255	@ 0xff
 8000d72:	0a64      	lsrs	r4, r4, #9
 8000d74:	e796      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d76:	4646      	mov	r6, r8
 8000d78:	002c      	movs	r4, r5
 8000d7a:	2380      	movs	r3, #128	@ 0x80
 8000d7c:	03db      	lsls	r3, r3, #15
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	0264      	lsls	r4, r4, #9
 8000d82:	0032      	movs	r2, r6
 8000d84:	20ff      	movs	r0, #255	@ 0xff
 8000d86:	0a64      	lsrs	r4, r4, #9
 8000d88:	e78c      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000d8a:	016d      	lsls	r5, r5, #5
 8000d8c:	0160      	lsls	r0, r4, #5
 8000d8e:	4285      	cmp	r5, r0
 8000d90:	d22d      	bcs.n	8000dee <__aeabi_fdiv+0x1fa>
 8000d92:	231b      	movs	r3, #27
 8000d94:	2400      	movs	r4, #0
 8000d96:	3f01      	subs	r7, #1
 8000d98:	2601      	movs	r6, #1
 8000d9a:	0029      	movs	r1, r5
 8000d9c:	0064      	lsls	r4, r4, #1
 8000d9e:	006d      	lsls	r5, r5, #1
 8000da0:	2900      	cmp	r1, #0
 8000da2:	db01      	blt.n	8000da8 <__aeabi_fdiv+0x1b4>
 8000da4:	4285      	cmp	r5, r0
 8000da6:	d301      	bcc.n	8000dac <__aeabi_fdiv+0x1b8>
 8000da8:	1a2d      	subs	r5, r5, r0
 8000daa:	4334      	orrs	r4, r6
 8000dac:	3b01      	subs	r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f3      	bne.n	8000d9a <__aeabi_fdiv+0x1a6>
 8000db2:	1e6b      	subs	r3, r5, #1
 8000db4:	419d      	sbcs	r5, r3
 8000db6:	432c      	orrs	r4, r5
 8000db8:	e7b3      	b.n	8000d22 <__aeabi_fdiv+0x12e>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	1a1b      	subs	r3, r3, r0
 8000dbe:	2b1b      	cmp	r3, #27
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_fdiv+0x1d0>
 8000dc2:	e76d      	b.n	8000ca0 <__aeabi_fdiv+0xac>
 8000dc4:	0021      	movs	r1, r4
 8000dc6:	379e      	adds	r7, #158	@ 0x9e
 8000dc8:	40d9      	lsrs	r1, r3
 8000dca:	40bc      	lsls	r4, r7
 8000dcc:	000b      	movs	r3, r1
 8000dce:	1e61      	subs	r1, r4, #1
 8000dd0:	418c      	sbcs	r4, r1
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	0759      	lsls	r1, r3, #29
 8000dd6:	d004      	beq.n	8000de2 <__aeabi_fdiv+0x1ee>
 8000dd8:	210f      	movs	r1, #15
 8000dda:	4019      	ands	r1, r3
 8000ddc:	2904      	cmp	r1, #4
 8000dde:	d000      	beq.n	8000de2 <__aeabi_fdiv+0x1ee>
 8000de0:	3304      	adds	r3, #4
 8000de2:	0159      	lsls	r1, r3, #5
 8000de4:	d413      	bmi.n	8000e0e <__aeabi_fdiv+0x21a>
 8000de6:	019b      	lsls	r3, r3, #6
 8000de8:	2000      	movs	r0, #0
 8000dea:	0a5c      	lsrs	r4, r3, #9
 8000dec:	e75a      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000dee:	231a      	movs	r3, #26
 8000df0:	2401      	movs	r4, #1
 8000df2:	1a2d      	subs	r5, r5, r0
 8000df4:	e7d0      	b.n	8000d98 <__aeabi_fdiv+0x1a4>
 8000df6:	1e98      	subs	r0, r3, #2
 8000df8:	4243      	negs	r3, r0
 8000dfa:	4158      	adcs	r0, r3
 8000dfc:	4240      	negs	r0, r0
 8000dfe:	0032      	movs	r2, r6
 8000e00:	2400      	movs	r4, #0
 8000e02:	b2c0      	uxtb	r0, r0
 8000e04:	e74e      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000e06:	4642      	mov	r2, r8
 8000e08:	20ff      	movs	r0, #255	@ 0xff
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	e74a      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	2400      	movs	r4, #0
 8000e12:	e747      	b.n	8000ca4 <__aeabi_fdiv+0xb0>
 8000e14:	08017a9c 	.word	0x08017a9c
 8000e18:	08017adc 	.word	0x08017adc
 8000e1c:	f7ffffff 	.word	0xf7ffffff

08000e20 <__eqsf2>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	0042      	lsls	r2, r0, #1
 8000e24:	024e      	lsls	r6, r1, #9
 8000e26:	004c      	lsls	r4, r1, #1
 8000e28:	0245      	lsls	r5, r0, #9
 8000e2a:	0a6d      	lsrs	r5, r5, #9
 8000e2c:	0e12      	lsrs	r2, r2, #24
 8000e2e:	0fc3      	lsrs	r3, r0, #31
 8000e30:	0a76      	lsrs	r6, r6, #9
 8000e32:	0e24      	lsrs	r4, r4, #24
 8000e34:	0fc9      	lsrs	r1, r1, #31
 8000e36:	2aff      	cmp	r2, #255	@ 0xff
 8000e38:	d010      	beq.n	8000e5c <__eqsf2+0x3c>
 8000e3a:	2cff      	cmp	r4, #255	@ 0xff
 8000e3c:	d00c      	beq.n	8000e58 <__eqsf2+0x38>
 8000e3e:	2001      	movs	r0, #1
 8000e40:	42a2      	cmp	r2, r4
 8000e42:	d10a      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e44:	42b5      	cmp	r5, r6
 8000e46:	d108      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d00f      	beq.n	8000e6c <__eqsf2+0x4c>
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d104      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e50:	0028      	movs	r0, r5
 8000e52:	1e43      	subs	r3, r0, #1
 8000e54:	4198      	sbcs	r0, r3
 8000e56:	e000      	b.n	8000e5a <__eqsf2+0x3a>
 8000e58:	2001      	movs	r0, #1
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	2cff      	cmp	r4, #255	@ 0xff
 8000e60:	d1fb      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e62:	4335      	orrs	r5, r6
 8000e64:	d1f9      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e66:	404b      	eors	r3, r1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	e7f6      	b.n	8000e5a <__eqsf2+0x3a>
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e7f4      	b.n	8000e5a <__eqsf2+0x3a>

08000e70 <__gesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d018      	beq.n	8000ebc <__gesf2+0x4c>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00a      	beq.n	8000ea4 <__gesf2+0x34>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__gesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10a      	bne.n	8000eac <__gesf2+0x3c>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d029      	beq.n	8000eee <__gesf2+0x7e>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d12d      	bne.n	8000efa <__gesf2+0x8a>
 8000e9e:	0048      	lsls	r0, r1, #1
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	bd30      	pop	{r4, r5, pc}
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	d125      	bne.n	8000ef4 <__gesf2+0x84>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d101      	bne.n	8000eb0 <__gesf2+0x40>
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d0f6      	beq.n	8000e9e <__gesf2+0x2e>
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d019      	beq.n	8000ee8 <__gesf2+0x78>
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	4318      	orrs	r0, r3
 8000eba:	e7f2      	b.n	8000ea2 <__gesf2+0x32>
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	d119      	bne.n	8000ef4 <__gesf2+0x84>
 8000ec0:	28ff      	cmp	r0, #255	@ 0xff
 8000ec2:	d1f7      	bne.n	8000eb4 <__gesf2+0x44>
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d115      	bne.n	8000ef4 <__gesf2+0x84>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d1f2      	bne.n	8000eb4 <__gesf2+0x44>
 8000ece:	e7e8      	b.n	8000ea2 <__gesf2+0x32>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0ef      	beq.n	8000eb4 <__gesf2+0x44>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1ed      	bne.n	8000eb4 <__gesf2+0x44>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dceb      	bgt.n	8000eb4 <__gesf2+0x44>
 8000edc:	db04      	blt.n	8000ee8 <__gesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8e8      	bhi.n	8000eb4 <__gesf2+0x44>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2dc      	bcs.n	8000ea2 <__gesf2+0x32>
 8000ee8:	0058      	lsls	r0, r3, #1
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7d9      	b.n	8000ea2 <__gesf2+0x32>
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	d0d7      	beq.n	8000ea2 <__gesf2+0x32>
 8000ef2:	e7df      	b.n	8000eb4 <__gesf2+0x44>
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	4240      	negs	r0, r0
 8000ef8:	e7d3      	b.n	8000ea2 <__gesf2+0x32>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d1da      	bne.n	8000eb4 <__gesf2+0x44>
 8000efe:	e7ee      	b.n	8000ede <__gesf2+0x6e>

08000f00 <__lesf2>:
 8000f00:	b530      	push	{r4, r5, lr}
 8000f02:	0042      	lsls	r2, r0, #1
 8000f04:	0244      	lsls	r4, r0, #9
 8000f06:	024d      	lsls	r5, r1, #9
 8000f08:	0fc3      	lsrs	r3, r0, #31
 8000f0a:	0048      	lsls	r0, r1, #1
 8000f0c:	0a64      	lsrs	r4, r4, #9
 8000f0e:	0e12      	lsrs	r2, r2, #24
 8000f10:	0a6d      	lsrs	r5, r5, #9
 8000f12:	0e00      	lsrs	r0, r0, #24
 8000f14:	0fc9      	lsrs	r1, r1, #31
 8000f16:	2aff      	cmp	r2, #255	@ 0xff
 8000f18:	d017      	beq.n	8000f4a <__lesf2+0x4a>
 8000f1a:	28ff      	cmp	r0, #255	@ 0xff
 8000f1c:	d00a      	beq.n	8000f34 <__lesf2+0x34>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d11b      	bne.n	8000f5a <__lesf2+0x5a>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d10a      	bne.n	8000f3c <__lesf2+0x3c>
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d01d      	beq.n	8000f66 <__lesf2+0x66>
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	d12d      	bne.n	8000f8a <__lesf2+0x8a>
 8000f2e:	0048      	lsls	r0, r1, #1
 8000f30:	3801      	subs	r0, #1
 8000f32:	e011      	b.n	8000f58 <__lesf2+0x58>
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d10e      	bne.n	8000f56 <__lesf2+0x56>
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d101      	bne.n	8000f40 <__lesf2+0x40>
 8000f3c:	2c00      	cmp	r4, #0
 8000f3e:	d0f6      	beq.n	8000f2e <__lesf2+0x2e>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d10c      	bne.n	8000f5e <__lesf2+0x5e>
 8000f44:	0058      	lsls	r0, r3, #1
 8000f46:	3801      	subs	r0, #1
 8000f48:	e006      	b.n	8000f58 <__lesf2+0x58>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d103      	bne.n	8000f56 <__lesf2+0x56>
 8000f4e:	28ff      	cmp	r0, #255	@ 0xff
 8000f50:	d105      	bne.n	8000f5e <__lesf2+0x5e>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	d015      	beq.n	8000f82 <__lesf2+0x82>
 8000f56:	2002      	movs	r0, #2
 8000f58:	bd30      	pop	{r4, r5, pc}
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d106      	bne.n	8000f6c <__lesf2+0x6c>
 8000f5e:	2001      	movs	r0, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	4318      	orrs	r0, r3
 8000f64:	e7f8      	b.n	8000f58 <__lesf2+0x58>
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	d0f6      	beq.n	8000f58 <__lesf2+0x58>
 8000f6a:	e7f8      	b.n	8000f5e <__lesf2+0x5e>
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d1f6      	bne.n	8000f5e <__lesf2+0x5e>
 8000f70:	4282      	cmp	r2, r0
 8000f72:	dcf4      	bgt.n	8000f5e <__lesf2+0x5e>
 8000f74:	dbe6      	blt.n	8000f44 <__lesf2+0x44>
 8000f76:	42ac      	cmp	r4, r5
 8000f78:	d8f1      	bhi.n	8000f5e <__lesf2+0x5e>
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	42ac      	cmp	r4, r5
 8000f7e:	d2eb      	bcs.n	8000f58 <__lesf2+0x58>
 8000f80:	e7e0      	b.n	8000f44 <__lesf2+0x44>
 8000f82:	2000      	movs	r0, #0
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ea      	bne.n	8000f5e <__lesf2+0x5e>
 8000f88:	e7e6      	b.n	8000f58 <__lesf2+0x58>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1e7      	bne.n	8000f5e <__lesf2+0x5e>
 8000f8e:	e7f2      	b.n	8000f76 <__lesf2+0x76>

08000f90 <__aeabi_fmul>:
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	464f      	mov	r7, r9
 8000f94:	4646      	mov	r6, r8
 8000f96:	46d6      	mov	lr, sl
 8000f98:	0044      	lsls	r4, r0, #1
 8000f9a:	b5c0      	push	{r6, r7, lr}
 8000f9c:	0246      	lsls	r6, r0, #9
 8000f9e:	1c0f      	adds	r7, r1, #0
 8000fa0:	0a76      	lsrs	r6, r6, #9
 8000fa2:	0e24      	lsrs	r4, r4, #24
 8000fa4:	0fc5      	lsrs	r5, r0, #31
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fmul+0x1c>
 8000faa:	e0da      	b.n	8001162 <__aeabi_fmul+0x1d2>
 8000fac:	2cff      	cmp	r4, #255	@ 0xff
 8000fae:	d074      	beq.n	800109a <__aeabi_fmul+0x10a>
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	00f6      	lsls	r6, r6, #3
 8000fb4:	04db      	lsls	r3, r3, #19
 8000fb6:	431e      	orrs	r6, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4699      	mov	r9, r3
 8000fbc:	469a      	mov	sl, r3
 8000fbe:	3c7f      	subs	r4, #127	@ 0x7f
 8000fc0:	027b      	lsls	r3, r7, #9
 8000fc2:	0a5b      	lsrs	r3, r3, #9
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	007b      	lsls	r3, r7, #1
 8000fc8:	0e1b      	lsrs	r3, r3, #24
 8000fca:	0fff      	lsrs	r7, r7, #31
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d074      	beq.n	80010ba <__aeabi_fmul+0x12a>
 8000fd0:	2bff      	cmp	r3, #255	@ 0xff
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fmul+0x46>
 8000fd4:	e08e      	b.n	80010f4 <__aeabi_fmul+0x164>
 8000fd6:	4642      	mov	r2, r8
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	00d2      	lsls	r2, r2, #3
 8000fdc:	04c9      	lsls	r1, r1, #19
 8000fde:	4311      	orrs	r1, r2
 8000fe0:	3b7f      	subs	r3, #127	@ 0x7f
 8000fe2:	002a      	movs	r2, r5
 8000fe4:	18e4      	adds	r4, r4, r3
 8000fe6:	464b      	mov	r3, r9
 8000fe8:	407a      	eors	r2, r7
 8000fea:	4688      	mov	r8, r1
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	2b0a      	cmp	r3, #10
 8000ff0:	dc75      	bgt.n	80010de <__aeabi_fmul+0x14e>
 8000ff2:	464b      	mov	r3, r9
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	dd0f      	ble.n	800101a <__aeabi_fmul+0x8a>
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	408b      	lsls	r3, r1
 8001000:	21a6      	movs	r1, #166	@ 0xa6
 8001002:	00c9      	lsls	r1, r1, #3
 8001004:	420b      	tst	r3, r1
 8001006:	d169      	bne.n	80010dc <__aeabi_fmul+0x14c>
 8001008:	2190      	movs	r1, #144	@ 0x90
 800100a:	0089      	lsls	r1, r1, #2
 800100c:	420b      	tst	r3, r1
 800100e:	d000      	beq.n	8001012 <__aeabi_fmul+0x82>
 8001010:	e100      	b.n	8001214 <__aeabi_fmul+0x284>
 8001012:	2188      	movs	r1, #136	@ 0x88
 8001014:	4219      	tst	r1, r3
 8001016:	d000      	beq.n	800101a <__aeabi_fmul+0x8a>
 8001018:	e0f5      	b.n	8001206 <__aeabi_fmul+0x276>
 800101a:	4641      	mov	r1, r8
 800101c:	0409      	lsls	r1, r1, #16
 800101e:	0c09      	lsrs	r1, r1, #16
 8001020:	4643      	mov	r3, r8
 8001022:	0008      	movs	r0, r1
 8001024:	0c35      	lsrs	r5, r6, #16
 8001026:	0436      	lsls	r6, r6, #16
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	0c36      	lsrs	r6, r6, #16
 800102c:	4370      	muls	r0, r6
 800102e:	4369      	muls	r1, r5
 8001030:	435e      	muls	r6, r3
 8001032:	435d      	muls	r5, r3
 8001034:	1876      	adds	r6, r6, r1
 8001036:	0c03      	lsrs	r3, r0, #16
 8001038:	199b      	adds	r3, r3, r6
 800103a:	4299      	cmp	r1, r3
 800103c:	d903      	bls.n	8001046 <__aeabi_fmul+0xb6>
 800103e:	2180      	movs	r1, #128	@ 0x80
 8001040:	0249      	lsls	r1, r1, #9
 8001042:	468c      	mov	ip, r1
 8001044:	4465      	add	r5, ip
 8001046:	0400      	lsls	r0, r0, #16
 8001048:	0419      	lsls	r1, r3, #16
 800104a:	0c00      	lsrs	r0, r0, #16
 800104c:	1809      	adds	r1, r1, r0
 800104e:	018e      	lsls	r6, r1, #6
 8001050:	1e70      	subs	r0, r6, #1
 8001052:	4186      	sbcs	r6, r0
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	0e89      	lsrs	r1, r1, #26
 8001058:	195b      	adds	r3, r3, r5
 800105a:	430e      	orrs	r6, r1
 800105c:	019b      	lsls	r3, r3, #6
 800105e:	431e      	orrs	r6, r3
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	d46c      	bmi.n	800113e <__aeabi_fmul+0x1ae>
 8001064:	0023      	movs	r3, r4
 8001066:	337f      	adds	r3, #127	@ 0x7f
 8001068:	2b00      	cmp	r3, #0
 800106a:	dc00      	bgt.n	800106e <__aeabi_fmul+0xde>
 800106c:	e0b1      	b.n	80011d2 <__aeabi_fmul+0x242>
 800106e:	0015      	movs	r5, r2
 8001070:	0771      	lsls	r1, r6, #29
 8001072:	d00b      	beq.n	800108c <__aeabi_fmul+0xfc>
 8001074:	200f      	movs	r0, #15
 8001076:	0021      	movs	r1, r4
 8001078:	4030      	ands	r0, r6
 800107a:	2804      	cmp	r0, #4
 800107c:	d006      	beq.n	800108c <__aeabi_fmul+0xfc>
 800107e:	3604      	adds	r6, #4
 8001080:	0132      	lsls	r2, r6, #4
 8001082:	d503      	bpl.n	800108c <__aeabi_fmul+0xfc>
 8001084:	4b6e      	ldr	r3, [pc, #440]	@ (8001240 <__aeabi_fmul+0x2b0>)
 8001086:	401e      	ands	r6, r3
 8001088:	000b      	movs	r3, r1
 800108a:	3380      	adds	r3, #128	@ 0x80
 800108c:	2bfe      	cmp	r3, #254	@ 0xfe
 800108e:	dd00      	ble.n	8001092 <__aeabi_fmul+0x102>
 8001090:	e0bd      	b.n	800120e <__aeabi_fmul+0x27e>
 8001092:	01b2      	lsls	r2, r6, #6
 8001094:	0a52      	lsrs	r2, r2, #9
 8001096:	b2db      	uxtb	r3, r3
 8001098:	e048      	b.n	800112c <__aeabi_fmul+0x19c>
 800109a:	2e00      	cmp	r6, #0
 800109c:	d000      	beq.n	80010a0 <__aeabi_fmul+0x110>
 800109e:	e092      	b.n	80011c6 <__aeabi_fmul+0x236>
 80010a0:	2308      	movs	r3, #8
 80010a2:	4699      	mov	r9, r3
 80010a4:	3b06      	subs	r3, #6
 80010a6:	469a      	mov	sl, r3
 80010a8:	027b      	lsls	r3, r7, #9
 80010aa:	0a5b      	lsrs	r3, r3, #9
 80010ac:	4698      	mov	r8, r3
 80010ae:	007b      	lsls	r3, r7, #1
 80010b0:	24ff      	movs	r4, #255	@ 0xff
 80010b2:	0e1b      	lsrs	r3, r3, #24
 80010b4:	0fff      	lsrs	r7, r7, #31
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d18a      	bne.n	8000fd0 <__aeabi_fmul+0x40>
 80010ba:	4642      	mov	r2, r8
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d164      	bne.n	800118a <__aeabi_fmul+0x1fa>
 80010c0:	4649      	mov	r1, r9
 80010c2:	3201      	adds	r2, #1
 80010c4:	4311      	orrs	r1, r2
 80010c6:	4689      	mov	r9, r1
 80010c8:	290a      	cmp	r1, #10
 80010ca:	dc08      	bgt.n	80010de <__aeabi_fmul+0x14e>
 80010cc:	407d      	eors	r5, r7
 80010ce:	2001      	movs	r0, #1
 80010d0:	b2ea      	uxtb	r2, r5
 80010d2:	2902      	cmp	r1, #2
 80010d4:	dc91      	bgt.n	8000ffa <__aeabi_fmul+0x6a>
 80010d6:	0015      	movs	r5, r2
 80010d8:	2200      	movs	r2, #0
 80010da:	e027      	b.n	800112c <__aeabi_fmul+0x19c>
 80010dc:	0015      	movs	r5, r2
 80010de:	4653      	mov	r3, sl
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fmul+0x156>
 80010e4:	e093      	b.n	800120e <__aeabi_fmul+0x27e>
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d01a      	beq.n	8001120 <__aeabi_fmul+0x190>
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d12c      	bne.n	8001148 <__aeabi_fmul+0x1b8>
 80010ee:	2300      	movs	r3, #0
 80010f0:	2200      	movs	r2, #0
 80010f2:	e01b      	b.n	800112c <__aeabi_fmul+0x19c>
 80010f4:	4643      	mov	r3, r8
 80010f6:	34ff      	adds	r4, #255	@ 0xff
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d055      	beq.n	80011a8 <__aeabi_fmul+0x218>
 80010fc:	2103      	movs	r1, #3
 80010fe:	464b      	mov	r3, r9
 8001100:	430b      	orrs	r3, r1
 8001102:	0019      	movs	r1, r3
 8001104:	2b0a      	cmp	r3, #10
 8001106:	dc00      	bgt.n	800110a <__aeabi_fmul+0x17a>
 8001108:	e092      	b.n	8001230 <__aeabi_fmul+0x2a0>
 800110a:	2b0f      	cmp	r3, #15
 800110c:	d000      	beq.n	8001110 <__aeabi_fmul+0x180>
 800110e:	e08c      	b.n	800122a <__aeabi_fmul+0x29a>
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	03d2      	lsls	r2, r2, #15
 8001114:	4216      	tst	r6, r2
 8001116:	d003      	beq.n	8001120 <__aeabi_fmul+0x190>
 8001118:	4643      	mov	r3, r8
 800111a:	4213      	tst	r3, r2
 800111c:	d100      	bne.n	8001120 <__aeabi_fmul+0x190>
 800111e:	e07d      	b.n	800121c <__aeabi_fmul+0x28c>
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	03d2      	lsls	r2, r2, #15
 8001124:	4332      	orrs	r2, r6
 8001126:	0252      	lsls	r2, r2, #9
 8001128:	0a52      	lsrs	r2, r2, #9
 800112a:	23ff      	movs	r3, #255	@ 0xff
 800112c:	05d8      	lsls	r0, r3, #23
 800112e:	07ed      	lsls	r5, r5, #31
 8001130:	4310      	orrs	r0, r2
 8001132:	4328      	orrs	r0, r5
 8001134:	bce0      	pop	{r5, r6, r7}
 8001136:	46ba      	mov	sl, r7
 8001138:	46b1      	mov	r9, r6
 800113a:	46a8      	mov	r8, r5
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113e:	2301      	movs	r3, #1
 8001140:	0015      	movs	r5, r2
 8001142:	0871      	lsrs	r1, r6, #1
 8001144:	401e      	ands	r6, r3
 8001146:	430e      	orrs	r6, r1
 8001148:	0023      	movs	r3, r4
 800114a:	3380      	adds	r3, #128	@ 0x80
 800114c:	1c61      	adds	r1, r4, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	dd41      	ble.n	80011d6 <__aeabi_fmul+0x246>
 8001152:	0772      	lsls	r2, r6, #29
 8001154:	d094      	beq.n	8001080 <__aeabi_fmul+0xf0>
 8001156:	220f      	movs	r2, #15
 8001158:	4032      	ands	r2, r6
 800115a:	2a04      	cmp	r2, #4
 800115c:	d000      	beq.n	8001160 <__aeabi_fmul+0x1d0>
 800115e:	e78e      	b.n	800107e <__aeabi_fmul+0xee>
 8001160:	e78e      	b.n	8001080 <__aeabi_fmul+0xf0>
 8001162:	2e00      	cmp	r6, #0
 8001164:	d105      	bne.n	8001172 <__aeabi_fmul+0x1e2>
 8001166:	2304      	movs	r3, #4
 8001168:	4699      	mov	r9, r3
 800116a:	3b03      	subs	r3, #3
 800116c:	2400      	movs	r4, #0
 800116e:	469a      	mov	sl, r3
 8001170:	e726      	b.n	8000fc0 <__aeabi_fmul+0x30>
 8001172:	0030      	movs	r0, r6
 8001174:	f002 fc00 	bl	8003978 <__clzsi2>
 8001178:	2476      	movs	r4, #118	@ 0x76
 800117a:	1f43      	subs	r3, r0, #5
 800117c:	409e      	lsls	r6, r3
 800117e:	2300      	movs	r3, #0
 8001180:	4264      	negs	r4, r4
 8001182:	4699      	mov	r9, r3
 8001184:	469a      	mov	sl, r3
 8001186:	1a24      	subs	r4, r4, r0
 8001188:	e71a      	b.n	8000fc0 <__aeabi_fmul+0x30>
 800118a:	4640      	mov	r0, r8
 800118c:	f002 fbf4 	bl	8003978 <__clzsi2>
 8001190:	464b      	mov	r3, r9
 8001192:	1a24      	subs	r4, r4, r0
 8001194:	3c76      	subs	r4, #118	@ 0x76
 8001196:	2b0a      	cmp	r3, #10
 8001198:	dca1      	bgt.n	80010de <__aeabi_fmul+0x14e>
 800119a:	4643      	mov	r3, r8
 800119c:	3805      	subs	r0, #5
 800119e:	4083      	lsls	r3, r0
 80011a0:	407d      	eors	r5, r7
 80011a2:	4698      	mov	r8, r3
 80011a4:	b2ea      	uxtb	r2, r5
 80011a6:	e724      	b.n	8000ff2 <__aeabi_fmul+0x62>
 80011a8:	464a      	mov	r2, r9
 80011aa:	3302      	adds	r3, #2
 80011ac:	4313      	orrs	r3, r2
 80011ae:	002a      	movs	r2, r5
 80011b0:	407a      	eors	r2, r7
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc92      	bgt.n	80010de <__aeabi_fmul+0x14e>
 80011b8:	4649      	mov	r1, r9
 80011ba:	0015      	movs	r5, r2
 80011bc:	2900      	cmp	r1, #0
 80011be:	d026      	beq.n	800120e <__aeabi_fmul+0x27e>
 80011c0:	4699      	mov	r9, r3
 80011c2:	2002      	movs	r0, #2
 80011c4:	e719      	b.n	8000ffa <__aeabi_fmul+0x6a>
 80011c6:	230c      	movs	r3, #12
 80011c8:	4699      	mov	r9, r3
 80011ca:	3b09      	subs	r3, #9
 80011cc:	24ff      	movs	r4, #255	@ 0xff
 80011ce:	469a      	mov	sl, r3
 80011d0:	e6f6      	b.n	8000fc0 <__aeabi_fmul+0x30>
 80011d2:	0015      	movs	r5, r2
 80011d4:	0021      	movs	r1, r4
 80011d6:	2201      	movs	r2, #1
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b1b      	cmp	r3, #27
 80011dc:	dd00      	ble.n	80011e0 <__aeabi_fmul+0x250>
 80011de:	e786      	b.n	80010ee <__aeabi_fmul+0x15e>
 80011e0:	319e      	adds	r1, #158	@ 0x9e
 80011e2:	0032      	movs	r2, r6
 80011e4:	408e      	lsls	r6, r1
 80011e6:	40da      	lsrs	r2, r3
 80011e8:	1e73      	subs	r3, r6, #1
 80011ea:	419e      	sbcs	r6, r3
 80011ec:	4332      	orrs	r2, r6
 80011ee:	0753      	lsls	r3, r2, #29
 80011f0:	d004      	beq.n	80011fc <__aeabi_fmul+0x26c>
 80011f2:	230f      	movs	r3, #15
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d000      	beq.n	80011fc <__aeabi_fmul+0x26c>
 80011fa:	3204      	adds	r2, #4
 80011fc:	0153      	lsls	r3, r2, #5
 80011fe:	d510      	bpl.n	8001222 <__aeabi_fmul+0x292>
 8001200:	2301      	movs	r3, #1
 8001202:	2200      	movs	r2, #0
 8001204:	e792      	b.n	800112c <__aeabi_fmul+0x19c>
 8001206:	003d      	movs	r5, r7
 8001208:	4646      	mov	r6, r8
 800120a:	4682      	mov	sl, r0
 800120c:	e767      	b.n	80010de <__aeabi_fmul+0x14e>
 800120e:	23ff      	movs	r3, #255	@ 0xff
 8001210:	2200      	movs	r2, #0
 8001212:	e78b      	b.n	800112c <__aeabi_fmul+0x19c>
 8001214:	2280      	movs	r2, #128	@ 0x80
 8001216:	2500      	movs	r5, #0
 8001218:	03d2      	lsls	r2, r2, #15
 800121a:	e786      	b.n	800112a <__aeabi_fmul+0x19a>
 800121c:	003d      	movs	r5, r7
 800121e:	431a      	orrs	r2, r3
 8001220:	e783      	b.n	800112a <__aeabi_fmul+0x19a>
 8001222:	0192      	lsls	r2, r2, #6
 8001224:	2300      	movs	r3, #0
 8001226:	0a52      	lsrs	r2, r2, #9
 8001228:	e780      	b.n	800112c <__aeabi_fmul+0x19c>
 800122a:	003d      	movs	r5, r7
 800122c:	4646      	mov	r6, r8
 800122e:	e777      	b.n	8001120 <__aeabi_fmul+0x190>
 8001230:	002a      	movs	r2, r5
 8001232:	2301      	movs	r3, #1
 8001234:	407a      	eors	r2, r7
 8001236:	408b      	lsls	r3, r1
 8001238:	2003      	movs	r0, #3
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	e6e9      	b.n	8001012 <__aeabi_fmul+0x82>
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	f7ffffff 	.word	0xf7ffffff

08001244 <__aeabi_fsub>:
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	4647      	mov	r7, r8
 8001248:	46ce      	mov	lr, r9
 800124a:	0243      	lsls	r3, r0, #9
 800124c:	b580      	push	{r7, lr}
 800124e:	0a5f      	lsrs	r7, r3, #9
 8001250:	099b      	lsrs	r3, r3, #6
 8001252:	0045      	lsls	r5, r0, #1
 8001254:	004a      	lsls	r2, r1, #1
 8001256:	469c      	mov	ip, r3
 8001258:	024b      	lsls	r3, r1, #9
 800125a:	0fc4      	lsrs	r4, r0, #31
 800125c:	0fce      	lsrs	r6, r1, #31
 800125e:	0e2d      	lsrs	r5, r5, #24
 8001260:	0a58      	lsrs	r0, r3, #9
 8001262:	0e12      	lsrs	r2, r2, #24
 8001264:	0999      	lsrs	r1, r3, #6
 8001266:	2aff      	cmp	r2, #255	@ 0xff
 8001268:	d06b      	beq.n	8001342 <__aeabi_fsub+0xfe>
 800126a:	2301      	movs	r3, #1
 800126c:	405e      	eors	r6, r3
 800126e:	1aab      	subs	r3, r5, r2
 8001270:	42b4      	cmp	r4, r6
 8001272:	d04b      	beq.n	800130c <__aeabi_fsub+0xc8>
 8001274:	2b00      	cmp	r3, #0
 8001276:	dc00      	bgt.n	800127a <__aeabi_fsub+0x36>
 8001278:	e0ff      	b.n	800147a <__aeabi_fsub+0x236>
 800127a:	2a00      	cmp	r2, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_fsub+0x3c>
 800127e:	e088      	b.n	8001392 <__aeabi_fsub+0x14e>
 8001280:	2dff      	cmp	r5, #255	@ 0xff
 8001282:	d100      	bne.n	8001286 <__aeabi_fsub+0x42>
 8001284:	e0ef      	b.n	8001466 <__aeabi_fsub+0x222>
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	04d2      	lsls	r2, r2, #19
 800128a:	4311      	orrs	r1, r2
 800128c:	2001      	movs	r0, #1
 800128e:	2b1b      	cmp	r3, #27
 8001290:	dc08      	bgt.n	80012a4 <__aeabi_fsub+0x60>
 8001292:	0008      	movs	r0, r1
 8001294:	2220      	movs	r2, #32
 8001296:	40d8      	lsrs	r0, r3
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	4099      	lsls	r1, r3
 800129c:	000b      	movs	r3, r1
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	4193      	sbcs	r3, r2
 80012a2:	4318      	orrs	r0, r3
 80012a4:	4663      	mov	r3, ip
 80012a6:	1a1b      	subs	r3, r3, r0
 80012a8:	469c      	mov	ip, r3
 80012aa:	4663      	mov	r3, ip
 80012ac:	015b      	lsls	r3, r3, #5
 80012ae:	d400      	bmi.n	80012b2 <__aeabi_fsub+0x6e>
 80012b0:	e0cd      	b.n	800144e <__aeabi_fsub+0x20a>
 80012b2:	4663      	mov	r3, ip
 80012b4:	019f      	lsls	r7, r3, #6
 80012b6:	09bf      	lsrs	r7, r7, #6
 80012b8:	0038      	movs	r0, r7
 80012ba:	f002 fb5d 	bl	8003978 <__clzsi2>
 80012be:	003b      	movs	r3, r7
 80012c0:	3805      	subs	r0, #5
 80012c2:	4083      	lsls	r3, r0
 80012c4:	4285      	cmp	r5, r0
 80012c6:	dc00      	bgt.n	80012ca <__aeabi_fsub+0x86>
 80012c8:	e0a2      	b.n	8001410 <__aeabi_fsub+0x1cc>
 80012ca:	4ab7      	ldr	r2, [pc, #732]	@ (80015a8 <__aeabi_fsub+0x364>)
 80012cc:	1a2d      	subs	r5, r5, r0
 80012ce:	401a      	ands	r2, r3
 80012d0:	4694      	mov	ip, r2
 80012d2:	075a      	lsls	r2, r3, #29
 80012d4:	d100      	bne.n	80012d8 <__aeabi_fsub+0x94>
 80012d6:	e0c3      	b.n	8001460 <__aeabi_fsub+0x21c>
 80012d8:	220f      	movs	r2, #15
 80012da:	4013      	ands	r3, r2
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d100      	bne.n	80012e2 <__aeabi_fsub+0x9e>
 80012e0:	e0be      	b.n	8001460 <__aeabi_fsub+0x21c>
 80012e2:	2304      	movs	r3, #4
 80012e4:	4698      	mov	r8, r3
 80012e6:	44c4      	add	ip, r8
 80012e8:	4663      	mov	r3, ip
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	d400      	bmi.n	80012f0 <__aeabi_fsub+0xac>
 80012ee:	e0b7      	b.n	8001460 <__aeabi_fsub+0x21c>
 80012f0:	1c68      	adds	r0, r5, #1
 80012f2:	2dfe      	cmp	r5, #254	@ 0xfe
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0xb4>
 80012f6:	e0a5      	b.n	8001444 <__aeabi_fsub+0x200>
 80012f8:	20ff      	movs	r0, #255	@ 0xff
 80012fa:	2200      	movs	r2, #0
 80012fc:	05c0      	lsls	r0, r0, #23
 80012fe:	4310      	orrs	r0, r2
 8001300:	07e4      	lsls	r4, r4, #31
 8001302:	4320      	orrs	r0, r4
 8001304:	bcc0      	pop	{r6, r7}
 8001306:	46b9      	mov	r9, r7
 8001308:	46b0      	mov	r8, r6
 800130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130c:	2b00      	cmp	r3, #0
 800130e:	dc00      	bgt.n	8001312 <__aeabi_fsub+0xce>
 8001310:	e1eb      	b.n	80016ea <__aeabi_fsub+0x4a6>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d046      	beq.n	80013a4 <__aeabi_fsub+0x160>
 8001316:	2dff      	cmp	r5, #255	@ 0xff
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0xd8>
 800131a:	e0a4      	b.n	8001466 <__aeabi_fsub+0x222>
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	04d2      	lsls	r2, r2, #19
 8001320:	4311      	orrs	r1, r2
 8001322:	2b1b      	cmp	r3, #27
 8001324:	dc00      	bgt.n	8001328 <__aeabi_fsub+0xe4>
 8001326:	e0fb      	b.n	8001520 <__aeabi_fsub+0x2dc>
 8001328:	2305      	movs	r3, #5
 800132a:	4698      	mov	r8, r3
 800132c:	002b      	movs	r3, r5
 800132e:	44c4      	add	ip, r8
 8001330:	4662      	mov	r2, ip
 8001332:	08d7      	lsrs	r7, r2, #3
 8001334:	2bff      	cmp	r3, #255	@ 0xff
 8001336:	d100      	bne.n	800133a <__aeabi_fsub+0xf6>
 8001338:	e095      	b.n	8001466 <__aeabi_fsub+0x222>
 800133a:	027a      	lsls	r2, r7, #9
 800133c:	0a52      	lsrs	r2, r2, #9
 800133e:	b2d8      	uxtb	r0, r3
 8001340:	e7dc      	b.n	80012fc <__aeabi_fsub+0xb8>
 8001342:	002b      	movs	r3, r5
 8001344:	3bff      	subs	r3, #255	@ 0xff
 8001346:	4699      	mov	r9, r3
 8001348:	2900      	cmp	r1, #0
 800134a:	d118      	bne.n	800137e <__aeabi_fsub+0x13a>
 800134c:	2301      	movs	r3, #1
 800134e:	405e      	eors	r6, r3
 8001350:	42b4      	cmp	r4, r6
 8001352:	d100      	bne.n	8001356 <__aeabi_fsub+0x112>
 8001354:	e0ca      	b.n	80014ec <__aeabi_fsub+0x2a8>
 8001356:	464b      	mov	r3, r9
 8001358:	2b00      	cmp	r3, #0
 800135a:	d02d      	beq.n	80013b8 <__aeabi_fsub+0x174>
 800135c:	2d00      	cmp	r5, #0
 800135e:	d000      	beq.n	8001362 <__aeabi_fsub+0x11e>
 8001360:	e13c      	b.n	80015dc <__aeabi_fsub+0x398>
 8001362:	23ff      	movs	r3, #255	@ 0xff
 8001364:	4664      	mov	r4, ip
 8001366:	2c00      	cmp	r4, #0
 8001368:	d100      	bne.n	800136c <__aeabi_fsub+0x128>
 800136a:	e15f      	b.n	800162c <__aeabi_fsub+0x3e8>
 800136c:	1e5d      	subs	r5, r3, #1
 800136e:	2b01      	cmp	r3, #1
 8001370:	d100      	bne.n	8001374 <__aeabi_fsub+0x130>
 8001372:	e174      	b.n	800165e <__aeabi_fsub+0x41a>
 8001374:	0034      	movs	r4, r6
 8001376:	2bff      	cmp	r3, #255	@ 0xff
 8001378:	d074      	beq.n	8001464 <__aeabi_fsub+0x220>
 800137a:	002b      	movs	r3, r5
 800137c:	e103      	b.n	8001586 <__aeabi_fsub+0x342>
 800137e:	42b4      	cmp	r4, r6
 8001380:	d100      	bne.n	8001384 <__aeabi_fsub+0x140>
 8001382:	e09c      	b.n	80014be <__aeabi_fsub+0x27a>
 8001384:	2b00      	cmp	r3, #0
 8001386:	d017      	beq.n	80013b8 <__aeabi_fsub+0x174>
 8001388:	2d00      	cmp	r5, #0
 800138a:	d0ea      	beq.n	8001362 <__aeabi_fsub+0x11e>
 800138c:	0007      	movs	r7, r0
 800138e:	0034      	movs	r4, r6
 8001390:	e06c      	b.n	800146c <__aeabi_fsub+0x228>
 8001392:	2900      	cmp	r1, #0
 8001394:	d0cc      	beq.n	8001330 <__aeabi_fsub+0xec>
 8001396:	1e5a      	subs	r2, r3, #1
 8001398:	2b01      	cmp	r3, #1
 800139a:	d02b      	beq.n	80013f4 <__aeabi_fsub+0x1b0>
 800139c:	2bff      	cmp	r3, #255	@ 0xff
 800139e:	d062      	beq.n	8001466 <__aeabi_fsub+0x222>
 80013a0:	0013      	movs	r3, r2
 80013a2:	e773      	b.n	800128c <__aeabi_fsub+0x48>
 80013a4:	2900      	cmp	r1, #0
 80013a6:	d0c3      	beq.n	8001330 <__aeabi_fsub+0xec>
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d100      	bne.n	80013b0 <__aeabi_fsub+0x16c>
 80013ae:	e11e      	b.n	80015ee <__aeabi_fsub+0x3aa>
 80013b0:	2bff      	cmp	r3, #255	@ 0xff
 80013b2:	d058      	beq.n	8001466 <__aeabi_fsub+0x222>
 80013b4:	0013      	movs	r3, r2
 80013b6:	e7b4      	b.n	8001322 <__aeabi_fsub+0xde>
 80013b8:	22fe      	movs	r2, #254	@ 0xfe
 80013ba:	1c6b      	adds	r3, r5, #1
 80013bc:	421a      	tst	r2, r3
 80013be:	d10d      	bne.n	80013dc <__aeabi_fsub+0x198>
 80013c0:	2d00      	cmp	r5, #0
 80013c2:	d060      	beq.n	8001486 <__aeabi_fsub+0x242>
 80013c4:	4663      	mov	r3, ip
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d000      	beq.n	80013cc <__aeabi_fsub+0x188>
 80013ca:	e120      	b.n	800160e <__aeabi_fsub+0x3ca>
 80013cc:	2900      	cmp	r1, #0
 80013ce:	d000      	beq.n	80013d2 <__aeabi_fsub+0x18e>
 80013d0:	e128      	b.n	8001624 <__aeabi_fsub+0x3e0>
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	2400      	movs	r4, #0
 80013d6:	20ff      	movs	r0, #255	@ 0xff
 80013d8:	03d2      	lsls	r2, r2, #15
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xb8>
 80013dc:	4663      	mov	r3, ip
 80013de:	1a5f      	subs	r7, r3, r1
 80013e0:	017b      	lsls	r3, r7, #5
 80013e2:	d500      	bpl.n	80013e6 <__aeabi_fsub+0x1a2>
 80013e4:	e0fe      	b.n	80015e4 <__aeabi_fsub+0x3a0>
 80013e6:	2f00      	cmp	r7, #0
 80013e8:	d000      	beq.n	80013ec <__aeabi_fsub+0x1a8>
 80013ea:	e765      	b.n	80012b8 <__aeabi_fsub+0x74>
 80013ec:	2400      	movs	r4, #0
 80013ee:	2000      	movs	r0, #0
 80013f0:	2200      	movs	r2, #0
 80013f2:	e783      	b.n	80012fc <__aeabi_fsub+0xb8>
 80013f4:	4663      	mov	r3, ip
 80013f6:	1a59      	subs	r1, r3, r1
 80013f8:	014b      	lsls	r3, r1, #5
 80013fa:	d400      	bmi.n	80013fe <__aeabi_fsub+0x1ba>
 80013fc:	e119      	b.n	8001632 <__aeabi_fsub+0x3ee>
 80013fe:	018f      	lsls	r7, r1, #6
 8001400:	09bf      	lsrs	r7, r7, #6
 8001402:	0038      	movs	r0, r7
 8001404:	f002 fab8 	bl	8003978 <__clzsi2>
 8001408:	003b      	movs	r3, r7
 800140a:	3805      	subs	r0, #5
 800140c:	4083      	lsls	r3, r0
 800140e:	2501      	movs	r5, #1
 8001410:	2220      	movs	r2, #32
 8001412:	1b40      	subs	r0, r0, r5
 8001414:	3001      	adds	r0, #1
 8001416:	1a12      	subs	r2, r2, r0
 8001418:	0019      	movs	r1, r3
 800141a:	4093      	lsls	r3, r2
 800141c:	40c1      	lsrs	r1, r0
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	4193      	sbcs	r3, r2
 8001422:	4319      	orrs	r1, r3
 8001424:	468c      	mov	ip, r1
 8001426:	1e0b      	subs	r3, r1, #0
 8001428:	d0e1      	beq.n	80013ee <__aeabi_fsub+0x1aa>
 800142a:	075b      	lsls	r3, r3, #29
 800142c:	d100      	bne.n	8001430 <__aeabi_fsub+0x1ec>
 800142e:	e152      	b.n	80016d6 <__aeabi_fsub+0x492>
 8001430:	230f      	movs	r3, #15
 8001432:	2500      	movs	r5, #0
 8001434:	400b      	ands	r3, r1
 8001436:	2b04      	cmp	r3, #4
 8001438:	d000      	beq.n	800143c <__aeabi_fsub+0x1f8>
 800143a:	e752      	b.n	80012e2 <__aeabi_fsub+0x9e>
 800143c:	2001      	movs	r0, #1
 800143e:	014a      	lsls	r2, r1, #5
 8001440:	d400      	bmi.n	8001444 <__aeabi_fsub+0x200>
 8001442:	e092      	b.n	800156a <__aeabi_fsub+0x326>
 8001444:	b2c0      	uxtb	r0, r0
 8001446:	4663      	mov	r3, ip
 8001448:	019a      	lsls	r2, r3, #6
 800144a:	0a52      	lsrs	r2, r2, #9
 800144c:	e756      	b.n	80012fc <__aeabi_fsub+0xb8>
 800144e:	4663      	mov	r3, ip
 8001450:	075b      	lsls	r3, r3, #29
 8001452:	d005      	beq.n	8001460 <__aeabi_fsub+0x21c>
 8001454:	230f      	movs	r3, #15
 8001456:	4662      	mov	r2, ip
 8001458:	4013      	ands	r3, r2
 800145a:	2b04      	cmp	r3, #4
 800145c:	d000      	beq.n	8001460 <__aeabi_fsub+0x21c>
 800145e:	e740      	b.n	80012e2 <__aeabi_fsub+0x9e>
 8001460:	002b      	movs	r3, r5
 8001462:	e765      	b.n	8001330 <__aeabi_fsub+0xec>
 8001464:	0007      	movs	r7, r0
 8001466:	2f00      	cmp	r7, #0
 8001468:	d100      	bne.n	800146c <__aeabi_fsub+0x228>
 800146a:	e745      	b.n	80012f8 <__aeabi_fsub+0xb4>
 800146c:	2280      	movs	r2, #128	@ 0x80
 800146e:	03d2      	lsls	r2, r2, #15
 8001470:	433a      	orrs	r2, r7
 8001472:	0252      	lsls	r2, r2, #9
 8001474:	20ff      	movs	r0, #255	@ 0xff
 8001476:	0a52      	lsrs	r2, r2, #9
 8001478:	e740      	b.n	80012fc <__aeabi_fsub+0xb8>
 800147a:	2b00      	cmp	r3, #0
 800147c:	d179      	bne.n	8001572 <__aeabi_fsub+0x32e>
 800147e:	22fe      	movs	r2, #254	@ 0xfe
 8001480:	1c6b      	adds	r3, r5, #1
 8001482:	421a      	tst	r2, r3
 8001484:	d1aa      	bne.n	80013dc <__aeabi_fsub+0x198>
 8001486:	4663      	mov	r3, ip
 8001488:	2b00      	cmp	r3, #0
 800148a:	d100      	bne.n	800148e <__aeabi_fsub+0x24a>
 800148c:	e0f5      	b.n	800167a <__aeabi_fsub+0x436>
 800148e:	2900      	cmp	r1, #0
 8001490:	d100      	bne.n	8001494 <__aeabi_fsub+0x250>
 8001492:	e0d1      	b.n	8001638 <__aeabi_fsub+0x3f4>
 8001494:	1a5f      	subs	r7, r3, r1
 8001496:	2380      	movs	r3, #128	@ 0x80
 8001498:	04db      	lsls	r3, r3, #19
 800149a:	421f      	tst	r7, r3
 800149c:	d100      	bne.n	80014a0 <__aeabi_fsub+0x25c>
 800149e:	e10e      	b.n	80016be <__aeabi_fsub+0x47a>
 80014a0:	4662      	mov	r2, ip
 80014a2:	2401      	movs	r4, #1
 80014a4:	1a8a      	subs	r2, r1, r2
 80014a6:	4694      	mov	ip, r2
 80014a8:	2000      	movs	r0, #0
 80014aa:	4034      	ands	r4, r6
 80014ac:	2a00      	cmp	r2, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_fsub+0x26e>
 80014b0:	e724      	b.n	80012fc <__aeabi_fsub+0xb8>
 80014b2:	2001      	movs	r0, #1
 80014b4:	421a      	tst	r2, r3
 80014b6:	d1c6      	bne.n	8001446 <__aeabi_fsub+0x202>
 80014b8:	2300      	movs	r3, #0
 80014ba:	08d7      	lsrs	r7, r2, #3
 80014bc:	e73d      	b.n	800133a <__aeabi_fsub+0xf6>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d017      	beq.n	80014f2 <__aeabi_fsub+0x2ae>
 80014c2:	2d00      	cmp	r5, #0
 80014c4:	d000      	beq.n	80014c8 <__aeabi_fsub+0x284>
 80014c6:	e0af      	b.n	8001628 <__aeabi_fsub+0x3e4>
 80014c8:	23ff      	movs	r3, #255	@ 0xff
 80014ca:	4665      	mov	r5, ip
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	d100      	bne.n	80014d2 <__aeabi_fsub+0x28e>
 80014d0:	e0ad      	b.n	800162e <__aeabi_fsub+0x3ea>
 80014d2:	1e5e      	subs	r6, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d100      	bne.n	80014da <__aeabi_fsub+0x296>
 80014d8:	e089      	b.n	80015ee <__aeabi_fsub+0x3aa>
 80014da:	2bff      	cmp	r3, #255	@ 0xff
 80014dc:	d0c2      	beq.n	8001464 <__aeabi_fsub+0x220>
 80014de:	2e1b      	cmp	r6, #27
 80014e0:	dc00      	bgt.n	80014e4 <__aeabi_fsub+0x2a0>
 80014e2:	e0ab      	b.n	800163c <__aeabi_fsub+0x3f8>
 80014e4:	1d4b      	adds	r3, r1, #5
 80014e6:	469c      	mov	ip, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	e721      	b.n	8001330 <__aeabi_fsub+0xec>
 80014ec:	464b      	mov	r3, r9
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d170      	bne.n	80015d4 <__aeabi_fsub+0x390>
 80014f2:	22fe      	movs	r2, #254	@ 0xfe
 80014f4:	1c6b      	adds	r3, r5, #1
 80014f6:	421a      	tst	r2, r3
 80014f8:	d15e      	bne.n	80015b8 <__aeabi_fsub+0x374>
 80014fa:	2d00      	cmp	r5, #0
 80014fc:	d000      	beq.n	8001500 <__aeabi_fsub+0x2bc>
 80014fe:	e0c3      	b.n	8001688 <__aeabi_fsub+0x444>
 8001500:	4663      	mov	r3, ip
 8001502:	2b00      	cmp	r3, #0
 8001504:	d100      	bne.n	8001508 <__aeabi_fsub+0x2c4>
 8001506:	e0d0      	b.n	80016aa <__aeabi_fsub+0x466>
 8001508:	2900      	cmp	r1, #0
 800150a:	d100      	bne.n	800150e <__aeabi_fsub+0x2ca>
 800150c:	e094      	b.n	8001638 <__aeabi_fsub+0x3f4>
 800150e:	000a      	movs	r2, r1
 8001510:	4462      	add	r2, ip
 8001512:	0153      	lsls	r3, r2, #5
 8001514:	d400      	bmi.n	8001518 <__aeabi_fsub+0x2d4>
 8001516:	e0d8      	b.n	80016ca <__aeabi_fsub+0x486>
 8001518:	0192      	lsls	r2, r2, #6
 800151a:	2001      	movs	r0, #1
 800151c:	0a52      	lsrs	r2, r2, #9
 800151e:	e6ed      	b.n	80012fc <__aeabi_fsub+0xb8>
 8001520:	0008      	movs	r0, r1
 8001522:	2220      	movs	r2, #32
 8001524:	40d8      	lsrs	r0, r3
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	4099      	lsls	r1, r3
 800152a:	000b      	movs	r3, r1
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	4193      	sbcs	r3, r2
 8001530:	4303      	orrs	r3, r0
 8001532:	449c      	add	ip, r3
 8001534:	4663      	mov	r3, ip
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	d589      	bpl.n	800144e <__aeabi_fsub+0x20a>
 800153a:	3501      	adds	r5, #1
 800153c:	2dff      	cmp	r5, #255	@ 0xff
 800153e:	d100      	bne.n	8001542 <__aeabi_fsub+0x2fe>
 8001540:	e6da      	b.n	80012f8 <__aeabi_fsub+0xb4>
 8001542:	4662      	mov	r2, ip
 8001544:	2301      	movs	r3, #1
 8001546:	4919      	ldr	r1, [pc, #100]	@ (80015ac <__aeabi_fsub+0x368>)
 8001548:	4013      	ands	r3, r2
 800154a:	0852      	lsrs	r2, r2, #1
 800154c:	400a      	ands	r2, r1
 800154e:	431a      	orrs	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	4694      	mov	ip, r2
 8001554:	075b      	lsls	r3, r3, #29
 8001556:	d004      	beq.n	8001562 <__aeabi_fsub+0x31e>
 8001558:	230f      	movs	r3, #15
 800155a:	4013      	ands	r3, r2
 800155c:	2b04      	cmp	r3, #4
 800155e:	d000      	beq.n	8001562 <__aeabi_fsub+0x31e>
 8001560:	e6bf      	b.n	80012e2 <__aeabi_fsub+0x9e>
 8001562:	4663      	mov	r3, ip
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	d500      	bpl.n	800156a <__aeabi_fsub+0x326>
 8001568:	e6c2      	b.n	80012f0 <__aeabi_fsub+0xac>
 800156a:	4663      	mov	r3, ip
 800156c:	08df      	lsrs	r7, r3, #3
 800156e:	002b      	movs	r3, r5
 8001570:	e6e3      	b.n	800133a <__aeabi_fsub+0xf6>
 8001572:	1b53      	subs	r3, r2, r5
 8001574:	2d00      	cmp	r5, #0
 8001576:	d100      	bne.n	800157a <__aeabi_fsub+0x336>
 8001578:	e6f4      	b.n	8001364 <__aeabi_fsub+0x120>
 800157a:	2080      	movs	r0, #128	@ 0x80
 800157c:	4664      	mov	r4, ip
 800157e:	04c0      	lsls	r0, r0, #19
 8001580:	4304      	orrs	r4, r0
 8001582:	46a4      	mov	ip, r4
 8001584:	0034      	movs	r4, r6
 8001586:	2001      	movs	r0, #1
 8001588:	2b1b      	cmp	r3, #27
 800158a:	dc09      	bgt.n	80015a0 <__aeabi_fsub+0x35c>
 800158c:	2520      	movs	r5, #32
 800158e:	4660      	mov	r0, ip
 8001590:	40d8      	lsrs	r0, r3
 8001592:	1aeb      	subs	r3, r5, r3
 8001594:	4665      	mov	r5, ip
 8001596:	409d      	lsls	r5, r3
 8001598:	002b      	movs	r3, r5
 800159a:	1e5d      	subs	r5, r3, #1
 800159c:	41ab      	sbcs	r3, r5
 800159e:	4318      	orrs	r0, r3
 80015a0:	1a0b      	subs	r3, r1, r0
 80015a2:	469c      	mov	ip, r3
 80015a4:	0015      	movs	r5, r2
 80015a6:	e680      	b.n	80012aa <__aeabi_fsub+0x66>
 80015a8:	fbffffff 	.word	0xfbffffff
 80015ac:	7dffffff 	.word	0x7dffffff
 80015b0:	22fe      	movs	r2, #254	@ 0xfe
 80015b2:	1c6b      	adds	r3, r5, #1
 80015b4:	4213      	tst	r3, r2
 80015b6:	d0a3      	beq.n	8001500 <__aeabi_fsub+0x2bc>
 80015b8:	2bff      	cmp	r3, #255	@ 0xff
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x37a>
 80015bc:	e69c      	b.n	80012f8 <__aeabi_fsub+0xb4>
 80015be:	4461      	add	r1, ip
 80015c0:	0849      	lsrs	r1, r1, #1
 80015c2:	074a      	lsls	r2, r1, #29
 80015c4:	d049      	beq.n	800165a <__aeabi_fsub+0x416>
 80015c6:	220f      	movs	r2, #15
 80015c8:	400a      	ands	r2, r1
 80015ca:	2a04      	cmp	r2, #4
 80015cc:	d045      	beq.n	800165a <__aeabi_fsub+0x416>
 80015ce:	1d0a      	adds	r2, r1, #4
 80015d0:	4694      	mov	ip, r2
 80015d2:	e6ad      	b.n	8001330 <__aeabi_fsub+0xec>
 80015d4:	2d00      	cmp	r5, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_fsub+0x396>
 80015d8:	e776      	b.n	80014c8 <__aeabi_fsub+0x284>
 80015da:	e68d      	b.n	80012f8 <__aeabi_fsub+0xb4>
 80015dc:	0034      	movs	r4, r6
 80015de:	20ff      	movs	r0, #255	@ 0xff
 80015e0:	2200      	movs	r2, #0
 80015e2:	e68b      	b.n	80012fc <__aeabi_fsub+0xb8>
 80015e4:	4663      	mov	r3, ip
 80015e6:	2401      	movs	r4, #1
 80015e8:	1acf      	subs	r7, r1, r3
 80015ea:	4034      	ands	r4, r6
 80015ec:	e664      	b.n	80012b8 <__aeabi_fsub+0x74>
 80015ee:	4461      	add	r1, ip
 80015f0:	014b      	lsls	r3, r1, #5
 80015f2:	d56d      	bpl.n	80016d0 <__aeabi_fsub+0x48c>
 80015f4:	0848      	lsrs	r0, r1, #1
 80015f6:	4944      	ldr	r1, [pc, #272]	@ (8001708 <__aeabi_fsub+0x4c4>)
 80015f8:	4001      	ands	r1, r0
 80015fa:	0743      	lsls	r3, r0, #29
 80015fc:	d02c      	beq.n	8001658 <__aeabi_fsub+0x414>
 80015fe:	230f      	movs	r3, #15
 8001600:	4003      	ands	r3, r0
 8001602:	2b04      	cmp	r3, #4
 8001604:	d028      	beq.n	8001658 <__aeabi_fsub+0x414>
 8001606:	1d0b      	adds	r3, r1, #4
 8001608:	469c      	mov	ip, r3
 800160a:	2302      	movs	r3, #2
 800160c:	e690      	b.n	8001330 <__aeabi_fsub+0xec>
 800160e:	2900      	cmp	r1, #0
 8001610:	d100      	bne.n	8001614 <__aeabi_fsub+0x3d0>
 8001612:	e72b      	b.n	800146c <__aeabi_fsub+0x228>
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	03db      	lsls	r3, r3, #15
 8001618:	429f      	cmp	r7, r3
 800161a:	d200      	bcs.n	800161e <__aeabi_fsub+0x3da>
 800161c:	e726      	b.n	800146c <__aeabi_fsub+0x228>
 800161e:	4298      	cmp	r0, r3
 8001620:	d300      	bcc.n	8001624 <__aeabi_fsub+0x3e0>
 8001622:	e723      	b.n	800146c <__aeabi_fsub+0x228>
 8001624:	2401      	movs	r4, #1
 8001626:	4034      	ands	r4, r6
 8001628:	0007      	movs	r7, r0
 800162a:	e71f      	b.n	800146c <__aeabi_fsub+0x228>
 800162c:	0034      	movs	r4, r6
 800162e:	468c      	mov	ip, r1
 8001630:	e67e      	b.n	8001330 <__aeabi_fsub+0xec>
 8001632:	2301      	movs	r3, #1
 8001634:	08cf      	lsrs	r7, r1, #3
 8001636:	e680      	b.n	800133a <__aeabi_fsub+0xf6>
 8001638:	2300      	movs	r3, #0
 800163a:	e67e      	b.n	800133a <__aeabi_fsub+0xf6>
 800163c:	2020      	movs	r0, #32
 800163e:	4665      	mov	r5, ip
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	4085      	lsls	r5, r0
 8001644:	4663      	mov	r3, ip
 8001646:	0028      	movs	r0, r5
 8001648:	40f3      	lsrs	r3, r6
 800164a:	1e45      	subs	r5, r0, #1
 800164c:	41a8      	sbcs	r0, r5
 800164e:	4303      	orrs	r3, r0
 8001650:	469c      	mov	ip, r3
 8001652:	0015      	movs	r5, r2
 8001654:	448c      	add	ip, r1
 8001656:	e76d      	b.n	8001534 <__aeabi_fsub+0x2f0>
 8001658:	2302      	movs	r3, #2
 800165a:	08cf      	lsrs	r7, r1, #3
 800165c:	e66d      	b.n	800133a <__aeabi_fsub+0xf6>
 800165e:	1b0f      	subs	r7, r1, r4
 8001660:	017b      	lsls	r3, r7, #5
 8001662:	d528      	bpl.n	80016b6 <__aeabi_fsub+0x472>
 8001664:	01bf      	lsls	r7, r7, #6
 8001666:	09bf      	lsrs	r7, r7, #6
 8001668:	0038      	movs	r0, r7
 800166a:	f002 f985 	bl	8003978 <__clzsi2>
 800166e:	003b      	movs	r3, r7
 8001670:	3805      	subs	r0, #5
 8001672:	4083      	lsls	r3, r0
 8001674:	0034      	movs	r4, r6
 8001676:	2501      	movs	r5, #1
 8001678:	e6ca      	b.n	8001410 <__aeabi_fsub+0x1cc>
 800167a:	2900      	cmp	r1, #0
 800167c:	d100      	bne.n	8001680 <__aeabi_fsub+0x43c>
 800167e:	e6b5      	b.n	80013ec <__aeabi_fsub+0x1a8>
 8001680:	2401      	movs	r4, #1
 8001682:	0007      	movs	r7, r0
 8001684:	4034      	ands	r4, r6
 8001686:	e658      	b.n	800133a <__aeabi_fsub+0xf6>
 8001688:	4663      	mov	r3, ip
 800168a:	2b00      	cmp	r3, #0
 800168c:	d100      	bne.n	8001690 <__aeabi_fsub+0x44c>
 800168e:	e6e9      	b.n	8001464 <__aeabi_fsub+0x220>
 8001690:	2900      	cmp	r1, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_fsub+0x452>
 8001694:	e6ea      	b.n	800146c <__aeabi_fsub+0x228>
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	03db      	lsls	r3, r3, #15
 800169a:	429f      	cmp	r7, r3
 800169c:	d200      	bcs.n	80016a0 <__aeabi_fsub+0x45c>
 800169e:	e6e5      	b.n	800146c <__aeabi_fsub+0x228>
 80016a0:	4298      	cmp	r0, r3
 80016a2:	d300      	bcc.n	80016a6 <__aeabi_fsub+0x462>
 80016a4:	e6e2      	b.n	800146c <__aeabi_fsub+0x228>
 80016a6:	0007      	movs	r7, r0
 80016a8:	e6e0      	b.n	800146c <__aeabi_fsub+0x228>
 80016aa:	2900      	cmp	r1, #0
 80016ac:	d100      	bne.n	80016b0 <__aeabi_fsub+0x46c>
 80016ae:	e69e      	b.n	80013ee <__aeabi_fsub+0x1aa>
 80016b0:	2300      	movs	r3, #0
 80016b2:	08cf      	lsrs	r7, r1, #3
 80016b4:	e641      	b.n	800133a <__aeabi_fsub+0xf6>
 80016b6:	0034      	movs	r4, r6
 80016b8:	2301      	movs	r3, #1
 80016ba:	08ff      	lsrs	r7, r7, #3
 80016bc:	e63d      	b.n	800133a <__aeabi_fsub+0xf6>
 80016be:	2f00      	cmp	r7, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x480>
 80016c2:	e693      	b.n	80013ec <__aeabi_fsub+0x1a8>
 80016c4:	2300      	movs	r3, #0
 80016c6:	08ff      	lsrs	r7, r7, #3
 80016c8:	e637      	b.n	800133a <__aeabi_fsub+0xf6>
 80016ca:	2300      	movs	r3, #0
 80016cc:	08d7      	lsrs	r7, r2, #3
 80016ce:	e634      	b.n	800133a <__aeabi_fsub+0xf6>
 80016d0:	2301      	movs	r3, #1
 80016d2:	08cf      	lsrs	r7, r1, #3
 80016d4:	e631      	b.n	800133a <__aeabi_fsub+0xf6>
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	000b      	movs	r3, r1
 80016da:	04d2      	lsls	r2, r2, #19
 80016dc:	2001      	movs	r0, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	4211      	tst	r1, r2
 80016e2:	d000      	beq.n	80016e6 <__aeabi_fsub+0x4a2>
 80016e4:	e6ae      	b.n	8001444 <__aeabi_fsub+0x200>
 80016e6:	08cf      	lsrs	r7, r1, #3
 80016e8:	e627      	b.n	800133a <__aeabi_fsub+0xf6>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <__aeabi_fsub+0x4ac>
 80016ee:	e75f      	b.n	80015b0 <__aeabi_fsub+0x36c>
 80016f0:	1b56      	subs	r6, r2, r5
 80016f2:	2d00      	cmp	r5, #0
 80016f4:	d101      	bne.n	80016fa <__aeabi_fsub+0x4b6>
 80016f6:	0033      	movs	r3, r6
 80016f8:	e6e7      	b.n	80014ca <__aeabi_fsub+0x286>
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	4660      	mov	r0, ip
 80016fe:	04db      	lsls	r3, r3, #19
 8001700:	4318      	orrs	r0, r3
 8001702:	4684      	mov	ip, r0
 8001704:	e6eb      	b.n	80014de <__aeabi_fsub+0x29a>
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	7dffffff 	.word	0x7dffffff

0800170c <__aeabi_fcmpun>:
 800170c:	0243      	lsls	r3, r0, #9
 800170e:	024a      	lsls	r2, r1, #9
 8001710:	0040      	lsls	r0, r0, #1
 8001712:	0049      	lsls	r1, r1, #1
 8001714:	0a5b      	lsrs	r3, r3, #9
 8001716:	0a52      	lsrs	r2, r2, #9
 8001718:	0e09      	lsrs	r1, r1, #24
 800171a:	0e00      	lsrs	r0, r0, #24
 800171c:	28ff      	cmp	r0, #255	@ 0xff
 800171e:	d006      	beq.n	800172e <__aeabi_fcmpun+0x22>
 8001720:	2000      	movs	r0, #0
 8001722:	29ff      	cmp	r1, #255	@ 0xff
 8001724:	d102      	bne.n	800172c <__aeabi_fcmpun+0x20>
 8001726:	1e53      	subs	r3, r2, #1
 8001728:	419a      	sbcs	r2, r3
 800172a:	0010      	movs	r0, r2
 800172c:	4770      	bx	lr
 800172e:	38fe      	subs	r0, #254	@ 0xfe
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1fb      	bne.n	800172c <__aeabi_fcmpun+0x20>
 8001734:	e7f4      	b.n	8001720 <__aeabi_fcmpun+0x14>
 8001736:	46c0      	nop			@ (mov r8, r8)

08001738 <__aeabi_f2iz>:
 8001738:	0241      	lsls	r1, r0, #9
 800173a:	0042      	lsls	r2, r0, #1
 800173c:	0fc3      	lsrs	r3, r0, #31
 800173e:	0a49      	lsrs	r1, r1, #9
 8001740:	2000      	movs	r0, #0
 8001742:	0e12      	lsrs	r2, r2, #24
 8001744:	2a7e      	cmp	r2, #126	@ 0x7e
 8001746:	dd03      	ble.n	8001750 <__aeabi_f2iz+0x18>
 8001748:	2a9d      	cmp	r2, #157	@ 0x9d
 800174a:	dd02      	ble.n	8001752 <__aeabi_f2iz+0x1a>
 800174c:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <__aeabi_f2iz+0x3c>)
 800174e:	1898      	adds	r0, r3, r2
 8001750:	4770      	bx	lr
 8001752:	2080      	movs	r0, #128	@ 0x80
 8001754:	0400      	lsls	r0, r0, #16
 8001756:	4301      	orrs	r1, r0
 8001758:	2a95      	cmp	r2, #149	@ 0x95
 800175a:	dc07      	bgt.n	800176c <__aeabi_f2iz+0x34>
 800175c:	2096      	movs	r0, #150	@ 0x96
 800175e:	1a82      	subs	r2, r0, r2
 8001760:	40d1      	lsrs	r1, r2
 8001762:	4248      	negs	r0, r1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f3      	bne.n	8001750 <__aeabi_f2iz+0x18>
 8001768:	0008      	movs	r0, r1
 800176a:	e7f1      	b.n	8001750 <__aeabi_f2iz+0x18>
 800176c:	3a96      	subs	r2, #150	@ 0x96
 800176e:	4091      	lsls	r1, r2
 8001770:	e7f7      	b.n	8001762 <__aeabi_f2iz+0x2a>
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	7fffffff 	.word	0x7fffffff

08001778 <__aeabi_i2f>:
 8001778:	b570      	push	{r4, r5, r6, lr}
 800177a:	2800      	cmp	r0, #0
 800177c:	d012      	beq.n	80017a4 <__aeabi_i2f+0x2c>
 800177e:	17c3      	asrs	r3, r0, #31
 8001780:	18c5      	adds	r5, r0, r3
 8001782:	405d      	eors	r5, r3
 8001784:	0fc4      	lsrs	r4, r0, #31
 8001786:	0028      	movs	r0, r5
 8001788:	f002 f8f6 	bl	8003978 <__clzsi2>
 800178c:	239e      	movs	r3, #158	@ 0x9e
 800178e:	1a1b      	subs	r3, r3, r0
 8001790:	2b96      	cmp	r3, #150	@ 0x96
 8001792:	dc0f      	bgt.n	80017b4 <__aeabi_i2f+0x3c>
 8001794:	2808      	cmp	r0, #8
 8001796:	d038      	beq.n	800180a <__aeabi_i2f+0x92>
 8001798:	3808      	subs	r0, #8
 800179a:	4085      	lsls	r5, r0
 800179c:	026d      	lsls	r5, r5, #9
 800179e:	0a6d      	lsrs	r5, r5, #9
 80017a0:	b2d8      	uxtb	r0, r3
 80017a2:	e002      	b.n	80017aa <__aeabi_i2f+0x32>
 80017a4:	2400      	movs	r4, #0
 80017a6:	2000      	movs	r0, #0
 80017a8:	2500      	movs	r5, #0
 80017aa:	05c0      	lsls	r0, r0, #23
 80017ac:	4328      	orrs	r0, r5
 80017ae:	07e4      	lsls	r4, r4, #31
 80017b0:	4320      	orrs	r0, r4
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
 80017b4:	2b99      	cmp	r3, #153	@ 0x99
 80017b6:	dc14      	bgt.n	80017e2 <__aeabi_i2f+0x6a>
 80017b8:	1f42      	subs	r2, r0, #5
 80017ba:	4095      	lsls	r5, r2
 80017bc:	002a      	movs	r2, r5
 80017be:	4915      	ldr	r1, [pc, #84]	@ (8001814 <__aeabi_i2f+0x9c>)
 80017c0:	4011      	ands	r1, r2
 80017c2:	0755      	lsls	r5, r2, #29
 80017c4:	d01c      	beq.n	8001800 <__aeabi_i2f+0x88>
 80017c6:	250f      	movs	r5, #15
 80017c8:	402a      	ands	r2, r5
 80017ca:	2a04      	cmp	r2, #4
 80017cc:	d018      	beq.n	8001800 <__aeabi_i2f+0x88>
 80017ce:	3104      	adds	r1, #4
 80017d0:	08ca      	lsrs	r2, r1, #3
 80017d2:	0149      	lsls	r1, r1, #5
 80017d4:	d515      	bpl.n	8001802 <__aeabi_i2f+0x8a>
 80017d6:	239f      	movs	r3, #159	@ 0x9f
 80017d8:	0252      	lsls	r2, r2, #9
 80017da:	1a18      	subs	r0, r3, r0
 80017dc:	0a55      	lsrs	r5, r2, #9
 80017de:	b2c0      	uxtb	r0, r0
 80017e0:	e7e3      	b.n	80017aa <__aeabi_i2f+0x32>
 80017e2:	2205      	movs	r2, #5
 80017e4:	0029      	movs	r1, r5
 80017e6:	1a12      	subs	r2, r2, r0
 80017e8:	40d1      	lsrs	r1, r2
 80017ea:	0002      	movs	r2, r0
 80017ec:	321b      	adds	r2, #27
 80017ee:	4095      	lsls	r5, r2
 80017f0:	002a      	movs	r2, r5
 80017f2:	1e55      	subs	r5, r2, #1
 80017f4:	41aa      	sbcs	r2, r5
 80017f6:	430a      	orrs	r2, r1
 80017f8:	4906      	ldr	r1, [pc, #24]	@ (8001814 <__aeabi_i2f+0x9c>)
 80017fa:	4011      	ands	r1, r2
 80017fc:	0755      	lsls	r5, r2, #29
 80017fe:	d1e2      	bne.n	80017c6 <__aeabi_i2f+0x4e>
 8001800:	08ca      	lsrs	r2, r1, #3
 8001802:	0252      	lsls	r2, r2, #9
 8001804:	0a55      	lsrs	r5, r2, #9
 8001806:	b2d8      	uxtb	r0, r3
 8001808:	e7cf      	b.n	80017aa <__aeabi_i2f+0x32>
 800180a:	026d      	lsls	r5, r5, #9
 800180c:	0a6d      	lsrs	r5, r5, #9
 800180e:	308e      	adds	r0, #142	@ 0x8e
 8001810:	e7cb      	b.n	80017aa <__aeabi_i2f+0x32>
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	fbffffff 	.word	0xfbffffff

08001818 <__aeabi_ui2f>:
 8001818:	b510      	push	{r4, lr}
 800181a:	1e04      	subs	r4, r0, #0
 800181c:	d00d      	beq.n	800183a <__aeabi_ui2f+0x22>
 800181e:	f002 f8ab 	bl	8003978 <__clzsi2>
 8001822:	239e      	movs	r3, #158	@ 0x9e
 8001824:	1a1b      	subs	r3, r3, r0
 8001826:	2b96      	cmp	r3, #150	@ 0x96
 8001828:	dc0c      	bgt.n	8001844 <__aeabi_ui2f+0x2c>
 800182a:	2808      	cmp	r0, #8
 800182c:	d034      	beq.n	8001898 <__aeabi_ui2f+0x80>
 800182e:	3808      	subs	r0, #8
 8001830:	4084      	lsls	r4, r0
 8001832:	0264      	lsls	r4, r4, #9
 8001834:	0a64      	lsrs	r4, r4, #9
 8001836:	b2d8      	uxtb	r0, r3
 8001838:	e001      	b.n	800183e <__aeabi_ui2f+0x26>
 800183a:	2000      	movs	r0, #0
 800183c:	2400      	movs	r4, #0
 800183e:	05c0      	lsls	r0, r0, #23
 8001840:	4320      	orrs	r0, r4
 8001842:	bd10      	pop	{r4, pc}
 8001844:	2b99      	cmp	r3, #153	@ 0x99
 8001846:	dc13      	bgt.n	8001870 <__aeabi_ui2f+0x58>
 8001848:	1f42      	subs	r2, r0, #5
 800184a:	4094      	lsls	r4, r2
 800184c:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <__aeabi_ui2f+0x88>)
 800184e:	4022      	ands	r2, r4
 8001850:	0761      	lsls	r1, r4, #29
 8001852:	d01c      	beq.n	800188e <__aeabi_ui2f+0x76>
 8001854:	210f      	movs	r1, #15
 8001856:	4021      	ands	r1, r4
 8001858:	2904      	cmp	r1, #4
 800185a:	d018      	beq.n	800188e <__aeabi_ui2f+0x76>
 800185c:	3204      	adds	r2, #4
 800185e:	08d4      	lsrs	r4, r2, #3
 8001860:	0152      	lsls	r2, r2, #5
 8001862:	d515      	bpl.n	8001890 <__aeabi_ui2f+0x78>
 8001864:	239f      	movs	r3, #159	@ 0x9f
 8001866:	0264      	lsls	r4, r4, #9
 8001868:	1a18      	subs	r0, r3, r0
 800186a:	0a64      	lsrs	r4, r4, #9
 800186c:	b2c0      	uxtb	r0, r0
 800186e:	e7e6      	b.n	800183e <__aeabi_ui2f+0x26>
 8001870:	0002      	movs	r2, r0
 8001872:	0021      	movs	r1, r4
 8001874:	321b      	adds	r2, #27
 8001876:	4091      	lsls	r1, r2
 8001878:	000a      	movs	r2, r1
 800187a:	1e51      	subs	r1, r2, #1
 800187c:	418a      	sbcs	r2, r1
 800187e:	2105      	movs	r1, #5
 8001880:	1a09      	subs	r1, r1, r0
 8001882:	40cc      	lsrs	r4, r1
 8001884:	4314      	orrs	r4, r2
 8001886:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <__aeabi_ui2f+0x88>)
 8001888:	4022      	ands	r2, r4
 800188a:	0761      	lsls	r1, r4, #29
 800188c:	d1e2      	bne.n	8001854 <__aeabi_ui2f+0x3c>
 800188e:	08d4      	lsrs	r4, r2, #3
 8001890:	0264      	lsls	r4, r4, #9
 8001892:	0a64      	lsrs	r4, r4, #9
 8001894:	b2d8      	uxtb	r0, r3
 8001896:	e7d2      	b.n	800183e <__aeabi_ui2f+0x26>
 8001898:	0264      	lsls	r4, r4, #9
 800189a:	0a64      	lsrs	r4, r4, #9
 800189c:	308e      	adds	r0, #142	@ 0x8e
 800189e:	e7ce      	b.n	800183e <__aeabi_ui2f+0x26>
 80018a0:	fbffffff 	.word	0xfbffffff

080018a4 <__aeabi_dadd>:
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	464f      	mov	r7, r9
 80018a8:	4646      	mov	r6, r8
 80018aa:	46d6      	mov	lr, sl
 80018ac:	b5c0      	push	{r6, r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	9000      	str	r0, [sp, #0]
 80018b2:	9101      	str	r1, [sp, #4]
 80018b4:	030e      	lsls	r6, r1, #12
 80018b6:	004c      	lsls	r4, r1, #1
 80018b8:	0fcd      	lsrs	r5, r1, #31
 80018ba:	0a71      	lsrs	r1, r6, #9
 80018bc:	9e00      	ldr	r6, [sp, #0]
 80018be:	005f      	lsls	r7, r3, #1
 80018c0:	0f76      	lsrs	r6, r6, #29
 80018c2:	430e      	orrs	r6, r1
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	9200      	str	r2, [sp, #0]
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	00c9      	lsls	r1, r1, #3
 80018cc:	4689      	mov	r9, r1
 80018ce:	0319      	lsls	r1, r3, #12
 80018d0:	0d7b      	lsrs	r3, r7, #21
 80018d2:	4698      	mov	r8, r3
 80018d4:	9b01      	ldr	r3, [sp, #4]
 80018d6:	0a49      	lsrs	r1, r1, #9
 80018d8:	0fdb      	lsrs	r3, r3, #31
 80018da:	469c      	mov	ip, r3
 80018dc:	9b00      	ldr	r3, [sp, #0]
 80018de:	9a00      	ldr	r2, [sp, #0]
 80018e0:	0f5b      	lsrs	r3, r3, #29
 80018e2:	430b      	orrs	r3, r1
 80018e4:	4641      	mov	r1, r8
 80018e6:	0d64      	lsrs	r4, r4, #21
 80018e8:	00d2      	lsls	r2, r2, #3
 80018ea:	1a61      	subs	r1, r4, r1
 80018ec:	4565      	cmp	r5, ip
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dadd+0x4e>
 80018f0:	e0a6      	b.n	8001a40 <__aeabi_dadd+0x19c>
 80018f2:	2900      	cmp	r1, #0
 80018f4:	dd72      	ble.n	80019dc <__aeabi_dadd+0x138>
 80018f6:	4647      	mov	r7, r8
 80018f8:	2f00      	cmp	r7, #0
 80018fa:	d100      	bne.n	80018fe <__aeabi_dadd+0x5a>
 80018fc:	e0dd      	b.n	8001aba <__aeabi_dadd+0x216>
 80018fe:	4fcc      	ldr	r7, [pc, #816]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001900:	42bc      	cmp	r4, r7
 8001902:	d100      	bne.n	8001906 <__aeabi_dadd+0x62>
 8001904:	e19a      	b.n	8001c3c <__aeabi_dadd+0x398>
 8001906:	2701      	movs	r7, #1
 8001908:	2938      	cmp	r1, #56	@ 0x38
 800190a:	dc17      	bgt.n	800193c <__aeabi_dadd+0x98>
 800190c:	2780      	movs	r7, #128	@ 0x80
 800190e:	043f      	lsls	r7, r7, #16
 8001910:	433b      	orrs	r3, r7
 8001912:	291f      	cmp	r1, #31
 8001914:	dd00      	ble.n	8001918 <__aeabi_dadd+0x74>
 8001916:	e1dd      	b.n	8001cd4 <__aeabi_dadd+0x430>
 8001918:	2720      	movs	r7, #32
 800191a:	1a78      	subs	r0, r7, r1
 800191c:	001f      	movs	r7, r3
 800191e:	4087      	lsls	r7, r0
 8001920:	46ba      	mov	sl, r7
 8001922:	0017      	movs	r7, r2
 8001924:	40cf      	lsrs	r7, r1
 8001926:	4684      	mov	ip, r0
 8001928:	0038      	movs	r0, r7
 800192a:	4657      	mov	r7, sl
 800192c:	4307      	orrs	r7, r0
 800192e:	4660      	mov	r0, ip
 8001930:	4082      	lsls	r2, r0
 8001932:	40cb      	lsrs	r3, r1
 8001934:	1e50      	subs	r0, r2, #1
 8001936:	4182      	sbcs	r2, r0
 8001938:	1af6      	subs	r6, r6, r3
 800193a:	4317      	orrs	r7, r2
 800193c:	464b      	mov	r3, r9
 800193e:	1bdf      	subs	r7, r3, r7
 8001940:	45b9      	cmp	r9, r7
 8001942:	4180      	sbcs	r0, r0
 8001944:	4240      	negs	r0, r0
 8001946:	1a36      	subs	r6, r6, r0
 8001948:	0233      	lsls	r3, r6, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dadd+0xaa>
 800194c:	e0ff      	b.n	8001b4e <__aeabi_dadd+0x2aa>
 800194e:	0276      	lsls	r6, r6, #9
 8001950:	0a76      	lsrs	r6, r6, #9
 8001952:	2e00      	cmp	r6, #0
 8001954:	d100      	bne.n	8001958 <__aeabi_dadd+0xb4>
 8001956:	e13c      	b.n	8001bd2 <__aeabi_dadd+0x32e>
 8001958:	0030      	movs	r0, r6
 800195a:	f002 f80d 	bl	8003978 <__clzsi2>
 800195e:	0003      	movs	r3, r0
 8001960:	3b08      	subs	r3, #8
 8001962:	2120      	movs	r1, #32
 8001964:	0038      	movs	r0, r7
 8001966:	1aca      	subs	r2, r1, r3
 8001968:	40d0      	lsrs	r0, r2
 800196a:	409e      	lsls	r6, r3
 800196c:	0002      	movs	r2, r0
 800196e:	409f      	lsls	r7, r3
 8001970:	4332      	orrs	r2, r6
 8001972:	429c      	cmp	r4, r3
 8001974:	dd00      	ble.n	8001978 <__aeabi_dadd+0xd4>
 8001976:	e1a6      	b.n	8001cc6 <__aeabi_dadd+0x422>
 8001978:	1b18      	subs	r0, r3, r4
 800197a:	3001      	adds	r0, #1
 800197c:	1a09      	subs	r1, r1, r0
 800197e:	003e      	movs	r6, r7
 8001980:	408f      	lsls	r7, r1
 8001982:	40c6      	lsrs	r6, r0
 8001984:	1e7b      	subs	r3, r7, #1
 8001986:	419f      	sbcs	r7, r3
 8001988:	0013      	movs	r3, r2
 800198a:	408b      	lsls	r3, r1
 800198c:	4337      	orrs	r7, r6
 800198e:	431f      	orrs	r7, r3
 8001990:	40c2      	lsrs	r2, r0
 8001992:	003b      	movs	r3, r7
 8001994:	0016      	movs	r6, r2
 8001996:	2400      	movs	r4, #0
 8001998:	4313      	orrs	r3, r2
 800199a:	d100      	bne.n	800199e <__aeabi_dadd+0xfa>
 800199c:	e1df      	b.n	8001d5e <__aeabi_dadd+0x4ba>
 800199e:	077b      	lsls	r3, r7, #29
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dadd+0x100>
 80019a2:	e332      	b.n	800200a <__aeabi_dadd+0x766>
 80019a4:	230f      	movs	r3, #15
 80019a6:	003a      	movs	r2, r7
 80019a8:	403b      	ands	r3, r7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d004      	beq.n	80019b8 <__aeabi_dadd+0x114>
 80019ae:	1d3a      	adds	r2, r7, #4
 80019b0:	42ba      	cmp	r2, r7
 80019b2:	41bf      	sbcs	r7, r7
 80019b4:	427f      	negs	r7, r7
 80019b6:	19f6      	adds	r6, r6, r7
 80019b8:	0233      	lsls	r3, r6, #8
 80019ba:	d400      	bmi.n	80019be <__aeabi_dadd+0x11a>
 80019bc:	e323      	b.n	8002006 <__aeabi_dadd+0x762>
 80019be:	4b9c      	ldr	r3, [pc, #624]	@ (8001c30 <__aeabi_dadd+0x38c>)
 80019c0:	3401      	adds	r4, #1
 80019c2:	429c      	cmp	r4, r3
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x124>
 80019c6:	e0b4      	b.n	8001b32 <__aeabi_dadd+0x28e>
 80019c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001c34 <__aeabi_dadd+0x390>)
 80019ca:	0564      	lsls	r4, r4, #21
 80019cc:	401e      	ands	r6, r3
 80019ce:	0d64      	lsrs	r4, r4, #21
 80019d0:	0777      	lsls	r7, r6, #29
 80019d2:	08d2      	lsrs	r2, r2, #3
 80019d4:	0276      	lsls	r6, r6, #9
 80019d6:	4317      	orrs	r7, r2
 80019d8:	0b36      	lsrs	r6, r6, #12
 80019da:	e0ac      	b.n	8001b36 <__aeabi_dadd+0x292>
 80019dc:	2900      	cmp	r1, #0
 80019de:	d100      	bne.n	80019e2 <__aeabi_dadd+0x13e>
 80019e0:	e07e      	b.n	8001ae0 <__aeabi_dadd+0x23c>
 80019e2:	4641      	mov	r1, r8
 80019e4:	1b09      	subs	r1, r1, r4
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d000      	beq.n	80019ec <__aeabi_dadd+0x148>
 80019ea:	e160      	b.n	8001cae <__aeabi_dadd+0x40a>
 80019ec:	0034      	movs	r4, r6
 80019ee:	4648      	mov	r0, r9
 80019f0:	4304      	orrs	r4, r0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dadd+0x152>
 80019f4:	e1c9      	b.n	8001d8a <__aeabi_dadd+0x4e6>
 80019f6:	1e4c      	subs	r4, r1, #1
 80019f8:	2901      	cmp	r1, #1
 80019fa:	d100      	bne.n	80019fe <__aeabi_dadd+0x15a>
 80019fc:	e22e      	b.n	8001e5c <__aeabi_dadd+0x5b8>
 80019fe:	4d8c      	ldr	r5, [pc, #560]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001a00:	42a9      	cmp	r1, r5
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dadd+0x162>
 8001a04:	e224      	b.n	8001e50 <__aeabi_dadd+0x5ac>
 8001a06:	2701      	movs	r7, #1
 8001a08:	2c38      	cmp	r4, #56	@ 0x38
 8001a0a:	dc11      	bgt.n	8001a30 <__aeabi_dadd+0x18c>
 8001a0c:	0021      	movs	r1, r4
 8001a0e:	291f      	cmp	r1, #31
 8001a10:	dd00      	ble.n	8001a14 <__aeabi_dadd+0x170>
 8001a12:	e20b      	b.n	8001e2c <__aeabi_dadd+0x588>
 8001a14:	2420      	movs	r4, #32
 8001a16:	0037      	movs	r7, r6
 8001a18:	4648      	mov	r0, r9
 8001a1a:	1a64      	subs	r4, r4, r1
 8001a1c:	40a7      	lsls	r7, r4
 8001a1e:	40c8      	lsrs	r0, r1
 8001a20:	4307      	orrs	r7, r0
 8001a22:	4648      	mov	r0, r9
 8001a24:	40a0      	lsls	r0, r4
 8001a26:	40ce      	lsrs	r6, r1
 8001a28:	1e44      	subs	r4, r0, #1
 8001a2a:	41a0      	sbcs	r0, r4
 8001a2c:	1b9b      	subs	r3, r3, r6
 8001a2e:	4307      	orrs	r7, r0
 8001a30:	1bd7      	subs	r7, r2, r7
 8001a32:	42ba      	cmp	r2, r7
 8001a34:	4192      	sbcs	r2, r2
 8001a36:	4252      	negs	r2, r2
 8001a38:	4665      	mov	r5, ip
 8001a3a:	4644      	mov	r4, r8
 8001a3c:	1a9e      	subs	r6, r3, r2
 8001a3e:	e783      	b.n	8001948 <__aeabi_dadd+0xa4>
 8001a40:	2900      	cmp	r1, #0
 8001a42:	dc00      	bgt.n	8001a46 <__aeabi_dadd+0x1a2>
 8001a44:	e09c      	b.n	8001b80 <__aeabi_dadd+0x2dc>
 8001a46:	4647      	mov	r7, r8
 8001a48:	2f00      	cmp	r7, #0
 8001a4a:	d167      	bne.n	8001b1c <__aeabi_dadd+0x278>
 8001a4c:	001f      	movs	r7, r3
 8001a4e:	4317      	orrs	r7, r2
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x1b0>
 8001a52:	e0e4      	b.n	8001c1e <__aeabi_dadd+0x37a>
 8001a54:	1e48      	subs	r0, r1, #1
 8001a56:	2901      	cmp	r1, #1
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dadd+0x1b8>
 8001a5a:	e19b      	b.n	8001d94 <__aeabi_dadd+0x4f0>
 8001a5c:	4f74      	ldr	r7, [pc, #464]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001a5e:	42b9      	cmp	r1, r7
 8001a60:	d100      	bne.n	8001a64 <__aeabi_dadd+0x1c0>
 8001a62:	e0eb      	b.n	8001c3c <__aeabi_dadd+0x398>
 8001a64:	2701      	movs	r7, #1
 8001a66:	0001      	movs	r1, r0
 8001a68:	2838      	cmp	r0, #56	@ 0x38
 8001a6a:	dc11      	bgt.n	8001a90 <__aeabi_dadd+0x1ec>
 8001a6c:	291f      	cmp	r1, #31
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dadd+0x1ce>
 8001a70:	e1c7      	b.n	8001e02 <__aeabi_dadd+0x55e>
 8001a72:	2720      	movs	r7, #32
 8001a74:	1a78      	subs	r0, r7, r1
 8001a76:	001f      	movs	r7, r3
 8001a78:	4684      	mov	ip, r0
 8001a7a:	4087      	lsls	r7, r0
 8001a7c:	0010      	movs	r0, r2
 8001a7e:	40c8      	lsrs	r0, r1
 8001a80:	4307      	orrs	r7, r0
 8001a82:	4660      	mov	r0, ip
 8001a84:	4082      	lsls	r2, r0
 8001a86:	40cb      	lsrs	r3, r1
 8001a88:	1e50      	subs	r0, r2, #1
 8001a8a:	4182      	sbcs	r2, r0
 8001a8c:	18f6      	adds	r6, r6, r3
 8001a8e:	4317      	orrs	r7, r2
 8001a90:	444f      	add	r7, r9
 8001a92:	454f      	cmp	r7, r9
 8001a94:	4180      	sbcs	r0, r0
 8001a96:	4240      	negs	r0, r0
 8001a98:	1836      	adds	r6, r6, r0
 8001a9a:	0233      	lsls	r3, r6, #8
 8001a9c:	d557      	bpl.n	8001b4e <__aeabi_dadd+0x2aa>
 8001a9e:	4b64      	ldr	r3, [pc, #400]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001aa0:	3401      	adds	r4, #1
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	d045      	beq.n	8001b32 <__aeabi_dadd+0x28e>
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4b62      	ldr	r3, [pc, #392]	@ (8001c34 <__aeabi_dadd+0x390>)
 8001aaa:	087a      	lsrs	r2, r7, #1
 8001aac:	401e      	ands	r6, r3
 8001aae:	4039      	ands	r1, r7
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	07f7      	lsls	r7, r6, #31
 8001ab4:	4317      	orrs	r7, r2
 8001ab6:	0876      	lsrs	r6, r6, #1
 8001ab8:	e771      	b.n	800199e <__aeabi_dadd+0xfa>
 8001aba:	001f      	movs	r7, r3
 8001abc:	4317      	orrs	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dadd+0x21e>
 8001ac0:	e0ad      	b.n	8001c1e <__aeabi_dadd+0x37a>
 8001ac2:	1e4f      	subs	r7, r1, #1
 8001ac4:	46bc      	mov	ip, r7
 8001ac6:	2901      	cmp	r1, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dadd+0x228>
 8001aca:	e182      	b.n	8001dd2 <__aeabi_dadd+0x52e>
 8001acc:	4f58      	ldr	r7, [pc, #352]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001ace:	42b9      	cmp	r1, r7
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x230>
 8001ad2:	e190      	b.n	8001df6 <__aeabi_dadd+0x552>
 8001ad4:	4661      	mov	r1, ip
 8001ad6:	2701      	movs	r7, #1
 8001ad8:	2938      	cmp	r1, #56	@ 0x38
 8001ada:	dd00      	ble.n	8001ade <__aeabi_dadd+0x23a>
 8001adc:	e72e      	b.n	800193c <__aeabi_dadd+0x98>
 8001ade:	e718      	b.n	8001912 <__aeabi_dadd+0x6e>
 8001ae0:	4f55      	ldr	r7, [pc, #340]	@ (8001c38 <__aeabi_dadd+0x394>)
 8001ae2:	1c61      	adds	r1, r4, #1
 8001ae4:	4239      	tst	r1, r7
 8001ae6:	d000      	beq.n	8001aea <__aeabi_dadd+0x246>
 8001ae8:	e0d0      	b.n	8001c8c <__aeabi_dadd+0x3e8>
 8001aea:	0031      	movs	r1, r6
 8001aec:	4648      	mov	r0, r9
 8001aee:	001f      	movs	r7, r3
 8001af0:	4301      	orrs	r1, r0
 8001af2:	4317      	orrs	r7, r2
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dadd+0x256>
 8001af8:	e13d      	b.n	8001d76 <__aeabi_dadd+0x4d2>
 8001afa:	2900      	cmp	r1, #0
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dadd+0x25c>
 8001afe:	e1bc      	b.n	8001e7a <__aeabi_dadd+0x5d6>
 8001b00:	2f00      	cmp	r7, #0
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dadd+0x262>
 8001b04:	e1bf      	b.n	8001e86 <__aeabi_dadd+0x5e2>
 8001b06:	464b      	mov	r3, r9
 8001b08:	2100      	movs	r1, #0
 8001b0a:	08d8      	lsrs	r0, r3, #3
 8001b0c:	0777      	lsls	r7, r6, #29
 8001b0e:	4307      	orrs	r7, r0
 8001b10:	08f0      	lsrs	r0, r6, #3
 8001b12:	0306      	lsls	r6, r0, #12
 8001b14:	054c      	lsls	r4, r1, #21
 8001b16:	0b36      	lsrs	r6, r6, #12
 8001b18:	0d64      	lsrs	r4, r4, #21
 8001b1a:	e00c      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001b1c:	4f44      	ldr	r7, [pc, #272]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001b1e:	42bc      	cmp	r4, r7
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dadd+0x280>
 8001b22:	e08b      	b.n	8001c3c <__aeabi_dadd+0x398>
 8001b24:	2701      	movs	r7, #1
 8001b26:	2938      	cmp	r1, #56	@ 0x38
 8001b28:	dcb2      	bgt.n	8001a90 <__aeabi_dadd+0x1ec>
 8001b2a:	2780      	movs	r7, #128	@ 0x80
 8001b2c:	043f      	lsls	r7, r7, #16
 8001b2e:	433b      	orrs	r3, r7
 8001b30:	e79c      	b.n	8001a6c <__aeabi_dadd+0x1c8>
 8001b32:	2600      	movs	r6, #0
 8001b34:	2700      	movs	r7, #0
 8001b36:	0524      	lsls	r4, r4, #20
 8001b38:	4334      	orrs	r4, r6
 8001b3a:	07ed      	lsls	r5, r5, #31
 8001b3c:	432c      	orrs	r4, r5
 8001b3e:	0038      	movs	r0, r7
 8001b40:	0021      	movs	r1, r4
 8001b42:	b002      	add	sp, #8
 8001b44:	bce0      	pop	{r5, r6, r7}
 8001b46:	46ba      	mov	sl, r7
 8001b48:	46b1      	mov	r9, r6
 8001b4a:	46a8      	mov	r8, r5
 8001b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4e:	077b      	lsls	r3, r7, #29
 8001b50:	d004      	beq.n	8001b5c <__aeabi_dadd+0x2b8>
 8001b52:	230f      	movs	r3, #15
 8001b54:	403b      	ands	r3, r7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dadd+0x2b8>
 8001b5a:	e728      	b.n	80019ae <__aeabi_dadd+0x10a>
 8001b5c:	08f8      	lsrs	r0, r7, #3
 8001b5e:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001b60:	0777      	lsls	r7, r6, #29
 8001b62:	4307      	orrs	r7, r0
 8001b64:	08f0      	lsrs	r0, r6, #3
 8001b66:	429c      	cmp	r4, r3
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dadd+0x2c8>
 8001b6a:	e24a      	b.n	8002002 <__aeabi_dadd+0x75e>
 8001b6c:	003b      	movs	r3, r7
 8001b6e:	4303      	orrs	r3, r0
 8001b70:	d059      	beq.n	8001c26 <__aeabi_dadd+0x382>
 8001b72:	2680      	movs	r6, #128	@ 0x80
 8001b74:	0336      	lsls	r6, r6, #12
 8001b76:	4306      	orrs	r6, r0
 8001b78:	0336      	lsls	r6, r6, #12
 8001b7a:	4c2d      	ldr	r4, [pc, #180]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001b7c:	0b36      	lsrs	r6, r6, #12
 8001b7e:	e7da      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001b80:	2900      	cmp	r1, #0
 8001b82:	d061      	beq.n	8001c48 <__aeabi_dadd+0x3a4>
 8001b84:	4641      	mov	r1, r8
 8001b86:	1b09      	subs	r1, r1, r4
 8001b88:	2c00      	cmp	r4, #0
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_dadd+0x2ea>
 8001b8c:	e0b9      	b.n	8001d02 <__aeabi_dadd+0x45e>
 8001b8e:	4c28      	ldr	r4, [pc, #160]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001b90:	45a0      	cmp	r8, r4
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dadd+0x2f2>
 8001b94:	e1a5      	b.n	8001ee2 <__aeabi_dadd+0x63e>
 8001b96:	2701      	movs	r7, #1
 8001b98:	2938      	cmp	r1, #56	@ 0x38
 8001b9a:	dc13      	bgt.n	8001bc4 <__aeabi_dadd+0x320>
 8001b9c:	2480      	movs	r4, #128	@ 0x80
 8001b9e:	0424      	lsls	r4, r4, #16
 8001ba0:	4326      	orrs	r6, r4
 8001ba2:	291f      	cmp	r1, #31
 8001ba4:	dd00      	ble.n	8001ba8 <__aeabi_dadd+0x304>
 8001ba6:	e1c8      	b.n	8001f3a <__aeabi_dadd+0x696>
 8001ba8:	2420      	movs	r4, #32
 8001baa:	0037      	movs	r7, r6
 8001bac:	4648      	mov	r0, r9
 8001bae:	1a64      	subs	r4, r4, r1
 8001bb0:	40a7      	lsls	r7, r4
 8001bb2:	40c8      	lsrs	r0, r1
 8001bb4:	4307      	orrs	r7, r0
 8001bb6:	4648      	mov	r0, r9
 8001bb8:	40a0      	lsls	r0, r4
 8001bba:	40ce      	lsrs	r6, r1
 8001bbc:	1e44      	subs	r4, r0, #1
 8001bbe:	41a0      	sbcs	r0, r4
 8001bc0:	199b      	adds	r3, r3, r6
 8001bc2:	4307      	orrs	r7, r0
 8001bc4:	18bf      	adds	r7, r7, r2
 8001bc6:	4297      	cmp	r7, r2
 8001bc8:	4192      	sbcs	r2, r2
 8001bca:	4252      	negs	r2, r2
 8001bcc:	4644      	mov	r4, r8
 8001bce:	18d6      	adds	r6, r2, r3
 8001bd0:	e763      	b.n	8001a9a <__aeabi_dadd+0x1f6>
 8001bd2:	0038      	movs	r0, r7
 8001bd4:	f001 fed0 	bl	8003978 <__clzsi2>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	3318      	adds	r3, #24
 8001bdc:	2b1f      	cmp	r3, #31
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_dadd+0x33e>
 8001be0:	e6bf      	b.n	8001962 <__aeabi_dadd+0xbe>
 8001be2:	003a      	movs	r2, r7
 8001be4:	3808      	subs	r0, #8
 8001be6:	4082      	lsls	r2, r0
 8001be8:	429c      	cmp	r4, r3
 8001bea:	dd00      	ble.n	8001bee <__aeabi_dadd+0x34a>
 8001bec:	e083      	b.n	8001cf6 <__aeabi_dadd+0x452>
 8001bee:	1b1b      	subs	r3, r3, r4
 8001bf0:	1c58      	adds	r0, r3, #1
 8001bf2:	281f      	cmp	r0, #31
 8001bf4:	dc00      	bgt.n	8001bf8 <__aeabi_dadd+0x354>
 8001bf6:	e1b4      	b.n	8001f62 <__aeabi_dadd+0x6be>
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	3b1f      	subs	r3, #31
 8001bfc:	40df      	lsrs	r7, r3
 8001bfe:	2820      	cmp	r0, #32
 8001c00:	d005      	beq.n	8001c0e <__aeabi_dadd+0x36a>
 8001c02:	2340      	movs	r3, #64	@ 0x40
 8001c04:	1a1b      	subs	r3, r3, r0
 8001c06:	409a      	lsls	r2, r3
 8001c08:	1e53      	subs	r3, r2, #1
 8001c0a:	419a      	sbcs	r2, r3
 8001c0c:	4317      	orrs	r7, r2
 8001c0e:	2400      	movs	r4, #0
 8001c10:	2f00      	cmp	r7, #0
 8001c12:	d00a      	beq.n	8001c2a <__aeabi_dadd+0x386>
 8001c14:	077b      	lsls	r3, r7, #29
 8001c16:	d000      	beq.n	8001c1a <__aeabi_dadd+0x376>
 8001c18:	e6c4      	b.n	80019a4 <__aeabi_dadd+0x100>
 8001c1a:	0026      	movs	r6, r4
 8001c1c:	e79e      	b.n	8001b5c <__aeabi_dadd+0x2b8>
 8001c1e:	464b      	mov	r3, r9
 8001c20:	000c      	movs	r4, r1
 8001c22:	08d8      	lsrs	r0, r3, #3
 8001c24:	e79b      	b.n	8001b5e <__aeabi_dadd+0x2ba>
 8001c26:	2700      	movs	r7, #0
 8001c28:	4c01      	ldr	r4, [pc, #4]	@ (8001c30 <__aeabi_dadd+0x38c>)
 8001c2a:	2600      	movs	r6, #0
 8001c2c:	e783      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	000007ff 	.word	0x000007ff
 8001c34:	ff7fffff 	.word	0xff7fffff
 8001c38:	000007fe 	.word	0x000007fe
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	0777      	lsls	r7, r6, #29
 8001c40:	08d8      	lsrs	r0, r3, #3
 8001c42:	4307      	orrs	r7, r0
 8001c44:	08f0      	lsrs	r0, r6, #3
 8001c46:	e791      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001c48:	4fcd      	ldr	r7, [pc, #820]	@ (8001f80 <__aeabi_dadd+0x6dc>)
 8001c4a:	1c61      	adds	r1, r4, #1
 8001c4c:	4239      	tst	r1, r7
 8001c4e:	d16b      	bne.n	8001d28 <__aeabi_dadd+0x484>
 8001c50:	0031      	movs	r1, r6
 8001c52:	4648      	mov	r0, r9
 8001c54:	4301      	orrs	r1, r0
 8001c56:	2c00      	cmp	r4, #0
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dadd+0x3b8>
 8001c5a:	e14b      	b.n	8001ef4 <__aeabi_dadd+0x650>
 8001c5c:	001f      	movs	r7, r3
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	2900      	cmp	r1, #0
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dadd+0x3c2>
 8001c64:	e181      	b.n	8001f6a <__aeabi_dadd+0x6c6>
 8001c66:	2f00      	cmp	r7, #0
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dadd+0x3c8>
 8001c6a:	e74c      	b.n	8001b06 <__aeabi_dadd+0x262>
 8001c6c:	444a      	add	r2, r9
 8001c6e:	454a      	cmp	r2, r9
 8001c70:	4180      	sbcs	r0, r0
 8001c72:	18f6      	adds	r6, r6, r3
 8001c74:	4240      	negs	r0, r0
 8001c76:	1836      	adds	r6, r6, r0
 8001c78:	0233      	lsls	r3, r6, #8
 8001c7a:	d500      	bpl.n	8001c7e <__aeabi_dadd+0x3da>
 8001c7c:	e1b0      	b.n	8001fe0 <__aeabi_dadd+0x73c>
 8001c7e:	0017      	movs	r7, r2
 8001c80:	4691      	mov	r9, r2
 8001c82:	4337      	orrs	r7, r6
 8001c84:	d000      	beq.n	8001c88 <__aeabi_dadd+0x3e4>
 8001c86:	e73e      	b.n	8001b06 <__aeabi_dadd+0x262>
 8001c88:	2600      	movs	r6, #0
 8001c8a:	e754      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001c8c:	4649      	mov	r1, r9
 8001c8e:	1a89      	subs	r1, r1, r2
 8001c90:	4688      	mov	r8, r1
 8001c92:	45c1      	cmp	r9, r8
 8001c94:	41bf      	sbcs	r7, r7
 8001c96:	1af1      	subs	r1, r6, r3
 8001c98:	427f      	negs	r7, r7
 8001c9a:	1bc9      	subs	r1, r1, r7
 8001c9c:	020f      	lsls	r7, r1, #8
 8001c9e:	d461      	bmi.n	8001d64 <__aeabi_dadd+0x4c0>
 8001ca0:	4647      	mov	r7, r8
 8001ca2:	430f      	orrs	r7, r1
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dadd+0x404>
 8001ca6:	e0bd      	b.n	8001e24 <__aeabi_dadd+0x580>
 8001ca8:	000e      	movs	r6, r1
 8001caa:	4647      	mov	r7, r8
 8001cac:	e651      	b.n	8001952 <__aeabi_dadd+0xae>
 8001cae:	4cb5      	ldr	r4, [pc, #724]	@ (8001f84 <__aeabi_dadd+0x6e0>)
 8001cb0:	45a0      	cmp	r8, r4
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dadd+0x412>
 8001cb4:	e100      	b.n	8001eb8 <__aeabi_dadd+0x614>
 8001cb6:	2701      	movs	r7, #1
 8001cb8:	2938      	cmp	r1, #56	@ 0x38
 8001cba:	dd00      	ble.n	8001cbe <__aeabi_dadd+0x41a>
 8001cbc:	e6b8      	b.n	8001a30 <__aeabi_dadd+0x18c>
 8001cbe:	2480      	movs	r4, #128	@ 0x80
 8001cc0:	0424      	lsls	r4, r4, #16
 8001cc2:	4326      	orrs	r6, r4
 8001cc4:	e6a3      	b.n	8001a0e <__aeabi_dadd+0x16a>
 8001cc6:	4eb0      	ldr	r6, [pc, #704]	@ (8001f88 <__aeabi_dadd+0x6e4>)
 8001cc8:	1ae4      	subs	r4, r4, r3
 8001cca:	4016      	ands	r6, r2
 8001ccc:	077b      	lsls	r3, r7, #29
 8001cce:	d000      	beq.n	8001cd2 <__aeabi_dadd+0x42e>
 8001cd0:	e73f      	b.n	8001b52 <__aeabi_dadd+0x2ae>
 8001cd2:	e743      	b.n	8001b5c <__aeabi_dadd+0x2b8>
 8001cd4:	000f      	movs	r7, r1
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	3f20      	subs	r7, #32
 8001cda:	40f8      	lsrs	r0, r7
 8001cdc:	4684      	mov	ip, r0
 8001cde:	2920      	cmp	r1, #32
 8001ce0:	d003      	beq.n	8001cea <__aeabi_dadd+0x446>
 8001ce2:	2740      	movs	r7, #64	@ 0x40
 8001ce4:	1a79      	subs	r1, r7, r1
 8001ce6:	408b      	lsls	r3, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	1e53      	subs	r3, r2, #1
 8001cec:	419a      	sbcs	r2, r3
 8001cee:	4663      	mov	r3, ip
 8001cf0:	0017      	movs	r7, r2
 8001cf2:	431f      	orrs	r7, r3
 8001cf4:	e622      	b.n	800193c <__aeabi_dadd+0x98>
 8001cf6:	48a4      	ldr	r0, [pc, #656]	@ (8001f88 <__aeabi_dadd+0x6e4>)
 8001cf8:	1ae1      	subs	r1, r4, r3
 8001cfa:	4010      	ands	r0, r2
 8001cfc:	0747      	lsls	r7, r0, #29
 8001cfe:	08c0      	lsrs	r0, r0, #3
 8001d00:	e707      	b.n	8001b12 <__aeabi_dadd+0x26e>
 8001d02:	0034      	movs	r4, r6
 8001d04:	4648      	mov	r0, r9
 8001d06:	4304      	orrs	r4, r0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dadd+0x468>
 8001d0a:	e0fa      	b.n	8001f02 <__aeabi_dadd+0x65e>
 8001d0c:	1e4c      	subs	r4, r1, #1
 8001d0e:	2901      	cmp	r1, #1
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dadd+0x470>
 8001d12:	e0d7      	b.n	8001ec4 <__aeabi_dadd+0x620>
 8001d14:	4f9b      	ldr	r7, [pc, #620]	@ (8001f84 <__aeabi_dadd+0x6e0>)
 8001d16:	42b9      	cmp	r1, r7
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x478>
 8001d1a:	e0e2      	b.n	8001ee2 <__aeabi_dadd+0x63e>
 8001d1c:	2701      	movs	r7, #1
 8001d1e:	2c38      	cmp	r4, #56	@ 0x38
 8001d20:	dd00      	ble.n	8001d24 <__aeabi_dadd+0x480>
 8001d22:	e74f      	b.n	8001bc4 <__aeabi_dadd+0x320>
 8001d24:	0021      	movs	r1, r4
 8001d26:	e73c      	b.n	8001ba2 <__aeabi_dadd+0x2fe>
 8001d28:	4c96      	ldr	r4, [pc, #600]	@ (8001f84 <__aeabi_dadd+0x6e0>)
 8001d2a:	42a1      	cmp	r1, r4
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dadd+0x48c>
 8001d2e:	e0dd      	b.n	8001eec <__aeabi_dadd+0x648>
 8001d30:	444a      	add	r2, r9
 8001d32:	454a      	cmp	r2, r9
 8001d34:	4180      	sbcs	r0, r0
 8001d36:	18f3      	adds	r3, r6, r3
 8001d38:	4240      	negs	r0, r0
 8001d3a:	1818      	adds	r0, r3, r0
 8001d3c:	07c7      	lsls	r7, r0, #31
 8001d3e:	0852      	lsrs	r2, r2, #1
 8001d40:	4317      	orrs	r7, r2
 8001d42:	0846      	lsrs	r6, r0, #1
 8001d44:	0752      	lsls	r2, r2, #29
 8001d46:	d005      	beq.n	8001d54 <__aeabi_dadd+0x4b0>
 8001d48:	220f      	movs	r2, #15
 8001d4a:	000c      	movs	r4, r1
 8001d4c:	403a      	ands	r2, r7
 8001d4e:	2a04      	cmp	r2, #4
 8001d50:	d000      	beq.n	8001d54 <__aeabi_dadd+0x4b0>
 8001d52:	e62c      	b.n	80019ae <__aeabi_dadd+0x10a>
 8001d54:	0776      	lsls	r6, r6, #29
 8001d56:	08ff      	lsrs	r7, r7, #3
 8001d58:	4337      	orrs	r7, r6
 8001d5a:	0900      	lsrs	r0, r0, #4
 8001d5c:	e6d9      	b.n	8001b12 <__aeabi_dadd+0x26e>
 8001d5e:	2700      	movs	r7, #0
 8001d60:	2600      	movs	r6, #0
 8001d62:	e6e8      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001d64:	4649      	mov	r1, r9
 8001d66:	1a57      	subs	r7, r2, r1
 8001d68:	42ba      	cmp	r2, r7
 8001d6a:	4192      	sbcs	r2, r2
 8001d6c:	1b9e      	subs	r6, r3, r6
 8001d6e:	4252      	negs	r2, r2
 8001d70:	4665      	mov	r5, ip
 8001d72:	1ab6      	subs	r6, r6, r2
 8001d74:	e5ed      	b.n	8001952 <__aeabi_dadd+0xae>
 8001d76:	2900      	cmp	r1, #0
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dadd+0x4d8>
 8001d7a:	e0c6      	b.n	8001f0a <__aeabi_dadd+0x666>
 8001d7c:	2f00      	cmp	r7, #0
 8001d7e:	d167      	bne.n	8001e50 <__aeabi_dadd+0x5ac>
 8001d80:	2680      	movs	r6, #128	@ 0x80
 8001d82:	2500      	movs	r5, #0
 8001d84:	4c7f      	ldr	r4, [pc, #508]	@ (8001f84 <__aeabi_dadd+0x6e0>)
 8001d86:	0336      	lsls	r6, r6, #12
 8001d88:	e6d5      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001d8a:	4665      	mov	r5, ip
 8001d8c:	000c      	movs	r4, r1
 8001d8e:	001e      	movs	r6, r3
 8001d90:	08d0      	lsrs	r0, r2, #3
 8001d92:	e6e4      	b.n	8001b5e <__aeabi_dadd+0x2ba>
 8001d94:	444a      	add	r2, r9
 8001d96:	454a      	cmp	r2, r9
 8001d98:	4180      	sbcs	r0, r0
 8001d9a:	18f3      	adds	r3, r6, r3
 8001d9c:	4240      	negs	r0, r0
 8001d9e:	1818      	adds	r0, r3, r0
 8001da0:	0011      	movs	r1, r2
 8001da2:	0203      	lsls	r3, r0, #8
 8001da4:	d400      	bmi.n	8001da8 <__aeabi_dadd+0x504>
 8001da6:	e096      	b.n	8001ed6 <__aeabi_dadd+0x632>
 8001da8:	4b77      	ldr	r3, [pc, #476]	@ (8001f88 <__aeabi_dadd+0x6e4>)
 8001daa:	0849      	lsrs	r1, r1, #1
 8001dac:	4018      	ands	r0, r3
 8001dae:	07c3      	lsls	r3, r0, #31
 8001db0:	430b      	orrs	r3, r1
 8001db2:	0844      	lsrs	r4, r0, #1
 8001db4:	0749      	lsls	r1, r1, #29
 8001db6:	d100      	bne.n	8001dba <__aeabi_dadd+0x516>
 8001db8:	e129      	b.n	800200e <__aeabi_dadd+0x76a>
 8001dba:	220f      	movs	r2, #15
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	2a04      	cmp	r2, #4
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x520>
 8001dc2:	e0ea      	b.n	8001f9a <__aeabi_dadd+0x6f6>
 8001dc4:	1d1f      	adds	r7, r3, #4
 8001dc6:	429f      	cmp	r7, r3
 8001dc8:	41b6      	sbcs	r6, r6
 8001dca:	4276      	negs	r6, r6
 8001dcc:	1936      	adds	r6, r6, r4
 8001dce:	2402      	movs	r4, #2
 8001dd0:	e6c4      	b.n	8001b5c <__aeabi_dadd+0x2b8>
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	1a8f      	subs	r7, r1, r2
 8001dd6:	45b9      	cmp	r9, r7
 8001dd8:	4180      	sbcs	r0, r0
 8001dda:	1af6      	subs	r6, r6, r3
 8001ddc:	4240      	negs	r0, r0
 8001dde:	1a36      	subs	r6, r6, r0
 8001de0:	0233      	lsls	r3, r6, #8
 8001de2:	d406      	bmi.n	8001df2 <__aeabi_dadd+0x54e>
 8001de4:	0773      	lsls	r3, r6, #29
 8001de6:	08ff      	lsrs	r7, r7, #3
 8001de8:	2101      	movs	r1, #1
 8001dea:	431f      	orrs	r7, r3
 8001dec:	08f0      	lsrs	r0, r6, #3
 8001dee:	e690      	b.n	8001b12 <__aeabi_dadd+0x26e>
 8001df0:	4665      	mov	r5, ip
 8001df2:	2401      	movs	r4, #1
 8001df4:	e5ab      	b.n	800194e <__aeabi_dadd+0xaa>
 8001df6:	464b      	mov	r3, r9
 8001df8:	0777      	lsls	r7, r6, #29
 8001dfa:	08d8      	lsrs	r0, r3, #3
 8001dfc:	4307      	orrs	r7, r0
 8001dfe:	08f0      	lsrs	r0, r6, #3
 8001e00:	e6b4      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001e02:	000f      	movs	r7, r1
 8001e04:	0018      	movs	r0, r3
 8001e06:	3f20      	subs	r7, #32
 8001e08:	40f8      	lsrs	r0, r7
 8001e0a:	4684      	mov	ip, r0
 8001e0c:	2920      	cmp	r1, #32
 8001e0e:	d003      	beq.n	8001e18 <__aeabi_dadd+0x574>
 8001e10:	2740      	movs	r7, #64	@ 0x40
 8001e12:	1a79      	subs	r1, r7, r1
 8001e14:	408b      	lsls	r3, r1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	1e53      	subs	r3, r2, #1
 8001e1a:	419a      	sbcs	r2, r3
 8001e1c:	4663      	mov	r3, ip
 8001e1e:	0017      	movs	r7, r2
 8001e20:	431f      	orrs	r7, r3
 8001e22:	e635      	b.n	8001a90 <__aeabi_dadd+0x1ec>
 8001e24:	2500      	movs	r5, #0
 8001e26:	2400      	movs	r4, #0
 8001e28:	2600      	movs	r6, #0
 8001e2a:	e684      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001e2c:	000c      	movs	r4, r1
 8001e2e:	0035      	movs	r5, r6
 8001e30:	3c20      	subs	r4, #32
 8001e32:	40e5      	lsrs	r5, r4
 8001e34:	2920      	cmp	r1, #32
 8001e36:	d005      	beq.n	8001e44 <__aeabi_dadd+0x5a0>
 8001e38:	2440      	movs	r4, #64	@ 0x40
 8001e3a:	1a61      	subs	r1, r4, r1
 8001e3c:	408e      	lsls	r6, r1
 8001e3e:	4649      	mov	r1, r9
 8001e40:	4331      	orrs	r1, r6
 8001e42:	4689      	mov	r9, r1
 8001e44:	4648      	mov	r0, r9
 8001e46:	1e41      	subs	r1, r0, #1
 8001e48:	4188      	sbcs	r0, r1
 8001e4a:	0007      	movs	r7, r0
 8001e4c:	432f      	orrs	r7, r5
 8001e4e:	e5ef      	b.n	8001a30 <__aeabi_dadd+0x18c>
 8001e50:	08d2      	lsrs	r2, r2, #3
 8001e52:	075f      	lsls	r7, r3, #29
 8001e54:	4665      	mov	r5, ip
 8001e56:	4317      	orrs	r7, r2
 8001e58:	08d8      	lsrs	r0, r3, #3
 8001e5a:	e687      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001e5c:	1a17      	subs	r7, r2, r0
 8001e5e:	42ba      	cmp	r2, r7
 8001e60:	4192      	sbcs	r2, r2
 8001e62:	1b9e      	subs	r6, r3, r6
 8001e64:	4252      	negs	r2, r2
 8001e66:	1ab6      	subs	r6, r6, r2
 8001e68:	0233      	lsls	r3, r6, #8
 8001e6a:	d4c1      	bmi.n	8001df0 <__aeabi_dadd+0x54c>
 8001e6c:	0773      	lsls	r3, r6, #29
 8001e6e:	08ff      	lsrs	r7, r7, #3
 8001e70:	4665      	mov	r5, ip
 8001e72:	2101      	movs	r1, #1
 8001e74:	431f      	orrs	r7, r3
 8001e76:	08f0      	lsrs	r0, r6, #3
 8001e78:	e64b      	b.n	8001b12 <__aeabi_dadd+0x26e>
 8001e7a:	2f00      	cmp	r7, #0
 8001e7c:	d07b      	beq.n	8001f76 <__aeabi_dadd+0x6d2>
 8001e7e:	4665      	mov	r5, ip
 8001e80:	001e      	movs	r6, r3
 8001e82:	4691      	mov	r9, r2
 8001e84:	e63f      	b.n	8001b06 <__aeabi_dadd+0x262>
 8001e86:	1a81      	subs	r1, r0, r2
 8001e88:	4688      	mov	r8, r1
 8001e8a:	45c1      	cmp	r9, r8
 8001e8c:	41a4      	sbcs	r4, r4
 8001e8e:	1af1      	subs	r1, r6, r3
 8001e90:	4264      	negs	r4, r4
 8001e92:	1b09      	subs	r1, r1, r4
 8001e94:	2480      	movs	r4, #128	@ 0x80
 8001e96:	0424      	lsls	r4, r4, #16
 8001e98:	4221      	tst	r1, r4
 8001e9a:	d077      	beq.n	8001f8c <__aeabi_dadd+0x6e8>
 8001e9c:	1a10      	subs	r0, r2, r0
 8001e9e:	4282      	cmp	r2, r0
 8001ea0:	4192      	sbcs	r2, r2
 8001ea2:	0007      	movs	r7, r0
 8001ea4:	1b9e      	subs	r6, r3, r6
 8001ea6:	4252      	negs	r2, r2
 8001ea8:	1ab6      	subs	r6, r6, r2
 8001eaa:	4337      	orrs	r7, r6
 8001eac:	d000      	beq.n	8001eb0 <__aeabi_dadd+0x60c>
 8001eae:	e0a0      	b.n	8001ff2 <__aeabi_dadd+0x74e>
 8001eb0:	4665      	mov	r5, ip
 8001eb2:	2400      	movs	r4, #0
 8001eb4:	2600      	movs	r6, #0
 8001eb6:	e63e      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001eb8:	075f      	lsls	r7, r3, #29
 8001eba:	08d2      	lsrs	r2, r2, #3
 8001ebc:	4665      	mov	r5, ip
 8001ebe:	4317      	orrs	r7, r2
 8001ec0:	08d8      	lsrs	r0, r3, #3
 8001ec2:	e653      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001ec4:	1881      	adds	r1, r0, r2
 8001ec6:	4291      	cmp	r1, r2
 8001ec8:	4192      	sbcs	r2, r2
 8001eca:	18f0      	adds	r0, r6, r3
 8001ecc:	4252      	negs	r2, r2
 8001ece:	1880      	adds	r0, r0, r2
 8001ed0:	0203      	lsls	r3, r0, #8
 8001ed2:	d500      	bpl.n	8001ed6 <__aeabi_dadd+0x632>
 8001ed4:	e768      	b.n	8001da8 <__aeabi_dadd+0x504>
 8001ed6:	0747      	lsls	r7, r0, #29
 8001ed8:	08c9      	lsrs	r1, r1, #3
 8001eda:	430f      	orrs	r7, r1
 8001edc:	08c0      	lsrs	r0, r0, #3
 8001ede:	2101      	movs	r1, #1
 8001ee0:	e617      	b.n	8001b12 <__aeabi_dadd+0x26e>
 8001ee2:	08d2      	lsrs	r2, r2, #3
 8001ee4:	075f      	lsls	r7, r3, #29
 8001ee6:	4317      	orrs	r7, r2
 8001ee8:	08d8      	lsrs	r0, r3, #3
 8001eea:	e63f      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001eec:	000c      	movs	r4, r1
 8001eee:	2600      	movs	r6, #0
 8001ef0:	2700      	movs	r7, #0
 8001ef2:	e620      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	d156      	bne.n	8001fa6 <__aeabi_dadd+0x702>
 8001ef8:	075f      	lsls	r7, r3, #29
 8001efa:	08d2      	lsrs	r2, r2, #3
 8001efc:	4317      	orrs	r7, r2
 8001efe:	08d8      	lsrs	r0, r3, #3
 8001f00:	e634      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001f02:	000c      	movs	r4, r1
 8001f04:	001e      	movs	r6, r3
 8001f06:	08d0      	lsrs	r0, r2, #3
 8001f08:	e629      	b.n	8001b5e <__aeabi_dadd+0x2ba>
 8001f0a:	08c1      	lsrs	r1, r0, #3
 8001f0c:	0770      	lsls	r0, r6, #29
 8001f0e:	4301      	orrs	r1, r0
 8001f10:	08f0      	lsrs	r0, r6, #3
 8001f12:	2f00      	cmp	r7, #0
 8001f14:	d062      	beq.n	8001fdc <__aeabi_dadd+0x738>
 8001f16:	2480      	movs	r4, #128	@ 0x80
 8001f18:	0324      	lsls	r4, r4, #12
 8001f1a:	4220      	tst	r0, r4
 8001f1c:	d007      	beq.n	8001f2e <__aeabi_dadd+0x68a>
 8001f1e:	08de      	lsrs	r6, r3, #3
 8001f20:	4226      	tst	r6, r4
 8001f22:	d104      	bne.n	8001f2e <__aeabi_dadd+0x68a>
 8001f24:	4665      	mov	r5, ip
 8001f26:	0030      	movs	r0, r6
 8001f28:	08d1      	lsrs	r1, r2, #3
 8001f2a:	075b      	lsls	r3, r3, #29
 8001f2c:	4319      	orrs	r1, r3
 8001f2e:	0f4f      	lsrs	r7, r1, #29
 8001f30:	00c9      	lsls	r1, r1, #3
 8001f32:	08c9      	lsrs	r1, r1, #3
 8001f34:	077f      	lsls	r7, r7, #29
 8001f36:	430f      	orrs	r7, r1
 8001f38:	e618      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001f3a:	000c      	movs	r4, r1
 8001f3c:	0030      	movs	r0, r6
 8001f3e:	3c20      	subs	r4, #32
 8001f40:	40e0      	lsrs	r0, r4
 8001f42:	4684      	mov	ip, r0
 8001f44:	2920      	cmp	r1, #32
 8001f46:	d005      	beq.n	8001f54 <__aeabi_dadd+0x6b0>
 8001f48:	2440      	movs	r4, #64	@ 0x40
 8001f4a:	1a61      	subs	r1, r4, r1
 8001f4c:	408e      	lsls	r6, r1
 8001f4e:	4649      	mov	r1, r9
 8001f50:	4331      	orrs	r1, r6
 8001f52:	4689      	mov	r9, r1
 8001f54:	4648      	mov	r0, r9
 8001f56:	1e41      	subs	r1, r0, #1
 8001f58:	4188      	sbcs	r0, r1
 8001f5a:	4661      	mov	r1, ip
 8001f5c:	0007      	movs	r7, r0
 8001f5e:	430f      	orrs	r7, r1
 8001f60:	e630      	b.n	8001bc4 <__aeabi_dadd+0x320>
 8001f62:	2120      	movs	r1, #32
 8001f64:	2700      	movs	r7, #0
 8001f66:	1a09      	subs	r1, r1, r0
 8001f68:	e50e      	b.n	8001988 <__aeabi_dadd+0xe4>
 8001f6a:	001e      	movs	r6, r3
 8001f6c:	2f00      	cmp	r7, #0
 8001f6e:	d000      	beq.n	8001f72 <__aeabi_dadd+0x6ce>
 8001f70:	e522      	b.n	80019b8 <__aeabi_dadd+0x114>
 8001f72:	2400      	movs	r4, #0
 8001f74:	e758      	b.n	8001e28 <__aeabi_dadd+0x584>
 8001f76:	2500      	movs	r5, #0
 8001f78:	2400      	movs	r4, #0
 8001f7a:	2600      	movs	r6, #0
 8001f7c:	e5db      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	000007fe 	.word	0x000007fe
 8001f84:	000007ff 	.word	0x000007ff
 8001f88:	ff7fffff 	.word	0xff7fffff
 8001f8c:	4647      	mov	r7, r8
 8001f8e:	430f      	orrs	r7, r1
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dadd+0x6f0>
 8001f92:	e747      	b.n	8001e24 <__aeabi_dadd+0x580>
 8001f94:	000e      	movs	r6, r1
 8001f96:	46c1      	mov	r9, r8
 8001f98:	e5b5      	b.n	8001b06 <__aeabi_dadd+0x262>
 8001f9a:	08df      	lsrs	r7, r3, #3
 8001f9c:	0764      	lsls	r4, r4, #29
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4327      	orrs	r7, r4
 8001fa2:	0900      	lsrs	r0, r0, #4
 8001fa4:	e5b5      	b.n	8001b12 <__aeabi_dadd+0x26e>
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	08c0      	lsrs	r0, r0, #3
 8001faa:	0777      	lsls	r7, r6, #29
 8001fac:	4307      	orrs	r7, r0
 8001fae:	4311      	orrs	r1, r2
 8001fb0:	08f0      	lsrs	r0, r6, #3
 8001fb2:	2900      	cmp	r1, #0
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dadd+0x714>
 8001fb6:	e5d9      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001fb8:	2180      	movs	r1, #128	@ 0x80
 8001fba:	0309      	lsls	r1, r1, #12
 8001fbc:	4208      	tst	r0, r1
 8001fbe:	d007      	beq.n	8001fd0 <__aeabi_dadd+0x72c>
 8001fc0:	08dc      	lsrs	r4, r3, #3
 8001fc2:	420c      	tst	r4, r1
 8001fc4:	d104      	bne.n	8001fd0 <__aeabi_dadd+0x72c>
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	075b      	lsls	r3, r3, #29
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	0017      	movs	r7, r2
 8001fce:	0020      	movs	r0, r4
 8001fd0:	0f7b      	lsrs	r3, r7, #29
 8001fd2:	00ff      	lsls	r7, r7, #3
 8001fd4:	08ff      	lsrs	r7, r7, #3
 8001fd6:	075b      	lsls	r3, r3, #29
 8001fd8:	431f      	orrs	r7, r3
 8001fda:	e5c7      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001fdc:	000f      	movs	r7, r1
 8001fde:	e5c5      	b.n	8001b6c <__aeabi_dadd+0x2c8>
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <__aeabi_dadd+0x788>)
 8001fe2:	08d2      	lsrs	r2, r2, #3
 8001fe4:	4033      	ands	r3, r6
 8001fe6:	075f      	lsls	r7, r3, #29
 8001fe8:	025b      	lsls	r3, r3, #9
 8001fea:	2401      	movs	r4, #1
 8001fec:	4317      	orrs	r7, r2
 8001fee:	0b1e      	lsrs	r6, r3, #12
 8001ff0:	e5a1      	b.n	8001b36 <__aeabi_dadd+0x292>
 8001ff2:	4226      	tst	r6, r4
 8001ff4:	d012      	beq.n	800201c <__aeabi_dadd+0x778>
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <__aeabi_dadd+0x788>)
 8001ff8:	4665      	mov	r5, ip
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	2401      	movs	r4, #1
 8001ffe:	401e      	ands	r6, r3
 8002000:	e4e6      	b.n	80019d0 <__aeabi_dadd+0x12c>
 8002002:	0021      	movs	r1, r4
 8002004:	e585      	b.n	8001b12 <__aeabi_dadd+0x26e>
 8002006:	0017      	movs	r7, r2
 8002008:	e5a8      	b.n	8001b5c <__aeabi_dadd+0x2b8>
 800200a:	003a      	movs	r2, r7
 800200c:	e4d4      	b.n	80019b8 <__aeabi_dadd+0x114>
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	0764      	lsls	r4, r4, #29
 8002012:	431c      	orrs	r4, r3
 8002014:	0027      	movs	r7, r4
 8002016:	2102      	movs	r1, #2
 8002018:	0900      	lsrs	r0, r0, #4
 800201a:	e57a      	b.n	8001b12 <__aeabi_dadd+0x26e>
 800201c:	08c0      	lsrs	r0, r0, #3
 800201e:	0777      	lsls	r7, r6, #29
 8002020:	4307      	orrs	r7, r0
 8002022:	4665      	mov	r5, ip
 8002024:	2100      	movs	r1, #0
 8002026:	08f0      	lsrs	r0, r6, #3
 8002028:	e573      	b.n	8001b12 <__aeabi_dadd+0x26e>
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	ff7fffff 	.word	0xff7fffff

08002030 <__aeabi_ddiv>:
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	46de      	mov	lr, fp
 8002034:	4645      	mov	r5, r8
 8002036:	4657      	mov	r7, sl
 8002038:	464e      	mov	r6, r9
 800203a:	b5e0      	push	{r5, r6, r7, lr}
 800203c:	b087      	sub	sp, #28
 800203e:	9200      	str	r2, [sp, #0]
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	030b      	lsls	r3, r1, #12
 8002044:	0b1b      	lsrs	r3, r3, #12
 8002046:	469b      	mov	fp, r3
 8002048:	0fca      	lsrs	r2, r1, #31
 800204a:	004b      	lsls	r3, r1, #1
 800204c:	0004      	movs	r4, r0
 800204e:	4680      	mov	r8, r0
 8002050:	0d5b      	lsrs	r3, r3, #21
 8002052:	9202      	str	r2, [sp, #8]
 8002054:	d100      	bne.n	8002058 <__aeabi_ddiv+0x28>
 8002056:	e098      	b.n	800218a <__aeabi_ddiv+0x15a>
 8002058:	4a7c      	ldr	r2, [pc, #496]	@ (800224c <__aeabi_ddiv+0x21c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d037      	beq.n	80020ce <__aeabi_ddiv+0x9e>
 800205e:	4659      	mov	r1, fp
 8002060:	0f42      	lsrs	r2, r0, #29
 8002062:	00c9      	lsls	r1, r1, #3
 8002064:	430a      	orrs	r2, r1
 8002066:	2180      	movs	r1, #128	@ 0x80
 8002068:	0409      	lsls	r1, r1, #16
 800206a:	4311      	orrs	r1, r2
 800206c:	00c2      	lsls	r2, r0, #3
 800206e:	4690      	mov	r8, r2
 8002070:	4a77      	ldr	r2, [pc, #476]	@ (8002250 <__aeabi_ddiv+0x220>)
 8002072:	4689      	mov	r9, r1
 8002074:	4692      	mov	sl, r2
 8002076:	449a      	add	sl, r3
 8002078:	2300      	movs	r3, #0
 800207a:	2400      	movs	r4, #0
 800207c:	9303      	str	r3, [sp, #12]
 800207e:	9e00      	ldr	r6, [sp, #0]
 8002080:	9f01      	ldr	r7, [sp, #4]
 8002082:	033b      	lsls	r3, r7, #12
 8002084:	0b1b      	lsrs	r3, r3, #12
 8002086:	469b      	mov	fp, r3
 8002088:	007b      	lsls	r3, r7, #1
 800208a:	0030      	movs	r0, r6
 800208c:	0d5b      	lsrs	r3, r3, #21
 800208e:	0ffd      	lsrs	r5, r7, #31
 8002090:	2b00      	cmp	r3, #0
 8002092:	d059      	beq.n	8002148 <__aeabi_ddiv+0x118>
 8002094:	4a6d      	ldr	r2, [pc, #436]	@ (800224c <__aeabi_ddiv+0x21c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d048      	beq.n	800212c <__aeabi_ddiv+0xfc>
 800209a:	4659      	mov	r1, fp
 800209c:	0f72      	lsrs	r2, r6, #29
 800209e:	00c9      	lsls	r1, r1, #3
 80020a0:	430a      	orrs	r2, r1
 80020a2:	2180      	movs	r1, #128	@ 0x80
 80020a4:	0409      	lsls	r1, r1, #16
 80020a6:	4311      	orrs	r1, r2
 80020a8:	468b      	mov	fp, r1
 80020aa:	4969      	ldr	r1, [pc, #420]	@ (8002250 <__aeabi_ddiv+0x220>)
 80020ac:	00f2      	lsls	r2, r6, #3
 80020ae:	468c      	mov	ip, r1
 80020b0:	4651      	mov	r1, sl
 80020b2:	4463      	add	r3, ip
 80020b4:	1acb      	subs	r3, r1, r3
 80020b6:	469a      	mov	sl, r3
 80020b8:	2100      	movs	r1, #0
 80020ba:	9e02      	ldr	r6, [sp, #8]
 80020bc:	406e      	eors	r6, r5
 80020be:	b2f6      	uxtb	r6, r6
 80020c0:	2c0f      	cmp	r4, #15
 80020c2:	d900      	bls.n	80020c6 <__aeabi_ddiv+0x96>
 80020c4:	e0ce      	b.n	8002264 <__aeabi_ddiv+0x234>
 80020c6:	4b63      	ldr	r3, [pc, #396]	@ (8002254 <__aeabi_ddiv+0x224>)
 80020c8:	00a4      	lsls	r4, r4, #2
 80020ca:	591b      	ldr	r3, [r3, r4]
 80020cc:	469f      	mov	pc, r3
 80020ce:	465a      	mov	r2, fp
 80020d0:	4302      	orrs	r2, r0
 80020d2:	4691      	mov	r9, r2
 80020d4:	d000      	beq.n	80020d8 <__aeabi_ddiv+0xa8>
 80020d6:	e090      	b.n	80021fa <__aeabi_ddiv+0x1ca>
 80020d8:	469a      	mov	sl, r3
 80020da:	2302      	movs	r3, #2
 80020dc:	4690      	mov	r8, r2
 80020de:	2408      	movs	r4, #8
 80020e0:	9303      	str	r3, [sp, #12]
 80020e2:	e7cc      	b.n	800207e <__aeabi_ddiv+0x4e>
 80020e4:	46cb      	mov	fp, r9
 80020e6:	4642      	mov	r2, r8
 80020e8:	9d02      	ldr	r5, [sp, #8]
 80020ea:	9903      	ldr	r1, [sp, #12]
 80020ec:	2902      	cmp	r1, #2
 80020ee:	d100      	bne.n	80020f2 <__aeabi_ddiv+0xc2>
 80020f0:	e1de      	b.n	80024b0 <__aeabi_ddiv+0x480>
 80020f2:	2903      	cmp	r1, #3
 80020f4:	d100      	bne.n	80020f8 <__aeabi_ddiv+0xc8>
 80020f6:	e08d      	b.n	8002214 <__aeabi_ddiv+0x1e4>
 80020f8:	2901      	cmp	r1, #1
 80020fa:	d000      	beq.n	80020fe <__aeabi_ddiv+0xce>
 80020fc:	e179      	b.n	80023f2 <__aeabi_ddiv+0x3c2>
 80020fe:	002e      	movs	r6, r5
 8002100:	2200      	movs	r2, #0
 8002102:	2300      	movs	r3, #0
 8002104:	2400      	movs	r4, #0
 8002106:	4690      	mov	r8, r2
 8002108:	051b      	lsls	r3, r3, #20
 800210a:	4323      	orrs	r3, r4
 800210c:	07f6      	lsls	r6, r6, #31
 800210e:	4333      	orrs	r3, r6
 8002110:	4640      	mov	r0, r8
 8002112:	0019      	movs	r1, r3
 8002114:	b007      	add	sp, #28
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	2200      	movs	r2, #0
 8002124:	2400      	movs	r4, #0
 8002126:	4690      	mov	r8, r2
 8002128:	4b48      	ldr	r3, [pc, #288]	@ (800224c <__aeabi_ddiv+0x21c>)
 800212a:	e7ed      	b.n	8002108 <__aeabi_ddiv+0xd8>
 800212c:	465a      	mov	r2, fp
 800212e:	9b00      	ldr	r3, [sp, #0]
 8002130:	431a      	orrs	r2, r3
 8002132:	4b49      	ldr	r3, [pc, #292]	@ (8002258 <__aeabi_ddiv+0x228>)
 8002134:	469c      	mov	ip, r3
 8002136:	44e2      	add	sl, ip
 8002138:	2a00      	cmp	r2, #0
 800213a:	d159      	bne.n	80021f0 <__aeabi_ddiv+0x1c0>
 800213c:	2302      	movs	r3, #2
 800213e:	431c      	orrs	r4, r3
 8002140:	2300      	movs	r3, #0
 8002142:	2102      	movs	r1, #2
 8002144:	469b      	mov	fp, r3
 8002146:	e7b8      	b.n	80020ba <__aeabi_ddiv+0x8a>
 8002148:	465a      	mov	r2, fp
 800214a:	9b00      	ldr	r3, [sp, #0]
 800214c:	431a      	orrs	r2, r3
 800214e:	d049      	beq.n	80021e4 <__aeabi_ddiv+0x1b4>
 8002150:	465b      	mov	r3, fp
 8002152:	2b00      	cmp	r3, #0
 8002154:	d100      	bne.n	8002158 <__aeabi_ddiv+0x128>
 8002156:	e19c      	b.n	8002492 <__aeabi_ddiv+0x462>
 8002158:	4658      	mov	r0, fp
 800215a:	f001 fc0d 	bl	8003978 <__clzsi2>
 800215e:	0002      	movs	r2, r0
 8002160:	0003      	movs	r3, r0
 8002162:	3a0b      	subs	r2, #11
 8002164:	271d      	movs	r7, #29
 8002166:	9e00      	ldr	r6, [sp, #0]
 8002168:	1aba      	subs	r2, r7, r2
 800216a:	0019      	movs	r1, r3
 800216c:	4658      	mov	r0, fp
 800216e:	40d6      	lsrs	r6, r2
 8002170:	3908      	subs	r1, #8
 8002172:	4088      	lsls	r0, r1
 8002174:	0032      	movs	r2, r6
 8002176:	4302      	orrs	r2, r0
 8002178:	4693      	mov	fp, r2
 800217a:	9a00      	ldr	r2, [sp, #0]
 800217c:	408a      	lsls	r2, r1
 800217e:	4937      	ldr	r1, [pc, #220]	@ (800225c <__aeabi_ddiv+0x22c>)
 8002180:	4453      	add	r3, sl
 8002182:	468a      	mov	sl, r1
 8002184:	2100      	movs	r1, #0
 8002186:	449a      	add	sl, r3
 8002188:	e797      	b.n	80020ba <__aeabi_ddiv+0x8a>
 800218a:	465b      	mov	r3, fp
 800218c:	4303      	orrs	r3, r0
 800218e:	4699      	mov	r9, r3
 8002190:	d021      	beq.n	80021d6 <__aeabi_ddiv+0x1a6>
 8002192:	465b      	mov	r3, fp
 8002194:	2b00      	cmp	r3, #0
 8002196:	d100      	bne.n	800219a <__aeabi_ddiv+0x16a>
 8002198:	e169      	b.n	800246e <__aeabi_ddiv+0x43e>
 800219a:	4658      	mov	r0, fp
 800219c:	f001 fbec 	bl	8003978 <__clzsi2>
 80021a0:	230b      	movs	r3, #11
 80021a2:	425b      	negs	r3, r3
 80021a4:	469c      	mov	ip, r3
 80021a6:	0002      	movs	r2, r0
 80021a8:	4484      	add	ip, r0
 80021aa:	4666      	mov	r6, ip
 80021ac:	231d      	movs	r3, #29
 80021ae:	1b9b      	subs	r3, r3, r6
 80021b0:	0026      	movs	r6, r4
 80021b2:	0011      	movs	r1, r2
 80021b4:	4658      	mov	r0, fp
 80021b6:	40de      	lsrs	r6, r3
 80021b8:	3908      	subs	r1, #8
 80021ba:	4088      	lsls	r0, r1
 80021bc:	0033      	movs	r3, r6
 80021be:	4303      	orrs	r3, r0
 80021c0:	4699      	mov	r9, r3
 80021c2:	0023      	movs	r3, r4
 80021c4:	408b      	lsls	r3, r1
 80021c6:	4698      	mov	r8, r3
 80021c8:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <__aeabi_ddiv+0x230>)
 80021ca:	2400      	movs	r4, #0
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	469a      	mov	sl, r3
 80021d0:	2300      	movs	r3, #0
 80021d2:	9303      	str	r3, [sp, #12]
 80021d4:	e753      	b.n	800207e <__aeabi_ddiv+0x4e>
 80021d6:	2300      	movs	r3, #0
 80021d8:	4698      	mov	r8, r3
 80021da:	469a      	mov	sl, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	2404      	movs	r4, #4
 80021e0:	9303      	str	r3, [sp, #12]
 80021e2:	e74c      	b.n	800207e <__aeabi_ddiv+0x4e>
 80021e4:	2301      	movs	r3, #1
 80021e6:	431c      	orrs	r4, r3
 80021e8:	2300      	movs	r3, #0
 80021ea:	2101      	movs	r1, #1
 80021ec:	469b      	mov	fp, r3
 80021ee:	e764      	b.n	80020ba <__aeabi_ddiv+0x8a>
 80021f0:	2303      	movs	r3, #3
 80021f2:	0032      	movs	r2, r6
 80021f4:	2103      	movs	r1, #3
 80021f6:	431c      	orrs	r4, r3
 80021f8:	e75f      	b.n	80020ba <__aeabi_ddiv+0x8a>
 80021fa:	469a      	mov	sl, r3
 80021fc:	2303      	movs	r3, #3
 80021fe:	46d9      	mov	r9, fp
 8002200:	240c      	movs	r4, #12
 8002202:	9303      	str	r3, [sp, #12]
 8002204:	e73b      	b.n	800207e <__aeabi_ddiv+0x4e>
 8002206:	2300      	movs	r3, #0
 8002208:	2480      	movs	r4, #128	@ 0x80
 800220a:	4698      	mov	r8, r3
 800220c:	2600      	movs	r6, #0
 800220e:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <__aeabi_ddiv+0x21c>)
 8002210:	0324      	lsls	r4, r4, #12
 8002212:	e779      	b.n	8002108 <__aeabi_ddiv+0xd8>
 8002214:	2480      	movs	r4, #128	@ 0x80
 8002216:	465b      	mov	r3, fp
 8002218:	0324      	lsls	r4, r4, #12
 800221a:	431c      	orrs	r4, r3
 800221c:	0324      	lsls	r4, r4, #12
 800221e:	002e      	movs	r6, r5
 8002220:	4690      	mov	r8, r2
 8002222:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <__aeabi_ddiv+0x21c>)
 8002224:	0b24      	lsrs	r4, r4, #12
 8002226:	e76f      	b.n	8002108 <__aeabi_ddiv+0xd8>
 8002228:	2480      	movs	r4, #128	@ 0x80
 800222a:	464b      	mov	r3, r9
 800222c:	0324      	lsls	r4, r4, #12
 800222e:	4223      	tst	r3, r4
 8002230:	d002      	beq.n	8002238 <__aeabi_ddiv+0x208>
 8002232:	465b      	mov	r3, fp
 8002234:	4223      	tst	r3, r4
 8002236:	d0f0      	beq.n	800221a <__aeabi_ddiv+0x1ea>
 8002238:	2480      	movs	r4, #128	@ 0x80
 800223a:	464b      	mov	r3, r9
 800223c:	0324      	lsls	r4, r4, #12
 800223e:	431c      	orrs	r4, r3
 8002240:	0324      	lsls	r4, r4, #12
 8002242:	9e02      	ldr	r6, [sp, #8]
 8002244:	4b01      	ldr	r3, [pc, #4]	@ (800224c <__aeabi_ddiv+0x21c>)
 8002246:	0b24      	lsrs	r4, r4, #12
 8002248:	e75e      	b.n	8002108 <__aeabi_ddiv+0xd8>
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	000007ff 	.word	0x000007ff
 8002250:	fffffc01 	.word	0xfffffc01
 8002254:	08017b18 	.word	0x08017b18
 8002258:	fffff801 	.word	0xfffff801
 800225c:	000003f3 	.word	0x000003f3
 8002260:	fffffc0d 	.word	0xfffffc0d
 8002264:	45cb      	cmp	fp, r9
 8002266:	d200      	bcs.n	800226a <__aeabi_ddiv+0x23a>
 8002268:	e0f8      	b.n	800245c <__aeabi_ddiv+0x42c>
 800226a:	d100      	bne.n	800226e <__aeabi_ddiv+0x23e>
 800226c:	e0f3      	b.n	8002456 <__aeabi_ddiv+0x426>
 800226e:	2301      	movs	r3, #1
 8002270:	425b      	negs	r3, r3
 8002272:	469c      	mov	ip, r3
 8002274:	4644      	mov	r4, r8
 8002276:	4648      	mov	r0, r9
 8002278:	2500      	movs	r5, #0
 800227a:	44e2      	add	sl, ip
 800227c:	465b      	mov	r3, fp
 800227e:	0e17      	lsrs	r7, r2, #24
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	431f      	orrs	r7, r3
 8002284:	0c19      	lsrs	r1, r3, #16
 8002286:	043b      	lsls	r3, r7, #16
 8002288:	0212      	lsls	r2, r2, #8
 800228a:	9700      	str	r7, [sp, #0]
 800228c:	0c1f      	lsrs	r7, r3, #16
 800228e:	4691      	mov	r9, r2
 8002290:	9102      	str	r1, [sp, #8]
 8002292:	9703      	str	r7, [sp, #12]
 8002294:	f7fd ffe2 	bl	800025c <__aeabi_uidivmod>
 8002298:	0002      	movs	r2, r0
 800229a:	437a      	muls	r2, r7
 800229c:	040b      	lsls	r3, r1, #16
 800229e:	0c21      	lsrs	r1, r4, #16
 80022a0:	4680      	mov	r8, r0
 80022a2:	4319      	orrs	r1, r3
 80022a4:	428a      	cmp	r2, r1
 80022a6:	d909      	bls.n	80022bc <__aeabi_ddiv+0x28c>
 80022a8:	9f00      	ldr	r7, [sp, #0]
 80022aa:	2301      	movs	r3, #1
 80022ac:	46bc      	mov	ip, r7
 80022ae:	425b      	negs	r3, r3
 80022b0:	4461      	add	r1, ip
 80022b2:	469c      	mov	ip, r3
 80022b4:	44e0      	add	r8, ip
 80022b6:	428f      	cmp	r7, r1
 80022b8:	d800      	bhi.n	80022bc <__aeabi_ddiv+0x28c>
 80022ba:	e15c      	b.n	8002576 <__aeabi_ddiv+0x546>
 80022bc:	1a88      	subs	r0, r1, r2
 80022be:	9902      	ldr	r1, [sp, #8]
 80022c0:	f7fd ffcc 	bl	800025c <__aeabi_uidivmod>
 80022c4:	9a03      	ldr	r2, [sp, #12]
 80022c6:	0424      	lsls	r4, r4, #16
 80022c8:	4342      	muls	r2, r0
 80022ca:	0409      	lsls	r1, r1, #16
 80022cc:	0c24      	lsrs	r4, r4, #16
 80022ce:	0003      	movs	r3, r0
 80022d0:	430c      	orrs	r4, r1
 80022d2:	42a2      	cmp	r2, r4
 80022d4:	d906      	bls.n	80022e4 <__aeabi_ddiv+0x2b4>
 80022d6:	9900      	ldr	r1, [sp, #0]
 80022d8:	3b01      	subs	r3, #1
 80022da:	468c      	mov	ip, r1
 80022dc:	4464      	add	r4, ip
 80022de:	42a1      	cmp	r1, r4
 80022e0:	d800      	bhi.n	80022e4 <__aeabi_ddiv+0x2b4>
 80022e2:	e142      	b.n	800256a <__aeabi_ddiv+0x53a>
 80022e4:	1aa0      	subs	r0, r4, r2
 80022e6:	4642      	mov	r2, r8
 80022e8:	0412      	lsls	r2, r2, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	4693      	mov	fp, r2
 80022ee:	464b      	mov	r3, r9
 80022f0:	4659      	mov	r1, fp
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	001f      	movs	r7, r3
 80022f6:	9304      	str	r3, [sp, #16]
 80022f8:	040b      	lsls	r3, r1, #16
 80022fa:	4649      	mov	r1, r9
 80022fc:	0409      	lsls	r1, r1, #16
 80022fe:	0c09      	lsrs	r1, r1, #16
 8002300:	000c      	movs	r4, r1
 8002302:	0c1b      	lsrs	r3, r3, #16
 8002304:	435c      	muls	r4, r3
 8002306:	0c12      	lsrs	r2, r2, #16
 8002308:	437b      	muls	r3, r7
 800230a:	4688      	mov	r8, r1
 800230c:	4351      	muls	r1, r2
 800230e:	437a      	muls	r2, r7
 8002310:	0c27      	lsrs	r7, r4, #16
 8002312:	46bc      	mov	ip, r7
 8002314:	185b      	adds	r3, r3, r1
 8002316:	4463      	add	r3, ip
 8002318:	4299      	cmp	r1, r3
 800231a:	d903      	bls.n	8002324 <__aeabi_ddiv+0x2f4>
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	0249      	lsls	r1, r1, #9
 8002320:	468c      	mov	ip, r1
 8002322:	4462      	add	r2, ip
 8002324:	0c19      	lsrs	r1, r3, #16
 8002326:	0424      	lsls	r4, r4, #16
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	0c24      	lsrs	r4, r4, #16
 800232c:	188a      	adds	r2, r1, r2
 800232e:	191c      	adds	r4, r3, r4
 8002330:	4290      	cmp	r0, r2
 8002332:	d302      	bcc.n	800233a <__aeabi_ddiv+0x30a>
 8002334:	d116      	bne.n	8002364 <__aeabi_ddiv+0x334>
 8002336:	42a5      	cmp	r5, r4
 8002338:	d214      	bcs.n	8002364 <__aeabi_ddiv+0x334>
 800233a:	465b      	mov	r3, fp
 800233c:	9f00      	ldr	r7, [sp, #0]
 800233e:	3b01      	subs	r3, #1
 8002340:	444d      	add	r5, r9
 8002342:	9305      	str	r3, [sp, #20]
 8002344:	454d      	cmp	r5, r9
 8002346:	419b      	sbcs	r3, r3
 8002348:	46bc      	mov	ip, r7
 800234a:	425b      	negs	r3, r3
 800234c:	4463      	add	r3, ip
 800234e:	18c0      	adds	r0, r0, r3
 8002350:	4287      	cmp	r7, r0
 8002352:	d300      	bcc.n	8002356 <__aeabi_ddiv+0x326>
 8002354:	e102      	b.n	800255c <__aeabi_ddiv+0x52c>
 8002356:	4282      	cmp	r2, r0
 8002358:	d900      	bls.n	800235c <__aeabi_ddiv+0x32c>
 800235a:	e129      	b.n	80025b0 <__aeabi_ddiv+0x580>
 800235c:	d100      	bne.n	8002360 <__aeabi_ddiv+0x330>
 800235e:	e124      	b.n	80025aa <__aeabi_ddiv+0x57a>
 8002360:	9b05      	ldr	r3, [sp, #20]
 8002362:	469b      	mov	fp, r3
 8002364:	1b2c      	subs	r4, r5, r4
 8002366:	42a5      	cmp	r5, r4
 8002368:	41ad      	sbcs	r5, r5
 800236a:	9b00      	ldr	r3, [sp, #0]
 800236c:	1a80      	subs	r0, r0, r2
 800236e:	426d      	negs	r5, r5
 8002370:	1b40      	subs	r0, r0, r5
 8002372:	4283      	cmp	r3, r0
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x348>
 8002376:	e10f      	b.n	8002598 <__aeabi_ddiv+0x568>
 8002378:	9902      	ldr	r1, [sp, #8]
 800237a:	f7fd ff6f 	bl	800025c <__aeabi_uidivmod>
 800237e:	9a03      	ldr	r2, [sp, #12]
 8002380:	040b      	lsls	r3, r1, #16
 8002382:	4342      	muls	r2, r0
 8002384:	0c21      	lsrs	r1, r4, #16
 8002386:	0005      	movs	r5, r0
 8002388:	4319      	orrs	r1, r3
 800238a:	428a      	cmp	r2, r1
 800238c:	d900      	bls.n	8002390 <__aeabi_ddiv+0x360>
 800238e:	e0cb      	b.n	8002528 <__aeabi_ddiv+0x4f8>
 8002390:	1a88      	subs	r0, r1, r2
 8002392:	9902      	ldr	r1, [sp, #8]
 8002394:	f7fd ff62 	bl	800025c <__aeabi_uidivmod>
 8002398:	9a03      	ldr	r2, [sp, #12]
 800239a:	0424      	lsls	r4, r4, #16
 800239c:	4342      	muls	r2, r0
 800239e:	0409      	lsls	r1, r1, #16
 80023a0:	0c24      	lsrs	r4, r4, #16
 80023a2:	0003      	movs	r3, r0
 80023a4:	430c      	orrs	r4, r1
 80023a6:	42a2      	cmp	r2, r4
 80023a8:	d900      	bls.n	80023ac <__aeabi_ddiv+0x37c>
 80023aa:	e0ca      	b.n	8002542 <__aeabi_ddiv+0x512>
 80023ac:	4641      	mov	r1, r8
 80023ae:	1aa4      	subs	r4, r4, r2
 80023b0:	042a      	lsls	r2, r5, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	9f04      	ldr	r7, [sp, #16]
 80023b6:	0413      	lsls	r3, r2, #16
 80023b8:	0c1b      	lsrs	r3, r3, #16
 80023ba:	4359      	muls	r1, r3
 80023bc:	4640      	mov	r0, r8
 80023be:	437b      	muls	r3, r7
 80023c0:	469c      	mov	ip, r3
 80023c2:	0c15      	lsrs	r5, r2, #16
 80023c4:	4368      	muls	r0, r5
 80023c6:	0c0b      	lsrs	r3, r1, #16
 80023c8:	4484      	add	ip, r0
 80023ca:	4463      	add	r3, ip
 80023cc:	437d      	muls	r5, r7
 80023ce:	4298      	cmp	r0, r3
 80023d0:	d903      	bls.n	80023da <__aeabi_ddiv+0x3aa>
 80023d2:	2080      	movs	r0, #128	@ 0x80
 80023d4:	0240      	lsls	r0, r0, #9
 80023d6:	4684      	mov	ip, r0
 80023d8:	4465      	add	r5, ip
 80023da:	0c18      	lsrs	r0, r3, #16
 80023dc:	0409      	lsls	r1, r1, #16
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	0c09      	lsrs	r1, r1, #16
 80023e2:	1940      	adds	r0, r0, r5
 80023e4:	185b      	adds	r3, r3, r1
 80023e6:	4284      	cmp	r4, r0
 80023e8:	d327      	bcc.n	800243a <__aeabi_ddiv+0x40a>
 80023ea:	d023      	beq.n	8002434 <__aeabi_ddiv+0x404>
 80023ec:	2301      	movs	r3, #1
 80023ee:	0035      	movs	r5, r6
 80023f0:	431a      	orrs	r2, r3
 80023f2:	4b94      	ldr	r3, [pc, #592]	@ (8002644 <__aeabi_ddiv+0x614>)
 80023f4:	4453      	add	r3, sl
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	dd60      	ble.n	80024bc <__aeabi_ddiv+0x48c>
 80023fa:	0751      	lsls	r1, r2, #29
 80023fc:	d000      	beq.n	8002400 <__aeabi_ddiv+0x3d0>
 80023fe:	e086      	b.n	800250e <__aeabi_ddiv+0x4de>
 8002400:	002e      	movs	r6, r5
 8002402:	08d1      	lsrs	r1, r2, #3
 8002404:	465a      	mov	r2, fp
 8002406:	01d2      	lsls	r2, r2, #7
 8002408:	d506      	bpl.n	8002418 <__aeabi_ddiv+0x3e8>
 800240a:	465a      	mov	r2, fp
 800240c:	4b8e      	ldr	r3, [pc, #568]	@ (8002648 <__aeabi_ddiv+0x618>)
 800240e:	401a      	ands	r2, r3
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	4693      	mov	fp, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4453      	add	r3, sl
 8002418:	4a8c      	ldr	r2, [pc, #560]	@ (800264c <__aeabi_ddiv+0x61c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	dd00      	ble.n	8002420 <__aeabi_ddiv+0x3f0>
 800241e:	e680      	b.n	8002122 <__aeabi_ddiv+0xf2>
 8002420:	465a      	mov	r2, fp
 8002422:	0752      	lsls	r2, r2, #29
 8002424:	430a      	orrs	r2, r1
 8002426:	4690      	mov	r8, r2
 8002428:	465a      	mov	r2, fp
 800242a:	055b      	lsls	r3, r3, #21
 800242c:	0254      	lsls	r4, r2, #9
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	0d5b      	lsrs	r3, r3, #21
 8002432:	e669      	b.n	8002108 <__aeabi_ddiv+0xd8>
 8002434:	0035      	movs	r5, r6
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0db      	beq.n	80023f2 <__aeabi_ddiv+0x3c2>
 800243a:	9d00      	ldr	r5, [sp, #0]
 800243c:	1e51      	subs	r1, r2, #1
 800243e:	46ac      	mov	ip, r5
 8002440:	4464      	add	r4, ip
 8002442:	42ac      	cmp	r4, r5
 8002444:	d200      	bcs.n	8002448 <__aeabi_ddiv+0x418>
 8002446:	e09e      	b.n	8002586 <__aeabi_ddiv+0x556>
 8002448:	4284      	cmp	r4, r0
 800244a:	d200      	bcs.n	800244e <__aeabi_ddiv+0x41e>
 800244c:	e0e1      	b.n	8002612 <__aeabi_ddiv+0x5e2>
 800244e:	d100      	bne.n	8002452 <__aeabi_ddiv+0x422>
 8002450:	e0ee      	b.n	8002630 <__aeabi_ddiv+0x600>
 8002452:	000a      	movs	r2, r1
 8002454:	e7ca      	b.n	80023ec <__aeabi_ddiv+0x3bc>
 8002456:	4542      	cmp	r2, r8
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x42c>
 800245a:	e708      	b.n	800226e <__aeabi_ddiv+0x23e>
 800245c:	464b      	mov	r3, r9
 800245e:	07dc      	lsls	r4, r3, #31
 8002460:	0858      	lsrs	r0, r3, #1
 8002462:	4643      	mov	r3, r8
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	431c      	orrs	r4, r3
 8002468:	4643      	mov	r3, r8
 800246a:	07dd      	lsls	r5, r3, #31
 800246c:	e706      	b.n	800227c <__aeabi_ddiv+0x24c>
 800246e:	f001 fa83 	bl	8003978 <__clzsi2>
 8002472:	2315      	movs	r3, #21
 8002474:	469c      	mov	ip, r3
 8002476:	4484      	add	ip, r0
 8002478:	0002      	movs	r2, r0
 800247a:	4663      	mov	r3, ip
 800247c:	3220      	adds	r2, #32
 800247e:	2b1c      	cmp	r3, #28
 8002480:	dc00      	bgt.n	8002484 <__aeabi_ddiv+0x454>
 8002482:	e692      	b.n	80021aa <__aeabi_ddiv+0x17a>
 8002484:	0023      	movs	r3, r4
 8002486:	3808      	subs	r0, #8
 8002488:	4083      	lsls	r3, r0
 800248a:	4699      	mov	r9, r3
 800248c:	2300      	movs	r3, #0
 800248e:	4698      	mov	r8, r3
 8002490:	e69a      	b.n	80021c8 <__aeabi_ddiv+0x198>
 8002492:	f001 fa71 	bl	8003978 <__clzsi2>
 8002496:	0002      	movs	r2, r0
 8002498:	0003      	movs	r3, r0
 800249a:	3215      	adds	r2, #21
 800249c:	3320      	adds	r3, #32
 800249e:	2a1c      	cmp	r2, #28
 80024a0:	dc00      	bgt.n	80024a4 <__aeabi_ddiv+0x474>
 80024a2:	e65f      	b.n	8002164 <__aeabi_ddiv+0x134>
 80024a4:	9900      	ldr	r1, [sp, #0]
 80024a6:	3808      	subs	r0, #8
 80024a8:	4081      	lsls	r1, r0
 80024aa:	2200      	movs	r2, #0
 80024ac:	468b      	mov	fp, r1
 80024ae:	e666      	b.n	800217e <__aeabi_ddiv+0x14e>
 80024b0:	2200      	movs	r2, #0
 80024b2:	002e      	movs	r6, r5
 80024b4:	2400      	movs	r4, #0
 80024b6:	4690      	mov	r8, r2
 80024b8:	4b65      	ldr	r3, [pc, #404]	@ (8002650 <__aeabi_ddiv+0x620>)
 80024ba:	e625      	b.n	8002108 <__aeabi_ddiv+0xd8>
 80024bc:	002e      	movs	r6, r5
 80024be:	2101      	movs	r1, #1
 80024c0:	1ac9      	subs	r1, r1, r3
 80024c2:	2938      	cmp	r1, #56	@ 0x38
 80024c4:	dd00      	ble.n	80024c8 <__aeabi_ddiv+0x498>
 80024c6:	e61b      	b.n	8002100 <__aeabi_ddiv+0xd0>
 80024c8:	291f      	cmp	r1, #31
 80024ca:	dc7e      	bgt.n	80025ca <__aeabi_ddiv+0x59a>
 80024cc:	4861      	ldr	r0, [pc, #388]	@ (8002654 <__aeabi_ddiv+0x624>)
 80024ce:	0014      	movs	r4, r2
 80024d0:	4450      	add	r0, sl
 80024d2:	465b      	mov	r3, fp
 80024d4:	4082      	lsls	r2, r0
 80024d6:	4083      	lsls	r3, r0
 80024d8:	40cc      	lsrs	r4, r1
 80024da:	1e50      	subs	r0, r2, #1
 80024dc:	4182      	sbcs	r2, r0
 80024de:	4323      	orrs	r3, r4
 80024e0:	431a      	orrs	r2, r3
 80024e2:	465b      	mov	r3, fp
 80024e4:	40cb      	lsrs	r3, r1
 80024e6:	0751      	lsls	r1, r2, #29
 80024e8:	d009      	beq.n	80024fe <__aeabi_ddiv+0x4ce>
 80024ea:	210f      	movs	r1, #15
 80024ec:	4011      	ands	r1, r2
 80024ee:	2904      	cmp	r1, #4
 80024f0:	d005      	beq.n	80024fe <__aeabi_ddiv+0x4ce>
 80024f2:	1d11      	adds	r1, r2, #4
 80024f4:	4291      	cmp	r1, r2
 80024f6:	4192      	sbcs	r2, r2
 80024f8:	4252      	negs	r2, r2
 80024fa:	189b      	adds	r3, r3, r2
 80024fc:	000a      	movs	r2, r1
 80024fe:	0219      	lsls	r1, r3, #8
 8002500:	d400      	bmi.n	8002504 <__aeabi_ddiv+0x4d4>
 8002502:	e09b      	b.n	800263c <__aeabi_ddiv+0x60c>
 8002504:	2200      	movs	r2, #0
 8002506:	2301      	movs	r3, #1
 8002508:	2400      	movs	r4, #0
 800250a:	4690      	mov	r8, r2
 800250c:	e5fc      	b.n	8002108 <__aeabi_ddiv+0xd8>
 800250e:	210f      	movs	r1, #15
 8002510:	4011      	ands	r1, r2
 8002512:	2904      	cmp	r1, #4
 8002514:	d100      	bne.n	8002518 <__aeabi_ddiv+0x4e8>
 8002516:	e773      	b.n	8002400 <__aeabi_ddiv+0x3d0>
 8002518:	1d11      	adds	r1, r2, #4
 800251a:	4291      	cmp	r1, r2
 800251c:	4192      	sbcs	r2, r2
 800251e:	4252      	negs	r2, r2
 8002520:	002e      	movs	r6, r5
 8002522:	08c9      	lsrs	r1, r1, #3
 8002524:	4493      	add	fp, r2
 8002526:	e76d      	b.n	8002404 <__aeabi_ddiv+0x3d4>
 8002528:	9b00      	ldr	r3, [sp, #0]
 800252a:	3d01      	subs	r5, #1
 800252c:	469c      	mov	ip, r3
 800252e:	4461      	add	r1, ip
 8002530:	428b      	cmp	r3, r1
 8002532:	d900      	bls.n	8002536 <__aeabi_ddiv+0x506>
 8002534:	e72c      	b.n	8002390 <__aeabi_ddiv+0x360>
 8002536:	428a      	cmp	r2, r1
 8002538:	d800      	bhi.n	800253c <__aeabi_ddiv+0x50c>
 800253a:	e729      	b.n	8002390 <__aeabi_ddiv+0x360>
 800253c:	1e85      	subs	r5, r0, #2
 800253e:	4461      	add	r1, ip
 8002540:	e726      	b.n	8002390 <__aeabi_ddiv+0x360>
 8002542:	9900      	ldr	r1, [sp, #0]
 8002544:	3b01      	subs	r3, #1
 8002546:	468c      	mov	ip, r1
 8002548:	4464      	add	r4, ip
 800254a:	42a1      	cmp	r1, r4
 800254c:	d900      	bls.n	8002550 <__aeabi_ddiv+0x520>
 800254e:	e72d      	b.n	80023ac <__aeabi_ddiv+0x37c>
 8002550:	42a2      	cmp	r2, r4
 8002552:	d800      	bhi.n	8002556 <__aeabi_ddiv+0x526>
 8002554:	e72a      	b.n	80023ac <__aeabi_ddiv+0x37c>
 8002556:	1e83      	subs	r3, r0, #2
 8002558:	4464      	add	r4, ip
 800255a:	e727      	b.n	80023ac <__aeabi_ddiv+0x37c>
 800255c:	4287      	cmp	r7, r0
 800255e:	d000      	beq.n	8002562 <__aeabi_ddiv+0x532>
 8002560:	e6fe      	b.n	8002360 <__aeabi_ddiv+0x330>
 8002562:	45a9      	cmp	r9, r5
 8002564:	d900      	bls.n	8002568 <__aeabi_ddiv+0x538>
 8002566:	e6fb      	b.n	8002360 <__aeabi_ddiv+0x330>
 8002568:	e6f5      	b.n	8002356 <__aeabi_ddiv+0x326>
 800256a:	42a2      	cmp	r2, r4
 800256c:	d800      	bhi.n	8002570 <__aeabi_ddiv+0x540>
 800256e:	e6b9      	b.n	80022e4 <__aeabi_ddiv+0x2b4>
 8002570:	1e83      	subs	r3, r0, #2
 8002572:	4464      	add	r4, ip
 8002574:	e6b6      	b.n	80022e4 <__aeabi_ddiv+0x2b4>
 8002576:	428a      	cmp	r2, r1
 8002578:	d800      	bhi.n	800257c <__aeabi_ddiv+0x54c>
 800257a:	e69f      	b.n	80022bc <__aeabi_ddiv+0x28c>
 800257c:	46bc      	mov	ip, r7
 800257e:	1e83      	subs	r3, r0, #2
 8002580:	4698      	mov	r8, r3
 8002582:	4461      	add	r1, ip
 8002584:	e69a      	b.n	80022bc <__aeabi_ddiv+0x28c>
 8002586:	000a      	movs	r2, r1
 8002588:	4284      	cmp	r4, r0
 800258a:	d000      	beq.n	800258e <__aeabi_ddiv+0x55e>
 800258c:	e72e      	b.n	80023ec <__aeabi_ddiv+0x3bc>
 800258e:	454b      	cmp	r3, r9
 8002590:	d000      	beq.n	8002594 <__aeabi_ddiv+0x564>
 8002592:	e72b      	b.n	80023ec <__aeabi_ddiv+0x3bc>
 8002594:	0035      	movs	r5, r6
 8002596:	e72c      	b.n	80023f2 <__aeabi_ddiv+0x3c2>
 8002598:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <__aeabi_ddiv+0x614>)
 800259a:	4a2f      	ldr	r2, [pc, #188]	@ (8002658 <__aeabi_ddiv+0x628>)
 800259c:	4453      	add	r3, sl
 800259e:	4592      	cmp	sl, r2
 80025a0:	db43      	blt.n	800262a <__aeabi_ddiv+0x5fa>
 80025a2:	2201      	movs	r2, #1
 80025a4:	2100      	movs	r1, #0
 80025a6:	4493      	add	fp, r2
 80025a8:	e72c      	b.n	8002404 <__aeabi_ddiv+0x3d4>
 80025aa:	42ac      	cmp	r4, r5
 80025ac:	d800      	bhi.n	80025b0 <__aeabi_ddiv+0x580>
 80025ae:	e6d7      	b.n	8002360 <__aeabi_ddiv+0x330>
 80025b0:	2302      	movs	r3, #2
 80025b2:	425b      	negs	r3, r3
 80025b4:	469c      	mov	ip, r3
 80025b6:	9900      	ldr	r1, [sp, #0]
 80025b8:	444d      	add	r5, r9
 80025ba:	454d      	cmp	r5, r9
 80025bc:	419b      	sbcs	r3, r3
 80025be:	44e3      	add	fp, ip
 80025c0:	468c      	mov	ip, r1
 80025c2:	425b      	negs	r3, r3
 80025c4:	4463      	add	r3, ip
 80025c6:	18c0      	adds	r0, r0, r3
 80025c8:	e6cc      	b.n	8002364 <__aeabi_ddiv+0x334>
 80025ca:	201f      	movs	r0, #31
 80025cc:	4240      	negs	r0, r0
 80025ce:	1ac3      	subs	r3, r0, r3
 80025d0:	4658      	mov	r0, fp
 80025d2:	40d8      	lsrs	r0, r3
 80025d4:	2920      	cmp	r1, #32
 80025d6:	d004      	beq.n	80025e2 <__aeabi_ddiv+0x5b2>
 80025d8:	4659      	mov	r1, fp
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <__aeabi_ddiv+0x62c>)
 80025dc:	4453      	add	r3, sl
 80025de:	4099      	lsls	r1, r3
 80025e0:	430a      	orrs	r2, r1
 80025e2:	1e53      	subs	r3, r2, #1
 80025e4:	419a      	sbcs	r2, r3
 80025e6:	2307      	movs	r3, #7
 80025e8:	0019      	movs	r1, r3
 80025ea:	4302      	orrs	r2, r0
 80025ec:	2400      	movs	r4, #0
 80025ee:	4011      	ands	r1, r2
 80025f0:	4213      	tst	r3, r2
 80025f2:	d009      	beq.n	8002608 <__aeabi_ddiv+0x5d8>
 80025f4:	3308      	adds	r3, #8
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d01d      	beq.n	8002638 <__aeabi_ddiv+0x608>
 80025fc:	1d13      	adds	r3, r2, #4
 80025fe:	4293      	cmp	r3, r2
 8002600:	4189      	sbcs	r1, r1
 8002602:	001a      	movs	r2, r3
 8002604:	4249      	negs	r1, r1
 8002606:	0749      	lsls	r1, r1, #29
 8002608:	08d2      	lsrs	r2, r2, #3
 800260a:	430a      	orrs	r2, r1
 800260c:	4690      	mov	r8, r2
 800260e:	2300      	movs	r3, #0
 8002610:	e57a      	b.n	8002108 <__aeabi_ddiv+0xd8>
 8002612:	4649      	mov	r1, r9
 8002614:	9f00      	ldr	r7, [sp, #0]
 8002616:	004d      	lsls	r5, r1, #1
 8002618:	454d      	cmp	r5, r9
 800261a:	4189      	sbcs	r1, r1
 800261c:	46bc      	mov	ip, r7
 800261e:	4249      	negs	r1, r1
 8002620:	4461      	add	r1, ip
 8002622:	46a9      	mov	r9, r5
 8002624:	3a02      	subs	r2, #2
 8002626:	1864      	adds	r4, r4, r1
 8002628:	e7ae      	b.n	8002588 <__aeabi_ddiv+0x558>
 800262a:	2201      	movs	r2, #1
 800262c:	4252      	negs	r2, r2
 800262e:	e746      	b.n	80024be <__aeabi_ddiv+0x48e>
 8002630:	4599      	cmp	r9, r3
 8002632:	d3ee      	bcc.n	8002612 <__aeabi_ddiv+0x5e2>
 8002634:	000a      	movs	r2, r1
 8002636:	e7aa      	b.n	800258e <__aeabi_ddiv+0x55e>
 8002638:	2100      	movs	r1, #0
 800263a:	e7e5      	b.n	8002608 <__aeabi_ddiv+0x5d8>
 800263c:	0759      	lsls	r1, r3, #29
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	0b1c      	lsrs	r4, r3, #12
 8002642:	e7e1      	b.n	8002608 <__aeabi_ddiv+0x5d8>
 8002644:	000003ff 	.word	0x000003ff
 8002648:	feffffff 	.word	0xfeffffff
 800264c:	000007fe 	.word	0x000007fe
 8002650:	000007ff 	.word	0x000007ff
 8002654:	0000041e 	.word	0x0000041e
 8002658:	fffffc02 	.word	0xfffffc02
 800265c:	0000043e 	.word	0x0000043e

08002660 <__eqdf2>:
 8002660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002662:	4657      	mov	r7, sl
 8002664:	46de      	mov	lr, fp
 8002666:	464e      	mov	r6, r9
 8002668:	4645      	mov	r5, r8
 800266a:	b5e0      	push	{r5, r6, r7, lr}
 800266c:	000d      	movs	r5, r1
 800266e:	0004      	movs	r4, r0
 8002670:	0fe8      	lsrs	r0, r5, #31
 8002672:	4683      	mov	fp, r0
 8002674:	0309      	lsls	r1, r1, #12
 8002676:	0fd8      	lsrs	r0, r3, #31
 8002678:	0b09      	lsrs	r1, r1, #12
 800267a:	4682      	mov	sl, r0
 800267c:	4819      	ldr	r0, [pc, #100]	@ (80026e4 <__eqdf2+0x84>)
 800267e:	468c      	mov	ip, r1
 8002680:	031f      	lsls	r7, r3, #12
 8002682:	0069      	lsls	r1, r5, #1
 8002684:	005e      	lsls	r6, r3, #1
 8002686:	0d49      	lsrs	r1, r1, #21
 8002688:	0b3f      	lsrs	r7, r7, #12
 800268a:	0d76      	lsrs	r6, r6, #21
 800268c:	4281      	cmp	r1, r0
 800268e:	d018      	beq.n	80026c2 <__eqdf2+0x62>
 8002690:	4286      	cmp	r6, r0
 8002692:	d00f      	beq.n	80026b4 <__eqdf2+0x54>
 8002694:	2001      	movs	r0, #1
 8002696:	42b1      	cmp	r1, r6
 8002698:	d10d      	bne.n	80026b6 <__eqdf2+0x56>
 800269a:	45bc      	cmp	ip, r7
 800269c:	d10b      	bne.n	80026b6 <__eqdf2+0x56>
 800269e:	4294      	cmp	r4, r2
 80026a0:	d109      	bne.n	80026b6 <__eqdf2+0x56>
 80026a2:	45d3      	cmp	fp, sl
 80026a4:	d01c      	beq.n	80026e0 <__eqdf2+0x80>
 80026a6:	2900      	cmp	r1, #0
 80026a8:	d105      	bne.n	80026b6 <__eqdf2+0x56>
 80026aa:	4660      	mov	r0, ip
 80026ac:	4320      	orrs	r0, r4
 80026ae:	1e43      	subs	r3, r0, #1
 80026b0:	4198      	sbcs	r0, r3
 80026b2:	e000      	b.n	80026b6 <__eqdf2+0x56>
 80026b4:	2001      	movs	r0, #1
 80026b6:	bcf0      	pop	{r4, r5, r6, r7}
 80026b8:	46bb      	mov	fp, r7
 80026ba:	46b2      	mov	sl, r6
 80026bc:	46a9      	mov	r9, r5
 80026be:	46a0      	mov	r8, r4
 80026c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c2:	2001      	movs	r0, #1
 80026c4:	428e      	cmp	r6, r1
 80026c6:	d1f6      	bne.n	80026b6 <__eqdf2+0x56>
 80026c8:	4661      	mov	r1, ip
 80026ca:	4339      	orrs	r1, r7
 80026cc:	000f      	movs	r7, r1
 80026ce:	4317      	orrs	r7, r2
 80026d0:	4327      	orrs	r7, r4
 80026d2:	d1f0      	bne.n	80026b6 <__eqdf2+0x56>
 80026d4:	465b      	mov	r3, fp
 80026d6:	4652      	mov	r2, sl
 80026d8:	1a98      	subs	r0, r3, r2
 80026da:	1e43      	subs	r3, r0, #1
 80026dc:	4198      	sbcs	r0, r3
 80026de:	e7ea      	b.n	80026b6 <__eqdf2+0x56>
 80026e0:	2000      	movs	r0, #0
 80026e2:	e7e8      	b.n	80026b6 <__eqdf2+0x56>
 80026e4:	000007ff 	.word	0x000007ff

080026e8 <__gedf2>:
 80026e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ea:	4657      	mov	r7, sl
 80026ec:	464e      	mov	r6, r9
 80026ee:	4645      	mov	r5, r8
 80026f0:	46de      	mov	lr, fp
 80026f2:	b5e0      	push	{r5, r6, r7, lr}
 80026f4:	000d      	movs	r5, r1
 80026f6:	030e      	lsls	r6, r1, #12
 80026f8:	0049      	lsls	r1, r1, #1
 80026fa:	0d49      	lsrs	r1, r1, #21
 80026fc:	468a      	mov	sl, r1
 80026fe:	0fdf      	lsrs	r7, r3, #31
 8002700:	0fe9      	lsrs	r1, r5, #31
 8002702:	46bc      	mov	ip, r7
 8002704:	b083      	sub	sp, #12
 8002706:	4f2f      	ldr	r7, [pc, #188]	@ (80027c4 <__gedf2+0xdc>)
 8002708:	0004      	movs	r4, r0
 800270a:	4680      	mov	r8, r0
 800270c:	9101      	str	r1, [sp, #4]
 800270e:	0058      	lsls	r0, r3, #1
 8002710:	0319      	lsls	r1, r3, #12
 8002712:	4691      	mov	r9, r2
 8002714:	0b36      	lsrs	r6, r6, #12
 8002716:	0b09      	lsrs	r1, r1, #12
 8002718:	0d40      	lsrs	r0, r0, #21
 800271a:	45ba      	cmp	sl, r7
 800271c:	d01d      	beq.n	800275a <__gedf2+0x72>
 800271e:	42b8      	cmp	r0, r7
 8002720:	d00d      	beq.n	800273e <__gedf2+0x56>
 8002722:	4657      	mov	r7, sl
 8002724:	2f00      	cmp	r7, #0
 8002726:	d12a      	bne.n	800277e <__gedf2+0x96>
 8002728:	4334      	orrs	r4, r6
 800272a:	2800      	cmp	r0, #0
 800272c:	d124      	bne.n	8002778 <__gedf2+0x90>
 800272e:	430a      	orrs	r2, r1
 8002730:	d036      	beq.n	80027a0 <__gedf2+0xb8>
 8002732:	2c00      	cmp	r4, #0
 8002734:	d141      	bne.n	80027ba <__gedf2+0xd2>
 8002736:	4663      	mov	r3, ip
 8002738:	0058      	lsls	r0, r3, #1
 800273a:	3801      	subs	r0, #1
 800273c:	e015      	b.n	800276a <__gedf2+0x82>
 800273e:	4311      	orrs	r1, r2
 8002740:	d138      	bne.n	80027b4 <__gedf2+0xcc>
 8002742:	4653      	mov	r3, sl
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <__gedf2+0x64>
 8002748:	4326      	orrs	r6, r4
 800274a:	d0f4      	beq.n	8002736 <__gedf2+0x4e>
 800274c:	9b01      	ldr	r3, [sp, #4]
 800274e:	4563      	cmp	r3, ip
 8002750:	d107      	bne.n	8002762 <__gedf2+0x7a>
 8002752:	9b01      	ldr	r3, [sp, #4]
 8002754:	0058      	lsls	r0, r3, #1
 8002756:	3801      	subs	r0, #1
 8002758:	e007      	b.n	800276a <__gedf2+0x82>
 800275a:	4326      	orrs	r6, r4
 800275c:	d12a      	bne.n	80027b4 <__gedf2+0xcc>
 800275e:	4550      	cmp	r0, sl
 8002760:	d021      	beq.n	80027a6 <__gedf2+0xbe>
 8002762:	2001      	movs	r0, #1
 8002764:	9b01      	ldr	r3, [sp, #4]
 8002766:	425f      	negs	r7, r3
 8002768:	4338      	orrs	r0, r7
 800276a:	b003      	add	sp, #12
 800276c:	bcf0      	pop	{r4, r5, r6, r7}
 800276e:	46bb      	mov	fp, r7
 8002770:	46b2      	mov	sl, r6
 8002772:	46a9      	mov	r9, r5
 8002774:	46a0      	mov	r8, r4
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002778:	2c00      	cmp	r4, #0
 800277a:	d0dc      	beq.n	8002736 <__gedf2+0x4e>
 800277c:	e7e6      	b.n	800274c <__gedf2+0x64>
 800277e:	2800      	cmp	r0, #0
 8002780:	d0ef      	beq.n	8002762 <__gedf2+0x7a>
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	4563      	cmp	r3, ip
 8002786:	d1ec      	bne.n	8002762 <__gedf2+0x7a>
 8002788:	4582      	cmp	sl, r0
 800278a:	dcea      	bgt.n	8002762 <__gedf2+0x7a>
 800278c:	dbe1      	blt.n	8002752 <__gedf2+0x6a>
 800278e:	428e      	cmp	r6, r1
 8002790:	d8e7      	bhi.n	8002762 <__gedf2+0x7a>
 8002792:	d1de      	bne.n	8002752 <__gedf2+0x6a>
 8002794:	45c8      	cmp	r8, r9
 8002796:	d8e4      	bhi.n	8002762 <__gedf2+0x7a>
 8002798:	2000      	movs	r0, #0
 800279a:	45c8      	cmp	r8, r9
 800279c:	d2e5      	bcs.n	800276a <__gedf2+0x82>
 800279e:	e7d8      	b.n	8002752 <__gedf2+0x6a>
 80027a0:	2c00      	cmp	r4, #0
 80027a2:	d0e2      	beq.n	800276a <__gedf2+0x82>
 80027a4:	e7dd      	b.n	8002762 <__gedf2+0x7a>
 80027a6:	4311      	orrs	r1, r2
 80027a8:	d104      	bne.n	80027b4 <__gedf2+0xcc>
 80027aa:	9b01      	ldr	r3, [sp, #4]
 80027ac:	4563      	cmp	r3, ip
 80027ae:	d1d8      	bne.n	8002762 <__gedf2+0x7a>
 80027b0:	2000      	movs	r0, #0
 80027b2:	e7da      	b.n	800276a <__gedf2+0x82>
 80027b4:	2002      	movs	r0, #2
 80027b6:	4240      	negs	r0, r0
 80027b8:	e7d7      	b.n	800276a <__gedf2+0x82>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	4563      	cmp	r3, ip
 80027be:	d0e6      	beq.n	800278e <__gedf2+0xa6>
 80027c0:	e7cf      	b.n	8002762 <__gedf2+0x7a>
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	000007ff 	.word	0x000007ff

080027c8 <__ledf2>:
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	4657      	mov	r7, sl
 80027cc:	464e      	mov	r6, r9
 80027ce:	4645      	mov	r5, r8
 80027d0:	46de      	mov	lr, fp
 80027d2:	b5e0      	push	{r5, r6, r7, lr}
 80027d4:	000d      	movs	r5, r1
 80027d6:	030e      	lsls	r6, r1, #12
 80027d8:	0049      	lsls	r1, r1, #1
 80027da:	0d49      	lsrs	r1, r1, #21
 80027dc:	468a      	mov	sl, r1
 80027de:	0fdf      	lsrs	r7, r3, #31
 80027e0:	0fe9      	lsrs	r1, r5, #31
 80027e2:	46bc      	mov	ip, r7
 80027e4:	b083      	sub	sp, #12
 80027e6:	4f2e      	ldr	r7, [pc, #184]	@ (80028a0 <__ledf2+0xd8>)
 80027e8:	0004      	movs	r4, r0
 80027ea:	4680      	mov	r8, r0
 80027ec:	9101      	str	r1, [sp, #4]
 80027ee:	0058      	lsls	r0, r3, #1
 80027f0:	0319      	lsls	r1, r3, #12
 80027f2:	4691      	mov	r9, r2
 80027f4:	0b36      	lsrs	r6, r6, #12
 80027f6:	0b09      	lsrs	r1, r1, #12
 80027f8:	0d40      	lsrs	r0, r0, #21
 80027fa:	45ba      	cmp	sl, r7
 80027fc:	d01e      	beq.n	800283c <__ledf2+0x74>
 80027fe:	42b8      	cmp	r0, r7
 8002800:	d00d      	beq.n	800281e <__ledf2+0x56>
 8002802:	4657      	mov	r7, sl
 8002804:	2f00      	cmp	r7, #0
 8002806:	d127      	bne.n	8002858 <__ledf2+0x90>
 8002808:	4334      	orrs	r4, r6
 800280a:	2800      	cmp	r0, #0
 800280c:	d133      	bne.n	8002876 <__ledf2+0xae>
 800280e:	430a      	orrs	r2, r1
 8002810:	d034      	beq.n	800287c <__ledf2+0xb4>
 8002812:	2c00      	cmp	r4, #0
 8002814:	d140      	bne.n	8002898 <__ledf2+0xd0>
 8002816:	4663      	mov	r3, ip
 8002818:	0058      	lsls	r0, r3, #1
 800281a:	3801      	subs	r0, #1
 800281c:	e015      	b.n	800284a <__ledf2+0x82>
 800281e:	4311      	orrs	r1, r2
 8002820:	d112      	bne.n	8002848 <__ledf2+0x80>
 8002822:	4653      	mov	r3, sl
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <__ledf2+0x64>
 8002828:	4326      	orrs	r6, r4
 800282a:	d0f4      	beq.n	8002816 <__ledf2+0x4e>
 800282c:	9b01      	ldr	r3, [sp, #4]
 800282e:	4563      	cmp	r3, ip
 8002830:	d01d      	beq.n	800286e <__ledf2+0xa6>
 8002832:	2001      	movs	r0, #1
 8002834:	9b01      	ldr	r3, [sp, #4]
 8002836:	425f      	negs	r7, r3
 8002838:	4338      	orrs	r0, r7
 800283a:	e006      	b.n	800284a <__ledf2+0x82>
 800283c:	4326      	orrs	r6, r4
 800283e:	d103      	bne.n	8002848 <__ledf2+0x80>
 8002840:	4550      	cmp	r0, sl
 8002842:	d1f6      	bne.n	8002832 <__ledf2+0x6a>
 8002844:	4311      	orrs	r1, r2
 8002846:	d01c      	beq.n	8002882 <__ledf2+0xba>
 8002848:	2002      	movs	r0, #2
 800284a:	b003      	add	sp, #12
 800284c:	bcf0      	pop	{r4, r5, r6, r7}
 800284e:	46bb      	mov	fp, r7
 8002850:	46b2      	mov	sl, r6
 8002852:	46a9      	mov	r9, r5
 8002854:	46a0      	mov	r8, r4
 8002856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002858:	2800      	cmp	r0, #0
 800285a:	d0ea      	beq.n	8002832 <__ledf2+0x6a>
 800285c:	9b01      	ldr	r3, [sp, #4]
 800285e:	4563      	cmp	r3, ip
 8002860:	d1e7      	bne.n	8002832 <__ledf2+0x6a>
 8002862:	4582      	cmp	sl, r0
 8002864:	dce5      	bgt.n	8002832 <__ledf2+0x6a>
 8002866:	db02      	blt.n	800286e <__ledf2+0xa6>
 8002868:	428e      	cmp	r6, r1
 800286a:	d8e2      	bhi.n	8002832 <__ledf2+0x6a>
 800286c:	d00e      	beq.n	800288c <__ledf2+0xc4>
 800286e:	9b01      	ldr	r3, [sp, #4]
 8002870:	0058      	lsls	r0, r3, #1
 8002872:	3801      	subs	r0, #1
 8002874:	e7e9      	b.n	800284a <__ledf2+0x82>
 8002876:	2c00      	cmp	r4, #0
 8002878:	d0cd      	beq.n	8002816 <__ledf2+0x4e>
 800287a:	e7d7      	b.n	800282c <__ledf2+0x64>
 800287c:	2c00      	cmp	r4, #0
 800287e:	d0e4      	beq.n	800284a <__ledf2+0x82>
 8002880:	e7d7      	b.n	8002832 <__ledf2+0x6a>
 8002882:	9b01      	ldr	r3, [sp, #4]
 8002884:	2000      	movs	r0, #0
 8002886:	4563      	cmp	r3, ip
 8002888:	d0df      	beq.n	800284a <__ledf2+0x82>
 800288a:	e7d2      	b.n	8002832 <__ledf2+0x6a>
 800288c:	45c8      	cmp	r8, r9
 800288e:	d8d0      	bhi.n	8002832 <__ledf2+0x6a>
 8002890:	2000      	movs	r0, #0
 8002892:	45c8      	cmp	r8, r9
 8002894:	d2d9      	bcs.n	800284a <__ledf2+0x82>
 8002896:	e7ea      	b.n	800286e <__ledf2+0xa6>
 8002898:	9b01      	ldr	r3, [sp, #4]
 800289a:	4563      	cmp	r3, ip
 800289c:	d0e4      	beq.n	8002868 <__ledf2+0xa0>
 800289e:	e7c8      	b.n	8002832 <__ledf2+0x6a>
 80028a0:	000007ff 	.word	0x000007ff

080028a4 <__aeabi_dmul>:
 80028a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a6:	4657      	mov	r7, sl
 80028a8:	464e      	mov	r6, r9
 80028aa:	46de      	mov	lr, fp
 80028ac:	4645      	mov	r5, r8
 80028ae:	b5e0      	push	{r5, r6, r7, lr}
 80028b0:	001f      	movs	r7, r3
 80028b2:	030b      	lsls	r3, r1, #12
 80028b4:	0b1b      	lsrs	r3, r3, #12
 80028b6:	0016      	movs	r6, r2
 80028b8:	469a      	mov	sl, r3
 80028ba:	0fca      	lsrs	r2, r1, #31
 80028bc:	004b      	lsls	r3, r1, #1
 80028be:	0004      	movs	r4, r0
 80028c0:	4691      	mov	r9, r2
 80028c2:	b085      	sub	sp, #20
 80028c4:	0d5b      	lsrs	r3, r3, #21
 80028c6:	d100      	bne.n	80028ca <__aeabi_dmul+0x26>
 80028c8:	e1cf      	b.n	8002c6a <__aeabi_dmul+0x3c6>
 80028ca:	4acd      	ldr	r2, [pc, #820]	@ (8002c00 <__aeabi_dmul+0x35c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d055      	beq.n	800297c <__aeabi_dmul+0xd8>
 80028d0:	4651      	mov	r1, sl
 80028d2:	0f42      	lsrs	r2, r0, #29
 80028d4:	00c9      	lsls	r1, r1, #3
 80028d6:	430a      	orrs	r2, r1
 80028d8:	2180      	movs	r1, #128	@ 0x80
 80028da:	0409      	lsls	r1, r1, #16
 80028dc:	4311      	orrs	r1, r2
 80028de:	00c2      	lsls	r2, r0, #3
 80028e0:	4690      	mov	r8, r2
 80028e2:	4ac8      	ldr	r2, [pc, #800]	@ (8002c04 <__aeabi_dmul+0x360>)
 80028e4:	468a      	mov	sl, r1
 80028e6:	4693      	mov	fp, r2
 80028e8:	449b      	add	fp, r3
 80028ea:	2300      	movs	r3, #0
 80028ec:	2500      	movs	r5, #0
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	033c      	lsls	r4, r7, #12
 80028f2:	007b      	lsls	r3, r7, #1
 80028f4:	0ffa      	lsrs	r2, r7, #31
 80028f6:	9601      	str	r6, [sp, #4]
 80028f8:	0b24      	lsrs	r4, r4, #12
 80028fa:	0d5b      	lsrs	r3, r3, #21
 80028fc:	9200      	str	r2, [sp, #0]
 80028fe:	d100      	bne.n	8002902 <__aeabi_dmul+0x5e>
 8002900:	e188      	b.n	8002c14 <__aeabi_dmul+0x370>
 8002902:	4abf      	ldr	r2, [pc, #764]	@ (8002c00 <__aeabi_dmul+0x35c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d100      	bne.n	800290a <__aeabi_dmul+0x66>
 8002908:	e092      	b.n	8002a30 <__aeabi_dmul+0x18c>
 800290a:	4abe      	ldr	r2, [pc, #760]	@ (8002c04 <__aeabi_dmul+0x360>)
 800290c:	4694      	mov	ip, r2
 800290e:	4463      	add	r3, ip
 8002910:	449b      	add	fp, r3
 8002912:	2d0a      	cmp	r5, #10
 8002914:	dc42      	bgt.n	800299c <__aeabi_dmul+0xf8>
 8002916:	00e4      	lsls	r4, r4, #3
 8002918:	0f73      	lsrs	r3, r6, #29
 800291a:	4323      	orrs	r3, r4
 800291c:	2480      	movs	r4, #128	@ 0x80
 800291e:	4649      	mov	r1, r9
 8002920:	0424      	lsls	r4, r4, #16
 8002922:	431c      	orrs	r4, r3
 8002924:	00f3      	lsls	r3, r6, #3
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	9b00      	ldr	r3, [sp, #0]
 800292a:	2000      	movs	r0, #0
 800292c:	4059      	eors	r1, r3
 800292e:	b2cb      	uxtb	r3, r1
 8002930:	9303      	str	r3, [sp, #12]
 8002932:	2d02      	cmp	r5, #2
 8002934:	dc00      	bgt.n	8002938 <__aeabi_dmul+0x94>
 8002936:	e094      	b.n	8002a62 <__aeabi_dmul+0x1be>
 8002938:	2301      	movs	r3, #1
 800293a:	40ab      	lsls	r3, r5
 800293c:	001d      	movs	r5, r3
 800293e:	23a6      	movs	r3, #166	@ 0xa6
 8002940:	002a      	movs	r2, r5
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	401a      	ands	r2, r3
 8002946:	421d      	tst	r5, r3
 8002948:	d000      	beq.n	800294c <__aeabi_dmul+0xa8>
 800294a:	e229      	b.n	8002da0 <__aeabi_dmul+0x4fc>
 800294c:	2390      	movs	r3, #144	@ 0x90
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	421d      	tst	r5, r3
 8002952:	d100      	bne.n	8002956 <__aeabi_dmul+0xb2>
 8002954:	e24d      	b.n	8002df2 <__aeabi_dmul+0x54e>
 8002956:	2300      	movs	r3, #0
 8002958:	2480      	movs	r4, #128	@ 0x80
 800295a:	4699      	mov	r9, r3
 800295c:	0324      	lsls	r4, r4, #12
 800295e:	4ba8      	ldr	r3, [pc, #672]	@ (8002c00 <__aeabi_dmul+0x35c>)
 8002960:	0010      	movs	r0, r2
 8002962:	464a      	mov	r2, r9
 8002964:	051b      	lsls	r3, r3, #20
 8002966:	4323      	orrs	r3, r4
 8002968:	07d2      	lsls	r2, r2, #31
 800296a:	4313      	orrs	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	b005      	add	sp, #20
 8002970:	bcf0      	pop	{r4, r5, r6, r7}
 8002972:	46bb      	mov	fp, r7
 8002974:	46b2      	mov	sl, r6
 8002976:	46a9      	mov	r9, r5
 8002978:	46a0      	mov	r8, r4
 800297a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800297c:	4652      	mov	r2, sl
 800297e:	4302      	orrs	r2, r0
 8002980:	4690      	mov	r8, r2
 8002982:	d000      	beq.n	8002986 <__aeabi_dmul+0xe2>
 8002984:	e1ac      	b.n	8002ce0 <__aeabi_dmul+0x43c>
 8002986:	469b      	mov	fp, r3
 8002988:	2302      	movs	r3, #2
 800298a:	4692      	mov	sl, r2
 800298c:	2508      	movs	r5, #8
 800298e:	9302      	str	r3, [sp, #8]
 8002990:	e7ae      	b.n	80028f0 <__aeabi_dmul+0x4c>
 8002992:	9b00      	ldr	r3, [sp, #0]
 8002994:	46a2      	mov	sl, r4
 8002996:	4699      	mov	r9, r3
 8002998:	9b01      	ldr	r3, [sp, #4]
 800299a:	4698      	mov	r8, r3
 800299c:	9b02      	ldr	r3, [sp, #8]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d100      	bne.n	80029a4 <__aeabi_dmul+0x100>
 80029a2:	e1ca      	b.n	8002d3a <__aeabi_dmul+0x496>
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d100      	bne.n	80029aa <__aeabi_dmul+0x106>
 80029a8:	e192      	b.n	8002cd0 <__aeabi_dmul+0x42c>
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d110      	bne.n	80029d0 <__aeabi_dmul+0x12c>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2400      	movs	r4, #0
 80029b2:	2200      	movs	r2, #0
 80029b4:	e7d4      	b.n	8002960 <__aeabi_dmul+0xbc>
 80029b6:	2201      	movs	r2, #1
 80029b8:	087b      	lsrs	r3, r7, #1
 80029ba:	403a      	ands	r2, r7
 80029bc:	4313      	orrs	r3, r2
 80029be:	4652      	mov	r2, sl
 80029c0:	07d2      	lsls	r2, r2, #31
 80029c2:	4313      	orrs	r3, r2
 80029c4:	4698      	mov	r8, r3
 80029c6:	4653      	mov	r3, sl
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	469a      	mov	sl, r3
 80029cc:	9b03      	ldr	r3, [sp, #12]
 80029ce:	4699      	mov	r9, r3
 80029d0:	465b      	mov	r3, fp
 80029d2:	1c58      	adds	r0, r3, #1
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	445b      	add	r3, fp
 80029da:	2b00      	cmp	r3, #0
 80029dc:	dc00      	bgt.n	80029e0 <__aeabi_dmul+0x13c>
 80029de:	e1b1      	b.n	8002d44 <__aeabi_dmul+0x4a0>
 80029e0:	4642      	mov	r2, r8
 80029e2:	0752      	lsls	r2, r2, #29
 80029e4:	d00b      	beq.n	80029fe <__aeabi_dmul+0x15a>
 80029e6:	220f      	movs	r2, #15
 80029e8:	4641      	mov	r1, r8
 80029ea:	400a      	ands	r2, r1
 80029ec:	2a04      	cmp	r2, #4
 80029ee:	d006      	beq.n	80029fe <__aeabi_dmul+0x15a>
 80029f0:	4642      	mov	r2, r8
 80029f2:	1d11      	adds	r1, r2, #4
 80029f4:	4541      	cmp	r1, r8
 80029f6:	4192      	sbcs	r2, r2
 80029f8:	4688      	mov	r8, r1
 80029fa:	4252      	negs	r2, r2
 80029fc:	4492      	add	sl, r2
 80029fe:	4652      	mov	r2, sl
 8002a00:	01d2      	lsls	r2, r2, #7
 8002a02:	d506      	bpl.n	8002a12 <__aeabi_dmul+0x16e>
 8002a04:	4652      	mov	r2, sl
 8002a06:	4b80      	ldr	r3, [pc, #512]	@ (8002c08 <__aeabi_dmul+0x364>)
 8002a08:	401a      	ands	r2, r3
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	4692      	mov	sl, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	18c3      	adds	r3, r0, r3
 8002a12:	4a7e      	ldr	r2, [pc, #504]	@ (8002c0c <__aeabi_dmul+0x368>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	dd00      	ble.n	8002a1a <__aeabi_dmul+0x176>
 8002a18:	e18f      	b.n	8002d3a <__aeabi_dmul+0x496>
 8002a1a:	4642      	mov	r2, r8
 8002a1c:	08d1      	lsrs	r1, r2, #3
 8002a1e:	4652      	mov	r2, sl
 8002a20:	0752      	lsls	r2, r2, #29
 8002a22:	430a      	orrs	r2, r1
 8002a24:	4651      	mov	r1, sl
 8002a26:	055b      	lsls	r3, r3, #21
 8002a28:	024c      	lsls	r4, r1, #9
 8002a2a:	0b24      	lsrs	r4, r4, #12
 8002a2c:	0d5b      	lsrs	r3, r3, #21
 8002a2e:	e797      	b.n	8002960 <__aeabi_dmul+0xbc>
 8002a30:	4b73      	ldr	r3, [pc, #460]	@ (8002c00 <__aeabi_dmul+0x35c>)
 8002a32:	4326      	orrs	r6, r4
 8002a34:	469c      	mov	ip, r3
 8002a36:	44e3      	add	fp, ip
 8002a38:	2e00      	cmp	r6, #0
 8002a3a:	d100      	bne.n	8002a3e <__aeabi_dmul+0x19a>
 8002a3c:	e16f      	b.n	8002d1e <__aeabi_dmul+0x47a>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	4649      	mov	r1, r9
 8002a42:	431d      	orrs	r5, r3
 8002a44:	9b00      	ldr	r3, [sp, #0]
 8002a46:	4059      	eors	r1, r3
 8002a48:	b2cb      	uxtb	r3, r1
 8002a4a:	9303      	str	r3, [sp, #12]
 8002a4c:	2d0a      	cmp	r5, #10
 8002a4e:	dd00      	ble.n	8002a52 <__aeabi_dmul+0x1ae>
 8002a50:	e133      	b.n	8002cba <__aeabi_dmul+0x416>
 8002a52:	2301      	movs	r3, #1
 8002a54:	40ab      	lsls	r3, r5
 8002a56:	001d      	movs	r5, r3
 8002a58:	2303      	movs	r3, #3
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	2288      	movs	r2, #136	@ 0x88
 8002a5e:	422a      	tst	r2, r5
 8002a60:	d197      	bne.n	8002992 <__aeabi_dmul+0xee>
 8002a62:	4642      	mov	r2, r8
 8002a64:	4643      	mov	r3, r8
 8002a66:	0412      	lsls	r2, r2, #16
 8002a68:	0c12      	lsrs	r2, r2, #16
 8002a6a:	0016      	movs	r6, r2
 8002a6c:	9801      	ldr	r0, [sp, #4]
 8002a6e:	0c1d      	lsrs	r5, r3, #16
 8002a70:	0c03      	lsrs	r3, r0, #16
 8002a72:	0400      	lsls	r0, r0, #16
 8002a74:	0c00      	lsrs	r0, r0, #16
 8002a76:	4346      	muls	r6, r0
 8002a78:	46b4      	mov	ip, r6
 8002a7a:	001e      	movs	r6, r3
 8002a7c:	436e      	muls	r6, r5
 8002a7e:	9600      	str	r6, [sp, #0]
 8002a80:	0016      	movs	r6, r2
 8002a82:	0007      	movs	r7, r0
 8002a84:	435e      	muls	r6, r3
 8002a86:	4661      	mov	r1, ip
 8002a88:	46b0      	mov	r8, r6
 8002a8a:	436f      	muls	r7, r5
 8002a8c:	0c0e      	lsrs	r6, r1, #16
 8002a8e:	44b8      	add	r8, r7
 8002a90:	4446      	add	r6, r8
 8002a92:	42b7      	cmp	r7, r6
 8002a94:	d905      	bls.n	8002aa2 <__aeabi_dmul+0x1fe>
 8002a96:	2180      	movs	r1, #128	@ 0x80
 8002a98:	0249      	lsls	r1, r1, #9
 8002a9a:	4688      	mov	r8, r1
 8002a9c:	9f00      	ldr	r7, [sp, #0]
 8002a9e:	4447      	add	r7, r8
 8002aa0:	9700      	str	r7, [sp, #0]
 8002aa2:	4661      	mov	r1, ip
 8002aa4:	0409      	lsls	r1, r1, #16
 8002aa6:	0c09      	lsrs	r1, r1, #16
 8002aa8:	0c37      	lsrs	r7, r6, #16
 8002aaa:	0436      	lsls	r6, r6, #16
 8002aac:	468c      	mov	ip, r1
 8002aae:	0031      	movs	r1, r6
 8002ab0:	4461      	add	r1, ip
 8002ab2:	9101      	str	r1, [sp, #4]
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	0c26      	lsrs	r6, r4, #16
 8002ab8:	0424      	lsls	r4, r4, #16
 8002aba:	0c24      	lsrs	r4, r4, #16
 8002abc:	4361      	muls	r1, r4
 8002abe:	468c      	mov	ip, r1
 8002ac0:	0021      	movs	r1, r4
 8002ac2:	4369      	muls	r1, r5
 8002ac4:	4689      	mov	r9, r1
 8002ac6:	4661      	mov	r1, ip
 8002ac8:	0c09      	lsrs	r1, r1, #16
 8002aca:	4688      	mov	r8, r1
 8002acc:	4372      	muls	r2, r6
 8002ace:	444a      	add	r2, r9
 8002ad0:	4442      	add	r2, r8
 8002ad2:	4375      	muls	r5, r6
 8002ad4:	4591      	cmp	r9, r2
 8002ad6:	d903      	bls.n	8002ae0 <__aeabi_dmul+0x23c>
 8002ad8:	2180      	movs	r1, #128	@ 0x80
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4688      	mov	r8, r1
 8002ade:	4445      	add	r5, r8
 8002ae0:	0c11      	lsrs	r1, r2, #16
 8002ae2:	4688      	mov	r8, r1
 8002ae4:	4661      	mov	r1, ip
 8002ae6:	0409      	lsls	r1, r1, #16
 8002ae8:	0c09      	lsrs	r1, r1, #16
 8002aea:	468c      	mov	ip, r1
 8002aec:	0412      	lsls	r2, r2, #16
 8002aee:	4462      	add	r2, ip
 8002af0:	18b9      	adds	r1, r7, r2
 8002af2:	9102      	str	r1, [sp, #8]
 8002af4:	4651      	mov	r1, sl
 8002af6:	0c09      	lsrs	r1, r1, #16
 8002af8:	468c      	mov	ip, r1
 8002afa:	4651      	mov	r1, sl
 8002afc:	040f      	lsls	r7, r1, #16
 8002afe:	0c3f      	lsrs	r7, r7, #16
 8002b00:	0039      	movs	r1, r7
 8002b02:	4341      	muls	r1, r0
 8002b04:	4445      	add	r5, r8
 8002b06:	4688      	mov	r8, r1
 8002b08:	4661      	mov	r1, ip
 8002b0a:	4341      	muls	r1, r0
 8002b0c:	468a      	mov	sl, r1
 8002b0e:	4641      	mov	r1, r8
 8002b10:	4660      	mov	r0, ip
 8002b12:	0c09      	lsrs	r1, r1, #16
 8002b14:	4689      	mov	r9, r1
 8002b16:	4358      	muls	r0, r3
 8002b18:	437b      	muls	r3, r7
 8002b1a:	4453      	add	r3, sl
 8002b1c:	444b      	add	r3, r9
 8002b1e:	459a      	cmp	sl, r3
 8002b20:	d903      	bls.n	8002b2a <__aeabi_dmul+0x286>
 8002b22:	2180      	movs	r1, #128	@ 0x80
 8002b24:	0249      	lsls	r1, r1, #9
 8002b26:	4689      	mov	r9, r1
 8002b28:	4448      	add	r0, r9
 8002b2a:	0c19      	lsrs	r1, r3, #16
 8002b2c:	4689      	mov	r9, r1
 8002b2e:	4641      	mov	r1, r8
 8002b30:	0409      	lsls	r1, r1, #16
 8002b32:	0c09      	lsrs	r1, r1, #16
 8002b34:	4688      	mov	r8, r1
 8002b36:	0039      	movs	r1, r7
 8002b38:	4361      	muls	r1, r4
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	4443      	add	r3, r8
 8002b3e:	4688      	mov	r8, r1
 8002b40:	4661      	mov	r1, ip
 8002b42:	434c      	muls	r4, r1
 8002b44:	4371      	muls	r1, r6
 8002b46:	468c      	mov	ip, r1
 8002b48:	4641      	mov	r1, r8
 8002b4a:	4377      	muls	r7, r6
 8002b4c:	0c0e      	lsrs	r6, r1, #16
 8002b4e:	193f      	adds	r7, r7, r4
 8002b50:	19f6      	adds	r6, r6, r7
 8002b52:	4448      	add	r0, r9
 8002b54:	42b4      	cmp	r4, r6
 8002b56:	d903      	bls.n	8002b60 <__aeabi_dmul+0x2bc>
 8002b58:	2180      	movs	r1, #128	@ 0x80
 8002b5a:	0249      	lsls	r1, r1, #9
 8002b5c:	4689      	mov	r9, r1
 8002b5e:	44cc      	add	ip, r9
 8002b60:	9902      	ldr	r1, [sp, #8]
 8002b62:	9f00      	ldr	r7, [sp, #0]
 8002b64:	4689      	mov	r9, r1
 8002b66:	0431      	lsls	r1, r6, #16
 8002b68:	444f      	add	r7, r9
 8002b6a:	4689      	mov	r9, r1
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	4297      	cmp	r7, r2
 8002b70:	4192      	sbcs	r2, r2
 8002b72:	040c      	lsls	r4, r1, #16
 8002b74:	0c24      	lsrs	r4, r4, #16
 8002b76:	444c      	add	r4, r9
 8002b78:	18ff      	adds	r7, r7, r3
 8002b7a:	4252      	negs	r2, r2
 8002b7c:	1964      	adds	r4, r4, r5
 8002b7e:	18a1      	adds	r1, r4, r2
 8002b80:	429f      	cmp	r7, r3
 8002b82:	419b      	sbcs	r3, r3
 8002b84:	4688      	mov	r8, r1
 8002b86:	4682      	mov	sl, r0
 8002b88:	425b      	negs	r3, r3
 8002b8a:	4699      	mov	r9, r3
 8002b8c:	4590      	cmp	r8, r2
 8002b8e:	4192      	sbcs	r2, r2
 8002b90:	42ac      	cmp	r4, r5
 8002b92:	41a4      	sbcs	r4, r4
 8002b94:	44c2      	add	sl, r8
 8002b96:	44d1      	add	r9, sl
 8002b98:	4252      	negs	r2, r2
 8002b9a:	4264      	negs	r4, r4
 8002b9c:	4314      	orrs	r4, r2
 8002b9e:	4599      	cmp	r9, r3
 8002ba0:	419b      	sbcs	r3, r3
 8002ba2:	4582      	cmp	sl, r0
 8002ba4:	4192      	sbcs	r2, r2
 8002ba6:	425b      	negs	r3, r3
 8002ba8:	4252      	negs	r2, r2
 8002baa:	4313      	orrs	r3, r2
 8002bac:	464a      	mov	r2, r9
 8002bae:	0c36      	lsrs	r6, r6, #16
 8002bb0:	19a4      	adds	r4, r4, r6
 8002bb2:	18e3      	adds	r3, r4, r3
 8002bb4:	4463      	add	r3, ip
 8002bb6:	025b      	lsls	r3, r3, #9
 8002bb8:	0dd2      	lsrs	r2, r2, #23
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	9901      	ldr	r1, [sp, #4]
 8002bbe:	4692      	mov	sl, r2
 8002bc0:	027a      	lsls	r2, r7, #9
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	1e50      	subs	r0, r2, #1
 8002bc6:	4182      	sbcs	r2, r0
 8002bc8:	0dff      	lsrs	r7, r7, #23
 8002bca:	4317      	orrs	r7, r2
 8002bcc:	464a      	mov	r2, r9
 8002bce:	0252      	lsls	r2, r2, #9
 8002bd0:	4317      	orrs	r7, r2
 8002bd2:	46b8      	mov	r8, r7
 8002bd4:	01db      	lsls	r3, r3, #7
 8002bd6:	d500      	bpl.n	8002bda <__aeabi_dmul+0x336>
 8002bd8:	e6ed      	b.n	80029b6 <__aeabi_dmul+0x112>
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <__aeabi_dmul+0x36c>)
 8002bdc:	9a03      	ldr	r2, [sp, #12]
 8002bde:	445b      	add	r3, fp
 8002be0:	4691      	mov	r9, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	dc00      	bgt.n	8002be8 <__aeabi_dmul+0x344>
 8002be6:	e0ac      	b.n	8002d42 <__aeabi_dmul+0x49e>
 8002be8:	003a      	movs	r2, r7
 8002bea:	0752      	lsls	r2, r2, #29
 8002bec:	d100      	bne.n	8002bf0 <__aeabi_dmul+0x34c>
 8002bee:	e710      	b.n	8002a12 <__aeabi_dmul+0x16e>
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	4658      	mov	r0, fp
 8002bf4:	403a      	ands	r2, r7
 8002bf6:	2a04      	cmp	r2, #4
 8002bf8:	d000      	beq.n	8002bfc <__aeabi_dmul+0x358>
 8002bfa:	e6f9      	b.n	80029f0 <__aeabi_dmul+0x14c>
 8002bfc:	e709      	b.n	8002a12 <__aeabi_dmul+0x16e>
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	000007ff 	.word	0x000007ff
 8002c04:	fffffc01 	.word	0xfffffc01
 8002c08:	feffffff 	.word	0xfeffffff
 8002c0c:	000007fe 	.word	0x000007fe
 8002c10:	000003ff 	.word	0x000003ff
 8002c14:	0022      	movs	r2, r4
 8002c16:	4332      	orrs	r2, r6
 8002c18:	d06f      	beq.n	8002cfa <__aeabi_dmul+0x456>
 8002c1a:	2c00      	cmp	r4, #0
 8002c1c:	d100      	bne.n	8002c20 <__aeabi_dmul+0x37c>
 8002c1e:	e0c2      	b.n	8002da6 <__aeabi_dmul+0x502>
 8002c20:	0020      	movs	r0, r4
 8002c22:	f000 fea9 	bl	8003978 <__clzsi2>
 8002c26:	0002      	movs	r2, r0
 8002c28:	0003      	movs	r3, r0
 8002c2a:	3a0b      	subs	r2, #11
 8002c2c:	201d      	movs	r0, #29
 8002c2e:	1a82      	subs	r2, r0, r2
 8002c30:	0030      	movs	r0, r6
 8002c32:	0019      	movs	r1, r3
 8002c34:	40d0      	lsrs	r0, r2
 8002c36:	3908      	subs	r1, #8
 8002c38:	408c      	lsls	r4, r1
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	4322      	orrs	r2, r4
 8002c3e:	0034      	movs	r4, r6
 8002c40:	408c      	lsls	r4, r1
 8002c42:	4659      	mov	r1, fp
 8002c44:	1acb      	subs	r3, r1, r3
 8002c46:	4986      	ldr	r1, [pc, #536]	@ (8002e60 <__aeabi_dmul+0x5bc>)
 8002c48:	468b      	mov	fp, r1
 8002c4a:	449b      	add	fp, r3
 8002c4c:	2d0a      	cmp	r5, #10
 8002c4e:	dd00      	ble.n	8002c52 <__aeabi_dmul+0x3ae>
 8002c50:	e6a4      	b.n	800299c <__aeabi_dmul+0xf8>
 8002c52:	4649      	mov	r1, r9
 8002c54:	9b00      	ldr	r3, [sp, #0]
 8002c56:	9401      	str	r4, [sp, #4]
 8002c58:	4059      	eors	r1, r3
 8002c5a:	b2cb      	uxtb	r3, r1
 8002c5c:	0014      	movs	r4, r2
 8002c5e:	2000      	movs	r0, #0
 8002c60:	9303      	str	r3, [sp, #12]
 8002c62:	2d02      	cmp	r5, #2
 8002c64:	dd00      	ble.n	8002c68 <__aeabi_dmul+0x3c4>
 8002c66:	e667      	b.n	8002938 <__aeabi_dmul+0x94>
 8002c68:	e6fb      	b.n	8002a62 <__aeabi_dmul+0x1be>
 8002c6a:	4653      	mov	r3, sl
 8002c6c:	4303      	orrs	r3, r0
 8002c6e:	4698      	mov	r8, r3
 8002c70:	d03c      	beq.n	8002cec <__aeabi_dmul+0x448>
 8002c72:	4653      	mov	r3, sl
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d100      	bne.n	8002c7a <__aeabi_dmul+0x3d6>
 8002c78:	e0a3      	b.n	8002dc2 <__aeabi_dmul+0x51e>
 8002c7a:	4650      	mov	r0, sl
 8002c7c:	f000 fe7c 	bl	8003978 <__clzsi2>
 8002c80:	230b      	movs	r3, #11
 8002c82:	425b      	negs	r3, r3
 8002c84:	469c      	mov	ip, r3
 8002c86:	0002      	movs	r2, r0
 8002c88:	4484      	add	ip, r0
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	4650      	mov	r0, sl
 8002c8e:	3908      	subs	r1, #8
 8002c90:	4088      	lsls	r0, r1
 8002c92:	231d      	movs	r3, #29
 8002c94:	4680      	mov	r8, r0
 8002c96:	4660      	mov	r0, ip
 8002c98:	1a1b      	subs	r3, r3, r0
 8002c9a:	0020      	movs	r0, r4
 8002c9c:	40d8      	lsrs	r0, r3
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	4640      	mov	r0, r8
 8002ca2:	4303      	orrs	r3, r0
 8002ca4:	469a      	mov	sl, r3
 8002ca6:	0023      	movs	r3, r4
 8002ca8:	408b      	lsls	r3, r1
 8002caa:	4698      	mov	r8, r3
 8002cac:	4b6c      	ldr	r3, [pc, #432]	@ (8002e60 <__aeabi_dmul+0x5bc>)
 8002cae:	2500      	movs	r5, #0
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	469b      	mov	fp, r3
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	e61a      	b.n	80028f0 <__aeabi_dmul+0x4c>
 8002cba:	2d0f      	cmp	r5, #15
 8002cbc:	d000      	beq.n	8002cc0 <__aeabi_dmul+0x41c>
 8002cbe:	e0c9      	b.n	8002e54 <__aeabi_dmul+0x5b0>
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	4652      	mov	r2, sl
 8002cc4:	031b      	lsls	r3, r3, #12
 8002cc6:	421a      	tst	r2, r3
 8002cc8:	d002      	beq.n	8002cd0 <__aeabi_dmul+0x42c>
 8002cca:	421c      	tst	r4, r3
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x42c>
 8002cce:	e092      	b.n	8002df6 <__aeabi_dmul+0x552>
 8002cd0:	2480      	movs	r4, #128	@ 0x80
 8002cd2:	4653      	mov	r3, sl
 8002cd4:	0324      	lsls	r4, r4, #12
 8002cd6:	431c      	orrs	r4, r3
 8002cd8:	0324      	lsls	r4, r4, #12
 8002cda:	4642      	mov	r2, r8
 8002cdc:	0b24      	lsrs	r4, r4, #12
 8002cde:	e63e      	b.n	800295e <__aeabi_dmul+0xba>
 8002ce0:	469b      	mov	fp, r3
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	4680      	mov	r8, r0
 8002ce6:	250c      	movs	r5, #12
 8002ce8:	9302      	str	r3, [sp, #8]
 8002cea:	e601      	b.n	80028f0 <__aeabi_dmul+0x4c>
 8002cec:	2300      	movs	r3, #0
 8002cee:	469a      	mov	sl, r3
 8002cf0:	469b      	mov	fp, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	2504      	movs	r5, #4
 8002cf6:	9302      	str	r3, [sp, #8]
 8002cf8:	e5fa      	b.n	80028f0 <__aeabi_dmul+0x4c>
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	430d      	orrs	r5, r1
 8002cfe:	2d0a      	cmp	r5, #10
 8002d00:	dd00      	ble.n	8002d04 <__aeabi_dmul+0x460>
 8002d02:	e64b      	b.n	800299c <__aeabi_dmul+0xf8>
 8002d04:	4649      	mov	r1, r9
 8002d06:	9800      	ldr	r0, [sp, #0]
 8002d08:	4041      	eors	r1, r0
 8002d0a:	b2c9      	uxtb	r1, r1
 8002d0c:	9103      	str	r1, [sp, #12]
 8002d0e:	2d02      	cmp	r5, #2
 8002d10:	dc00      	bgt.n	8002d14 <__aeabi_dmul+0x470>
 8002d12:	e096      	b.n	8002e42 <__aeabi_dmul+0x59e>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2400      	movs	r4, #0
 8002d18:	2001      	movs	r0, #1
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	e60c      	b.n	8002938 <__aeabi_dmul+0x94>
 8002d1e:	4649      	mov	r1, r9
 8002d20:	2302      	movs	r3, #2
 8002d22:	9a00      	ldr	r2, [sp, #0]
 8002d24:	432b      	orrs	r3, r5
 8002d26:	4051      	eors	r1, r2
 8002d28:	b2ca      	uxtb	r2, r1
 8002d2a:	9203      	str	r2, [sp, #12]
 8002d2c:	2b0a      	cmp	r3, #10
 8002d2e:	dd00      	ble.n	8002d32 <__aeabi_dmul+0x48e>
 8002d30:	e634      	b.n	800299c <__aeabi_dmul+0xf8>
 8002d32:	2d00      	cmp	r5, #0
 8002d34:	d157      	bne.n	8002de6 <__aeabi_dmul+0x542>
 8002d36:	9b03      	ldr	r3, [sp, #12]
 8002d38:	4699      	mov	r9, r3
 8002d3a:	2400      	movs	r4, #0
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4b49      	ldr	r3, [pc, #292]	@ (8002e64 <__aeabi_dmul+0x5c0>)
 8002d40:	e60e      	b.n	8002960 <__aeabi_dmul+0xbc>
 8002d42:	4658      	mov	r0, fp
 8002d44:	2101      	movs	r1, #1
 8002d46:	1ac9      	subs	r1, r1, r3
 8002d48:	2938      	cmp	r1, #56	@ 0x38
 8002d4a:	dd00      	ble.n	8002d4e <__aeabi_dmul+0x4aa>
 8002d4c:	e62f      	b.n	80029ae <__aeabi_dmul+0x10a>
 8002d4e:	291f      	cmp	r1, #31
 8002d50:	dd56      	ble.n	8002e00 <__aeabi_dmul+0x55c>
 8002d52:	221f      	movs	r2, #31
 8002d54:	4654      	mov	r4, sl
 8002d56:	4252      	negs	r2, r2
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	40dc      	lsrs	r4, r3
 8002d5c:	2920      	cmp	r1, #32
 8002d5e:	d007      	beq.n	8002d70 <__aeabi_dmul+0x4cc>
 8002d60:	4b41      	ldr	r3, [pc, #260]	@ (8002e68 <__aeabi_dmul+0x5c4>)
 8002d62:	4642      	mov	r2, r8
 8002d64:	469c      	mov	ip, r3
 8002d66:	4653      	mov	r3, sl
 8002d68:	4460      	add	r0, ip
 8002d6a:	4083      	lsls	r3, r0
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	4690      	mov	r8, r2
 8002d70:	4642      	mov	r2, r8
 8002d72:	2107      	movs	r1, #7
 8002d74:	1e53      	subs	r3, r2, #1
 8002d76:	419a      	sbcs	r2, r3
 8002d78:	000b      	movs	r3, r1
 8002d7a:	4322      	orrs	r2, r4
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2400      	movs	r4, #0
 8002d80:	4211      	tst	r1, r2
 8002d82:	d009      	beq.n	8002d98 <__aeabi_dmul+0x4f4>
 8002d84:	230f      	movs	r3, #15
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d05d      	beq.n	8002e48 <__aeabi_dmul+0x5a4>
 8002d8c:	1d11      	adds	r1, r2, #4
 8002d8e:	4291      	cmp	r1, r2
 8002d90:	419b      	sbcs	r3, r3
 8002d92:	000a      	movs	r2, r1
 8002d94:	425b      	negs	r3, r3
 8002d96:	075b      	lsls	r3, r3, #29
 8002d98:	08d2      	lsrs	r2, r2, #3
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e5df      	b.n	8002960 <__aeabi_dmul+0xbc>
 8002da0:	9b03      	ldr	r3, [sp, #12]
 8002da2:	4699      	mov	r9, r3
 8002da4:	e5fa      	b.n	800299c <__aeabi_dmul+0xf8>
 8002da6:	9801      	ldr	r0, [sp, #4]
 8002da8:	f000 fde6 	bl	8003978 <__clzsi2>
 8002dac:	0002      	movs	r2, r0
 8002dae:	0003      	movs	r3, r0
 8002db0:	3215      	adds	r2, #21
 8002db2:	3320      	adds	r3, #32
 8002db4:	2a1c      	cmp	r2, #28
 8002db6:	dc00      	bgt.n	8002dba <__aeabi_dmul+0x516>
 8002db8:	e738      	b.n	8002c2c <__aeabi_dmul+0x388>
 8002dba:	9a01      	ldr	r2, [sp, #4]
 8002dbc:	3808      	subs	r0, #8
 8002dbe:	4082      	lsls	r2, r0
 8002dc0:	e73f      	b.n	8002c42 <__aeabi_dmul+0x39e>
 8002dc2:	f000 fdd9 	bl	8003978 <__clzsi2>
 8002dc6:	2315      	movs	r3, #21
 8002dc8:	469c      	mov	ip, r3
 8002dca:	4484      	add	ip, r0
 8002dcc:	0002      	movs	r2, r0
 8002dce:	4663      	mov	r3, ip
 8002dd0:	3220      	adds	r2, #32
 8002dd2:	2b1c      	cmp	r3, #28
 8002dd4:	dc00      	bgt.n	8002dd8 <__aeabi_dmul+0x534>
 8002dd6:	e758      	b.n	8002c8a <__aeabi_dmul+0x3e6>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	4698      	mov	r8, r3
 8002ddc:	0023      	movs	r3, r4
 8002dde:	3808      	subs	r0, #8
 8002de0:	4083      	lsls	r3, r0
 8002de2:	469a      	mov	sl, r3
 8002de4:	e762      	b.n	8002cac <__aeabi_dmul+0x408>
 8002de6:	001d      	movs	r5, r3
 8002de8:	2300      	movs	r3, #0
 8002dea:	2400      	movs	r4, #0
 8002dec:	2002      	movs	r0, #2
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	e5a2      	b.n	8002938 <__aeabi_dmul+0x94>
 8002df2:	9002      	str	r0, [sp, #8]
 8002df4:	e632      	b.n	8002a5c <__aeabi_dmul+0x1b8>
 8002df6:	431c      	orrs	r4, r3
 8002df8:	9b00      	ldr	r3, [sp, #0]
 8002dfa:	9a01      	ldr	r2, [sp, #4]
 8002dfc:	4699      	mov	r9, r3
 8002dfe:	e5ae      	b.n	800295e <__aeabi_dmul+0xba>
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <__aeabi_dmul+0x5c8>)
 8002e02:	4652      	mov	r2, sl
 8002e04:	18c3      	adds	r3, r0, r3
 8002e06:	4640      	mov	r0, r8
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	40c8      	lsrs	r0, r1
 8002e0c:	4302      	orrs	r2, r0
 8002e0e:	4640      	mov	r0, r8
 8002e10:	4098      	lsls	r0, r3
 8002e12:	0003      	movs	r3, r0
 8002e14:	1e58      	subs	r0, r3, #1
 8002e16:	4183      	sbcs	r3, r0
 8002e18:	4654      	mov	r4, sl
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	40cc      	lsrs	r4, r1
 8002e1e:	0753      	lsls	r3, r2, #29
 8002e20:	d009      	beq.n	8002e36 <__aeabi_dmul+0x592>
 8002e22:	230f      	movs	r3, #15
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d005      	beq.n	8002e36 <__aeabi_dmul+0x592>
 8002e2a:	1d13      	adds	r3, r2, #4
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	4192      	sbcs	r2, r2
 8002e30:	4252      	negs	r2, r2
 8002e32:	18a4      	adds	r4, r4, r2
 8002e34:	001a      	movs	r2, r3
 8002e36:	0223      	lsls	r3, r4, #8
 8002e38:	d508      	bpl.n	8002e4c <__aeabi_dmul+0x5a8>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	2400      	movs	r4, #0
 8002e3e:	2200      	movs	r2, #0
 8002e40:	e58e      	b.n	8002960 <__aeabi_dmul+0xbc>
 8002e42:	4689      	mov	r9, r1
 8002e44:	2400      	movs	r4, #0
 8002e46:	e58b      	b.n	8002960 <__aeabi_dmul+0xbc>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e7a5      	b.n	8002d98 <__aeabi_dmul+0x4f4>
 8002e4c:	0763      	lsls	r3, r4, #29
 8002e4e:	0264      	lsls	r4, r4, #9
 8002e50:	0b24      	lsrs	r4, r4, #12
 8002e52:	e7a1      	b.n	8002d98 <__aeabi_dmul+0x4f4>
 8002e54:	9b00      	ldr	r3, [sp, #0]
 8002e56:	46a2      	mov	sl, r4
 8002e58:	4699      	mov	r9, r3
 8002e5a:	9b01      	ldr	r3, [sp, #4]
 8002e5c:	4698      	mov	r8, r3
 8002e5e:	e737      	b.n	8002cd0 <__aeabi_dmul+0x42c>
 8002e60:	fffffc0d 	.word	0xfffffc0d
 8002e64:	000007ff 	.word	0x000007ff
 8002e68:	0000043e 	.word	0x0000043e
 8002e6c:	0000041e 	.word	0x0000041e

08002e70 <__aeabi_dsub>:
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e72:	4657      	mov	r7, sl
 8002e74:	464e      	mov	r6, r9
 8002e76:	4645      	mov	r5, r8
 8002e78:	46de      	mov	lr, fp
 8002e7a:	b5e0      	push	{r5, r6, r7, lr}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	9000      	str	r0, [sp, #0]
 8002e80:	9101      	str	r1, [sp, #4]
 8002e82:	030c      	lsls	r4, r1, #12
 8002e84:	004d      	lsls	r5, r1, #1
 8002e86:	0fce      	lsrs	r6, r1, #31
 8002e88:	0a61      	lsrs	r1, r4, #9
 8002e8a:	9c00      	ldr	r4, [sp, #0]
 8002e8c:	005f      	lsls	r7, r3, #1
 8002e8e:	0f64      	lsrs	r4, r4, #29
 8002e90:	430c      	orrs	r4, r1
 8002e92:	9900      	ldr	r1, [sp, #0]
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	00c8      	lsls	r0, r1, #3
 8002e9a:	0319      	lsls	r1, r3, #12
 8002e9c:	0d7b      	lsrs	r3, r7, #21
 8002e9e:	4699      	mov	r9, r3
 8002ea0:	9b01      	ldr	r3, [sp, #4]
 8002ea2:	4fcc      	ldr	r7, [pc, #816]	@ (80031d4 <__aeabi_dsub+0x364>)
 8002ea4:	0fdb      	lsrs	r3, r3, #31
 8002ea6:	469c      	mov	ip, r3
 8002ea8:	0a4b      	lsrs	r3, r1, #9
 8002eaa:	9900      	ldr	r1, [sp, #0]
 8002eac:	4680      	mov	r8, r0
 8002eae:	0f49      	lsrs	r1, r1, #29
 8002eb0:	4319      	orrs	r1, r3
 8002eb2:	9b00      	ldr	r3, [sp, #0]
 8002eb4:	468b      	mov	fp, r1
 8002eb6:	00da      	lsls	r2, r3, #3
 8002eb8:	4692      	mov	sl, r2
 8002eba:	0d6d      	lsrs	r5, r5, #21
 8002ebc:	45b9      	cmp	r9, r7
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x52>
 8002ec0:	e0bf      	b.n	8003042 <__aeabi_dsub+0x1d2>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	4661      	mov	r1, ip
 8002ec6:	4059      	eors	r1, r3
 8002ec8:	464b      	mov	r3, r9
 8002eca:	468c      	mov	ip, r1
 8002ecc:	1aeb      	subs	r3, r5, r3
 8002ece:	428e      	cmp	r6, r1
 8002ed0:	d075      	beq.n	8002fbe <__aeabi_dsub+0x14e>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	dc00      	bgt.n	8002ed8 <__aeabi_dsub+0x68>
 8002ed6:	e2a3      	b.n	8003420 <__aeabi_dsub+0x5b0>
 8002ed8:	4649      	mov	r1, r9
 8002eda:	2900      	cmp	r1, #0
 8002edc:	d100      	bne.n	8002ee0 <__aeabi_dsub+0x70>
 8002ede:	e0ce      	b.n	800307e <__aeabi_dsub+0x20e>
 8002ee0:	42bd      	cmp	r5, r7
 8002ee2:	d100      	bne.n	8002ee6 <__aeabi_dsub+0x76>
 8002ee4:	e200      	b.n	80032e8 <__aeabi_dsub+0x478>
 8002ee6:	2701      	movs	r7, #1
 8002ee8:	2b38      	cmp	r3, #56	@ 0x38
 8002eea:	dc19      	bgt.n	8002f20 <__aeabi_dsub+0xb0>
 8002eec:	2780      	movs	r7, #128	@ 0x80
 8002eee:	4659      	mov	r1, fp
 8002ef0:	043f      	lsls	r7, r7, #16
 8002ef2:	4339      	orrs	r1, r7
 8002ef4:	468b      	mov	fp, r1
 8002ef6:	2b1f      	cmp	r3, #31
 8002ef8:	dd00      	ble.n	8002efc <__aeabi_dsub+0x8c>
 8002efa:	e1fa      	b.n	80032f2 <__aeabi_dsub+0x482>
 8002efc:	2720      	movs	r7, #32
 8002efe:	1af9      	subs	r1, r7, r3
 8002f00:	468c      	mov	ip, r1
 8002f02:	4659      	mov	r1, fp
 8002f04:	4667      	mov	r7, ip
 8002f06:	40b9      	lsls	r1, r7
 8002f08:	000f      	movs	r7, r1
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	40d9      	lsrs	r1, r3
 8002f0e:	430f      	orrs	r7, r1
 8002f10:	4661      	mov	r1, ip
 8002f12:	408a      	lsls	r2, r1
 8002f14:	1e51      	subs	r1, r2, #1
 8002f16:	418a      	sbcs	r2, r1
 8002f18:	4659      	mov	r1, fp
 8002f1a:	40d9      	lsrs	r1, r3
 8002f1c:	4317      	orrs	r7, r2
 8002f1e:	1a64      	subs	r4, r4, r1
 8002f20:	1bc7      	subs	r7, r0, r7
 8002f22:	42b8      	cmp	r0, r7
 8002f24:	4180      	sbcs	r0, r0
 8002f26:	4240      	negs	r0, r0
 8002f28:	1a24      	subs	r4, r4, r0
 8002f2a:	0223      	lsls	r3, r4, #8
 8002f2c:	d400      	bmi.n	8002f30 <__aeabi_dsub+0xc0>
 8002f2e:	e140      	b.n	80031b2 <__aeabi_dsub+0x342>
 8002f30:	0264      	lsls	r4, r4, #9
 8002f32:	0a64      	lsrs	r4, r4, #9
 8002f34:	2c00      	cmp	r4, #0
 8002f36:	d100      	bne.n	8002f3a <__aeabi_dsub+0xca>
 8002f38:	e154      	b.n	80031e4 <__aeabi_dsub+0x374>
 8002f3a:	0020      	movs	r0, r4
 8002f3c:	f000 fd1c 	bl	8003978 <__clzsi2>
 8002f40:	0003      	movs	r3, r0
 8002f42:	3b08      	subs	r3, #8
 8002f44:	2120      	movs	r1, #32
 8002f46:	0038      	movs	r0, r7
 8002f48:	1aca      	subs	r2, r1, r3
 8002f4a:	40d0      	lsrs	r0, r2
 8002f4c:	409c      	lsls	r4, r3
 8002f4e:	0002      	movs	r2, r0
 8002f50:	409f      	lsls	r7, r3
 8002f52:	4322      	orrs	r2, r4
 8002f54:	429d      	cmp	r5, r3
 8002f56:	dd00      	ble.n	8002f5a <__aeabi_dsub+0xea>
 8002f58:	e1a6      	b.n	80032a8 <__aeabi_dsub+0x438>
 8002f5a:	1b58      	subs	r0, r3, r5
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	1a09      	subs	r1, r1, r0
 8002f60:	003c      	movs	r4, r7
 8002f62:	408f      	lsls	r7, r1
 8002f64:	40c4      	lsrs	r4, r0
 8002f66:	1e7b      	subs	r3, r7, #1
 8002f68:	419f      	sbcs	r7, r3
 8002f6a:	0013      	movs	r3, r2
 8002f6c:	408b      	lsls	r3, r1
 8002f6e:	4327      	orrs	r7, r4
 8002f70:	431f      	orrs	r7, r3
 8002f72:	40c2      	lsrs	r2, r0
 8002f74:	003b      	movs	r3, r7
 8002f76:	0014      	movs	r4, r2
 8002f78:	2500      	movs	r5, #0
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	d100      	bne.n	8002f80 <__aeabi_dsub+0x110>
 8002f7e:	e1f7      	b.n	8003370 <__aeabi_dsub+0x500>
 8002f80:	077b      	lsls	r3, r7, #29
 8002f82:	d100      	bne.n	8002f86 <__aeabi_dsub+0x116>
 8002f84:	e377      	b.n	8003676 <__aeabi_dsub+0x806>
 8002f86:	230f      	movs	r3, #15
 8002f88:	0038      	movs	r0, r7
 8002f8a:	403b      	ands	r3, r7
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d004      	beq.n	8002f9a <__aeabi_dsub+0x12a>
 8002f90:	1d38      	adds	r0, r7, #4
 8002f92:	42b8      	cmp	r0, r7
 8002f94:	41bf      	sbcs	r7, r7
 8002f96:	427f      	negs	r7, r7
 8002f98:	19e4      	adds	r4, r4, r7
 8002f9a:	0223      	lsls	r3, r4, #8
 8002f9c:	d400      	bmi.n	8002fa0 <__aeabi_dsub+0x130>
 8002f9e:	e368      	b.n	8003672 <__aeabi_dsub+0x802>
 8002fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80031d4 <__aeabi_dsub+0x364>)
 8002fa2:	3501      	adds	r5, #1
 8002fa4:	429d      	cmp	r5, r3
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x13a>
 8002fa8:	e0f4      	b.n	8003194 <__aeabi_dsub+0x324>
 8002faa:	4b8b      	ldr	r3, [pc, #556]	@ (80031d8 <__aeabi_dsub+0x368>)
 8002fac:	056d      	lsls	r5, r5, #21
 8002fae:	401c      	ands	r4, r3
 8002fb0:	0d6d      	lsrs	r5, r5, #21
 8002fb2:	0767      	lsls	r7, r4, #29
 8002fb4:	08c0      	lsrs	r0, r0, #3
 8002fb6:	0264      	lsls	r4, r4, #9
 8002fb8:	4307      	orrs	r7, r0
 8002fba:	0b24      	lsrs	r4, r4, #12
 8002fbc:	e0ec      	b.n	8003198 <__aeabi_dsub+0x328>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dc00      	bgt.n	8002fc4 <__aeabi_dsub+0x154>
 8002fc2:	e329      	b.n	8003618 <__aeabi_dsub+0x7a8>
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	2900      	cmp	r1, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x15c>
 8002fca:	e0d6      	b.n	800317a <__aeabi_dsub+0x30a>
 8002fcc:	4659      	mov	r1, fp
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	d100      	bne.n	8002fd4 <__aeabi_dsub+0x164>
 8002fd2:	e12e      	b.n	8003232 <__aeabi_dsub+0x3c2>
 8002fd4:	1e59      	subs	r1, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x16c>
 8002fda:	e1e6      	b.n	80033aa <__aeabi_dsub+0x53a>
 8002fdc:	42bb      	cmp	r3, r7
 8002fde:	d100      	bne.n	8002fe2 <__aeabi_dsub+0x172>
 8002fe0:	e182      	b.n	80032e8 <__aeabi_dsub+0x478>
 8002fe2:	2701      	movs	r7, #1
 8002fe4:	000b      	movs	r3, r1
 8002fe6:	2938      	cmp	r1, #56	@ 0x38
 8002fe8:	dc14      	bgt.n	8003014 <__aeabi_dsub+0x1a4>
 8002fea:	2b1f      	cmp	r3, #31
 8002fec:	dd00      	ble.n	8002ff0 <__aeabi_dsub+0x180>
 8002fee:	e23c      	b.n	800346a <__aeabi_dsub+0x5fa>
 8002ff0:	2720      	movs	r7, #32
 8002ff2:	1af9      	subs	r1, r7, r3
 8002ff4:	468c      	mov	ip, r1
 8002ff6:	4659      	mov	r1, fp
 8002ff8:	4667      	mov	r7, ip
 8002ffa:	40b9      	lsls	r1, r7
 8002ffc:	000f      	movs	r7, r1
 8002ffe:	0011      	movs	r1, r2
 8003000:	40d9      	lsrs	r1, r3
 8003002:	430f      	orrs	r7, r1
 8003004:	4661      	mov	r1, ip
 8003006:	408a      	lsls	r2, r1
 8003008:	1e51      	subs	r1, r2, #1
 800300a:	418a      	sbcs	r2, r1
 800300c:	4659      	mov	r1, fp
 800300e:	40d9      	lsrs	r1, r3
 8003010:	4317      	orrs	r7, r2
 8003012:	1864      	adds	r4, r4, r1
 8003014:	183f      	adds	r7, r7, r0
 8003016:	4287      	cmp	r7, r0
 8003018:	4180      	sbcs	r0, r0
 800301a:	4240      	negs	r0, r0
 800301c:	1824      	adds	r4, r4, r0
 800301e:	0223      	lsls	r3, r4, #8
 8003020:	d400      	bmi.n	8003024 <__aeabi_dsub+0x1b4>
 8003022:	e0c6      	b.n	80031b2 <__aeabi_dsub+0x342>
 8003024:	4b6b      	ldr	r3, [pc, #428]	@ (80031d4 <__aeabi_dsub+0x364>)
 8003026:	3501      	adds	r5, #1
 8003028:	429d      	cmp	r5, r3
 800302a:	d100      	bne.n	800302e <__aeabi_dsub+0x1be>
 800302c:	e0b2      	b.n	8003194 <__aeabi_dsub+0x324>
 800302e:	2101      	movs	r1, #1
 8003030:	4b69      	ldr	r3, [pc, #420]	@ (80031d8 <__aeabi_dsub+0x368>)
 8003032:	087a      	lsrs	r2, r7, #1
 8003034:	401c      	ands	r4, r3
 8003036:	4039      	ands	r1, r7
 8003038:	430a      	orrs	r2, r1
 800303a:	07e7      	lsls	r7, r4, #31
 800303c:	4317      	orrs	r7, r2
 800303e:	0864      	lsrs	r4, r4, #1
 8003040:	e79e      	b.n	8002f80 <__aeabi_dsub+0x110>
 8003042:	4b66      	ldr	r3, [pc, #408]	@ (80031dc <__aeabi_dsub+0x36c>)
 8003044:	4311      	orrs	r1, r2
 8003046:	468a      	mov	sl, r1
 8003048:	18eb      	adds	r3, r5, r3
 800304a:	2900      	cmp	r1, #0
 800304c:	d028      	beq.n	80030a0 <__aeabi_dsub+0x230>
 800304e:	4566      	cmp	r6, ip
 8003050:	d02c      	beq.n	80030ac <__aeabi_dsub+0x23c>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d05b      	beq.n	800310e <__aeabi_dsub+0x29e>
 8003056:	2d00      	cmp	r5, #0
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x1ec>
 800305a:	e12c      	b.n	80032b6 <__aeabi_dsub+0x446>
 800305c:	465b      	mov	r3, fp
 800305e:	4666      	mov	r6, ip
 8003060:	075f      	lsls	r7, r3, #29
 8003062:	08d2      	lsrs	r2, r2, #3
 8003064:	4317      	orrs	r7, r2
 8003066:	08dd      	lsrs	r5, r3, #3
 8003068:	003b      	movs	r3, r7
 800306a:	432b      	orrs	r3, r5
 800306c:	d100      	bne.n	8003070 <__aeabi_dsub+0x200>
 800306e:	e0e2      	b.n	8003236 <__aeabi_dsub+0x3c6>
 8003070:	2480      	movs	r4, #128	@ 0x80
 8003072:	0324      	lsls	r4, r4, #12
 8003074:	432c      	orrs	r4, r5
 8003076:	0324      	lsls	r4, r4, #12
 8003078:	4d56      	ldr	r5, [pc, #344]	@ (80031d4 <__aeabi_dsub+0x364>)
 800307a:	0b24      	lsrs	r4, r4, #12
 800307c:	e08c      	b.n	8003198 <__aeabi_dsub+0x328>
 800307e:	4659      	mov	r1, fp
 8003080:	4311      	orrs	r1, r2
 8003082:	d100      	bne.n	8003086 <__aeabi_dsub+0x216>
 8003084:	e0d5      	b.n	8003232 <__aeabi_dsub+0x3c2>
 8003086:	1e59      	subs	r1, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d100      	bne.n	800308e <__aeabi_dsub+0x21e>
 800308c:	e1b9      	b.n	8003402 <__aeabi_dsub+0x592>
 800308e:	42bb      	cmp	r3, r7
 8003090:	d100      	bne.n	8003094 <__aeabi_dsub+0x224>
 8003092:	e1b1      	b.n	80033f8 <__aeabi_dsub+0x588>
 8003094:	2701      	movs	r7, #1
 8003096:	000b      	movs	r3, r1
 8003098:	2938      	cmp	r1, #56	@ 0x38
 800309a:	dd00      	ble.n	800309e <__aeabi_dsub+0x22e>
 800309c:	e740      	b.n	8002f20 <__aeabi_dsub+0xb0>
 800309e:	e72a      	b.n	8002ef6 <__aeabi_dsub+0x86>
 80030a0:	4661      	mov	r1, ip
 80030a2:	2701      	movs	r7, #1
 80030a4:	4079      	eors	r1, r7
 80030a6:	468c      	mov	ip, r1
 80030a8:	4566      	cmp	r6, ip
 80030aa:	d1d2      	bne.n	8003052 <__aeabi_dsub+0x1e2>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d100      	bne.n	80030b2 <__aeabi_dsub+0x242>
 80030b0:	e0c5      	b.n	800323e <__aeabi_dsub+0x3ce>
 80030b2:	2d00      	cmp	r5, #0
 80030b4:	d000      	beq.n	80030b8 <__aeabi_dsub+0x248>
 80030b6:	e155      	b.n	8003364 <__aeabi_dsub+0x4f4>
 80030b8:	464b      	mov	r3, r9
 80030ba:	0025      	movs	r5, r4
 80030bc:	4305      	orrs	r5, r0
 80030be:	d100      	bne.n	80030c2 <__aeabi_dsub+0x252>
 80030c0:	e212      	b.n	80034e8 <__aeabi_dsub+0x678>
 80030c2:	1e59      	subs	r1, r3, #1
 80030c4:	468c      	mov	ip, r1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d100      	bne.n	80030cc <__aeabi_dsub+0x25c>
 80030ca:	e249      	b.n	8003560 <__aeabi_dsub+0x6f0>
 80030cc:	4d41      	ldr	r5, [pc, #260]	@ (80031d4 <__aeabi_dsub+0x364>)
 80030ce:	42ab      	cmp	r3, r5
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x264>
 80030d2:	e28f      	b.n	80035f4 <__aeabi_dsub+0x784>
 80030d4:	2701      	movs	r7, #1
 80030d6:	2938      	cmp	r1, #56	@ 0x38
 80030d8:	dc11      	bgt.n	80030fe <__aeabi_dsub+0x28e>
 80030da:	4663      	mov	r3, ip
 80030dc:	2b1f      	cmp	r3, #31
 80030de:	dd00      	ble.n	80030e2 <__aeabi_dsub+0x272>
 80030e0:	e25b      	b.n	800359a <__aeabi_dsub+0x72a>
 80030e2:	4661      	mov	r1, ip
 80030e4:	2320      	movs	r3, #32
 80030e6:	0027      	movs	r7, r4
 80030e8:	1a5b      	subs	r3, r3, r1
 80030ea:	0005      	movs	r5, r0
 80030ec:	4098      	lsls	r0, r3
 80030ee:	409f      	lsls	r7, r3
 80030f0:	40cd      	lsrs	r5, r1
 80030f2:	1e43      	subs	r3, r0, #1
 80030f4:	4198      	sbcs	r0, r3
 80030f6:	40cc      	lsrs	r4, r1
 80030f8:	432f      	orrs	r7, r5
 80030fa:	4307      	orrs	r7, r0
 80030fc:	44a3      	add	fp, r4
 80030fe:	18bf      	adds	r7, r7, r2
 8003100:	4297      	cmp	r7, r2
 8003102:	4192      	sbcs	r2, r2
 8003104:	4252      	negs	r2, r2
 8003106:	445a      	add	r2, fp
 8003108:	0014      	movs	r4, r2
 800310a:	464d      	mov	r5, r9
 800310c:	e787      	b.n	800301e <__aeabi_dsub+0x1ae>
 800310e:	4f34      	ldr	r7, [pc, #208]	@ (80031e0 <__aeabi_dsub+0x370>)
 8003110:	1c6b      	adds	r3, r5, #1
 8003112:	423b      	tst	r3, r7
 8003114:	d000      	beq.n	8003118 <__aeabi_dsub+0x2a8>
 8003116:	e0b6      	b.n	8003286 <__aeabi_dsub+0x416>
 8003118:	4659      	mov	r1, fp
 800311a:	0023      	movs	r3, r4
 800311c:	4311      	orrs	r1, r2
 800311e:	000f      	movs	r7, r1
 8003120:	4303      	orrs	r3, r0
 8003122:	2d00      	cmp	r5, #0
 8003124:	d000      	beq.n	8003128 <__aeabi_dsub+0x2b8>
 8003126:	e126      	b.n	8003376 <__aeabi_dsub+0x506>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d100      	bne.n	800312e <__aeabi_dsub+0x2be>
 800312c:	e1c0      	b.n	80034b0 <__aeabi_dsub+0x640>
 800312e:	2900      	cmp	r1, #0
 8003130:	d100      	bne.n	8003134 <__aeabi_dsub+0x2c4>
 8003132:	e0a1      	b.n	8003278 <__aeabi_dsub+0x408>
 8003134:	1a83      	subs	r3, r0, r2
 8003136:	4698      	mov	r8, r3
 8003138:	465b      	mov	r3, fp
 800313a:	4540      	cmp	r0, r8
 800313c:	41ad      	sbcs	r5, r5
 800313e:	1ae3      	subs	r3, r4, r3
 8003140:	426d      	negs	r5, r5
 8003142:	1b5b      	subs	r3, r3, r5
 8003144:	2580      	movs	r5, #128	@ 0x80
 8003146:	042d      	lsls	r5, r5, #16
 8003148:	422b      	tst	r3, r5
 800314a:	d100      	bne.n	800314e <__aeabi_dsub+0x2de>
 800314c:	e14b      	b.n	80033e6 <__aeabi_dsub+0x576>
 800314e:	465b      	mov	r3, fp
 8003150:	1a10      	subs	r0, r2, r0
 8003152:	4282      	cmp	r2, r0
 8003154:	4192      	sbcs	r2, r2
 8003156:	1b1c      	subs	r4, r3, r4
 8003158:	0007      	movs	r7, r0
 800315a:	2601      	movs	r6, #1
 800315c:	4663      	mov	r3, ip
 800315e:	4252      	negs	r2, r2
 8003160:	1aa4      	subs	r4, r4, r2
 8003162:	4327      	orrs	r7, r4
 8003164:	401e      	ands	r6, r3
 8003166:	2f00      	cmp	r7, #0
 8003168:	d100      	bne.n	800316c <__aeabi_dsub+0x2fc>
 800316a:	e142      	b.n	80033f2 <__aeabi_dsub+0x582>
 800316c:	422c      	tst	r4, r5
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x302>
 8003170:	e26d      	b.n	800364e <__aeabi_dsub+0x7de>
 8003172:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <__aeabi_dsub+0x368>)
 8003174:	2501      	movs	r5, #1
 8003176:	401c      	ands	r4, r3
 8003178:	e71b      	b.n	8002fb2 <__aeabi_dsub+0x142>
 800317a:	42bd      	cmp	r5, r7
 800317c:	d100      	bne.n	8003180 <__aeabi_dsub+0x310>
 800317e:	e13b      	b.n	80033f8 <__aeabi_dsub+0x588>
 8003180:	2701      	movs	r7, #1
 8003182:	2b38      	cmp	r3, #56	@ 0x38
 8003184:	dd00      	ble.n	8003188 <__aeabi_dsub+0x318>
 8003186:	e745      	b.n	8003014 <__aeabi_dsub+0x1a4>
 8003188:	2780      	movs	r7, #128	@ 0x80
 800318a:	4659      	mov	r1, fp
 800318c:	043f      	lsls	r7, r7, #16
 800318e:	4339      	orrs	r1, r7
 8003190:	468b      	mov	fp, r1
 8003192:	e72a      	b.n	8002fea <__aeabi_dsub+0x17a>
 8003194:	2400      	movs	r4, #0
 8003196:	2700      	movs	r7, #0
 8003198:	052d      	lsls	r5, r5, #20
 800319a:	4325      	orrs	r5, r4
 800319c:	07f6      	lsls	r6, r6, #31
 800319e:	4335      	orrs	r5, r6
 80031a0:	0038      	movs	r0, r7
 80031a2:	0029      	movs	r1, r5
 80031a4:	b003      	add	sp, #12
 80031a6:	bcf0      	pop	{r4, r5, r6, r7}
 80031a8:	46bb      	mov	fp, r7
 80031aa:	46b2      	mov	sl, r6
 80031ac:	46a9      	mov	r9, r5
 80031ae:	46a0      	mov	r8, r4
 80031b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b2:	077b      	lsls	r3, r7, #29
 80031b4:	d004      	beq.n	80031c0 <__aeabi_dsub+0x350>
 80031b6:	230f      	movs	r3, #15
 80031b8:	403b      	ands	r3, r7
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d000      	beq.n	80031c0 <__aeabi_dsub+0x350>
 80031be:	e6e7      	b.n	8002f90 <__aeabi_dsub+0x120>
 80031c0:	002b      	movs	r3, r5
 80031c2:	08f8      	lsrs	r0, r7, #3
 80031c4:	4a03      	ldr	r2, [pc, #12]	@ (80031d4 <__aeabi_dsub+0x364>)
 80031c6:	0767      	lsls	r7, r4, #29
 80031c8:	4307      	orrs	r7, r0
 80031ca:	08e5      	lsrs	r5, r4, #3
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d100      	bne.n	80031d2 <__aeabi_dsub+0x362>
 80031d0:	e74a      	b.n	8003068 <__aeabi_dsub+0x1f8>
 80031d2:	e0a5      	b.n	8003320 <__aeabi_dsub+0x4b0>
 80031d4:	000007ff 	.word	0x000007ff
 80031d8:	ff7fffff 	.word	0xff7fffff
 80031dc:	fffff801 	.word	0xfffff801
 80031e0:	000007fe 	.word	0x000007fe
 80031e4:	0038      	movs	r0, r7
 80031e6:	f000 fbc7 	bl	8003978 <__clzsi2>
 80031ea:	0003      	movs	r3, r0
 80031ec:	3318      	adds	r3, #24
 80031ee:	2b1f      	cmp	r3, #31
 80031f0:	dc00      	bgt.n	80031f4 <__aeabi_dsub+0x384>
 80031f2:	e6a7      	b.n	8002f44 <__aeabi_dsub+0xd4>
 80031f4:	003a      	movs	r2, r7
 80031f6:	3808      	subs	r0, #8
 80031f8:	4082      	lsls	r2, r0
 80031fa:	429d      	cmp	r5, r3
 80031fc:	dd00      	ble.n	8003200 <__aeabi_dsub+0x390>
 80031fe:	e08a      	b.n	8003316 <__aeabi_dsub+0x4a6>
 8003200:	1b5b      	subs	r3, r3, r5
 8003202:	1c58      	adds	r0, r3, #1
 8003204:	281f      	cmp	r0, #31
 8003206:	dc00      	bgt.n	800320a <__aeabi_dsub+0x39a>
 8003208:	e1d8      	b.n	80035bc <__aeabi_dsub+0x74c>
 800320a:	0017      	movs	r7, r2
 800320c:	3b1f      	subs	r3, #31
 800320e:	40df      	lsrs	r7, r3
 8003210:	2820      	cmp	r0, #32
 8003212:	d005      	beq.n	8003220 <__aeabi_dsub+0x3b0>
 8003214:	2340      	movs	r3, #64	@ 0x40
 8003216:	1a1b      	subs	r3, r3, r0
 8003218:	409a      	lsls	r2, r3
 800321a:	1e53      	subs	r3, r2, #1
 800321c:	419a      	sbcs	r2, r3
 800321e:	4317      	orrs	r7, r2
 8003220:	2500      	movs	r5, #0
 8003222:	2f00      	cmp	r7, #0
 8003224:	d100      	bne.n	8003228 <__aeabi_dsub+0x3b8>
 8003226:	e0e5      	b.n	80033f4 <__aeabi_dsub+0x584>
 8003228:	077b      	lsls	r3, r7, #29
 800322a:	d000      	beq.n	800322e <__aeabi_dsub+0x3be>
 800322c:	e6ab      	b.n	8002f86 <__aeabi_dsub+0x116>
 800322e:	002c      	movs	r4, r5
 8003230:	e7c6      	b.n	80031c0 <__aeabi_dsub+0x350>
 8003232:	08c0      	lsrs	r0, r0, #3
 8003234:	e7c6      	b.n	80031c4 <__aeabi_dsub+0x354>
 8003236:	2700      	movs	r7, #0
 8003238:	2400      	movs	r4, #0
 800323a:	4dd1      	ldr	r5, [pc, #836]	@ (8003580 <__aeabi_dsub+0x710>)
 800323c:	e7ac      	b.n	8003198 <__aeabi_dsub+0x328>
 800323e:	4fd1      	ldr	r7, [pc, #836]	@ (8003584 <__aeabi_dsub+0x714>)
 8003240:	1c6b      	adds	r3, r5, #1
 8003242:	423b      	tst	r3, r7
 8003244:	d171      	bne.n	800332a <__aeabi_dsub+0x4ba>
 8003246:	0023      	movs	r3, r4
 8003248:	4303      	orrs	r3, r0
 800324a:	2d00      	cmp	r5, #0
 800324c:	d000      	beq.n	8003250 <__aeabi_dsub+0x3e0>
 800324e:	e14e      	b.n	80034ee <__aeabi_dsub+0x67e>
 8003250:	4657      	mov	r7, sl
 8003252:	2b00      	cmp	r3, #0
 8003254:	d100      	bne.n	8003258 <__aeabi_dsub+0x3e8>
 8003256:	e1b5      	b.n	80035c4 <__aeabi_dsub+0x754>
 8003258:	2f00      	cmp	r7, #0
 800325a:	d00d      	beq.n	8003278 <__aeabi_dsub+0x408>
 800325c:	1883      	adds	r3, r0, r2
 800325e:	4283      	cmp	r3, r0
 8003260:	4180      	sbcs	r0, r0
 8003262:	445c      	add	r4, fp
 8003264:	4240      	negs	r0, r0
 8003266:	1824      	adds	r4, r4, r0
 8003268:	0222      	lsls	r2, r4, #8
 800326a:	d500      	bpl.n	800326e <__aeabi_dsub+0x3fe>
 800326c:	e1c8      	b.n	8003600 <__aeabi_dsub+0x790>
 800326e:	001f      	movs	r7, r3
 8003270:	4698      	mov	r8, r3
 8003272:	4327      	orrs	r7, r4
 8003274:	d100      	bne.n	8003278 <__aeabi_dsub+0x408>
 8003276:	e0bc      	b.n	80033f2 <__aeabi_dsub+0x582>
 8003278:	4643      	mov	r3, r8
 800327a:	0767      	lsls	r7, r4, #29
 800327c:	08db      	lsrs	r3, r3, #3
 800327e:	431f      	orrs	r7, r3
 8003280:	08e5      	lsrs	r5, r4, #3
 8003282:	2300      	movs	r3, #0
 8003284:	e04c      	b.n	8003320 <__aeabi_dsub+0x4b0>
 8003286:	1a83      	subs	r3, r0, r2
 8003288:	4698      	mov	r8, r3
 800328a:	465b      	mov	r3, fp
 800328c:	4540      	cmp	r0, r8
 800328e:	41bf      	sbcs	r7, r7
 8003290:	1ae3      	subs	r3, r4, r3
 8003292:	427f      	negs	r7, r7
 8003294:	1bdb      	subs	r3, r3, r7
 8003296:	021f      	lsls	r7, r3, #8
 8003298:	d47c      	bmi.n	8003394 <__aeabi_dsub+0x524>
 800329a:	4647      	mov	r7, r8
 800329c:	431f      	orrs	r7, r3
 800329e:	d100      	bne.n	80032a2 <__aeabi_dsub+0x432>
 80032a0:	e0a6      	b.n	80033f0 <__aeabi_dsub+0x580>
 80032a2:	001c      	movs	r4, r3
 80032a4:	4647      	mov	r7, r8
 80032a6:	e645      	b.n	8002f34 <__aeabi_dsub+0xc4>
 80032a8:	4cb7      	ldr	r4, [pc, #732]	@ (8003588 <__aeabi_dsub+0x718>)
 80032aa:	1aed      	subs	r5, r5, r3
 80032ac:	4014      	ands	r4, r2
 80032ae:	077b      	lsls	r3, r7, #29
 80032b0:	d000      	beq.n	80032b4 <__aeabi_dsub+0x444>
 80032b2:	e780      	b.n	80031b6 <__aeabi_dsub+0x346>
 80032b4:	e784      	b.n	80031c0 <__aeabi_dsub+0x350>
 80032b6:	464b      	mov	r3, r9
 80032b8:	0025      	movs	r5, r4
 80032ba:	4305      	orrs	r5, r0
 80032bc:	d066      	beq.n	800338c <__aeabi_dsub+0x51c>
 80032be:	1e5f      	subs	r7, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d100      	bne.n	80032c6 <__aeabi_dsub+0x456>
 80032c4:	e0fc      	b.n	80034c0 <__aeabi_dsub+0x650>
 80032c6:	4dae      	ldr	r5, [pc, #696]	@ (8003580 <__aeabi_dsub+0x710>)
 80032c8:	42ab      	cmp	r3, r5
 80032ca:	d100      	bne.n	80032ce <__aeabi_dsub+0x45e>
 80032cc:	e15e      	b.n	800358c <__aeabi_dsub+0x71c>
 80032ce:	4666      	mov	r6, ip
 80032d0:	2f38      	cmp	r7, #56	@ 0x38
 80032d2:	dc00      	bgt.n	80032d6 <__aeabi_dsub+0x466>
 80032d4:	e0b4      	b.n	8003440 <__aeabi_dsub+0x5d0>
 80032d6:	2001      	movs	r0, #1
 80032d8:	1a17      	subs	r7, r2, r0
 80032da:	42ba      	cmp	r2, r7
 80032dc:	4192      	sbcs	r2, r2
 80032de:	465b      	mov	r3, fp
 80032e0:	4252      	negs	r2, r2
 80032e2:	464d      	mov	r5, r9
 80032e4:	1a9c      	subs	r4, r3, r2
 80032e6:	e620      	b.n	8002f2a <__aeabi_dsub+0xba>
 80032e8:	0767      	lsls	r7, r4, #29
 80032ea:	08c0      	lsrs	r0, r0, #3
 80032ec:	4307      	orrs	r7, r0
 80032ee:	08e5      	lsrs	r5, r4, #3
 80032f0:	e6ba      	b.n	8003068 <__aeabi_dsub+0x1f8>
 80032f2:	001f      	movs	r7, r3
 80032f4:	4659      	mov	r1, fp
 80032f6:	3f20      	subs	r7, #32
 80032f8:	40f9      	lsrs	r1, r7
 80032fa:	000f      	movs	r7, r1
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d005      	beq.n	800330c <__aeabi_dsub+0x49c>
 8003300:	2140      	movs	r1, #64	@ 0x40
 8003302:	1acb      	subs	r3, r1, r3
 8003304:	4659      	mov	r1, fp
 8003306:	4099      	lsls	r1, r3
 8003308:	430a      	orrs	r2, r1
 800330a:	4692      	mov	sl, r2
 800330c:	4653      	mov	r3, sl
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	4193      	sbcs	r3, r2
 8003312:	431f      	orrs	r7, r3
 8003314:	e604      	b.n	8002f20 <__aeabi_dsub+0xb0>
 8003316:	1aeb      	subs	r3, r5, r3
 8003318:	4d9b      	ldr	r5, [pc, #620]	@ (8003588 <__aeabi_dsub+0x718>)
 800331a:	4015      	ands	r5, r2
 800331c:	076f      	lsls	r7, r5, #29
 800331e:	08ed      	lsrs	r5, r5, #3
 8003320:	032c      	lsls	r4, r5, #12
 8003322:	055d      	lsls	r5, r3, #21
 8003324:	0b24      	lsrs	r4, r4, #12
 8003326:	0d6d      	lsrs	r5, r5, #21
 8003328:	e736      	b.n	8003198 <__aeabi_dsub+0x328>
 800332a:	4d95      	ldr	r5, [pc, #596]	@ (8003580 <__aeabi_dsub+0x710>)
 800332c:	42ab      	cmp	r3, r5
 800332e:	d100      	bne.n	8003332 <__aeabi_dsub+0x4c2>
 8003330:	e0d6      	b.n	80034e0 <__aeabi_dsub+0x670>
 8003332:	1882      	adds	r2, r0, r2
 8003334:	0021      	movs	r1, r4
 8003336:	4282      	cmp	r2, r0
 8003338:	4180      	sbcs	r0, r0
 800333a:	4459      	add	r1, fp
 800333c:	4240      	negs	r0, r0
 800333e:	1808      	adds	r0, r1, r0
 8003340:	07c7      	lsls	r7, r0, #31
 8003342:	0852      	lsrs	r2, r2, #1
 8003344:	4317      	orrs	r7, r2
 8003346:	0844      	lsrs	r4, r0, #1
 8003348:	0752      	lsls	r2, r2, #29
 800334a:	d400      	bmi.n	800334e <__aeabi_dsub+0x4de>
 800334c:	e185      	b.n	800365a <__aeabi_dsub+0x7ea>
 800334e:	220f      	movs	r2, #15
 8003350:	001d      	movs	r5, r3
 8003352:	403a      	ands	r2, r7
 8003354:	2a04      	cmp	r2, #4
 8003356:	d000      	beq.n	800335a <__aeabi_dsub+0x4ea>
 8003358:	e61a      	b.n	8002f90 <__aeabi_dsub+0x120>
 800335a:	08ff      	lsrs	r7, r7, #3
 800335c:	0764      	lsls	r4, r4, #29
 800335e:	4327      	orrs	r7, r4
 8003360:	0905      	lsrs	r5, r0, #4
 8003362:	e7dd      	b.n	8003320 <__aeabi_dsub+0x4b0>
 8003364:	465b      	mov	r3, fp
 8003366:	08d2      	lsrs	r2, r2, #3
 8003368:	075f      	lsls	r7, r3, #29
 800336a:	4317      	orrs	r7, r2
 800336c:	08dd      	lsrs	r5, r3, #3
 800336e:	e67b      	b.n	8003068 <__aeabi_dsub+0x1f8>
 8003370:	2700      	movs	r7, #0
 8003372:	2400      	movs	r4, #0
 8003374:	e710      	b.n	8003198 <__aeabi_dsub+0x328>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d000      	beq.n	800337c <__aeabi_dsub+0x50c>
 800337a:	e0d6      	b.n	800352a <__aeabi_dsub+0x6ba>
 800337c:	2900      	cmp	r1, #0
 800337e:	d000      	beq.n	8003382 <__aeabi_dsub+0x512>
 8003380:	e12f      	b.n	80035e2 <__aeabi_dsub+0x772>
 8003382:	2480      	movs	r4, #128	@ 0x80
 8003384:	2600      	movs	r6, #0
 8003386:	4d7e      	ldr	r5, [pc, #504]	@ (8003580 <__aeabi_dsub+0x710>)
 8003388:	0324      	lsls	r4, r4, #12
 800338a:	e705      	b.n	8003198 <__aeabi_dsub+0x328>
 800338c:	4666      	mov	r6, ip
 800338e:	465c      	mov	r4, fp
 8003390:	08d0      	lsrs	r0, r2, #3
 8003392:	e717      	b.n	80031c4 <__aeabi_dsub+0x354>
 8003394:	465b      	mov	r3, fp
 8003396:	1a17      	subs	r7, r2, r0
 8003398:	42ba      	cmp	r2, r7
 800339a:	4192      	sbcs	r2, r2
 800339c:	1b1c      	subs	r4, r3, r4
 800339e:	2601      	movs	r6, #1
 80033a0:	4663      	mov	r3, ip
 80033a2:	4252      	negs	r2, r2
 80033a4:	1aa4      	subs	r4, r4, r2
 80033a6:	401e      	ands	r6, r3
 80033a8:	e5c4      	b.n	8002f34 <__aeabi_dsub+0xc4>
 80033aa:	1883      	adds	r3, r0, r2
 80033ac:	4283      	cmp	r3, r0
 80033ae:	4180      	sbcs	r0, r0
 80033b0:	445c      	add	r4, fp
 80033b2:	4240      	negs	r0, r0
 80033b4:	1825      	adds	r5, r4, r0
 80033b6:	022a      	lsls	r2, r5, #8
 80033b8:	d400      	bmi.n	80033bc <__aeabi_dsub+0x54c>
 80033ba:	e0da      	b.n	8003572 <__aeabi_dsub+0x702>
 80033bc:	4a72      	ldr	r2, [pc, #456]	@ (8003588 <__aeabi_dsub+0x718>)
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	4015      	ands	r5, r2
 80033c2:	07ea      	lsls	r2, r5, #31
 80033c4:	431a      	orrs	r2, r3
 80033c6:	0869      	lsrs	r1, r5, #1
 80033c8:	075b      	lsls	r3, r3, #29
 80033ca:	d400      	bmi.n	80033ce <__aeabi_dsub+0x55e>
 80033cc:	e14a      	b.n	8003664 <__aeabi_dsub+0x7f4>
 80033ce:	230f      	movs	r3, #15
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d100      	bne.n	80033d8 <__aeabi_dsub+0x568>
 80033d6:	e0fc      	b.n	80035d2 <__aeabi_dsub+0x762>
 80033d8:	1d17      	adds	r7, r2, #4
 80033da:	4297      	cmp	r7, r2
 80033dc:	41a4      	sbcs	r4, r4
 80033de:	4264      	negs	r4, r4
 80033e0:	2502      	movs	r5, #2
 80033e2:	1864      	adds	r4, r4, r1
 80033e4:	e6ec      	b.n	80031c0 <__aeabi_dsub+0x350>
 80033e6:	4647      	mov	r7, r8
 80033e8:	001c      	movs	r4, r3
 80033ea:	431f      	orrs	r7, r3
 80033ec:	d000      	beq.n	80033f0 <__aeabi_dsub+0x580>
 80033ee:	e743      	b.n	8003278 <__aeabi_dsub+0x408>
 80033f0:	2600      	movs	r6, #0
 80033f2:	2500      	movs	r5, #0
 80033f4:	2400      	movs	r4, #0
 80033f6:	e6cf      	b.n	8003198 <__aeabi_dsub+0x328>
 80033f8:	08c0      	lsrs	r0, r0, #3
 80033fa:	0767      	lsls	r7, r4, #29
 80033fc:	4307      	orrs	r7, r0
 80033fe:	08e5      	lsrs	r5, r4, #3
 8003400:	e632      	b.n	8003068 <__aeabi_dsub+0x1f8>
 8003402:	1a87      	subs	r7, r0, r2
 8003404:	465b      	mov	r3, fp
 8003406:	42b8      	cmp	r0, r7
 8003408:	4180      	sbcs	r0, r0
 800340a:	1ae4      	subs	r4, r4, r3
 800340c:	4240      	negs	r0, r0
 800340e:	1a24      	subs	r4, r4, r0
 8003410:	0223      	lsls	r3, r4, #8
 8003412:	d428      	bmi.n	8003466 <__aeabi_dsub+0x5f6>
 8003414:	0763      	lsls	r3, r4, #29
 8003416:	08ff      	lsrs	r7, r7, #3
 8003418:	431f      	orrs	r7, r3
 800341a:	08e5      	lsrs	r5, r4, #3
 800341c:	2301      	movs	r3, #1
 800341e:	e77f      	b.n	8003320 <__aeabi_dsub+0x4b0>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d100      	bne.n	8003426 <__aeabi_dsub+0x5b6>
 8003424:	e673      	b.n	800310e <__aeabi_dsub+0x29e>
 8003426:	464b      	mov	r3, r9
 8003428:	1b5f      	subs	r7, r3, r5
 800342a:	003b      	movs	r3, r7
 800342c:	2d00      	cmp	r5, #0
 800342e:	d100      	bne.n	8003432 <__aeabi_dsub+0x5c2>
 8003430:	e742      	b.n	80032b8 <__aeabi_dsub+0x448>
 8003432:	2f38      	cmp	r7, #56	@ 0x38
 8003434:	dd00      	ble.n	8003438 <__aeabi_dsub+0x5c8>
 8003436:	e0ec      	b.n	8003612 <__aeabi_dsub+0x7a2>
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	000e      	movs	r6, r1
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431c      	orrs	r4, r3
 8003440:	2f1f      	cmp	r7, #31
 8003442:	dc25      	bgt.n	8003490 <__aeabi_dsub+0x620>
 8003444:	2520      	movs	r5, #32
 8003446:	0023      	movs	r3, r4
 8003448:	1bed      	subs	r5, r5, r7
 800344a:	0001      	movs	r1, r0
 800344c:	40a8      	lsls	r0, r5
 800344e:	40ab      	lsls	r3, r5
 8003450:	40f9      	lsrs	r1, r7
 8003452:	1e45      	subs	r5, r0, #1
 8003454:	41a8      	sbcs	r0, r5
 8003456:	430b      	orrs	r3, r1
 8003458:	40fc      	lsrs	r4, r7
 800345a:	4318      	orrs	r0, r3
 800345c:	465b      	mov	r3, fp
 800345e:	1b1b      	subs	r3, r3, r4
 8003460:	469b      	mov	fp, r3
 8003462:	e739      	b.n	80032d8 <__aeabi_dsub+0x468>
 8003464:	4666      	mov	r6, ip
 8003466:	2501      	movs	r5, #1
 8003468:	e562      	b.n	8002f30 <__aeabi_dsub+0xc0>
 800346a:	001f      	movs	r7, r3
 800346c:	4659      	mov	r1, fp
 800346e:	3f20      	subs	r7, #32
 8003470:	40f9      	lsrs	r1, r7
 8003472:	468c      	mov	ip, r1
 8003474:	2b20      	cmp	r3, #32
 8003476:	d005      	beq.n	8003484 <__aeabi_dsub+0x614>
 8003478:	2740      	movs	r7, #64	@ 0x40
 800347a:	4659      	mov	r1, fp
 800347c:	1afb      	subs	r3, r7, r3
 800347e:	4099      	lsls	r1, r3
 8003480:	430a      	orrs	r2, r1
 8003482:	4692      	mov	sl, r2
 8003484:	4657      	mov	r7, sl
 8003486:	1e7b      	subs	r3, r7, #1
 8003488:	419f      	sbcs	r7, r3
 800348a:	4663      	mov	r3, ip
 800348c:	431f      	orrs	r7, r3
 800348e:	e5c1      	b.n	8003014 <__aeabi_dsub+0x1a4>
 8003490:	003b      	movs	r3, r7
 8003492:	0025      	movs	r5, r4
 8003494:	3b20      	subs	r3, #32
 8003496:	40dd      	lsrs	r5, r3
 8003498:	2f20      	cmp	r7, #32
 800349a:	d004      	beq.n	80034a6 <__aeabi_dsub+0x636>
 800349c:	2340      	movs	r3, #64	@ 0x40
 800349e:	1bdb      	subs	r3, r3, r7
 80034a0:	409c      	lsls	r4, r3
 80034a2:	4320      	orrs	r0, r4
 80034a4:	4680      	mov	r8, r0
 80034a6:	4640      	mov	r0, r8
 80034a8:	1e43      	subs	r3, r0, #1
 80034aa:	4198      	sbcs	r0, r3
 80034ac:	4328      	orrs	r0, r5
 80034ae:	e713      	b.n	80032d8 <__aeabi_dsub+0x468>
 80034b0:	2900      	cmp	r1, #0
 80034b2:	d09d      	beq.n	80033f0 <__aeabi_dsub+0x580>
 80034b4:	2601      	movs	r6, #1
 80034b6:	4663      	mov	r3, ip
 80034b8:	465c      	mov	r4, fp
 80034ba:	4690      	mov	r8, r2
 80034bc:	401e      	ands	r6, r3
 80034be:	e6db      	b.n	8003278 <__aeabi_dsub+0x408>
 80034c0:	1a17      	subs	r7, r2, r0
 80034c2:	465b      	mov	r3, fp
 80034c4:	42ba      	cmp	r2, r7
 80034c6:	4192      	sbcs	r2, r2
 80034c8:	1b1c      	subs	r4, r3, r4
 80034ca:	4252      	negs	r2, r2
 80034cc:	1aa4      	subs	r4, r4, r2
 80034ce:	0223      	lsls	r3, r4, #8
 80034d0:	d4c8      	bmi.n	8003464 <__aeabi_dsub+0x5f4>
 80034d2:	0763      	lsls	r3, r4, #29
 80034d4:	08ff      	lsrs	r7, r7, #3
 80034d6:	431f      	orrs	r7, r3
 80034d8:	4666      	mov	r6, ip
 80034da:	2301      	movs	r3, #1
 80034dc:	08e5      	lsrs	r5, r4, #3
 80034de:	e71f      	b.n	8003320 <__aeabi_dsub+0x4b0>
 80034e0:	001d      	movs	r5, r3
 80034e2:	2400      	movs	r4, #0
 80034e4:	2700      	movs	r7, #0
 80034e6:	e657      	b.n	8003198 <__aeabi_dsub+0x328>
 80034e8:	465c      	mov	r4, fp
 80034ea:	08d0      	lsrs	r0, r2, #3
 80034ec:	e66a      	b.n	80031c4 <__aeabi_dsub+0x354>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d100      	bne.n	80034f4 <__aeabi_dsub+0x684>
 80034f2:	e737      	b.n	8003364 <__aeabi_dsub+0x4f4>
 80034f4:	4653      	mov	r3, sl
 80034f6:	08c0      	lsrs	r0, r0, #3
 80034f8:	0767      	lsls	r7, r4, #29
 80034fa:	4307      	orrs	r7, r0
 80034fc:	08e5      	lsrs	r5, r4, #3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d100      	bne.n	8003504 <__aeabi_dsub+0x694>
 8003502:	e5b1      	b.n	8003068 <__aeabi_dsub+0x1f8>
 8003504:	2380      	movs	r3, #128	@ 0x80
 8003506:	031b      	lsls	r3, r3, #12
 8003508:	421d      	tst	r5, r3
 800350a:	d008      	beq.n	800351e <__aeabi_dsub+0x6ae>
 800350c:	4659      	mov	r1, fp
 800350e:	08c8      	lsrs	r0, r1, #3
 8003510:	4218      	tst	r0, r3
 8003512:	d104      	bne.n	800351e <__aeabi_dsub+0x6ae>
 8003514:	08d2      	lsrs	r2, r2, #3
 8003516:	0749      	lsls	r1, r1, #29
 8003518:	430a      	orrs	r2, r1
 800351a:	0017      	movs	r7, r2
 800351c:	0005      	movs	r5, r0
 800351e:	0f7b      	lsrs	r3, r7, #29
 8003520:	00ff      	lsls	r7, r7, #3
 8003522:	08ff      	lsrs	r7, r7, #3
 8003524:	075b      	lsls	r3, r3, #29
 8003526:	431f      	orrs	r7, r3
 8003528:	e59e      	b.n	8003068 <__aeabi_dsub+0x1f8>
 800352a:	08c0      	lsrs	r0, r0, #3
 800352c:	0763      	lsls	r3, r4, #29
 800352e:	4318      	orrs	r0, r3
 8003530:	08e5      	lsrs	r5, r4, #3
 8003532:	2900      	cmp	r1, #0
 8003534:	d053      	beq.n	80035de <__aeabi_dsub+0x76e>
 8003536:	2380      	movs	r3, #128	@ 0x80
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	421d      	tst	r5, r3
 800353c:	d00a      	beq.n	8003554 <__aeabi_dsub+0x6e4>
 800353e:	4659      	mov	r1, fp
 8003540:	08cc      	lsrs	r4, r1, #3
 8003542:	421c      	tst	r4, r3
 8003544:	d106      	bne.n	8003554 <__aeabi_dsub+0x6e4>
 8003546:	2601      	movs	r6, #1
 8003548:	4663      	mov	r3, ip
 800354a:	0025      	movs	r5, r4
 800354c:	08d0      	lsrs	r0, r2, #3
 800354e:	0749      	lsls	r1, r1, #29
 8003550:	4308      	orrs	r0, r1
 8003552:	401e      	ands	r6, r3
 8003554:	0f47      	lsrs	r7, r0, #29
 8003556:	00c0      	lsls	r0, r0, #3
 8003558:	08c0      	lsrs	r0, r0, #3
 800355a:	077f      	lsls	r7, r7, #29
 800355c:	4307      	orrs	r7, r0
 800355e:	e583      	b.n	8003068 <__aeabi_dsub+0x1f8>
 8003560:	1883      	adds	r3, r0, r2
 8003562:	4293      	cmp	r3, r2
 8003564:	4192      	sbcs	r2, r2
 8003566:	445c      	add	r4, fp
 8003568:	4252      	negs	r2, r2
 800356a:	18a5      	adds	r5, r4, r2
 800356c:	022a      	lsls	r2, r5, #8
 800356e:	d500      	bpl.n	8003572 <__aeabi_dsub+0x702>
 8003570:	e724      	b.n	80033bc <__aeabi_dsub+0x54c>
 8003572:	076f      	lsls	r7, r5, #29
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	431f      	orrs	r7, r3
 8003578:	08ed      	lsrs	r5, r5, #3
 800357a:	2301      	movs	r3, #1
 800357c:	e6d0      	b.n	8003320 <__aeabi_dsub+0x4b0>
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	000007ff 	.word	0x000007ff
 8003584:	000007fe 	.word	0x000007fe
 8003588:	ff7fffff 	.word	0xff7fffff
 800358c:	465b      	mov	r3, fp
 800358e:	08d2      	lsrs	r2, r2, #3
 8003590:	075f      	lsls	r7, r3, #29
 8003592:	4666      	mov	r6, ip
 8003594:	4317      	orrs	r7, r2
 8003596:	08dd      	lsrs	r5, r3, #3
 8003598:	e566      	b.n	8003068 <__aeabi_dsub+0x1f8>
 800359a:	0025      	movs	r5, r4
 800359c:	3b20      	subs	r3, #32
 800359e:	40dd      	lsrs	r5, r3
 80035a0:	4663      	mov	r3, ip
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d005      	beq.n	80035b2 <__aeabi_dsub+0x742>
 80035a6:	2340      	movs	r3, #64	@ 0x40
 80035a8:	4661      	mov	r1, ip
 80035aa:	1a5b      	subs	r3, r3, r1
 80035ac:	409c      	lsls	r4, r3
 80035ae:	4320      	orrs	r0, r4
 80035b0:	4680      	mov	r8, r0
 80035b2:	4647      	mov	r7, r8
 80035b4:	1e7b      	subs	r3, r7, #1
 80035b6:	419f      	sbcs	r7, r3
 80035b8:	432f      	orrs	r7, r5
 80035ba:	e5a0      	b.n	80030fe <__aeabi_dsub+0x28e>
 80035bc:	2120      	movs	r1, #32
 80035be:	2700      	movs	r7, #0
 80035c0:	1a09      	subs	r1, r1, r0
 80035c2:	e4d2      	b.n	8002f6a <__aeabi_dsub+0xfa>
 80035c4:	2f00      	cmp	r7, #0
 80035c6:	d100      	bne.n	80035ca <__aeabi_dsub+0x75a>
 80035c8:	e713      	b.n	80033f2 <__aeabi_dsub+0x582>
 80035ca:	465c      	mov	r4, fp
 80035cc:	0017      	movs	r7, r2
 80035ce:	2500      	movs	r5, #0
 80035d0:	e5f6      	b.n	80031c0 <__aeabi_dsub+0x350>
 80035d2:	08d7      	lsrs	r7, r2, #3
 80035d4:	0749      	lsls	r1, r1, #29
 80035d6:	2302      	movs	r3, #2
 80035d8:	430f      	orrs	r7, r1
 80035da:	092d      	lsrs	r5, r5, #4
 80035dc:	e6a0      	b.n	8003320 <__aeabi_dsub+0x4b0>
 80035de:	0007      	movs	r7, r0
 80035e0:	e542      	b.n	8003068 <__aeabi_dsub+0x1f8>
 80035e2:	465b      	mov	r3, fp
 80035e4:	2601      	movs	r6, #1
 80035e6:	075f      	lsls	r7, r3, #29
 80035e8:	08dd      	lsrs	r5, r3, #3
 80035ea:	4663      	mov	r3, ip
 80035ec:	08d2      	lsrs	r2, r2, #3
 80035ee:	4317      	orrs	r7, r2
 80035f0:	401e      	ands	r6, r3
 80035f2:	e539      	b.n	8003068 <__aeabi_dsub+0x1f8>
 80035f4:	465b      	mov	r3, fp
 80035f6:	08d2      	lsrs	r2, r2, #3
 80035f8:	075f      	lsls	r7, r3, #29
 80035fa:	4317      	orrs	r7, r2
 80035fc:	08dd      	lsrs	r5, r3, #3
 80035fe:	e533      	b.n	8003068 <__aeabi_dsub+0x1f8>
 8003600:	4a1e      	ldr	r2, [pc, #120]	@ (800367c <__aeabi_dsub+0x80c>)
 8003602:	08db      	lsrs	r3, r3, #3
 8003604:	4022      	ands	r2, r4
 8003606:	0757      	lsls	r7, r2, #29
 8003608:	0252      	lsls	r2, r2, #9
 800360a:	2501      	movs	r5, #1
 800360c:	431f      	orrs	r7, r3
 800360e:	0b14      	lsrs	r4, r2, #12
 8003610:	e5c2      	b.n	8003198 <__aeabi_dsub+0x328>
 8003612:	000e      	movs	r6, r1
 8003614:	2001      	movs	r0, #1
 8003616:	e65f      	b.n	80032d8 <__aeabi_dsub+0x468>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <__aeabi_dsub+0x7c8>
 800361c:	464b      	mov	r3, r9
 800361e:	1b5b      	subs	r3, r3, r5
 8003620:	469c      	mov	ip, r3
 8003622:	2d00      	cmp	r5, #0
 8003624:	d100      	bne.n	8003628 <__aeabi_dsub+0x7b8>
 8003626:	e548      	b.n	80030ba <__aeabi_dsub+0x24a>
 8003628:	2701      	movs	r7, #1
 800362a:	2b38      	cmp	r3, #56	@ 0x38
 800362c:	dd00      	ble.n	8003630 <__aeabi_dsub+0x7c0>
 800362e:	e566      	b.n	80030fe <__aeabi_dsub+0x28e>
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	431c      	orrs	r4, r3
 8003636:	e550      	b.n	80030da <__aeabi_dsub+0x26a>
 8003638:	1c6b      	adds	r3, r5, #1
 800363a:	4d11      	ldr	r5, [pc, #68]	@ (8003680 <__aeabi_dsub+0x810>)
 800363c:	422b      	tst	r3, r5
 800363e:	d000      	beq.n	8003642 <__aeabi_dsub+0x7d2>
 8003640:	e673      	b.n	800332a <__aeabi_dsub+0x4ba>
 8003642:	4659      	mov	r1, fp
 8003644:	0023      	movs	r3, r4
 8003646:	4311      	orrs	r1, r2
 8003648:	468a      	mov	sl, r1
 800364a:	4303      	orrs	r3, r0
 800364c:	e600      	b.n	8003250 <__aeabi_dsub+0x3e0>
 800364e:	0767      	lsls	r7, r4, #29
 8003650:	08c0      	lsrs	r0, r0, #3
 8003652:	2300      	movs	r3, #0
 8003654:	4307      	orrs	r7, r0
 8003656:	08e5      	lsrs	r5, r4, #3
 8003658:	e662      	b.n	8003320 <__aeabi_dsub+0x4b0>
 800365a:	0764      	lsls	r4, r4, #29
 800365c:	08ff      	lsrs	r7, r7, #3
 800365e:	4327      	orrs	r7, r4
 8003660:	0905      	lsrs	r5, r0, #4
 8003662:	e65d      	b.n	8003320 <__aeabi_dsub+0x4b0>
 8003664:	08d2      	lsrs	r2, r2, #3
 8003666:	0749      	lsls	r1, r1, #29
 8003668:	4311      	orrs	r1, r2
 800366a:	000f      	movs	r7, r1
 800366c:	2302      	movs	r3, #2
 800366e:	092d      	lsrs	r5, r5, #4
 8003670:	e656      	b.n	8003320 <__aeabi_dsub+0x4b0>
 8003672:	0007      	movs	r7, r0
 8003674:	e5a4      	b.n	80031c0 <__aeabi_dsub+0x350>
 8003676:	0038      	movs	r0, r7
 8003678:	e48f      	b.n	8002f9a <__aeabi_dsub+0x12a>
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	ff7fffff 	.word	0xff7fffff
 8003680:	000007fe 	.word	0x000007fe

08003684 <__aeabi_dcmpun>:
 8003684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003686:	46c6      	mov	lr, r8
 8003688:	031e      	lsls	r6, r3, #12
 800368a:	0b36      	lsrs	r6, r6, #12
 800368c:	46b0      	mov	r8, r6
 800368e:	4e0d      	ldr	r6, [pc, #52]	@ (80036c4 <__aeabi_dcmpun+0x40>)
 8003690:	030c      	lsls	r4, r1, #12
 8003692:	004d      	lsls	r5, r1, #1
 8003694:	005f      	lsls	r7, r3, #1
 8003696:	b500      	push	{lr}
 8003698:	0b24      	lsrs	r4, r4, #12
 800369a:	0d6d      	lsrs	r5, r5, #21
 800369c:	0d7f      	lsrs	r7, r7, #21
 800369e:	42b5      	cmp	r5, r6
 80036a0:	d00b      	beq.n	80036ba <__aeabi_dcmpun+0x36>
 80036a2:	4908      	ldr	r1, [pc, #32]	@ (80036c4 <__aeabi_dcmpun+0x40>)
 80036a4:	2000      	movs	r0, #0
 80036a6:	428f      	cmp	r7, r1
 80036a8:	d104      	bne.n	80036b4 <__aeabi_dcmpun+0x30>
 80036aa:	4646      	mov	r6, r8
 80036ac:	4316      	orrs	r6, r2
 80036ae:	0030      	movs	r0, r6
 80036b0:	1e43      	subs	r3, r0, #1
 80036b2:	4198      	sbcs	r0, r3
 80036b4:	bc80      	pop	{r7}
 80036b6:	46b8      	mov	r8, r7
 80036b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ba:	4304      	orrs	r4, r0
 80036bc:	2001      	movs	r0, #1
 80036be:	2c00      	cmp	r4, #0
 80036c0:	d1f8      	bne.n	80036b4 <__aeabi_dcmpun+0x30>
 80036c2:	e7ee      	b.n	80036a2 <__aeabi_dcmpun+0x1e>
 80036c4:	000007ff 	.word	0x000007ff

080036c8 <__aeabi_d2iz>:
 80036c8:	000b      	movs	r3, r1
 80036ca:	0002      	movs	r2, r0
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	4d16      	ldr	r5, [pc, #88]	@ (8003728 <__aeabi_d2iz+0x60>)
 80036d0:	030c      	lsls	r4, r1, #12
 80036d2:	b082      	sub	sp, #8
 80036d4:	0049      	lsls	r1, r1, #1
 80036d6:	2000      	movs	r0, #0
 80036d8:	9200      	str	r2, [sp, #0]
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	0b24      	lsrs	r4, r4, #12
 80036de:	0d49      	lsrs	r1, r1, #21
 80036e0:	0fde      	lsrs	r6, r3, #31
 80036e2:	42a9      	cmp	r1, r5
 80036e4:	dd04      	ble.n	80036f0 <__aeabi_d2iz+0x28>
 80036e6:	4811      	ldr	r0, [pc, #68]	@ (800372c <__aeabi_d2iz+0x64>)
 80036e8:	4281      	cmp	r1, r0
 80036ea:	dd03      	ble.n	80036f4 <__aeabi_d2iz+0x2c>
 80036ec:	4b10      	ldr	r3, [pc, #64]	@ (8003730 <__aeabi_d2iz+0x68>)
 80036ee:	18f0      	adds	r0, r6, r3
 80036f0:	b002      	add	sp, #8
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	2080      	movs	r0, #128	@ 0x80
 80036f6:	0340      	lsls	r0, r0, #13
 80036f8:	4320      	orrs	r0, r4
 80036fa:	4c0e      	ldr	r4, [pc, #56]	@ (8003734 <__aeabi_d2iz+0x6c>)
 80036fc:	1a64      	subs	r4, r4, r1
 80036fe:	2c1f      	cmp	r4, #31
 8003700:	dd08      	ble.n	8003714 <__aeabi_d2iz+0x4c>
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <__aeabi_d2iz+0x70>)
 8003704:	1a5b      	subs	r3, r3, r1
 8003706:	40d8      	lsrs	r0, r3
 8003708:	0003      	movs	r3, r0
 800370a:	4258      	negs	r0, r3
 800370c:	2e00      	cmp	r6, #0
 800370e:	d1ef      	bne.n	80036f0 <__aeabi_d2iz+0x28>
 8003710:	0018      	movs	r0, r3
 8003712:	e7ed      	b.n	80036f0 <__aeabi_d2iz+0x28>
 8003714:	4b09      	ldr	r3, [pc, #36]	@ (800373c <__aeabi_d2iz+0x74>)
 8003716:	9a00      	ldr	r2, [sp, #0]
 8003718:	469c      	mov	ip, r3
 800371a:	0003      	movs	r3, r0
 800371c:	4461      	add	r1, ip
 800371e:	408b      	lsls	r3, r1
 8003720:	40e2      	lsrs	r2, r4
 8003722:	4313      	orrs	r3, r2
 8003724:	e7f1      	b.n	800370a <__aeabi_d2iz+0x42>
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	000003fe 	.word	0x000003fe
 800372c:	0000041d 	.word	0x0000041d
 8003730:	7fffffff 	.word	0x7fffffff
 8003734:	00000433 	.word	0x00000433
 8003738:	00000413 	.word	0x00000413
 800373c:	fffffbed 	.word	0xfffffbed

08003740 <__aeabi_i2d>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	2800      	cmp	r0, #0
 8003744:	d016      	beq.n	8003774 <__aeabi_i2d+0x34>
 8003746:	17c3      	asrs	r3, r0, #31
 8003748:	18c5      	adds	r5, r0, r3
 800374a:	405d      	eors	r5, r3
 800374c:	0fc4      	lsrs	r4, r0, #31
 800374e:	0028      	movs	r0, r5
 8003750:	f000 f912 	bl	8003978 <__clzsi2>
 8003754:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <__aeabi_i2d+0x58>)
 8003756:	1a1b      	subs	r3, r3, r0
 8003758:	055b      	lsls	r3, r3, #21
 800375a:	0d5b      	lsrs	r3, r3, #21
 800375c:	280a      	cmp	r0, #10
 800375e:	dc14      	bgt.n	800378a <__aeabi_i2d+0x4a>
 8003760:	0002      	movs	r2, r0
 8003762:	002e      	movs	r6, r5
 8003764:	3215      	adds	r2, #21
 8003766:	4096      	lsls	r6, r2
 8003768:	220b      	movs	r2, #11
 800376a:	1a12      	subs	r2, r2, r0
 800376c:	40d5      	lsrs	r5, r2
 800376e:	032d      	lsls	r5, r5, #12
 8003770:	0b2d      	lsrs	r5, r5, #12
 8003772:	e003      	b.n	800377c <__aeabi_i2d+0x3c>
 8003774:	2400      	movs	r4, #0
 8003776:	2300      	movs	r3, #0
 8003778:	2500      	movs	r5, #0
 800377a:	2600      	movs	r6, #0
 800377c:	051b      	lsls	r3, r3, #20
 800377e:	432b      	orrs	r3, r5
 8003780:	07e4      	lsls	r4, r4, #31
 8003782:	4323      	orrs	r3, r4
 8003784:	0030      	movs	r0, r6
 8003786:	0019      	movs	r1, r3
 8003788:	bd70      	pop	{r4, r5, r6, pc}
 800378a:	380b      	subs	r0, #11
 800378c:	4085      	lsls	r5, r0
 800378e:	032d      	lsls	r5, r5, #12
 8003790:	2600      	movs	r6, #0
 8003792:	0b2d      	lsrs	r5, r5, #12
 8003794:	e7f2      	b.n	800377c <__aeabi_i2d+0x3c>
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	0000041e 	.word	0x0000041e

0800379c <__aeabi_ui2d>:
 800379c:	b510      	push	{r4, lr}
 800379e:	1e04      	subs	r4, r0, #0
 80037a0:	d010      	beq.n	80037c4 <__aeabi_ui2d+0x28>
 80037a2:	f000 f8e9 	bl	8003978 <__clzsi2>
 80037a6:	4b0e      	ldr	r3, [pc, #56]	@ (80037e0 <__aeabi_ui2d+0x44>)
 80037a8:	1a1b      	subs	r3, r3, r0
 80037aa:	055b      	lsls	r3, r3, #21
 80037ac:	0d5b      	lsrs	r3, r3, #21
 80037ae:	280a      	cmp	r0, #10
 80037b0:	dc0f      	bgt.n	80037d2 <__aeabi_ui2d+0x36>
 80037b2:	220b      	movs	r2, #11
 80037b4:	0021      	movs	r1, r4
 80037b6:	1a12      	subs	r2, r2, r0
 80037b8:	40d1      	lsrs	r1, r2
 80037ba:	3015      	adds	r0, #21
 80037bc:	030a      	lsls	r2, r1, #12
 80037be:	4084      	lsls	r4, r0
 80037c0:	0b12      	lsrs	r2, r2, #12
 80037c2:	e001      	b.n	80037c8 <__aeabi_ui2d+0x2c>
 80037c4:	2300      	movs	r3, #0
 80037c6:	2200      	movs	r2, #0
 80037c8:	051b      	lsls	r3, r3, #20
 80037ca:	4313      	orrs	r3, r2
 80037cc:	0020      	movs	r0, r4
 80037ce:	0019      	movs	r1, r3
 80037d0:	bd10      	pop	{r4, pc}
 80037d2:	0022      	movs	r2, r4
 80037d4:	380b      	subs	r0, #11
 80037d6:	4082      	lsls	r2, r0
 80037d8:	0312      	lsls	r2, r2, #12
 80037da:	2400      	movs	r4, #0
 80037dc:	0b12      	lsrs	r2, r2, #12
 80037de:	e7f3      	b.n	80037c8 <__aeabi_ui2d+0x2c>
 80037e0:	0000041e 	.word	0x0000041e

080037e4 <__aeabi_f2d>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	0242      	lsls	r2, r0, #9
 80037e8:	0043      	lsls	r3, r0, #1
 80037ea:	0fc4      	lsrs	r4, r0, #31
 80037ec:	20fe      	movs	r0, #254	@ 0xfe
 80037ee:	0e1b      	lsrs	r3, r3, #24
 80037f0:	1c59      	adds	r1, r3, #1
 80037f2:	0a55      	lsrs	r5, r2, #9
 80037f4:	4208      	tst	r0, r1
 80037f6:	d00c      	beq.n	8003812 <__aeabi_f2d+0x2e>
 80037f8:	21e0      	movs	r1, #224	@ 0xe0
 80037fa:	0089      	lsls	r1, r1, #2
 80037fc:	468c      	mov	ip, r1
 80037fe:	076d      	lsls	r5, r5, #29
 8003800:	0b12      	lsrs	r2, r2, #12
 8003802:	4463      	add	r3, ip
 8003804:	051b      	lsls	r3, r3, #20
 8003806:	4313      	orrs	r3, r2
 8003808:	07e4      	lsls	r4, r4, #31
 800380a:	4323      	orrs	r3, r4
 800380c:	0028      	movs	r0, r5
 800380e:	0019      	movs	r1, r3
 8003810:	bd70      	pop	{r4, r5, r6, pc}
 8003812:	2b00      	cmp	r3, #0
 8003814:	d114      	bne.n	8003840 <__aeabi_f2d+0x5c>
 8003816:	2d00      	cmp	r5, #0
 8003818:	d01b      	beq.n	8003852 <__aeabi_f2d+0x6e>
 800381a:	0028      	movs	r0, r5
 800381c:	f000 f8ac 	bl	8003978 <__clzsi2>
 8003820:	280a      	cmp	r0, #10
 8003822:	dc1c      	bgt.n	800385e <__aeabi_f2d+0x7a>
 8003824:	230b      	movs	r3, #11
 8003826:	002a      	movs	r2, r5
 8003828:	1a1b      	subs	r3, r3, r0
 800382a:	40da      	lsrs	r2, r3
 800382c:	0003      	movs	r3, r0
 800382e:	3315      	adds	r3, #21
 8003830:	409d      	lsls	r5, r3
 8003832:	4b0e      	ldr	r3, [pc, #56]	@ (800386c <__aeabi_f2d+0x88>)
 8003834:	0312      	lsls	r2, r2, #12
 8003836:	1a1b      	subs	r3, r3, r0
 8003838:	055b      	lsls	r3, r3, #21
 800383a:	0b12      	lsrs	r2, r2, #12
 800383c:	0d5b      	lsrs	r3, r3, #21
 800383e:	e7e1      	b.n	8003804 <__aeabi_f2d+0x20>
 8003840:	2d00      	cmp	r5, #0
 8003842:	d009      	beq.n	8003858 <__aeabi_f2d+0x74>
 8003844:	0b13      	lsrs	r3, r2, #12
 8003846:	2280      	movs	r2, #128	@ 0x80
 8003848:	0312      	lsls	r2, r2, #12
 800384a:	431a      	orrs	r2, r3
 800384c:	076d      	lsls	r5, r5, #29
 800384e:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <__aeabi_f2d+0x8c>)
 8003850:	e7d8      	b.n	8003804 <__aeabi_f2d+0x20>
 8003852:	2300      	movs	r3, #0
 8003854:	2200      	movs	r2, #0
 8003856:	e7d5      	b.n	8003804 <__aeabi_f2d+0x20>
 8003858:	2200      	movs	r2, #0
 800385a:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <__aeabi_f2d+0x8c>)
 800385c:	e7d2      	b.n	8003804 <__aeabi_f2d+0x20>
 800385e:	0003      	movs	r3, r0
 8003860:	002a      	movs	r2, r5
 8003862:	3b0b      	subs	r3, #11
 8003864:	409a      	lsls	r2, r3
 8003866:	2500      	movs	r5, #0
 8003868:	e7e3      	b.n	8003832 <__aeabi_f2d+0x4e>
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	00000389 	.word	0x00000389
 8003870:	000007ff 	.word	0x000007ff

08003874 <__aeabi_d2f>:
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	004b      	lsls	r3, r1, #1
 8003878:	030f      	lsls	r7, r1, #12
 800387a:	0d5b      	lsrs	r3, r3, #21
 800387c:	4c3a      	ldr	r4, [pc, #232]	@ (8003968 <__aeabi_d2f+0xf4>)
 800387e:	0f45      	lsrs	r5, r0, #29
 8003880:	b083      	sub	sp, #12
 8003882:	0a7f      	lsrs	r7, r7, #9
 8003884:	1c5e      	adds	r6, r3, #1
 8003886:	432f      	orrs	r7, r5
 8003888:	9000      	str	r0, [sp, #0]
 800388a:	9101      	str	r1, [sp, #4]
 800388c:	0fca      	lsrs	r2, r1, #31
 800388e:	00c5      	lsls	r5, r0, #3
 8003890:	4226      	tst	r6, r4
 8003892:	d00b      	beq.n	80038ac <__aeabi_d2f+0x38>
 8003894:	4935      	ldr	r1, [pc, #212]	@ (800396c <__aeabi_d2f+0xf8>)
 8003896:	185c      	adds	r4, r3, r1
 8003898:	2cfe      	cmp	r4, #254	@ 0xfe
 800389a:	dd13      	ble.n	80038c4 <__aeabi_d2f+0x50>
 800389c:	20ff      	movs	r0, #255	@ 0xff
 800389e:	2300      	movs	r3, #0
 80038a0:	05c0      	lsls	r0, r0, #23
 80038a2:	4318      	orrs	r0, r3
 80038a4:	07d2      	lsls	r2, r2, #31
 80038a6:	4310      	orrs	r0, r2
 80038a8:	b003      	add	sp, #12
 80038aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ac:	433d      	orrs	r5, r7
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <__aeabi_d2f+0x42>
 80038b2:	2000      	movs	r0, #0
 80038b4:	e7f4      	b.n	80038a0 <__aeabi_d2f+0x2c>
 80038b6:	2d00      	cmp	r5, #0
 80038b8:	d0f0      	beq.n	800389c <__aeabi_d2f+0x28>
 80038ba:	2380      	movs	r3, #128	@ 0x80
 80038bc:	03db      	lsls	r3, r3, #15
 80038be:	20ff      	movs	r0, #255	@ 0xff
 80038c0:	433b      	orrs	r3, r7
 80038c2:	e7ed      	b.n	80038a0 <__aeabi_d2f+0x2c>
 80038c4:	2c00      	cmp	r4, #0
 80038c6:	dd0c      	ble.n	80038e2 <__aeabi_d2f+0x6e>
 80038c8:	9b00      	ldr	r3, [sp, #0]
 80038ca:	00ff      	lsls	r7, r7, #3
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	4183      	sbcs	r3, r0
 80038d2:	0f69      	lsrs	r1, r5, #29
 80038d4:	433b      	orrs	r3, r7
 80038d6:	430b      	orrs	r3, r1
 80038d8:	0759      	lsls	r1, r3, #29
 80038da:	d127      	bne.n	800392c <__aeabi_d2f+0xb8>
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	b2e0      	uxtb	r0, r4
 80038e0:	e7de      	b.n	80038a0 <__aeabi_d2f+0x2c>
 80038e2:	0021      	movs	r1, r4
 80038e4:	3117      	adds	r1, #23
 80038e6:	db31      	blt.n	800394c <__aeabi_d2f+0xd8>
 80038e8:	2180      	movs	r1, #128	@ 0x80
 80038ea:	201e      	movs	r0, #30
 80038ec:	0409      	lsls	r1, r1, #16
 80038ee:	4339      	orrs	r1, r7
 80038f0:	1b00      	subs	r0, r0, r4
 80038f2:	281f      	cmp	r0, #31
 80038f4:	dd2d      	ble.n	8003952 <__aeabi_d2f+0xde>
 80038f6:	2602      	movs	r6, #2
 80038f8:	4276      	negs	r6, r6
 80038fa:	1b34      	subs	r4, r6, r4
 80038fc:	000e      	movs	r6, r1
 80038fe:	40e6      	lsrs	r6, r4
 8003900:	0034      	movs	r4, r6
 8003902:	2820      	cmp	r0, #32
 8003904:	d004      	beq.n	8003910 <__aeabi_d2f+0x9c>
 8003906:	481a      	ldr	r0, [pc, #104]	@ (8003970 <__aeabi_d2f+0xfc>)
 8003908:	4684      	mov	ip, r0
 800390a:	4463      	add	r3, ip
 800390c:	4099      	lsls	r1, r3
 800390e:	430d      	orrs	r5, r1
 8003910:	002b      	movs	r3, r5
 8003912:	1e59      	subs	r1, r3, #1
 8003914:	418b      	sbcs	r3, r1
 8003916:	4323      	orrs	r3, r4
 8003918:	0759      	lsls	r1, r3, #29
 800391a:	d003      	beq.n	8003924 <__aeabi_d2f+0xb0>
 800391c:	210f      	movs	r1, #15
 800391e:	4019      	ands	r1, r3
 8003920:	2904      	cmp	r1, #4
 8003922:	d10b      	bne.n	800393c <__aeabi_d2f+0xc8>
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	2000      	movs	r0, #0
 8003928:	0a5b      	lsrs	r3, r3, #9
 800392a:	e7b9      	b.n	80038a0 <__aeabi_d2f+0x2c>
 800392c:	210f      	movs	r1, #15
 800392e:	4019      	ands	r1, r3
 8003930:	2904      	cmp	r1, #4
 8003932:	d104      	bne.n	800393e <__aeabi_d2f+0xca>
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	0a5b      	lsrs	r3, r3, #9
 8003938:	b2e0      	uxtb	r0, r4
 800393a:	e7b1      	b.n	80038a0 <__aeabi_d2f+0x2c>
 800393c:	2400      	movs	r4, #0
 800393e:	3304      	adds	r3, #4
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	d5f7      	bpl.n	8003934 <__aeabi_d2f+0xc0>
 8003944:	3401      	adds	r4, #1
 8003946:	2300      	movs	r3, #0
 8003948:	b2e0      	uxtb	r0, r4
 800394a:	e7a9      	b.n	80038a0 <__aeabi_d2f+0x2c>
 800394c:	2000      	movs	r0, #0
 800394e:	2300      	movs	r3, #0
 8003950:	e7a6      	b.n	80038a0 <__aeabi_d2f+0x2c>
 8003952:	4c08      	ldr	r4, [pc, #32]	@ (8003974 <__aeabi_d2f+0x100>)
 8003954:	191c      	adds	r4, r3, r4
 8003956:	002b      	movs	r3, r5
 8003958:	40a5      	lsls	r5, r4
 800395a:	40c3      	lsrs	r3, r0
 800395c:	40a1      	lsls	r1, r4
 800395e:	1e68      	subs	r0, r5, #1
 8003960:	4185      	sbcs	r5, r0
 8003962:	4329      	orrs	r1, r5
 8003964:	430b      	orrs	r3, r1
 8003966:	e7d7      	b.n	8003918 <__aeabi_d2f+0xa4>
 8003968:	000007fe 	.word	0x000007fe
 800396c:	fffffc80 	.word	0xfffffc80
 8003970:	fffffca2 	.word	0xfffffca2
 8003974:	fffffc82 	.word	0xfffffc82

08003978 <__clzsi2>:
 8003978:	211c      	movs	r1, #28
 800397a:	2301      	movs	r3, #1
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	4298      	cmp	r0, r3
 8003980:	d301      	bcc.n	8003986 <__clzsi2+0xe>
 8003982:	0c00      	lsrs	r0, r0, #16
 8003984:	3910      	subs	r1, #16
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	4298      	cmp	r0, r3
 800398a:	d301      	bcc.n	8003990 <__clzsi2+0x18>
 800398c:	0a00      	lsrs	r0, r0, #8
 800398e:	3908      	subs	r1, #8
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	4298      	cmp	r0, r3
 8003994:	d301      	bcc.n	800399a <__clzsi2+0x22>
 8003996:	0900      	lsrs	r0, r0, #4
 8003998:	3904      	subs	r1, #4
 800399a:	a202      	add	r2, pc, #8	@ (adr r2, 80039a4 <__clzsi2+0x2c>)
 800399c:	5c10      	ldrb	r0, [r2, r0]
 800399e:	1840      	adds	r0, r0, r1
 80039a0:	4770      	bx	lr
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	02020304 	.word	0x02020304
 80039a8:	01010101 	.word	0x01010101
	...

080039b4 <__clzdi2>:
 80039b4:	b510      	push	{r4, lr}
 80039b6:	2900      	cmp	r1, #0
 80039b8:	d103      	bne.n	80039c2 <__clzdi2+0xe>
 80039ba:	f7ff ffdd 	bl	8003978 <__clzsi2>
 80039be:	3020      	adds	r0, #32
 80039c0:	e002      	b.n	80039c8 <__clzdi2+0x14>
 80039c2:	0008      	movs	r0, r1
 80039c4:	f7ff ffd8 	bl	8003978 <__clzsi2>
 80039c8:	bd10      	pop	{r4, pc}
 80039ca:	46c0      	nop			@ (mov r8, r8)

080039cc <debug_print>:

// BME680 device structure
struct bme68x_dev bme680_dev;

// Debug function to send message to both UARTs
void debug_print(const char* message) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	0018      	movs	r0, r3
 80039d8:	f7fc fb9e 	bl	8000118 <strlen>
 80039dc:	0003      	movs	r3, r0
 80039de:	b29a      	uxth	r2, r3
 80039e0:	2301      	movs	r3, #1
 80039e2:	425b      	negs	r3, r3
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4809      	ldr	r0, [pc, #36]	@ (8003a0c <debug_print+0x40>)
 80039e8:	f00b fd30 	bl	800f44c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fc fb92 	bl	8000118 <strlen>
 80039f4:	0003      	movs	r3, r0
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	2301      	movs	r3, #1
 80039fa:	425b      	negs	r3, r3
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4804      	ldr	r0, [pc, #16]	@ (8003a10 <debug_print+0x44>)
 8003a00:	f00b fd24 	bl	800f44c <HAL_UART_Transmit>
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b002      	add	sp, #8
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	2000039c 	.word	0x2000039c
 8003a10:	20000430 	.word	0x20000430

08003a14 <i2c_scan_bus>:

// I2C bus scanner function
void i2c_scan_bus(void) {
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a16:	b0a3      	sub	sp, #140	@ 0x8c
 8003a18:	af00      	add	r7, sp, #0
    uint8_t found_devices = 0;
 8003a1a:	2387      	movs	r3, #135	@ 0x87
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
    char debug_msg[128];
    
    debug_print("Scanning I2C bus for devices...\r\n");
 8003a22:	4b29      	ldr	r3, [pc, #164]	@ (8003ac8 <i2c_scan_bus+0xb4>)
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff ffd1 	bl	80039cc <debug_print>
    
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003a2a:	2386      	movs	r3, #134	@ 0x86
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e029      	b.n	8003a88 <i2c_scan_bus+0x74>
        HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 2, 100);
 8003a34:	2586      	movs	r5, #134	@ 0x86
 8003a36:	197b      	adds	r3, r7, r5
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	18db      	adds	r3, r3, r3
 8003a3e:	b299      	uxth	r1, r3
 8003a40:	2685      	movs	r6, #133	@ 0x85
 8003a42:	19bc      	adds	r4, r7, r6
 8003a44:	4821      	ldr	r0, [pc, #132]	@ (8003acc <i2c_scan_bus+0xb8>)
 8003a46:	2364      	movs	r3, #100	@ 0x64
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f009 fa31 	bl	800ceb0 <HAL_I2C_IsDeviceReady>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	7023      	strb	r3, [r4, #0]
        if (status == HAL_OK) {
 8003a52:	19bb      	adds	r3, r7, r6
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d110      	bne.n	8003a7c <i2c_scan_bus+0x68>
            snprintf(debug_msg, sizeof(debug_msg), "Device found at address: 0x%02X\r\n", addr);
 8003a5a:	197b      	adds	r3, r7, r5
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <i2c_scan_bus+0xbc>)
 8003a60:	1d38      	adds	r0, r7, #4
 8003a62:	2180      	movs	r1, #128	@ 0x80
 8003a64:	f00d ffd6 	bl	8011a14 <sniprintf>
            debug_print(debug_msg);
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7ff ffae 	bl	80039cc <debug_print>
            found_devices++;
 8003a70:	2187      	movs	r1, #135	@ 0x87
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	3201      	adds	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003a7c:	2186      	movs	r1, #134	@ 0x86
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	781a      	ldrb	r2, [r3, #0]
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	3201      	adds	r2, #1
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	2386      	movs	r3, #134	@ 0x86
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	b25b      	sxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	dacf      	bge.n	8003a34 <i2c_scan_bus+0x20>
        }
    }
    
    if (found_devices == 0) {
 8003a94:	2387      	movs	r3, #135	@ 0x87
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <i2c_scan_bus+0x94>
        debug_print("No I2C devices found on bus!\r\n");
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <i2c_scan_bus+0xc0>)
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7ff ff93 	bl	80039cc <debug_print>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Total devices found: %d\r\n", found_devices);
        debug_print(debug_msg);
    }
}
 8003aa6:	e00b      	b.n	8003ac0 <i2c_scan_bus+0xac>
        snprintf(debug_msg, sizeof(debug_msg), "Total devices found: %d\r\n", found_devices);
 8003aa8:	2387      	movs	r3, #135	@ 0x87
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad8 <i2c_scan_bus+0xc4>)
 8003ab0:	1d38      	adds	r0, r7, #4
 8003ab2:	2180      	movs	r1, #128	@ 0x80
 8003ab4:	f00d ffae 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7ff ff86 	bl	80039cc <debug_print>
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b023      	add	sp, #140	@ 0x8c
 8003ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac8:	080147e0 	.word	0x080147e0
 8003acc:	200002e4 	.word	0x200002e4
 8003ad0:	08014804 	.word	0x08014804
 8003ad4:	08014828 	.word	0x08014828
 8003ad8:	08014848 	.word	0x08014848

08003adc <bme680_i2c_read>:

// Enhanced I2C read function for BME680 with detailed error reporting
int8_t bme680_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b0ab      	sub	sp, #172	@ 0xac
 8003ae0:	af04      	add	r7, sp, #16
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	240f      	movs	r4, #15
 8003aea:	193b      	adds	r3, r7, r4
 8003aec:	1c02      	adds	r2, r0, #0
 8003aee:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;
    char debug_msg[128];
    
    // Debug: Print read attempt
    snprintf(debug_msg, sizeof(debug_msg), "I2C Read: Reg=0x%02X, Len=%lu\r\n", reg_addr, len);
 8003af0:	193b      	adds	r3, r7, r4
 8003af2:	7819      	ldrb	r1, [r3, #0]
 8003af4:	4a22      	ldr	r2, [pc, #136]	@ (8003b80 <bme680_i2c_read+0xa4>)
 8003af6:	2514      	movs	r5, #20
 8003af8:	1978      	adds	r0, r7, r5
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	000b      	movs	r3, r1
 8003b00:	2180      	movs	r1, #128	@ 0x80
 8003b02:	f00d ff87 	bl	8011a14 <sniprintf>
    debug_print(debug_msg);
 8003b06:	197b      	adds	r3, r7, r5
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7ff ff5f 	bl	80039cc <debug_print>
    
    // Read data from BME680 using I2C
    status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, reg_addr, 
 8003b0e:	193b      	adds	r3, r7, r4
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b299      	uxth	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2697      	movs	r6, #151	@ 0x97
 8003b1a:	19bc      	adds	r4, r7, r6
 8003b1c:	4819      	ldr	r0, [pc, #100]	@ (8003b84 <bme680_i2c_read+0xa8>)
 8003b1e:	22fa      	movs	r2, #250	@ 0xfa
 8003b20:	0092      	lsls	r2, r2, #2
 8003b22:	9202      	str	r2, [sp, #8]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	000a      	movs	r2, r1
 8003b2e:	21ec      	movs	r1, #236	@ 0xec
 8003b30:	f009 f88a 	bl	800cc48 <HAL_I2C_Mem_Read>
 8003b34:	0003      	movs	r3, r0
 8003b36:	7023      	strb	r3, [r4, #0]
                              I2C_MEMADD_SIZE_8BIT, reg_data, len, 1000);
    
    if (status == HAL_OK) {
 8003b38:	19bb      	adds	r3, r7, r6
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <bme680_i2c_read+0x7e>
        snprintf(debug_msg, sizeof(debug_msg), "I2C Read Success: Data[0]=0x%02X\r\n", reg_data[0]);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4a10      	ldr	r2, [pc, #64]	@ (8003b88 <bme680_i2c_read+0xac>)
 8003b46:	1978      	adds	r0, r7, r5
 8003b48:	2180      	movs	r1, #128	@ 0x80
 8003b4a:	f00d ff63 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8003b4e:	197b      	adds	r3, r7, r5
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff ff3b 	bl	80039cc <debug_print>
        return BME68X_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e00e      	b.n	8003b78 <bme680_i2c_read+0x9c>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "I2C Read Failed: Status=%d\r\n", status);
 8003b5a:	2397      	movs	r3, #151	@ 0x97
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4a0a      	ldr	r2, [pc, #40]	@ (8003b8c <bme680_i2c_read+0xb0>)
 8003b62:	2414      	movs	r4, #20
 8003b64:	1938      	adds	r0, r7, r4
 8003b66:	2180      	movs	r1, #128	@ 0x80
 8003b68:	f00d ff54 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8003b6c:	193b      	adds	r3, r7, r4
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7ff ff2c 	bl	80039cc <debug_print>
        return BME68X_E_COM_FAIL;
 8003b74:	2302      	movs	r3, #2
 8003b76:	425b      	negs	r3, r3
    }
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b027      	add	sp, #156	@ 0x9c
 8003b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b80:	08014864 	.word	0x08014864
 8003b84:	200002e4 	.word	0x200002e4
 8003b88:	08014884 	.word	0x08014884
 8003b8c:	080148a8 	.word	0x080148a8

08003b90 <bme680_i2c_write>:

// Enhanced I2C write function for BME680 with detailed error reporting
int8_t bme680_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b92:	b0ab      	sub	sp, #172	@ 0xac
 8003b94:	af04      	add	r7, sp, #16
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	250f      	movs	r5, #15
 8003b9e:	197b      	adds	r3, r7, r5
 8003ba0:	1c02      	adds	r2, r0, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;
    char debug_msg[128];
    
    // Debug: Print write attempt
    snprintf(debug_msg, sizeof(debug_msg), "I2C Write: Reg=0x%02X, Data[0]=0x%02X, Len=%lu\r\n", 
 8003ba4:	197b      	adds	r3, r7, r5
 8003ba6:	7819      	ldrb	r1, [r3, #0]
             reg_addr, reg_data[0], len);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
    snprintf(debug_msg, sizeof(debug_msg), "I2C Write: Reg=0x%02X, Data[0]=0x%02X, Len=%lu\r\n", 
 8003bac:	001c      	movs	r4, r3
 8003bae:	4a20      	ldr	r2, [pc, #128]	@ (8003c30 <bme680_i2c_write+0xa0>)
 8003bb0:	2614      	movs	r6, #20
 8003bb2:	19b8      	adds	r0, r7, r6
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	9400      	str	r4, [sp, #0]
 8003bba:	000b      	movs	r3, r1
 8003bbc:	2180      	movs	r1, #128	@ 0x80
 8003bbe:	f00d ff29 	bl	8011a14 <sniprintf>
    debug_print(debug_msg);
 8003bc2:	19bb      	adds	r3, r7, r6
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7ff ff01 	bl	80039cc <debug_print>
    
    // Write data to BME680 using I2C
    status = HAL_I2C_Mem_Write(&hi2c1, BME68X_I2C_ADDR_LOW << 1, reg_addr, 
 8003bca:	197b      	adds	r3, r7, r5
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b299      	uxth	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2597      	movs	r5, #151	@ 0x97
 8003bd6:	197c      	adds	r4, r7, r5
 8003bd8:	4816      	ldr	r0, [pc, #88]	@ (8003c34 <bme680_i2c_write+0xa4>)
 8003bda:	22fa      	movs	r2, #250	@ 0xfa
 8003bdc:	0092      	lsls	r2, r2, #2
 8003bde:	9202      	str	r2, [sp, #8]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2301      	movs	r3, #1
 8003be8:	000a      	movs	r2, r1
 8003bea:	21ec      	movs	r1, #236	@ 0xec
 8003bec:	f008 fefe 	bl	800c9ec <HAL_I2C_Mem_Write>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	7023      	strb	r3, [r4, #0]
                               I2C_MEMADD_SIZE_8BIT, (uint8_t*)reg_data, len, 1000);
    
    if (status == HAL_OK) {
 8003bf4:	197b      	adds	r3, r7, r5
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <bme680_i2c_write+0x78>
        debug_print("I2C Write Success\r\n");
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c38 <bme680_i2c_write+0xa8>)
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f7ff fee4 	bl	80039cc <debug_print>
        return BME68X_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e00e      	b.n	8003c26 <bme680_i2c_write+0x96>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "I2C Write Failed: Status=%d\r\n", status);
 8003c08:	2397      	movs	r3, #151	@ 0x97
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003c3c <bme680_i2c_write+0xac>)
 8003c10:	2414      	movs	r4, #20
 8003c12:	1938      	adds	r0, r7, r4
 8003c14:	2180      	movs	r1, #128	@ 0x80
 8003c16:	f00d fefd 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8003c1a:	193b      	adds	r3, r7, r4
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7ff fed5 	bl	80039cc <debug_print>
        return BME68X_E_COM_FAIL;
 8003c22:	2302      	movs	r3, #2
 8003c24:	425b      	negs	r3, r3
    }
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b027      	add	sp, #156	@ 0x9c
 8003c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	080148c8 	.word	0x080148c8
 8003c34:	200002e4 	.word	0x200002e4
 8003c38:	080148fc 	.word	0x080148fc
 8003c3c:	08014910 	.word	0x08014910

08003c40 <bme680_delay_us>:

// Delay function for BME680
void bme680_delay_us(uint32_t period, void *intf_ptr)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
    // For small delays, use a simple loop
    // For larger delays, use HAL_Delay
    if (period < 1000) {
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	23fa      	movs	r3, #250	@ 0xfa
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d20c      	bcs.n	8003c6e <bme680_delay_us+0x2e>
        // Simple microsecond delay loop
        volatile uint32_t i;
        for (i = 0; i < period * 16; i++) {
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e003      	b.n	8003c62 <bme680_delay_us+0x22>
            __NOP();
 8003c5a:	46c0      	nop			@ (mov r8, r8)
        for (i = 0; i < period * 16; i++) {
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	011a      	lsls	r2, r3, #4
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d8f6      	bhi.n	8003c5a <bme680_delay_us+0x1a>
        }
    } else {
        // Convert microseconds to milliseconds for HAL_Delay
        HAL_Delay(period / 1000);
    }
}
 8003c6c:	e009      	b.n	8003c82 <bme680_delay_us+0x42>
        HAL_Delay(period / 1000);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	22fa      	movs	r2, #250	@ 0xfa
 8003c72:	0091      	lsls	r1, r2, #2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7fc fa6b 	bl	8000150 <__udivsi3>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f008 fb7d 	bl	800c37c <HAL_Delay>
}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b004      	add	sp, #16
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <bme680_check_sensor_presence>:

// Enhanced sensor presence check with multiple address attempts
int8_t bme680_check_sensor_presence(void)
{
 8003c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8e:	b0ab      	sub	sp, #172	@ 0xac
 8003c90:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef status;
    uint8_t chip_id;
    char debug_msg[128];
    
    debug_print("Checking BME680 sensor presence...\r\n");
 8003c92:	4b67      	ldr	r3, [pc, #412]	@ (8003e30 <bme680_check_sensor_presence+0x1a4>)
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7ff fe99 	bl	80039cc <debug_print>
    
    // Try both possible addresses
    uint8_t addresses[] = {BME68X_I2C_ADDR_LOW, BME68X_I2C_ADDR_HIGH};
 8003c9a:	230c      	movs	r3, #12
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	4a65      	ldr	r2, [pc, #404]	@ (8003e34 <bme680_check_sensor_presence+0x1a8>)
 8003ca0:	801a      	strh	r2, [r3, #0]
    const char* addr_names[] = {"0x76", "0x77"};
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	4a64      	ldr	r2, [pc, #400]	@ (8003e38 <bme680_check_sensor_presence+0x1ac>)
 8003ca6:	ca03      	ldmia	r2!, {r0, r1}
 8003ca8:	c303      	stmia	r3!, {r0, r1}
    
    for (int i = 0; i < 2; i++) {
 8003caa:	2300      	movs	r3, #0
 8003cac:	2294      	movs	r2, #148	@ 0x94
 8003cae:	18ba      	adds	r2, r7, r2
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e0ad      	b.n	8003e10 <bme680_check_sensor_presence+0x184>
        snprintf(debug_msg, sizeof(debug_msg), "Trying address %s...\r\n", addr_names[i]);
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	2694      	movs	r6, #148	@ 0x94
 8003cb8:	19ba      	adds	r2, r7, r6
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	0092      	lsls	r2, r2, #2
 8003cbe:	58d3      	ldr	r3, [r2, r3]
 8003cc0:	4a5e      	ldr	r2, [pc, #376]	@ (8003e3c <bme680_check_sensor_presence+0x1b0>)
 8003cc2:	2510      	movs	r5, #16
 8003cc4:	1978      	adds	r0, r7, r5
 8003cc6:	2180      	movs	r1, #128	@ 0x80
 8003cc8:	f00d fea4 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8003ccc:	197b      	adds	r3, r7, r5
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7ff fe7c 	bl	80039cc <debug_print>
        
        // First check if device responds
        status = HAL_I2C_IsDeviceReady(&hi2c1, addresses[i] << 1, 3, 1000);
 8003cd4:	230c      	movs	r3, #12
 8003cd6:	18fa      	adds	r2, r7, r3
 8003cd8:	19b9      	adds	r1, r7, r6
 8003cda:	680b      	ldr	r3, [r1, #0]
 8003cdc:	18d3      	adds	r3, r2, r3
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	18db      	adds	r3, r3, r3
 8003ce2:	b299      	uxth	r1, r3
 8003ce4:	2493      	movs	r4, #147	@ 0x93
 8003ce6:	193c      	adds	r4, r7, r4
 8003ce8:	23fa      	movs	r3, #250	@ 0xfa
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4854      	ldr	r0, [pc, #336]	@ (8003e40 <bme680_check_sensor_presence+0x1b4>)
 8003cee:	2203      	movs	r2, #3
 8003cf0:	f009 f8de 	bl	800ceb0 <HAL_I2C_IsDeviceReady>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	7023      	strb	r3, [r4, #0]
        if (status == HAL_OK) {
 8003cf8:	2493      	movs	r4, #147	@ 0x93
 8003cfa:	193b      	adds	r3, r7, r4
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d170      	bne.n	8003de4 <bme680_check_sensor_presence+0x158>
            snprintf(debug_msg, sizeof(debug_msg), "Device responds at address %s\r\n", addr_names[i]);
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	19ba      	adds	r2, r7, r6
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	0092      	lsls	r2, r2, #2
 8003d0a:	58d3      	ldr	r3, [r2, r3]
 8003d0c:	4a4d      	ldr	r2, [pc, #308]	@ (8003e44 <bme680_check_sensor_presence+0x1b8>)
 8003d0e:	1978      	adds	r0, r7, r5
 8003d10:	2180      	movs	r1, #128	@ 0x80
 8003d12:	f00d fe7f 	bl	8011a14 <sniprintf>
            debug_print(debug_msg);
 8003d16:	197b      	adds	r3, r7, r5
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7ff fe57 	bl	80039cc <debug_print>
            
            // Try to read chip ID
            status = HAL_I2C_Mem_Read(&hi2c1, addresses[i] << 1, BME68X_REG_CHIP_ID, 
 8003d1e:	230c      	movs	r3, #12
 8003d20:	18fa      	adds	r2, r7, r3
 8003d22:	19bb      	adds	r3, r7, r6
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	18d3      	adds	r3, r2, r3
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	18db      	adds	r3, r3, r3
 8003d2c:	b299      	uxth	r1, r3
 8003d2e:	193c      	adds	r4, r7, r4
 8003d30:	4843      	ldr	r0, [pc, #268]	@ (8003e40 <bme680_check_sensor_presence+0x1b4>)
 8003d32:	23fa      	movs	r3, #250	@ 0xfa
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	9302      	str	r3, [sp, #8]
 8003d38:	2301      	movs	r3, #1
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	2392      	movs	r3, #146	@ 0x92
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2301      	movs	r3, #1
 8003d44:	22d0      	movs	r2, #208	@ 0xd0
 8003d46:	f008 ff7f 	bl	800cc48 <HAL_I2C_Mem_Read>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	7023      	strb	r3, [r4, #0]
                                      I2C_MEMADD_SIZE_8BIT, &chip_id, 1, 1000);
            
            if (status == HAL_OK) {
 8003d4e:	2493      	movs	r4, #147	@ 0x93
 8003d50:	193b      	adds	r3, r7, r4
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d134      	bne.n	8003dc2 <bme680_check_sensor_presence+0x136>
                snprintf(debug_msg, sizeof(debug_msg), "Chip ID read: 0x%02X (Expected: 0x%02X)\r\n", 
 8003d58:	2492      	movs	r4, #146	@ 0x92
 8003d5a:	193b      	adds	r3, r7, r4
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	0019      	movs	r1, r3
 8003d60:	4a39      	ldr	r2, [pc, #228]	@ (8003e48 <bme680_check_sensor_presence+0x1bc>)
 8003d62:	1978      	adds	r0, r7, r5
 8003d64:	2361      	movs	r3, #97	@ 0x61
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	000b      	movs	r3, r1
 8003d6a:	2180      	movs	r1, #128	@ 0x80
 8003d6c:	f00d fe52 	bl	8011a14 <sniprintf>
                         chip_id, BME68X_CHIP_ID);
                debug_print(debug_msg);
 8003d70:	197b      	adds	r3, r7, r5
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7ff fe2a 	bl	80039cc <debug_print>
                
                if (chip_id == BME68X_CHIP_ID) {
 8003d78:	193b      	adds	r3, r7, r4
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b61      	cmp	r3, #97	@ 0x61
 8003d7e:	d10f      	bne.n	8003da0 <bme680_check_sensor_presence+0x114>
                    snprintf(debug_msg, sizeof(debug_msg), "✓ BME680 found at address %s\r\n", addr_names[i]);
 8003d80:	1d3b      	adds	r3, r7, #4
 8003d82:	19ba      	adds	r2, r7, r6
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	0092      	lsls	r2, r2, #2
 8003d88:	58d3      	ldr	r3, [r2, r3]
 8003d8a:	4a30      	ldr	r2, [pc, #192]	@ (8003e4c <bme680_check_sensor_presence+0x1c0>)
 8003d8c:	1978      	adds	r0, r7, r5
 8003d8e:	2180      	movs	r1, #128	@ 0x80
 8003d90:	f00d fe40 	bl	8011a14 <sniprintf>
                    debug_print(debug_msg);
 8003d94:	197b      	adds	r3, r7, r5
 8003d96:	0018      	movs	r0, r3
 8003d98:	f7ff fe18 	bl	80039cc <debug_print>
                    return BME68X_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e043      	b.n	8003e28 <bme680_check_sensor_presence+0x19c>
                } else {
                    snprintf(debug_msg, sizeof(debug_msg), "✗ Wrong chip ID at address %s\r\n", addr_names[i]);
 8003da0:	1d3b      	adds	r3, r7, #4
 8003da2:	2294      	movs	r2, #148	@ 0x94
 8003da4:	18ba      	adds	r2, r7, r2
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	0092      	lsls	r2, r2, #2
 8003daa:	58d3      	ldr	r3, [r2, r3]
 8003dac:	4a28      	ldr	r2, [pc, #160]	@ (8003e50 <bme680_check_sensor_presence+0x1c4>)
 8003dae:	2410      	movs	r4, #16
 8003db0:	1938      	adds	r0, r7, r4
 8003db2:	2180      	movs	r1, #128	@ 0x80
 8003db4:	f00d fe2e 	bl	8011a14 <sniprintf>
                    debug_print(debug_msg);
 8003db8:	193b      	adds	r3, r7, r4
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff fe06 	bl	80039cc <debug_print>
 8003dc0:	e020      	b.n	8003e04 <bme680_check_sensor_presence+0x178>
                }
            } else {
                snprintf(debug_msg, sizeof(debug_msg), "✗ Failed to read chip ID at address %s\r\n", addr_names[i]);
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	2294      	movs	r2, #148	@ 0x94
 8003dc6:	18ba      	adds	r2, r7, r2
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	0092      	lsls	r2, r2, #2
 8003dcc:	58d3      	ldr	r3, [r2, r3]
 8003dce:	4a21      	ldr	r2, [pc, #132]	@ (8003e54 <bme680_check_sensor_presence+0x1c8>)
 8003dd0:	2410      	movs	r4, #16
 8003dd2:	1938      	adds	r0, r7, r4
 8003dd4:	2180      	movs	r1, #128	@ 0x80
 8003dd6:	f00d fe1d 	bl	8011a14 <sniprintf>
                debug_print(debug_msg);
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7ff fdf5 	bl	80039cc <debug_print>
 8003de2:	e00f      	b.n	8003e04 <bme680_check_sensor_presence+0x178>
            }
        } else {
            snprintf(debug_msg, sizeof(debug_msg), "✗ No device at address %s\r\n", addr_names[i]);
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	2294      	movs	r2, #148	@ 0x94
 8003de8:	18ba      	adds	r2, r7, r2
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	0092      	lsls	r2, r2, #2
 8003dee:	58d3      	ldr	r3, [r2, r3]
 8003df0:	4a19      	ldr	r2, [pc, #100]	@ (8003e58 <bme680_check_sensor_presence+0x1cc>)
 8003df2:	2410      	movs	r4, #16
 8003df4:	1938      	adds	r0, r7, r4
 8003df6:	2180      	movs	r1, #128	@ 0x80
 8003df8:	f00d fe0c 	bl	8011a14 <sniprintf>
            debug_print(debug_msg);
 8003dfc:	193b      	adds	r3, r7, r4
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff fde4 	bl	80039cc <debug_print>
    for (int i = 0; i < 2; i++) {
 8003e04:	2294      	movs	r2, #148	@ 0x94
 8003e06:	18bb      	adds	r3, r7, r2
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	18ba      	adds	r2, r7, r2
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	2394      	movs	r3, #148	@ 0x94
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	dc00      	bgt.n	8003e1c <bme680_check_sensor_presence+0x190>
 8003e1a:	e74b      	b.n	8003cb4 <bme680_check_sensor_presence+0x28>
        }
    }
    
    debug_print("✗ BME680 sensor not found on any address\r\n");
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <bme680_check_sensor_presence+0x1d0>)
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f7ff fdd4 	bl	80039cc <debug_print>
    return BME68X_E_DEV_NOT_FOUND;
 8003e24:	2303      	movs	r3, #3
 8003e26:	425b      	negs	r3, r3
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b027      	add	sp, #156	@ 0x9c
 8003e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e30:	08014930 	.word	0x08014930
 8003e34:	00007776 	.word	0x00007776
 8003e38:	08014a90 	.word	0x08014a90
 8003e3c:	08014958 	.word	0x08014958
 8003e40:	200002e4 	.word	0x200002e4
 8003e44:	08014970 	.word	0x08014970
 8003e48:	08014990 	.word	0x08014990
 8003e4c:	080149bc 	.word	0x080149bc
 8003e50:	080149e0 	.word	0x080149e0
 8003e54:	08014a04 	.word	0x08014a04
 8003e58:	08014a30 	.word	0x08014a30
 8003e5c:	08014a50 	.word	0x08014a50

08003e60 <bme680_init_sensor>:

// Enhanced sensor initialization with detailed error reporting
int8_t bme680_init_sensor(void)
{
 8003e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e62:	b0a9      	sub	sp, #164	@ 0xa4
 8003e64:	af00      	add	r7, sp, #0
    int8_t rslt;
    char debug_msg[128];
    
    debug_print("Initializing BME680 sensor...\r\n");
 8003e66:	4b53      	ldr	r3, [pc, #332]	@ (8003fb4 <bme680_init_sensor+0x154>)
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7ff fdaf 	bl	80039cc <debug_print>
    
    // Initialize device structure
    bme680_dev.intf = BME68X_I2C_INTF;
 8003e6e:	4b52      	ldr	r3, [pc, #328]	@ (8003fb8 <bme680_init_sensor+0x158>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	731a      	strb	r2, [r3, #12]
    bme680_dev.read = bme680_i2c_read;
 8003e74:	4b50      	ldr	r3, [pc, #320]	@ (8003fb8 <bme680_init_sensor+0x158>)
 8003e76:	4a51      	ldr	r2, [pc, #324]	@ (8003fbc <bme680_init_sensor+0x15c>)
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40
    bme680_dev.write = bme680_i2c_write;
 8003e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8003fb8 <bme680_init_sensor+0x158>)
 8003e7c:	4a50      	ldr	r2, [pc, #320]	@ (8003fc0 <bme680_init_sensor+0x160>)
 8003e7e:	645a      	str	r2, [r3, #68]	@ 0x44
    bme680_dev.delay_us = bme680_delay_us;
 8003e80:	4b4d      	ldr	r3, [pc, #308]	@ (8003fb8 <bme680_init_sensor+0x158>)
 8003e82:	4a50      	ldr	r2, [pc, #320]	@ (8003fc4 <bme680_init_sensor+0x164>)
 8003e84:	649a      	str	r2, [r3, #72]	@ 0x48
    bme680_dev.intf_ptr = NULL;
 8003e86:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb8 <bme680_init_sensor+0x158>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	605a      	str	r2, [r3, #4]
    bme680_dev.amb_temp = 25;
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb8 <bme680_init_sensor+0x158>)
 8003e8e:	2219      	movs	r2, #25
 8003e90:	739a      	strb	r2, [r3, #14]
    
    // Initialize the sensor
    rslt = bme68x_init(&bme680_dev);
 8003e92:	259f      	movs	r5, #159	@ 0x9f
 8003e94:	197c      	adds	r4, r7, r5
 8003e96:	4b48      	ldr	r3, [pc, #288]	@ (8003fb8 <bme680_init_sensor+0x158>)
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f002 fa9b 	bl	80063d4 <bme68x_init>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	7023      	strb	r3, [r4, #0]
    
    snprintf(debug_msg, sizeof(debug_msg), "BME68X Init Result: %d\r\n", rslt);
 8003ea2:	002c      	movs	r4, r5
 8003ea4:	193b      	adds	r3, r7, r4
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	b25b      	sxtb	r3, r3
 8003eaa:	4a47      	ldr	r2, [pc, #284]	@ (8003fc8 <bme680_init_sensor+0x168>)
 8003eac:	261c      	movs	r6, #28
 8003eae:	19b8      	adds	r0, r7, r6
 8003eb0:	2180      	movs	r1, #128	@ 0x80
 8003eb2:	f00d fdaf 	bl	8011a14 <sniprintf>
    debug_print(debug_msg);
 8003eb6:	19bb      	adds	r3, r7, r6
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7ff fd87 	bl	80039cc <debug_print>
    
    if (rslt == BME68X_OK) {
 8003ebe:	193b      	adds	r3, r7, r4
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d168      	bne.n	8003f9a <bme680_init_sensor+0x13a>
        debug_print("✓ BME68X library initialization successful\r\n");
 8003ec8:	4b40      	ldr	r3, [pc, #256]	@ (8003fcc <bme680_init_sensor+0x16c>)
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7ff fd7e 	bl	80039cc <debug_print>
        
        // Configure sensor settings
        struct bme68x_conf conf;
        conf.os_hum = BME68X_OS_1X;
 8003ed0:	2114      	movs	r1, #20
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
        conf.os_pres = BME68X_OS_1X;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2201      	movs	r2, #1
 8003edc:	709a      	strb	r2, [r3, #2]
        conf.os_temp = BME68X_OS_1X;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	705a      	strb	r2, [r3, #1]
        conf.filter = BME68X_FILTER_OFF;
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	70da      	strb	r2, [r3, #3]
        conf.odr = BME68X_ODR_NONE;
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	2208      	movs	r2, #8
 8003eee:	711a      	strb	r2, [r3, #4]
        
        rslt = bme68x_set_conf(&conf, &bme680_dev);
 8003ef0:	0025      	movs	r5, r4
 8003ef2:	193c      	adds	r4, r7, r4
 8003ef4:	4a30      	ldr	r2, [pc, #192]	@ (8003fb8 <bme680_init_sensor+0x158>)
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f002 fc04 	bl	8006708 <bme68x_set_conf>
 8003f00:	0003      	movs	r3, r0
 8003f02:	7023      	strb	r3, [r4, #0]
        
        snprintf(debug_msg, sizeof(debug_msg), "BME68X Config Result: %d\r\n", rslt);
 8003f04:	002c      	movs	r4, r5
 8003f06:	193b      	adds	r3, r7, r4
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	b25b      	sxtb	r3, r3
 8003f0c:	4a30      	ldr	r2, [pc, #192]	@ (8003fd0 <bme680_init_sensor+0x170>)
 8003f0e:	19b8      	adds	r0, r7, r6
 8003f10:	2180      	movs	r1, #128	@ 0x80
 8003f12:	f00d fd7f 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8003f16:	19bb      	adds	r3, r7, r6
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7ff fd57 	bl	80039cc <debug_print>
        
        if (rslt == BME68X_OK) {
 8003f1e:	193b      	adds	r3, r7, r4
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	b25b      	sxtb	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d133      	bne.n	8003f90 <bme680_init_sensor+0x130>
            debug_print("✓ BME68X configuration successful\r\n");
 8003f28:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd4 <bme680_init_sensor+0x174>)
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f7ff fd4e 	bl	80039cc <debug_print>
            
            // Configure gas sensor (optional - for gas resistance measurement)
            struct bme68x_heatr_conf heatr_conf;
            heatr_conf.enable = BME68X_DISABLE; // Disable gas sensor for now
 8003f30:	003b      	movs	r3, r7
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
            heatr_conf.heatr_temp = 300;
 8003f36:	003b      	movs	r3, r7
 8003f38:	2296      	movs	r2, #150	@ 0x96
 8003f3a:	0052      	lsls	r2, r2, #1
 8003f3c:	805a      	strh	r2, [r3, #2]
            heatr_conf.heatr_dur = 100;
 8003f3e:	003b      	movs	r3, r7
 8003f40:	2264      	movs	r2, #100	@ 0x64
 8003f42:	809a      	strh	r2, [r3, #4]
            
            rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme680_dev);
 8003f44:	0025      	movs	r5, r4
 8003f46:	193c      	adds	r4, r7, r4
 8003f48:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb8 <bme680_init_sensor+0x158>)
 8003f4a:	003b      	movs	r3, r7
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f002 ff88 	bl	8006e64 <bme68x_set_heatr_conf>
 8003f54:	0003      	movs	r3, r0
 8003f56:	7023      	strb	r3, [r4, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), "BME68X Gas Config Result: %d\r\n", rslt);
 8003f58:	002c      	movs	r4, r5
 8003f5a:	193b      	adds	r3, r7, r4
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	b25b      	sxtb	r3, r3
 8003f60:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd8 <bme680_init_sensor+0x178>)
 8003f62:	19b8      	adds	r0, r7, r6
 8003f64:	2180      	movs	r1, #128	@ 0x80
 8003f66:	f00d fd55 	bl	8011a14 <sniprintf>
            debug_print(debug_msg);
 8003f6a:	19bb      	adds	r3, r7, r6
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7ff fd2d 	bl	80039cc <debug_print>
            
            if (rslt == BME68X_OK) {
 8003f72:	193b      	adds	r3, r7, r4
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <bme680_init_sensor+0x126>
                debug_print("✓ BME680 sensor fully initialized\r\n");
 8003f7c:	4b17      	ldr	r3, [pc, #92]	@ (8003fdc <bme680_init_sensor+0x17c>)
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7ff fd24 	bl	80039cc <debug_print>
 8003f84:	e00d      	b.n	8003fa2 <bme680_init_sensor+0x142>
            } else {
                debug_print("⚠ Gas sensor configuration failed, but sensor is usable\r\n");
 8003f86:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <bme680_init_sensor+0x180>)
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7ff fd1f 	bl	80039cc <debug_print>
 8003f8e:	e008      	b.n	8003fa2 <bme680_init_sensor+0x142>
            }
        } else {
            debug_print("✗ BME68X configuration failed\r\n");
 8003f90:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <bme680_init_sensor+0x184>)
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff fd1a 	bl	80039cc <debug_print>
 8003f98:	e003      	b.n	8003fa2 <bme680_init_sensor+0x142>
        }
    } else {
        debug_print("✗ BME68X library initialization failed\r\n");
 8003f9a:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <bme680_init_sensor+0x188>)
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff fd15 	bl	80039cc <debug_print>
    }
    
    return rslt;
 8003fa2:	239f      	movs	r3, #159	@ 0x9f
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	b25b      	sxtb	r3, r3
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b029      	add	sp, #164	@ 0xa4
 8003fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	08014a98 	.word	0x08014a98
 8003fb8:	2000020c 	.word	0x2000020c
 8003fbc:	08003add 	.word	0x08003add
 8003fc0:	08003b91 	.word	0x08003b91
 8003fc4:	08003c41 	.word	0x08003c41
 8003fc8:	08014ab8 	.word	0x08014ab8
 8003fcc:	08014ad4 	.word	0x08014ad4
 8003fd0:	08014b04 	.word	0x08014b04
 8003fd4:	08014b20 	.word	0x08014b20
 8003fd8:	08014b48 	.word	0x08014b48
 8003fdc:	08014b68 	.word	0x08014b68
 8003fe0:	08014b90 	.word	0x08014b90
 8003fe4:	08014bcc 	.word	0x08014bcc
 8003fe8:	08014bf0 	.word	0x08014bf0

08003fec <manual_decode_ieee754>:

// Manual IEEE 754 decoder for debugging
float manual_decode_ieee754(uint32_t hex_value) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
    // Extract sign, exponent, and mantissa
    uint32_t sign = (hex_value >> 31) & 0x1;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0fdb      	lsrs	r3, r3, #31
 8003ff8:	617b      	str	r3, [r7, #20]
    uint32_t exponent = (hex_value >> 23) & 0xFF;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	0ddb      	lsrs	r3, r3, #23
 8003ffe:	22ff      	movs	r2, #255	@ 0xff
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
    uint32_t mantissa = hex_value & 0x7FFFFF;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	025b      	lsls	r3, r3, #9
 8004008:	0a5b      	lsrs	r3, r3, #9
 800400a:	60fb      	str	r3, [r7, #12]
    
    // Handle special cases
    if (exponent == 0) {
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <manual_decode_ieee754+0x2a>
        return 0.0f; // Zero
 8004012:	2300      	movs	r3, #0
 8004014:	e069      	b.n	80040ea <manual_decode_ieee754+0xfe>
    }
    if (exponent == 0xFF) {
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2bff      	cmp	r3, #255	@ 0xff
 800401a:	d10c      	bne.n	8004036 <manual_decode_ieee754+0x4a>
        if (mantissa == 0) {
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <manual_decode_ieee754+0x46>
            return sign ? -INFINITY : INFINITY; // Infinity
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <manual_decode_ieee754+0x40>
 8004028:	4b32      	ldr	r3, [pc, #200]	@ (80040f4 <manual_decode_ieee754+0x108>)
 800402a:	e05e      	b.n	80040ea <manual_decode_ieee754+0xfe>
 800402c:	23ff      	movs	r3, #255	@ 0xff
 800402e:	05db      	lsls	r3, r3, #23
 8004030:	e05b      	b.n	80040ea <manual_decode_ieee754+0xfe>
        } else {
            return NAN; // NaN
 8004032:	4b31      	ldr	r3, [pc, #196]	@ (80040f8 <manual_decode_ieee754+0x10c>)
 8004034:	e059      	b.n	80040ea <manual_decode_ieee754+0xfe>
        }
    }
    
    // Normal case
    float result = 1.0f;
 8004036:	23fe      	movs	r3, #254	@ 0xfe
 8004038:	059b      	lsls	r3, r3, #22
 800403a:	61fb      	str	r3, [r7, #28]
    for (int i = 22; i >= 0; i--) {
 800403c:	2316      	movs	r3, #22
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	e020      	b.n	8004084 <manual_decode_ieee754+0x98>
        if (mantissa & (1 << i)) {
 8004042:	2201      	movs	r2, #1
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	409a      	lsls	r2, r3
 8004048:	0013      	movs	r3, r2
 800404a:	001a      	movs	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4013      	ands	r3, r2
 8004050:	d015      	beq.n	800407e <manual_decode_ieee754+0x92>
            result += 1.0f / (1 << (23 - i));
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2217      	movs	r2, #23
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	0013      	movs	r3, r2
 800405e:	0018      	movs	r0, r3
 8004060:	f7fd fb8a 	bl	8001778 <__aeabi_i2f>
 8004064:	1c03      	adds	r3, r0, #0
 8004066:	1c19      	adds	r1, r3, #0
 8004068:	20fe      	movs	r0, #254	@ 0xfe
 800406a:	0580      	lsls	r0, r0, #22
 800406c:	f7fc fdc2 	bl	8000bf4 <__aeabi_fdiv>
 8004070:	1c03      	adds	r3, r0, #0
 8004072:	1c19      	adds	r1, r3, #0
 8004074:	69f8      	ldr	r0, [r7, #28]
 8004076:	f7fc fbcb 	bl	8000810 <__aeabi_fadd>
 800407a:	1c03      	adds	r3, r0, #0
 800407c:	61fb      	str	r3, [r7, #28]
    for (int i = 22; i >= 0; i--) {
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	3b01      	subs	r3, #1
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	dadb      	bge.n	8004042 <manual_decode_ieee754+0x56>
        }
    }
    
    // Apply exponent
    int exp = (int)exponent - 127;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3b7f      	subs	r3, #127	@ 0x7f
 800408e:	60bb      	str	r3, [r7, #8]
    if (exp > 0) {
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	dd0e      	ble.n	80040b4 <manual_decode_ieee754+0xc8>
        result *= (1 << exp);
 8004096:	2201      	movs	r2, #1
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	409a      	lsls	r2, r3
 800409c:	0013      	movs	r3, r2
 800409e:	0018      	movs	r0, r3
 80040a0:	f7fd fb6a 	bl	8001778 <__aeabi_i2f>
 80040a4:	1c03      	adds	r3, r0, #0
 80040a6:	1c19      	adds	r1, r3, #0
 80040a8:	69f8      	ldr	r0, [r7, #28]
 80040aa:	f7fc ff71 	bl	8000f90 <__aeabi_fmul>
 80040ae:	1c03      	adds	r3, r0, #0
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	e011      	b.n	80040d8 <manual_decode_ieee754+0xec>
    } else if (exp < 0) {
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	da0e      	bge.n	80040d8 <manual_decode_ieee754+0xec>
        result /= (1 << (-exp));
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	425b      	negs	r3, r3
 80040be:	2201      	movs	r2, #1
 80040c0:	409a      	lsls	r2, r3
 80040c2:	0013      	movs	r3, r2
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7fd fb57 	bl	8001778 <__aeabi_i2f>
 80040ca:	1c03      	adds	r3, r0, #0
 80040cc:	1c19      	adds	r1, r3, #0
 80040ce:	69f8      	ldr	r0, [r7, #28]
 80040d0:	f7fc fd90 	bl	8000bf4 <__aeabi_fdiv>
 80040d4:	1c03      	adds	r3, r0, #0
 80040d6:	61fb      	str	r3, [r7, #28]
    }
    
    // Apply sign
    return sign ? -result : result;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <manual_decode_ieee754+0xfc>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	2280      	movs	r2, #128	@ 0x80
 80040e2:	0612      	lsls	r2, r2, #24
 80040e4:	4053      	eors	r3, r2
 80040e6:	e000      	b.n	80040ea <manual_decode_ieee754+0xfe>
 80040e8:	69fb      	ldr	r3, [r7, #28]
}
 80040ea:	1c18      	adds	r0, r3, #0
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b008      	add	sp, #32
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			@ (mov r8, r8)
 80040f4:	ff800000 	.word	0xff800000
 80040f8:	7fc00000 	.word	0x7fc00000

080040fc <decode_ieee754>:

// Decode IEEE 754 float value
float decode_ieee754(uint32_t hex_value) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
    union {
        uint32_t i;
        float f;
    } converter;
    converter.i = hex_value;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60fb      	str	r3, [r7, #12]
    return converter.f;
 8004108:	68fb      	ldr	r3, [r7, #12]
}
 800410a:	1c18      	adds	r0, r3, #0
 800410c:	46bd      	mov	sp, r7
 800410e:	b004      	add	sp, #16
 8004110:	bd80      	pop	{r7, pc}

08004112 <is_float_invalid>:

// Check if float is NaN or infinite
int is_float_invalid(float value) {
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
    union {
        float f;
        uint32_t i;
    } converter;
    converter.f = value;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60fb      	str	r3, [r7, #12]
    
    // Check for NaN (exponent all 1s, mantissa non-zero)
    if (((converter.i >> 23) & 0xFF) == 0xFF && (converter.i & 0x7FFFFF) != 0) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	0ddb      	lsrs	r3, r3, #23
 8004122:	22ff      	movs	r2, #255	@ 0xff
 8004124:	4013      	ands	r3, r2
 8004126:	2bff      	cmp	r3, #255	@ 0xff
 8004128:	d105      	bne.n	8004136 <is_float_invalid+0x24>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	025b      	lsls	r3, r3, #9
 800412e:	0a5b      	lsrs	r3, r3, #9
 8004130:	d001      	beq.n	8004136 <is_float_invalid+0x24>
        return 1; // NaN
 8004132:	2301      	movs	r3, #1
 8004134:	e00c      	b.n	8004150 <is_float_invalid+0x3e>
    }
    
    // Check for infinite (exponent all 1s, mantissa zero)
    if (((converter.i >> 23) & 0xFF) == 0xFF && (converter.i & 0x7FFFFF) == 0) {
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	0ddb      	lsrs	r3, r3, #23
 800413a:	22ff      	movs	r2, #255	@ 0xff
 800413c:	4013      	ands	r3, r2
 800413e:	2bff      	cmp	r3, #255	@ 0xff
 8004140:	d105      	bne.n	800414e <is_float_invalid+0x3c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	025b      	lsls	r3, r3, #9
 8004146:	0a5b      	lsrs	r3, r3, #9
 8004148:	d101      	bne.n	800414e <is_float_invalid+0x3c>
        return 2; // Infinite
 800414a:	2302      	movs	r3, #2
 800414c:	e000      	b.n	8004150 <is_float_invalid+0x3e>
    }
    
    return 0; // Valid
 800414e:	2300      	movs	r3, #0
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b004      	add	sp, #16
 8004156:	bd80      	pop	{r7, pc}

08004158 <bme680_read_sensor_data>:

// Read sensor data
int8_t bme680_read_sensor_data(struct bme68x_data *data)
{
 8004158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415a:	b0cd      	sub	sp, #308	@ 0x134
 800415c:	af06      	add	r7, sp, #24
 800415e:	60f8      	str	r0, [r7, #12]
    int8_t rslt;
    uint8_t n_data;
    char debug_msg[128];
    
    debug_print("Reading BME680 sensor data...\r\n");
 8004160:	4bf7      	ldr	r3, [pc, #988]	@ (8004540 <bme680_read_sensor_data+0x3e8>)
 8004162:	0018      	movs	r0, r3
 8004164:	f7ff fc32 	bl	80039cc <debug_print>
    
    // Set operation mode to forced mode
    rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme680_dev);
 8004168:	2510      	movs	r5, #16
 800416a:	35ff      	adds	r5, #255	@ 0xff
 800416c:	2608      	movs	r6, #8
 800416e:	19ab      	adds	r3, r5, r6
 8004170:	19dc      	adds	r4, r3, r7
 8004172:	4bf4      	ldr	r3, [pc, #976]	@ (8004544 <bme680_read_sensor_data+0x3ec>)
 8004174:	0019      	movs	r1, r3
 8004176:	2001      	movs	r0, #1
 8004178:	f002 fc16 	bl	80069a8 <bme68x_set_op_mode>
 800417c:	0003      	movs	r3, r0
 800417e:	7023      	strb	r3, [r4, #0]
    
    if (rslt == BME68X_OK) {
 8004180:	002c      	movs	r4, r5
 8004182:	0035      	movs	r5, r6
 8004184:	1963      	adds	r3, r4, r5
 8004186:	19db      	adds	r3, r3, r7
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	b25b      	sxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <bme680_read_sensor_data+0x3c>
 8004190:	f000 fd91 	bl	8004cb6 <bme680_read_sensor_data+0xb5e>
        debug_print("✓ Forced mode set successfully\r\n");
 8004194:	4bec      	ldr	r3, [pc, #944]	@ (8004548 <bme680_read_sensor_data+0x3f0>)
 8004196:	0018      	movs	r0, r3
 8004198:	f7ff fc18 	bl	80039cc <debug_print>
        
        // Wait for measurement to complete
        uint32_t del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, NULL, &bme680_dev);
 800419c:	4be9      	ldr	r3, [pc, #932]	@ (8004544 <bme680_read_sensor_data+0x3ec>)
 800419e:	001a      	movs	r2, r3
 80041a0:	2100      	movs	r1, #0
 80041a2:	2001      	movs	r0, #1
 80041a4:	f002 fca8 	bl	8006af8 <bme68x_get_meas_dur>
 80041a8:	0003      	movs	r3, r0
 80041aa:	26f0      	movs	r6, #240	@ 0xf0
 80041ac:	0029      	movs	r1, r5
 80041ae:	1872      	adds	r2, r6, r1
 80041b0:	19d2      	adds	r2, r2, r7
 80041b2:	6013      	str	r3, [r2, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Measurement duration: %lu us\r\n", del_period);
 80041b4:	1873      	adds	r3, r6, r1
 80041b6:	19db      	adds	r3, r3, r7
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4ae4      	ldr	r2, [pc, #912]	@ (800454c <bme680_read_sensor_data+0x3f4>)
 80041bc:	2508      	movs	r5, #8
 80041be:	1868      	adds	r0, r5, r1
 80041c0:	19c0      	adds	r0, r0, r7
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	f00d fc26 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 80041c8:	2008      	movs	r0, #8
 80041ca:	182b      	adds	r3, r5, r0
 80041cc:	19db      	adds	r3, r3, r7
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff fbfc 	bl	80039cc <debug_print>
        
        bme680_dev.delay_us(del_period, bme680_dev.intf_ptr);
 80041d4:	4bdb      	ldr	r3, [pc, #876]	@ (8004544 <bme680_read_sensor_data+0x3ec>)
 80041d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041d8:	4bda      	ldr	r3, [pc, #872]	@ (8004544 <bme680_read_sensor_data+0x3ec>)
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	2008      	movs	r0, #8
 80041de:	1833      	adds	r3, r6, r0
 80041e0:	19db      	adds	r3, r3, r7
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	0018      	movs	r0, r3
 80041e6:	4790      	blx	r2
        
        // Read the data
        rslt = bme68x_get_data(BME68X_FORCED_MODE, data, &n_data, &bme680_dev);
 80041e8:	0026      	movs	r6, r4
 80041ea:	2008      	movs	r0, #8
 80041ec:	1823      	adds	r3, r4, r0
 80041ee:	19dc      	adds	r4, r3, r7
 80041f0:	4bd4      	ldr	r3, [pc, #848]	@ (8004544 <bme680_read_sensor_data+0x3ec>)
 80041f2:	228b      	movs	r2, #139	@ 0x8b
 80041f4:	1812      	adds	r2, r2, r0
 80041f6:	19d2      	adds	r2, r2, r7
 80041f8:	68f9      	ldr	r1, [r7, #12]
 80041fa:	2001      	movs	r0, #1
 80041fc:	f002 fd00 	bl	8006c00 <bme68x_get_data>
 8004200:	0003      	movs	r3, r0
 8004202:	7023      	strb	r3, [r4, #0]
        
        snprintf(debug_msg, sizeof(debug_msg), "Data read result: %d, samples: %d\r\n", rslt, n_data);
 8004204:	0034      	movs	r4, r6
 8004206:	2008      	movs	r0, #8
 8004208:	1823      	adds	r3, r4, r0
 800420a:	19db      	adds	r3, r3, r7
 800420c:	2100      	movs	r1, #0
 800420e:	5659      	ldrsb	r1, [r3, r1]
 8004210:	228b      	movs	r2, #139	@ 0x8b
 8004212:	1813      	adds	r3, r2, r0
 8004214:	19db      	adds	r3, r3, r7
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	4acd      	ldr	r2, [pc, #820]	@ (8004550 <bme680_read_sensor_data+0x3f8>)
 800421a:	182e      	adds	r6, r5, r0
 800421c:	19f0      	adds	r0, r6, r7
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	000b      	movs	r3, r1
 8004222:	2180      	movs	r1, #128	@ 0x80
 8004224:	f00d fbf6 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8004228:	002e      	movs	r6, r5
 800422a:	2008      	movs	r0, #8
 800422c:	182b      	adds	r3, r5, r0
 800422e:	19db      	adds	r3, r3, r7
 8004230:	0018      	movs	r0, r3
 8004232:	f7ff fbcb 	bl	80039cc <debug_print>
        
        if (rslt == BME68X_OK && n_data > 0) {
 8004236:	2008      	movs	r0, #8
 8004238:	1823      	adds	r3, r4, r0
 800423a:	19db      	adds	r3, r3, r7
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b25b      	sxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <bme680_read_sensor_data+0xf0>
 8004244:	f000 fd32 	bl	8004cac <bme680_read_sensor_data+0xb54>
 8004248:	228b      	movs	r2, #139	@ 0x8b
 800424a:	1813      	adds	r3, r2, r0
 800424c:	19db      	adds	r3, r3, r7
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <bme680_read_sensor_data+0x100>
 8004254:	f000 fd2a 	bl	8004cac <bme680_read_sensor_data+0xb54>
            debug_print("✓ Sensor data read successfully\r\n");
 8004258:	4bbe      	ldr	r3, [pc, #760]	@ (8004554 <bme680_read_sensor_data+0x3fc>)
 800425a:	0018      	movs	r0, r3
 800425c:	f7ff fbb6 	bl	80039cc <debug_print>
            
            // Debug: Print raw values with more detail
            snprintf(debug_msg, sizeof(debug_msg), 
                     "Raw values - Temp: %.6f, Press: %.6f, Hum: %.6f\r\n",
                     data->temperature, data->pressure, data->humidity);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
            snprintf(debug_msg, sizeof(debug_msg), 
 8004264:	1c18      	adds	r0, r3, #0
 8004266:	f7ff fabd 	bl	80037e4 <__aeabi_f2d>
 800426a:	0004      	movs	r4, r0
 800426c:	000d      	movs	r5, r1
                     data->temperature, data->pressure, data->humidity);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68db      	ldr	r3, [r3, #12]
            snprintf(debug_msg, sizeof(debug_msg), 
 8004272:	1c18      	adds	r0, r3, #0
 8004274:	f7ff fab6 	bl	80037e4 <__aeabi_f2d>
 8004278:	6038      	str	r0, [r7, #0]
 800427a:	6079      	str	r1, [r7, #4]
                     data->temperature, data->pressure, data->humidity);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
            snprintf(debug_msg, sizeof(debug_msg), 
 8004280:	1c18      	adds	r0, r3, #0
 8004282:	f7ff faaf 	bl	80037e4 <__aeabi_f2d>
 8004286:	0002      	movs	r2, r0
 8004288:	000b      	movs	r3, r1
 800428a:	49b3      	ldr	r1, [pc, #716]	@ (8004558 <bme680_read_sensor_data+0x400>)
 800428c:	2008      	movs	r0, #8
 800428e:	1830      	adds	r0, r6, r0
 8004290:	19c0      	adds	r0, r0, r7
 8004292:	9204      	str	r2, [sp, #16]
 8004294:	9305      	str	r3, [sp, #20]
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	9202      	str	r2, [sp, #8]
 800429c:	9303      	str	r3, [sp, #12]
 800429e:	9400      	str	r4, [sp, #0]
 80042a0:	9501      	str	r5, [sp, #4]
 80042a2:	000a      	movs	r2, r1
 80042a4:	2180      	movs	r1, #128	@ 0x80
 80042a6:	f00d fbb5 	bl	8011a14 <sniprintf>
            debug_print(debug_msg);
 80042aa:	2008      	movs	r0, #8
 80042ac:	1833      	adds	r3, r6, r0
 80042ae:	19db      	adds	r3, r3, r7
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7ff fb8b 	bl	80039cc <debug_print>
            
            // Debug: Check if values are zero
            if (data->temperature == 0.0f && data->pressure == 0.0f && data->humidity == 0.0f) {
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2100      	movs	r1, #0
 80042bc:	1c18      	adds	r0, r3, #0
 80042be:	f7fc f907 	bl	80004d0 <__aeabi_fcmpeq>
 80042c2:	1e03      	subs	r3, r0, #0
 80042c4:	d013      	beq.n	80042ee <bme680_read_sensor_data+0x196>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2100      	movs	r1, #0
 80042cc:	1c18      	adds	r0, r3, #0
 80042ce:	f7fc f8ff 	bl	80004d0 <__aeabi_fcmpeq>
 80042d2:	1e03      	subs	r3, r0, #0
 80042d4:	d00b      	beq.n	80042ee <bme680_read_sensor_data+0x196>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2100      	movs	r1, #0
 80042dc:	1c18      	adds	r0, r3, #0
 80042de:	f7fc f8f7 	bl	80004d0 <__aeabi_fcmpeq>
 80042e2:	1e03      	subs	r3, r0, #0
 80042e4:	d003      	beq.n	80042ee <bme680_read_sensor_data+0x196>
                debug_print("⚠ All sensor values are zero - possible library issue\r\n");
 80042e6:	4b9d      	ldr	r3, [pc, #628]	@ (800455c <bme680_read_sensor_data+0x404>)
 80042e8:	0018      	movs	r0, r3
 80042ea:	f7ff fb6f 	bl	80039cc <debug_print>
            }
            
            // Debug: Print memory representation and decoded values
            uint32_t temp_mem = *(uint32_t*)&data->temperature;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3308      	adds	r3, #8
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	25ec      	movs	r5, #236	@ 0xec
 80042f6:	2108      	movs	r1, #8
 80042f8:	186a      	adds	r2, r5, r1
 80042fa:	19d2      	adds	r2, r2, r7
 80042fc:	6013      	str	r3, [r2, #0]
            uint32_t press_mem = *(uint32_t*)&data->pressure;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	330c      	adds	r3, #12
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	26e8      	movs	r6, #232	@ 0xe8
 8004306:	1872      	adds	r2, r6, r1
 8004308:	19d2      	adds	r2, r2, r7
 800430a:	6013      	str	r3, [r2, #0]
            uint32_t hum_mem = *(uint32_t*)&data->humidity;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3310      	adds	r3, #16
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	22e4      	movs	r2, #228	@ 0xe4
 8004314:	0008      	movs	r0, r1
 8004316:	1852      	adds	r2, r2, r1
 8004318:	19d1      	adds	r1, r2, r7
 800431a:	600b      	str	r3, [r1, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), 
 800431c:	60bd      	str	r5, [r7, #8]
 800431e:	0003      	movs	r3, r0
 8004320:	18ea      	adds	r2, r5, r3
 8004322:	19d1      	adds	r1, r2, r7
 8004324:	6809      	ldr	r1, [r1, #0]
 8004326:	4a8e      	ldr	r2, [pc, #568]	@ (8004560 <bme680_read_sensor_data+0x408>)
 8004328:	2408      	movs	r4, #8
 800432a:	001d      	movs	r5, r3
 800432c:	18e0      	adds	r0, r4, r3
 800432e:	19c0      	adds	r0, r0, r7
 8004330:	23e4      	movs	r3, #228	@ 0xe4
 8004332:	195d      	adds	r5, r3, r5
 8004334:	19eb      	adds	r3, r5, r7
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	2308      	movs	r3, #8
 800433c:	18f5      	adds	r5, r6, r3
 800433e:	19eb      	adds	r3, r5, r7
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	000b      	movs	r3, r1
 8004346:	2180      	movs	r1, #128	@ 0x80
 8004348:	f00d fb64 	bl	8011a14 <sniprintf>
                     "Memory dump - Temp: %08lX, Press: %08lX, Hum: %08lX\r\n",
                     temp_mem, press_mem, hum_mem);
            debug_print(debug_msg);
 800434c:	2208      	movs	r2, #8
 800434e:	18a1      	adds	r1, r4, r2
 8004350:	19cb      	adds	r3, r1, r7
 8004352:	0018      	movs	r0, r3
 8004354:	f7ff fb3a 	bl	80039cc <debug_print>
            
            // Decode and show actual values using both methods
            float temp_decoded = decode_ieee754(temp_mem);
 8004358:	68bd      	ldr	r5, [r7, #8]
 800435a:	2208      	movs	r2, #8
 800435c:	18ab      	adds	r3, r5, r2
 800435e:	19d9      	adds	r1, r3, r7
 8004360:	680b      	ldr	r3, [r1, #0]
 8004362:	0018      	movs	r0, r3
 8004364:	f7ff feca 	bl	80040fc <decode_ieee754>
 8004368:	1c03      	adds	r3, r0, #0
 800436a:	21e0      	movs	r1, #224	@ 0xe0
 800436c:	2208      	movs	r2, #8
 800436e:	1889      	adds	r1, r1, r2
 8004370:	19c8      	adds	r0, r1, r7
 8004372:	6003      	str	r3, [r0, #0]
            float press_decoded = decode_ieee754(press_mem);
 8004374:	18b3      	adds	r3, r6, r2
 8004376:	19d8      	adds	r0, r3, r7
 8004378:	6803      	ldr	r3, [r0, #0]
 800437a:	0018      	movs	r0, r3
 800437c:	f7ff febe 	bl	80040fc <decode_ieee754>
 8004380:	1c03      	adds	r3, r0, #0
 8004382:	20dc      	movs	r0, #220	@ 0xdc
 8004384:	2108      	movs	r1, #8
 8004386:	1842      	adds	r2, r0, r1
 8004388:	19d2      	adds	r2, r2, r7
 800438a:	6013      	str	r3, [r2, #0]
            float hum_decoded = decode_ieee754(hum_mem);
 800438c:	23e4      	movs	r3, #228	@ 0xe4
 800438e:	185b      	adds	r3, r3, r1
 8004390:	19da      	adds	r2, r3, r7
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff feb1 	bl	80040fc <decode_ieee754>
 800439a:	1c03      	adds	r3, r0, #0
 800439c:	22d8      	movs	r2, #216	@ 0xd8
 800439e:	2008      	movs	r0, #8
 80043a0:	1812      	adds	r2, r2, r0
 80043a2:	19d1      	adds	r1, r2, r7
 80043a4:	600b      	str	r3, [r1, #0]
            
            // Manual decoding for comparison
            float temp_manual = manual_decode_ieee754(temp_mem);
 80043a6:	182b      	adds	r3, r5, r0
 80043a8:	19d9      	adds	r1, r3, r7
 80043aa:	680b      	ldr	r3, [r1, #0]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f7ff fe1d 	bl	8003fec <manual_decode_ieee754>
 80043b2:	1c03      	adds	r3, r0, #0
 80043b4:	21d4      	movs	r1, #212	@ 0xd4
 80043b6:	2208      	movs	r2, #8
 80043b8:	1889      	adds	r1, r1, r2
 80043ba:	19c8      	adds	r0, r1, r7
 80043bc:	6003      	str	r3, [r0, #0]
            float press_manual = manual_decode_ieee754(press_mem);
 80043be:	18b3      	adds	r3, r6, r2
 80043c0:	19de      	adds	r6, r3, r7
 80043c2:	6833      	ldr	r3, [r6, #0]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7ff fe11 	bl	8003fec <manual_decode_ieee754>
 80043ca:	1c03      	adds	r3, r0, #0
 80043cc:	26d0      	movs	r6, #208	@ 0xd0
 80043ce:	2108      	movs	r1, #8
 80043d0:	1872      	adds	r2, r6, r1
 80043d2:	19d0      	adds	r0, r2, r7
 80043d4:	6003      	str	r3, [r0, #0]
            float hum_manual = manual_decode_ieee754(hum_mem);
 80043d6:	22e4      	movs	r2, #228	@ 0xe4
 80043d8:	000e      	movs	r6, r1
 80043da:	1853      	adds	r3, r2, r1
 80043dc:	19da      	adds	r2, r3, r7
 80043de:	6813      	ldr	r3, [r2, #0]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f7ff fe03 	bl	8003fec <manual_decode_ieee754>
 80043e6:	1c03      	adds	r3, r0, #0
 80043e8:	22cc      	movs	r2, #204	@ 0xcc
 80043ea:	1992      	adds	r2, r2, r6
 80043ec:	19d0      	adds	r0, r2, r7
 80043ee:	6003      	str	r3, [r0, #0]
            
            // Debug: Show hex values and decoded values directly
            snprintf(debug_msg, sizeof(debug_msg), 
 80043f0:	0033      	movs	r3, r6
 80043f2:	19aa      	adds	r2, r5, r6
 80043f4:	19d0      	adds	r0, r2, r7
 80043f6:	6801      	ldr	r1, [r0, #0]
 80043f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004564 <bme680_read_sensor_data+0x40c>)
 80043fa:	0026      	movs	r6, r4
 80043fc:	001d      	movs	r5, r3
 80043fe:	1973      	adds	r3, r6, r5
 8004400:	19d8      	adds	r0, r3, r7
 8004402:	24e4      	movs	r4, #228	@ 0xe4
 8004404:	1963      	adds	r3, r4, r5
 8004406:	19dc      	adds	r4, r3, r7
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	23e8      	movs	r3, #232	@ 0xe8
 800440e:	195b      	adds	r3, r3, r5
 8004410:	19dc      	adds	r4, r3, r7
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	000b      	movs	r3, r1
 8004418:	2180      	movs	r1, #128	@ 0x80
 800441a:	f00d fafb 	bl	8011a14 <sniprintf>
                     "Hex values - Temp: 0x%08lX, Press: 0x%08lX, Hum: 0x%08lX\r\n",
                     temp_mem, press_mem, hum_mem);
            debug_print(debug_msg);
 800441e:	1973      	adds	r3, r6, r5
 8004420:	19db      	adds	r3, r3, r7
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff fad2 	bl	80039cc <debug_print>
            
            snprintf(debug_msg, sizeof(debug_msg), 
 8004428:	21e0      	movs	r1, #224	@ 0xe0
 800442a:	194b      	adds	r3, r1, r5
 800442c:	19dc      	adds	r4, r3, r7
 800442e:	6820      	ldr	r0, [r4, #0]
 8004430:	f7ff f9d8 	bl	80037e4 <__aeabi_f2d>
 8004434:	0004      	movs	r4, r0
 8004436:	000d      	movs	r5, r1
 8004438:	20dc      	movs	r0, #220	@ 0xdc
 800443a:	2208      	movs	r2, #8
 800443c:	1883      	adds	r3, r0, r2
 800443e:	19d8      	adds	r0, r3, r7
 8004440:	6800      	ldr	r0, [r0, #0]
 8004442:	f7ff f9cf 	bl	80037e4 <__aeabi_f2d>
 8004446:	6038      	str	r0, [r7, #0]
 8004448:	6079      	str	r1, [r7, #4]
 800444a:	23d8      	movs	r3, #216	@ 0xd8
 800444c:	2208      	movs	r2, #8
 800444e:	189b      	adds	r3, r3, r2
 8004450:	19d8      	adds	r0, r3, r7
 8004452:	6800      	ldr	r0, [r0, #0]
 8004454:	f7ff f9c6 	bl	80037e4 <__aeabi_f2d>
 8004458:	0002      	movs	r2, r0
 800445a:	000b      	movs	r3, r1
 800445c:	4942      	ldr	r1, [pc, #264]	@ (8004568 <bme680_read_sensor_data+0x410>)
 800445e:	2008      	movs	r0, #8
 8004460:	1830      	adds	r0, r6, r0
 8004462:	19c0      	adds	r0, r0, r7
 8004464:	9204      	str	r2, [sp, #16]
 8004466:	9305      	str	r3, [sp, #20]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	9202      	str	r2, [sp, #8]
 800446e:	9303      	str	r3, [sp, #12]
 8004470:	9400      	str	r4, [sp, #0]
 8004472:	9501      	str	r5, [sp, #4]
 8004474:	000a      	movs	r2, r1
 8004476:	2180      	movs	r1, #128	@ 0x80
 8004478:	f00d facc 	bl	8011a14 <sniprintf>
                     "Decoded values (union) - Temp: %.6f, Press: %.6f, Hum: %.6f\r\n",
                     temp_decoded, press_decoded, hum_decoded);
            debug_print(debug_msg);
 800447c:	2408      	movs	r4, #8
 800447e:	1933      	adds	r3, r6, r4
 8004480:	19db      	adds	r3, r3, r7
 8004482:	0018      	movs	r0, r3
 8004484:	f7ff faa2 	bl	80039cc <debug_print>
            
            snprintf(debug_msg, sizeof(debug_msg), 
 8004488:	23d4      	movs	r3, #212	@ 0xd4
 800448a:	191b      	adds	r3, r3, r4
 800448c:	19d8      	adds	r0, r3, r7
 800448e:	6800      	ldr	r0, [r0, #0]
 8004490:	f7ff f9a8 	bl	80037e4 <__aeabi_f2d>
 8004494:	0004      	movs	r4, r0
 8004496:	000d      	movs	r5, r1
 8004498:	23d0      	movs	r3, #208	@ 0xd0
 800449a:	2208      	movs	r2, #8
 800449c:	189b      	adds	r3, r3, r2
 800449e:	19d8      	adds	r0, r3, r7
 80044a0:	6800      	ldr	r0, [r0, #0]
 80044a2:	f7ff f99f 	bl	80037e4 <__aeabi_f2d>
 80044a6:	6038      	str	r0, [r7, #0]
 80044a8:	6079      	str	r1, [r7, #4]
 80044aa:	23cc      	movs	r3, #204	@ 0xcc
 80044ac:	2208      	movs	r2, #8
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	19db      	adds	r3, r3, r7
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	f7ff f996 	bl	80037e4 <__aeabi_f2d>
 80044b8:	0002      	movs	r2, r0
 80044ba:	000b      	movs	r3, r1
 80044bc:	492b      	ldr	r1, [pc, #172]	@ (800456c <bme680_read_sensor_data+0x414>)
 80044be:	2008      	movs	r0, #8
 80044c0:	1830      	adds	r0, r6, r0
 80044c2:	19c0      	adds	r0, r0, r7
 80044c4:	9204      	str	r2, [sp, #16]
 80044c6:	9305      	str	r3, [sp, #20]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	9202      	str	r2, [sp, #8]
 80044ce:	9303      	str	r3, [sp, #12]
 80044d0:	9400      	str	r4, [sp, #0]
 80044d2:	9501      	str	r5, [sp, #4]
 80044d4:	000a      	movs	r2, r1
 80044d6:	2180      	movs	r1, #128	@ 0x80
 80044d8:	f00d fa9c 	bl	8011a14 <sniprintf>
                     "Decoded values (manual) - Temp: %.6f, Press: %.6f, Hum: %.6f\r\n",
                     temp_manual, press_manual, hum_manual);
            debug_print(debug_msg);
 80044dc:	2408      	movs	r4, #8
 80044de:	1933      	adds	r3, r6, r4
 80044e0:	19db      	adds	r3, r3, r7
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7ff fa72 	bl	80039cc <debug_print>
            
            // Debug: Show individual components
            snprintf(debug_msg, sizeof(debug_msg), 
 80044e8:	21e0      	movs	r1, #224	@ 0xe0
 80044ea:	190b      	adds	r3, r1, r4
 80044ec:	19db      	adds	r3, r3, r7
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	f7ff f978 	bl	80037e4 <__aeabi_f2d>
 80044f4:	0002      	movs	r2, r0
 80044f6:	000b      	movs	r3, r1
 80044f8:	25ec      	movs	r5, #236	@ 0xec
 80044fa:	0020      	movs	r0, r4
 80044fc:	1829      	adds	r1, r5, r0
 80044fe:	19c9      	adds	r1, r1, r7
 8004500:	680c      	ldr	r4, [r1, #0]
 8004502:	491b      	ldr	r1, [pc, #108]	@ (8004570 <bme680_read_sensor_data+0x418>)
 8004504:	1830      	adds	r0, r6, r0
 8004506:	19c0      	adds	r0, r0, r7
 8004508:	9200      	str	r2, [sp, #0]
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	0023      	movs	r3, r4
 800450e:	000a      	movs	r2, r1
 8004510:	2180      	movs	r1, #128	@ 0x80
 8004512:	f00d fa7f 	bl	8011a14 <sniprintf>
                     "Temp breakdown - Hex: 0x%08lX, Decoded: %.6f\r\n",
                     temp_mem, temp_decoded);
            debug_print(debug_msg);
 8004516:	0034      	movs	r4, r6
 8004518:	2008      	movs	r0, #8
 800451a:	1833      	adds	r3, r6, r0
 800451c:	19db      	adds	r3, r3, r7
 800451e:	0018      	movs	r0, r3
 8004520:	f7ff fa54 	bl	80039cc <debug_print>
            
            // Direct IEEE 754 calculation for temperature
            uint32_t temp_sign = (temp_mem >> 31) & 0x1;
 8004524:	2008      	movs	r0, #8
 8004526:	182b      	adds	r3, r5, r0
 8004528:	19db      	adds	r3, r3, r7
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	0fdb      	lsrs	r3, r3, #31
 800452e:	21c8      	movs	r1, #200	@ 0xc8
 8004530:	180a      	adds	r2, r1, r0
 8004532:	19d2      	adds	r2, r2, r7
 8004534:	6013      	str	r3, [r2, #0]
            uint32_t temp_exp = (temp_mem >> 23) & 0xFF;
 8004536:	182b      	adds	r3, r5, r0
 8004538:	19db      	adds	r3, r3, r7
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	0ddb      	lsrs	r3, r3, #23
 800453e:	e019      	b.n	8004574 <bme680_read_sensor_data+0x41c>
 8004540:	08014c1c 	.word	0x08014c1c
 8004544:	2000020c 	.word	0x2000020c
 8004548:	08014c3c 	.word	0x08014c3c
 800454c:	08014c60 	.word	0x08014c60
 8004550:	08014c80 	.word	0x08014c80
 8004554:	08014ca4 	.word	0x08014ca4
 8004558:	08014cc8 	.word	0x08014cc8
 800455c:	08014cfc 	.word	0x08014cfc
 8004560:	08014d38 	.word	0x08014d38
 8004564:	08014d70 	.word	0x08014d70
 8004568:	08014dac 	.word	0x08014dac
 800456c:	08014dec 	.word	0x08014dec
 8004570:	08014e2c 	.word	0x08014e2c
 8004574:	22ff      	movs	r2, #255	@ 0xff
 8004576:	4013      	ands	r3, r2
 8004578:	26c4      	movs	r6, #196	@ 0xc4
 800457a:	1832      	adds	r2, r6, r0
 800457c:	19d2      	adds	r2, r2, r7
 800457e:	6013      	str	r3, [r2, #0]
            uint32_t temp_mant = temp_mem & 0x7FFFFF;
 8004580:	0002      	movs	r2, r0
 8004582:	182b      	adds	r3, r5, r0
 8004584:	19db      	adds	r3, r3, r7
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	025b      	lsls	r3, r3, #9
 800458a:	0a5b      	lsrs	r3, r3, #9
 800458c:	25c0      	movs	r5, #192	@ 0xc0
 800458e:	0010      	movs	r0, r2
 8004590:	182a      	adds	r2, r5, r0
 8004592:	19d2      	adds	r2, r2, r7
 8004594:	6013      	str	r3, [r2, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), 
 8004596:	180b      	adds	r3, r1, r0
 8004598:	19db      	adds	r3, r3, r7
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	4abe      	ldr	r2, [pc, #760]	@ (8004898 <bme680_read_sensor_data+0x740>)
 800459e:	0003      	movs	r3, r0
 80045a0:	18e0      	adds	r0, r4, r3
 80045a2:	19c0      	adds	r0, r0, r7
 80045a4:	18eb      	adds	r3, r5, r3
 80045a6:	19db      	adds	r3, r3, r7
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	2508      	movs	r5, #8
 80045ae:	1973      	adds	r3, r6, r5
 80045b0:	19db      	adds	r3, r3, r7
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	000b      	movs	r3, r1
 80045b8:	2180      	movs	r1, #128	@ 0x80
 80045ba:	f00d fa2b 	bl	8011a14 <sniprintf>
                     "Temp IEEE 754 - Sign: %lu, Exp: %lu, Mant: 0x%06lX\r\n",
                     temp_sign, temp_exp, temp_mant);
            debug_print(debug_msg);
 80045be:	1963      	adds	r3, r4, r5
 80045c0:	19db      	adds	r3, r3, r7
 80045c2:	0018      	movs	r0, r3
 80045c4:	f7ff fa02 	bl	80039cc <debug_print>
            
            if (temp_exp != 0 && temp_exp != 0xFF) {
 80045c8:	002a      	movs	r2, r5
 80045ca:	18b3      	adds	r3, r6, r2
 80045cc:	19db      	adds	r3, r3, r7
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d100      	bne.n	80045d6 <bme680_read_sensor_data+0x47e>
 80045d4:	e0ca      	b.n	800476c <bme680_read_sensor_data+0x614>
 80045d6:	18b3      	adds	r3, r6, r2
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2bff      	cmp	r3, #255	@ 0xff
 80045de:	d100      	bne.n	80045e2 <bme680_read_sensor_data+0x48a>
 80045e0:	e0c4      	b.n	800476c <bme680_read_sensor_data+0x614>
                int temp_exp_val = (int)temp_exp - 127;
 80045e2:	0011      	movs	r1, r2
 80045e4:	18b3      	adds	r3, r6, r2
 80045e6:	19db      	adds	r3, r3, r7
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3b7f      	subs	r3, #127	@ 0x7f
 80045ec:	22bc      	movs	r2, #188	@ 0xbc
 80045ee:	1852      	adds	r2, r2, r1
 80045f0:	19d2      	adds	r2, r2, r7
 80045f2:	6013      	str	r3, [r2, #0]
                float temp_result = 1.0f;
 80045f4:	23fe      	movs	r3, #254	@ 0xfe
 80045f6:	059b      	lsls	r3, r3, #22
 80045f8:	2284      	movs	r2, #132	@ 0x84
 80045fa:	0052      	lsls	r2, r2, #1
 80045fc:	1852      	adds	r2, r2, r1
 80045fe:	19d2      	adds	r2, r2, r7
 8004600:	6013      	str	r3, [r2, #0]
                
                // Calculate mantissa (implicit 1.0 + fractional part)
                for (int i = 22; i >= 0; i--) {
 8004602:	2316      	movs	r3, #22
 8004604:	2286      	movs	r2, #134	@ 0x86
 8004606:	0052      	lsls	r2, r2, #1
 8004608:	18ba      	adds	r2, r7, r2
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	e032      	b.n	8004674 <bme680_read_sensor_data+0x51c>
                    if (temp_mant & (1 << i)) {
 800460e:	2201      	movs	r2, #1
 8004610:	2186      	movs	r1, #134	@ 0x86
 8004612:	0049      	lsls	r1, r1, #1
 8004614:	187b      	adds	r3, r7, r1
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	409a      	lsls	r2, r3
 800461a:	0013      	movs	r3, r2
 800461c:	001a      	movs	r2, r3
 800461e:	23c0      	movs	r3, #192	@ 0xc0
 8004620:	2508      	movs	r5, #8
 8004622:	195b      	adds	r3, r3, r5
 8004624:	19db      	adds	r3, r3, r7
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4013      	ands	r3, r2
 800462a:	d01c      	beq.n	8004666 <bme680_read_sensor_data+0x50e>
                        temp_result += 1.0f / (1 << (23 - i));
 800462c:	187b      	adds	r3, r7, r1
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2217      	movs	r2, #23
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2201      	movs	r2, #1
 8004636:	409a      	lsls	r2, r3
 8004638:	0013      	movs	r3, r2
 800463a:	0018      	movs	r0, r3
 800463c:	f7fd f89c 	bl	8001778 <__aeabi_i2f>
 8004640:	1c03      	adds	r3, r0, #0
 8004642:	1c19      	adds	r1, r3, #0
 8004644:	20fe      	movs	r0, #254	@ 0xfe
 8004646:	0580      	lsls	r0, r0, #22
 8004648:	f7fc fad4 	bl	8000bf4 <__aeabi_fdiv>
 800464c:	1c03      	adds	r3, r0, #0
 800464e:	1c19      	adds	r1, r3, #0
 8004650:	2484      	movs	r4, #132	@ 0x84
 8004652:	0064      	lsls	r4, r4, #1
 8004654:	1963      	adds	r3, r4, r5
 8004656:	19db      	adds	r3, r3, r7
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	f7fc f8d9 	bl	8000810 <__aeabi_fadd>
 800465e:	1c03      	adds	r3, r0, #0
 8004660:	1962      	adds	r2, r4, r5
 8004662:	19d2      	adds	r2, r2, r7
 8004664:	6013      	str	r3, [r2, #0]
                for (int i = 22; i >= 0; i--) {
 8004666:	2286      	movs	r2, #134	@ 0x86
 8004668:	0052      	lsls	r2, r2, #1
 800466a:	18bb      	adds	r3, r7, r2
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3b01      	subs	r3, #1
 8004670:	18ba      	adds	r2, r7, r2
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	2386      	movs	r3, #134	@ 0x86
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dac6      	bge.n	800460e <bme680_read_sensor_data+0x4b6>
                    }
                }
                
                // Apply exponent
                if (temp_exp_val > 0) {
 8004680:	21bc      	movs	r1, #188	@ 0xbc
 8004682:	2508      	movs	r5, #8
 8004684:	194b      	adds	r3, r1, r5
 8004686:	19db      	adds	r3, r3, r7
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	dd16      	ble.n	80046bc <bme680_read_sensor_data+0x564>
                    temp_result *= (1 << temp_exp_val);
 800468e:	2201      	movs	r2, #1
 8004690:	194b      	adds	r3, r1, r5
 8004692:	19db      	adds	r3, r3, r7
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	409a      	lsls	r2, r3
 8004698:	0013      	movs	r3, r2
 800469a:	0018      	movs	r0, r3
 800469c:	f7fd f86c 	bl	8001778 <__aeabi_i2f>
 80046a0:	1c03      	adds	r3, r0, #0
 80046a2:	1c19      	adds	r1, r3, #0
 80046a4:	2484      	movs	r4, #132	@ 0x84
 80046a6:	0064      	lsls	r4, r4, #1
 80046a8:	1963      	adds	r3, r4, r5
 80046aa:	19db      	adds	r3, r3, r7
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f7fc fc6f 	bl	8000f90 <__aeabi_fmul>
 80046b2:	1c03      	adds	r3, r0, #0
 80046b4:	1962      	adds	r2, r4, r5
 80046b6:	19d2      	adds	r2, r2, r7
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e01d      	b.n	80046f8 <bme680_read_sensor_data+0x5a0>
                } else if (temp_exp_val < 0) {
 80046bc:	22bc      	movs	r2, #188	@ 0xbc
 80046be:	2508      	movs	r5, #8
 80046c0:	1953      	adds	r3, r2, r5
 80046c2:	19db      	adds	r3, r3, r7
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da16      	bge.n	80046f8 <bme680_read_sensor_data+0x5a0>
                    temp_result /= (1 << (-temp_exp_val));
 80046ca:	1953      	adds	r3, r2, r5
 80046cc:	19db      	adds	r3, r3, r7
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	425b      	negs	r3, r3
 80046d2:	2201      	movs	r2, #1
 80046d4:	409a      	lsls	r2, r3
 80046d6:	0013      	movs	r3, r2
 80046d8:	0018      	movs	r0, r3
 80046da:	f7fd f84d 	bl	8001778 <__aeabi_i2f>
 80046de:	1c03      	adds	r3, r0, #0
 80046e0:	1c19      	adds	r1, r3, #0
 80046e2:	2484      	movs	r4, #132	@ 0x84
 80046e4:	0064      	lsls	r4, r4, #1
 80046e6:	1963      	adds	r3, r4, r5
 80046e8:	19db      	adds	r3, r3, r7
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	f7fc fa82 	bl	8000bf4 <__aeabi_fdiv>
 80046f0:	1c03      	adds	r3, r0, #0
 80046f2:	1962      	adds	r2, r4, r5
 80046f4:	19d2      	adds	r2, r2, r7
 80046f6:	6013      	str	r3, [r2, #0]
                }
                
                // Apply sign
                if (temp_sign) temp_result = -temp_result;
 80046f8:	23c8      	movs	r3, #200	@ 0xc8
 80046fa:	2008      	movs	r0, #8
 80046fc:	181b      	adds	r3, r3, r0
 80046fe:	19db      	adds	r3, r3, r7
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <bme680_read_sensor_data+0x5c4>
 8004706:	2184      	movs	r1, #132	@ 0x84
 8004708:	0049      	lsls	r1, r1, #1
 800470a:	180b      	adds	r3, r1, r0
 800470c:	19db      	adds	r3, r3, r7
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2280      	movs	r2, #128	@ 0x80
 8004712:	0612      	lsls	r2, r2, #24
 8004714:	4053      	eors	r3, r2
 8004716:	180a      	adds	r2, r1, r0
 8004718:	19d2      	adds	r2, r2, r7
 800471a:	6013      	str	r3, [r2, #0]
                
                snprintf(debug_msg, sizeof(debug_msg), 
 800471c:	2584      	movs	r5, #132	@ 0x84
 800471e:	006d      	lsls	r5, r5, #1
 8004720:	2408      	movs	r4, #8
 8004722:	192b      	adds	r3, r5, r4
 8004724:	19db      	adds	r3, r3, r7
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	f7ff f85c 	bl	80037e4 <__aeabi_f2d>
 800472c:	0002      	movs	r2, r0
 800472e:	000b      	movs	r3, r1
 8004730:	21bc      	movs	r1, #188	@ 0xbc
 8004732:	0020      	movs	r0, r4
 8004734:	1909      	adds	r1, r1, r4
 8004736:	19c9      	adds	r1, r1, r7
 8004738:	680c      	ldr	r4, [r1, #0]
 800473a:	4958      	ldr	r1, [pc, #352]	@ (800489c <bme680_read_sensor_data+0x744>)
 800473c:	2608      	movs	r6, #8
 800473e:	1830      	adds	r0, r6, r0
 8004740:	19c0      	adds	r0, r0, r7
 8004742:	9200      	str	r2, [sp, #0]
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	0023      	movs	r3, r4
 8004748:	000a      	movs	r2, r1
 800474a:	2180      	movs	r1, #128	@ 0x80
 800474c:	f00d f962 	bl	8011a14 <sniprintf>
                         "Temp calculation - Exp_val: %d, Result: %.6f°C\r\n",
                         temp_exp_val, temp_result);
                debug_print(debug_msg);
 8004750:	2408      	movs	r4, #8
 8004752:	1933      	adds	r3, r6, r4
 8004754:	19db      	adds	r3, r3, r7
 8004756:	0018      	movs	r0, r3
 8004758:	f7ff f938 	bl	80039cc <debug_print>
                
                // Use this calculated value
                temp_decoded = temp_result;
 800475c:	0021      	movs	r1, r4
 800475e:	186b      	adds	r3, r5, r1
 8004760:	19db      	adds	r3, r3, r7
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	22e0      	movs	r2, #224	@ 0xe0
 8004766:	1852      	adds	r2, r2, r1
 8004768:	19d2      	adds	r2, r2, r7
 800476a:	6013      	str	r3, [r2, #0]
            }
            
            // Also calculate pressure and humidity
            uint32_t press_sign = (press_mem >> 31) & 0x1;
 800476c:	21e8      	movs	r1, #232	@ 0xe8
 800476e:	2008      	movs	r0, #8
 8004770:	180b      	adds	r3, r1, r0
 8004772:	19db      	adds	r3, r3, r7
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	0fdb      	lsrs	r3, r3, #31
 8004778:	22b8      	movs	r2, #184	@ 0xb8
 800477a:	1812      	adds	r2, r2, r0
 800477c:	19d2      	adds	r2, r2, r7
 800477e:	6013      	str	r3, [r2, #0]
            uint32_t press_exp = (press_mem >> 23) & 0xFF;
 8004780:	180b      	adds	r3, r1, r0
 8004782:	19db      	adds	r3, r3, r7
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	0ddb      	lsrs	r3, r3, #23
 8004788:	22ff      	movs	r2, #255	@ 0xff
 800478a:	4013      	ands	r3, r2
 800478c:	22b4      	movs	r2, #180	@ 0xb4
 800478e:	0004      	movs	r4, r0
 8004790:	1810      	adds	r0, r2, r0
 8004792:	19c0      	adds	r0, r0, r7
 8004794:	6003      	str	r3, [r0, #0]
            uint32_t press_mant = press_mem & 0x7FFFFF;
 8004796:	0020      	movs	r0, r4
 8004798:	180b      	adds	r3, r1, r0
 800479a:	19db      	adds	r3, r3, r7
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	025b      	lsls	r3, r3, #9
 80047a0:	0a5b      	lsrs	r3, r3, #9
 80047a2:	21b0      	movs	r1, #176	@ 0xb0
 80047a4:	1809      	adds	r1, r1, r0
 80047a6:	19c9      	adds	r1, r1, r7
 80047a8:	600b      	str	r3, [r1, #0]
            
            if (press_exp != 0 && press_exp != 0xFF) {
 80047aa:	0001      	movs	r1, r0
 80047ac:	1853      	adds	r3, r2, r1
 80047ae:	19db      	adds	r3, r3, r7
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d100      	bne.n	80047b8 <bme680_read_sensor_data+0x660>
 80047b6:	e0a8      	b.n	800490a <bme680_read_sensor_data+0x7b2>
 80047b8:	1853      	adds	r3, r2, r1
 80047ba:	19db      	adds	r3, r3, r7
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2bff      	cmp	r3, #255	@ 0xff
 80047c0:	d100      	bne.n	80047c4 <bme680_read_sensor_data+0x66c>
 80047c2:	e0a2      	b.n	800490a <bme680_read_sensor_data+0x7b2>
                int press_exp_val = (int)press_exp - 127;
 80047c4:	1853      	adds	r3, r2, r1
 80047c6:	19db      	adds	r3, r3, r7
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3b7f      	subs	r3, #127	@ 0x7f
 80047cc:	22ac      	movs	r2, #172	@ 0xac
 80047ce:	1852      	adds	r2, r2, r1
 80047d0:	19d2      	adds	r2, r2, r7
 80047d2:	6013      	str	r3, [r2, #0]
                float press_result = 1.0f;
 80047d4:	23fe      	movs	r3, #254	@ 0xfe
 80047d6:	059b      	lsls	r3, r3, #22
 80047d8:	2284      	movs	r2, #132	@ 0x84
 80047da:	0052      	lsls	r2, r2, #1
 80047dc:	18ba      	adds	r2, r7, r2
 80047de:	6013      	str	r3, [r2, #0]
                
                for (int i = 22; i >= 0; i--) {
 80047e0:	2316      	movs	r3, #22
 80047e2:	22fc      	movs	r2, #252	@ 0xfc
 80047e4:	1852      	adds	r2, r2, r1
 80047e6:	19d2      	adds	r2, r2, r7
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e033      	b.n	8004854 <bme680_read_sensor_data+0x6fc>
                    if (press_mant & (1 << i)) {
 80047ec:	2201      	movs	r2, #1
 80047ee:	21fc      	movs	r1, #252	@ 0xfc
 80047f0:	2008      	movs	r0, #8
 80047f2:	180b      	adds	r3, r1, r0
 80047f4:	19db      	adds	r3, r3, r7
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	409a      	lsls	r2, r3
 80047fa:	0013      	movs	r3, r2
 80047fc:	001a      	movs	r2, r3
 80047fe:	23b0      	movs	r3, #176	@ 0xb0
 8004800:	181b      	adds	r3, r3, r0
 8004802:	19db      	adds	r3, r3, r7
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4013      	ands	r3, r2
 8004808:	d01b      	beq.n	8004842 <bme680_read_sensor_data+0x6ea>
                        press_result += 1.0f / (1 << (23 - i));
 800480a:	180b      	adds	r3, r1, r0
 800480c:	19db      	adds	r3, r3, r7
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2217      	movs	r2, #23
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2201      	movs	r2, #1
 8004816:	409a      	lsls	r2, r3
 8004818:	0013      	movs	r3, r2
 800481a:	0018      	movs	r0, r3
 800481c:	f7fc ffac 	bl	8001778 <__aeabi_i2f>
 8004820:	1c03      	adds	r3, r0, #0
 8004822:	1c19      	adds	r1, r3, #0
 8004824:	20fe      	movs	r0, #254	@ 0xfe
 8004826:	0580      	lsls	r0, r0, #22
 8004828:	f7fc f9e4 	bl	8000bf4 <__aeabi_fdiv>
 800482c:	1c03      	adds	r3, r0, #0
 800482e:	1c19      	adds	r1, r3, #0
 8004830:	2484      	movs	r4, #132	@ 0x84
 8004832:	0064      	lsls	r4, r4, #1
 8004834:	193b      	adds	r3, r7, r4
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	f7fb ffea 	bl	8000810 <__aeabi_fadd>
 800483c:	1c03      	adds	r3, r0, #0
 800483e:	193a      	adds	r2, r7, r4
 8004840:	6013      	str	r3, [r2, #0]
                for (int i = 22; i >= 0; i--) {
 8004842:	22fc      	movs	r2, #252	@ 0xfc
 8004844:	2108      	movs	r1, #8
 8004846:	1853      	adds	r3, r2, r1
 8004848:	19db      	adds	r3, r3, r7
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	1852      	adds	r2, r2, r1
 8004850:	19d2      	adds	r2, r2, r7
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	23fc      	movs	r3, #252	@ 0xfc
 8004856:	2008      	movs	r0, #8
 8004858:	181b      	adds	r3, r3, r0
 800485a:	19db      	adds	r3, r3, r7
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	dac4      	bge.n	80047ec <bme680_read_sensor_data+0x694>
                    }
                }
                
                if (press_exp_val > 0) {
 8004862:	21ac      	movs	r1, #172	@ 0xac
 8004864:	180b      	adds	r3, r1, r0
 8004866:	19db      	adds	r3, r3, r7
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	dd18      	ble.n	80048a0 <bme680_read_sensor_data+0x748>
                    press_result *= (1 << press_exp_val);
 800486e:	2201      	movs	r2, #1
 8004870:	180b      	adds	r3, r1, r0
 8004872:	19db      	adds	r3, r3, r7
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	409a      	lsls	r2, r3
 8004878:	0013      	movs	r3, r2
 800487a:	0018      	movs	r0, r3
 800487c:	f7fc ff7c 	bl	8001778 <__aeabi_i2f>
 8004880:	1c03      	adds	r3, r0, #0
 8004882:	1c19      	adds	r1, r3, #0
 8004884:	2484      	movs	r4, #132	@ 0x84
 8004886:	0064      	lsls	r4, r4, #1
 8004888:	193b      	adds	r3, r7, r4
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	f7fc fb80 	bl	8000f90 <__aeabi_fmul>
 8004890:	1c03      	adds	r3, r0, #0
 8004892:	193a      	adds	r2, r7, r4
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e01f      	b.n	80048d8 <bme680_read_sensor_data+0x780>
 8004898:	08014e5c 	.word	0x08014e5c
 800489c:	08014e94 	.word	0x08014e94
                } else if (press_exp_val < 0) {
 80048a0:	22ac      	movs	r2, #172	@ 0xac
 80048a2:	2108      	movs	r1, #8
 80048a4:	1853      	adds	r3, r2, r1
 80048a6:	19db      	adds	r3, r3, r7
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	da14      	bge.n	80048d8 <bme680_read_sensor_data+0x780>
                    press_result /= (1 << (-press_exp_val));
 80048ae:	1853      	adds	r3, r2, r1
 80048b0:	19db      	adds	r3, r3, r7
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	425b      	negs	r3, r3
 80048b6:	2201      	movs	r2, #1
 80048b8:	409a      	lsls	r2, r3
 80048ba:	0013      	movs	r3, r2
 80048bc:	0018      	movs	r0, r3
 80048be:	f7fc ff5b 	bl	8001778 <__aeabi_i2f>
 80048c2:	1c03      	adds	r3, r0, #0
 80048c4:	1c19      	adds	r1, r3, #0
 80048c6:	2484      	movs	r4, #132	@ 0x84
 80048c8:	0064      	lsls	r4, r4, #1
 80048ca:	193b      	adds	r3, r7, r4
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	f7fc f991 	bl	8000bf4 <__aeabi_fdiv>
 80048d2:	1c03      	adds	r3, r0, #0
 80048d4:	193a      	adds	r2, r7, r4
 80048d6:	6013      	str	r3, [r2, #0]
                }
                
                if (press_sign) press_result = -press_result;
 80048d8:	23b8      	movs	r3, #184	@ 0xb8
 80048da:	2208      	movs	r2, #8
 80048dc:	189b      	adds	r3, r3, r2
 80048de:	19db      	adds	r3, r3, r7
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <bme680_read_sensor_data+0x7a0>
 80048e6:	2184      	movs	r1, #132	@ 0x84
 80048e8:	0049      	lsls	r1, r1, #1
 80048ea:	187b      	adds	r3, r7, r1
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2280      	movs	r2, #128	@ 0x80
 80048f0:	0612      	lsls	r2, r2, #24
 80048f2:	4053      	eors	r3, r2
 80048f4:	187a      	adds	r2, r7, r1
 80048f6:	6013      	str	r3, [r2, #0]
                press_decoded = press_result;
 80048f8:	2384      	movs	r3, #132	@ 0x84
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	22dc      	movs	r2, #220	@ 0xdc
 8004902:	2108      	movs	r1, #8
 8004904:	1852      	adds	r2, r2, r1
 8004906:	19d2      	adds	r2, r2, r7
 8004908:	6013      	str	r3, [r2, #0]
            }
            
            uint32_t hum_sign = (hum_mem >> 31) & 0x1;
 800490a:	21e4      	movs	r1, #228	@ 0xe4
 800490c:	2008      	movs	r0, #8
 800490e:	180b      	adds	r3, r1, r0
 8004910:	19db      	adds	r3, r3, r7
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	0fdb      	lsrs	r3, r3, #31
 8004916:	22a8      	movs	r2, #168	@ 0xa8
 8004918:	1812      	adds	r2, r2, r0
 800491a:	19d2      	adds	r2, r2, r7
 800491c:	6013      	str	r3, [r2, #0]
            uint32_t hum_exp = (hum_mem >> 23) & 0xFF;
 800491e:	180b      	adds	r3, r1, r0
 8004920:	19db      	adds	r3, r3, r7
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0ddb      	lsrs	r3, r3, #23
 8004926:	22ff      	movs	r2, #255	@ 0xff
 8004928:	4013      	ands	r3, r2
 800492a:	22a4      	movs	r2, #164	@ 0xa4
 800492c:	0004      	movs	r4, r0
 800492e:	1810      	adds	r0, r2, r0
 8004930:	19c0      	adds	r0, r0, r7
 8004932:	6003      	str	r3, [r0, #0]
            uint32_t hum_mant = hum_mem & 0x7FFFFF;
 8004934:	0020      	movs	r0, r4
 8004936:	180b      	adds	r3, r1, r0
 8004938:	19db      	adds	r3, r3, r7
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	025b      	lsls	r3, r3, #9
 800493e:	0a5b      	lsrs	r3, r3, #9
 8004940:	21a0      	movs	r1, #160	@ 0xa0
 8004942:	1809      	adds	r1, r1, r0
 8004944:	19c9      	adds	r1, r1, r7
 8004946:	600b      	str	r3, [r1, #0]
            
            if (hum_exp != 0 && hum_exp != 0xFF) {
 8004948:	0001      	movs	r1, r0
 800494a:	1853      	adds	r3, r2, r1
 800494c:	19db      	adds	r3, r3, r7
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d100      	bne.n	8004956 <bme680_read_sensor_data+0x7fe>
 8004954:	e0a8      	b.n	8004aa8 <bme680_read_sensor_data+0x950>
 8004956:	1853      	adds	r3, r2, r1
 8004958:	19db      	adds	r3, r3, r7
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2bff      	cmp	r3, #255	@ 0xff
 800495e:	d100      	bne.n	8004962 <bme680_read_sensor_data+0x80a>
 8004960:	e0a2      	b.n	8004aa8 <bme680_read_sensor_data+0x950>
                int hum_exp_val = (int)hum_exp - 127;
 8004962:	1853      	adds	r3, r2, r1
 8004964:	19db      	adds	r3, r3, r7
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3b7f      	subs	r3, #127	@ 0x7f
 800496a:	229c      	movs	r2, #156	@ 0x9c
 800496c:	1852      	adds	r2, r2, r1
 800496e:	19d2      	adds	r2, r2, r7
 8004970:	6013      	str	r3, [r2, #0]
                float hum_result = 1.0f;
 8004972:	23fe      	movs	r3, #254	@ 0xfe
 8004974:	059b      	lsls	r3, r3, #22
 8004976:	22f8      	movs	r2, #248	@ 0xf8
 8004978:	1852      	adds	r2, r2, r1
 800497a:	19d2      	adds	r2, r2, r7
 800497c:	6013      	str	r3, [r2, #0]
                
                for (int i = 22; i >= 0; i--) {
 800497e:	2316      	movs	r3, #22
 8004980:	22f4      	movs	r2, #244	@ 0xf4
 8004982:	1852      	adds	r2, r2, r1
 8004984:	19d2      	adds	r2, r2, r7
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e034      	b.n	80049f4 <bme680_read_sensor_data+0x89c>
                    if (hum_mant & (1 << i)) {
 800498a:	2201      	movs	r2, #1
 800498c:	21f4      	movs	r1, #244	@ 0xf4
 800498e:	2508      	movs	r5, #8
 8004990:	194b      	adds	r3, r1, r5
 8004992:	19db      	adds	r3, r3, r7
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	409a      	lsls	r2, r3
 8004998:	0013      	movs	r3, r2
 800499a:	001a      	movs	r2, r3
 800499c:	23a0      	movs	r3, #160	@ 0xa0
 800499e:	195b      	adds	r3, r3, r5
 80049a0:	19db      	adds	r3, r3, r7
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4013      	ands	r3, r2
 80049a6:	d01c      	beq.n	80049e2 <bme680_read_sensor_data+0x88a>
                        hum_result += 1.0f / (1 << (23 - i));
 80049a8:	194b      	adds	r3, r1, r5
 80049aa:	19db      	adds	r3, r3, r7
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2217      	movs	r2, #23
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2201      	movs	r2, #1
 80049b4:	409a      	lsls	r2, r3
 80049b6:	0013      	movs	r3, r2
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fc fedd 	bl	8001778 <__aeabi_i2f>
 80049be:	1c03      	adds	r3, r0, #0
 80049c0:	1c19      	adds	r1, r3, #0
 80049c2:	20fe      	movs	r0, #254	@ 0xfe
 80049c4:	0580      	lsls	r0, r0, #22
 80049c6:	f7fc f915 	bl	8000bf4 <__aeabi_fdiv>
 80049ca:	1c03      	adds	r3, r0, #0
 80049cc:	1c19      	adds	r1, r3, #0
 80049ce:	24f8      	movs	r4, #248	@ 0xf8
 80049d0:	1963      	adds	r3, r4, r5
 80049d2:	19db      	adds	r3, r3, r7
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	f7fb ff1b 	bl	8000810 <__aeabi_fadd>
 80049da:	1c03      	adds	r3, r0, #0
 80049dc:	1962      	adds	r2, r4, r5
 80049de:	19d2      	adds	r2, r2, r7
 80049e0:	6013      	str	r3, [r2, #0]
                for (int i = 22; i >= 0; i--) {
 80049e2:	22f4      	movs	r2, #244	@ 0xf4
 80049e4:	2108      	movs	r1, #8
 80049e6:	1853      	adds	r3, r2, r1
 80049e8:	19db      	adds	r3, r3, r7
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	1852      	adds	r2, r2, r1
 80049f0:	19d2      	adds	r2, r2, r7
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	23f4      	movs	r3, #244	@ 0xf4
 80049f6:	2508      	movs	r5, #8
 80049f8:	195b      	adds	r3, r3, r5
 80049fa:	19db      	adds	r3, r3, r7
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	dac3      	bge.n	800498a <bme680_read_sensor_data+0x832>
                    }
                }
                
                if (hum_exp_val > 0) {
 8004a02:	219c      	movs	r1, #156	@ 0x9c
 8004a04:	194b      	adds	r3, r1, r5
 8004a06:	19db      	adds	r3, r3, r7
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	dd15      	ble.n	8004a3a <bme680_read_sensor_data+0x8e2>
                    hum_result *= (1 << hum_exp_val);
 8004a0e:	2201      	movs	r2, #1
 8004a10:	194b      	adds	r3, r1, r5
 8004a12:	19db      	adds	r3, r3, r7
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	409a      	lsls	r2, r3
 8004a18:	0013      	movs	r3, r2
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f7fc feac 	bl	8001778 <__aeabi_i2f>
 8004a20:	1c03      	adds	r3, r0, #0
 8004a22:	1c19      	adds	r1, r3, #0
 8004a24:	24f8      	movs	r4, #248	@ 0xf8
 8004a26:	1963      	adds	r3, r4, r5
 8004a28:	19db      	adds	r3, r3, r7
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	f7fc fab0 	bl	8000f90 <__aeabi_fmul>
 8004a30:	1c03      	adds	r3, r0, #0
 8004a32:	1962      	adds	r2, r4, r5
 8004a34:	19d2      	adds	r2, r2, r7
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	e01c      	b.n	8004a74 <bme680_read_sensor_data+0x91c>
                } else if (hum_exp_val < 0) {
 8004a3a:	229c      	movs	r2, #156	@ 0x9c
 8004a3c:	2508      	movs	r5, #8
 8004a3e:	1953      	adds	r3, r2, r5
 8004a40:	19db      	adds	r3, r3, r7
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	da15      	bge.n	8004a74 <bme680_read_sensor_data+0x91c>
                    hum_result /= (1 << (-hum_exp_val));
 8004a48:	1953      	adds	r3, r2, r5
 8004a4a:	19db      	adds	r3, r3, r7
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	425b      	negs	r3, r3
 8004a50:	2201      	movs	r2, #1
 8004a52:	409a      	lsls	r2, r3
 8004a54:	0013      	movs	r3, r2
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fc fe8e 	bl	8001778 <__aeabi_i2f>
 8004a5c:	1c03      	adds	r3, r0, #0
 8004a5e:	1c19      	adds	r1, r3, #0
 8004a60:	24f8      	movs	r4, #248	@ 0xf8
 8004a62:	1963      	adds	r3, r4, r5
 8004a64:	19db      	adds	r3, r3, r7
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	f7fc f8c4 	bl	8000bf4 <__aeabi_fdiv>
 8004a6c:	1c03      	adds	r3, r0, #0
 8004a6e:	1962      	adds	r2, r4, r5
 8004a70:	19d2      	adds	r2, r2, r7
 8004a72:	6013      	str	r3, [r2, #0]
                }
                
                if (hum_sign) hum_result = -hum_result;
 8004a74:	23a8      	movs	r3, #168	@ 0xa8
 8004a76:	2008      	movs	r0, #8
 8004a78:	181b      	adds	r3, r3, r0
 8004a7a:	19db      	adds	r3, r3, r7
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <bme680_read_sensor_data+0x93e>
 8004a82:	21f8      	movs	r1, #248	@ 0xf8
 8004a84:	180b      	adds	r3, r1, r0
 8004a86:	19db      	adds	r3, r3, r7
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2280      	movs	r2, #128	@ 0x80
 8004a8c:	0612      	lsls	r2, r2, #24
 8004a8e:	4053      	eors	r3, r2
 8004a90:	180a      	adds	r2, r1, r0
 8004a92:	19d2      	adds	r2, r2, r7
 8004a94:	6013      	str	r3, [r2, #0]
                hum_decoded = hum_result;
 8004a96:	23f8      	movs	r3, #248	@ 0xf8
 8004a98:	2108      	movs	r1, #8
 8004a9a:	185b      	adds	r3, r3, r1
 8004a9c:	19db      	adds	r3, r3, r7
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	22d8      	movs	r2, #216	@ 0xd8
 8004aa2:	1852      	adds	r2, r2, r1
 8004aa4:	19d2      	adds	r2, r2, r7
 8004aa6:	6013      	str	r3, [r2, #0]
            }
            
            // Check validity of each value
            int temp_valid = is_float_invalid(data->temperature);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	1c18      	adds	r0, r3, #0
 8004aae:	f7ff fb30 	bl	8004112 <is_float_invalid>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	2498      	movs	r4, #152	@ 0x98
 8004ab6:	2508      	movs	r5, #8
 8004ab8:	1962      	adds	r2, r4, r5
 8004aba:	19d2      	adds	r2, r2, r7
 8004abc:	6013      	str	r3, [r2, #0]
            int press_valid = is_float_invalid(data->pressure);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	1c18      	adds	r0, r3, #0
 8004ac4:	f7ff fb25 	bl	8004112 <is_float_invalid>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	2294      	movs	r2, #148	@ 0x94
 8004acc:	1952      	adds	r2, r2, r5
 8004ace:	19d2      	adds	r2, r2, r7
 8004ad0:	6013      	str	r3, [r2, #0]
            int hum_valid = is_float_invalid(data->humidity);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	1c18      	adds	r0, r3, #0
 8004ad8:	f7ff fb1b 	bl	8004112 <is_float_invalid>
 8004adc:	0003      	movs	r3, r0
 8004ade:	2290      	movs	r2, #144	@ 0x90
 8004ae0:	1952      	adds	r2, r2, r5
 8004ae2:	19d2      	adds	r2, r2, r7
 8004ae4:	6013      	str	r3, [r2, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), 
 8004ae6:	1963      	adds	r3, r4, r5
 8004ae8:	19db      	adds	r3, r3, r7
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <bme680_read_sensor_data+0x9aa>
                     "Validity check - Temp: %s, Press: %s, Hum: %s\r\n",
                     temp_valid == 0 ? "Valid" : (temp_valid == 1 ? "NaN" : "Inf"),
 8004af0:	1963      	adds	r3, r4, r5
 8004af2:	19db      	adds	r3, r3, r7
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <bme680_read_sensor_data+0x9a6>
 8004afa:	4976      	ldr	r1, [pc, #472]	@ (8004cd4 <bme680_read_sensor_data+0xb7c>)
 8004afc:	e002      	b.n	8004b04 <bme680_read_sensor_data+0x9ac>
 8004afe:	4976      	ldr	r1, [pc, #472]	@ (8004cd8 <bme680_read_sensor_data+0xb80>)
 8004b00:	e000      	b.n	8004b04 <bme680_read_sensor_data+0x9ac>
            snprintf(debug_msg, sizeof(debug_msg), 
 8004b02:	4976      	ldr	r1, [pc, #472]	@ (8004cdc <bme680_read_sensor_data+0xb84>)
 8004b04:	2294      	movs	r2, #148	@ 0x94
 8004b06:	2008      	movs	r0, #8
 8004b08:	1813      	adds	r3, r2, r0
 8004b0a:	19db      	adds	r3, r3, r7
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <bme680_read_sensor_data+0x9cc>
                     press_valid == 0 ? "Valid" : (press_valid == 1 ? "NaN" : "Inf"),
 8004b12:	1813      	adds	r3, r2, r0
 8004b14:	19db      	adds	r3, r3, r7
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <bme680_read_sensor_data+0x9c8>
 8004b1c:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd4 <bme680_read_sensor_data+0xb7c>)
 8004b1e:	e002      	b.n	8004b26 <bme680_read_sensor_data+0x9ce>
 8004b20:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd8 <bme680_read_sensor_data+0xb80>)
 8004b22:	e000      	b.n	8004b26 <bme680_read_sensor_data+0x9ce>
            snprintf(debug_msg, sizeof(debug_msg), 
 8004b24:	4b6d      	ldr	r3, [pc, #436]	@ (8004cdc <bme680_read_sensor_data+0xb84>)
 8004b26:	2090      	movs	r0, #144	@ 0x90
 8004b28:	2408      	movs	r4, #8
 8004b2a:	1902      	adds	r2, r0, r4
 8004b2c:	19d2      	adds	r2, r2, r7
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d008      	beq.n	8004b46 <bme680_read_sensor_data+0x9ee>
                     hum_valid == 0 ? "Valid" : (hum_valid == 1 ? "NaN" : "Inf"));
 8004b34:	1902      	adds	r2, r0, r4
 8004b36:	19d2      	adds	r2, r2, r7
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	2a01      	cmp	r2, #1
 8004b3c:	d101      	bne.n	8004b42 <bme680_read_sensor_data+0x9ea>
 8004b3e:	4a65      	ldr	r2, [pc, #404]	@ (8004cd4 <bme680_read_sensor_data+0xb7c>)
 8004b40:	e002      	b.n	8004b48 <bme680_read_sensor_data+0x9f0>
 8004b42:	4a65      	ldr	r2, [pc, #404]	@ (8004cd8 <bme680_read_sensor_data+0xb80>)
 8004b44:	e000      	b.n	8004b48 <bme680_read_sensor_data+0x9f0>
            snprintf(debug_msg, sizeof(debug_msg), 
 8004b46:	4a65      	ldr	r2, [pc, #404]	@ (8004cdc <bme680_read_sensor_data+0xb84>)
 8004b48:	4c65      	ldr	r4, [pc, #404]	@ (8004ce0 <bme680_read_sensor_data+0xb88>)
 8004b4a:	2508      	movs	r5, #8
 8004b4c:	2608      	movs	r6, #8
 8004b4e:	19a8      	adds	r0, r5, r6
 8004b50:	19c0      	adds	r0, r0, r7
 8004b52:	9201      	str	r2, [sp, #4]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	000b      	movs	r3, r1
 8004b58:	0022      	movs	r2, r4
 8004b5a:	2180      	movs	r1, #128	@ 0x80
 8004b5c:	f00c ff5a 	bl	8011a14 <sniprintf>
            debug_print(debug_msg);
 8004b60:	19ab      	adds	r3, r5, r6
 8004b62:	19db      	adds	r3, r3, r7
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7fe ff31 	bl	80039cc <debug_print>
            
            // Check if values are valid (not NaN or infinite)
            if (is_float_invalid(data->temperature) || is_float_invalid(data->pressure) || is_float_invalid(data->humidity)) {
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	1c18      	adds	r0, r3, #0
 8004b70:	f7ff facf 	bl	8004112 <is_float_invalid>
 8004b74:	1e03      	subs	r3, r0, #0
 8004b76:	d10d      	bne.n	8004b94 <bme680_read_sensor_data+0xa3c>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	1c18      	adds	r0, r3, #0
 8004b7e:	f7ff fac8 	bl	8004112 <is_float_invalid>
 8004b82:	1e03      	subs	r3, r0, #0
 8004b84:	d106      	bne.n	8004b94 <bme680_read_sensor_data+0xa3c>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	1c18      	adds	r0, r3, #0
 8004b8c:	f7ff fac1 	bl	8004112 <is_float_invalid>
 8004b90:	1e03      	subs	r3, r0, #0
 8004b92:	d006      	beq.n	8004ba2 <bme680_read_sensor_data+0xa4a>
                debug_print("✗ Invalid sensor values detected (NaN or infinite)\r\n");
 8004b94:	4b53      	ldr	r3, [pc, #332]	@ (8004ce4 <bme680_read_sensor_data+0xb8c>)
 8004b96:	0018      	movs	r0, r3
 8004b98:	f7fe ff18 	bl	80039cc <debug_print>
                return BME68X_E_INVALID_LENGTH;
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	425b      	negs	r3, r3
 8004ba0:	e094      	b.n	8004ccc <bme680_read_sensor_data+0xb74>
            }
            
            // Check if values are within reasonable ranges
            if (data->temperature < -40.0f || data->temperature > 85.0f ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4950      	ldr	r1, [pc, #320]	@ (8004ce8 <bme680_read_sensor_data+0xb90>)
 8004ba8:	1c18      	adds	r0, r3, #0
 8004baa:	f7fb fc97 	bl	80004dc <__aeabi_fcmplt>
 8004bae:	1e03      	subs	r3, r0, #0
 8004bb0:	d127      	bne.n	8004c02 <bme680_read_sensor_data+0xaaa>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	494d      	ldr	r1, [pc, #308]	@ (8004cec <bme680_read_sensor_data+0xb94>)
 8004bb8:	1c18      	adds	r0, r3, #0
 8004bba:	f7fb fca3 	bl	8000504 <__aeabi_fcmpgt>
 8004bbe:	1e03      	subs	r3, r0, #0
 8004bc0:	d11f      	bne.n	8004c02 <bme680_read_sensor_data+0xaaa>
                data->pressure < 30000.0f || data->pressure > 125000.0f ||
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	68db      	ldr	r3, [r3, #12]
            if (data->temperature < -40.0f || data->temperature > 85.0f ||
 8004bc6:	494a      	ldr	r1, [pc, #296]	@ (8004cf0 <bme680_read_sensor_data+0xb98>)
 8004bc8:	1c18      	adds	r0, r3, #0
 8004bca:	f7fb fc87 	bl	80004dc <__aeabi_fcmplt>
 8004bce:	1e03      	subs	r3, r0, #0
 8004bd0:	d117      	bne.n	8004c02 <bme680_read_sensor_data+0xaaa>
                data->pressure < 30000.0f || data->pressure > 125000.0f ||
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	4947      	ldr	r1, [pc, #284]	@ (8004cf4 <bme680_read_sensor_data+0xb9c>)
 8004bd8:	1c18      	adds	r0, r3, #0
 8004bda:	f7fb fc93 	bl	8000504 <__aeabi_fcmpgt>
 8004bde:	1e03      	subs	r3, r0, #0
 8004be0:	d10f      	bne.n	8004c02 <bme680_read_sensor_data+0xaaa>
                data->humidity < 0.0f || data->humidity > 100.0f) {
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
                data->pressure < 30000.0f || data->pressure > 125000.0f ||
 8004be6:	2100      	movs	r1, #0
 8004be8:	1c18      	adds	r0, r3, #0
 8004bea:	f7fb fc77 	bl	80004dc <__aeabi_fcmplt>
 8004bee:	1e03      	subs	r3, r0, #0
 8004bf0:	d107      	bne.n	8004c02 <bme680_read_sensor_data+0xaaa>
                data->humidity < 0.0f || data->humidity > 100.0f) {
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	4940      	ldr	r1, [pc, #256]	@ (8004cf8 <bme680_read_sensor_data+0xba0>)
 8004bf8:	1c18      	adds	r0, r3, #0
 8004bfa:	f7fb fc83 	bl	8000504 <__aeabi_fcmpgt>
 8004bfe:	1e03      	subs	r3, r0, #0
 8004c00:	d02b      	beq.n	8004c5a <bme680_read_sensor_data+0xb02>
                snprintf(debug_msg, sizeof(debug_msg), 
                         "⚠ Values out of expected range - Temp: %.2f, Press: %.2f, Hum: %.2f\r\n",
                         data->temperature, data->pressure, data->humidity);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
                snprintf(debug_msg, sizeof(debug_msg), 
 8004c06:	1c18      	adds	r0, r3, #0
 8004c08:	f7fe fdec 	bl	80037e4 <__aeabi_f2d>
 8004c0c:	0004      	movs	r4, r0
 8004c0e:	000d      	movs	r5, r1
                         data->temperature, data->pressure, data->humidity);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
                snprintf(debug_msg, sizeof(debug_msg), 
 8004c14:	1c18      	adds	r0, r3, #0
 8004c16:	f7fe fde5 	bl	80037e4 <__aeabi_f2d>
 8004c1a:	6038      	str	r0, [r7, #0]
 8004c1c:	6079      	str	r1, [r7, #4]
                         data->temperature, data->pressure, data->humidity);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	691b      	ldr	r3, [r3, #16]
                snprintf(debug_msg, sizeof(debug_msg), 
 8004c22:	1c18      	adds	r0, r3, #0
 8004c24:	f7fe fdde 	bl	80037e4 <__aeabi_f2d>
 8004c28:	0002      	movs	r2, r0
 8004c2a:	000b      	movs	r3, r1
 8004c2c:	4933      	ldr	r1, [pc, #204]	@ (8004cfc <bme680_read_sensor_data+0xba4>)
 8004c2e:	2608      	movs	r6, #8
 8004c30:	2008      	movs	r0, #8
 8004c32:	1830      	adds	r0, r6, r0
 8004c34:	19c0      	adds	r0, r0, r7
 8004c36:	9204      	str	r2, [sp, #16]
 8004c38:	9305      	str	r3, [sp, #20]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	9202      	str	r2, [sp, #8]
 8004c40:	9303      	str	r3, [sp, #12]
 8004c42:	9400      	str	r4, [sp, #0]
 8004c44:	9501      	str	r5, [sp, #4]
 8004c46:	000a      	movs	r2, r1
 8004c48:	2180      	movs	r1, #128	@ 0x80
 8004c4a:	f00c fee3 	bl	8011a14 <sniprintf>
                debug_print(debug_msg);
 8004c4e:	2308      	movs	r3, #8
 8004c50:	18f3      	adds	r3, r6, r3
 8004c52:	19db      	adds	r3, r3, r7
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7fe feb9 	bl	80039cc <debug_print>
            }
            
            // Apply temperature offset correction if needed
            // The BME680 might have a factory offset that needs correction
            float temp_offset = -9.5f; // Adjust this value based on your testing
 8004c5a:	4b29      	ldr	r3, [pc, #164]	@ (8004d00 <bme680_read_sensor_data+0xba8>)
 8004c5c:	228c      	movs	r2, #140	@ 0x8c
 8004c5e:	2508      	movs	r5, #8
 8004c60:	1951      	adds	r1, r2, r5
 8004c62:	19c9      	adds	r1, r1, r7
 8004c64:	600b      	str	r3, [r1, #0]
            data->temperature += temp_offset;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	1952      	adds	r2, r2, r5
 8004c6c:	19d2      	adds	r2, r2, r7
 8004c6e:	6811      	ldr	r1, [r2, #0]
 8004c70:	1c18      	adds	r0, r3, #0
 8004c72:	f7fb fdcd 	bl	8000810 <__aeabi_fadd>
 8004c76:	1c03      	adds	r3, r0, #0
 8004c78:	1c1a      	adds	r2, r3, #0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	609a      	str	r2, [r3, #8]
            
            snprintf(debug_msg, sizeof(debug_msg), 
                     "Temperature after offset correction: %.2f°C\r\n",
                     data->temperature);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
            snprintf(debug_msg, sizeof(debug_msg), 
 8004c82:	1c18      	adds	r0, r3, #0
 8004c84:	f7fe fdae 	bl	80037e4 <__aeabi_f2d>
 8004c88:	0002      	movs	r2, r0
 8004c8a:	000b      	movs	r3, r1
 8004c8c:	491d      	ldr	r1, [pc, #116]	@ (8004d04 <bme680_read_sensor_data+0xbac>)
 8004c8e:	2408      	movs	r4, #8
 8004c90:	1960      	adds	r0, r4, r5
 8004c92:	19c0      	adds	r0, r0, r7
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	000a      	movs	r2, r1
 8004c9a:	2180      	movs	r1, #128	@ 0x80
 8004c9c:	f00c feba 	bl	8011a14 <sniprintf>
            debug_print(debug_msg);
 8004ca0:	1963      	adds	r3, r4, r5
 8004ca2:	19db      	adds	r3, r3, r7
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f7fe fe91 	bl	80039cc <debug_print>
        if (rslt == BME68X_OK && n_data > 0) {
 8004caa:	e008      	b.n	8004cbe <bme680_read_sensor_data+0xb66>
        } else {
            debug_print("✗ Failed to read sensor data\r\n");
 8004cac:	4b16      	ldr	r3, [pc, #88]	@ (8004d08 <bme680_read_sensor_data+0xbb0>)
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f7fe fe8c 	bl	80039cc <debug_print>
 8004cb4:	e003      	b.n	8004cbe <bme680_read_sensor_data+0xb66>
        }
    } else {
        debug_print("✗ Failed to set forced mode\r\n");
 8004cb6:	4b15      	ldr	r3, [pc, #84]	@ (8004d0c <bme680_read_sensor_data+0xbb4>)
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7fe fe87 	bl	80039cc <debug_print>
    }
    
    return rslt;
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	33ff      	adds	r3, #255	@ 0xff
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	189b      	adds	r3, r3, r2
 8004cc6:	19db      	adds	r3, r3, r7
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	b25b      	sxtb	r3, r3
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b047      	add	sp, #284	@ 0x11c
 8004cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd4:	08014ec8 	.word	0x08014ec8
 8004cd8:	08014ecc 	.word	0x08014ecc
 8004cdc:	08014ed0 	.word	0x08014ed0
 8004ce0:	08014ed8 	.word	0x08014ed8
 8004ce4:	08014f08 	.word	0x08014f08
 8004ce8:	c2200000 	.word	0xc2200000
 8004cec:	42aa0000 	.word	0x42aa0000
 8004cf0:	46ea6000 	.word	0x46ea6000
 8004cf4:	47f42400 	.word	0x47f42400
 8004cf8:	42c80000 	.word	0x42c80000
 8004cfc:	08014f40 	.word	0x08014f40
 8004d00:	c1180000 	.word	0xc1180000
 8004d04:	08014f88 	.word	0x08014f88
 8004d08:	08014fb8 	.word	0x08014fb8
 8004d0c:	08014fdc 	.word	0x08014fdc

08004d10 <bme680_check_calibration_data>:
    HAL_UART_Transmit(&huart4, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

// Check BME680 calibration data
void bme680_check_calibration_data(void)
{
 8004d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d12:	b0b1      	sub	sp, #196	@ 0xc4
 8004d14:	af04      	add	r7, sp, #16
    uint8_t calib_data[41];
    char debug_msg[128];
    
    debug_print("Reading BME680 calibration data...\r\n");
 8004d16:	4b47      	ldr	r3, [pc, #284]	@ (8004e34 <bme680_check_calibration_data+0x124>)
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f7fe fe57 	bl	80039cc <debug_print>
    
    // Read calibration data from registers 0xE1 to 0xF0 and 0x8A to 0xA1
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0xE1, 
 8004d1e:	25af      	movs	r5, #175	@ 0xaf
 8004d20:	197c      	adds	r4, r7, r5
 8004d22:	4845      	ldr	r0, [pc, #276]	@ (8004e38 <bme680_check_calibration_data+0x128>)
 8004d24:	23fa      	movs	r3, #250	@ 0xfa
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	9302      	str	r3, [sp, #8]
 8004d2a:	2310      	movs	r3, #16
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	2684      	movs	r6, #132	@ 0x84
 8004d30:	19bb      	adds	r3, r7, r6
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2301      	movs	r3, #1
 8004d36:	22e1      	movs	r2, #225	@ 0xe1
 8004d38:	21ec      	movs	r1, #236	@ 0xec
 8004d3a:	f007 ff85 	bl	800cc48 <HAL_I2C_Mem_Read>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	7023      	strb	r3, [r4, #0]
                                                I2C_MEMADD_SIZE_8BIT, calib_data, 16, 1000);
    
    if (status == HAL_OK) {
 8004d42:	197b      	adds	r3, r7, r5
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d110      	bne.n	8004d6c <bme680_check_calibration_data+0x5c>
        status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0x8A, 
 8004d4a:	197c      	adds	r4, r7, r5
 8004d4c:	483a      	ldr	r0, [pc, #232]	@ (8004e38 <bme680_check_calibration_data+0x128>)
 8004d4e:	23fa      	movs	r3, #250	@ 0xfa
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	9302      	str	r3, [sp, #8]
 8004d54:	2319      	movs	r3, #25
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	19bb      	adds	r3, r7, r6
 8004d5a:	3310      	adds	r3, #16
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	228a      	movs	r2, #138	@ 0x8a
 8004d62:	21ec      	movs	r1, #236	@ 0xec
 8004d64:	f007 ff70 	bl	800cc48 <HAL_I2C_Mem_Read>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	7023      	strb	r3, [r4, #0]
                                  I2C_MEMADD_SIZE_8BIT, &calib_data[16], 25, 1000);
    }
    
    if (status == HAL_OK) {
 8004d6c:	23af      	movs	r3, #175	@ 0xaf
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d155      	bne.n	8004e22 <bme680_check_calibration_data+0x112>
        debug_print("✓ Calibration data read successfully\r\n");
 8004d76:	4b31      	ldr	r3, [pc, #196]	@ (8004e3c <bme680_check_calibration_data+0x12c>)
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7fe fe27 	bl	80039cc <debug_print>
        
        // Display some key calibration values
        snprintf(debug_msg, sizeof(debug_msg), 
                 "T1: 0x%04X, T2: 0x%04X, T3: 0x%02X\r\n",
                 (calib_data[1] << 8) | calib_data[0],
 8004d7e:	2084      	movs	r0, #132	@ 0x84
 8004d80:	183b      	adds	r3, r7, r0
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	183a      	adds	r2, r7, r0
 8004d88:	7812      	ldrb	r2, [r2, #0]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	0019      	movs	r1, r3
                 (calib_data[3] << 8) | calib_data[2],
 8004d8e:	0005      	movs	r5, r0
 8004d90:	197b      	adds	r3, r7, r5
 8004d92:	78db      	ldrb	r3, [r3, #3]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	197a      	adds	r2, r7, r5
 8004d98:	7892      	ldrb	r2, [r2, #2]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004d9a:	4313      	orrs	r3, r2
                 calib_data[3]);
 8004d9c:	197a      	adds	r2, r7, r5
 8004d9e:	78d2      	ldrb	r2, [r2, #3]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004da0:	0014      	movs	r4, r2
 8004da2:	4a27      	ldr	r2, [pc, #156]	@ (8004e40 <bme680_check_calibration_data+0x130>)
 8004da4:	1d38      	adds	r0, r7, #4
 8004da6:	9401      	str	r4, [sp, #4]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	000b      	movs	r3, r1
 8004dac:	2180      	movs	r1, #128	@ 0x80
 8004dae:	f00c fe31 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8004db2:	1d3b      	adds	r3, r7, #4
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7fe fe09 	bl	80039cc <debug_print>
        
        snprintf(debug_msg, sizeof(debug_msg), 
                 "P1: 0x%04X, P2: 0x%04X, P3: 0x%02X\r\n",
                 (calib_data[5] << 8) | calib_data[4],
 8004dba:	0028      	movs	r0, r5
 8004dbc:	183b      	adds	r3, r7, r0
 8004dbe:	795b      	ldrb	r3, [r3, #5]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	183a      	adds	r2, r7, r0
 8004dc4:	7912      	ldrb	r2, [r2, #4]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	0019      	movs	r1, r3
                 (calib_data[7] << 8) | calib_data[6],
 8004dca:	0005      	movs	r5, r0
 8004dcc:	197b      	adds	r3, r7, r5
 8004dce:	79db      	ldrb	r3, [r3, #7]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	197a      	adds	r2, r7, r5
 8004dd4:	7992      	ldrb	r2, [r2, #6]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004dd6:	4313      	orrs	r3, r2
                 calib_data[7]);
 8004dd8:	197a      	adds	r2, r7, r5
 8004dda:	79d2      	ldrb	r2, [r2, #7]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004ddc:	0014      	movs	r4, r2
 8004dde:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <bme680_check_calibration_data+0x134>)
 8004de0:	1d38      	adds	r0, r7, #4
 8004de2:	9401      	str	r4, [sp, #4]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	000b      	movs	r3, r1
 8004de8:	2180      	movs	r1, #128	@ 0x80
 8004dea:	f00c fe13 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7fe fdeb 	bl	80039cc <debug_print>
        
        snprintf(debug_msg, sizeof(debug_msg), 
                 "H1: 0x%02X, H2: 0x%04X\r\n",
                 calib_data[25],
 8004df6:	002a      	movs	r2, r5
 8004df8:	18bb      	adds	r3, r7, r2
 8004dfa:	7e5b      	ldrb	r3, [r3, #25]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004dfc:	0019      	movs	r1, r3
                 (calib_data[26] << 8) | calib_data[27]);
 8004dfe:	18bb      	adds	r3, r7, r2
 8004e00:	7e9b      	ldrb	r3, [r3, #26]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	18ba      	adds	r2, r7, r2
 8004e06:	7ed2      	ldrb	r2, [r2, #27]
        snprintf(debug_msg, sizeof(debug_msg), 
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8004e48 <bme680_check_calibration_data+0x138>)
 8004e0c:	1d38      	adds	r0, r7, #4
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	000b      	movs	r3, r1
 8004e12:	2180      	movs	r1, #128	@ 0x80
 8004e14:	f00c fdfe 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8004e18:	1d3b      	adds	r3, r7, #4
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7fe fdd6 	bl	80039cc <debug_print>
    } else {
        debug_print("✗ Failed to read calibration data\r\n");
    }
}
 8004e20:	e003      	b.n	8004e2a <bme680_check_calibration_data+0x11a>
        debug_print("✗ Failed to read calibration data\r\n");
 8004e22:	4b0a      	ldr	r3, [pc, #40]	@ (8004e4c <bme680_check_calibration_data+0x13c>)
 8004e24:	0018      	movs	r0, r3
 8004e26:	f7fe fdd1 	bl	80039cc <debug_print>
}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b02d      	add	sp, #180	@ 0xb4
 8004e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	08015038 	.word	0x08015038
 8004e38:	200002e4 	.word	0x200002e4
 8004e3c:	08015060 	.word	0x08015060
 8004e40:	0801508c 	.word	0x0801508c
 8004e44:	080150b4 	.word	0x080150b4
 8004e48:	080150dc 	.word	0x080150dc
 8004e4c:	080150f8 	.word	0x080150f8

08004e50 <bme680_read_raw_adc_values>:

// Read raw ADC values directly from BME680
void bme680_read_raw_adc_values(void)
{
 8004e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e52:	b0ad      	sub	sp, #180	@ 0xb4
 8004e54:	af04      	add	r7, sp, #16
    uint8_t raw_data[8];
    char debug_msg[128];
    
    debug_print("Reading raw BME680 ADC values...\r\n");
 8004e56:	4b55      	ldr	r3, [pc, #340]	@ (8004fac <bme680_read_raw_adc_values+0x15c>)
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7fe fdb7 	bl	80039cc <debug_print>
    
    // Read raw temperature, pressure, and humidity ADC values
    // Temperature: registers 0x22-0x24
    // Pressure: registers 0x1F-0x21  
    // Humidity: registers 0x25-0x26
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0x1F, 
 8004e5e:	269f      	movs	r6, #159	@ 0x9f
 8004e60:	19bc      	adds	r4, r7, r6
 8004e62:	4853      	ldr	r0, [pc, #332]	@ (8004fb0 <bme680_read_raw_adc_values+0x160>)
 8004e64:	23fa      	movs	r3, #250	@ 0xfa
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	9302      	str	r3, [sp, #8]
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2584      	movs	r5, #132	@ 0x84
 8004e70:	197b      	adds	r3, r7, r5
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2301      	movs	r3, #1
 8004e76:	221f      	movs	r2, #31
 8004e78:	21ec      	movs	r1, #236	@ 0xec
 8004e7a:	f007 fee5 	bl	800cc48 <HAL_I2C_Mem_Read>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	7023      	strb	r3, [r4, #0]
                                                I2C_MEMADD_SIZE_8BIT, raw_data, 8, 1000);
    
    if (status == HAL_OK) {
 8004e82:	0034      	movs	r4, r6
 8004e84:	193b      	adds	r3, r7, r4
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d000      	beq.n	8004e8e <bme680_read_raw_adc_values+0x3e>
 8004e8c:	e086      	b.n	8004f9c <bme680_read_raw_adc_values+0x14c>
        // Extract raw ADC values
        uint32_t raw_temp = ((uint32_t)raw_data[3] << 12) | ((uint32_t)raw_data[4] << 4) | ((uint32_t)raw_data[5] >> 4);
 8004e8e:	0029      	movs	r1, r5
 8004e90:	187b      	adds	r3, r7, r1
 8004e92:	78db      	ldrb	r3, [r3, #3]
 8004e94:	031a      	lsls	r2, r3, #12
 8004e96:	187b      	adds	r3, r7, r1
 8004e98:	791b      	ldrb	r3, [r3, #4]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	187a      	adds	r2, r7, r1
 8004ea0:	7952      	ldrb	r2, [r2, #5]
 8004ea2:	0912      	lsrs	r2, r2, #4
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	2098      	movs	r0, #152	@ 0x98
 8004eaa:	183a      	adds	r2, r7, r0
 8004eac:	6013      	str	r3, [r2, #0]
        uint32_t raw_press = ((uint32_t)raw_data[0] << 12) | ((uint32_t)raw_data[1] << 4) | ((uint32_t)raw_data[2] >> 4);
 8004eae:	187b      	adds	r3, r7, r1
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	031a      	lsls	r2, r3, #12
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	187a      	adds	r2, r7, r1
 8004ebe:	7892      	ldrb	r2, [r2, #2]
 8004ec0:	0912      	lsrs	r2, r2, #4
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	2594      	movs	r5, #148	@ 0x94
 8004ec8:	197a      	adds	r2, r7, r5
 8004eca:	6013      	str	r3, [r2, #0]
        uint16_t raw_hum = ((uint16_t)raw_data[6] << 8) | raw_data[7];
 8004ecc:	187b      	adds	r3, r7, r1
 8004ece:	799b      	ldrb	r3, [r3, #6]
 8004ed0:	b21b      	sxth	r3, r3
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	b21a      	sxth	r2, r3
 8004ed6:	187b      	adds	r3, r7, r1
 8004ed8:	79db      	ldrb	r3, [r3, #7]
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	4313      	orrs	r3, r2
 8004ede:	b21a      	sxth	r2, r3
 8004ee0:	2192      	movs	r1, #146	@ 0x92
 8004ee2:	187b      	adds	r3, r7, r1
 8004ee4:	801a      	strh	r2, [r3, #0]
        
        snprintf(debug_msg, sizeof(debug_msg), 
 8004ee6:	187b      	adds	r3, r7, r1
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	183a      	adds	r2, r7, r0
 8004eec:	6811      	ldr	r1, [r2, #0]
 8004eee:	4a31      	ldr	r2, [pc, #196]	@ (8004fb4 <bme680_read_raw_adc_values+0x164>)
 8004ef0:	1d38      	adds	r0, r7, #4
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	197b      	adds	r3, r7, r5
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	000b      	movs	r3, r1
 8004efc:	2180      	movs	r1, #128	@ 0x80
 8004efe:	f00c fd89 	bl	8011a14 <sniprintf>
                 "Raw ADC values - Temp: %lu, Press: %lu, Hum: %u\r\n",
                 raw_temp, raw_press, raw_hum);
        debug_print(debug_msg);
 8004f02:	1d3b      	adds	r3, r7, #4
 8004f04:	0018      	movs	r0, r3
 8004f06:	f7fe fd61 	bl	80039cc <debug_print>
        
        // Also read the calibration data to understand the conversion
        uint8_t calib_temp[3];
        status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0xE1, 
 8004f0a:	0025      	movs	r5, r4
 8004f0c:	193c      	adds	r4, r7, r4
 8004f0e:	4828      	ldr	r0, [pc, #160]	@ (8004fb0 <bme680_read_raw_adc_values+0x160>)
 8004f10:	23fa      	movs	r3, #250	@ 0xfa
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	9302      	str	r3, [sp, #8]
 8004f16:	2303      	movs	r3, #3
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	003b      	movs	r3, r7
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2301      	movs	r3, #1
 8004f20:	22e1      	movs	r2, #225	@ 0xe1
 8004f22:	21ec      	movs	r1, #236	@ 0xec
 8004f24:	f007 fe90 	bl	800cc48 <HAL_I2C_Mem_Read>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	7023      	strb	r3, [r4, #0]
                                  I2C_MEMADD_SIZE_8BIT, calib_temp, 3, 1000);
        
        if (status == HAL_OK) {
 8004f2c:	197b      	adds	r3, r7, r5
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d137      	bne.n	8004fa4 <bme680_read_raw_adc_values+0x154>
            uint16_t T1 = (calib_temp[1] << 8) | calib_temp[0];
 8004f34:	003b      	movs	r3, r7
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	b21b      	sxth	r3, r3
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	b21a      	sxth	r2, r3
 8004f3e:	003b      	movs	r3, r7
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b21b      	sxth	r3, r3
 8004f44:	4313      	orrs	r3, r2
 8004f46:	b21a      	sxth	r2, r3
 8004f48:	2090      	movs	r0, #144	@ 0x90
 8004f4a:	183b      	adds	r3, r7, r0
 8004f4c:	801a      	strh	r2, [r3, #0]
            int16_t T2 = (int16_t)((calib_temp[3] << 8) | calib_temp[2]);
 8004f4e:	003b      	movs	r3, r7
 8004f50:	78db      	ldrb	r3, [r3, #3]
 8004f52:	b21b      	sxth	r3, r3
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	b219      	sxth	r1, r3
 8004f58:	003b      	movs	r3, r7
 8004f5a:	789b      	ldrb	r3, [r3, #2]
 8004f5c:	b21a      	sxth	r2, r3
 8004f5e:	258e      	movs	r5, #142	@ 0x8e
 8004f60:	197b      	adds	r3, r7, r5
 8004f62:	430a      	orrs	r2, r1
 8004f64:	801a      	strh	r2, [r3, #0]
            int8_t T3 = (int8_t)calib_temp[4];
 8004f66:	003b      	movs	r3, r7
 8004f68:	791a      	ldrb	r2, [r3, #4]
 8004f6a:	218d      	movs	r1, #141	@ 0x8d
 8004f6c:	187b      	adds	r3, r7, r1
 8004f6e:	701a      	strb	r2, [r3, #0]
            
            snprintf(debug_msg, sizeof(debug_msg), 
 8004f70:	183b      	adds	r3, r7, r0
 8004f72:	881c      	ldrh	r4, [r3, #0]
 8004f74:	197b      	adds	r3, r7, r5
 8004f76:	2200      	movs	r2, #0
 8004f78:	5e9b      	ldrsh	r3, [r3, r2]
 8004f7a:	187a      	adds	r2, r7, r1
 8004f7c:	7812      	ldrb	r2, [r2, #0]
 8004f7e:	b252      	sxtb	r2, r2
 8004f80:	490d      	ldr	r1, [pc, #52]	@ (8004fb8 <bme680_read_raw_adc_values+0x168>)
 8004f82:	1d38      	adds	r0, r7, #4
 8004f84:	9201      	str	r2, [sp, #4]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	0023      	movs	r3, r4
 8004f8a:	000a      	movs	r2, r1
 8004f8c:	2180      	movs	r1, #128	@ 0x80
 8004f8e:	f00c fd41 	bl	8011a14 <sniprintf>
                     "Temp calibration - T1: %u, T2: %d, T3: %d\r\n",
                     T1, T2, T3);
            debug_print(debug_msg);
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7fe fd19 	bl	80039cc <debug_print>
        }
    } else {
        debug_print("✗ Failed to read raw ADC values\r\n");
    }
}
 8004f9a:	e003      	b.n	8004fa4 <bme680_read_raw_adc_values+0x154>
        debug_print("✗ Failed to read raw ADC values\r\n");
 8004f9c:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <bme680_read_raw_adc_values+0x16c>)
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f7fe fd14 	bl	80039cc <debug_print>
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b029      	add	sp, #164	@ 0xa4
 8004faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fac:	08015120 	.word	0x08015120
 8004fb0:	200002e4 	.word	0x200002e4
 8004fb4:	08015144 	.word	0x08015144
 8004fb8:	08015178 	.word	0x08015178
 8004fbc:	080151a4 	.word	0x080151a4

08004fc0 <bme680_read_raw_registers>:

// Simple direct register reading test
void bme680_read_raw_registers(void)
{
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	b0ab      	sub	sp, #172	@ 0xac
 8004fc4:	af04      	add	r7, sp, #16
    uint8_t raw_data[8];
    char debug_msg[128];
    
    debug_print("Reading raw BME680 registers...\r\n");
 8004fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8005100 <bme680_read_raw_registers+0x140>)
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f7fe fcff 	bl	80039cc <debug_print>
    
    // Read temperature, pressure, and humidity registers (0x22-0x26)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, BME68X_I2C_ADDR_LOW << 1, 0x22, 
 8004fce:	2697      	movs	r6, #151	@ 0x97
 8004fd0:	19bc      	adds	r4, r7, r6
 8004fd2:	484c      	ldr	r0, [pc, #304]	@ (8005104 <bme680_read_raw_registers+0x144>)
 8004fd4:	23fa      	movs	r3, #250	@ 0xfa
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	9302      	str	r3, [sp, #8]
 8004fda:	2308      	movs	r3, #8
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	2580      	movs	r5, #128	@ 0x80
 8004fe0:	197b      	adds	r3, r7, r5
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	2222      	movs	r2, #34	@ 0x22
 8004fe8:	21ec      	movs	r1, #236	@ 0xec
 8004fea:	f007 fe2d 	bl	800cc48 <HAL_I2C_Mem_Read>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	7023      	strb	r3, [r4, #0]
                                                I2C_MEMADD_SIZE_8BIT, raw_data, 8, 1000);
    
    if (status == HAL_OK) {
 8004ff2:	19bb      	adds	r3, r7, r6
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d179      	bne.n	80050ee <bme680_read_raw_registers+0x12e>
        snprintf(debug_msg, sizeof(debug_msg), 
                 "Raw registers: 0x22=0x%02X, 0x23=0x%02X, 0x24=0x%02X, 0x25=0x%02X, 0x26=0x%02X\r\n",
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 8004ffa:	002a      	movs	r2, r5
 8004ffc:	18bb      	adds	r3, r7, r2
 8004ffe:	781b      	ldrb	r3, [r3, #0]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005000:	001e      	movs	r6, r3
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 8005002:	18bb      	adds	r3, r7, r2
 8005004:	785b      	ldrb	r3, [r3, #1]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005006:	0019      	movs	r1, r3
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 8005008:	18bb      	adds	r3, r7, r2
 800500a:	789b      	ldrb	r3, [r3, #2]
        snprintf(debug_msg, sizeof(debug_msg), 
 800500c:	001c      	movs	r4, r3
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 800500e:	18bb      	adds	r3, r7, r2
 8005010:	78db      	ldrb	r3, [r3, #3]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005012:	001d      	movs	r5, r3
                 raw_data[0], raw_data[1], raw_data[2], raw_data[3], raw_data[4]);
 8005014:	18bb      	adds	r3, r7, r2
 8005016:	791b      	ldrb	r3, [r3, #4]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005018:	4a3b      	ldr	r2, [pc, #236]	@ (8005108 <bme680_read_raw_registers+0x148>)
 800501a:	0038      	movs	r0, r7
 800501c:	9303      	str	r3, [sp, #12]
 800501e:	9502      	str	r5, [sp, #8]
 8005020:	9401      	str	r4, [sp, #4]
 8005022:	9100      	str	r1, [sp, #0]
 8005024:	0033      	movs	r3, r6
 8005026:	2180      	movs	r1, #128	@ 0x80
 8005028:	f00c fcf4 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 800502c:	003b      	movs	r3, r7
 800502e:	0018      	movs	r0, r3
 8005030:	f7fe fccc 	bl	80039cc <debug_print>
        
        // Calculate raw temperature (24-bit value)
        uint32_t temp_raw = ((uint32_t)raw_data[0] << 12) | ((uint32_t)raw_data[1] << 4) | ((uint32_t)raw_data[2] >> 4);
 8005034:	2480      	movs	r4, #128	@ 0x80
 8005036:	193b      	adds	r3, r7, r4
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	031a      	lsls	r2, r3, #12
 800503c:	193b      	adds	r3, r7, r4
 800503e:	785b      	ldrb	r3, [r3, #1]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	4313      	orrs	r3, r2
 8005044:	193a      	adds	r2, r7, r4
 8005046:	7892      	ldrb	r2, [r2, #2]
 8005048:	0912      	lsrs	r2, r2, #4
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	4313      	orrs	r3, r2
 800504e:	2290      	movs	r2, #144	@ 0x90
 8005050:	18b9      	adds	r1, r7, r2
 8005052:	600b      	str	r3, [r1, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Raw temperature value: 0x%06lX (%lu)\r\n", temp_raw, temp_raw);
 8005054:	0013      	movs	r3, r2
 8005056:	18fa      	adds	r2, r7, r3
 8005058:	6811      	ldr	r1, [r2, #0]
 800505a:	4a2c      	ldr	r2, [pc, #176]	@ (800510c <bme680_read_raw_registers+0x14c>)
 800505c:	0038      	movs	r0, r7
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	000b      	movs	r3, r1
 8005066:	2180      	movs	r1, #128	@ 0x80
 8005068:	f00c fcd4 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 800506c:	003b      	movs	r3, r7
 800506e:	0018      	movs	r0, r3
 8005070:	f7fe fcac 	bl	80039cc <debug_print>
        
        // Calculate raw pressure (24-bit value)
        uint32_t press_raw = ((uint32_t)raw_data[3] << 12) | ((uint32_t)raw_data[4] << 4) | ((uint32_t)raw_data[5] >> 4);
 8005074:	193b      	adds	r3, r7, r4
 8005076:	78db      	ldrb	r3, [r3, #3]
 8005078:	031a      	lsls	r2, r3, #12
 800507a:	193b      	adds	r3, r7, r4
 800507c:	791b      	ldrb	r3, [r3, #4]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4313      	orrs	r3, r2
 8005082:	193a      	adds	r2, r7, r4
 8005084:	7952      	ldrb	r2, [r2, #5]
 8005086:	0912      	lsrs	r2, r2, #4
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	4313      	orrs	r3, r2
 800508c:	228c      	movs	r2, #140	@ 0x8c
 800508e:	18b9      	adds	r1, r7, r2
 8005090:	600b      	str	r3, [r1, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Raw pressure value: 0x%06lX (%lu)\r\n", press_raw, press_raw);
 8005092:	0013      	movs	r3, r2
 8005094:	18fa      	adds	r2, r7, r3
 8005096:	6811      	ldr	r1, [r2, #0]
 8005098:	4a1d      	ldr	r2, [pc, #116]	@ (8005110 <bme680_read_raw_registers+0x150>)
 800509a:	0038      	movs	r0, r7
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	000b      	movs	r3, r1
 80050a4:	2180      	movs	r1, #128	@ 0x80
 80050a6:	f00c fcb5 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 80050aa:	003b      	movs	r3, r7
 80050ac:	0018      	movs	r0, r3
 80050ae:	f7fe fc8d 	bl	80039cc <debug_print>
        
        // Calculate raw humidity (16-bit value)
        uint16_t hum_raw = ((uint16_t)raw_data[6] << 8) | raw_data[7];
 80050b2:	193b      	adds	r3, r7, r4
 80050b4:	799b      	ldrb	r3, [r3, #6]
 80050b6:	b21b      	sxth	r3, r3
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	b21a      	sxth	r2, r3
 80050bc:	193b      	adds	r3, r7, r4
 80050be:	79db      	ldrb	r3, [r3, #7]
 80050c0:	b21b      	sxth	r3, r3
 80050c2:	4313      	orrs	r3, r2
 80050c4:	b21a      	sxth	r2, r3
 80050c6:	218a      	movs	r1, #138	@ 0x8a
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	801a      	strh	r2, [r3, #0]
        snprintf(debug_msg, sizeof(debug_msg), "Raw humidity value: 0x%04X (%u)\r\n", hum_raw, hum_raw);
 80050cc:	000a      	movs	r2, r1
 80050ce:	18bb      	adds	r3, r7, r2
 80050d0:	8819      	ldrh	r1, [r3, #0]
 80050d2:	18bb      	adds	r3, r7, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005114 <bme680_read_raw_registers+0x154>)
 80050d8:	0038      	movs	r0, r7
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	000b      	movs	r3, r1
 80050de:	2180      	movs	r1, #128	@ 0x80
 80050e0:	f00c fc98 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 80050e4:	003b      	movs	r3, r7
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7fe fc70 	bl	80039cc <debug_print>
    } else {
        debug_print("Failed to read raw registers\r\n");
    }
}
 80050ec:	e003      	b.n	80050f6 <bme680_read_raw_registers+0x136>
        debug_print("Failed to read raw registers\r\n");
 80050ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005118 <bme680_read_raw_registers+0x158>)
 80050f0:	0018      	movs	r0, r3
 80050f2:	f7fe fc6b 	bl	80039cc <debug_print>
}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b027      	add	sp, #156	@ 0x9c
 80050fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fe:	46c0      	nop			@ (mov r8, r8)
 8005100:	080151c8 	.word	0x080151c8
 8005104:	200002e4 	.word	0x200002e4
 8005108:	080151ec 	.word	0x080151ec
 800510c:	08015240 	.word	0x08015240
 8005110:	08015268 	.word	0x08015268
 8005114:	0801528c 	.word	0x0801528c
 8005118:	080152b0 	.word	0x080152b0

0800511c <bme680_test_sensor>:

// Test BME680 sensor
void bme680_test_sensor(void)
{
 800511c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511e:	b0e7      	sub	sp, #412	@ 0x19c
 8005120:	af06      	add	r7, sp, #24
    struct bme68x_data sensor_data;
    char test_msg[256];
    
    debug_print("Testing BME680 sensor...\r\n");
 8005122:	4bdf      	ldr	r3, [pc, #892]	@ (80054a0 <bme680_test_sensor+0x384>)
 8005124:	0018      	movs	r0, r3
 8005126:	f7fe fc51 	bl	80039cc <debug_print>
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 800512a:	2484      	movs	r4, #132	@ 0x84
 800512c:	0064      	lsls	r4, r4, #1
 800512e:	193b      	adds	r3, r7, r4
 8005130:	0018      	movs	r0, r3
 8005132:	f7ff f811 	bl	8004158 <bme680_read_sensor_data>
 8005136:	1e03      	subs	r3, r0, #0
 8005138:	d000      	beq.n	800513c <bme680_test_sensor+0x20>
 800513a:	e300      	b.n	800573e <bme680_test_sensor+0x622>
        // Decode all sensor values
        uint32_t temp_mem = *(uint32_t*)&sensor_data.temperature;
 800513c:	193b      	adds	r3, r7, r4
 800513e:	3308      	adds	r3, #8
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	22a8      	movs	r2, #168	@ 0xa8
 8005144:	0052      	lsls	r2, r2, #1
 8005146:	2008      	movs	r0, #8
 8005148:	1811      	adds	r1, r2, r0
 800514a:	19c9      	adds	r1, r1, r7
 800514c:	600b      	str	r3, [r1, #0]
        uint32_t press_mem = *(uint32_t*)&sensor_data.pressure;
 800514e:	193b      	adds	r3, r7, r4
 8005150:	330c      	adds	r3, #12
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	21a6      	movs	r1, #166	@ 0xa6
 8005156:	0049      	lsls	r1, r1, #1
 8005158:	1809      	adds	r1, r1, r0
 800515a:	19c9      	adds	r1, r1, r7
 800515c:	600b      	str	r3, [r1, #0]
        uint32_t hum_mem = *(uint32_t*)&sensor_data.humidity;
 800515e:	193b      	adds	r3, r7, r4
 8005160:	3310      	adds	r3, #16
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	21a4      	movs	r1, #164	@ 0xa4
 8005166:	0049      	lsls	r1, r1, #1
 8005168:	1809      	adds	r1, r1, r0
 800516a:	19c9      	adds	r1, r1, r7
 800516c:	600b      	str	r3, [r1, #0]
        
        float temp_decoded = 0.0f, press_decoded = 0.0f, hum_decoded = 0.0f;
 800516e:	2300      	movs	r3, #0
 8005170:	21ba      	movs	r1, #186	@ 0xba
 8005172:	0049      	lsls	r1, r1, #1
 8005174:	1809      	adds	r1, r1, r0
 8005176:	19c9      	adds	r1, r1, r7
 8005178:	600b      	str	r3, [r1, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	21b8      	movs	r1, #184	@ 0xb8
 800517e:	0049      	lsls	r1, r1, #1
 8005180:	1809      	adds	r1, r1, r0
 8005182:	19c9      	adds	r1, r1, r7
 8005184:	600b      	str	r3, [r1, #0]
 8005186:	2300      	movs	r3, #0
 8005188:	21b6      	movs	r1, #182	@ 0xb6
 800518a:	0049      	lsls	r1, r1, #1
 800518c:	1809      	adds	r1, r1, r0
 800518e:	19c9      	adds	r1, r1, r7
 8005190:	600b      	str	r3, [r1, #0]
        
        // Decode temperature
        uint32_t temp_sign = (temp_mem >> 31) & 0x1;
 8005192:	1813      	adds	r3, r2, r0
 8005194:	19db      	adds	r3, r3, r7
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	0fdb      	lsrs	r3, r3, #31
 800519a:	21a2      	movs	r1, #162	@ 0xa2
 800519c:	0049      	lsls	r1, r1, #1
 800519e:	1809      	adds	r1, r1, r0
 80051a0:	19c9      	adds	r1, r1, r7
 80051a2:	600b      	str	r3, [r1, #0]
        uint32_t temp_exp = (temp_mem >> 23) & 0xFF;
 80051a4:	0011      	movs	r1, r2
 80051a6:	1813      	adds	r3, r2, r0
 80051a8:	19db      	adds	r3, r3, r7
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	0ddb      	lsrs	r3, r3, #23
 80051ae:	22ff      	movs	r2, #255	@ 0xff
 80051b0:	4013      	ands	r3, r2
 80051b2:	22a0      	movs	r2, #160	@ 0xa0
 80051b4:	0052      	lsls	r2, r2, #1
 80051b6:	0004      	movs	r4, r0
 80051b8:	1810      	adds	r0, r2, r0
 80051ba:	19c0      	adds	r0, r0, r7
 80051bc:	6003      	str	r3, [r0, #0]
        uint32_t temp_mant = temp_mem & 0x7FFFFF;
 80051be:	0020      	movs	r0, r4
 80051c0:	180b      	adds	r3, r1, r0
 80051c2:	19db      	adds	r3, r3, r7
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	025b      	lsls	r3, r3, #9
 80051c8:	0a5b      	lsrs	r3, r3, #9
 80051ca:	219e      	movs	r1, #158	@ 0x9e
 80051cc:	0049      	lsls	r1, r1, #1
 80051ce:	1809      	adds	r1, r1, r0
 80051d0:	19c9      	adds	r1, r1, r7
 80051d2:	600b      	str	r3, [r1, #0]
        
        if (temp_exp != 0 && temp_exp != 0xFF) {
 80051d4:	0001      	movs	r1, r0
 80051d6:	1853      	adds	r3, r2, r1
 80051d8:	19db      	adds	r3, r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d100      	bne.n	80051e2 <bme680_test_sensor+0xc6>
 80051e0:	e0b8      	b.n	8005354 <bme680_test_sensor+0x238>
 80051e2:	1853      	adds	r3, r2, r1
 80051e4:	19db      	adds	r3, r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2bff      	cmp	r3, #255	@ 0xff
 80051ea:	d100      	bne.n	80051ee <bme680_test_sensor+0xd2>
 80051ec:	e0b2      	b.n	8005354 <bme680_test_sensor+0x238>
            int temp_exp_val = (int)temp_exp - 127;
 80051ee:	1853      	adds	r3, r2, r1
 80051f0:	19db      	adds	r3, r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3b7f      	subs	r3, #127	@ 0x7f
 80051f6:	229c      	movs	r2, #156	@ 0x9c
 80051f8:	0052      	lsls	r2, r2, #1
 80051fa:	1852      	adds	r2, r2, r1
 80051fc:	19d2      	adds	r2, r2, r7
 80051fe:	6013      	str	r3, [r2, #0]
            float temp_result = 1.0f;
 8005200:	23fe      	movs	r3, #254	@ 0xfe
 8005202:	059b      	lsls	r3, r3, #22
 8005204:	22b4      	movs	r2, #180	@ 0xb4
 8005206:	0052      	lsls	r2, r2, #1
 8005208:	1852      	adds	r2, r2, r1
 800520a:	19d2      	adds	r2, r2, r7
 800520c:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 800520e:	2316      	movs	r3, #22
 8005210:	22b2      	movs	r2, #178	@ 0xb2
 8005212:	0052      	lsls	r2, r2, #1
 8005214:	1852      	adds	r2, r2, r1
 8005216:	19d2      	adds	r2, r2, r7
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e038      	b.n	800528e <bme680_test_sensor+0x172>
                if (temp_mant & (1 << i)) {
 800521c:	2201      	movs	r2, #1
 800521e:	21b2      	movs	r1, #178	@ 0xb2
 8005220:	0049      	lsls	r1, r1, #1
 8005222:	2508      	movs	r5, #8
 8005224:	194b      	adds	r3, r1, r5
 8005226:	19db      	adds	r3, r3, r7
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	409a      	lsls	r2, r3
 800522c:	0013      	movs	r3, r2
 800522e:	001a      	movs	r2, r3
 8005230:	239e      	movs	r3, #158	@ 0x9e
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	195b      	adds	r3, r3, r5
 8005236:	19db      	adds	r3, r3, r7
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4013      	ands	r3, r2
 800523c:	d01d      	beq.n	800527a <bme680_test_sensor+0x15e>
                    temp_result += 1.0f / (1 << (23 - i));
 800523e:	194b      	adds	r3, r1, r5
 8005240:	19db      	adds	r3, r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2217      	movs	r2, #23
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2201      	movs	r2, #1
 800524a:	409a      	lsls	r2, r3
 800524c:	0013      	movs	r3, r2
 800524e:	0018      	movs	r0, r3
 8005250:	f7fc fa92 	bl	8001778 <__aeabi_i2f>
 8005254:	1c03      	adds	r3, r0, #0
 8005256:	1c19      	adds	r1, r3, #0
 8005258:	20fe      	movs	r0, #254	@ 0xfe
 800525a:	0580      	lsls	r0, r0, #22
 800525c:	f7fb fcca 	bl	8000bf4 <__aeabi_fdiv>
 8005260:	1c03      	adds	r3, r0, #0
 8005262:	1c19      	adds	r1, r3, #0
 8005264:	24b4      	movs	r4, #180	@ 0xb4
 8005266:	0064      	lsls	r4, r4, #1
 8005268:	1963      	adds	r3, r4, r5
 800526a:	19db      	adds	r3, r3, r7
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	f7fb facf 	bl	8000810 <__aeabi_fadd>
 8005272:	1c03      	adds	r3, r0, #0
 8005274:	1962      	adds	r2, r4, r5
 8005276:	19d2      	adds	r2, r2, r7
 8005278:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 800527a:	22b2      	movs	r2, #178	@ 0xb2
 800527c:	0052      	lsls	r2, r2, #1
 800527e:	2108      	movs	r1, #8
 8005280:	1853      	adds	r3, r2, r1
 8005282:	19db      	adds	r3, r3, r7
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3b01      	subs	r3, #1
 8005288:	1852      	adds	r2, r2, r1
 800528a:	19d2      	adds	r2, r2, r7
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	23b2      	movs	r3, #178	@ 0xb2
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	2508      	movs	r5, #8
 8005294:	195b      	adds	r3, r3, r5
 8005296:	19db      	adds	r3, r3, r7
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	dabe      	bge.n	800521c <bme680_test_sensor+0x100>
                }
            }
            if (temp_exp_val > 0) temp_result *= (1 << temp_exp_val);
 800529e:	219c      	movs	r1, #156	@ 0x9c
 80052a0:	0049      	lsls	r1, r1, #1
 80052a2:	194b      	adds	r3, r1, r5
 80052a4:	19db      	adds	r3, r3, r7
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dd16      	ble.n	80052da <bme680_test_sensor+0x1be>
 80052ac:	2201      	movs	r2, #1
 80052ae:	194b      	adds	r3, r1, r5
 80052b0:	19db      	adds	r3, r3, r7
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	409a      	lsls	r2, r3
 80052b6:	0013      	movs	r3, r2
 80052b8:	0018      	movs	r0, r3
 80052ba:	f7fc fa5d 	bl	8001778 <__aeabi_i2f>
 80052be:	1c03      	adds	r3, r0, #0
 80052c0:	1c19      	adds	r1, r3, #0
 80052c2:	24b4      	movs	r4, #180	@ 0xb4
 80052c4:	0064      	lsls	r4, r4, #1
 80052c6:	1963      	adds	r3, r4, r5
 80052c8:	19db      	adds	r3, r3, r7
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	f7fb fe60 	bl	8000f90 <__aeabi_fmul>
 80052d0:	1c03      	adds	r3, r0, #0
 80052d2:	1962      	adds	r2, r4, r5
 80052d4:	19d2      	adds	r2, r2, r7
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	e01e      	b.n	8005318 <bme680_test_sensor+0x1fc>
            else if (temp_exp_val < 0) temp_result /= (1 << (-temp_exp_val));
 80052da:	229c      	movs	r2, #156	@ 0x9c
 80052dc:	0052      	lsls	r2, r2, #1
 80052de:	2508      	movs	r5, #8
 80052e0:	1953      	adds	r3, r2, r5
 80052e2:	19db      	adds	r3, r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	da16      	bge.n	8005318 <bme680_test_sensor+0x1fc>
 80052ea:	1953      	adds	r3, r2, r5
 80052ec:	19db      	adds	r3, r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	425b      	negs	r3, r3
 80052f2:	2201      	movs	r2, #1
 80052f4:	409a      	lsls	r2, r3
 80052f6:	0013      	movs	r3, r2
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7fc fa3d 	bl	8001778 <__aeabi_i2f>
 80052fe:	1c03      	adds	r3, r0, #0
 8005300:	1c19      	adds	r1, r3, #0
 8005302:	24b4      	movs	r4, #180	@ 0xb4
 8005304:	0064      	lsls	r4, r4, #1
 8005306:	1963      	adds	r3, r4, r5
 8005308:	19db      	adds	r3, r3, r7
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	f7fb fc72 	bl	8000bf4 <__aeabi_fdiv>
 8005310:	1c03      	adds	r3, r0, #0
 8005312:	1962      	adds	r2, r4, r5
 8005314:	19d2      	adds	r2, r2, r7
 8005316:	6013      	str	r3, [r2, #0]
            if (temp_sign) temp_result = -temp_result;
 8005318:	23a2      	movs	r3, #162	@ 0xa2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	2008      	movs	r0, #8
 800531e:	181b      	adds	r3, r3, r0
 8005320:	19db      	adds	r3, r3, r7
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <bme680_test_sensor+0x222>
 8005328:	21b4      	movs	r1, #180	@ 0xb4
 800532a:	0049      	lsls	r1, r1, #1
 800532c:	180b      	adds	r3, r1, r0
 800532e:	19db      	adds	r3, r3, r7
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2280      	movs	r2, #128	@ 0x80
 8005334:	0612      	lsls	r2, r2, #24
 8005336:	4053      	eors	r3, r2
 8005338:	180a      	adds	r2, r1, r0
 800533a:	19d2      	adds	r2, r2, r7
 800533c:	6013      	str	r3, [r2, #0]
            temp_decoded = temp_result;
 800533e:	23b4      	movs	r3, #180	@ 0xb4
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	2108      	movs	r1, #8
 8005344:	185b      	adds	r3, r3, r1
 8005346:	19db      	adds	r3, r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	22ba      	movs	r2, #186	@ 0xba
 800534c:	0052      	lsls	r2, r2, #1
 800534e:	1852      	adds	r2, r2, r1
 8005350:	19d2      	adds	r2, r2, r7
 8005352:	6013      	str	r3, [r2, #0]
        }
        
        // Decode pressure
        uint32_t press_sign = (press_mem >> 31) & 0x1;
 8005354:	21a6      	movs	r1, #166	@ 0xa6
 8005356:	0049      	lsls	r1, r1, #1
 8005358:	2008      	movs	r0, #8
 800535a:	180b      	adds	r3, r1, r0
 800535c:	19db      	adds	r3, r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	0fdb      	lsrs	r3, r3, #31
 8005362:	229a      	movs	r2, #154	@ 0x9a
 8005364:	0052      	lsls	r2, r2, #1
 8005366:	1812      	adds	r2, r2, r0
 8005368:	19d2      	adds	r2, r2, r7
 800536a:	6013      	str	r3, [r2, #0]
        uint32_t press_exp = (press_mem >> 23) & 0xFF;
 800536c:	180b      	adds	r3, r1, r0
 800536e:	19db      	adds	r3, r3, r7
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	0ddb      	lsrs	r3, r3, #23
 8005374:	22ff      	movs	r2, #255	@ 0xff
 8005376:	4013      	ands	r3, r2
 8005378:	2298      	movs	r2, #152	@ 0x98
 800537a:	0052      	lsls	r2, r2, #1
 800537c:	0004      	movs	r4, r0
 800537e:	1810      	adds	r0, r2, r0
 8005380:	19c0      	adds	r0, r0, r7
 8005382:	6003      	str	r3, [r0, #0]
        uint32_t press_mant = press_mem & 0x7FFFFF;
 8005384:	0020      	movs	r0, r4
 8005386:	180b      	adds	r3, r1, r0
 8005388:	19db      	adds	r3, r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	025b      	lsls	r3, r3, #9
 800538e:	0a5b      	lsrs	r3, r3, #9
 8005390:	2196      	movs	r1, #150	@ 0x96
 8005392:	0049      	lsls	r1, r1, #1
 8005394:	1809      	adds	r1, r1, r0
 8005396:	19c9      	adds	r1, r1, r7
 8005398:	600b      	str	r3, [r1, #0]
        
        if (press_exp != 0 && press_exp != 0xFF) {
 800539a:	0001      	movs	r1, r0
 800539c:	1853      	adds	r3, r2, r1
 800539e:	19db      	adds	r3, r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d100      	bne.n	80053a8 <bme680_test_sensor+0x28c>
 80053a6:	e0ba      	b.n	800551e <bme680_test_sensor+0x402>
 80053a8:	1853      	adds	r3, r2, r1
 80053aa:	19db      	adds	r3, r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2bff      	cmp	r3, #255	@ 0xff
 80053b0:	d100      	bne.n	80053b4 <bme680_test_sensor+0x298>
 80053b2:	e0b4      	b.n	800551e <bme680_test_sensor+0x402>
            int press_exp_val = (int)press_exp - 127;
 80053b4:	1853      	adds	r3, r2, r1
 80053b6:	19db      	adds	r3, r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3b7f      	subs	r3, #127	@ 0x7f
 80053bc:	2294      	movs	r2, #148	@ 0x94
 80053be:	0052      	lsls	r2, r2, #1
 80053c0:	1852      	adds	r2, r2, r1
 80053c2:	19d2      	adds	r2, r2, r7
 80053c4:	6013      	str	r3, [r2, #0]
            float press_result = 1.0f;
 80053c6:	23fe      	movs	r3, #254	@ 0xfe
 80053c8:	059b      	lsls	r3, r3, #22
 80053ca:	22b0      	movs	r2, #176	@ 0xb0
 80053cc:	0052      	lsls	r2, r2, #1
 80053ce:	1852      	adds	r2, r2, r1
 80053d0:	19d2      	adds	r2, r2, r7
 80053d2:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80053d4:	2316      	movs	r3, #22
 80053d6:	22ae      	movs	r2, #174	@ 0xae
 80053d8:	0052      	lsls	r2, r2, #1
 80053da:	1852      	adds	r2, r2, r1
 80053dc:	19d2      	adds	r2, r2, r7
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	e038      	b.n	8005454 <bme680_test_sensor+0x338>
                if (press_mant & (1 << i)) {
 80053e2:	2201      	movs	r2, #1
 80053e4:	21ae      	movs	r1, #174	@ 0xae
 80053e6:	0049      	lsls	r1, r1, #1
 80053e8:	2508      	movs	r5, #8
 80053ea:	194b      	adds	r3, r1, r5
 80053ec:	19db      	adds	r3, r3, r7
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	409a      	lsls	r2, r3
 80053f2:	0013      	movs	r3, r2
 80053f4:	001a      	movs	r2, r3
 80053f6:	2396      	movs	r3, #150	@ 0x96
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	195b      	adds	r3, r3, r5
 80053fc:	19db      	adds	r3, r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4013      	ands	r3, r2
 8005402:	d01d      	beq.n	8005440 <bme680_test_sensor+0x324>
                    press_result += 1.0f / (1 << (23 - i));
 8005404:	194b      	adds	r3, r1, r5
 8005406:	19db      	adds	r3, r3, r7
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2217      	movs	r2, #23
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2201      	movs	r2, #1
 8005410:	409a      	lsls	r2, r3
 8005412:	0013      	movs	r3, r2
 8005414:	0018      	movs	r0, r3
 8005416:	f7fc f9af 	bl	8001778 <__aeabi_i2f>
 800541a:	1c03      	adds	r3, r0, #0
 800541c:	1c19      	adds	r1, r3, #0
 800541e:	20fe      	movs	r0, #254	@ 0xfe
 8005420:	0580      	lsls	r0, r0, #22
 8005422:	f7fb fbe7 	bl	8000bf4 <__aeabi_fdiv>
 8005426:	1c03      	adds	r3, r0, #0
 8005428:	1c19      	adds	r1, r3, #0
 800542a:	24b0      	movs	r4, #176	@ 0xb0
 800542c:	0064      	lsls	r4, r4, #1
 800542e:	1963      	adds	r3, r4, r5
 8005430:	19db      	adds	r3, r3, r7
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	f7fb f9ec 	bl	8000810 <__aeabi_fadd>
 8005438:	1c03      	adds	r3, r0, #0
 800543a:	1962      	adds	r2, r4, r5
 800543c:	19d2      	adds	r2, r2, r7
 800543e:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 8005440:	22ae      	movs	r2, #174	@ 0xae
 8005442:	0052      	lsls	r2, r2, #1
 8005444:	2108      	movs	r1, #8
 8005446:	1853      	adds	r3, r2, r1
 8005448:	19db      	adds	r3, r3, r7
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3b01      	subs	r3, #1
 800544e:	1852      	adds	r2, r2, r1
 8005450:	19d2      	adds	r2, r2, r7
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	23ae      	movs	r3, #174	@ 0xae
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	2508      	movs	r5, #8
 800545a:	195b      	adds	r3, r3, r5
 800545c:	19db      	adds	r3, r3, r7
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	dabe      	bge.n	80053e2 <bme680_test_sensor+0x2c6>
                }
            }
            if (press_exp_val > 0) press_result *= (1 << press_exp_val);
 8005464:	2194      	movs	r1, #148	@ 0x94
 8005466:	0049      	lsls	r1, r1, #1
 8005468:	194b      	adds	r3, r1, r5
 800546a:	19db      	adds	r3, r3, r7
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	dd18      	ble.n	80054a4 <bme680_test_sensor+0x388>
 8005472:	2201      	movs	r2, #1
 8005474:	194b      	adds	r3, r1, r5
 8005476:	19db      	adds	r3, r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	409a      	lsls	r2, r3
 800547c:	0013      	movs	r3, r2
 800547e:	0018      	movs	r0, r3
 8005480:	f7fc f97a 	bl	8001778 <__aeabi_i2f>
 8005484:	1c03      	adds	r3, r0, #0
 8005486:	1c19      	adds	r1, r3, #0
 8005488:	24b0      	movs	r4, #176	@ 0xb0
 800548a:	0064      	lsls	r4, r4, #1
 800548c:	1963      	adds	r3, r4, r5
 800548e:	19db      	adds	r3, r3, r7
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f7fb fd7d 	bl	8000f90 <__aeabi_fmul>
 8005496:	1c03      	adds	r3, r0, #0
 8005498:	1962      	adds	r2, r4, r5
 800549a:	19d2      	adds	r2, r2, r7
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e020      	b.n	80054e2 <bme680_test_sensor+0x3c6>
 80054a0:	080152d0 	.word	0x080152d0
            else if (press_exp_val < 0) press_result /= (1 << (-press_exp_val));
 80054a4:	2294      	movs	r2, #148	@ 0x94
 80054a6:	0052      	lsls	r2, r2, #1
 80054a8:	2508      	movs	r5, #8
 80054aa:	1953      	adds	r3, r2, r5
 80054ac:	19db      	adds	r3, r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da16      	bge.n	80054e2 <bme680_test_sensor+0x3c6>
 80054b4:	1953      	adds	r3, r2, r5
 80054b6:	19db      	adds	r3, r3, r7
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	425b      	negs	r3, r3
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	0013      	movs	r3, r2
 80054c2:	0018      	movs	r0, r3
 80054c4:	f7fc f958 	bl	8001778 <__aeabi_i2f>
 80054c8:	1c03      	adds	r3, r0, #0
 80054ca:	1c19      	adds	r1, r3, #0
 80054cc:	24b0      	movs	r4, #176	@ 0xb0
 80054ce:	0064      	lsls	r4, r4, #1
 80054d0:	1963      	adds	r3, r4, r5
 80054d2:	19db      	adds	r3, r3, r7
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	f7fb fb8d 	bl	8000bf4 <__aeabi_fdiv>
 80054da:	1c03      	adds	r3, r0, #0
 80054dc:	1962      	adds	r2, r4, r5
 80054de:	19d2      	adds	r2, r2, r7
 80054e0:	6013      	str	r3, [r2, #0]
            if (press_sign) press_result = -press_result;
 80054e2:	239a      	movs	r3, #154	@ 0x9a
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	2008      	movs	r0, #8
 80054e8:	181b      	adds	r3, r3, r0
 80054ea:	19db      	adds	r3, r3, r7
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <bme680_test_sensor+0x3ec>
 80054f2:	21b0      	movs	r1, #176	@ 0xb0
 80054f4:	0049      	lsls	r1, r1, #1
 80054f6:	180b      	adds	r3, r1, r0
 80054f8:	19db      	adds	r3, r3, r7
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2280      	movs	r2, #128	@ 0x80
 80054fe:	0612      	lsls	r2, r2, #24
 8005500:	4053      	eors	r3, r2
 8005502:	180a      	adds	r2, r1, r0
 8005504:	19d2      	adds	r2, r2, r7
 8005506:	6013      	str	r3, [r2, #0]
            press_decoded = press_result;
 8005508:	23b0      	movs	r3, #176	@ 0xb0
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	2108      	movs	r1, #8
 800550e:	185b      	adds	r3, r3, r1
 8005510:	19db      	adds	r3, r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	22b8      	movs	r2, #184	@ 0xb8
 8005516:	0052      	lsls	r2, r2, #1
 8005518:	1852      	adds	r2, r2, r1
 800551a:	19d2      	adds	r2, r2, r7
 800551c:	6013      	str	r3, [r2, #0]
        }
        
        // Decode humidity
        uint32_t hum_sign = (hum_mem >> 31) & 0x1;
 800551e:	21a4      	movs	r1, #164	@ 0xa4
 8005520:	0049      	lsls	r1, r1, #1
 8005522:	2008      	movs	r0, #8
 8005524:	180b      	adds	r3, r1, r0
 8005526:	19db      	adds	r3, r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	0fdb      	lsrs	r3, r3, #31
 800552c:	2292      	movs	r2, #146	@ 0x92
 800552e:	0052      	lsls	r2, r2, #1
 8005530:	1812      	adds	r2, r2, r0
 8005532:	19d2      	adds	r2, r2, r7
 8005534:	6013      	str	r3, [r2, #0]
        uint32_t hum_exp = (hum_mem >> 23) & 0xFF;
 8005536:	180b      	adds	r3, r1, r0
 8005538:	19db      	adds	r3, r3, r7
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	0ddb      	lsrs	r3, r3, #23
 800553e:	22ff      	movs	r2, #255	@ 0xff
 8005540:	4013      	ands	r3, r2
 8005542:	2290      	movs	r2, #144	@ 0x90
 8005544:	0052      	lsls	r2, r2, #1
 8005546:	0004      	movs	r4, r0
 8005548:	1810      	adds	r0, r2, r0
 800554a:	19c0      	adds	r0, r0, r7
 800554c:	6003      	str	r3, [r0, #0]
        uint32_t hum_mant = hum_mem & 0x7FFFFF;
 800554e:	0020      	movs	r0, r4
 8005550:	180b      	adds	r3, r1, r0
 8005552:	19db      	adds	r3, r3, r7
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	025b      	lsls	r3, r3, #9
 8005558:	0a5b      	lsrs	r3, r3, #9
 800555a:	218e      	movs	r1, #142	@ 0x8e
 800555c:	0049      	lsls	r1, r1, #1
 800555e:	1809      	adds	r1, r1, r0
 8005560:	19c9      	adds	r1, r1, r7
 8005562:	600b      	str	r3, [r1, #0]
        
        if (hum_exp != 0 && hum_exp != 0xFF) {
 8005564:	0001      	movs	r1, r0
 8005566:	1853      	adds	r3, r2, r1
 8005568:	19db      	adds	r3, r3, r7
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d100      	bne.n	8005572 <bme680_test_sensor+0x456>
 8005570:	e0b8      	b.n	80056e4 <bme680_test_sensor+0x5c8>
 8005572:	1853      	adds	r3, r2, r1
 8005574:	19db      	adds	r3, r3, r7
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2bff      	cmp	r3, #255	@ 0xff
 800557a:	d100      	bne.n	800557e <bme680_test_sensor+0x462>
 800557c:	e0b2      	b.n	80056e4 <bme680_test_sensor+0x5c8>
            int hum_exp_val = (int)hum_exp - 127;
 800557e:	1853      	adds	r3, r2, r1
 8005580:	19db      	adds	r3, r3, r7
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3b7f      	subs	r3, #127	@ 0x7f
 8005586:	228c      	movs	r2, #140	@ 0x8c
 8005588:	0052      	lsls	r2, r2, #1
 800558a:	1852      	adds	r2, r2, r1
 800558c:	19d2      	adds	r2, r2, r7
 800558e:	6013      	str	r3, [r2, #0]
            float hum_result = 1.0f;
 8005590:	23fe      	movs	r3, #254	@ 0xfe
 8005592:	059b      	lsls	r3, r3, #22
 8005594:	22ac      	movs	r2, #172	@ 0xac
 8005596:	0052      	lsls	r2, r2, #1
 8005598:	1852      	adds	r2, r2, r1
 800559a:	19d2      	adds	r2, r2, r7
 800559c:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 800559e:	2316      	movs	r3, #22
 80055a0:	22aa      	movs	r2, #170	@ 0xaa
 80055a2:	0052      	lsls	r2, r2, #1
 80055a4:	1852      	adds	r2, r2, r1
 80055a6:	19d2      	adds	r2, r2, r7
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e038      	b.n	800561e <bme680_test_sensor+0x502>
                if (hum_mant & (1 << i)) {
 80055ac:	2201      	movs	r2, #1
 80055ae:	21aa      	movs	r1, #170	@ 0xaa
 80055b0:	0049      	lsls	r1, r1, #1
 80055b2:	2508      	movs	r5, #8
 80055b4:	194b      	adds	r3, r1, r5
 80055b6:	19db      	adds	r3, r3, r7
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	409a      	lsls	r2, r3
 80055bc:	0013      	movs	r3, r2
 80055be:	001a      	movs	r2, r3
 80055c0:	238e      	movs	r3, #142	@ 0x8e
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	195b      	adds	r3, r3, r5
 80055c6:	19db      	adds	r3, r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4013      	ands	r3, r2
 80055cc:	d01d      	beq.n	800560a <bme680_test_sensor+0x4ee>
                    hum_result += 1.0f / (1 << (23 - i));
 80055ce:	194b      	adds	r3, r1, r5
 80055d0:	19db      	adds	r3, r3, r7
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2217      	movs	r2, #23
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2201      	movs	r2, #1
 80055da:	409a      	lsls	r2, r3
 80055dc:	0013      	movs	r3, r2
 80055de:	0018      	movs	r0, r3
 80055e0:	f7fc f8ca 	bl	8001778 <__aeabi_i2f>
 80055e4:	1c03      	adds	r3, r0, #0
 80055e6:	1c19      	adds	r1, r3, #0
 80055e8:	20fe      	movs	r0, #254	@ 0xfe
 80055ea:	0580      	lsls	r0, r0, #22
 80055ec:	f7fb fb02 	bl	8000bf4 <__aeabi_fdiv>
 80055f0:	1c03      	adds	r3, r0, #0
 80055f2:	1c19      	adds	r1, r3, #0
 80055f4:	24ac      	movs	r4, #172	@ 0xac
 80055f6:	0064      	lsls	r4, r4, #1
 80055f8:	1963      	adds	r3, r4, r5
 80055fa:	19db      	adds	r3, r3, r7
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	f7fb f907 	bl	8000810 <__aeabi_fadd>
 8005602:	1c03      	adds	r3, r0, #0
 8005604:	1962      	adds	r2, r4, r5
 8005606:	19d2      	adds	r2, r2, r7
 8005608:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 800560a:	22aa      	movs	r2, #170	@ 0xaa
 800560c:	0052      	lsls	r2, r2, #1
 800560e:	2108      	movs	r1, #8
 8005610:	1853      	adds	r3, r2, r1
 8005612:	19db      	adds	r3, r3, r7
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	1852      	adds	r2, r2, r1
 800561a:	19d2      	adds	r2, r2, r7
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	23aa      	movs	r3, #170	@ 0xaa
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	2508      	movs	r5, #8
 8005624:	195b      	adds	r3, r3, r5
 8005626:	19db      	adds	r3, r3, r7
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	dabe      	bge.n	80055ac <bme680_test_sensor+0x490>
                }
            }
            if (hum_exp_val > 0) hum_result *= (1 << hum_exp_val);
 800562e:	218c      	movs	r1, #140	@ 0x8c
 8005630:	0049      	lsls	r1, r1, #1
 8005632:	194b      	adds	r3, r1, r5
 8005634:	19db      	adds	r3, r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	dd16      	ble.n	800566a <bme680_test_sensor+0x54e>
 800563c:	2201      	movs	r2, #1
 800563e:	194b      	adds	r3, r1, r5
 8005640:	19db      	adds	r3, r3, r7
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	409a      	lsls	r2, r3
 8005646:	0013      	movs	r3, r2
 8005648:	0018      	movs	r0, r3
 800564a:	f7fc f895 	bl	8001778 <__aeabi_i2f>
 800564e:	1c03      	adds	r3, r0, #0
 8005650:	1c19      	adds	r1, r3, #0
 8005652:	24ac      	movs	r4, #172	@ 0xac
 8005654:	0064      	lsls	r4, r4, #1
 8005656:	1963      	adds	r3, r4, r5
 8005658:	19db      	adds	r3, r3, r7
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	f7fb fc98 	bl	8000f90 <__aeabi_fmul>
 8005660:	1c03      	adds	r3, r0, #0
 8005662:	1962      	adds	r2, r4, r5
 8005664:	19d2      	adds	r2, r2, r7
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	e01e      	b.n	80056a8 <bme680_test_sensor+0x58c>
            else if (hum_exp_val < 0) hum_result /= (1 << (-hum_exp_val));
 800566a:	228c      	movs	r2, #140	@ 0x8c
 800566c:	0052      	lsls	r2, r2, #1
 800566e:	2508      	movs	r5, #8
 8005670:	1953      	adds	r3, r2, r5
 8005672:	19db      	adds	r3, r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da16      	bge.n	80056a8 <bme680_test_sensor+0x58c>
 800567a:	1953      	adds	r3, r2, r5
 800567c:	19db      	adds	r3, r3, r7
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	425b      	negs	r3, r3
 8005682:	2201      	movs	r2, #1
 8005684:	409a      	lsls	r2, r3
 8005686:	0013      	movs	r3, r2
 8005688:	0018      	movs	r0, r3
 800568a:	f7fc f875 	bl	8001778 <__aeabi_i2f>
 800568e:	1c03      	adds	r3, r0, #0
 8005690:	1c19      	adds	r1, r3, #0
 8005692:	24ac      	movs	r4, #172	@ 0xac
 8005694:	0064      	lsls	r4, r4, #1
 8005696:	1963      	adds	r3, r4, r5
 8005698:	19db      	adds	r3, r3, r7
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	f7fb faaa 	bl	8000bf4 <__aeabi_fdiv>
 80056a0:	1c03      	adds	r3, r0, #0
 80056a2:	1962      	adds	r2, r4, r5
 80056a4:	19d2      	adds	r2, r2, r7
 80056a6:	6013      	str	r3, [r2, #0]
            if (hum_sign) hum_result = -hum_result;
 80056a8:	2392      	movs	r3, #146	@ 0x92
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	2008      	movs	r0, #8
 80056ae:	181b      	adds	r3, r3, r0
 80056b0:	19db      	adds	r3, r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <bme680_test_sensor+0x5b2>
 80056b8:	21ac      	movs	r1, #172	@ 0xac
 80056ba:	0049      	lsls	r1, r1, #1
 80056bc:	180b      	adds	r3, r1, r0
 80056be:	19db      	adds	r3, r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2280      	movs	r2, #128	@ 0x80
 80056c4:	0612      	lsls	r2, r2, #24
 80056c6:	4053      	eors	r3, r2
 80056c8:	180a      	adds	r2, r1, r0
 80056ca:	19d2      	adds	r2, r2, r7
 80056cc:	6013      	str	r3, [r2, #0]
            hum_decoded = hum_result;
 80056ce:	23ac      	movs	r3, #172	@ 0xac
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	2108      	movs	r1, #8
 80056d4:	185b      	adds	r3, r3, r1
 80056d6:	19db      	adds	r3, r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	22b6      	movs	r2, #182	@ 0xb6
 80056dc:	0052      	lsls	r2, r2, #1
 80056de:	1852      	adds	r2, r2, r1
 80056e0:	19d2      	adds	r2, r2, r7
 80056e2:	6013      	str	r3, [r2, #0]
        }
        
        snprintf(test_msg, sizeof(test_msg), 
 80056e4:	23ba      	movs	r3, #186	@ 0xba
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	2608      	movs	r6, #8
 80056ea:	199b      	adds	r3, r3, r6
 80056ec:	19db      	adds	r3, r3, r7
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	f7fe f878 	bl	80037e4 <__aeabi_f2d>
 80056f4:	0004      	movs	r4, r0
 80056f6:	000d      	movs	r5, r1
 80056f8:	23b8      	movs	r3, #184	@ 0xb8
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	199b      	adds	r3, r3, r6
 80056fe:	19db      	adds	r3, r3, r7
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	f7fe f86f 	bl	80037e4 <__aeabi_f2d>
 8005706:	6038      	str	r0, [r7, #0]
 8005708:	6079      	str	r1, [r7, #4]
 800570a:	23b6      	movs	r3, #182	@ 0xb6
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	199b      	adds	r3, r3, r6
 8005710:	19db      	adds	r3, r3, r7
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	f7fe f866 	bl	80037e4 <__aeabi_f2d>
 8005718:	0002      	movs	r2, r0
 800571a:	000b      	movs	r3, r1
 800571c:	4e1a      	ldr	r6, [pc, #104]	@ (8005788 <bme680_test_sensor+0x66c>)
 800571e:	2180      	movs	r1, #128	@ 0x80
 8005720:	0049      	lsls	r1, r1, #1
 8005722:	2008      	movs	r0, #8
 8005724:	1838      	adds	r0, r7, r0
 8005726:	9204      	str	r2, [sp, #16]
 8005728:	9305      	str	r3, [sp, #20]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	9202      	str	r2, [sp, #8]
 8005730:	9303      	str	r3, [sp, #12]
 8005732:	9400      	str	r4, [sp, #0]
 8005734:	9501      	str	r5, [sp, #4]
 8005736:	0032      	movs	r2, r6
 8005738:	f00c f96c 	bl	8011a14 <sniprintf>
 800573c:	e007      	b.n	800574e <bme680_test_sensor+0x632>
                 "Test successful!\r\nTemperature: %.2f°C\r\nPressure: %.2f Pa\r\nHumidity: %.2f%%\r\n",
                 temp_decoded, press_decoded, hum_decoded);
    } else {
        snprintf(test_msg, sizeof(test_msg), "Test failed! Error reading sensor data.\r\n");
 800573e:	4a13      	ldr	r2, [pc, #76]	@ (800578c <bme680_test_sensor+0x670>)
 8005740:	2380      	movs	r3, #128	@ 0x80
 8005742:	0059      	lsls	r1, r3, #1
 8005744:	2308      	movs	r3, #8
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	0018      	movs	r0, r3
 800574a:	f00c f963 	bl	8011a14 <sniprintf>
    }
    
    HAL_UART_Transmit(&huart2, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 800574e:	2408      	movs	r4, #8
 8005750:	193b      	adds	r3, r7, r4
 8005752:	0018      	movs	r0, r3
 8005754:	f7fa fce0 	bl	8000118 <strlen>
 8005758:	0003      	movs	r3, r0
 800575a:	b29a      	uxth	r2, r3
 800575c:	2301      	movs	r3, #1
 800575e:	425b      	negs	r3, r3
 8005760:	1939      	adds	r1, r7, r4
 8005762:	480b      	ldr	r0, [pc, #44]	@ (8005790 <bme680_test_sensor+0x674>)
 8005764:	f009 fe72 	bl	800f44c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
 8005768:	193b      	adds	r3, r7, r4
 800576a:	0018      	movs	r0, r3
 800576c:	f7fa fcd4 	bl	8000118 <strlen>
 8005770:	0003      	movs	r3, r0
 8005772:	b29a      	uxth	r2, r3
 8005774:	2301      	movs	r3, #1
 8005776:	425b      	negs	r3, r3
 8005778:	1939      	adds	r1, r7, r4
 800577a:	4806      	ldr	r0, [pc, #24]	@ (8005794 <bme680_test_sensor+0x678>)
 800577c:	f009 fe66 	bl	800f44c <HAL_UART_Transmit>
} 
 8005780:	46c0      	nop			@ (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b061      	add	sp, #388	@ 0x184
 8005786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005788:	080152ec 	.word	0x080152ec
 800578c:	0801533c 	.word	0x0801533c
 8005790:	2000039c 	.word	0x2000039c
 8005794:	20000430 	.word	0x20000430

08005798 <bme680_comprehensive_diagnostic>:

// Comprehensive BME680 diagnostic function
void bme680_comprehensive_diagnostic(void)
{
 8005798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800579a:	46ce      	mov	lr, r9
 800579c:	4647      	mov	r7, r8
 800579e:	b580      	push	{r7, lr}
 80057a0:	b0ed      	sub	sp, #436	@ 0x1b4
 80057a2:	af06      	add	r7, sp, #24
    char debug_msg[256];
    HAL_StatusTypeDef status;
    uint8_t chip_id;
    uint8_t raw_data[32];
    
    debug_print("\r\n=== BME680 COMPREHENSIVE DIAGNOSTIC ===\r\n");
 80057a4:	4be4      	ldr	r3, [pc, #912]	@ (8005b38 <bme680_comprehensive_diagnostic+0x3a0>)
 80057a6:	0018      	movs	r0, r3
 80057a8:	f7fe f910 	bl	80039cc <debug_print>
    
    // 1. Test I2C bus communication
    debug_print("1. Testing I2C bus communication...\r\n");
 80057ac:	4be3      	ldr	r3, [pc, #908]	@ (8005b3c <bme680_comprehensive_diagnostic+0x3a4>)
 80057ae:	0018      	movs	r0, r3
 80057b0:	f7fe f90c 	bl	80039cc <debug_print>
    
    // Test both possible addresses
    uint8_t addresses[] = {0x76, 0x77};
 80057b4:	4be2      	ldr	r3, [pc, #904]	@ (8005b40 <bme680_comprehensive_diagnostic+0x3a8>)
 80057b6:	21c4      	movs	r1, #196	@ 0xc4
 80057b8:	0049      	lsls	r1, r1, #1
 80057ba:	185b      	adds	r3, r3, r1
 80057bc:	2208      	movs	r2, #8
 80057be:	4694      	mov	ip, r2
 80057c0:	2208      	movs	r2, #8
 80057c2:	4690      	mov	r8, r2
 80057c4:	44b8      	add	r8, r7
 80057c6:	44c4      	add	ip, r8
 80057c8:	4463      	add	r3, ip
 80057ca:	4ade      	ldr	r2, [pc, #888]	@ (8005b44 <bme680_comprehensive_diagnostic+0x3ac>)
 80057cc:	801a      	strh	r2, [r3, #0]
    const char* addr_names[] = {"0x76", "0x77"};
 80057ce:	4bde      	ldr	r3, [pc, #888]	@ (8005b48 <bme680_comprehensive_diagnostic+0x3b0>)
 80057d0:	185b      	adds	r3, r3, r1
 80057d2:	2208      	movs	r2, #8
 80057d4:	4694      	mov	ip, r2
 80057d6:	2208      	movs	r2, #8
 80057d8:	4690      	mov	r8, r2
 80057da:	44b8      	add	r8, r7
 80057dc:	44c4      	add	ip, r8
 80057de:	4463      	add	r3, ip
 80057e0:	4ada      	ldr	r2, [pc, #872]	@ (8005b4c <bme680_comprehensive_diagnostic+0x3b4>)
 80057e2:	ca03      	ldmia	r2!, {r0, r1}
 80057e4:	c303      	stmia	r3!, {r0, r1}
    int device_found = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	22c2      	movs	r2, #194	@ 0xc2
 80057ea:	0052      	lsls	r2, r2, #1
 80057ec:	2108      	movs	r1, #8
 80057ee:	1852      	adds	r2, r2, r1
 80057f0:	2008      	movs	r0, #8
 80057f2:	4684      	mov	ip, r0
 80057f4:	44bc      	add	ip, r7
 80057f6:	4462      	add	r2, ip
 80057f8:	6013      	str	r3, [r2, #0]
    
    for (int i = 0; i < 2; i++) {
 80057fa:	2300      	movs	r3, #0
 80057fc:	22c0      	movs	r2, #192	@ 0xc0
 80057fe:	0052      	lsls	r2, r2, #1
 8005800:	1852      	adds	r2, r2, r1
 8005802:	2108      	movs	r1, #8
 8005804:	468c      	mov	ip, r1
 8005806:	44bc      	add	ip, r7
 8005808:	4462      	add	r2, ip
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	e15f      	b.n	8005ace <bme680_comprehensive_diagnostic+0x336>
        snprintf(debug_msg, sizeof(debug_msg), "   Testing address %s...\r\n", addr_names[i]);
 800580e:	4bce      	ldr	r3, [pc, #824]	@ (8005b48 <bme680_comprehensive_diagnostic+0x3b0>)
 8005810:	26c4      	movs	r6, #196	@ 0xc4
 8005812:	0076      	lsls	r6, r6, #1
 8005814:	199b      	adds	r3, r3, r6
 8005816:	2208      	movs	r2, #8
 8005818:	4694      	mov	ip, r2
 800581a:	2208      	movs	r2, #8
 800581c:	4690      	mov	r8, r2
 800581e:	44b8      	add	r8, r7
 8005820:	44c4      	add	ip, r8
 8005822:	4463      	add	r3, ip
 8005824:	24c0      	movs	r4, #192	@ 0xc0
 8005826:	0064      	lsls	r4, r4, #1
 8005828:	2008      	movs	r0, #8
 800582a:	1822      	adds	r2, r4, r0
 800582c:	2108      	movs	r1, #8
 800582e:	468c      	mov	ip, r1
 8005830:	44bc      	add	ip, r7
 8005832:	4462      	add	r2, ip
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	0092      	lsls	r2, r2, #2
 8005838:	58d3      	ldr	r3, [r2, r3]
 800583a:	4698      	mov	r8, r3
 800583c:	4ac4      	ldr	r2, [pc, #784]	@ (8005b50 <bme680_comprehensive_diagnostic+0x3b8>)
 800583e:	2180      	movs	r1, #128	@ 0x80
 8005840:	0049      	lsls	r1, r1, #1
 8005842:	2568      	movs	r5, #104	@ 0x68
 8005844:	1828      	adds	r0, r5, r0
 8005846:	2308      	movs	r3, #8
 8005848:	469c      	mov	ip, r3
 800584a:	44bc      	add	ip, r7
 800584c:	4460      	add	r0, ip
 800584e:	4643      	mov	r3, r8
 8005850:	f00c f8e0 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8005854:	2008      	movs	r0, #8
 8005856:	182b      	adds	r3, r5, r0
 8005858:	2208      	movs	r2, #8
 800585a:	4694      	mov	ip, r2
 800585c:	44bc      	add	ip, r7
 800585e:	4463      	add	r3, ip
 8005860:	0018      	movs	r0, r3
 8005862:	f7fe f8b3 	bl	80039cc <debug_print>
        
        // Test device ready
        status = HAL_I2C_IsDeviceReady(&hi2c1, addresses[i] << 1, 3, 1000);
 8005866:	4bb6      	ldr	r3, [pc, #728]	@ (8005b40 <bme680_comprehensive_diagnostic+0x3a8>)
 8005868:	199b      	adds	r3, r3, r6
 800586a:	2008      	movs	r0, #8
 800586c:	2208      	movs	r2, #8
 800586e:	1882      	adds	r2, r0, r2
 8005870:	19d2      	adds	r2, r2, r7
 8005872:	189a      	adds	r2, r3, r2
 8005874:	1823      	adds	r3, r4, r0
 8005876:	2108      	movs	r1, #8
 8005878:	468c      	mov	ip, r1
 800587a:	44bc      	add	ip, r7
 800587c:	4463      	add	r3, ip
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	18d3      	adds	r3, r2, r3
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	18db      	adds	r3, r3, r3
 8005886:	b299      	uxth	r1, r3
 8005888:	2378      	movs	r3, #120	@ 0x78
 800588a:	33ff      	adds	r3, #255	@ 0xff
 800588c:	181b      	adds	r3, r3, r0
 800588e:	2208      	movs	r2, #8
 8005890:	18ba      	adds	r2, r7, r2
 8005892:	189c      	adds	r4, r3, r2
 8005894:	23fa      	movs	r3, #250	@ 0xfa
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	48ae      	ldr	r0, [pc, #696]	@ (8005b54 <bme680_comprehensive_diagnostic+0x3bc>)
 800589a:	2203      	movs	r2, #3
 800589c:	f007 fb08 	bl	800ceb0 <HAL_I2C_IsDeviceReady>
 80058a0:	0003      	movs	r3, r0
 80058a2:	7023      	strb	r3, [r4, #0]
        if (status == HAL_OK) {
 80058a4:	2378      	movs	r3, #120	@ 0x78
 80058a6:	33ff      	adds	r3, #255	@ 0xff
 80058a8:	2008      	movs	r0, #8
 80058aa:	181b      	adds	r3, r3, r0
 80058ac:	2208      	movs	r2, #8
 80058ae:	4694      	mov	ip, r2
 80058b0:	44bc      	add	ip, r7
 80058b2:	4463      	add	r3, ip
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d000      	beq.n	80058bc <bme680_comprehensive_diagnostic+0x124>
 80058ba:	e0ce      	b.n	8005a5a <bme680_comprehensive_diagnostic+0x2c2>
            snprintf(debug_msg, sizeof(debug_msg), "   ✓ Device responds at %s\r\n", addr_names[i]);
 80058bc:	4ba2      	ldr	r3, [pc, #648]	@ (8005b48 <bme680_comprehensive_diagnostic+0x3b0>)
 80058be:	199a      	adds	r2, r3, r6
 80058c0:	2308      	movs	r3, #8
 80058c2:	18c3      	adds	r3, r0, r3
 80058c4:	19db      	adds	r3, r3, r7
 80058c6:	18d3      	adds	r3, r2, r3
 80058c8:	24c0      	movs	r4, #192	@ 0xc0
 80058ca:	0064      	lsls	r4, r4, #1
 80058cc:	1822      	adds	r2, r4, r0
 80058ce:	2108      	movs	r1, #8
 80058d0:	468c      	mov	ip, r1
 80058d2:	44bc      	add	ip, r7
 80058d4:	4462      	add	r2, ip
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	0092      	lsls	r2, r2, #2
 80058da:	58d3      	ldr	r3, [r2, r3]
 80058dc:	4698      	mov	r8, r3
 80058de:	4a9e      	ldr	r2, [pc, #632]	@ (8005b58 <bme680_comprehensive_diagnostic+0x3c0>)
 80058e0:	2180      	movs	r1, #128	@ 0x80
 80058e2:	0049      	lsls	r1, r1, #1
 80058e4:	1828      	adds	r0, r5, r0
 80058e6:	2308      	movs	r3, #8
 80058e8:	469c      	mov	ip, r3
 80058ea:	44bc      	add	ip, r7
 80058ec:	4460      	add	r0, ip
 80058ee:	4643      	mov	r3, r8
 80058f0:	f00c f890 	bl	8011a14 <sniprintf>
            debug_print(debug_msg);
 80058f4:	2008      	movs	r0, #8
 80058f6:	182b      	adds	r3, r5, r0
 80058f8:	2208      	movs	r2, #8
 80058fa:	4694      	mov	ip, r2
 80058fc:	44bc      	add	ip, r7
 80058fe:	4463      	add	r3, ip
 8005900:	0018      	movs	r0, r3
 8005902:	f7fe f863 	bl	80039cc <debug_print>
            device_found = 1;
 8005906:	2301      	movs	r3, #1
 8005908:	22c2      	movs	r2, #194	@ 0xc2
 800590a:	0052      	lsls	r2, r2, #1
 800590c:	2008      	movs	r0, #8
 800590e:	1812      	adds	r2, r2, r0
 8005910:	2108      	movs	r1, #8
 8005912:	468c      	mov	ip, r1
 8005914:	44bc      	add	ip, r7
 8005916:	4462      	add	r2, ip
 8005918:	6013      	str	r3, [r2, #0]
            
            // Try to read chip ID
            status = HAL_I2C_Mem_Read(&hi2c1, addresses[i] << 1, 0xD0, 
 800591a:	4b89      	ldr	r3, [pc, #548]	@ (8005b40 <bme680_comprehensive_diagnostic+0x3a8>)
 800591c:	199a      	adds	r2, r3, r6
 800591e:	2308      	movs	r3, #8
 8005920:	469c      	mov	ip, r3
 8005922:	2308      	movs	r3, #8
 8005924:	4698      	mov	r8, r3
 8005926:	44b8      	add	r8, r7
 8005928:	44c4      	add	ip, r8
 800592a:	4462      	add	r2, ip
 800592c:	1823      	adds	r3, r4, r0
 800592e:	2108      	movs	r1, #8
 8005930:	1879      	adds	r1, r7, r1
 8005932:	1859      	adds	r1, r3, r1
 8005934:	680b      	ldr	r3, [r1, #0]
 8005936:	18d3      	adds	r3, r2, r3
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	18db      	adds	r3, r3, r3
 800593c:	b299      	uxth	r1, r3
 800593e:	2378      	movs	r3, #120	@ 0x78
 8005940:	33ff      	adds	r3, #255	@ 0xff
 8005942:	181a      	adds	r2, r3, r0
 8005944:	2308      	movs	r3, #8
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	18d4      	adds	r4, r2, r3
 800594a:	4882      	ldr	r0, [pc, #520]	@ (8005b54 <bme680_comprehensive_diagnostic+0x3bc>)
 800594c:	23fa      	movs	r3, #250	@ 0xfa
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	9302      	str	r3, [sp, #8]
 8005952:	2301      	movs	r3, #1
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	2267      	movs	r2, #103	@ 0x67
 8005958:	2308      	movs	r3, #8
 800595a:	18d2      	adds	r2, r2, r3
 800595c:	2308      	movs	r3, #8
 800595e:	18fb      	adds	r3, r7, r3
 8005960:	18d3      	adds	r3, r2, r3
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2301      	movs	r3, #1
 8005966:	22d0      	movs	r2, #208	@ 0xd0
 8005968:	f007 f96e 	bl	800cc48 <HAL_I2C_Mem_Read>
 800596c:	0003      	movs	r3, r0
 800596e:	7023      	strb	r3, [r4, #0]
                                      I2C_MEMADD_SIZE_8BIT, &chip_id, 1, 1000);
            
            if (status == HAL_OK) {
 8005970:	2378      	movs	r3, #120	@ 0x78
 8005972:	33ff      	adds	r3, #255	@ 0xff
 8005974:	2008      	movs	r0, #8
 8005976:	181b      	adds	r3, r3, r0
 8005978:	2208      	movs	r2, #8
 800597a:	4694      	mov	ip, r2
 800597c:	44bc      	add	ip, r7
 800597e:	4463      	add	r3, ip
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d153      	bne.n	8005a2e <bme680_comprehensive_diagnostic+0x296>
                snprintf(debug_msg, sizeof(debug_msg), "   ✓ Chip ID: 0x%02X (Expected: 0x61)\r\n", chip_id);
 8005986:	4b75      	ldr	r3, [pc, #468]	@ (8005b5c <bme680_comprehensive_diagnostic+0x3c4>)
 8005988:	199b      	adds	r3, r3, r6
 800598a:	2208      	movs	r2, #8
 800598c:	4694      	mov	ip, r2
 800598e:	2208      	movs	r2, #8
 8005990:	4690      	mov	r8, r2
 8005992:	44b8      	add	r8, r7
 8005994:	44c4      	add	ip, r8
 8005996:	4463      	add	r3, ip
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	001c      	movs	r4, r3
 800599c:	4a70      	ldr	r2, [pc, #448]	@ (8005b60 <bme680_comprehensive_diagnostic+0x3c8>)
 800599e:	2380      	movs	r3, #128	@ 0x80
 80059a0:	0059      	lsls	r1, r3, #1
 80059a2:	182b      	adds	r3, r5, r0
 80059a4:	2008      	movs	r0, #8
 80059a6:	1838      	adds	r0, r7, r0
 80059a8:	1818      	adds	r0, r3, r0
 80059aa:	0023      	movs	r3, r4
 80059ac:	f00c f832 	bl	8011a14 <sniprintf>
                debug_print(debug_msg);
 80059b0:	2408      	movs	r4, #8
 80059b2:	192b      	adds	r3, r5, r4
 80059b4:	2208      	movs	r2, #8
 80059b6:	4694      	mov	ip, r2
 80059b8:	44bc      	add	ip, r7
 80059ba:	4463      	add	r3, ip
 80059bc:	0018      	movs	r0, r3
 80059be:	f7fe f805 	bl	80039cc <debug_print>
                
                if (chip_id == 0x61) {
 80059c2:	4b66      	ldr	r3, [pc, #408]	@ (8005b5c <bme680_comprehensive_diagnostic+0x3c4>)
 80059c4:	199b      	adds	r3, r3, r6
 80059c6:	2208      	movs	r2, #8
 80059c8:	4694      	mov	ip, r2
 80059ca:	2208      	movs	r2, #8
 80059cc:	4690      	mov	r8, r2
 80059ce:	44b8      	add	r8, r7
 80059d0:	44c4      	add	ip, r8
 80059d2:	4463      	add	r3, ip
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b61      	cmp	r3, #97	@ 0x61
 80059d8:	d113      	bne.n	8005a02 <bme680_comprehensive_diagnostic+0x26a>
                    snprintf(debug_msg, sizeof(debug_msg), "   ✓ Valid BME680 chip ID found!\r\n");
 80059da:	4a62      	ldr	r2, [pc, #392]	@ (8005b64 <bme680_comprehensive_diagnostic+0x3cc>)
 80059dc:	2380      	movs	r3, #128	@ 0x80
 80059de:	0059      	lsls	r1, r3, #1
 80059e0:	192b      	adds	r3, r5, r4
 80059e2:	2008      	movs	r0, #8
 80059e4:	4684      	mov	ip, r0
 80059e6:	44bc      	add	ip, r7
 80059e8:	4463      	add	r3, ip
 80059ea:	0018      	movs	r0, r3
 80059ec:	f00c f812 	bl	8011a14 <sniprintf>
                    debug_print(debug_msg);
 80059f0:	192b      	adds	r3, r5, r4
 80059f2:	2208      	movs	r2, #8
 80059f4:	4694      	mov	ip, r2
 80059f6:	44bc      	add	ip, r7
 80059f8:	4463      	add	r3, ip
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7fd ffe6 	bl	80039cc <debug_print>
 8005a00:	e055      	b.n	8005aae <bme680_comprehensive_diagnostic+0x316>
                } else {
                    snprintf(debug_msg, sizeof(debug_msg), "   ✗ Wrong chip ID - not a BME680\r\n");
 8005a02:	4a59      	ldr	r2, [pc, #356]	@ (8005b68 <bme680_comprehensive_diagnostic+0x3d0>)
 8005a04:	2380      	movs	r3, #128	@ 0x80
 8005a06:	0059      	lsls	r1, r3, #1
 8005a08:	2468      	movs	r4, #104	@ 0x68
 8005a0a:	2508      	movs	r5, #8
 8005a0c:	1963      	adds	r3, r4, r5
 8005a0e:	2008      	movs	r0, #8
 8005a10:	4684      	mov	ip, r0
 8005a12:	44bc      	add	ip, r7
 8005a14:	4463      	add	r3, ip
 8005a16:	0018      	movs	r0, r3
 8005a18:	f00b fffc 	bl	8011a14 <sniprintf>
                    debug_print(debug_msg);
 8005a1c:	1963      	adds	r3, r4, r5
 8005a1e:	2208      	movs	r2, #8
 8005a20:	4694      	mov	ip, r2
 8005a22:	44bc      	add	ip, r7
 8005a24:	4463      	add	r3, ip
 8005a26:	0018      	movs	r0, r3
 8005a28:	f7fd ffd0 	bl	80039cc <debug_print>
 8005a2c:	e03f      	b.n	8005aae <bme680_comprehensive_diagnostic+0x316>
                }
            } else {
                snprintf(debug_msg, sizeof(debug_msg), "   ✗ Failed to read chip ID\r\n");
 8005a2e:	4a4f      	ldr	r2, [pc, #316]	@ (8005b6c <bme680_comprehensive_diagnostic+0x3d4>)
 8005a30:	2380      	movs	r3, #128	@ 0x80
 8005a32:	0059      	lsls	r1, r3, #1
 8005a34:	2468      	movs	r4, #104	@ 0x68
 8005a36:	2508      	movs	r5, #8
 8005a38:	1963      	adds	r3, r4, r5
 8005a3a:	2008      	movs	r0, #8
 8005a3c:	4684      	mov	ip, r0
 8005a3e:	44bc      	add	ip, r7
 8005a40:	4463      	add	r3, ip
 8005a42:	0018      	movs	r0, r3
 8005a44:	f00b ffe6 	bl	8011a14 <sniprintf>
                debug_print(debug_msg);
 8005a48:	1963      	adds	r3, r4, r5
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	4694      	mov	ip, r2
 8005a4e:	44bc      	add	ip, r7
 8005a50:	4463      	add	r3, ip
 8005a52:	0018      	movs	r0, r3
 8005a54:	f7fd ffba 	bl	80039cc <debug_print>
 8005a58:	e029      	b.n	8005aae <bme680_comprehensive_diagnostic+0x316>
            }
        } else {
            snprintf(debug_msg, sizeof(debug_msg), "   ✗ No device at %s\r\n", addr_names[i]);
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <bme680_comprehensive_diagnostic+0x3b0>)
 8005a5c:	22c4      	movs	r2, #196	@ 0xc4
 8005a5e:	0052      	lsls	r2, r2, #1
 8005a60:	189b      	adds	r3, r3, r2
 8005a62:	2208      	movs	r2, #8
 8005a64:	4694      	mov	ip, r2
 8005a66:	2208      	movs	r2, #8
 8005a68:	4690      	mov	r8, r2
 8005a6a:	44b8      	add	r8, r7
 8005a6c:	44c4      	add	ip, r8
 8005a6e:	4463      	add	r3, ip
 8005a70:	22c0      	movs	r2, #192	@ 0xc0
 8005a72:	0052      	lsls	r2, r2, #1
 8005a74:	2008      	movs	r0, #8
 8005a76:	1812      	adds	r2, r2, r0
 8005a78:	2108      	movs	r1, #8
 8005a7a:	468c      	mov	ip, r1
 8005a7c:	44bc      	add	ip, r7
 8005a7e:	4462      	add	r2, ip
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	0092      	lsls	r2, r2, #2
 8005a84:	58d3      	ldr	r3, [r2, r3]
 8005a86:	4a3a      	ldr	r2, [pc, #232]	@ (8005b70 <bme680_comprehensive_diagnostic+0x3d8>)
 8005a88:	2180      	movs	r1, #128	@ 0x80
 8005a8a:	0049      	lsls	r1, r1, #1
 8005a8c:	2468      	movs	r4, #104	@ 0x68
 8005a8e:	0005      	movs	r5, r0
 8005a90:	1820      	adds	r0, r4, r0
 8005a92:	2608      	movs	r6, #8
 8005a94:	46b4      	mov	ip, r6
 8005a96:	44bc      	add	ip, r7
 8005a98:	4460      	add	r0, ip
 8005a9a:	f00b ffbb 	bl	8011a14 <sniprintf>
            debug_print(debug_msg);
 8005a9e:	1963      	adds	r3, r4, r5
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	4694      	mov	ip, r2
 8005aa4:	44bc      	add	ip, r7
 8005aa6:	4463      	add	r3, ip
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f7fd ff8f 	bl	80039cc <debug_print>
    for (int i = 0; i < 2; i++) {
 8005aae:	22c0      	movs	r2, #192	@ 0xc0
 8005ab0:	0052      	lsls	r2, r2, #1
 8005ab2:	2108      	movs	r1, #8
 8005ab4:	1853      	adds	r3, r2, r1
 8005ab6:	2008      	movs	r0, #8
 8005ab8:	4684      	mov	ip, r0
 8005aba:	44bc      	add	ip, r7
 8005abc:	4463      	add	r3, ip
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	1852      	adds	r2, r2, r1
 8005ac4:	2108      	movs	r1, #8
 8005ac6:	468c      	mov	ip, r1
 8005ac8:	44bc      	add	ip, r7
 8005aca:	4462      	add	r2, ip
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	23c0      	movs	r3, #192	@ 0xc0
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	189b      	adds	r3, r3, r2
 8005ad6:	2108      	movs	r1, #8
 8005ad8:	468c      	mov	ip, r1
 8005ada:	44bc      	add	ip, r7
 8005adc:	4463      	add	r3, ip
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	dc00      	bgt.n	8005ae6 <bme680_comprehensive_diagnostic+0x34e>
 8005ae4:	e693      	b.n	800580e <bme680_comprehensive_diagnostic+0x76>
        }
    }
    
    if (!device_found) {
 8005ae6:	23c2      	movs	r3, #194	@ 0xc2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	189b      	adds	r3, r3, r2
 8005aec:	2208      	movs	r2, #8
 8005aee:	4694      	mov	ip, r2
 8005af0:	44bc      	add	ip, r7
 8005af2:	4463      	add	r3, ip
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d14a      	bne.n	8005b90 <bme680_comprehensive_diagnostic+0x3f8>
        debug_print("   ✗ No I2C devices found - check wiring!\r\n");
 8005afa:	4b1e      	ldr	r3, [pc, #120]	@ (8005b74 <bme680_comprehensive_diagnostic+0x3dc>)
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7fd ff65 	bl	80039cc <debug_print>
        debug_print("   Wiring check:\r\n");
 8005b02:	4b1d      	ldr	r3, [pc, #116]	@ (8005b78 <bme680_comprehensive_diagnostic+0x3e0>)
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fd ff61 	bl	80039cc <debug_print>
        debug_print("     - PA9 (SCL) → BME680 SCL\r\n");
 8005b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005b7c <bme680_comprehensive_diagnostic+0x3e4>)
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f7fd ff5d 	bl	80039cc <debug_print>
        debug_print("     - PA10 (SDA) → BME680 SDA\r\n");
 8005b12:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <bme680_comprehensive_diagnostic+0x3e8>)
 8005b14:	0018      	movs	r0, r3
 8005b16:	f7fd ff59 	bl	80039cc <debug_print>
        debug_print("     - 3.3V → BME680 VCC\r\n");
 8005b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005b84 <bme680_comprehensive_diagnostic+0x3ec>)
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f7fd ff55 	bl	80039cc <debug_print>
        debug_print("     - GND → BME680 GND\r\n");
 8005b22:	4b19      	ldr	r3, [pc, #100]	@ (8005b88 <bme680_comprehensive_diagnostic+0x3f0>)
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7fd ff51 	bl	80039cc <debug_print>
        debug_print("     - Add 4.7kΩ pull-up resistors to SCL and SDA\r\n");
 8005b2a:	4b18      	ldr	r3, [pc, #96]	@ (8005b8c <bme680_comprehensive_diagnostic+0x3f4>)
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f7fd ff4d 	bl	80039cc <debug_print>
 8005b32:	f000 fc36 	bl	80063a2 <bme680_comprehensive_diagnostic+0xc0a>
 8005b36:	46c0      	nop			@ (mov r8, r8)
 8005b38:	08015368 	.word	0x08015368
 8005b3c:	08015394 	.word	0x08015394
 8005b40:	fffffeb8 	.word	0xfffffeb8
 8005b44:	00007776 	.word	0x00007776
 8005b48:	fffffeb0 	.word	0xfffffeb0
 8005b4c:	08014a90 	.word	0x08014a90
 8005b50:	080153bc 	.word	0x080153bc
 8005b54:	200002e4 	.word	0x200002e4
 8005b58:	080153d8 	.word	0x080153d8
 8005b5c:	fffffedf 	.word	0xfffffedf
 8005b60:	080153f8 	.word	0x080153f8
 8005b64:	08015424 	.word	0x08015424
 8005b68:	0801544c 	.word	0x0801544c
 8005b6c:	08015474 	.word	0x08015474
 8005b70:	08015494 	.word	0x08015494
 8005b74:	080154b0 	.word	0x080154b0
 8005b78:	080154e0 	.word	0x080154e0
 8005b7c:	080154f4 	.word	0x080154f4
 8005b80:	08015518 	.word	0x08015518
 8005b84:	0801553c 	.word	0x0801553c
 8005b88:	0801555c 	.word	0x0801555c
 8005b8c:	08015578 	.word	0x08015578
        return;
    }
    
    // 2. Test register access
    debug_print("\r\n2. Testing register access...\r\n");
 8005b90:	4be8      	ldr	r3, [pc, #928]	@ (8005f34 <bme680_comprehensive_diagnostic+0x79c>)
 8005b92:	0018      	movs	r0, r3
 8005b94:	f7fd ff1a 	bl	80039cc <debug_print>
    
    // Read multiple registers to test communication
    status = HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xD0, 
 8005b98:	2578      	movs	r5, #120	@ 0x78
 8005b9a:	35ff      	adds	r5, #255	@ 0xff
 8005b9c:	2608      	movs	r6, #8
 8005b9e:	19ab      	adds	r3, r5, r6
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	18ba      	adds	r2, r7, r2
 8005ba4:	189c      	adds	r4, r3, r2
 8005ba6:	48e4      	ldr	r0, [pc, #912]	@ (8005f38 <bme680_comprehensive_diagnostic+0x7a0>)
 8005ba8:	23fa      	movs	r3, #250	@ 0xfa
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	9302      	str	r3, [sp, #8]
 8005bae:	2308      	movs	r3, #8
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	2344      	movs	r3, #68	@ 0x44
 8005bb4:	199b      	adds	r3, r3, r6
 8005bb6:	2208      	movs	r2, #8
 8005bb8:	4694      	mov	ip, r2
 8005bba:	44bc      	add	ip, r7
 8005bbc:	4463      	add	r3, ip
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	22d0      	movs	r2, #208	@ 0xd0
 8005bc4:	21ec      	movs	r1, #236	@ 0xec
 8005bc6:	f007 f83f 	bl	800cc48 <HAL_I2C_Mem_Read>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	7023      	strb	r3, [r4, #0]
                              I2C_MEMADD_SIZE_8BIT, raw_data, 8, 1000);
    
    if (status == HAL_OK) {
 8005bce:	0030      	movs	r0, r6
 8005bd0:	182b      	adds	r3, r5, r0
 8005bd2:	2208      	movs	r2, #8
 8005bd4:	4694      	mov	ip, r2
 8005bd6:	44bc      	add	ip, r7
 8005bd8:	4463      	add	r3, ip
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d13a      	bne.n	8005c56 <bme680_comprehensive_diagnostic+0x4be>
        snprintf(debug_msg, sizeof(debug_msg), 
                 "   ✓ Register read successful: 0xD0=0x%02X, 0xD1=0x%02X, 0xD2=0x%02X\r\n",
                 raw_data[0], raw_data[1], raw_data[2]);
 8005be0:	4bd6      	ldr	r3, [pc, #856]	@ (8005f3c <bme680_comprehensive_diagnostic+0x7a4>)
 8005be2:	22c4      	movs	r2, #196	@ 0xc4
 8005be4:	0052      	lsls	r2, r2, #1
 8005be6:	189b      	adds	r3, r3, r2
 8005be8:	2108      	movs	r1, #8
 8005bea:	468c      	mov	ip, r1
 8005bec:	2108      	movs	r1, #8
 8005bee:	4688      	mov	r8, r1
 8005bf0:	44b8      	add	r8, r7
 8005bf2:	44c4      	add	ip, r8
 8005bf4:	4463      	add	r3, ip
 8005bf6:	781b      	ldrb	r3, [r3, #0]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005bf8:	001e      	movs	r6, r3
                 raw_data[0], raw_data[1], raw_data[2]);
 8005bfa:	4bd0      	ldr	r3, [pc, #832]	@ (8005f3c <bme680_comprehensive_diagnostic+0x7a4>)
 8005bfc:	189b      	adds	r3, r3, r2
 8005bfe:	2108      	movs	r1, #8
 8005c00:	468c      	mov	ip, r1
 8005c02:	2108      	movs	r1, #8
 8005c04:	4688      	mov	r8, r1
 8005c06:	44b8      	add	r8, r7
 8005c08:	44c4      	add	ip, r8
 8005c0a:	4463      	add	r3, ip
 8005c0c:	785b      	ldrb	r3, [r3, #1]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005c0e:	001c      	movs	r4, r3
                 raw_data[0], raw_data[1], raw_data[2]);
 8005c10:	4bca      	ldr	r3, [pc, #808]	@ (8005f3c <bme680_comprehensive_diagnostic+0x7a4>)
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	2208      	movs	r2, #8
 8005c16:	4694      	mov	ip, r2
 8005c18:	2208      	movs	r2, #8
 8005c1a:	4690      	mov	r8, r2
 8005c1c:	44b8      	add	r8, r7
 8005c1e:	44c4      	add	ip, r8
 8005c20:	4463      	add	r3, ip
 8005c22:	789b      	ldrb	r3, [r3, #2]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005c24:	001d      	movs	r5, r3
 8005c26:	4ac6      	ldr	r2, [pc, #792]	@ (8005f40 <bme680_comprehensive_diagnostic+0x7a8>)
 8005c28:	2380      	movs	r3, #128	@ 0x80
 8005c2a:	0059      	lsls	r1, r3, #1
 8005c2c:	2368      	movs	r3, #104	@ 0x68
 8005c2e:	181b      	adds	r3, r3, r0
 8005c30:	2008      	movs	r0, #8
 8005c32:	1838      	adds	r0, r7, r0
 8005c34:	1818      	adds	r0, r3, r0
 8005c36:	9501      	str	r5, [sp, #4]
 8005c38:	9400      	str	r4, [sp, #0]
 8005c3a:	0033      	movs	r3, r6
 8005c3c:	f00b feea 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8005c40:	2368      	movs	r3, #104	@ 0x68
 8005c42:	2008      	movs	r0, #8
 8005c44:	181b      	adds	r3, r3, r0
 8005c46:	2208      	movs	r2, #8
 8005c48:	4694      	mov	ip, r2
 8005c4a:	44bc      	add	ip, r7
 8005c4c:	4463      	add	r3, ip
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7fd febc 	bl	80039cc <debug_print>
 8005c54:	e01c      	b.n	8005c90 <bme680_comprehensive_diagnostic+0x4f8>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "   ✗ Register read failed: %d\r\n", status);
 8005c56:	2378      	movs	r3, #120	@ 0x78
 8005c58:	33ff      	adds	r3, #255	@ 0xff
 8005c5a:	2008      	movs	r0, #8
 8005c5c:	181b      	adds	r3, r3, r0
 8005c5e:	2208      	movs	r2, #8
 8005c60:	4694      	mov	ip, r2
 8005c62:	44bc      	add	ip, r7
 8005c64:	4463      	add	r3, ip
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	4ab6      	ldr	r2, [pc, #728]	@ (8005f44 <bme680_comprehensive_diagnostic+0x7ac>)
 8005c6a:	2180      	movs	r1, #128	@ 0x80
 8005c6c:	0049      	lsls	r1, r1, #1
 8005c6e:	2468      	movs	r4, #104	@ 0x68
 8005c70:	0005      	movs	r5, r0
 8005c72:	1820      	adds	r0, r4, r0
 8005c74:	2608      	movs	r6, #8
 8005c76:	46b4      	mov	ip, r6
 8005c78:	44bc      	add	ip, r7
 8005c7a:	4460      	add	r0, ip
 8005c7c:	f00b feca 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8005c80:	1963      	adds	r3, r4, r5
 8005c82:	2208      	movs	r2, #8
 8005c84:	4694      	mov	ip, r2
 8005c86:	44bc      	add	ip, r7
 8005c88:	4463      	add	r3, ip
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f7fd fe9e 	bl	80039cc <debug_print>
    }
    
    // 3. Test sensor initialization
    debug_print("\r\n3. Testing sensor initialization...\r\n");
 8005c90:	4bad      	ldr	r3, [pc, #692]	@ (8005f48 <bme680_comprehensive_diagnostic+0x7b0>)
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7fd fe9a 	bl	80039cc <debug_print>
    
    int8_t init_result = bme680_init_sensor();
 8005c98:	25bb      	movs	r5, #187	@ 0xbb
 8005c9a:	006d      	lsls	r5, r5, #1
 8005c9c:	2608      	movs	r6, #8
 8005c9e:	19ab      	adds	r3, r5, r6
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	18ba      	adds	r2, r7, r2
 8005ca4:	189c      	adds	r4, r3, r2
 8005ca6:	f7fe f8db 	bl	8003e60 <bme680_init_sensor>
 8005caa:	0003      	movs	r3, r0
 8005cac:	7023      	strb	r3, [r4, #0]
    snprintf(debug_msg, sizeof(debug_msg), "   Init result: %d\r\n", init_result);
 8005cae:	002c      	movs	r4, r5
 8005cb0:	19a3      	adds	r3, r4, r6
 8005cb2:	2208      	movs	r2, #8
 8005cb4:	4694      	mov	ip, r2
 8005cb6:	44bc      	add	ip, r7
 8005cb8:	4463      	add	r3, ip
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b25b      	sxtb	r3, r3
 8005cbe:	4698      	mov	r8, r3
 8005cc0:	4aa2      	ldr	r2, [pc, #648]	@ (8005f4c <bme680_comprehensive_diagnostic+0x7b4>)
 8005cc2:	2180      	movs	r1, #128	@ 0x80
 8005cc4:	0049      	lsls	r1, r1, #1
 8005cc6:	2568      	movs	r5, #104	@ 0x68
 8005cc8:	19a8      	adds	r0, r5, r6
 8005cca:	2308      	movs	r3, #8
 8005ccc:	469c      	mov	ip, r3
 8005cce:	44bc      	add	ip, r7
 8005cd0:	4460      	add	r0, ip
 8005cd2:	4643      	mov	r3, r8
 8005cd4:	f00b fe9e 	bl	8011a14 <sniprintf>
    debug_print(debug_msg);
 8005cd8:	19ab      	adds	r3, r5, r6
 8005cda:	2208      	movs	r2, #8
 8005cdc:	4694      	mov	ip, r2
 8005cde:	44bc      	add	ip, r7
 8005ce0:	4463      	add	r3, ip
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7fd fe72 	bl	80039cc <debug_print>
    
    if (init_result == BME68X_OK) {
 8005ce8:	19a3      	adds	r3, r4, r6
 8005cea:	2208      	movs	r2, #8
 8005cec:	4694      	mov	ip, r2
 8005cee:	44bc      	add	ip, r7
 8005cf0:	4463      	add	r3, ip
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b25b      	sxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <bme680_comprehensive_diagnostic+0x56c>
        debug_print("   ✓ Sensor initialization successful\r\n");
 8005cfa:	4b95      	ldr	r3, [pc, #596]	@ (8005f50 <bme680_comprehensive_diagnostic+0x7b8>)
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7fd fe65 	bl	80039cc <debug_print>
 8005d02:	e013      	b.n	8005d2c <bme680_comprehensive_diagnostic+0x594>
    } else {
        debug_print("   ✗ Sensor initialization failed\r\n");
 8005d04:	4b93      	ldr	r3, [pc, #588]	@ (8005f54 <bme680_comprehensive_diagnostic+0x7bc>)
 8005d06:	0018      	movs	r0, r3
 8005d08:	f7fd fe60 	bl	80039cc <debug_print>
        debug_print("   Possible causes:\r\n");
 8005d0c:	4b92      	ldr	r3, [pc, #584]	@ (8005f58 <bme680_comprehensive_diagnostic+0x7c0>)
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f7fd fe5c 	bl	80039cc <debug_print>
        debug_print("     - Wrong I2C address\r\n");
 8005d14:	4b91      	ldr	r3, [pc, #580]	@ (8005f5c <bme680_comprehensive_diagnostic+0x7c4>)
 8005d16:	0018      	movs	r0, r3
 8005d18:	f7fd fe58 	bl	80039cc <debug_print>
        debug_print("     - Power supply issues\r\n");
 8005d1c:	4b90      	ldr	r3, [pc, #576]	@ (8005f60 <bme680_comprehensive_diagnostic+0x7c8>)
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f7fd fe54 	bl	80039cc <debug_print>
        debug_print("     - Communication timing issues\r\n");
 8005d24:	4b8f      	ldr	r3, [pc, #572]	@ (8005f64 <bme680_comprehensive_diagnostic+0x7cc>)
 8005d26:	0018      	movs	r0, r3
 8005d28:	f7fd fe50 	bl	80039cc <debug_print>
    }
    
    // 4. Test sensor data reading
    debug_print("\r\n4. Testing sensor data reading...\r\n");
 8005d2c:	4b8e      	ldr	r3, [pc, #568]	@ (8005f68 <bme680_comprehensive_diagnostic+0x7d0>)
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f7fd fe4c 	bl	80039cc <debug_print>
    
    struct bme68x_data sensor_data;
    int8_t read_result = bme680_read_sensor_data(&sensor_data);
 8005d34:	2576      	movs	r5, #118	@ 0x76
 8005d36:	35ff      	adds	r5, #255	@ 0xff
 8005d38:	2608      	movs	r6, #8
 8005d3a:	19ab      	adds	r3, r5, r6
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	18ba      	adds	r2, r7, r2
 8005d40:	189c      	adds	r4, r3, r2
 8005d42:	2320      	movs	r3, #32
 8005d44:	199b      	adds	r3, r3, r6
 8005d46:	2208      	movs	r2, #8
 8005d48:	4694      	mov	ip, r2
 8005d4a:	44bc      	add	ip, r7
 8005d4c:	4463      	add	r3, ip
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f7fe fa02 	bl	8004158 <bme680_read_sensor_data>
 8005d54:	0003      	movs	r3, r0
 8005d56:	7023      	strb	r3, [r4, #0]
    snprintf(debug_msg, sizeof(debug_msg), "   Read result: %d\r\n", read_result);
 8005d58:	19ab      	adds	r3, r5, r6
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	4694      	mov	ip, r2
 8005d5e:	44bc      	add	ip, r7
 8005d60:	4463      	add	r3, ip
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	4698      	mov	r8, r3
 8005d68:	4a80      	ldr	r2, [pc, #512]	@ (8005f6c <bme680_comprehensive_diagnostic+0x7d4>)
 8005d6a:	2180      	movs	r1, #128	@ 0x80
 8005d6c:	0049      	lsls	r1, r1, #1
 8005d6e:	2468      	movs	r4, #104	@ 0x68
 8005d70:	19a0      	adds	r0, r4, r6
 8005d72:	2308      	movs	r3, #8
 8005d74:	469c      	mov	ip, r3
 8005d76:	44bc      	add	ip, r7
 8005d78:	4460      	add	r0, ip
 8005d7a:	4643      	mov	r3, r8
 8005d7c:	f00b fe4a 	bl	8011a14 <sniprintf>
    debug_print(debug_msg);
 8005d80:	19a3      	adds	r3, r4, r6
 8005d82:	2208      	movs	r2, #8
 8005d84:	4694      	mov	ip, r2
 8005d86:	44bc      	add	ip, r7
 8005d88:	4463      	add	r3, ip
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f7fd fe1e 	bl	80039cc <debug_print>
    
    if (read_result == BME68X_OK) {
 8005d90:	0034      	movs	r4, r6
 8005d92:	19ab      	adds	r3, r5, r6
 8005d94:	2208      	movs	r2, #8
 8005d96:	4694      	mov	ip, r2
 8005d98:	44bc      	add	ip, r7
 8005d9a:	4463      	add	r3, ip
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	b25b      	sxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d000      	beq.n	8005da6 <bme680_comprehensive_diagnostic+0x60e>
 8005da4:	e0f0      	b.n	8005f88 <bme680_comprehensive_diagnostic+0x7f0>
        debug_print("   ✓ Sensor data read successful\r\n");
 8005da6:	4b72      	ldr	r3, [pc, #456]	@ (8005f70 <bme680_comprehensive_diagnostic+0x7d8>)
 8005da8:	0018      	movs	r0, r3
 8005daa:	f7fd fe0f 	bl	80039cc <debug_print>
        
        // Check if values are reasonable
        snprintf(debug_msg, sizeof(debug_msg), 
                 "   Raw values - Temp: %.6f, Press: %.6f, Hum: %.6f\r\n",
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 8005dae:	4b71      	ldr	r3, [pc, #452]	@ (8005f74 <bme680_comprehensive_diagnostic+0x7dc>)
 8005db0:	26c4      	movs	r6, #196	@ 0xc4
 8005db2:	0076      	lsls	r6, r6, #1
 8005db4:	199b      	adds	r3, r3, r6
 8005db6:	2208      	movs	r2, #8
 8005db8:	4694      	mov	ip, r2
 8005dba:	2208      	movs	r2, #8
 8005dbc:	4690      	mov	r8, r2
 8005dbe:	44b8      	add	r8, r7
 8005dc0:	44c4      	add	ip, r8
 8005dc2:	4463      	add	r3, ip
 8005dc4:	689b      	ldr	r3, [r3, #8]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005dc6:	1c18      	adds	r0, r3, #0
 8005dc8:	f7fd fd0c 	bl	80037e4 <__aeabi_f2d>
 8005dcc:	6038      	str	r0, [r7, #0]
 8005dce:	6079      	str	r1, [r7, #4]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 8005dd0:	4b68      	ldr	r3, [pc, #416]	@ (8005f74 <bme680_comprehensive_diagnostic+0x7dc>)
 8005dd2:	199b      	adds	r3, r3, r6
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	4694      	mov	ip, r2
 8005dd8:	2208      	movs	r2, #8
 8005dda:	4690      	mov	r8, r2
 8005ddc:	44b8      	add	r8, r7
 8005dde:	44c4      	add	ip, r8
 8005de0:	4463      	add	r3, ip
 8005de2:	68db      	ldr	r3, [r3, #12]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005de4:	1c18      	adds	r0, r3, #0
 8005de6:	f7fd fcfd 	bl	80037e4 <__aeabi_f2d>
 8005dea:	60b8      	str	r0, [r7, #8]
 8005dec:	60f9      	str	r1, [r7, #12]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 8005dee:	4b61      	ldr	r3, [pc, #388]	@ (8005f74 <bme680_comprehensive_diagnostic+0x7dc>)
 8005df0:	199b      	adds	r3, r3, r6
 8005df2:	2208      	movs	r2, #8
 8005df4:	4694      	mov	ip, r2
 8005df6:	2208      	movs	r2, #8
 8005df8:	4690      	mov	r8, r2
 8005dfa:	44b8      	add	r8, r7
 8005dfc:	44c4      	add	ip, r8
 8005dfe:	4463      	add	r3, ip
 8005e00:	691b      	ldr	r3, [r3, #16]
        snprintf(debug_msg, sizeof(debug_msg), 
 8005e02:	1c18      	adds	r0, r3, #0
 8005e04:	f7fd fcee 	bl	80037e4 <__aeabi_f2d>
 8005e08:	0002      	movs	r2, r0
 8005e0a:	000b      	movs	r3, r1
 8005e0c:	4e5a      	ldr	r6, [pc, #360]	@ (8005f78 <bme680_comprehensive_diagnostic+0x7e0>)
 8005e0e:	2180      	movs	r1, #128	@ 0x80
 8005e10:	0049      	lsls	r1, r1, #1
 8005e12:	2068      	movs	r0, #104	@ 0x68
 8005e14:	1900      	adds	r0, r0, r4
 8005e16:	2508      	movs	r5, #8
 8005e18:	46ac      	mov	ip, r5
 8005e1a:	44bc      	add	ip, r7
 8005e1c:	4460      	add	r0, ip
 8005e1e:	9204      	str	r2, [sp, #16]
 8005e20:	9305      	str	r3, [sp, #20]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	9202      	str	r2, [sp, #8]
 8005e28:	9303      	str	r3, [sp, #12]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	9200      	str	r2, [sp, #0]
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	0032      	movs	r2, r6
 8005e34:	f00b fdee 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8005e38:	2068      	movs	r0, #104	@ 0x68
 8005e3a:	0026      	movs	r6, r4
 8005e3c:	1983      	adds	r3, r0, r6
 8005e3e:	2208      	movs	r2, #8
 8005e40:	4694      	mov	ip, r2
 8005e42:	44bc      	add	ip, r7
 8005e44:	4463      	add	r3, ip
 8005e46:	0018      	movs	r0, r3
 8005e48:	f7fd fdc0 	bl	80039cc <debug_print>
        
        // Check for zero or invalid values
        if (sensor_data.temperature == 0.0f && sensor_data.pressure == 0.0f && sensor_data.humidity == 0.0f) {
 8005e4c:	4b49      	ldr	r3, [pc, #292]	@ (8005f74 <bme680_comprehensive_diagnostic+0x7dc>)
 8005e4e:	24c4      	movs	r4, #196	@ 0xc4
 8005e50:	0064      	lsls	r4, r4, #1
 8005e52:	191b      	adds	r3, r3, r4
 8005e54:	2208      	movs	r2, #8
 8005e56:	4694      	mov	ip, r2
 8005e58:	2208      	movs	r2, #8
 8005e5a:	4690      	mov	r8, r2
 8005e5c:	44b8      	add	r8, r7
 8005e5e:	44c4      	add	ip, r8
 8005e60:	4463      	add	r3, ip
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2100      	movs	r1, #0
 8005e66:	1c18      	adds	r0, r3, #0
 8005e68:	f7fa fb32 	bl	80004d0 <__aeabi_fcmpeq>
 8005e6c:	1e03      	subs	r3, r0, #0
 8005e6e:	d024      	beq.n	8005eba <bme680_comprehensive_diagnostic+0x722>
 8005e70:	4b40      	ldr	r3, [pc, #256]	@ (8005f74 <bme680_comprehensive_diagnostic+0x7dc>)
 8005e72:	191b      	adds	r3, r3, r4
 8005e74:	2208      	movs	r2, #8
 8005e76:	4694      	mov	ip, r2
 8005e78:	2208      	movs	r2, #8
 8005e7a:	4690      	mov	r8, r2
 8005e7c:	44b8      	add	r8, r7
 8005e7e:	44c4      	add	ip, r8
 8005e80:	4463      	add	r3, ip
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2100      	movs	r1, #0
 8005e86:	1c18      	adds	r0, r3, #0
 8005e88:	f7fa fb22 	bl	80004d0 <__aeabi_fcmpeq>
 8005e8c:	1e03      	subs	r3, r0, #0
 8005e8e:	d014      	beq.n	8005eba <bme680_comprehensive_diagnostic+0x722>
 8005e90:	4b38      	ldr	r3, [pc, #224]	@ (8005f74 <bme680_comprehensive_diagnostic+0x7dc>)
 8005e92:	191b      	adds	r3, r3, r4
 8005e94:	2208      	movs	r2, #8
 8005e96:	4694      	mov	ip, r2
 8005e98:	2208      	movs	r2, #8
 8005e9a:	4690      	mov	r8, r2
 8005e9c:	44b8      	add	r8, r7
 8005e9e:	44c4      	add	ip, r8
 8005ea0:	4463      	add	r3, ip
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	1c18      	adds	r0, r3, #0
 8005ea8:	f7fa fb12 	bl	80004d0 <__aeabi_fcmpeq>
 8005eac:	1e03      	subs	r3, r0, #0
 8005eae:	d004      	beq.n	8005eba <bme680_comprehensive_diagnostic+0x722>
            debug_print("   ⚠ All values are zero - possible library issue\r\n");
 8005eb0:	4b32      	ldr	r3, [pc, #200]	@ (8005f7c <bme680_comprehensive_diagnostic+0x7e4>)
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f7fd fd8a 	bl	80039cc <debug_print>
 8005eb8:	e06a      	b.n	8005f90 <bme680_comprehensive_diagnostic+0x7f8>
        } else if (isnan(sensor_data.temperature) || isnan(sensor_data.pressure) || isnan(sensor_data.humidity)) {
 8005eba:	4b2e      	ldr	r3, [pc, #184]	@ (8005f74 <bme680_comprehensive_diagnostic+0x7dc>)
 8005ebc:	24c4      	movs	r4, #196	@ 0xc4
 8005ebe:	0064      	lsls	r4, r4, #1
 8005ec0:	191b      	adds	r3, r3, r4
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	4694      	mov	ip, r2
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	4690      	mov	r8, r2
 8005eca:	44b8      	add	r8, r7
 8005ecc:	44c4      	add	ip, r8
 8005ece:	4463      	add	r3, ip
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	1c19      	adds	r1, r3, #0
 8005ed4:	1c18      	adds	r0, r3, #0
 8005ed6:	f7fb fc19 	bl	800170c <__aeabi_fcmpun>
 8005eda:	1e03      	subs	r3, r0, #0
 8005edc:	d11f      	bne.n	8005f1e <bme680_comprehensive_diagnostic+0x786>
 8005ede:	4b25      	ldr	r3, [pc, #148]	@ (8005f74 <bme680_comprehensive_diagnostic+0x7dc>)
 8005ee0:	191b      	adds	r3, r3, r4
 8005ee2:	2208      	movs	r2, #8
 8005ee4:	4694      	mov	ip, r2
 8005ee6:	2208      	movs	r2, #8
 8005ee8:	4690      	mov	r8, r2
 8005eea:	44b8      	add	r8, r7
 8005eec:	44c4      	add	ip, r8
 8005eee:	4463      	add	r3, ip
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	1c19      	adds	r1, r3, #0
 8005ef4:	1c18      	adds	r0, r3, #0
 8005ef6:	f7fb fc09 	bl	800170c <__aeabi_fcmpun>
 8005efa:	1e03      	subs	r3, r0, #0
 8005efc:	d10f      	bne.n	8005f1e <bme680_comprehensive_diagnostic+0x786>
 8005efe:	4b1d      	ldr	r3, [pc, #116]	@ (8005f74 <bme680_comprehensive_diagnostic+0x7dc>)
 8005f00:	191b      	adds	r3, r3, r4
 8005f02:	2208      	movs	r2, #8
 8005f04:	4694      	mov	ip, r2
 8005f06:	2208      	movs	r2, #8
 8005f08:	4690      	mov	r8, r2
 8005f0a:	44b8      	add	r8, r7
 8005f0c:	44c4      	add	ip, r8
 8005f0e:	4463      	add	r3, ip
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	1c19      	adds	r1, r3, #0
 8005f14:	1c18      	adds	r0, r3, #0
 8005f16:	f7fb fbf9 	bl	800170c <__aeabi_fcmpun>
 8005f1a:	1e03      	subs	r3, r0, #0
 8005f1c:	d004      	beq.n	8005f28 <bme680_comprehensive_diagnostic+0x790>
            debug_print("   ⚠ Invalid values detected (NaN)\r\n");
 8005f1e:	4b18      	ldr	r3, [pc, #96]	@ (8005f80 <bme680_comprehensive_diagnostic+0x7e8>)
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7fd fd53 	bl	80039cc <debug_print>
 8005f26:	e033      	b.n	8005f90 <bme680_comprehensive_diagnostic+0x7f8>
        } else {
            debug_print("   ✓ Values appear valid\r\n");
 8005f28:	4b16      	ldr	r3, [pc, #88]	@ (8005f84 <bme680_comprehensive_diagnostic+0x7ec>)
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f7fd fd4e 	bl	80039cc <debug_print>
 8005f30:	e02e      	b.n	8005f90 <bme680_comprehensive_diagnostic+0x7f8>
 8005f32:	46c0      	nop			@ (mov r8, r8)
 8005f34:	080155b0 	.word	0x080155b0
 8005f38:	200002e4 	.word	0x200002e4
 8005f3c:	fffffebc 	.word	0xfffffebc
 8005f40:	080155d4 	.word	0x080155d4
 8005f44:	08015620 	.word	0x08015620
 8005f48:	08015644 	.word	0x08015644
 8005f4c:	0801566c 	.word	0x0801566c
 8005f50:	08015684 	.word	0x08015684
 8005f54:	080156b0 	.word	0x080156b0
 8005f58:	080156d8 	.word	0x080156d8
 8005f5c:	080156f0 	.word	0x080156f0
 8005f60:	0801570c 	.word	0x0801570c
 8005f64:	0801572c 	.word	0x0801572c
 8005f68:	08015754 	.word	0x08015754
 8005f6c:	0801577c 	.word	0x0801577c
 8005f70:	08015794 	.word	0x08015794
 8005f74:	fffffe98 	.word	0xfffffe98
 8005f78:	080157bc 	.word	0x080157bc
 8005f7c:	080157f4 	.word	0x080157f4
 8005f80:	0801582c 	.word	0x0801582c
 8005f84:	08015854 	.word	0x08015854
        }
    } else {
        debug_print("   ✗ Sensor data read failed\r\n");
 8005f88:	4bda      	ldr	r3, [pc, #872]	@ (80062f4 <bme680_comprehensive_diagnostic+0xb5c>)
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f7fd fd1e 	bl	80039cc <debug_print>
    }
    
    // 5. Test raw register reading
    debug_print("\r\n5. Testing raw register reading...\r\n");
 8005f90:	4bd9      	ldr	r3, [pc, #868]	@ (80062f8 <bme680_comprehensive_diagnostic+0xb60>)
 8005f92:	0018      	movs	r0, r3
 8005f94:	f7fd fd1a 	bl	80039cc <debug_print>
    
    // Read temperature, pressure, and humidity registers
    status = HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x22, 
 8005f98:	2578      	movs	r5, #120	@ 0x78
 8005f9a:	35ff      	adds	r5, #255	@ 0xff
 8005f9c:	2608      	movs	r6, #8
 8005f9e:	19ab      	adds	r3, r5, r6
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	18ba      	adds	r2, r7, r2
 8005fa4:	189c      	adds	r4, r3, r2
 8005fa6:	48d5      	ldr	r0, [pc, #852]	@ (80062fc <bme680_comprehensive_diagnostic+0xb64>)
 8005fa8:	23fa      	movs	r3, #250	@ 0xfa
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	9302      	str	r3, [sp, #8]
 8005fae:	2308      	movs	r3, #8
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	2344      	movs	r3, #68	@ 0x44
 8005fb4:	199b      	adds	r3, r3, r6
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	4694      	mov	ip, r2
 8005fba:	44bc      	add	ip, r7
 8005fbc:	4463      	add	r3, ip
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	2222      	movs	r2, #34	@ 0x22
 8005fc4:	21ec      	movs	r1, #236	@ 0xec
 8005fc6:	f006 fe3f 	bl	800cc48 <HAL_I2C_Mem_Read>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	7023      	strb	r3, [r4, #0]
                              I2C_MEMADD_SIZE_8BIT, raw_data, 8, 1000);
    
    if (status == HAL_OK) {
 8005fce:	0034      	movs	r4, r6
 8005fd0:	192b      	adds	r3, r5, r4
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	4694      	mov	ip, r2
 8005fd6:	44bc      	add	ip, r7
 8005fd8:	4463      	add	r3, ip
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d000      	beq.n	8005fe2 <bme680_comprehensive_diagnostic+0x84a>
 8005fe0:	e0cf      	b.n	8006182 <bme680_comprehensive_diagnostic+0x9ea>
        uint32_t temp_raw = ((uint32_t)raw_data[0] << 12) | ((uint32_t)raw_data[1] << 4) | ((uint32_t)raw_data[2] >> 4);
 8005fe2:	4bc7      	ldr	r3, [pc, #796]	@ (8006300 <bme680_comprehensive_diagnostic+0xb68>)
 8005fe4:	21c4      	movs	r1, #196	@ 0xc4
 8005fe6:	0049      	lsls	r1, r1, #1
 8005fe8:	185b      	adds	r3, r3, r1
 8005fea:	2208      	movs	r2, #8
 8005fec:	4694      	mov	ip, r2
 8005fee:	2208      	movs	r2, #8
 8005ff0:	4690      	mov	r8, r2
 8005ff2:	44b8      	add	r8, r7
 8005ff4:	44c4      	add	ip, r8
 8005ff6:	4463      	add	r3, ip
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	031a      	lsls	r2, r3, #12
 8005ffc:	4bc0      	ldr	r3, [pc, #768]	@ (8006300 <bme680_comprehensive_diagnostic+0xb68>)
 8005ffe:	185b      	adds	r3, r3, r1
 8006000:	2008      	movs	r0, #8
 8006002:	4684      	mov	ip, r0
 8006004:	2008      	movs	r0, #8
 8006006:	4680      	mov	r8, r0
 8006008:	44b8      	add	r8, r7
 800600a:	44c4      	add	ip, r8
 800600c:	4463      	add	r3, ip
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	4313      	orrs	r3, r2
 8006014:	4aba      	ldr	r2, [pc, #744]	@ (8006300 <bme680_comprehensive_diagnostic+0xb68>)
 8006016:	1852      	adds	r2, r2, r1
 8006018:	2008      	movs	r0, #8
 800601a:	4684      	mov	ip, r0
 800601c:	2008      	movs	r0, #8
 800601e:	4680      	mov	r8, r0
 8006020:	44b8      	add	r8, r7
 8006022:	44c4      	add	ip, r8
 8006024:	4462      	add	r2, ip
 8006026:	7892      	ldrb	r2, [r2, #2]
 8006028:	0912      	lsrs	r2, r2, #4
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	4313      	orrs	r3, r2
 800602e:	20b8      	movs	r0, #184	@ 0xb8
 8006030:	0040      	lsls	r0, r0, #1
 8006032:	1902      	adds	r2, r0, r4
 8006034:	2508      	movs	r5, #8
 8006036:	46ac      	mov	ip, r5
 8006038:	44bc      	add	ip, r7
 800603a:	4462      	add	r2, ip
 800603c:	6013      	str	r3, [r2, #0]
        uint32_t press_raw = ((uint32_t)raw_data[3] << 12) | ((uint32_t)raw_data[4] << 4) | ((uint32_t)raw_data[5] >> 4);
 800603e:	4bb0      	ldr	r3, [pc, #704]	@ (8006300 <bme680_comprehensive_diagnostic+0xb68>)
 8006040:	185b      	adds	r3, r3, r1
 8006042:	2208      	movs	r2, #8
 8006044:	4694      	mov	ip, r2
 8006046:	2208      	movs	r2, #8
 8006048:	4690      	mov	r8, r2
 800604a:	44b8      	add	r8, r7
 800604c:	44c4      	add	ip, r8
 800604e:	4463      	add	r3, ip
 8006050:	78db      	ldrb	r3, [r3, #3]
 8006052:	031a      	lsls	r2, r3, #12
 8006054:	4baa      	ldr	r3, [pc, #680]	@ (8006300 <bme680_comprehensive_diagnostic+0xb68>)
 8006056:	185b      	adds	r3, r3, r1
 8006058:	2508      	movs	r5, #8
 800605a:	46ac      	mov	ip, r5
 800605c:	2508      	movs	r5, #8
 800605e:	46a8      	mov	r8, r5
 8006060:	44b8      	add	r8, r7
 8006062:	44c4      	add	ip, r8
 8006064:	4463      	add	r3, ip
 8006066:	791b      	ldrb	r3, [r3, #4]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	4313      	orrs	r3, r2
 800606c:	4aa4      	ldr	r2, [pc, #656]	@ (8006300 <bme680_comprehensive_diagnostic+0xb68>)
 800606e:	1852      	adds	r2, r2, r1
 8006070:	2508      	movs	r5, #8
 8006072:	46ac      	mov	ip, r5
 8006074:	2508      	movs	r5, #8
 8006076:	46a8      	mov	r8, r5
 8006078:	44b8      	add	r8, r7
 800607a:	44c4      	add	ip, r8
 800607c:	4462      	add	r2, ip
 800607e:	7952      	ldrb	r2, [r2, #5]
 8006080:	0912      	lsrs	r2, r2, #4
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	4313      	orrs	r3, r2
 8006086:	26b6      	movs	r6, #182	@ 0xb6
 8006088:	0076      	lsls	r6, r6, #1
 800608a:	1932      	adds	r2, r6, r4
 800608c:	2508      	movs	r5, #8
 800608e:	46ac      	mov	ip, r5
 8006090:	44bc      	add	ip, r7
 8006092:	4462      	add	r2, ip
 8006094:	6013      	str	r3, [r2, #0]
        uint16_t hum_raw = ((uint16_t)raw_data[6] << 8) | raw_data[7];
 8006096:	4b9a      	ldr	r3, [pc, #616]	@ (8006300 <bme680_comprehensive_diagnostic+0xb68>)
 8006098:	185b      	adds	r3, r3, r1
 800609a:	2208      	movs	r2, #8
 800609c:	4694      	mov	ip, r2
 800609e:	2208      	movs	r2, #8
 80060a0:	4690      	mov	r8, r2
 80060a2:	44b8      	add	r8, r7
 80060a4:	44c4      	add	ip, r8
 80060a6:	4463      	add	r3, ip
 80060a8:	799b      	ldrb	r3, [r3, #6]
 80060aa:	b21b      	sxth	r3, r3
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	b21a      	sxth	r2, r3
 80060b0:	4b93      	ldr	r3, [pc, #588]	@ (8006300 <bme680_comprehensive_diagnostic+0xb68>)
 80060b2:	185b      	adds	r3, r3, r1
 80060b4:	2108      	movs	r1, #8
 80060b6:	468c      	mov	ip, r1
 80060b8:	2108      	movs	r1, #8
 80060ba:	4688      	mov	r8, r1
 80060bc:	44b8      	add	r8, r7
 80060be:	44c4      	add	ip, r8
 80060c0:	4463      	add	r3, ip
 80060c2:	79db      	ldrb	r3, [r3, #7]
 80060c4:	b21b      	sxth	r3, r3
 80060c6:	4313      	orrs	r3, r2
 80060c8:	b21a      	sxth	r2, r3
 80060ca:	21b5      	movs	r1, #181	@ 0xb5
 80060cc:	0049      	lsls	r1, r1, #1
 80060ce:	190b      	adds	r3, r1, r4
 80060d0:	2508      	movs	r5, #8
 80060d2:	46ac      	mov	ip, r5
 80060d4:	44bc      	add	ip, r7
 80060d6:	4463      	add	r3, ip
 80060d8:	801a      	strh	r2, [r3, #0]
        
        snprintf(debug_msg, sizeof(debug_msg), 
 80060da:	190b      	adds	r3, r1, r4
 80060dc:	2208      	movs	r2, #8
 80060de:	4694      	mov	ip, r2
 80060e0:	44bc      	add	ip, r7
 80060e2:	4463      	add	r3, ip
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	0005      	movs	r5, r0
 80060e8:	1902      	adds	r2, r0, r4
 80060ea:	2108      	movs	r1, #8
 80060ec:	468c      	mov	ip, r1
 80060ee:	44bc      	add	ip, r7
 80060f0:	4462      	add	r2, ip
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	4694      	mov	ip, r2
 80060f6:	4a83      	ldr	r2, [pc, #524]	@ (8006304 <bme680_comprehensive_diagnostic+0xb6c>)
 80060f8:	4691      	mov	r9, r2
 80060fa:	2180      	movs	r1, #128	@ 0x80
 80060fc:	0049      	lsls	r1, r1, #1
 80060fe:	2068      	movs	r0, #104	@ 0x68
 8006100:	1900      	adds	r0, r0, r4
 8006102:	2208      	movs	r2, #8
 8006104:	4690      	mov	r8, r2
 8006106:	44b8      	add	r8, r7
 8006108:	4440      	add	r0, r8
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	0023      	movs	r3, r4
 800610e:	001c      	movs	r4, r3
 8006110:	18f3      	adds	r3, r6, r3
 8006112:	2208      	movs	r2, #8
 8006114:	4690      	mov	r8, r2
 8006116:	44b8      	add	r8, r7
 8006118:	4443      	add	r3, r8
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	4663      	mov	r3, ip
 8006120:	464a      	mov	r2, r9
 8006122:	f00b fc77 	bl	8011a14 <sniprintf>
                 "   Raw ADC values - Temp: %lu, Press: %lu, Hum: %u\r\n",
                 temp_raw, press_raw, hum_raw);
        debug_print(debug_msg);
 8006126:	2068      	movs	r0, #104	@ 0x68
 8006128:	1903      	adds	r3, r0, r4
 800612a:	2208      	movs	r2, #8
 800612c:	4694      	mov	ip, r2
 800612e:	44bc      	add	ip, r7
 8006130:	4463      	add	r3, ip
 8006132:	0018      	movs	r0, r3
 8006134:	f7fd fc4a 	bl	80039cc <debug_print>
        
        // Check if raw values are reasonable (not all zeros)
        if (temp_raw == 0 && press_raw == 0 && hum_raw == 0) {
 8006138:	0022      	movs	r2, r4
 800613a:	18ab      	adds	r3, r5, r2
 800613c:	2108      	movs	r1, #8
 800613e:	468c      	mov	ip, r1
 8006140:	44bc      	add	ip, r7
 8006142:	4463      	add	r3, ip
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d116      	bne.n	8006178 <bme680_comprehensive_diagnostic+0x9e0>
 800614a:	18b3      	adds	r3, r6, r2
 800614c:	2108      	movs	r1, #8
 800614e:	468c      	mov	ip, r1
 8006150:	44bc      	add	ip, r7
 8006152:	4463      	add	r3, ip
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10e      	bne.n	8006178 <bme680_comprehensive_diagnostic+0x9e0>
 800615a:	21b5      	movs	r1, #181	@ 0xb5
 800615c:	0049      	lsls	r1, r1, #1
 800615e:	188b      	adds	r3, r1, r2
 8006160:	2208      	movs	r2, #8
 8006162:	4694      	mov	ip, r2
 8006164:	44bc      	add	ip, r7
 8006166:	4463      	add	r3, ip
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <bme680_comprehensive_diagnostic+0x9e0>
            debug_print("   ⚠ All raw ADC values are zero - sensor may not be measuring\r\n");
 800616e:	4b66      	ldr	r3, [pc, #408]	@ (8006308 <bme680_comprehensive_diagnostic+0xb70>)
 8006170:	0018      	movs	r0, r3
 8006172:	f7fd fc2b 	bl	80039cc <debug_print>
 8006176:	e021      	b.n	80061bc <bme680_comprehensive_diagnostic+0xa24>
        } else {
            debug_print("   ✓ Raw ADC values appear valid\r\n");
 8006178:	4b64      	ldr	r3, [pc, #400]	@ (800630c <bme680_comprehensive_diagnostic+0xb74>)
 800617a:	0018      	movs	r0, r3
 800617c:	f7fd fc26 	bl	80039cc <debug_print>
 8006180:	e01c      	b.n	80061bc <bme680_comprehensive_diagnostic+0xa24>
        }
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "   ✗ Raw register read failed: %d\r\n", status);
 8006182:	2378      	movs	r3, #120	@ 0x78
 8006184:	33ff      	adds	r3, #255	@ 0xff
 8006186:	2008      	movs	r0, #8
 8006188:	181b      	adds	r3, r3, r0
 800618a:	2208      	movs	r2, #8
 800618c:	4694      	mov	ip, r2
 800618e:	44bc      	add	ip, r7
 8006190:	4463      	add	r3, ip
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	4a5e      	ldr	r2, [pc, #376]	@ (8006310 <bme680_comprehensive_diagnostic+0xb78>)
 8006196:	2180      	movs	r1, #128	@ 0x80
 8006198:	0049      	lsls	r1, r1, #1
 800619a:	2468      	movs	r4, #104	@ 0x68
 800619c:	0005      	movs	r5, r0
 800619e:	1820      	adds	r0, r4, r0
 80061a0:	2608      	movs	r6, #8
 80061a2:	46b4      	mov	ip, r6
 80061a4:	44bc      	add	ip, r7
 80061a6:	4460      	add	r0, ip
 80061a8:	f00b fc34 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 80061ac:	1963      	adds	r3, r4, r5
 80061ae:	2208      	movs	r2, #8
 80061b0:	4694      	mov	ip, r2
 80061b2:	44bc      	add	ip, r7
 80061b4:	4463      	add	r3, ip
 80061b6:	0018      	movs	r0, r3
 80061b8:	f7fd fc08 	bl	80039cc <debug_print>
    }
    
    // 6. Test calibration data
    debug_print("\r\n6. Testing calibration data...\r\n");
 80061bc:	4b55      	ldr	r3, [pc, #340]	@ (8006314 <bme680_comprehensive_diagnostic+0xb7c>)
 80061be:	0018      	movs	r0, r3
 80061c0:	f7fd fc04 	bl	80039cc <debug_print>
    
    uint8_t calib_data[32];
    status = HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xE1, 
 80061c4:	2578      	movs	r5, #120	@ 0x78
 80061c6:	35ff      	adds	r5, #255	@ 0xff
 80061c8:	2608      	movs	r6, #8
 80061ca:	19ab      	adds	r3, r5, r6
 80061cc:	2208      	movs	r2, #8
 80061ce:	18ba      	adds	r2, r7, r2
 80061d0:	189c      	adds	r4, r3, r2
 80061d2:	484a      	ldr	r0, [pc, #296]	@ (80062fc <bme680_comprehensive_diagnostic+0xb64>)
 80061d4:	23fa      	movs	r3, #250	@ 0xfa
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	9302      	str	r3, [sp, #8]
 80061da:	2320      	movs	r3, #32
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	2308      	movs	r3, #8
 80061e0:	18f3      	adds	r3, r6, r3
 80061e2:	19db      	adds	r3, r3, r7
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	2301      	movs	r3, #1
 80061e8:	22e1      	movs	r2, #225	@ 0xe1
 80061ea:	21ec      	movs	r1, #236	@ 0xec
 80061ec:	f006 fd2c 	bl	800cc48 <HAL_I2C_Mem_Read>
 80061f0:	0003      	movs	r3, r0
 80061f2:	7023      	strb	r3, [r4, #0]
                              I2C_MEMADD_SIZE_8BIT, calib_data, 32, 1000);
    
    if (status == HAL_OK) {
 80061f4:	0034      	movs	r4, r6
 80061f6:	192b      	adds	r3, r5, r4
 80061f8:	2208      	movs	r2, #8
 80061fa:	4694      	mov	ip, r2
 80061fc:	44bc      	add	ip, r7
 80061fe:	4463      	add	r3, ip
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d000      	beq.n	8006208 <bme680_comprehensive_diagnostic+0xa70>
 8006206:	e08f      	b.n	8006328 <bme680_comprehensive_diagnostic+0xb90>
        debug_print("   ✓ Calibration data read successful\r\n");
 8006208:	4b43      	ldr	r3, [pc, #268]	@ (8006318 <bme680_comprehensive_diagnostic+0xb80>)
 800620a:	0018      	movs	r0, r3
 800620c:	f7fd fbde 	bl	80039cc <debug_print>
        
        // Check if calibration data looks reasonable (not all zeros or 0xFF)
        int valid_calib = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	22be      	movs	r2, #190	@ 0xbe
 8006214:	0052      	lsls	r2, r2, #1
 8006216:	1912      	adds	r2, r2, r4
 8006218:	2108      	movs	r1, #8
 800621a:	468c      	mov	ip, r1
 800621c:	44bc      	add	ip, r7
 800621e:	4462      	add	r2, ip
 8006220:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < 32; i++) {
 8006222:	2300      	movs	r3, #0
 8006224:	22bc      	movs	r2, #188	@ 0xbc
 8006226:	0052      	lsls	r2, r2, #1
 8006228:	1912      	adds	r2, r2, r4
 800622a:	2108      	movs	r1, #8
 800622c:	468c      	mov	ip, r1
 800622e:	44bc      	add	ip, r7
 8006230:	4462      	add	r2, ip
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	e03e      	b.n	80062b4 <bme680_comprehensive_diagnostic+0xb1c>
            if (calib_data[i] != 0 && calib_data[i] != 0xFF) {
 8006236:	4b39      	ldr	r3, [pc, #228]	@ (800631c <bme680_comprehensive_diagnostic+0xb84>)
 8006238:	21c4      	movs	r1, #196	@ 0xc4
 800623a:	0049      	lsls	r1, r1, #1
 800623c:	185b      	adds	r3, r3, r1
 800623e:	2408      	movs	r4, #8
 8006240:	2208      	movs	r2, #8
 8006242:	18a2      	adds	r2, r4, r2
 8006244:	19d2      	adds	r2, r2, r7
 8006246:	189a      	adds	r2, r3, r2
 8006248:	20bc      	movs	r0, #188	@ 0xbc
 800624a:	0040      	lsls	r0, r0, #1
 800624c:	1903      	adds	r3, r0, r4
 800624e:	2508      	movs	r5, #8
 8006250:	46ac      	mov	ip, r5
 8006252:	44bc      	add	ip, r7
 8006254:	4463      	add	r3, ip
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	18d3      	adds	r3, r2, r3
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d019      	beq.n	8006294 <bme680_comprehensive_diagnostic+0xafc>
 8006260:	4b2e      	ldr	r3, [pc, #184]	@ (800631c <bme680_comprehensive_diagnostic+0xb84>)
 8006262:	185b      	adds	r3, r3, r1
 8006264:	2208      	movs	r2, #8
 8006266:	18a2      	adds	r2, r4, r2
 8006268:	19d2      	adds	r2, r2, r7
 800626a:	189a      	adds	r2, r3, r2
 800626c:	1903      	adds	r3, r0, r4
 800626e:	2108      	movs	r1, #8
 8006270:	468c      	mov	ip, r1
 8006272:	44bc      	add	ip, r7
 8006274:	4463      	add	r3, ip
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	18d3      	adds	r3, r2, r3
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2bff      	cmp	r3, #255	@ 0xff
 800627e:	d009      	beq.n	8006294 <bme680_comprehensive_diagnostic+0xafc>
                valid_calib = 1;
 8006280:	2301      	movs	r3, #1
 8006282:	22be      	movs	r2, #190	@ 0xbe
 8006284:	0052      	lsls	r2, r2, #1
 8006286:	1912      	adds	r2, r2, r4
 8006288:	2108      	movs	r1, #8
 800628a:	468c      	mov	ip, r1
 800628c:	44bc      	add	ip, r7
 800628e:	4462      	add	r2, ip
 8006290:	6013      	str	r3, [r2, #0]
                break;
 8006292:	e01a      	b.n	80062ca <bme680_comprehensive_diagnostic+0xb32>
        for (int i = 0; i < 32; i++) {
 8006294:	22bc      	movs	r2, #188	@ 0xbc
 8006296:	0052      	lsls	r2, r2, #1
 8006298:	2108      	movs	r1, #8
 800629a:	1853      	adds	r3, r2, r1
 800629c:	2008      	movs	r0, #8
 800629e:	4684      	mov	ip, r0
 80062a0:	44bc      	add	ip, r7
 80062a2:	4463      	add	r3, ip
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	1852      	adds	r2, r2, r1
 80062aa:	2108      	movs	r1, #8
 80062ac:	468c      	mov	ip, r1
 80062ae:	44bc      	add	ip, r7
 80062b0:	4462      	add	r2, ip
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	23bc      	movs	r3, #188	@ 0xbc
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	2208      	movs	r2, #8
 80062ba:	189b      	adds	r3, r3, r2
 80062bc:	2208      	movs	r2, #8
 80062be:	4694      	mov	ip, r2
 80062c0:	44bc      	add	ip, r7
 80062c2:	4463      	add	r3, ip
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b1f      	cmp	r3, #31
 80062c8:	ddb5      	ble.n	8006236 <bme680_comprehensive_diagnostic+0xa9e>
            }
        }
        
        if (valid_calib) {
 80062ca:	23be      	movs	r3, #190	@ 0xbe
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	2208      	movs	r2, #8
 80062d0:	189b      	adds	r3, r3, r2
 80062d2:	2208      	movs	r2, #8
 80062d4:	4694      	mov	ip, r2
 80062d6:	44bc      	add	ip, r7
 80062d8:	4463      	add	r3, ip
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <bme680_comprehensive_diagnostic+0xb52>
            debug_print("   ✓ Calibration data appears valid\r\n");
 80062e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006320 <bme680_comprehensive_diagnostic+0xb88>)
 80062e2:	0018      	movs	r0, r3
 80062e4:	f7fd fb72 	bl	80039cc <debug_print>
 80062e8:	e03b      	b.n	8006362 <bme680_comprehensive_diagnostic+0xbca>
        } else {
            debug_print("   ⚠ Calibration data may be invalid (all zeros or 0xFF)\r\n");
 80062ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006324 <bme680_comprehensive_diagnostic+0xb8c>)
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7fd fb6d 	bl	80039cc <debug_print>
 80062f2:	e036      	b.n	8006362 <bme680_comprehensive_diagnostic+0xbca>
 80062f4:	08015874 	.word	0x08015874
 80062f8:	08015898 	.word	0x08015898
 80062fc:	200002e4 	.word	0x200002e4
 8006300:	fffffebc 	.word	0xfffffebc
 8006304:	080158c0 	.word	0x080158c0
 8006308:	080158f8 	.word	0x080158f8
 800630c:	0801593c 	.word	0x0801593c
 8006310:	08015964 	.word	0x08015964
 8006314:	0801598c 	.word	0x0801598c
 8006318:	080159b0 	.word	0x080159b0
 800631c:	fffffe78 	.word	0xfffffe78
 8006320:	080159dc 	.word	0x080159dc
 8006324:	08015a04 	.word	0x08015a04
        }
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "   ✗ Calibration data read failed: %d\r\n", status);
 8006328:	2378      	movs	r3, #120	@ 0x78
 800632a:	33ff      	adds	r3, #255	@ 0xff
 800632c:	2008      	movs	r0, #8
 800632e:	181b      	adds	r3, r3, r0
 8006330:	2208      	movs	r2, #8
 8006332:	4694      	mov	ip, r2
 8006334:	44bc      	add	ip, r7
 8006336:	4463      	add	r3, ip
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	4a1d      	ldr	r2, [pc, #116]	@ (80063b0 <bme680_comprehensive_diagnostic+0xc18>)
 800633c:	2180      	movs	r1, #128	@ 0x80
 800633e:	0049      	lsls	r1, r1, #1
 8006340:	2468      	movs	r4, #104	@ 0x68
 8006342:	0005      	movs	r5, r0
 8006344:	1820      	adds	r0, r4, r0
 8006346:	2608      	movs	r6, #8
 8006348:	46b4      	mov	ip, r6
 800634a:	44bc      	add	ip, r7
 800634c:	4460      	add	r0, ip
 800634e:	f00b fb61 	bl	8011a14 <sniprintf>
        debug_print(debug_msg);
 8006352:	1963      	adds	r3, r4, r5
 8006354:	2208      	movs	r2, #8
 8006356:	4694      	mov	ip, r2
 8006358:	44bc      	add	ip, r7
 800635a:	4463      	add	r3, ip
 800635c:	0018      	movs	r0, r3
 800635e:	f7fd fb35 	bl	80039cc <debug_print>
    }
    
    debug_print("\r\n=== DIAGNOSTIC COMPLETE ===\r\n");
 8006362:	4b14      	ldr	r3, [pc, #80]	@ (80063b4 <bme680_comprehensive_diagnostic+0xc1c>)
 8006364:	0018      	movs	r0, r3
 8006366:	f7fd fb31 	bl	80039cc <debug_print>
    debug_print("Summary:\r\n");
 800636a:	4b13      	ldr	r3, [pc, #76]	@ (80063b8 <bme680_comprehensive_diagnostic+0xc20>)
 800636c:	0018      	movs	r0, r3
 800636e:	f7fd fb2d 	bl	80039cc <debug_print>
    debug_print("- If I2C scan failed: Check wiring and power supply\r\n");
 8006372:	4b12      	ldr	r3, [pc, #72]	@ (80063bc <bme680_comprehensive_diagnostic+0xc24>)
 8006374:	0018      	movs	r0, r3
 8006376:	f7fd fb29 	bl	80039cc <debug_print>
    debug_print("- If chip ID wrong: Wrong sensor or address\r\n");
 800637a:	4b11      	ldr	r3, [pc, #68]	@ (80063c0 <bme680_comprehensive_diagnostic+0xc28>)
 800637c:	0018      	movs	r0, r3
 800637e:	f7fd fb25 	bl	80039cc <debug_print>
    debug_print("- If init failed: Check sensor configuration\r\n");
 8006382:	4b10      	ldr	r3, [pc, #64]	@ (80063c4 <bme680_comprehensive_diagnostic+0xc2c>)
 8006384:	0018      	movs	r0, r3
 8006386:	f7fd fb21 	bl	80039cc <debug_print>
    debug_print("- If read failed: Check sensor mode and timing\r\n");
 800638a:	4b0f      	ldr	r3, [pc, #60]	@ (80063c8 <bme680_comprehensive_diagnostic+0xc30>)
 800638c:	0018      	movs	r0, r3
 800638e:	f7fd fb1d 	bl	80039cc <debug_print>
    debug_print("- If values zero: Check sensor operation mode\r\n");
 8006392:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <bme680_comprehensive_diagnostic+0xc34>)
 8006394:	0018      	movs	r0, r3
 8006396:	f7fd fb19 	bl	80039cc <debug_print>
    debug_print("- If values invalid: Check library compatibility\r\n");
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <bme680_comprehensive_diagnostic+0xc38>)
 800639c:	0018      	movs	r0, r3
 800639e:	f7fd fb15 	bl	80039cc <debug_print>
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b067      	add	sp, #412	@ 0x19c
 80063a6:	bcc0      	pop	{r6, r7}
 80063a8:	46b9      	mov	r9, r7
 80063aa:	46b0      	mov	r8, r6
 80063ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ae:	46c0      	nop			@ (mov r8, r8)
 80063b0:	08015a44 	.word	0x08015a44
 80063b4:	08015a70 	.word	0x08015a70
 80063b8:	08015a90 	.word	0x08015a90
 80063bc:	08015a9c 	.word	0x08015a9c
 80063c0:	08015ad4 	.word	0x08015ad4
 80063c4:	08015b04 	.word	0x08015b04
 80063c8:	08015b34 	.word	0x08015b34
 80063cc:	08015b68 	.word	0x08015b68
 80063d0:	08015b98 	.word	0x08015b98

080063d4 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 80063d4:	b5b0      	push	{r4, r5, r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 f93a 	bl	8006658 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	250f      	movs	r5, #15
 80063e8:	197c      	adds	r4, r7, r5
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	20d0      	movs	r0, #208	@ 0xd0
 80063f0:	f000 f8d8 	bl	80065a4 <bme68x_get_regs>
 80063f4:	0003      	movs	r3, r0
 80063f6:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 80063f8:	197b      	adds	r3, r7, r5
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b25b      	sxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d11b      	bne.n	800643a <bme68x_init+0x66>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b61      	cmp	r3, #97	@ 0x61
 8006408:	d113      	bne.n	8006432 <bme68x_init+0x5e>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 800640a:	197c      	adds	r4, r7, r5
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	0018      	movs	r0, r3
 8006410:	f002 fae8 	bl	80089e4 <read_variant_id>
 8006414:	0003      	movs	r3, r0
 8006416:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8006418:	197b      	adds	r3, r7, r5
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	b25b      	sxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10b      	bne.n	800643a <bme68x_init+0x66>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8006422:	197c      	adds	r4, r7, r5
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	0018      	movs	r0, r3
 8006428:	f002 f9a5 	bl	8008776 <get_calib_data>
 800642c:	0003      	movs	r3, r0
 800642e:	7023      	strb	r3, [r4, #0]
 8006430:	e003      	b.n	800643a <bme68x_init+0x66>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8006432:	230f      	movs	r3, #15
 8006434:	18fb      	adds	r3, r7, r3
 8006436:	22fd      	movs	r2, #253	@ 0xfd
 8006438:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 800643a:	230f      	movs	r3, #15
 800643c:	18fb      	adds	r3, r7, r3
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b25b      	sxtb	r3, r3
}
 8006442:	0018      	movs	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	b004      	add	sp, #16
 8006448:	bdb0      	pop	{r4, r5, r7, pc}

0800644a <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 800644a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800644c:	b08b      	sub	sp, #44	@ 0x2c
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	607a      	str	r2, [r7, #4]
 8006456:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8006458:	2310      	movs	r3, #16
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	0018      	movs	r0, r3
 800645e:	2314      	movs	r3, #20
 8006460:	001a      	movs	r2, r3
 8006462:	2100      	movs	r1, #0
 8006464:	f00b fb58 	bl	8011b18 <memset>
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8006468:	2527      	movs	r5, #39	@ 0x27
 800646a:	197c      	adds	r4, r7, r5
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	0018      	movs	r0, r3
 8006470:	f001 feff 	bl	8008272 <null_ptr_check>
 8006474:	0003      	movs	r3, r0
 8006476:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8006478:	197b      	adds	r3, r7, r5
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	b25b      	sxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d000      	beq.n	8006484 <bme68x_set_regs+0x3a>
 8006482:	e083      	b.n	800658c <bme68x_set_regs+0x142>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d100      	bne.n	800648c <bme68x_set_regs+0x42>
 800648a:	e07f      	b.n	800658c <bme68x_set_regs+0x142>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d100      	bne.n	8006494 <bme68x_set_regs+0x4a>
 8006492:	e07b      	b.n	800658c <bme68x_set_regs+0x142>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d100      	bne.n	800649c <bme68x_set_regs+0x52>
 800649a:	e070      	b.n	800657e <bme68x_set_regs+0x134>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b0a      	cmp	r3, #10
 80064a0:	d900      	bls.n	80064a4 <bme68x_set_regs+0x5a>
 80064a2:	e06c      	b.n	800657e <bme68x_set_regs+0x134>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 80064a4:	2324      	movs	r3, #36	@ 0x24
 80064a6:	18fb      	adds	r3, r7, r3
 80064a8:	2200      	movs	r2, #0
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	e03f      	b.n	800652e <bme68x_set_regs+0xe4>
            {
                if (dev->intf == BME68X_SPI_INTF)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d11d      	bne.n	80064f2 <bme68x_set_regs+0xa8>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 80064b6:	2524      	movs	r5, #36	@ 0x24
 80064b8:	197b      	adds	r3, r7, r5
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	18d3      	adds	r3, r2, r3
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2227      	movs	r2, #39	@ 0x27
 80064c4:	18bc      	adds	r4, r7, r2
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	0011      	movs	r1, r2
 80064ca:	0018      	movs	r0, r3
 80064cc:	f001 fde3 	bl	8008096 <set_mem_page>
 80064d0:	0003      	movs	r3, r0
 80064d2:	7023      	strb	r3, [r4, #0]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80064d4:	197b      	adds	r3, r7, r5
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	18d3      	adds	r3, r2, r3
 80064dc:	781a      	ldrb	r2, [r3, #0]
 80064de:	197b      	adds	r3, r7, r5
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	217f      	movs	r1, #127	@ 0x7f
 80064e6:	400a      	ands	r2, r1
 80064e8:	b2d1      	uxtb	r1, r2
 80064ea:	2210      	movs	r2, #16
 80064ec:	18ba      	adds	r2, r7, r2
 80064ee:	54d1      	strb	r1, [r2, r3]
 80064f0:	e00b      	b.n	800650a <bme68x_set_regs+0xc0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 80064f2:	2124      	movs	r1, #36	@ 0x24
 80064f4:	187b      	adds	r3, r7, r1
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	18d2      	adds	r2, r2, r3
 80064fc:	187b      	adds	r3, r7, r1
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	7811      	ldrb	r1, [r2, #0]
 8006504:	2210      	movs	r2, #16
 8006506:	18ba      	adds	r2, r7, r2
 8006508:	54d1      	strb	r1, [r2, r3]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 800650a:	2024      	movs	r0, #36	@ 0x24
 800650c:	183b      	adds	r3, r7, r0
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	18d2      	adds	r2, r2, r3
 8006514:	183b      	adds	r3, r7, r0
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	3301      	adds	r3, #1
 800651c:	7811      	ldrb	r1, [r2, #0]
 800651e:	2210      	movs	r2, #16
 8006520:	18ba      	adds	r2, r7, r2
 8006522:	54d1      	strb	r1, [r2, r3]
            for (index = 0; index < len; index++)
 8006524:	183b      	adds	r3, r7, r0
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	183b      	adds	r3, r7, r0
 800652a:	3201      	adds	r2, #1
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	2324      	movs	r3, #36	@ 0x24
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d8b9      	bhi.n	80064ae <bme68x_set_regs+0x64>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 800653a:	2627      	movs	r6, #39	@ 0x27
 800653c:	19bb      	adds	r3, r7, r6
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	b25b      	sxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d120      	bne.n	8006588 <bme68x_set_regs+0x13e>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800654a:	2110      	movs	r1, #16
 800654c:	187b      	adds	r3, r7, r1
 800654e:	7818      	ldrb	r0, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	1e5a      	subs	r2, r3, #1
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685d      	ldr	r5, [r3, #4]
 800655a:	187b      	adds	r3, r7, r1
 800655c:	1c59      	adds	r1, r3, #1
 800655e:	002b      	movs	r3, r5
 8006560:	47a0      	blx	r4
 8006562:	0003      	movs	r3, r0
 8006564:	0019      	movs	r1, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	224c      	movs	r2, #76	@ 0x4c
 800656a:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	224c      	movs	r2, #76	@ 0x4c
 8006570:	569b      	ldrsb	r3, [r3, r2]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <bme68x_set_regs+0x13e>
                {
                    rslt = BME68X_E_COM_FAIL;
 8006576:	19bb      	adds	r3, r7, r6
 8006578:	22fe      	movs	r2, #254	@ 0xfe
 800657a:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 800657c:	e004      	b.n	8006588 <bme68x_set_regs+0x13e>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 800657e:	2327      	movs	r3, #39	@ 0x27
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	22fc      	movs	r2, #252	@ 0xfc
 8006584:	701a      	strb	r2, [r3, #0]
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8006586:	e005      	b.n	8006594 <bme68x_set_regs+0x14a>
            if (rslt == BME68X_OK)
 8006588:	46c0      	nop			@ (mov r8, r8)
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800658a:	e003      	b.n	8006594 <bme68x_set_regs+0x14a>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800658c:	2327      	movs	r3, #39	@ 0x27
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	22ff      	movs	r2, #255	@ 0xff
 8006592:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8006594:	2327      	movs	r3, #39	@ 0x27
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b25b      	sxtb	r3, r3
}
 800659c:	0018      	movs	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	b00b      	add	sp, #44	@ 0x2c
 80065a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065a4 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80065a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	250f      	movs	r5, #15
 80065b2:	197b      	adds	r3, r7, r5
 80065b4:	1c02      	adds	r2, r0, #0
 80065b6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80065b8:	2617      	movs	r6, #23
 80065ba:	19bc      	adds	r4, r7, r6
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	0018      	movs	r0, r3
 80065c0:	f001 fe57 	bl	8008272 <null_ptr_check>
 80065c4:	0003      	movs	r3, r0
 80065c6:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_data)
 80065c8:	19bb      	adds	r3, r7, r6
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	b25b      	sxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d136      	bne.n	8006640 <bme68x_get_regs+0x9c>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d033      	beq.n	8006640 <bme68x_get_regs+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	7b1b      	ldrb	r3, [r3, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d115      	bne.n	800660c <bme68x_get_regs+0x68>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 80065e0:	19bc      	adds	r4, r7, r6
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	197b      	adds	r3, r7, r5
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	0011      	movs	r1, r2
 80065ea:	0018      	movs	r0, r3
 80065ec:	f001 fd53 	bl	8008096 <set_mem_page>
 80065f0:	0003      	movs	r3, r0
 80065f2:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 80065f4:	19bb      	adds	r3, r7, r6
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <bme68x_get_regs+0x68>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80065fe:	197b      	adds	r3, r7, r5
 8006600:	197a      	adds	r2, r7, r5
 8006602:	7812      	ldrb	r2, [r2, #0]
 8006604:	2180      	movs	r1, #128	@ 0x80
 8006606:	4249      	negs	r1, r1
 8006608:	430a      	orrs	r2, r1
 800660a:	701a      	strb	r2, [r3, #0]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685d      	ldr	r5, [r3, #4]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	230f      	movs	r3, #15
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	7818      	ldrb	r0, [r3, #0]
 800661e:	002b      	movs	r3, r5
 8006620:	47a0      	blx	r4
 8006622:	0003      	movs	r3, r0
 8006624:	0019      	movs	r1, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	224c      	movs	r2, #76	@ 0x4c
 800662a:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	224c      	movs	r2, #76	@ 0x4c
 8006630:	569b      	ldrsb	r3, [r3, r2]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <bme68x_get_regs+0xa4>
        {
            rslt = BME68X_E_COM_FAIL;
 8006636:	2317      	movs	r3, #23
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	22fe      	movs	r2, #254	@ 0xfe
 800663c:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != 0)
 800663e:	e003      	b.n	8006648 <bme68x_get_regs+0xa4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006640:	2317      	movs	r3, #23
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	22ff      	movs	r2, #255	@ 0xff
 8006646:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8006648:	2317      	movs	r3, #23
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	b25b      	sxtb	r3, r3
}
 8006650:	0018      	movs	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	b007      	add	sp, #28
 8006656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006658 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8006658:	b5b0      	push	{r4, r5, r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8006660:	230e      	movs	r3, #14
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	22e0      	movs	r2, #224	@ 0xe0
 8006666:	701a      	strb	r2, [r3, #0]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8006668:	230d      	movs	r3, #13
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	22b6      	movs	r2, #182	@ 0xb6
 800666e:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8006670:	250f      	movs	r5, #15
 8006672:	197c      	adds	r4, r7, r5
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	0018      	movs	r0, r3
 8006678:	f001 fdfb 	bl	8008272 <null_ptr_check>
 800667c:	0003      	movs	r3, r0
 800667e:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8006680:	002a      	movs	r2, r5
 8006682:	18bb      	adds	r3, r7, r2
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	b25b      	sxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d133      	bne.n	80066f4 <bme68x_soft_reset+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	7b1b      	ldrb	r3, [r3, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d106      	bne.n	80066a2 <bme68x_soft_reset+0x4a>
        {
            rslt = get_mem_page(dev);
 8006694:	18bc      	adds	r4, r7, r2
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0018      	movs	r0, r3
 800669a:	f001 fd79 	bl	8008190 <get_mem_page>
 800669e:	0003      	movs	r3, r0
 80066a0:	7023      	strb	r3, [r4, #0]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 80066a2:	250f      	movs	r5, #15
 80066a4:	197b      	adds	r3, r7, r5
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d122      	bne.n	80066f4 <bme68x_soft_reset+0x9c>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80066ae:	197c      	adds	r4, r7, r5
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	220d      	movs	r2, #13
 80066b4:	18b9      	adds	r1, r7, r2
 80066b6:	220e      	movs	r2, #14
 80066b8:	18b8      	adds	r0, r7, r2
 80066ba:	2201      	movs	r2, #1
 80066bc:	f7ff fec5 	bl	800644a <bme68x_set_regs>
 80066c0:	0003      	movs	r3, r0
 80066c2:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 80066c4:	002c      	movs	r4, r5
 80066c6:	193b      	adds	r3, r7, r4
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b25b      	sxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d111      	bne.n	80066f4 <bme68x_soft_reset+0x9c>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	480a      	ldr	r0, [pc, #40]	@ (8006704 <bme68x_soft_reset+0xac>)
 80066da:	0019      	movs	r1, r3
 80066dc:	4790      	blx	r2

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7b1b      	ldrb	r3, [r3, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <bme68x_soft_reset+0x9c>
                {
                    rslt = get_mem_page(dev);
 80066e6:	193c      	adds	r4, r7, r4
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	0018      	movs	r0, r3
 80066ec:	f001 fd50 	bl	8008190 <get_mem_page>
 80066f0:	0003      	movs	r3, r0
 80066f2:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 80066f4:	230f      	movs	r3, #15
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	b25b      	sxtb	r3, r3
}
 80066fc:	0018      	movs	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	b004      	add	sp, #16
 8006702:	bdb0      	pop	{r4, r5, r7, pc}
 8006704:	00002710 	.word	0x00002710

08006708 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8006708:	b5b0      	push	{r4, r5, r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8006712:	231e      	movs	r3, #30
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	2200      	movs	r2, #0
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	231d      	movs	r3, #29
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8006722:	2314      	movs	r3, #20
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	4a9f      	ldr	r2, [pc, #636]	@ (80069a4 <bme68x_set_conf+0x29c>)
 8006728:	6811      	ldr	r1, [r2, #0]
 800672a:	6019      	str	r1, [r3, #0]
 800672c:	7912      	ldrb	r2, [r2, #4]
 800672e:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8006730:	230c      	movs	r3, #12
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	0018      	movs	r0, r3
 8006736:	2305      	movs	r3, #5
 8006738:	001a      	movs	r2, r3
 800673a:	2100      	movs	r1, #0
 800673c:	f00b f9ec 	bl	8011b18 <memset>

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8006740:	251f      	movs	r5, #31
 8006742:	197c      	adds	r4, r7, r5
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	231c      	movs	r3, #28
 8006748:	18fb      	adds	r3, r7, r3
 800674a:	0011      	movs	r1, r2
 800674c:	0018      	movs	r0, r3
 800674e:	f000 f9ab 	bl	8006aa8 <bme68x_get_op_mode>
 8006752:	0003      	movs	r3, r0
 8006754:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8006756:	197b      	adds	r3, r7, r5
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	b25b      	sxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d107      	bne.n	8006770 <bme68x_set_conf+0x68>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8006760:	197c      	adds	r4, r7, r5
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	0019      	movs	r1, r3
 8006766:	2000      	movs	r0, #0
 8006768:	f000 f91e 	bl	80069a8 <bme68x_set_op_mode>
 800676c:	0003      	movs	r3, r0
 800676e:	7023      	strb	r3, [r4, #0]
    }

    if (conf == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <bme68x_set_conf+0x78>
    {
        rslt = BME68X_E_NULL_PTR;
 8006776:	231f      	movs	r3, #31
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	22ff      	movs	r2, #255	@ 0xff
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e0e2      	b.n	8006946 <bme68x_set_conf+0x23e>
    }
    else if (rslt == BME68X_OK)
 8006780:	251f      	movs	r5, #31
 8006782:	197b      	adds	r3, r7, r5
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b25b      	sxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d000      	beq.n	800678e <bme68x_set_conf+0x86>
 800678c:	e0db      	b.n	8006946 <bme68x_set_conf+0x23e>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 800678e:	2314      	movs	r3, #20
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	7818      	ldrb	r0, [r3, #0]
 8006794:	197c      	adds	r4, r7, r5
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	220c      	movs	r2, #12
 800679a:	18b9      	adds	r1, r7, r2
 800679c:	2205      	movs	r2, #5
 800679e:	f7ff ff01 	bl	80065a4 <bme68x_get_regs>
 80067a2:	0003      	movs	r3, r0
 80067a4:	7023      	strb	r3, [r4, #0]
        dev->info_msg = BME68X_OK;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	224d      	movs	r2, #77	@ 0x4d
 80067aa:	2100      	movs	r1, #0
 80067ac:	5499      	strb	r1, [r3, r2]
        if (rslt == BME68X_OK)
 80067ae:	197b      	adds	r3, r7, r5
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	b25b      	sxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <bme68x_set_conf+0xc4>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3303      	adds	r3, #3
 80067bc:	197c      	adds	r4, r7, r5
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	2107      	movs	r1, #7
 80067c2:	0018      	movs	r0, r3
 80067c4:	f001 fd1c 	bl	8008200 <boundary_check>
 80067c8:	0003      	movs	r3, r0
 80067ca:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80067cc:	221f      	movs	r2, #31
 80067ce:	18bb      	adds	r3, r7, r2
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	b25b      	sxtb	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d109      	bne.n	80067ec <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3301      	adds	r3, #1
 80067dc:	18bc      	adds	r4, r7, r2
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	2105      	movs	r1, #5
 80067e2:	0018      	movs	r0, r3
 80067e4:	f001 fd0c 	bl	8008200 <boundary_check>
 80067e8:	0003      	movs	r3, r0
 80067ea:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80067ec:	221f      	movs	r2, #31
 80067ee:	18bb      	adds	r3, r7, r2
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b25b      	sxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <bme68x_set_conf+0x104>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3302      	adds	r3, #2
 80067fc:	18bc      	adds	r4, r7, r2
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	2105      	movs	r1, #5
 8006802:	0018      	movs	r0, r3
 8006804:	f001 fcfc 	bl	8008200 <boundary_check>
 8006808:	0003      	movs	r3, r0
 800680a:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 800680c:	221f      	movs	r2, #31
 800680e:	18bb      	adds	r3, r7, r2
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	b25b      	sxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d108      	bne.n	800682a <bme68x_set_conf+0x122>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	18bc      	adds	r4, r7, r2
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	2105      	movs	r1, #5
 8006820:	0018      	movs	r0, r3
 8006822:	f001 fced 	bl	8008200 <boundary_check>
 8006826:	0003      	movs	r3, r0
 8006828:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 800682a:	221f      	movs	r2, #31
 800682c:	18bb      	adds	r3, r7, r2
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	b25b      	sxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <bme68x_set_conf+0x142>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3304      	adds	r3, #4
 800683a:	18bc      	adds	r4, r7, r2
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	2108      	movs	r1, #8
 8006840:	0018      	movs	r0, r3
 8006842:	f001 fcdd 	bl	8008200 <boundary_check>
 8006846:	0003      	movs	r3, r0
 8006848:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 800684a:	231f      	movs	r3, #31
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	b25b      	sxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d177      	bne.n	8006946 <bme68x_set_conf+0x23e>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8006856:	200c      	movs	r0, #12
 8006858:	183b      	adds	r3, r7, r0
 800685a:	791b      	ldrb	r3, [r3, #4]
 800685c:	b25b      	sxtb	r3, r3
 800685e:	221c      	movs	r2, #28
 8006860:	4393      	bics	r3, r2
 8006862:	b25a      	sxtb	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	78db      	ldrb	r3, [r3, #3]
 8006868:	b25b      	sxtb	r3, r3
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	b25b      	sxtb	r3, r3
 800686e:	211c      	movs	r1, #28
 8006870:	400b      	ands	r3, r1
 8006872:	b25b      	sxtb	r3, r3
 8006874:	4313      	orrs	r3, r2
 8006876:	b25b      	sxtb	r3, r3
 8006878:	b2da      	uxtb	r2, r3
 800687a:	183b      	adds	r3, r7, r0
 800687c:	711a      	strb	r2, [r3, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 800687e:	183b      	adds	r3, r7, r0
 8006880:	78db      	ldrb	r3, [r3, #3]
 8006882:	b25b      	sxtb	r3, r3
 8006884:	221f      	movs	r2, #31
 8006886:	4013      	ands	r3, r2
 8006888:	b25a      	sxtb	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	785b      	ldrb	r3, [r3, #1]
 800688e:	b25b      	sxtb	r3, r3
 8006890:	015b      	lsls	r3, r3, #5
 8006892:	b25b      	sxtb	r3, r3
 8006894:	4313      	orrs	r3, r2
 8006896:	b25b      	sxtb	r3, r3
 8006898:	b2da      	uxtb	r2, r3
 800689a:	183b      	adds	r3, r7, r0
 800689c:	70da      	strb	r2, [r3, #3]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 800689e:	183b      	adds	r3, r7, r0
 80068a0:	78db      	ldrb	r3, [r3, #3]
 80068a2:	b25b      	sxtb	r3, r3
 80068a4:	221c      	movs	r2, #28
 80068a6:	4393      	bics	r3, r2
 80068a8:	b25a      	sxtb	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	789b      	ldrb	r3, [r3, #2]
 80068ae:	b25b      	sxtb	r3, r3
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	211c      	movs	r1, #28
 80068b6:	400b      	ands	r3, r1
 80068b8:	b25b      	sxtb	r3, r3
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	183b      	adds	r3, r7, r0
 80068c2:	70da      	strb	r2, [r3, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80068c4:	183b      	adds	r3, r7, r0
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	b25b      	sxtb	r3, r3
 80068ca:	2207      	movs	r2, #7
 80068cc:	4393      	bics	r3, r2
 80068ce:	b25a      	sxtb	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b25b      	sxtb	r3, r3
 80068d6:	2107      	movs	r1, #7
 80068d8:	400b      	ands	r3, r1
 80068da:	b25b      	sxtb	r3, r3
 80068dc:	4313      	orrs	r3, r2
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	183b      	adds	r3, r7, r0
 80068e4:	705a      	strb	r2, [r3, #1]
            if (conf->odr != BME68X_ODR_NONE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	791b      	ldrb	r3, [r3, #4]
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d008      	beq.n	8006900 <bme68x_set_conf+0x1f8>
            {
                odr20 = conf->odr;
 80068ee:	231e      	movs	r3, #30
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	7912      	ldrb	r2, [r2, #4]
 80068f6:	701a      	strb	r2, [r3, #0]
                odr3 = 0;
 80068f8:	231d      	movs	r3, #29
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8006900:	210c      	movs	r1, #12
 8006902:	187b      	adds	r3, r7, r1
 8006904:	791b      	ldrb	r3, [r3, #4]
 8006906:	b25b      	sxtb	r3, r3
 8006908:	221f      	movs	r2, #31
 800690a:	4013      	ands	r3, r2
 800690c:	b25a      	sxtb	r2, r3
 800690e:	231e      	movs	r3, #30
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b25b      	sxtb	r3, r3
 8006916:	015b      	lsls	r3, r3, #5
 8006918:	b25b      	sxtb	r3, r3
 800691a:	4313      	orrs	r3, r2
 800691c:	b25b      	sxtb	r3, r3
 800691e:	b2da      	uxtb	r2, r3
 8006920:	187b      	adds	r3, r7, r1
 8006922:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8006924:	187b      	adds	r3, r7, r1
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b25b      	sxtb	r3, r3
 800692a:	227f      	movs	r2, #127	@ 0x7f
 800692c:	4013      	ands	r3, r2
 800692e:	b25a      	sxtb	r2, r3
 8006930:	231d      	movs	r3, #29
 8006932:	18fb      	adds	r3, r7, r3
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	b25b      	sxtb	r3, r3
 8006938:	01db      	lsls	r3, r3, #7
 800693a:	b25b      	sxtb	r3, r3
 800693c:	4313      	orrs	r3, r2
 800693e:	b25b      	sxtb	r3, r3
 8006940:	b2da      	uxtb	r2, r3
 8006942:	187b      	adds	r3, r7, r1
 8006944:	701a      	strb	r2, [r3, #0]
        }
    }

    if (rslt == BME68X_OK)
 8006946:	221f      	movs	r2, #31
 8006948:	18bb      	adds	r3, r7, r2
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	b25b      	sxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <bme68x_set_conf+0x260>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8006952:	18bc      	adds	r4, r7, r2
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	220c      	movs	r2, #12
 8006958:	18b9      	adds	r1, r7, r2
 800695a:	2214      	movs	r2, #20
 800695c:	18b8      	adds	r0, r7, r2
 800695e:	2205      	movs	r2, #5
 8006960:	f7ff fd73 	bl	800644a <bme68x_set_regs>
 8006964:	0003      	movs	r3, r0
 8006966:	7023      	strb	r3, [r4, #0]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006968:	221c      	movs	r2, #28
 800696a:	18bb      	adds	r3, r7, r2
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00f      	beq.n	8006992 <bme68x_set_conf+0x28a>
 8006972:	211f      	movs	r1, #31
 8006974:	187b      	adds	r3, r7, r1
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	b25b      	sxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <bme68x_set_conf+0x28a>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 800697e:	18bb      	adds	r3, r7, r2
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	187c      	adds	r4, r7, r1
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	0011      	movs	r1, r2
 8006988:	0018      	movs	r0, r3
 800698a:	f000 f80d 	bl	80069a8 <bme68x_set_op_mode>
 800698e:	0003      	movs	r3, r0
 8006990:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8006992:	231f      	movs	r3, #31
 8006994:	18fb      	adds	r3, r7, r3
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	b25b      	sxtb	r3, r3
}
 800699a:	0018      	movs	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	b008      	add	sp, #32
 80069a0:	bdb0      	pop	{r4, r5, r7, pc}
 80069a2:	46c0      	nop			@ (mov r8, r8)
 80069a4:	08015bcc 	.word	0x08015bcc

080069a8 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	0002      	movs	r2, r0
 80069b0:	6039      	str	r1, [r7, #0]
 80069b2:	1dfb      	adds	r3, r7, #7
 80069b4:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80069b6:	230e      	movs	r3, #14
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80069be:	230c      	movs	r3, #12
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2274      	movs	r2, #116	@ 0x74
 80069c4:	701a      	strb	r2, [r3, #0]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80069c6:	260f      	movs	r6, #15
 80069c8:	19bc      	adds	r4, r7, r6
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	250d      	movs	r5, #13
 80069ce:	1979      	adds	r1, r7, r5
 80069d0:	2201      	movs	r2, #1
 80069d2:	2074      	movs	r0, #116	@ 0x74
 80069d4:	f7ff fde6 	bl	80065a4 <bme68x_get_regs>
 80069d8:	0003      	movs	r3, r0
 80069da:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 80069dc:	0034      	movs	r4, r6
 80069de:	193b      	adds	r3, r7, r4
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d123      	bne.n	8006a30 <bme68x_set_op_mode+0x88>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80069e8:	0028      	movs	r0, r5
 80069ea:	183b      	adds	r3, r7, r0
 80069ec:	781a      	ldrb	r2, [r3, #0]
 80069ee:	250e      	movs	r5, #14
 80069f0:	197b      	adds	r3, r7, r5
 80069f2:	2103      	movs	r1, #3
 80069f4:	400a      	ands	r2, r1
 80069f6:	701a      	strb	r2, [r3, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
 80069f8:	197b      	adds	r3, r7, r5
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d017      	beq.n	8006a30 <bme68x_set_op_mode+0x88>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8006a00:	183b      	adds	r3, r7, r0
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2203      	movs	r2, #3
 8006a06:	4393      	bics	r3, r2
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	183b      	adds	r3, r7, r0
 8006a0c:	701a      	strb	r2, [r3, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8006a0e:	193c      	adds	r4, r7, r4
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	1839      	adds	r1, r7, r0
 8006a14:	220c      	movs	r2, #12
 8006a16:	18b8      	adds	r0, r7, r2
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f7ff fd16 	bl	800644a <bme68x_set_regs>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	7023      	strb	r3, [r4, #0]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	481e      	ldr	r0, [pc, #120]	@ (8006aa4 <bme68x_set_op_mode+0xfc>)
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	4790      	blx	r2
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8006a30:	230e      	movs	r3, #14
 8006a32:	18fb      	adds	r3, r7, r3
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <bme68x_set_op_mode+0x9e>
 8006a3a:	230f      	movs	r3, #15
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b25b      	sxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0bf      	beq.n	80069c6 <bme68x_set_op_mode+0x1e>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006a46:	1dfb      	adds	r3, r7, #7
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d021      	beq.n	8006a92 <bme68x_set_op_mode+0xea>
 8006a4e:	240f      	movs	r4, #15
 8006a50:	193b      	adds	r3, r7, r4
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d11b      	bne.n	8006a92 <bme68x_set_op_mode+0xea>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8006a5a:	200d      	movs	r0, #13
 8006a5c:	183b      	adds	r3, r7, r0
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	b25b      	sxtb	r3, r3
 8006a62:	2203      	movs	r2, #3
 8006a64:	4393      	bics	r3, r2
 8006a66:	b25a      	sxtb	r2, r3
 8006a68:	1dfb      	adds	r3, r7, #7
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	b25b      	sxtb	r3, r3
 8006a6e:	2103      	movs	r1, #3
 8006a70:	400b      	ands	r3, r1
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	4313      	orrs	r3, r2
 8006a76:	b25b      	sxtb	r3, r3
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	183b      	adds	r3, r7, r0
 8006a7c:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8006a7e:	193c      	adds	r4, r7, r4
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	1839      	adds	r1, r7, r0
 8006a84:	220c      	movs	r2, #12
 8006a86:	18b8      	adds	r0, r7, r2
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f7ff fcde 	bl	800644a <bme68x_set_regs>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8006a92:	230f      	movs	r3, #15
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	b25b      	sxtb	r3, r3
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b005      	add	sp, #20
 8006aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa2:	46c0      	nop			@ (mov r8, r8)
 8006aa4:	00002710 	.word	0x00002710

08006aa8 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8006aa8:	b5b0      	push	{r4, r5, r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d012      	beq.n	8006ade <bme68x_get_op_mode+0x36>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8006ab8:	230f      	movs	r3, #15
 8006aba:	18fc      	adds	r4, r7, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	250e      	movs	r5, #14
 8006ac0:	1979      	adds	r1, r7, r5
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	2074      	movs	r0, #116	@ 0x74
 8006ac6:	f7ff fd6d 	bl	80065a4 <bme68x_get_regs>
 8006aca:	0003      	movs	r3, r0
 8006acc:	7023      	strb	r3, [r4, #0]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8006ace:	197b      	adds	r3, r7, r5
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2203      	movs	r2, #3
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	701a      	strb	r2, [r3, #0]
 8006adc:	e003      	b.n	8006ae6 <bme68x_get_op_mode+0x3e>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006ade:	230f      	movs	r3, #15
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	22ff      	movs	r2, #255	@ 0xff
 8006ae4:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8006ae6:	230f      	movs	r3, #15
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b25b      	sxtb	r3, r3
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b004      	add	sp, #16
 8006af4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006af8 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8006af8:	b5b0      	push	{r4, r5, r7, lr}
 8006afa:	b08a      	sub	sp, #40	@ 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	607a      	str	r2, [r7, #4]
 8006b02:	230f      	movs	r3, #15
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	1c02      	adds	r2, r0, #0
 8006b08:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8006b0e:	2314      	movs	r3, #20
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	4a37      	ldr	r2, [pc, #220]	@ (8006bf0 <bme68x_get_meas_dur+0xf8>)
 8006b14:	6811      	ldr	r1, [r2, #0]
 8006b16:	6019      	str	r1, [r3, #0]
 8006b18:	8892      	ldrh	r2, [r2, #4]
 8006b1a:	809a      	strh	r2, [r3, #4]

    if (conf != NULL)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d061      	beq.n	8006be6 <bme68x_get_meas_dur+0xee>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	3301      	adds	r3, #1
 8006b26:	2527      	movs	r5, #39	@ 0x27
 8006b28:	197c      	adds	r4, r7, r5
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	2105      	movs	r1, #5
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f001 fb66 	bl	8008200 <boundary_check>
 8006b34:	0003      	movs	r3, r0
 8006b36:	7023      	strb	r3, [r4, #0]

        if (rslt == BME68X_OK)
 8006b38:	002a      	movs	r2, r5
 8006b3a:	18bb      	adds	r3, r7, r2
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b25b      	sxtb	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d109      	bne.n	8006b58 <bme68x_get_meas_dur+0x60>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	3302      	adds	r3, #2
 8006b48:	18bc      	adds	r4, r7, r2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	2105      	movs	r1, #5
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f001 fb56 	bl	8008200 <boundary_check>
 8006b54:	0003      	movs	r3, r0
 8006b56:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8006b58:	2227      	movs	r2, #39	@ 0x27
 8006b5a:	18bb      	adds	r3, r7, r2
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	b25b      	sxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d108      	bne.n	8006b76 <bme68x_get_meas_dur+0x7e>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	18bc      	adds	r4, r7, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	2105      	movs	r1, #5
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f001 fb47 	bl	8008200 <boundary_check>
 8006b72:	0003      	movs	r3, r0
 8006b74:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8006b76:	2327      	movs	r3, #39	@ 0x27
 8006b78:	18fb      	adds	r3, r7, r3
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b25b      	sxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d131      	bne.n	8006be6 <bme68x_get_meas_dur+0xee>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	001a      	movs	r2, r3
 8006b88:	2114      	movs	r1, #20
 8006b8a:	187b      	adds	r3, r7, r1
 8006b8c:	5c9b      	ldrb	r3, [r3, r2]
 8006b8e:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	789b      	ldrb	r3, [r3, #2]
 8006b94:	001a      	movs	r2, r3
 8006b96:	187b      	adds	r3, r7, r1
 8006b98:	5c9b      	ldrb	r3, [r3, r2]
 8006b9a:	001a      	movs	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	189b      	adds	r3, r3, r2
 8006ba0:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	187b      	adds	r3, r7, r1
 8006baa:	5c9b      	ldrb	r3, [r3, r2]
 8006bac:	001a      	movs	r2, r3
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	189b      	adds	r3, r3, r2
 8006bb2:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8006bf4 <bme68x_get_meas_dur+0xfc>)
 8006bb8:	4353      	muls	r3, r2
 8006bba:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf8 <bme68x_get_meas_dur+0x100>)
 8006bc0:	4694      	mov	ip, r2
 8006bc2:	4463      	add	r3, ip
 8006bc4:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8006bfc <bme68x_get_meas_dur+0x104>)
 8006bca:	4694      	mov	ip, r2
 8006bcc:	4463      	add	r3, ip
 8006bce:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8006bd0:	230f      	movs	r3, #15
 8006bd2:	18fb      	adds	r3, r7, r3
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d005      	beq.n	8006be6 <bme68x_get_meas_dur+0xee>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	22fa      	movs	r2, #250	@ 0xfa
 8006bde:	0092      	lsls	r2, r2, #2
 8006be0:	4694      	mov	ip, r2
 8006be2:	4463      	add	r3, ip
 8006be4:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8006be6:	6a3b      	ldr	r3, [r7, #32]
}
 8006be8:	0018      	movs	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b00a      	add	sp, #40	@ 0x28
 8006bee:	bdb0      	pop	{r4, r5, r7, pc}
 8006bf0:	08015bd4 	.word	0x08015bd4
 8006bf4:	000007ab 	.word	0x000007ab
 8006bf8:	00000774 	.word	0x00000774
 8006bfc:	00000951 	.word	0x00000951

08006c00 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8006c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c02:	b09b      	sub	sp, #108	@ 0x6c
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	260f      	movs	r6, #15
 8006c0e:	19bb      	adds	r3, r7, r6
 8006c10:	1c02      	adds	r2, r0, #0
 8006c12:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8006c14:	2366      	movs	r3, #102	@ 0x66
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	2365      	movs	r3, #101	@ 0x65
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	2364      	movs	r3, #100	@ 0x64
 8006c26:	18fb      	adds	r3, r7, r3
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *field_ptr[3] = { 0 };
 8006c2c:	2458      	movs	r4, #88	@ 0x58
 8006c2e:	193b      	adds	r3, r7, r4
 8006c30:	0018      	movs	r0, r3
 8006c32:	230c      	movs	r3, #12
 8006c34:	001a      	movs	r2, r3
 8006c36:	2100      	movs	r1, #0
 8006c38:	f00a ff6e 	bl	8011b18 <memset>
    struct bme68x_data field_data[3] = { { 0 } };
 8006c3c:	2510      	movs	r5, #16
 8006c3e:	197b      	adds	r3, r7, r5
 8006c40:	0018      	movs	r0, r3
 8006c42:	2348      	movs	r3, #72	@ 0x48
 8006c44:	001a      	movs	r2, r3
 8006c46:	2100      	movs	r1, #0
 8006c48:	f00a ff66 	bl	8011b18 <memset>

    field_ptr[0] = &field_data[0];
 8006c4c:	193b      	adds	r3, r7, r4
 8006c4e:	0029      	movs	r1, r5
 8006c50:	187a      	adds	r2, r7, r1
 8006c52:	601a      	str	r2, [r3, #0]
    field_ptr[1] = &field_data[1];
 8006c54:	193b      	adds	r3, r7, r4
 8006c56:	187a      	adds	r2, r7, r1
 8006c58:	3218      	adds	r2, #24
 8006c5a:	605a      	str	r2, [r3, #4]
    field_ptr[2] = &field_data[2];
 8006c5c:	193b      	adds	r3, r7, r4
 8006c5e:	187a      	adds	r2, r7, r1
 8006c60:	3230      	adds	r2, #48	@ 0x30
 8006c62:	609a      	str	r2, [r3, #8]

    rslt = null_ptr_check(dev);
 8006c64:	2567      	movs	r5, #103	@ 0x67
 8006c66:	197c      	adds	r4, r7, r5
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f001 fb01 	bl	8008272 <null_ptr_check>
 8006c70:	0003      	movs	r3, r0
 8006c72:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && (data != NULL))
 8006c74:	002a      	movs	r2, r5
 8006c76:	18bb      	adds	r3, r7, r2
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	b25b      	sxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d000      	beq.n	8006c82 <bme68x_get_data+0x82>
 8006c80:	e0e3      	b.n	8006e4a <bme68x_get_data+0x24a>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d100      	bne.n	8006c8a <bme68x_get_data+0x8a>
 8006c88:	e0df      	b.n	8006e4a <bme68x_get_data+0x24a>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8006c8a:	19bb      	adds	r3, r7, r6
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d122      	bne.n	8006cd8 <bme68x_get_data+0xd8>
        {
            rslt = read_field_data(0, data, dev);
 8006c92:	0015      	movs	r5, r2
 8006c94:	18bc      	adds	r4, r7, r2
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f000 fe67 	bl	8007970 <read_field_data>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8006ca6:	197b      	adds	r3, r7, r5
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	b25b      	sxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d000      	beq.n	8006cb2 <bme68x_get_data+0xb2>
 8006cb0:	e0bd      	b.n	8006e2e <bme68x_get_data+0x22e>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	b25b      	sxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	da04      	bge.n	8006cc6 <bme68x_get_data+0xc6>
                {
                    new_fields = 1;
 8006cbc:	2364      	movs	r3, #100	@ 0x64
 8006cbe:	18fb      	adds	r3, r7, r3
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e0b3      	b.n	8006e2e <bme68x_get_data+0x22e>
                }
                else
                {
                    new_fields = 0;
 8006cc6:	2364      	movs	r3, #100	@ 0x64
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
                    rslt = BME68X_W_NO_NEW_DATA;
 8006cce:	2367      	movs	r3, #103	@ 0x67
 8006cd0:	18fb      	adds	r3, r7, r3
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	e0aa      	b.n	8006e2e <bme68x_get_data+0x22e>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8006cd8:	220f      	movs	r2, #15
 8006cda:	18bb      	adds	r3, r7, r2
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d004      	beq.n	8006cec <bme68x_get_data+0xec>
 8006ce2:	18bb      	adds	r3, r7, r2
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d000      	beq.n	8006cec <bme68x_get_data+0xec>
 8006cea:	e09c      	b.n	8006e26 <bme68x_get_data+0x226>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8006cec:	2367      	movs	r3, #103	@ 0x67
 8006cee:	18fc      	adds	r4, r7, r3
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	2358      	movs	r3, #88	@ 0x58
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	0011      	movs	r1, r2
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 ffb9 	bl	8007c70 <read_all_field_data>
 8006cfe:	0003      	movs	r3, r0
 8006d00:	7023      	strb	r3, [r4, #0]

            new_fields = 0;
 8006d02:	2364      	movs	r3, #100	@ 0x64
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8006d0a:	2366      	movs	r3, #102	@ 0x66
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	2200      	movs	r2, #0
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e016      	b.n	8006d42 <bme68x_get_data+0x142>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8006d14:	2366      	movs	r3, #102	@ 0x66
 8006d16:	18fb      	adds	r3, r7, r3
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	2358      	movs	r3, #88	@ 0x58
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	0092      	lsls	r2, r2, #2
 8006d20:	58d3      	ldr	r3, [r2, r3]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	b25b      	sxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da05      	bge.n	8006d36 <bme68x_get_data+0x136>
                {
                    new_fields++;
 8006d2a:	2164      	movs	r1, #100	@ 0x64
 8006d2c:	187b      	adds	r3, r7, r1
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	187b      	adds	r3, r7, r1
 8006d32:	3201      	adds	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8006d36:	2166      	movs	r1, #102	@ 0x66
 8006d38:	187b      	adds	r3, r7, r1
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	187b      	adds	r3, r7, r1
 8006d3e:	3201      	adds	r2, #1
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	2366      	movs	r3, #102	@ 0x66
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d805      	bhi.n	8006d58 <bme68x_get_data+0x158>
 8006d4c:	2367      	movs	r3, #103	@ 0x67
 8006d4e:	18fb      	adds	r3, r7, r3
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	b25b      	sxtb	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0dd      	beq.n	8006d14 <bme68x_get_data+0x114>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8006d58:	2366      	movs	r3, #102	@ 0x66
 8006d5a:	18fb      	adds	r3, r7, r3
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	e022      	b.n	8006da8 <bme68x_get_data+0x1a8>
            {
                for (j = i + 1; j < 3; j++)
 8006d62:	2365      	movs	r3, #101	@ 0x65
 8006d64:	18fb      	adds	r3, r7, r3
 8006d66:	2266      	movs	r2, #102	@ 0x66
 8006d68:	18ba      	adds	r2, r7, r2
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	3201      	adds	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	e00f      	b.n	8006d92 <bme68x_get_data+0x192>
                {
                    sort_sensor_data(i, j, field_ptr);
 8006d72:	2358      	movs	r3, #88	@ 0x58
 8006d74:	18fa      	adds	r2, r7, r3
 8006d76:	2465      	movs	r4, #101	@ 0x65
 8006d78:	193b      	adds	r3, r7, r4
 8006d7a:	7819      	ldrb	r1, [r3, #0]
 8006d7c:	2366      	movs	r3, #102	@ 0x66
 8006d7e:	18fb      	adds	r3, r7, r3
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	0018      	movs	r0, r3
 8006d84:	f001 fc62 	bl	800864c <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8006d88:	193b      	adds	r3, r7, r4
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	193b      	adds	r3, r7, r4
 8006d8e:	3201      	adds	r2, #1
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	2365      	movs	r3, #101	@ 0x65
 8006d94:	18fb      	adds	r3, r7, r3
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d9ea      	bls.n	8006d72 <bme68x_get_data+0x172>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8006d9c:	2166      	movs	r1, #102	@ 0x66
 8006d9e:	187b      	adds	r3, r7, r1
 8006da0:	781a      	ldrb	r2, [r3, #0]
 8006da2:	187b      	adds	r3, r7, r1
 8006da4:	3201      	adds	r2, #1
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	2366      	movs	r3, #102	@ 0x66
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d805      	bhi.n	8006dbe <bme68x_get_data+0x1be>
 8006db2:	2367      	movs	r3, #103	@ 0x67
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	b25b      	sxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0d1      	beq.n	8006d62 <bme68x_get_data+0x162>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8006dbe:	2366      	movs	r3, #102	@ 0x66
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e019      	b.n	8006dfc <bme68x_get_data+0x1fc>
            {
                data[i] = *field_ptr[i];
 8006dc8:	2566      	movs	r5, #102	@ 0x66
 8006dca:	197b      	adds	r3, r7, r5
 8006dcc:	781a      	ldrb	r2, [r3, #0]
 8006dce:	2358      	movs	r3, #88	@ 0x58
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	0092      	lsls	r2, r2, #2
 8006dd4:	58d1      	ldr	r1, [r2, r3]
 8006dd6:	197b      	adds	r3, r7, r5
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	0013      	movs	r3, r2
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	189b      	adds	r3, r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	001a      	movs	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	189b      	adds	r3, r3, r2
 8006de8:	000a      	movs	r2, r1
 8006dea:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006dec:	c313      	stmia	r3!, {r0, r1, r4}
 8006dee:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006df0:	c313      	stmia	r3!, {r0, r1, r4}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8006df2:	197b      	adds	r3, r7, r5
 8006df4:	781a      	ldrb	r2, [r3, #0]
 8006df6:	197b      	adds	r3, r7, r5
 8006df8:	3201      	adds	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	2366      	movs	r3, #102	@ 0x66
 8006dfe:	18fb      	adds	r3, r7, r3
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d805      	bhi.n	8006e12 <bme68x_get_data+0x212>
 8006e06:	2367      	movs	r3, #103	@ 0x67
 8006e08:	18fb      	adds	r3, r7, r3
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b25b      	sxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0da      	beq.n	8006dc8 <bme68x_get_data+0x1c8>
            }

            if (new_fields == 0)
 8006e12:	2364      	movs	r3, #100	@ 0x64
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d108      	bne.n	8006e2e <bme68x_get_data+0x22e>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8006e1c:	2367      	movs	r3, #103	@ 0x67
 8006e1e:	18fb      	adds	r3, r7, r3
 8006e20:	2202      	movs	r2, #2
 8006e22:	701a      	strb	r2, [r3, #0]
            if (new_fields == 0)
 8006e24:	e003      	b.n	8006e2e <bme68x_get_data+0x22e>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8006e26:	2367      	movs	r3, #103	@ 0x67
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	701a      	strb	r2, [r3, #0]
        }

        if (n_data == NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <bme68x_get_data+0x23e>
        {
            rslt = BME68X_E_NULL_PTR;
 8006e34:	2367      	movs	r3, #103	@ 0x67
 8006e36:	18fb      	adds	r3, r7, r3
 8006e38:	22ff      	movs	r2, #255	@ 0xff
 8006e3a:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8006e3c:	e009      	b.n	8006e52 <bme68x_get_data+0x252>
        }
        else
        {
            *n_data = new_fields;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2264      	movs	r2, #100	@ 0x64
 8006e42:	18ba      	adds	r2, r7, r2
 8006e44:	7812      	ldrb	r2, [r2, #0]
 8006e46:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8006e48:	e003      	b.n	8006e52 <bme68x_get_data+0x252>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006e4a:	2367      	movs	r3, #103	@ 0x67
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	22ff      	movs	r2, #255	@ 0xff
 8006e50:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8006e52:	2367      	movs	r3, #103	@ 0x67
 8006e54:	18fb      	adds	r3, r7, r3
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	b25b      	sxtb	r3, r3
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b01b      	add	sp, #108	@ 0x6c
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006e64 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8006e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e66:	b089      	sub	sp, #36	@ 0x24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	607a      	str	r2, [r7, #4]
 8006e6e:	260f      	movs	r6, #15
 8006e70:	19bb      	adds	r3, r7, r6
 8006e72:	1c02      	adds	r2, r0, #0
 8006e74:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t nb_conv = 0;
 8006e76:	231c      	movs	r3, #28
 8006e78:	18fb      	adds	r3, r7, r3
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
    uint8_t hctrl, run_gas = 0;
 8006e7e:	221d      	movs	r2, #29
 8006e80:	18bb      	adds	r3, r7, r2
 8006e82:	2200      	movs	r2, #0
 8006e84:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8006e86:	2214      	movs	r2, #20
 8006e88:	18bb      	adds	r3, r7, r2
 8006e8a:	4a53      	ldr	r2, [pc, #332]	@ (8006fd8 <bme68x_set_heatr_conf+0x174>)
 8006e8c:	801a      	strh	r2, [r3, #0]

    if (conf != NULL)
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d100      	bne.n	8006e96 <bme68x_set_heatr_conf+0x32>
 8006e94:	e094      	b.n	8006fc0 <bme68x_set_heatr_conf+0x15c>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8006e96:	251f      	movs	r5, #31
 8006e98:	197c      	adds	r4, r7, r5
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	f7ff fd82 	bl	80069a8 <bme68x_set_op_mode>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8006ea8:	197b      	adds	r3, r7, r5
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10b      	bne.n	8006eca <bme68x_set_heatr_conf+0x66>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8006eb2:	197c      	adds	r4, r7, r5
 8006eb4:	687d      	ldr	r5, [r7, #4]
 8006eb6:	231c      	movs	r3, #28
 8006eb8:	18fa      	adds	r2, r7, r3
 8006eba:	19bb      	adds	r3, r7, r6
 8006ebc:	7819      	ldrb	r1, [r3, #0]
 8006ebe:	68b8      	ldr	r0, [r7, #8]
 8006ec0:	002b      	movs	r3, r5
 8006ec2:	f001 f9f9 	bl	80082b8 <set_conf>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8006eca:	251f      	movs	r5, #31
 8006ecc:	197b      	adds	r3, r7, r5
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	b25b      	sxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d000      	beq.n	8006ed8 <bme68x_set_heatr_conf+0x74>
 8006ed6:	e077      	b.n	8006fc8 <bme68x_set_heatr_conf+0x164>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8006ed8:	197c      	adds	r4, r7, r5
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2218      	movs	r2, #24
 8006ede:	18b9      	adds	r1, r7, r2
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	2070      	movs	r0, #112	@ 0x70
 8006ee4:	f7ff fb5e 	bl	80065a4 <bme68x_get_regs>
 8006ee8:	0003      	movs	r3, r0
 8006eea:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8006eec:	197b      	adds	r3, r7, r5
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b25b      	sxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d168      	bne.n	8006fc8 <bme68x_set_heatr_conf+0x164>
            {
                if (conf->enable == BME68X_ENABLE)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d111      	bne.n	8006f22 <bme68x_set_heatr_conf+0xbe>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8006efe:	231e      	movs	r3, #30
 8006f00:	18fb      	adds	r3, r7, r3
 8006f02:	2200      	movs	r2, #0
 8006f04:	701a      	strb	r2, [r3, #0]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d104      	bne.n	8006f18 <bme68x_set_heatr_conf+0xb4>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8006f0e:	231d      	movs	r3, #29
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	2202      	movs	r2, #2
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	e00c      	b.n	8006f32 <bme68x_set_heatr_conf+0xce>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8006f18:	231d      	movs	r3, #29
 8006f1a:	18fb      	adds	r3, r7, r3
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e007      	b.n	8006f32 <bme68x_set_heatr_conf+0xce>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8006f22:	231e      	movs	r3, #30
 8006f24:	18fb      	adds	r3, r7, r3
 8006f26:	2201      	movs	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8006f2a:	231d      	movs	r3, #29
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8006f32:	2018      	movs	r0, #24
 8006f34:	183b      	adds	r3, r7, r0
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b25b      	sxtb	r3, r3
 8006f3a:	2208      	movs	r2, #8
 8006f3c:	4393      	bics	r3, r2
 8006f3e:	b25a      	sxtb	r2, r3
 8006f40:	231e      	movs	r3, #30
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	b25b      	sxtb	r3, r3
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	b25b      	sxtb	r3, r3
 8006f4c:	2108      	movs	r1, #8
 8006f4e:	400b      	ands	r3, r1
 8006f50:	b25b      	sxtb	r3, r3
 8006f52:	4313      	orrs	r3, r2
 8006f54:	b25b      	sxtb	r3, r3
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	183b      	adds	r3, r7, r0
 8006f5a:	701a      	strb	r2, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8006f5c:	183b      	adds	r3, r7, r0
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	b25b      	sxtb	r3, r3
 8006f62:	220f      	movs	r2, #15
 8006f64:	4393      	bics	r3, r2
 8006f66:	b25a      	sxtb	r2, r3
 8006f68:	231c      	movs	r3, #28
 8006f6a:	18fb      	adds	r3, r7, r3
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b25b      	sxtb	r3, r3
 8006f70:	210f      	movs	r1, #15
 8006f72:	400b      	ands	r3, r1
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	4313      	orrs	r3, r2
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	183b      	adds	r3, r7, r0
 8006f7e:	705a      	strb	r2, [r3, #1]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8006f80:	183b      	adds	r3, r7, r0
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	b25b      	sxtb	r3, r3
 8006f86:	2230      	movs	r2, #48	@ 0x30
 8006f88:	4393      	bics	r3, r2
 8006f8a:	b25a      	sxtb	r2, r3
 8006f8c:	231d      	movs	r3, #29
 8006f8e:	18fb      	adds	r3, r7, r3
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	b25b      	sxtb	r3, r3
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	b25b      	sxtb	r3, r3
 8006f98:	2130      	movs	r1, #48	@ 0x30
 8006f9a:	400b      	ands	r3, r1
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	b25b      	sxtb	r3, r3
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	183b      	adds	r3, r7, r0
 8006fa6:	705a      	strb	r2, [r3, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8006fa8:	231f      	movs	r3, #31
 8006faa:	18fc      	adds	r4, r7, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	1839      	adds	r1, r7, r0
 8006fb0:	2214      	movs	r2, #20
 8006fb2:	18b8      	adds	r0, r7, r2
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f7ff fa48 	bl	800644a <bme68x_set_regs>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	7023      	strb	r3, [r4, #0]
 8006fbe:	e003      	b.n	8006fc8 <bme68x_set_heatr_conf+0x164>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006fc0:	231f      	movs	r3, #31
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	22ff      	movs	r2, #255	@ 0xff
 8006fc6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8006fc8:	231f      	movs	r3, #31
 8006fca:	18fb      	adds	r3, r7, r3
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	b25b      	sxtb	r3, r3
}
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	b009      	add	sp, #36	@ 0x24
 8006fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd8:	00007170 	.word	0x00007170

08006fdc <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8006fdc:	b5b0      	push	{r4, r5, r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa fc16 	bl	8001818 <__aeabi_ui2f>
 8006fec:	1c03      	adds	r3, r0, #0
 8006fee:	218d      	movs	r1, #141	@ 0x8d
 8006ff0:	05c9      	lsls	r1, r1, #23
 8006ff2:	1c18      	adds	r0, r3, #0
 8006ff4:	f7f9 fdfe 	bl	8000bf4 <__aeabi_fdiv>
 8006ff8:	1c03      	adds	r3, r0, #0
 8006ffa:	1c1c      	adds	r4, r3, #0
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	8bdb      	ldrh	r3, [r3, #30]
 8007000:	0018      	movs	r0, r3
 8007002:	f7fa fc09 	bl	8001818 <__aeabi_ui2f>
 8007006:	1c03      	adds	r3, r0, #0
 8007008:	2189      	movs	r1, #137	@ 0x89
 800700a:	05c9      	lsls	r1, r1, #23
 800700c:	1c18      	adds	r0, r3, #0
 800700e:	f7f9 fdf1 	bl	8000bf4 <__aeabi_fdiv>
 8007012:	1c03      	adds	r3, r0, #0
 8007014:	1c19      	adds	r1, r3, #0
 8007016:	1c20      	adds	r0, r4, #0
 8007018:	f7fa f914 	bl	8001244 <__aeabi_fsub>
 800701c:	1c03      	adds	r3, r0, #0
 800701e:	1c1c      	adds	r4, r3, #0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2220      	movs	r2, #32
 8007024:	5e9b      	ldrsh	r3, [r3, r2]
 8007026:	0018      	movs	r0, r3
 8007028:	f7fa fba6 	bl	8001778 <__aeabi_i2f>
 800702c:	1c03      	adds	r3, r0, #0
 800702e:	1c19      	adds	r1, r3, #0
 8007030:	1c20      	adds	r0, r4, #0
 8007032:	f7f9 ffad 	bl	8000f90 <__aeabi_fmul>
 8007036:	1c03      	adds	r3, r0, #0
 8007038:	617b      	str	r3, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fa fbec 	bl	8001818 <__aeabi_ui2f>
 8007040:	1c03      	adds	r3, r0, #0
 8007042:	2190      	movs	r1, #144	@ 0x90
 8007044:	05c9      	lsls	r1, r1, #23
 8007046:	1c18      	adds	r0, r3, #0
 8007048:	f7f9 fdd4 	bl	8000bf4 <__aeabi_fdiv>
 800704c:	1c03      	adds	r3, r0, #0
 800704e:	1c1c      	adds	r4, r3, #0
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	8bdb      	ldrh	r3, [r3, #30]
 8007054:	0018      	movs	r0, r3
 8007056:	f7fa fbdf 	bl	8001818 <__aeabi_ui2f>
 800705a:	1c03      	adds	r3, r0, #0
 800705c:	218c      	movs	r1, #140	@ 0x8c
 800705e:	05c9      	lsls	r1, r1, #23
 8007060:	1c18      	adds	r0, r3, #0
 8007062:	f7f9 fdc7 	bl	8000bf4 <__aeabi_fdiv>
 8007066:	1c03      	adds	r3, r0, #0
 8007068:	1c19      	adds	r1, r3, #0
 800706a:	1c20      	adds	r0, r4, #0
 800706c:	f7fa f8ea 	bl	8001244 <__aeabi_fsub>
 8007070:	1c03      	adds	r3, r0, #0
 8007072:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fa fbcf 	bl	8001818 <__aeabi_ui2f>
 800707a:	1c03      	adds	r3, r0, #0
 800707c:	2190      	movs	r1, #144	@ 0x90
 800707e:	05c9      	lsls	r1, r1, #23
 8007080:	1c18      	adds	r0, r3, #0
 8007082:	f7f9 fdb7 	bl	8000bf4 <__aeabi_fdiv>
 8007086:	1c03      	adds	r3, r0, #0
 8007088:	1c1d      	adds	r5, r3, #0
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	8bdb      	ldrh	r3, [r3, #30]
 800708e:	0018      	movs	r0, r3
 8007090:	f7fa fbc2 	bl	8001818 <__aeabi_ui2f>
 8007094:	1c03      	adds	r3, r0, #0
 8007096:	218c      	movs	r1, #140	@ 0x8c
 8007098:	05c9      	lsls	r1, r1, #23
 800709a:	1c18      	adds	r0, r3, #0
 800709c:	f7f9 fdaa 	bl	8000bf4 <__aeabi_fdiv>
 80070a0:	1c03      	adds	r3, r0, #0
 80070a2:	1c19      	adds	r1, r3, #0
 80070a4:	1c28      	adds	r0, r5, #0
 80070a6:	f7fa f8cd 	bl	8001244 <__aeabi_fsub>
 80070aa:	1c03      	adds	r3, r0, #0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80070ac:	1c19      	adds	r1, r3, #0
 80070ae:	1c20      	adds	r0, r4, #0
 80070b0:	f7f9 ff6e 	bl	8000f90 <__aeabi_fmul>
 80070b4:	1c03      	adds	r3, r0, #0
 80070b6:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2222      	movs	r2, #34	@ 0x22
 80070bc:	569b      	ldrsb	r3, [r3, r2]
 80070be:	0018      	movs	r0, r3
 80070c0:	f7fa fb5a 	bl	8001778 <__aeabi_i2f>
 80070c4:	1c03      	adds	r3, r0, #0
 80070c6:	2183      	movs	r1, #131	@ 0x83
 80070c8:	05c9      	lsls	r1, r1, #23
 80070ca:	1c18      	adds	r0, r3, #0
 80070cc:	f7f9 ff60 	bl	8000f90 <__aeabi_fmul>
 80070d0:	1c03      	adds	r3, r0, #0
    var2 =
 80070d2:	1c19      	adds	r1, r3, #0
 80070d4:	1c20      	adds	r0, r4, #0
 80070d6:	f7f9 ff5b 	bl	8000f90 <__aeabi_fmul>
 80070da:	1c03      	adds	r3, r0, #0
 80070dc:	613b      	str	r3, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80070de:	6939      	ldr	r1, [r7, #16]
 80070e0:	6978      	ldr	r0, [r7, #20]
 80070e2:	f7f9 fb95 	bl	8000810 <__aeabi_fadd>
 80070e6:	1c03      	adds	r3, r0, #0
 80070e8:	1c1a      	adds	r2, r3, #0
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f2:	4905      	ldr	r1, [pc, #20]	@ (8007108 <calc_temperature+0x12c>)
 80070f4:	1c18      	adds	r0, r3, #0
 80070f6:	f7f9 fd7d 	bl	8000bf4 <__aeabi_fdiv>
 80070fa:	1c03      	adds	r3, r0, #0
 80070fc:	60fb      	str	r3, [r7, #12]

    return calc_temp;
 80070fe:	68fb      	ldr	r3, [r7, #12]
}
 8007100:	1c18      	adds	r0, r3, #0
 8007102:	46bd      	mov	sp, r7
 8007104:	b006      	add	sp, #24
 8007106:	bdb0      	pop	{r4, r5, r7, pc}
 8007108:	45a00000 	.word	0x45a00000

0800710c <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711a:	2180      	movs	r1, #128	@ 0x80
 800711c:	05c9      	lsls	r1, r1, #23
 800711e:	1c18      	adds	r0, r3, #0
 8007120:	f7f9 fd68 	bl	8000bf4 <__aeabi_fdiv>
 8007124:	1c03      	adds	r3, r0, #0
 8007126:	49a7      	ldr	r1, [pc, #668]	@ (80073c4 <calc_pressure+0x2b8>)
 8007128:	1c18      	adds	r0, r3, #0
 800712a:	f7fa f88b 	bl	8001244 <__aeabi_fsub>
 800712e:	1c03      	adds	r3, r0, #0
 8007130:	613b      	str	r3, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8007132:	6939      	ldr	r1, [r7, #16]
 8007134:	6938      	ldr	r0, [r7, #16]
 8007136:	f7f9 ff2b 	bl	8000f90 <__aeabi_fmul>
 800713a:	1c03      	adds	r3, r0, #0
 800713c:	1c1c      	adds	r4, r3, #0
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	222e      	movs	r2, #46	@ 0x2e
 8007142:	569b      	ldrsb	r3, [r3, r2]
 8007144:	0018      	movs	r0, r3
 8007146:	f7fa fb17 	bl	8001778 <__aeabi_i2f>
 800714a:	1c03      	adds	r3, r0, #0
 800714c:	2190      	movs	r1, #144	@ 0x90
 800714e:	05c9      	lsls	r1, r1, #23
 8007150:	1c18      	adds	r0, r3, #0
 8007152:	f7f9 fd4f 	bl	8000bf4 <__aeabi_fdiv>
 8007156:	1c03      	adds	r3, r0, #0
 8007158:	1c19      	adds	r1, r3, #0
 800715a:	1c20      	adds	r0, r4, #0
 800715c:	f7f9 ff18 	bl	8000f90 <__aeabi_fmul>
 8007160:	1c03      	adds	r3, r0, #0
 8007162:	60fb      	str	r3, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	222c      	movs	r2, #44	@ 0x2c
 8007168:	5e9b      	ldrsh	r3, [r3, r2]
 800716a:	0018      	movs	r0, r3
 800716c:	f7fa fb04 	bl	8001778 <__aeabi_i2f>
 8007170:	1c03      	adds	r3, r0, #0
 8007172:	6939      	ldr	r1, [r7, #16]
 8007174:	1c18      	adds	r0, r3, #0
 8007176:	f7f9 ff0b 	bl	8000f90 <__aeabi_fmul>
 800717a:	1c03      	adds	r3, r0, #0
 800717c:	1c19      	adds	r1, r3, #0
 800717e:	1c18      	adds	r0, r3, #0
 8007180:	f7f9 fb46 	bl	8000810 <__aeabi_fadd>
 8007184:	1c03      	adds	r3, r0, #0
 8007186:	1c19      	adds	r1, r3, #0
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7f9 fb41 	bl	8000810 <__aeabi_fadd>
 800718e:	1c03      	adds	r3, r0, #0
 8007190:	60fb      	str	r3, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8007192:	2181      	movs	r1, #129	@ 0x81
 8007194:	05c9      	lsls	r1, r1, #23
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7f9 fd2c 	bl	8000bf4 <__aeabi_fdiv>
 800719c:	1c03      	adds	r3, r0, #0
 800719e:	1c1c      	adds	r4, r3, #0
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	222a      	movs	r2, #42	@ 0x2a
 80071a4:	5e9b      	ldrsh	r3, [r3, r2]
 80071a6:	0018      	movs	r0, r3
 80071a8:	f7fa fae6 	bl	8001778 <__aeabi_i2f>
 80071ac:	1c03      	adds	r3, r0, #0
 80071ae:	218f      	movs	r1, #143	@ 0x8f
 80071b0:	05c9      	lsls	r1, r1, #23
 80071b2:	1c18      	adds	r0, r3, #0
 80071b4:	f7f9 feec 	bl	8000f90 <__aeabi_fmul>
 80071b8:	1c03      	adds	r3, r0, #0
 80071ba:	1c19      	adds	r1, r3, #0
 80071bc:	1c20      	adds	r0, r4, #0
 80071be:	f7f9 fb27 	bl	8000810 <__aeabi_fadd>
 80071c2:	1c03      	adds	r3, r0, #0
 80071c4:	60fb      	str	r3, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2228      	movs	r2, #40	@ 0x28
 80071ca:	569b      	ldrsb	r3, [r3, r2]
 80071cc:	0018      	movs	r0, r3
 80071ce:	f7fa fad3 	bl	8001778 <__aeabi_i2f>
 80071d2:	1c03      	adds	r3, r0, #0
 80071d4:	6939      	ldr	r1, [r7, #16]
 80071d6:	1c18      	adds	r0, r3, #0
 80071d8:	f7f9 feda 	bl	8000f90 <__aeabi_fmul>
 80071dc:	1c03      	adds	r3, r0, #0
 80071de:	6939      	ldr	r1, [r7, #16]
 80071e0:	1c18      	adds	r0, r3, #0
 80071e2:	f7f9 fed5 	bl	8000f90 <__aeabi_fmul>
 80071e6:	1c03      	adds	r3, r0, #0
 80071e8:	218d      	movs	r1, #141	@ 0x8d
 80071ea:	05c9      	lsls	r1, r1, #23
 80071ec:	1c18      	adds	r0, r3, #0
 80071ee:	f7f9 fd01 	bl	8000bf4 <__aeabi_fdiv>
 80071f2:	1c03      	adds	r3, r0, #0
 80071f4:	1c1c      	adds	r4, r3, #0
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2226      	movs	r2, #38	@ 0x26
 80071fa:	5e9b      	ldrsh	r3, [r3, r2]
 80071fc:	0018      	movs	r0, r3
 80071fe:	f7fa fabb 	bl	8001778 <__aeabi_i2f>
 8007202:	1c03      	adds	r3, r0, #0
 8007204:	6939      	ldr	r1, [r7, #16]
 8007206:	1c18      	adds	r0, r3, #0
 8007208:	f7f9 fec2 	bl	8000f90 <__aeabi_fmul>
 800720c:	1c03      	adds	r3, r0, #0
 800720e:	1c19      	adds	r1, r3, #0
 8007210:	1c20      	adds	r0, r4, #0
 8007212:	f7f9 fafd 	bl	8000810 <__aeabi_fadd>
 8007216:	1c03      	adds	r3, r0, #0
 8007218:	2192      	movs	r1, #146	@ 0x92
 800721a:	05c9      	lsls	r1, r1, #23
 800721c:	1c18      	adds	r0, r3, #0
 800721e:	f7f9 fce9 	bl	8000bf4 <__aeabi_fdiv>
 8007222:	1c03      	adds	r3, r0, #0
 8007224:	613b      	str	r3, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8007226:	218e      	movs	r1, #142	@ 0x8e
 8007228:	05c9      	lsls	r1, r1, #23
 800722a:	6938      	ldr	r0, [r7, #16]
 800722c:	f7f9 fce2 	bl	8000bf4 <__aeabi_fdiv>
 8007230:	1c03      	adds	r3, r0, #0
 8007232:	21fe      	movs	r1, #254	@ 0xfe
 8007234:	0589      	lsls	r1, r1, #22
 8007236:	1c18      	adds	r0, r3, #0
 8007238:	f7f9 faea 	bl	8000810 <__aeabi_fadd>
 800723c:	1c03      	adds	r3, r0, #0
 800723e:	1c1c      	adds	r4, r3, #0
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007244:	0018      	movs	r0, r3
 8007246:	f7fa fae7 	bl	8001818 <__aeabi_ui2f>
 800724a:	1c03      	adds	r3, r0, #0
 800724c:	1c19      	adds	r1, r3, #0
 800724e:	1c20      	adds	r0, r4, #0
 8007250:	f7f9 fe9e 	bl	8000f90 <__aeabi_fmul>
 8007254:	1c03      	adds	r3, r0, #0
 8007256:	613b      	str	r3, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fa fadd 	bl	8001818 <__aeabi_ui2f>
 800725e:	1c03      	adds	r3, r0, #0
 8007260:	1c19      	adds	r1, r3, #0
 8007262:	2093      	movs	r0, #147	@ 0x93
 8007264:	05c0      	lsls	r0, r0, #23
 8007266:	f7f9 ffed 	bl	8001244 <__aeabi_fsub>
 800726a:	1c03      	adds	r3, r0, #0
 800726c:	617b      	str	r3, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 800726e:	6938      	ldr	r0, [r7, #16]
 8007270:	f7fa fa62 	bl	8001738 <__aeabi_f2iz>
 8007274:	1e03      	subs	r3, r0, #0
 8007276:	d100      	bne.n	800727a <calc_pressure+0x16e>
 8007278:	e09c      	b.n	80073b4 <calc_pressure+0x2a8>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 800727a:	218b      	movs	r1, #139	@ 0x8b
 800727c:	05c9      	lsls	r1, r1, #23
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7f9 fcb8 	bl	8000bf4 <__aeabi_fdiv>
 8007284:	1c03      	adds	r3, r0, #0
 8007286:	1c19      	adds	r1, r3, #0
 8007288:	6978      	ldr	r0, [r7, #20]
 800728a:	f7f9 ffdb 	bl	8001244 <__aeabi_fsub>
 800728e:	1c03      	adds	r3, r0, #0
 8007290:	494d      	ldr	r1, [pc, #308]	@ (80073c8 <calc_pressure+0x2bc>)
 8007292:	1c18      	adds	r0, r3, #0
 8007294:	f7f9 fe7c 	bl	8000f90 <__aeabi_fmul>
 8007298:	1c03      	adds	r3, r0, #0
 800729a:	6939      	ldr	r1, [r7, #16]
 800729c:	1c18      	adds	r0, r3, #0
 800729e:	f7f9 fca9 	bl	8000bf4 <__aeabi_fdiv>
 80072a2:	1c03      	adds	r3, r0, #0
 80072a4:	617b      	str	r3, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2232      	movs	r2, #50	@ 0x32
 80072aa:	5e9b      	ldrsh	r3, [r3, r2]
 80072ac:	0018      	movs	r0, r3
 80072ae:	f7fa fa63 	bl	8001778 <__aeabi_i2f>
 80072b2:	1c03      	adds	r3, r0, #0
 80072b4:	6979      	ldr	r1, [r7, #20]
 80072b6:	1c18      	adds	r0, r3, #0
 80072b8:	f7f9 fe6a 	bl	8000f90 <__aeabi_fmul>
 80072bc:	1c03      	adds	r3, r0, #0
 80072be:	6979      	ldr	r1, [r7, #20]
 80072c0:	1c18      	adds	r0, r3, #0
 80072c2:	f7f9 fe65 	bl	8000f90 <__aeabi_fmul>
 80072c6:	1c03      	adds	r3, r0, #0
 80072c8:	219e      	movs	r1, #158	@ 0x9e
 80072ca:	05c9      	lsls	r1, r1, #23
 80072cc:	1c18      	adds	r0, r3, #0
 80072ce:	f7f9 fc91 	bl	8000bf4 <__aeabi_fdiv>
 80072d2:	1c03      	adds	r3, r0, #0
 80072d4:	613b      	str	r3, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2230      	movs	r2, #48	@ 0x30
 80072da:	5e9b      	ldrsh	r3, [r3, r2]
 80072dc:	0018      	movs	r0, r3
 80072de:	f7fa fa4b 	bl	8001778 <__aeabi_i2f>
 80072e2:	1c03      	adds	r3, r0, #0
 80072e4:	218e      	movs	r1, #142	@ 0x8e
 80072e6:	05c9      	lsls	r1, r1, #23
 80072e8:	1c18      	adds	r0, r3, #0
 80072ea:	f7f9 fc83 	bl	8000bf4 <__aeabi_fdiv>
 80072ee:	1c03      	adds	r3, r0, #0
 80072f0:	1c19      	adds	r1, r3, #0
 80072f2:	6978      	ldr	r0, [r7, #20]
 80072f4:	f7f9 fe4c 	bl	8000f90 <__aeabi_fmul>
 80072f8:	1c03      	adds	r3, r0, #0
 80072fa:	60fb      	str	r3, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80072fc:	2187      	movs	r1, #135	@ 0x87
 80072fe:	05c9      	lsls	r1, r1, #23
 8007300:	6978      	ldr	r0, [r7, #20]
 8007302:	f7f9 fc77 	bl	8000bf4 <__aeabi_fdiv>
 8007306:	1c03      	adds	r3, r0, #0
 8007308:	1c1c      	adds	r4, r3, #0
 800730a:	2187      	movs	r1, #135	@ 0x87
 800730c:	05c9      	lsls	r1, r1, #23
 800730e:	6978      	ldr	r0, [r7, #20]
 8007310:	f7f9 fc70 	bl	8000bf4 <__aeabi_fdiv>
 8007314:	1c03      	adds	r3, r0, #0
 8007316:	1c19      	adds	r1, r3, #0
 8007318:	1c20      	adds	r0, r4, #0
 800731a:	f7f9 fe39 	bl	8000f90 <__aeabi_fmul>
 800731e:	1c03      	adds	r3, r0, #0
 8007320:	1c1c      	adds	r4, r3, #0
 8007322:	2187      	movs	r1, #135	@ 0x87
 8007324:	05c9      	lsls	r1, r1, #23
 8007326:	6978      	ldr	r0, [r7, #20]
 8007328:	f7f9 fc64 	bl	8000bf4 <__aeabi_fdiv>
 800732c:	1c03      	adds	r3, r0, #0
 800732e:	1c19      	adds	r1, r3, #0
 8007330:	1c20      	adds	r0, r4, #0
 8007332:	f7f9 fe2d 	bl	8000f90 <__aeabi_fmul>
 8007336:	1c03      	adds	r3, r0, #0
 8007338:	1c1c      	adds	r4, r3, #0
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2234      	movs	r2, #52	@ 0x34
 800733e:	5c9b      	ldrb	r3, [r3, r2]
 8007340:	0018      	movs	r0, r3
 8007342:	f7fa fa19 	bl	8001778 <__aeabi_i2f>
 8007346:	1c03      	adds	r3, r0, #0
 8007348:	2190      	movs	r1, #144	@ 0x90
 800734a:	05c9      	lsls	r1, r1, #23
 800734c:	1c18      	adds	r0, r3, #0
 800734e:	f7f9 fc51 	bl	8000bf4 <__aeabi_fdiv>
 8007352:	1c03      	adds	r3, r0, #0
 8007354:	1c19      	adds	r1, r3, #0
 8007356:	1c20      	adds	r0, r4, #0
 8007358:	f7f9 fe1a 	bl	8000f90 <__aeabi_fmul>
 800735c:	1c03      	adds	r3, r0, #0
 800735e:	60bb      	str	r3, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8007360:	68f9      	ldr	r1, [r7, #12]
 8007362:	6938      	ldr	r0, [r7, #16]
 8007364:	f7f9 fa54 	bl	8000810 <__aeabi_fadd>
 8007368:	1c03      	adds	r3, r0, #0
 800736a:	68b9      	ldr	r1, [r7, #8]
 800736c:	1c18      	adds	r0, r3, #0
 800736e:	f7f9 fa4f 	bl	8000810 <__aeabi_fadd>
 8007372:	1c03      	adds	r3, r0, #0
 8007374:	1c1c      	adds	r4, r3, #0
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	222f      	movs	r2, #47	@ 0x2f
 800737a:	569b      	ldrsb	r3, [r3, r2]
 800737c:	0018      	movs	r0, r3
 800737e:	f7fa f9fb 	bl	8001778 <__aeabi_i2f>
 8007382:	1c03      	adds	r3, r0, #0
 8007384:	2186      	movs	r1, #134	@ 0x86
 8007386:	05c9      	lsls	r1, r1, #23
 8007388:	1c18      	adds	r0, r3, #0
 800738a:	f7f9 fe01 	bl	8000f90 <__aeabi_fmul>
 800738e:	1c03      	adds	r3, r0, #0
 8007390:	1c19      	adds	r1, r3, #0
 8007392:	1c20      	adds	r0, r4, #0
 8007394:	f7f9 fa3c 	bl	8000810 <__aeabi_fadd>
 8007398:	1c03      	adds	r3, r0, #0
 800739a:	2183      	movs	r1, #131	@ 0x83
 800739c:	05c9      	lsls	r1, r1, #23
 800739e:	1c18      	adds	r0, r3, #0
 80073a0:	f7f9 fc28 	bl	8000bf4 <__aeabi_fdiv>
 80073a4:	1c03      	adds	r3, r0, #0
 80073a6:	1c19      	adds	r1, r3, #0
 80073a8:	6978      	ldr	r0, [r7, #20]
 80073aa:	f7f9 fa31 	bl	8000810 <__aeabi_fadd>
 80073ae:	1c03      	adds	r3, r0, #0
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	e001      	b.n	80073b8 <calc_pressure+0x2ac>
    }
    else
    {
        calc_pres = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 80073b8:	697b      	ldr	r3, [r7, #20]
}
 80073ba:	1c18      	adds	r0, r3, #0
 80073bc:	46bd      	mov	sp, r7
 80073be:	b007      	add	sp, #28
 80073c0:	bd90      	pop	{r4, r7, pc}
 80073c2:	46c0      	nop			@ (mov r8, r8)
 80073c4:	477a0000 	.word	0x477a0000
 80073c8:	45c35000 	.word	0x45c35000

080073cc <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 80073cc:	b5b0      	push	{r4, r5, r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	0002      	movs	r2, r0
 80073d4:	6039      	str	r1, [r7, #0]
 80073d6:	1dbb      	adds	r3, r7, #6
 80073d8:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073de:	4967      	ldr	r1, [pc, #412]	@ (800757c <calc_humidity+0x1b0>)
 80073e0:	1c18      	adds	r0, r3, #0
 80073e2:	f7f9 fc07 	bl	8000bf4 <__aeabi_fdiv>
 80073e6:	1c03      	adds	r3, r0, #0
 80073e8:	61bb      	str	r3, [r7, #24]
    var1 = (float)((float)hum_adc) -
 80073ea:	1dbb      	adds	r3, r7, #6
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	0018      	movs	r0, r3
 80073f0:	f7fa fa12 	bl	8001818 <__aeabi_ui2f>
 80073f4:	1c04      	adds	r4, r0, #0
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	8a1b      	ldrh	r3, [r3, #16]
 80073fa:	0018      	movs	r0, r3
 80073fc:	f7fa fa0c 	bl	8001818 <__aeabi_ui2f>
 8007400:	1c03      	adds	r3, r0, #0
 8007402:	2183      	movs	r1, #131	@ 0x83
 8007404:	05c9      	lsls	r1, r1, #23
 8007406:	1c18      	adds	r0, r3, #0
 8007408:	f7f9 fdc2 	bl	8000f90 <__aeabi_fmul>
 800740c:	1c03      	adds	r3, r0, #0
 800740e:	1c1d      	adds	r5, r3, #0
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	7d1b      	ldrb	r3, [r3, #20]
 8007414:	b25b      	sxtb	r3, r3
 8007416:	0018      	movs	r0, r3
 8007418:	f7fa f9ae 	bl	8001778 <__aeabi_i2f>
 800741c:	1c03      	adds	r3, r0, #0
 800741e:	2180      	movs	r1, #128	@ 0x80
 8007420:	05c9      	lsls	r1, r1, #23
 8007422:	1c18      	adds	r0, r3, #0
 8007424:	f7f9 fbe6 	bl	8000bf4 <__aeabi_fdiv>
 8007428:	1c03      	adds	r3, r0, #0
 800742a:	69b9      	ldr	r1, [r7, #24]
 800742c:	1c18      	adds	r0, r3, #0
 800742e:	f7f9 fdaf 	bl	8000f90 <__aeabi_fmul>
 8007432:	1c03      	adds	r3, r0, #0
 8007434:	1c19      	adds	r1, r3, #0
 8007436:	1c28      	adds	r0, r5, #0
 8007438:	f7f9 f9ea 	bl	8000810 <__aeabi_fadd>
 800743c:	1c03      	adds	r3, r0, #0
    var1 = (float)((float)hum_adc) -
 800743e:	1c19      	adds	r1, r3, #0
 8007440:	1c20      	adds	r0, r4, #0
 8007442:	f7f9 feff 	bl	8001244 <__aeabi_fsub>
 8007446:	1c03      	adds	r3, r0, #0
 8007448:	617b      	str	r3, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	8a5b      	ldrh	r3, [r3, #18]
 800744e:	0018      	movs	r0, r3
 8007450:	f7fa f9e2 	bl	8001818 <__aeabi_ui2f>
 8007454:	1c03      	adds	r3, r0, #0
 8007456:	2191      	movs	r1, #145	@ 0x91
 8007458:	05c9      	lsls	r1, r1, #23
 800745a:	1c18      	adds	r0, r3, #0
 800745c:	f7f9 fbca 	bl	8000bf4 <__aeabi_fdiv>
 8007460:	1c03      	adds	r3, r0, #0
 8007462:	1c1c      	adds	r4, r3, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	7d5b      	ldrb	r3, [r3, #21]
 8007468:	b25b      	sxtb	r3, r3
 800746a:	0018      	movs	r0, r3
 800746c:	f7fa f984 	bl	8001778 <__aeabi_i2f>
 8007470:	1c03      	adds	r3, r0, #0
 8007472:	218d      	movs	r1, #141	@ 0x8d
 8007474:	05c9      	lsls	r1, r1, #23
 8007476:	1c18      	adds	r0, r3, #0
 8007478:	f7f9 fbbc 	bl	8000bf4 <__aeabi_fdiv>
 800747c:	1c03      	adds	r3, r0, #0
 800747e:	69b9      	ldr	r1, [r7, #24]
 8007480:	1c18      	adds	r0, r3, #0
 8007482:	f7f9 fd85 	bl	8000f90 <__aeabi_fmul>
 8007486:	1c03      	adds	r3, r0, #0
 8007488:	21fe      	movs	r1, #254	@ 0xfe
 800748a:	0589      	lsls	r1, r1, #22
 800748c:	1c18      	adds	r0, r3, #0
 800748e:	f7f9 f9bf 	bl	8000810 <__aeabi_fadd>
 8007492:	1c03      	adds	r3, r0, #0
 8007494:	1c1d      	adds	r5, r3, #0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	7d9b      	ldrb	r3, [r3, #22]
 800749a:	b25b      	sxtb	r3, r3
 800749c:	0018      	movs	r0, r3
 800749e:	f7fa f96b 	bl	8001778 <__aeabi_i2f>
 80074a2:	1c03      	adds	r3, r0, #0
 80074a4:	2193      	movs	r1, #147	@ 0x93
 80074a6:	05c9      	lsls	r1, r1, #23
 80074a8:	1c18      	adds	r0, r3, #0
 80074aa:	f7f9 fba3 	bl	8000bf4 <__aeabi_fdiv>
 80074ae:	1c03      	adds	r3, r0, #0
 80074b0:	69b9      	ldr	r1, [r7, #24]
 80074b2:	1c18      	adds	r0, r3, #0
 80074b4:	f7f9 fd6c 	bl	8000f90 <__aeabi_fmul>
 80074b8:	1c03      	adds	r3, r0, #0
 80074ba:	69b9      	ldr	r1, [r7, #24]
 80074bc:	1c18      	adds	r0, r3, #0
 80074be:	f7f9 fd67 	bl	8000f90 <__aeabi_fmul>
 80074c2:	1c03      	adds	r3, r0, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 80074c4:	1c19      	adds	r1, r3, #0
 80074c6:	1c28      	adds	r0, r5, #0
 80074c8:	f7f9 f9a2 	bl	8000810 <__aeabi_fadd>
 80074cc:	1c03      	adds	r3, r0, #0
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 80074ce:	1c19      	adds	r1, r3, #0
 80074d0:	1c20      	adds	r0, r4, #0
 80074d2:	f7f9 fd5d 	bl	8000f90 <__aeabi_fmul>
 80074d6:	1c03      	adds	r3, r0, #0
    var2 = var1 *
 80074d8:	1c19      	adds	r1, r3, #0
 80074da:	6978      	ldr	r0, [r7, #20]
 80074dc:	f7f9 fd58 	bl	8000f90 <__aeabi_fmul>
 80074e0:	1c03      	adds	r3, r0, #0
 80074e2:	613b      	str	r3, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	7ddb      	ldrb	r3, [r3, #23]
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7fa f995 	bl	8001818 <__aeabi_ui2f>
 80074ee:	1c03      	adds	r3, r0, #0
 80074f0:	218d      	movs	r1, #141	@ 0x8d
 80074f2:	05c9      	lsls	r1, r1, #23
 80074f4:	1c18      	adds	r0, r3, #0
 80074f6:	f7f9 fb7d 	bl	8000bf4 <__aeabi_fdiv>
 80074fa:	1c03      	adds	r3, r0, #0
 80074fc:	60fb      	str	r3, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	7e1b      	ldrb	r3, [r3, #24]
 8007502:	b25b      	sxtb	r3, r3
 8007504:	0018      	movs	r0, r3
 8007506:	f7fa f937 	bl	8001778 <__aeabi_i2f>
 800750a:	1c03      	adds	r3, r0, #0
 800750c:	2194      	movs	r1, #148	@ 0x94
 800750e:	05c9      	lsls	r1, r1, #23
 8007510:	1c18      	adds	r0, r3, #0
 8007512:	f7f9 fb6f 	bl	8000bf4 <__aeabi_fdiv>
 8007516:	1c03      	adds	r3, r0, #0
 8007518:	60bb      	str	r3, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 800751a:	69b9      	ldr	r1, [r7, #24]
 800751c:	68b8      	ldr	r0, [r7, #8]
 800751e:	f7f9 fd37 	bl	8000f90 <__aeabi_fmul>
 8007522:	1c03      	adds	r3, r0, #0
 8007524:	68f9      	ldr	r1, [r7, #12]
 8007526:	1c18      	adds	r0, r3, #0
 8007528:	f7f9 f972 	bl	8000810 <__aeabi_fadd>
 800752c:	1c03      	adds	r3, r0, #0
 800752e:	6939      	ldr	r1, [r7, #16]
 8007530:	1c18      	adds	r0, r3, #0
 8007532:	f7f9 fd2d 	bl	8000f90 <__aeabi_fmul>
 8007536:	1c03      	adds	r3, r0, #0
 8007538:	6939      	ldr	r1, [r7, #16]
 800753a:	1c18      	adds	r0, r3, #0
 800753c:	f7f9 fd28 	bl	8000f90 <__aeabi_fmul>
 8007540:	1c03      	adds	r3, r0, #0
 8007542:	1c19      	adds	r1, r3, #0
 8007544:	6938      	ldr	r0, [r7, #16]
 8007546:	f7f9 f963 	bl	8000810 <__aeabi_fadd>
 800754a:	1c03      	adds	r3, r0, #0
 800754c:	61fb      	str	r3, [r7, #28]
    if (calc_hum > 100.0f)
 800754e:	490c      	ldr	r1, [pc, #48]	@ (8007580 <calc_humidity+0x1b4>)
 8007550:	69f8      	ldr	r0, [r7, #28]
 8007552:	f7f8 ffd7 	bl	8000504 <__aeabi_fcmpgt>
 8007556:	1e03      	subs	r3, r0, #0
 8007558:	d002      	beq.n	8007560 <calc_humidity+0x194>
    {
        calc_hum = 100.0f;
 800755a:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <calc_humidity+0x1b4>)
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	e007      	b.n	8007570 <calc_humidity+0x1a4>
    }
    else if (calc_hum < 0.0f)
 8007560:	2100      	movs	r1, #0
 8007562:	69f8      	ldr	r0, [r7, #28]
 8007564:	f7f8 ffba 	bl	80004dc <__aeabi_fcmplt>
 8007568:	1e03      	subs	r3, r0, #0
 800756a:	d001      	beq.n	8007570 <calc_humidity+0x1a4>
    {
        calc_hum = 0.0f;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8007570:	69fb      	ldr	r3, [r7, #28]
}
 8007572:	1c18      	adds	r0, r3, #0
 8007574:	46bd      	mov	sp, r7
 8007576:	b008      	add	sp, #32
 8007578:	bdb0      	pop	{r4, r5, r7, pc}
 800757a:	46c0      	nop			@ (mov r8, r8)
 800757c:	45a00000 	.word	0x45a00000
 8007580:	42c80000 	.word	0x42c80000

08007584 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8007584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007586:	b0a9      	sub	sp, #164	@ 0xa4
 8007588:	af00      	add	r7, sp, #0
 800758a:	603a      	str	r2, [r7, #0]
 800758c:	1dbb      	adds	r3, r7, #6
 800758e:	1c02      	adds	r2, r0, #0
 8007590:	801a      	strh	r2, [r3, #0]
 8007592:	1d7b      	adds	r3, r7, #5
 8007594:	1c0a      	adds	r2, r1, #0
 8007596:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8007598:	1dbb      	adds	r3, r7, #6
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	0018      	movs	r0, r3
 800759e:	f7fa f93b 	bl	8001818 <__aeabi_ui2f>
 80075a2:	1c03      	adds	r3, r0, #0
 80075a4:	259c      	movs	r5, #156	@ 0x9c
 80075a6:	197a      	adds	r2, r7, r5
 80075a8:	6013      	str	r3, [r2, #0]
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 80075aa:	1d7b      	adds	r3, r7, #5
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2201      	movs	r2, #1
 80075b0:	409a      	lsls	r2, r3
 80075b2:	0013      	movs	r3, r2
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7fa f92f 	bl	8001818 <__aeabi_ui2f>
 80075ba:	1c03      	adds	r3, r0, #0
 80075bc:	2498      	movs	r4, #152	@ 0x98
 80075be:	193a      	adds	r2, r7, r4
 80075c0:	6013      	str	r3, [r2, #0]
    const float lookup_k1_range[16] = {
 80075c2:	2648      	movs	r6, #72	@ 0x48
 80075c4:	19ba      	adds	r2, r7, r6
 80075c6:	4b43      	ldr	r3, [pc, #268]	@ (80076d4 <calc_gas_resistance_low+0x150>)
 80075c8:	0010      	movs	r0, r2
 80075ca:	0019      	movs	r1, r3
 80075cc:	2340      	movs	r3, #64	@ 0x40
 80075ce:	001a      	movs	r2, r3
 80075d0:	f00a fba6 	bl	8011d20 <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 80075d4:	2308      	movs	r3, #8
 80075d6:	18fa      	adds	r2, r7, r3
 80075d8:	4b3f      	ldr	r3, [pc, #252]	@ (80076d8 <calc_gas_resistance_low+0x154>)
 80075da:	0010      	movs	r0, r2
 80075dc:	0019      	movs	r1, r3
 80075de:	2340      	movs	r3, #64	@ 0x40
 80075e0:	001a      	movs	r2, r3
 80075e2:	f00a fb9d 	bl	8011d20 <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	223e      	movs	r2, #62	@ 0x3e
 80075ea:	569b      	ldrsb	r3, [r3, r2]
 80075ec:	0018      	movs	r0, r3
 80075ee:	f7fa f8c3 	bl	8001778 <__aeabi_i2f>
 80075f2:	1c03      	adds	r3, r0, #0
 80075f4:	4939      	ldr	r1, [pc, #228]	@ (80076dc <calc_gas_resistance_low+0x158>)
 80075f6:	1c18      	adds	r0, r3, #0
 80075f8:	f7f9 fcca 	bl	8000f90 <__aeabi_fmul>
 80075fc:	1c03      	adds	r3, r0, #0
 80075fe:	4938      	ldr	r1, [pc, #224]	@ (80076e0 <calc_gas_resistance_low+0x15c>)
 8007600:	1c18      	adds	r0, r3, #0
 8007602:	f7f9 f905 	bl	8000810 <__aeabi_fadd>
 8007606:	1c03      	adds	r3, r0, #0
 8007608:	2294      	movs	r2, #148	@ 0x94
 800760a:	18b9      	adds	r1, r7, r2
 800760c:	600b      	str	r3, [r1, #0]
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 800760e:	1d7b      	adds	r3, r7, #5
 8007610:	781a      	ldrb	r2, [r3, #0]
 8007612:	19bb      	adds	r3, r7, r6
 8007614:	0092      	lsls	r2, r2, #2
 8007616:	58d3      	ldr	r3, [r2, r3]
 8007618:	4932      	ldr	r1, [pc, #200]	@ (80076e4 <calc_gas_resistance_low+0x160>)
 800761a:	1c18      	adds	r0, r3, #0
 800761c:	f7f9 faea 	bl	8000bf4 <__aeabi_fdiv>
 8007620:	1c03      	adds	r3, r0, #0
 8007622:	21fe      	movs	r1, #254	@ 0xfe
 8007624:	0589      	lsls	r1, r1, #22
 8007626:	1c18      	adds	r0, r3, #0
 8007628:	f7f9 f8f2 	bl	8000810 <__aeabi_fadd>
 800762c:	1c03      	adds	r3, r0, #0
 800762e:	1c19      	adds	r1, r3, #0
 8007630:	2294      	movs	r2, #148	@ 0x94
 8007632:	18ba      	adds	r2, r7, r2
 8007634:	6810      	ldr	r0, [r2, #0]
 8007636:	f7f9 fcab 	bl	8000f90 <__aeabi_fmul>
 800763a:	1c03      	adds	r3, r0, #0
 800763c:	2690      	movs	r6, #144	@ 0x90
 800763e:	19ba      	adds	r2, r7, r6
 8007640:	6013      	str	r3, [r2, #0]
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8007642:	1d7b      	adds	r3, r7, #5
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	2308      	movs	r3, #8
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	0092      	lsls	r2, r2, #2
 800764c:	58d3      	ldr	r3, [r2, r3]
 800764e:	4925      	ldr	r1, [pc, #148]	@ (80076e4 <calc_gas_resistance_low+0x160>)
 8007650:	1c18      	adds	r0, r3, #0
 8007652:	f7f9 facf 	bl	8000bf4 <__aeabi_fdiv>
 8007656:	1c03      	adds	r3, r0, #0
 8007658:	21fe      	movs	r1, #254	@ 0xfe
 800765a:	0589      	lsls	r1, r1, #22
 800765c:	1c18      	adds	r0, r3, #0
 800765e:	f7f9 f8d7 	bl	8000810 <__aeabi_fadd>
 8007662:	1c03      	adds	r3, r0, #0
 8007664:	228c      	movs	r2, #140	@ 0x8c
 8007666:	18b9      	adds	r1, r7, r2
 8007668:	600b      	str	r3, [r1, #0]
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 800766a:	491f      	ldr	r1, [pc, #124]	@ (80076e8 <calc_gas_resistance_low+0x164>)
 800766c:	18bb      	adds	r3, r7, r2
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	f7f9 fc8e 	bl	8000f90 <__aeabi_fmul>
 8007674:	1c03      	adds	r3, r0, #0
 8007676:	193a      	adds	r2, r7, r4
 8007678:	6811      	ldr	r1, [r2, #0]
 800767a:	1c18      	adds	r0, r3, #0
 800767c:	f7f9 fc88 	bl	8000f90 <__aeabi_fmul>
 8007680:	1c03      	adds	r3, r0, #0
 8007682:	1c1c      	adds	r4, r3, #0
 8007684:	2188      	movs	r1, #136	@ 0x88
 8007686:	05c9      	lsls	r1, r1, #23
 8007688:	197b      	adds	r3, r7, r5
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	f7f9 fdda 	bl	8001244 <__aeabi_fsub>
 8007690:	1c03      	adds	r3, r0, #0
 8007692:	19ba      	adds	r2, r7, r6
 8007694:	6811      	ldr	r1, [r2, #0]
 8007696:	1c18      	adds	r0, r3, #0
 8007698:	f7f9 faac 	bl	8000bf4 <__aeabi_fdiv>
 800769c:	1c03      	adds	r3, r0, #0
 800769e:	21fe      	movs	r1, #254	@ 0xfe
 80076a0:	0589      	lsls	r1, r1, #22
 80076a2:	1c18      	adds	r0, r3, #0
 80076a4:	f7f9 f8b4 	bl	8000810 <__aeabi_fadd>
 80076a8:	1c03      	adds	r3, r0, #0
 80076aa:	1c19      	adds	r1, r3, #0
 80076ac:	1c20      	adds	r0, r4, #0
 80076ae:	f7f9 fc6f 	bl	8000f90 <__aeabi_fmul>
 80076b2:	1c03      	adds	r3, r0, #0
 80076b4:	1c19      	adds	r1, r3, #0
 80076b6:	20fe      	movs	r0, #254	@ 0xfe
 80076b8:	0580      	lsls	r0, r0, #22
 80076ba:	f7f9 fa9b 	bl	8000bf4 <__aeabi_fdiv>
 80076be:	1c03      	adds	r3, r0, #0
 80076c0:	2288      	movs	r2, #136	@ 0x88
 80076c2:	18b9      	adds	r1, r7, r2
 80076c4:	600b      	str	r3, [r1, #0]

    return calc_gas_res;
 80076c6:	18bb      	adds	r3, r7, r2
 80076c8:	681b      	ldr	r3, [r3, #0]
}
 80076ca:	1c18      	adds	r0, r3, #0
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b029      	add	sp, #164	@ 0xa4
 80076d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076d2:	46c0      	nop			@ (mov r8, r8)
 80076d4:	08015bdc 	.word	0x08015bdc
 80076d8:	08015c1c 	.word	0x08015c1c
 80076dc:	40a00000 	.word	0x40a00000
 80076e0:	44a78000 	.word	0x44a78000
 80076e4:	42c80000 	.word	0x42c80000
 80076e8:	340637bd 	.word	0x340637bd

080076ec <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 80076ec:	b590      	push	{r4, r7, lr}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	0002      	movs	r2, r0
 80076f4:	1dbb      	adds	r3, r7, #6
 80076f6:	801a      	strh	r2, [r3, #0]
 80076f8:	1d7b      	adds	r3, r7, #5
 80076fa:	1c0a      	adds	r2, r1, #0
 80076fc:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 80076fe:	1d7b      	adds	r3, r7, #5
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2280      	movs	r2, #128	@ 0x80
 8007704:	02d2      	lsls	r2, r2, #11
 8007706:	40da      	lsrs	r2, r3
 8007708:	0013      	movs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 800770c:	1dbb      	adds	r3, r7, #6
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	4a13      	ldr	r2, [pc, #76]	@ (8007760 <calc_gas_resistance_high+0x74>)
 8007712:	4694      	mov	ip, r2
 8007714:	4463      	add	r3, ip
 8007716:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	0013      	movs	r3, r2
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	189b      	adds	r3, r3, r2
 8007720:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2280      	movs	r2, #128	@ 0x80
 8007726:	0152      	lsls	r2, r2, #5
 8007728:	4694      	mov	ip, r2
 800772a:	4463      	add	r3, ip
 800772c:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 800772e:	6978      	ldr	r0, [r7, #20]
 8007730:	f7fa f872 	bl	8001818 <__aeabi_ui2f>
 8007734:	1c03      	adds	r3, r0, #0
 8007736:	490b      	ldr	r1, [pc, #44]	@ (8007764 <calc_gas_resistance_high+0x78>)
 8007738:	1c18      	adds	r0, r3, #0
 800773a:	f7f9 fc29 	bl	8000f90 <__aeabi_fmul>
 800773e:	1c03      	adds	r3, r0, #0
 8007740:	1c1c      	adds	r4, r3, #0
 8007742:	6938      	ldr	r0, [r7, #16]
 8007744:	f7fa f818 	bl	8001778 <__aeabi_i2f>
 8007748:	1c03      	adds	r3, r0, #0
 800774a:	1c19      	adds	r1, r3, #0
 800774c:	1c20      	adds	r0, r4, #0
 800774e:	f7f9 fa51 	bl	8000bf4 <__aeabi_fdiv>
 8007752:	1c03      	adds	r3, r0, #0
 8007754:	60fb      	str	r3, [r7, #12]

    return calc_gas_res;
 8007756:	68fb      	ldr	r3, [r7, #12]
}
 8007758:	1c18      	adds	r0, r3, #0
 800775a:	46bd      	mov	sp, r7
 800775c:	b007      	add	sp, #28
 800775e:	bd90      	pop	{r4, r7, pc}
 8007760:	fffffe00 	.word	0xfffffe00
 8007764:	49742400 	.word	0x49742400

08007768 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8007768:	b5b0      	push	{r4, r5, r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	0002      	movs	r2, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	1dbb      	adds	r3, r7, #6
 8007774:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8007776:	1dbb      	adds	r3, r7, #6
 8007778:	881a      	ldrh	r2, [r3, #0]
 800777a:	23c8      	movs	r3, #200	@ 0xc8
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	429a      	cmp	r2, r3
 8007780:	d903      	bls.n	800778a <calc_res_heat+0x22>
    {
        temp = 400;
 8007782:	1dbb      	adds	r3, r7, #6
 8007784:	22c8      	movs	r2, #200	@ 0xc8
 8007786:	0052      	lsls	r2, r2, #1
 8007788:	801a      	strh	r2, [r3, #0]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	7e5b      	ldrb	r3, [r3, #25]
 800778e:	b25b      	sxtb	r3, r3
 8007790:	0018      	movs	r0, r3
 8007792:	f7f9 fff1 	bl	8001778 <__aeabi_i2f>
 8007796:	1c03      	adds	r3, r0, #0
 8007798:	2183      	movs	r1, #131	@ 0x83
 800779a:	05c9      	lsls	r1, r1, #23
 800779c:	1c18      	adds	r0, r3, #0
 800779e:	f7f9 fa29 	bl	8000bf4 <__aeabi_fdiv>
 80077a2:	1c03      	adds	r3, r0, #0
 80077a4:	4950      	ldr	r1, [pc, #320]	@ (80078e8 <calc_res_heat+0x180>)
 80077a6:	1c18      	adds	r0, r3, #0
 80077a8:	f7f9 f832 	bl	8000810 <__aeabi_fadd>
 80077ac:	1c03      	adds	r3, r0, #0
 80077ae:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	221a      	movs	r2, #26
 80077b4:	5e9b      	ldrsh	r3, [r3, r2]
 80077b6:	0018      	movs	r0, r3
 80077b8:	f7f9 ffde 	bl	8001778 <__aeabi_i2f>
 80077bc:	1c03      	adds	r3, r0, #0
 80077be:	218e      	movs	r1, #142	@ 0x8e
 80077c0:	05c9      	lsls	r1, r1, #23
 80077c2:	1c18      	adds	r0, r3, #0
 80077c4:	f7f9 fa16 	bl	8000bf4 <__aeabi_fdiv>
 80077c8:	1c03      	adds	r3, r0, #0
 80077ca:	4948      	ldr	r1, [pc, #288]	@ (80078ec <calc_res_heat+0x184>)
 80077cc:	1c18      	adds	r0, r3, #0
 80077ce:	f7f9 fbdf 	bl	8000f90 <__aeabi_fmul>
 80077d2:	1c03      	adds	r3, r0, #0
 80077d4:	4946      	ldr	r1, [pc, #280]	@ (80078f0 <calc_res_heat+0x188>)
 80077d6:	1c18      	adds	r0, r3, #0
 80077d8:	f7f9 f81a 	bl	8000810 <__aeabi_fadd>
 80077dc:	1c03      	adds	r3, r0, #0
 80077de:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	7f1b      	ldrb	r3, [r3, #28]
 80077e4:	b25b      	sxtb	r3, r3
 80077e6:	0018      	movs	r0, r3
 80077e8:	f7f9 ffc6 	bl	8001778 <__aeabi_i2f>
 80077ec:	1c03      	adds	r3, r0, #0
 80077ee:	2189      	movs	r1, #137	@ 0x89
 80077f0:	05c9      	lsls	r1, r1, #23
 80077f2:	1c18      	adds	r0, r3, #0
 80077f4:	f7f9 f9fe 	bl	8000bf4 <__aeabi_fdiv>
 80077f8:	1c03      	adds	r3, r0, #0
 80077fa:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 80077fc:	1dbb      	adds	r3, r7, #6
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	0018      	movs	r0, r3
 8007802:	f7fa f809 	bl	8001818 <__aeabi_ui2f>
 8007806:	1c03      	adds	r3, r0, #0
 8007808:	69b9      	ldr	r1, [r7, #24]
 800780a:	1c18      	adds	r0, r3, #0
 800780c:	f7f9 fbc0 	bl	8000f90 <__aeabi_fmul>
 8007810:	1c03      	adds	r3, r0, #0
 8007812:	21fe      	movs	r1, #254	@ 0xfe
 8007814:	0589      	lsls	r1, r1, #22
 8007816:	1c18      	adds	r0, r3, #0
 8007818:	f7f8 fffa 	bl	8000810 <__aeabi_fadd>
 800781c:	1c03      	adds	r3, r0, #0
 800781e:	1c19      	adds	r1, r3, #0
 8007820:	69f8      	ldr	r0, [r7, #28]
 8007822:	f7f9 fbb5 	bl	8000f90 <__aeabi_fmul>
 8007826:	1c03      	adds	r3, r0, #0
 8007828:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	7b9b      	ldrb	r3, [r3, #14]
 800782e:	b25b      	sxtb	r3, r3
 8007830:	0018      	movs	r0, r3
 8007832:	f7f9 ffa1 	bl	8001778 <__aeabi_i2f>
 8007836:	1c03      	adds	r3, r0, #0
 8007838:	6979      	ldr	r1, [r7, #20]
 800783a:	1c18      	adds	r0, r3, #0
 800783c:	f7f9 fba8 	bl	8000f90 <__aeabi_fmul>
 8007840:	1c03      	adds	r3, r0, #0
 8007842:	1c19      	adds	r1, r3, #0
 8007844:	6938      	ldr	r0, [r7, #16]
 8007846:	f7f8 ffe3 	bl	8000810 <__aeabi_fadd>
 800784a:	1c03      	adds	r3, r0, #0
 800784c:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	223c      	movs	r2, #60	@ 0x3c
 8007852:	5c9b      	ldrb	r3, [r3, r2]
 8007854:	0018      	movs	r0, r3
 8007856:	f7f9 ffdf 	bl	8001818 <__aeabi_ui2f>
 800785a:	1c03      	adds	r3, r0, #0
 800785c:	2181      	movs	r1, #129	@ 0x81
 800785e:	05c9      	lsls	r1, r1, #23
 8007860:	1c18      	adds	r0, r3, #0
 8007862:	f7f8 ffd5 	bl	8000810 <__aeabi_fadd>
 8007866:	1c03      	adds	r3, r0, #0
 8007868:	1c19      	adds	r1, r3, #0
 800786a:	2081      	movs	r0, #129	@ 0x81
 800786c:	05c0      	lsls	r0, r0, #23
 800786e:	f7f9 f9c1 	bl	8000bf4 <__aeabi_fdiv>
 8007872:	1c03      	adds	r3, r0, #0
 8007874:	68f9      	ldr	r1, [r7, #12]
 8007876:	1c18      	adds	r0, r3, #0
 8007878:	f7f9 fb8a 	bl	8000f90 <__aeabi_fmul>
 800787c:	1c03      	adds	r3, r0, #0
 800787e:	1c1c      	adds	r4, r3, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	223d      	movs	r2, #61	@ 0x3d
 8007884:	569b      	ldrsb	r3, [r3, r2]
 8007886:	0018      	movs	r0, r3
 8007888:	f7f9 ff76 	bl	8001778 <__aeabi_i2f>
 800788c:	1c03      	adds	r3, r0, #0
 800788e:	4919      	ldr	r1, [pc, #100]	@ (80078f4 <calc_res_heat+0x18c>)
 8007890:	1c18      	adds	r0, r3, #0
 8007892:	f7f9 fb7d 	bl	8000f90 <__aeabi_fmul>
 8007896:	1c03      	adds	r3, r0, #0
 8007898:	21fe      	movs	r1, #254	@ 0xfe
 800789a:	0589      	lsls	r1, r1, #22
 800789c:	1c18      	adds	r0, r3, #0
 800789e:	f7f8 ffb7 	bl	8000810 <__aeabi_fadd>
 80078a2:	1c03      	adds	r3, r0, #0
 80078a4:	1c19      	adds	r1, r3, #0
 80078a6:	20fe      	movs	r0, #254	@ 0xfe
 80078a8:	0580      	lsls	r0, r0, #22
 80078aa:	f7f9 f9a3 	bl	8000bf4 <__aeabi_fdiv>
 80078ae:	1c03      	adds	r3, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80078b0:	1c19      	adds	r1, r3, #0
 80078b2:	1c20      	adds	r0, r4, #0
 80078b4:	f7f9 fb6c 	bl	8000f90 <__aeabi_fmul>
 80078b8:	1c03      	adds	r3, r0, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80078ba:	490f      	ldr	r1, [pc, #60]	@ (80078f8 <calc_res_heat+0x190>)
 80078bc:	1c18      	adds	r0, r3, #0
 80078be:	f7f9 fcc1 	bl	8001244 <__aeabi_fsub>
 80078c2:	1c03      	adds	r3, r0, #0
        (uint8_t)(3.4f *
 80078c4:	490d      	ldr	r1, [pc, #52]	@ (80078fc <calc_res_heat+0x194>)
 80078c6:	1c18      	adds	r0, r3, #0
 80078c8:	f7f9 fb62 	bl	8000f90 <__aeabi_fmul>
 80078cc:	1c03      	adds	r3, r0, #0
    res_heat =
 80078ce:	250b      	movs	r5, #11
 80078d0:	197c      	adds	r4, r7, r5
 80078d2:	1c18      	adds	r0, r3, #0
 80078d4:	f7f8 fe4a 	bl	800056c <__aeabi_f2uiz>
 80078d8:	0003      	movs	r3, r0
 80078da:	7023      	strb	r3, [r4, #0]
                   25));

    return res_heat;
 80078dc:	197b      	adds	r3, r7, r5
 80078de:	781b      	ldrb	r3, [r3, #0]
}
 80078e0:	0018      	movs	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b008      	add	sp, #32
 80078e6:	bdb0      	pop	{r4, r5, r7, pc}
 80078e8:	42440000 	.word	0x42440000
 80078ec:	3a03126f 	.word	0x3a03126f
 80078f0:	3b1a0275 	.word	0x3b1a0275
 80078f4:	3b03126f 	.word	0x3b03126f
 80078f8:	41c80000 	.word	0x41c80000
 80078fc:	4059999a 	.word	0x4059999a

08007900 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	0002      	movs	r2, r0
 8007908:	1dbb      	adds	r3, r7, #6
 800790a:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 800790c:	230f      	movs	r3, #15
 800790e:	18fb      	adds	r3, r7, r3
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
    uint8_t durval;

    if (dur >= 0xfc0)
 8007914:	1dbb      	adds	r3, r7, #6
 8007916:	881a      	ldrh	r2, [r3, #0]
 8007918:	23fc      	movs	r3, #252	@ 0xfc
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	429a      	cmp	r2, r3
 800791e:	d30f      	bcc.n	8007940 <calc_gas_wait+0x40>
    {
        durval = 0xff; /* Max duration*/
 8007920:	230e      	movs	r3, #14
 8007922:	18fb      	adds	r3, r7, r3
 8007924:	22ff      	movs	r2, #255	@ 0xff
 8007926:	701a      	strb	r2, [r3, #0]
 8007928:	e01a      	b.n	8007960 <calc_gas_wait+0x60>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 800792a:	1dbb      	adds	r3, r7, #6
 800792c:	1dba      	adds	r2, r7, #6
 800792e:	8812      	ldrh	r2, [r2, #0]
 8007930:	0892      	lsrs	r2, r2, #2
 8007932:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8007934:	220f      	movs	r2, #15
 8007936:	18bb      	adds	r3, r7, r2
 8007938:	18ba      	adds	r2, r7, r2
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	3201      	adds	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8007940:	1dbb      	adds	r3, r7, #6
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	2b3f      	cmp	r3, #63	@ 0x3f
 8007946:	d8f0      	bhi.n	800792a <calc_gas_wait+0x2a>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8007948:	1dbb      	adds	r3, r7, #6
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b2d9      	uxtb	r1, r3
 800794e:	230f      	movs	r3, #15
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	019b      	lsls	r3, r3, #6
 8007956:	b2da      	uxtb	r2, r3
 8007958:	230e      	movs	r3, #14
 800795a:	18fb      	adds	r3, r7, r3
 800795c:	188a      	adds	r2, r1, r2
 800795e:	701a      	strb	r2, [r3, #0]
    }

    return durval;
 8007960:	230e      	movs	r3, #14
 8007962:	18fb      	adds	r3, r7, r3
 8007964:	781b      	ldrb	r3, [r3, #0]
}
 8007966:	0018      	movs	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	b004      	add	sp, #16
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8007970:	b5b0      	push	{r4, r5, r7, lr}
 8007972:	b08e      	sub	sp, #56	@ 0x38
 8007974:	af00      	add	r7, sp, #0
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	607a      	str	r2, [r7, #4]
 800797a:	230f      	movs	r3, #15
 800797c:	18fb      	adds	r3, r7, r3
 800797e:	1c02      	adds	r2, r0, #0
 8007980:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8007982:	2337      	movs	r3, #55	@ 0x37
 8007984:	18fb      	adds	r3, r7, r3
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800798a:	2310      	movs	r3, #16
 800798c:	18fb      	adds	r3, r7, r3
 800798e:	0018      	movs	r0, r3
 8007990:	2311      	movs	r3, #17
 8007992:	001a      	movs	r2, r3
 8007994:	2100      	movs	r1, #0
 8007996:	f00a f8bf 	bl	8011b18 <memset>
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 800799a:	2336      	movs	r3, #54	@ 0x36
 800799c:	18fb      	adds	r3, r7, r3
 800799e:	2205      	movs	r2, #5
 80079a0:	701a      	strb	r2, [r3, #0]

    while ((tries) && (rslt == BME68X_OK))
 80079a2:	e14e      	b.n	8007c42 <read_field_data+0x2d2>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 80079a4:	230f      	movs	r3, #15
 80079a6:	18fb      	adds	r3, r7, r3
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	1c1a      	adds	r2, r3, #0
 80079ac:	0112      	lsls	r2, r2, #4
 80079ae:	18d3      	adds	r3, r2, r3
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	331d      	adds	r3, #29
 80079b4:	b2d8      	uxtb	r0, r3
 80079b6:	2537      	movs	r5, #55	@ 0x37
 80079b8:	197c      	adds	r4, r7, r5
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2210      	movs	r2, #16
 80079be:	18b9      	adds	r1, r7, r2
 80079c0:	2211      	movs	r2, #17
 80079c2:	f7fe fdef 	bl	80065a4 <bme68x_get_regs>
 80079c6:	0003      	movs	r3, r0
 80079c8:	7023      	strb	r3, [r4, #0]
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <read_field_data+0x68>
        {
            rslt = BME68X_E_NULL_PTR;
 80079d0:	197b      	adds	r3, r7, r5
 80079d2:	22ff      	movs	r2, #255	@ 0xff
 80079d4:	701a      	strb	r2, [r3, #0]
            break;
 80079d6:	e140      	b.n	8007c5a <read_field_data+0x2ea>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 80079d8:	2010      	movs	r0, #16
 80079da:	183b      	adds	r3, r7, r0
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	227f      	movs	r2, #127	@ 0x7f
 80079e0:	4393      	bics	r3, r2
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 80079e8:	183b      	adds	r3, r7, r0
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	220f      	movs	r2, #15
 80079ee:	4013      	ands	r3, r2
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80079f6:	183b      	adds	r3, r7, r0
 80079f8:	785a      	ldrb	r2, [r3, #1]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 80079fe:	183b      	adds	r3, r7, r0
 8007a00:	789b      	ldrb	r3, [r3, #2]
 8007a02:	031a      	lsls	r2, r3, #12
 8007a04:	183b      	adds	r3, r7, r0
 8007a06:	78db      	ldrb	r3, [r3, #3]
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	183a      	adds	r2, r7, r0
 8007a0e:	7912      	ldrb	r2, [r2, #4]
 8007a10:	0912      	lsrs	r2, r2, #4
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	4313      	orrs	r3, r2
 8007a16:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8007a18:	183b      	adds	r3, r7, r0
 8007a1a:	795b      	ldrb	r3, [r3, #5]
 8007a1c:	031a      	lsls	r2, r3, #12
 8007a1e:	183b      	adds	r3, r7, r0
 8007a20:	799b      	ldrb	r3, [r3, #6]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	4313      	orrs	r3, r2
 8007a26:	183a      	adds	r2, r7, r0
 8007a28:	79d2      	ldrb	r2, [r2, #7]
 8007a2a:	0912      	lsrs	r2, r2, #4
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8007a32:	183b      	adds	r3, r7, r0
 8007a34:	7a1b      	ldrb	r3, [r3, #8]
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	183b      	adds	r3, r7, r0
 8007a3c:	7a5b      	ldrb	r3, [r3, #9]
 8007a3e:	0019      	movs	r1, r3
 8007a40:	232a      	movs	r3, #42	@ 0x2a
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	430a      	orrs	r2, r1
 8007a46:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8007a48:	183b      	adds	r3, r7, r0
 8007a4a:	7b5b      	ldrb	r3, [r3, #13]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	183b      	adds	r3, r7, r0
 8007a52:	7b9b      	ldrb	r3, [r3, #14]
 8007a54:	099b      	lsrs	r3, r3, #6
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	0019      	movs	r1, r3
 8007a5a:	2328      	movs	r3, #40	@ 0x28
 8007a5c:	18fb      	adds	r3, r7, r3
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8007a62:	183b      	adds	r3, r7, r0
 8007a64:	7bdb      	ldrb	r3, [r3, #15]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	183b      	adds	r3, r7, r0
 8007a6c:	7c1b      	ldrb	r3, [r3, #16]
 8007a6e:	099b      	lsrs	r3, r3, #6
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	0019      	movs	r1, r3
 8007a74:	2326      	movs	r3, #38	@ 0x26
 8007a76:	18fb      	adds	r3, r7, r3
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8007a7c:	183b      	adds	r3, r7, r0
 8007a7e:	7b9a      	ldrb	r2, [r3, #14]
 8007a80:	2325      	movs	r3, #37	@ 0x25
 8007a82:	18fb      	adds	r3, r7, r3
 8007a84:	210f      	movs	r1, #15
 8007a86:	400a      	ands	r2, r1
 8007a88:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8007a8a:	183b      	adds	r3, r7, r0
 8007a8c:	7c1a      	ldrb	r2, [r3, #16]
 8007a8e:	2324      	movs	r3, #36	@ 0x24
 8007a90:	18fb      	adds	r3, r7, r3
 8007a92:	210f      	movs	r1, #15
 8007a94:	400a      	ands	r2, r1
 8007a96:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d11c      	bne.n	8007ada <read_field_data+0x16a>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	b25a      	sxtb	r2, r3
 8007aa6:	183b      	adds	r3, r7, r0
 8007aa8:	7c1b      	ldrb	r3, [r3, #16]
 8007aaa:	b25b      	sxtb	r3, r3
 8007aac:	2120      	movs	r1, #32
 8007aae:	400b      	ands	r3, r1
 8007ab0:	b25b      	sxtb	r3, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b25b      	sxtb	r3, r3
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	b25a      	sxtb	r2, r3
 8007ac2:	183b      	adds	r3, r7, r0
 8007ac4:	7c1b      	ldrb	r3, [r3, #16]
 8007ac6:	b25b      	sxtb	r3, r3
 8007ac8:	2110      	movs	r1, #16
 8007aca:	400b      	ands	r3, r1
 8007acc:	b25b      	sxtb	r3, r3
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	b25b      	sxtb	r3, r3
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	e01c      	b.n	8007b14 <read_field_data+0x1a4>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b25a      	sxtb	r2, r3
 8007ae0:	2010      	movs	r0, #16
 8007ae2:	183b      	adds	r3, r7, r0
 8007ae4:	7b9b      	ldrb	r3, [r3, #14]
 8007ae6:	b25b      	sxtb	r3, r3
 8007ae8:	2120      	movs	r1, #32
 8007aea:	400b      	ands	r3, r1
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	4313      	orrs	r3, r2
 8007af0:	b25b      	sxtb	r3, r3
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	b25a      	sxtb	r2, r3
 8007afe:	183b      	adds	r3, r7, r0
 8007b00:	7b9b      	ldrb	r3, [r3, #14]
 8007b02:	b25b      	sxtb	r3, r3
 8007b04:	2110      	movs	r1, #16
 8007b06:	400b      	ands	r3, r1
 8007b08:	b25b      	sxtb	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	b25b      	sxtb	r3, r3
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	b25b      	sxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	db00      	blt.n	8007b20 <read_field_data+0x1b0>
 8007b1e:	e07d      	b.n	8007c1c <read_field_data+0x2ac>
 8007b20:	2237      	movs	r2, #55	@ 0x37
 8007b22:	18bb      	adds	r3, r7, r2
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b25b      	sxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d000      	beq.n	8007b2e <read_field_data+0x1be>
 8007b2c:	e076      	b.n	8007c1c <read_field_data+0x2ac>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	785b      	ldrb	r3, [r3, #1]
 8007b32:	335a      	adds	r3, #90	@ 0x5a
 8007b34:	b2d8      	uxtb	r0, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	1cd9      	adds	r1, r3, #3
 8007b3a:	0015      	movs	r5, r2
 8007b3c:	18bc      	adds	r4, r7, r2
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f7fe fd2f 	bl	80065a4 <bme68x_get_regs>
 8007b46:	0003      	movs	r3, r0
 8007b48:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8007b4a:	002a      	movs	r2, r5
 8007b4c:	18bb      	adds	r3, r7, r2
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	b25b      	sxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10c      	bne.n	8007b70 <read_field_data+0x200>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	3350      	adds	r3, #80	@ 0x50
 8007b5c:	b2d8      	uxtb	r0, r3
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	1d19      	adds	r1, r3, #4
 8007b62:	18bc      	adds	r4, r7, r2
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f7fe fd1c 	bl	80065a4 <bme68x_get_regs>
 8007b6c:	0003      	movs	r3, r0
 8007b6e:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8007b70:	2237      	movs	r2, #55	@ 0x37
 8007b72:	18bb      	adds	r3, r7, r2
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	b25b      	sxtb	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10c      	bne.n	8007b96 <read_field_data+0x226>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	3364      	adds	r3, #100	@ 0x64
 8007b82:	b2d8      	uxtb	r0, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	1d59      	adds	r1, r3, #5
 8007b88:	18bc      	adds	r4, r7, r2
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f7fe fd09 	bl	80065a4 <bme68x_get_regs>
 8007b92:	0003      	movs	r3, r0
 8007b94:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8007b96:	2337      	movs	r3, #55	@ 0x37
 8007b98:	18fb      	adds	r3, r7, r3
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d13c      	bne.n	8007c1c <read_field_data+0x2ac>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba6:	0011      	movs	r1, r2
 8007ba8:	0018      	movs	r0, r3
 8007baa:	f7ff fa17 	bl	8006fdc <calc_temperature>
 8007bae:	1c02      	adds	r2, r0, #0
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	609a      	str	r2, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	0011      	movs	r1, r2
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f7ff faa6 	bl	800710c <calc_pressure>
 8007bc0:	1c02      	adds	r2, r0, #0
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	60da      	str	r2, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	232a      	movs	r3, #42	@ 0x2a
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	0011      	movs	r1, r2
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f7ff fbfb 	bl	80073cc <calc_humidity>
 8007bd6:	1c02      	adds	r2, r0, #0
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	611a      	str	r2, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d10d      	bne.n	8007c00 <read_field_data+0x290>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8007be4:	2324      	movs	r3, #36	@ 0x24
 8007be6:	18fb      	adds	r3, r7, r3
 8007be8:	781a      	ldrb	r2, [r3, #0]
 8007bea:	2326      	movs	r3, #38	@ 0x26
 8007bec:	18fb      	adds	r3, r7, r3
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	0011      	movs	r1, r2
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f7ff fd7a 	bl	80076ec <calc_gas_resistance_high>
 8007bf8:	1c02      	adds	r2, r0, #0
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	615a      	str	r2, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8007bfe:	e02c      	b.n	8007c5a <read_field_data+0x2ea>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	2325      	movs	r3, #37	@ 0x25
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	7819      	ldrb	r1, [r3, #0]
 8007c08:	2328      	movs	r3, #40	@ 0x28
 8007c0a:	18fb      	adds	r3, r7, r3
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	0018      	movs	r0, r3
 8007c10:	f7ff fcb8 	bl	8007584 <calc_gas_resistance_low>
 8007c14:	1c02      	adds	r2, r0, #0
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	615a      	str	r2, [r3, #20]
                break;
 8007c1a:	e01e      	b.n	8007c5a <read_field_data+0x2ea>
            }
        }

        if (rslt == BME68X_OK)
 8007c1c:	2337      	movs	r3, #55	@ 0x37
 8007c1e:	18fb      	adds	r3, r7, r3
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	b25b      	sxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d106      	bne.n	8007c36 <read_field_data+0x2c6>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	480e      	ldr	r0, [pc, #56]	@ (8007c6c <read_field_data+0x2fc>)
 8007c32:	0019      	movs	r1, r3
 8007c34:	4790      	blx	r2
        }

        tries--;
 8007c36:	2136      	movs	r1, #54	@ 0x36
 8007c38:	187b      	adds	r3, r7, r1
 8007c3a:	781a      	ldrb	r2, [r3, #0]
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	3a01      	subs	r2, #1
 8007c40:	701a      	strb	r2, [r3, #0]
    while ((tries) && (rslt == BME68X_OK))
 8007c42:	2336      	movs	r3, #54	@ 0x36
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d006      	beq.n	8007c5a <read_field_data+0x2ea>
 8007c4c:	2337      	movs	r3, #55	@ 0x37
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	b25b      	sxtb	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d100      	bne.n	8007c5a <read_field_data+0x2ea>
 8007c58:	e6a4      	b.n	80079a4 <read_field_data+0x34>
    }

    return rslt;
 8007c5a:	2337      	movs	r3, #55	@ 0x37
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	b25b      	sxtb	r3, r3
}
 8007c62:	0018      	movs	r0, r3
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b00e      	add	sp, #56	@ 0x38
 8007c68:	bdb0      	pop	{r4, r5, r7, pc}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	00002710 	.word	0x00002710

08007c70 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8007c70:	b5b0      	push	{r4, r5, r7, lr}
 8007c72:	b09c      	sub	sp, #112	@ 0x70
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8007c7a:	246f      	movs	r4, #111	@ 0x6f
 8007c7c:	193b      	adds	r3, r7, r4
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8007c82:	2328      	movs	r3, #40	@ 0x28
 8007c84:	18fb      	adds	r3, r7, r3
 8007c86:	0018      	movs	r0, r3
 8007c88:	2333      	movs	r3, #51	@ 0x33
 8007c8a:	001a      	movs	r2, r3
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	f009 ff43 	bl	8011b18 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8007c92:	2308      	movs	r3, #8
 8007c94:	18fb      	adds	r3, r7, r3
 8007c96:	0018      	movs	r0, r3
 8007c98:	231e      	movs	r3, #30
 8007c9a:	001a      	movs	r2, r3
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	f009 ff3b 	bl	8011b18 <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10c      	bne.n	8007cc4 <read_all_field_data+0x54>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3304      	adds	r3, #4
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d107      	bne.n	8007cc4 <read_all_field_data+0x54>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <read_all_field_data+0x54>
    {
        rslt = BME68X_E_NULL_PTR;
 8007cbe:	193b      	adds	r3, r7, r4
 8007cc0:	22ff      	movs	r2, #255	@ 0xff
 8007cc2:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BME68X_OK)
 8007cc4:	226f      	movs	r2, #111	@ 0x6f
 8007cc6:	18bb      	adds	r3, r7, r2
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	b25b      	sxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d109      	bne.n	8007ce4 <read_all_field_data+0x74>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8007cd0:	18bc      	adds	r4, r7, r2
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2228      	movs	r2, #40	@ 0x28
 8007cd6:	18b9      	adds	r1, r7, r2
 8007cd8:	2233      	movs	r2, #51	@ 0x33
 8007cda:	201d      	movs	r0, #29
 8007cdc:	f7fe fc62 	bl	80065a4 <bme68x_get_regs>
 8007ce0:	0003      	movs	r3, r0
 8007ce2:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8007ce4:	226f      	movs	r2, #111	@ 0x6f
 8007ce6:	18bb      	adds	r3, r7, r2
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b25b      	sxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d109      	bne.n	8007d04 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8007cf0:	18bc      	adds	r4, r7, r2
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	18b9      	adds	r1, r7, r2
 8007cf8:	221e      	movs	r2, #30
 8007cfa:	2050      	movs	r0, #80	@ 0x50
 8007cfc:	f7fe fc52 	bl	80065a4 <bme68x_get_regs>
 8007d00:	0003      	movs	r3, r0
 8007d02:	7023      	strb	r3, [r4, #0]
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8007d04:	236e      	movs	r3, #110	@ 0x6e
 8007d06:	18fb      	adds	r3, r7, r3
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]
 8007d0c:	e1af      	b.n	800806e <read_all_field_data+0x3fe>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8007d0e:	206d      	movs	r0, #109	@ 0x6d
 8007d10:	183a      	adds	r2, r7, r0
 8007d12:	256e      	movs	r5, #110	@ 0x6e
 8007d14:	197b      	adds	r3, r7, r5
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	1c19      	adds	r1, r3, #0
 8007d1a:	0109      	lsls	r1, r1, #4
 8007d1c:	18cb      	adds	r3, r1, r3
 8007d1e:	7013      	strb	r3, [r2, #0]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8007d20:	183b      	adds	r3, r7, r0
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2428      	movs	r4, #40	@ 0x28
 8007d26:	193a      	adds	r2, r7, r4
 8007d28:	5cd2      	ldrb	r2, [r2, r3]
 8007d2a:	197b      	adds	r3, r7, r5
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	18cb      	adds	r3, r1, r3
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	217f      	movs	r1, #127	@ 0x7f
 8007d38:	438a      	bics	r2, r1
 8007d3a:	b2d2      	uxtb	r2, r2
 8007d3c:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8007d3e:	183b      	adds	r3, r7, r0
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	193a      	adds	r2, r7, r4
 8007d44:	5cd2      	ldrb	r2, [r2, r3]
 8007d46:	197b      	adds	r3, r7, r5
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	18cb      	adds	r3, r1, r3
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	210f      	movs	r1, #15
 8007d54:	400a      	ands	r2, r1
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8007d5a:	183b      	adds	r3, r7, r0
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	197b      	adds	r3, r7, r5
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	18cb      	adds	r3, r1, r3
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	1939      	adds	r1, r7, r4
 8007d6e:	5c8a      	ldrb	r2, [r1, r2]
 8007d70:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8007d72:	183b      	adds	r3, r7, r0
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	3302      	adds	r3, #2
 8007d78:	193a      	adds	r2, r7, r4
 8007d7a:	5cd3      	ldrb	r3, [r2, r3]
 8007d7c:	031a      	lsls	r2, r3, #12
 8007d7e:	183b      	adds	r3, r7, r0
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	3303      	adds	r3, #3
 8007d84:	1939      	adds	r1, r7, r4
 8007d86:	5ccb      	ldrb	r3, [r1, r3]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8007d8c:	183a      	adds	r2, r7, r0
 8007d8e:	7812      	ldrb	r2, [r2, #0]
 8007d90:	3204      	adds	r2, #4
 8007d92:	1939      	adds	r1, r7, r4
 8007d94:	5c8a      	ldrb	r2, [r1, r2]
 8007d96:	0912      	lsrs	r2, r2, #4
 8007d98:	b2d2      	uxtb	r2, r2
        adc_pres =
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8007d9e:	183b      	adds	r3, r7, r0
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	3305      	adds	r3, #5
 8007da4:	193a      	adds	r2, r7, r4
 8007da6:	5cd3      	ldrb	r3, [r2, r3]
 8007da8:	031a      	lsls	r2, r3, #12
 8007daa:	183b      	adds	r3, r7, r0
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	3306      	adds	r3, #6
 8007db0:	1939      	adds	r1, r7, r4
 8007db2:	5ccb      	ldrb	r3, [r1, r3]
 8007db4:	011b      	lsls	r3, r3, #4
 8007db6:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8007db8:	183a      	adds	r2, r7, r0
 8007dba:	7812      	ldrb	r2, [r2, #0]
 8007dbc:	3207      	adds	r2, #7
 8007dbe:	1939      	adds	r1, r7, r4
 8007dc0:	5c8a      	ldrb	r2, [r1, r2]
 8007dc2:	0912      	lsrs	r2, r2, #4
 8007dc4:	b2d2      	uxtb	r2, r2
        adc_temp =
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8007dca:	183b      	adds	r3, r7, r0
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	193a      	adds	r2, r7, r4
 8007dd2:	5cd3      	ldrb	r3, [r2, r3]
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	183b      	adds	r3, r7, r0
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	3309      	adds	r3, #9
 8007dde:	1939      	adds	r1, r7, r4
 8007de0:	5ccb      	ldrb	r3, [r1, r3]
 8007de2:	0019      	movs	r1, r3
 8007de4:	2362      	movs	r3, #98	@ 0x62
 8007de6:	18fb      	adds	r3, r7, r3
 8007de8:	430a      	orrs	r2, r1
 8007dea:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8007dec:	183b      	adds	r3, r7, r0
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	330d      	adds	r3, #13
 8007df2:	193a      	adds	r2, r7, r4
 8007df4:	5cd3      	ldrb	r3, [r2, r3]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	183b      	adds	r3, r7, r0
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	330e      	adds	r3, #14
 8007e00:	1939      	adds	r1, r7, r4
 8007e02:	5ccb      	ldrb	r3, [r1, r3]
 8007e04:	099b      	lsrs	r3, r3, #6
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	0019      	movs	r1, r3
 8007e0a:	2360      	movs	r3, #96	@ 0x60
 8007e0c:	18fb      	adds	r3, r7, r3
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8007e12:	183b      	adds	r3, r7, r0
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	330f      	adds	r3, #15
 8007e18:	193a      	adds	r2, r7, r4
 8007e1a:	5cd3      	ldrb	r3, [r2, r3]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	183b      	adds	r3, r7, r0
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	3310      	adds	r3, #16
 8007e26:	1939      	adds	r1, r7, r4
 8007e28:	5ccb      	ldrb	r3, [r1, r3]
 8007e2a:	099b      	lsrs	r3, r3, #6
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	0019      	movs	r1, r3
 8007e30:	235e      	movs	r3, #94	@ 0x5e
 8007e32:	18fb      	adds	r3, r7, r3
 8007e34:	430a      	orrs	r2, r1
 8007e36:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8007e38:	183b      	adds	r3, r7, r0
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	330e      	adds	r3, #14
 8007e3e:	193a      	adds	r2, r7, r4
 8007e40:	5cd2      	ldrb	r2, [r2, r3]
 8007e42:	235d      	movs	r3, #93	@ 0x5d
 8007e44:	18fb      	adds	r3, r7, r3
 8007e46:	210f      	movs	r1, #15
 8007e48:	400a      	ands	r2, r1
 8007e4a:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8007e4c:	183b      	adds	r3, r7, r0
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	3310      	adds	r3, #16
 8007e52:	193a      	adds	r2, r7, r4
 8007e54:	5cd2      	ldrb	r2, [r2, r3]
 8007e56:	235c      	movs	r3, #92	@ 0x5c
 8007e58:	18fb      	adds	r3, r7, r3
 8007e5a:	210f      	movs	r1, #15
 8007e5c:	400a      	ands	r2, r1
 8007e5e:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d136      	bne.n	8007ed6 <read_all_field_data+0x266>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8007e68:	197b      	adds	r3, r7, r5
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	18d3      	adds	r3, r2, r3
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	b25a      	sxtb	r2, r3
 8007e78:	183b      	adds	r3, r7, r0
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	3310      	adds	r3, #16
 8007e7e:	1939      	adds	r1, r7, r4
 8007e80:	5ccb      	ldrb	r3, [r1, r3]
 8007e82:	b25b      	sxtb	r3, r3
 8007e84:	2120      	movs	r1, #32
 8007e86:	400b      	ands	r3, r1
 8007e88:	b25b      	sxtb	r3, r3
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	b259      	sxtb	r1, r3
 8007e8e:	197b      	adds	r3, r7, r5
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	18d3      	adds	r3, r2, r3
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	b2ca      	uxtb	r2, r1
 8007e9c:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8007e9e:	197b      	adds	r3, r7, r5
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	18d3      	adds	r3, r2, r3
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	b25a      	sxtb	r2, r3
 8007eae:	183b      	adds	r3, r7, r0
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	3310      	adds	r3, #16
 8007eb4:	1939      	adds	r1, r7, r4
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	2110      	movs	r1, #16
 8007ebc:	400b      	ands	r3, r1
 8007ebe:	b25b      	sxtb	r3, r3
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	b259      	sxtb	r1, r3
 8007ec4:	197b      	adds	r3, r7, r5
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	18d3      	adds	r3, r2, r3
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	b2ca      	uxtb	r2, r1
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	e038      	b.n	8007f48 <read_all_field_data+0x2d8>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8007ed6:	206e      	movs	r0, #110	@ 0x6e
 8007ed8:	183b      	adds	r3, r7, r0
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	18d3      	adds	r3, r2, r3
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	b25a      	sxtb	r2, r3
 8007ee8:	246d      	movs	r4, #109	@ 0x6d
 8007eea:	193b      	adds	r3, r7, r4
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	330e      	adds	r3, #14
 8007ef0:	2528      	movs	r5, #40	@ 0x28
 8007ef2:	1979      	adds	r1, r7, r5
 8007ef4:	5ccb      	ldrb	r3, [r1, r3]
 8007ef6:	b25b      	sxtb	r3, r3
 8007ef8:	2120      	movs	r1, #32
 8007efa:	400b      	ands	r3, r1
 8007efc:	b25b      	sxtb	r3, r3
 8007efe:	4313      	orrs	r3, r2
 8007f00:	b259      	sxtb	r1, r3
 8007f02:	183b      	adds	r3, r7, r0
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	18d3      	adds	r3, r2, r3
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	b2ca      	uxtb	r2, r1
 8007f10:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8007f12:	183b      	adds	r3, r7, r0
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	18d3      	adds	r3, r2, r3
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	b25a      	sxtb	r2, r3
 8007f22:	193b      	adds	r3, r7, r4
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	330e      	adds	r3, #14
 8007f28:	1979      	adds	r1, r7, r5
 8007f2a:	5ccb      	ldrb	r3, [r1, r3]
 8007f2c:	b25b      	sxtb	r3, r3
 8007f2e:	2110      	movs	r1, #16
 8007f30:	400b      	ands	r3, r1
 8007f32:	b25b      	sxtb	r3, r3
 8007f34:	4313      	orrs	r3, r2
 8007f36:	b259      	sxtb	r1, r3
 8007f38:	183b      	adds	r3, r7, r0
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	18d3      	adds	r3, r2, r3
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	b2ca      	uxtb	r2, r1
 8007f46:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8007f48:	256e      	movs	r5, #110	@ 0x6e
 8007f4a:	197b      	adds	r3, r7, r5
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	18d3      	adds	r3, r2, r3
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	0019      	movs	r1, r3
 8007f5a:	197b      	adds	r3, r7, r5
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	18d3      	adds	r3, r2, r3
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2008      	movs	r0, #8
 8007f68:	183a      	adds	r2, r7, r0
 8007f6a:	5c52      	ldrb	r2, [r2, r1]
 8007f6c:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8007f6e:	197b      	adds	r3, r7, r5
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	18d3      	adds	r3, r2, r3
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	330a      	adds	r3, #10
 8007f7e:	001a      	movs	r2, r3
 8007f80:	197b      	adds	r3, r7, r5
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	18cb      	adds	r3, r1, r3
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	1839      	adds	r1, r7, r0
 8007f8e:	5c8a      	ldrb	r2, [r1, r2]
 8007f90:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8007f92:	197b      	adds	r3, r7, r5
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	18d3      	adds	r3, r2, r3
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	3314      	adds	r3, #20
 8007fa2:	001a      	movs	r2, r3
 8007fa4:	197b      	adds	r3, r7, r5
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	18cb      	adds	r3, r1, r3
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	1839      	adds	r1, r7, r0
 8007fb2:	5c8a      	ldrb	r2, [r1, r2]
 8007fb4:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8007fb6:	197b      	adds	r3, r7, r5
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	18d3      	adds	r3, r2, r3
 8007fc0:	681c      	ldr	r4, [r3, #0]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fc6:	0011      	movs	r1, r2
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f7ff f807 	bl	8006fdc <calc_temperature>
 8007fce:	1c03      	adds	r3, r0, #0
 8007fd0:	60a3      	str	r3, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8007fd2:	197b      	adds	r3, r7, r5
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	18d3      	adds	r3, r2, r3
 8007fdc:	681c      	ldr	r4, [r3, #0]
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fe2:	0011      	movs	r1, r2
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	f7ff f891 	bl	800710c <calc_pressure>
 8007fea:	1c03      	adds	r3, r0, #0
 8007fec:	60e3      	str	r3, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8007fee:	197b      	adds	r3, r7, r5
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	18d3      	adds	r3, r2, r3
 8007ff8:	681c      	ldr	r4, [r3, #0]
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	2362      	movs	r3, #98	@ 0x62
 8007ffe:	18fb      	adds	r3, r7, r3
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	0011      	movs	r1, r2
 8008004:	0018      	movs	r0, r3
 8008006:	f7ff f9e1 	bl	80073cc <calc_humidity>
 800800a:	1c03      	adds	r3, r0, #0
 800800c:	6123      	str	r3, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d112      	bne.n	800803c <read_all_field_data+0x3cc>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8008016:	197b      	adds	r3, r7, r5
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	18d3      	adds	r3, r2, r3
 8008020:	681c      	ldr	r4, [r3, #0]
 8008022:	235c      	movs	r3, #92	@ 0x5c
 8008024:	18fb      	adds	r3, r7, r3
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	235e      	movs	r3, #94	@ 0x5e
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	0011      	movs	r1, r2
 8008030:	0018      	movs	r0, r3
 8008032:	f7ff fb5b 	bl	80076ec <calc_gas_resistance_high>
 8008036:	1c03      	adds	r3, r0, #0
 8008038:	6163      	str	r3, [r4, #20]
 800803a:	e012      	b.n	8008062 <read_all_field_data+0x3f2>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 800803c:	236e      	movs	r3, #110	@ 0x6e
 800803e:	18fb      	adds	r3, r7, r3
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	18d3      	adds	r3, r2, r3
 8008048:	681c      	ldr	r4, [r3, #0]
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	235d      	movs	r3, #93	@ 0x5d
 800804e:	18fb      	adds	r3, r7, r3
 8008050:	7819      	ldrb	r1, [r3, #0]
 8008052:	2360      	movs	r3, #96	@ 0x60
 8008054:	18fb      	adds	r3, r7, r3
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	0018      	movs	r0, r3
 800805a:	f7ff fa93 	bl	8007584 <calc_gas_resistance_low>
 800805e:	1c03      	adds	r3, r0, #0
 8008060:	6163      	str	r3, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8008062:	216e      	movs	r1, #110	@ 0x6e
 8008064:	187b      	adds	r3, r7, r1
 8008066:	781a      	ldrb	r2, [r3, #0]
 8008068:	187b      	adds	r3, r7, r1
 800806a:	3201      	adds	r2, #1
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	236e      	movs	r3, #110	@ 0x6e
 8008070:	18fb      	adds	r3, r7, r3
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d806      	bhi.n	8008086 <read_all_field_data+0x416>
 8008078:	236f      	movs	r3, #111	@ 0x6f
 800807a:	18fb      	adds	r3, r7, r3
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b25b      	sxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d100      	bne.n	8008086 <read_all_field_data+0x416>
 8008084:	e643      	b.n	8007d0e <read_all_field_data+0x9e>
        }
    }

    return rslt;
 8008086:	236f      	movs	r3, #111	@ 0x6f
 8008088:	18fb      	adds	r3, r7, r3
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	b25b      	sxtb	r3, r3
}
 800808e:	0018      	movs	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	b01c      	add	sp, #112	@ 0x70
 8008094:	bdb0      	pop	{r4, r5, r7, pc}

08008096 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8008096:	b5b0      	push	{r4, r5, r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	0002      	movs	r2, r0
 800809e:	6039      	str	r1, [r7, #0]
 80080a0:	1dfb      	adds	r3, r7, #7
 80080a2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80080a4:	250f      	movs	r5, #15
 80080a6:	197c      	adds	r4, r7, r5
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	0018      	movs	r0, r3
 80080ac:	f000 f8e1 	bl	8008272 <null_ptr_check>
 80080b0:	0003      	movs	r3, r0
 80080b2:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80080b4:	197b      	adds	r3, r7, r5
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	b25b      	sxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d160      	bne.n	8008180 <set_mem_page+0xea>
    {
        if (reg_addr > 0x7f)
 80080be:	1dfb      	adds	r3, r7, #7
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	b25b      	sxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	da04      	bge.n	80080d2 <set_mem_page+0x3c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80080c8:	230e      	movs	r3, #14
 80080ca:	18fb      	adds	r3, r7, r3
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
 80080d0:	e003      	b.n	80080da <set_mem_page+0x44>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80080d2:	230e      	movs	r3, #14
 80080d4:	18fb      	adds	r3, r7, r3
 80080d6:	2210      	movs	r2, #16
 80080d8:	701a      	strb	r2, [r3, #0]
        }

        if (mem_page != dev->mem_page)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	7b5b      	ldrb	r3, [r3, #13]
 80080de:	210e      	movs	r1, #14
 80080e0:	187a      	adds	r2, r7, r1
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d04b      	beq.n	8008180 <set_mem_page+0xea>
        {
            dev->mem_page = mem_page;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	187a      	adds	r2, r7, r1
 80080ec:	7812      	ldrb	r2, [r2, #0]
 80080ee:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	220d      	movs	r2, #13
 80080fa:	18b9      	adds	r1, r7, r2
 80080fc:	2201      	movs	r2, #1
 80080fe:	20f3      	movs	r0, #243	@ 0xf3
 8008100:	47a0      	blx	r4
 8008102:	0003      	movs	r3, r0
 8008104:	0019      	movs	r1, r3
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	224c      	movs	r2, #76	@ 0x4c
 800810a:	5499      	strb	r1, [r3, r2]
            if (dev->intf_rslt != 0)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	224c      	movs	r2, #76	@ 0x4c
 8008110:	569b      	ldrsb	r3, [r3, r2]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <set_mem_page+0x88>
            {
                rslt = BME68X_E_COM_FAIL;
 8008116:	230f      	movs	r3, #15
 8008118:	18fb      	adds	r3, r7, r3
 800811a:	22fe      	movs	r2, #254	@ 0xfe
 800811c:	701a      	strb	r2, [r3, #0]
            }

            if (rslt == BME68X_OK)
 800811e:	250f      	movs	r5, #15
 8008120:	197b      	adds	r3, r7, r5
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	b25b      	sxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d12a      	bne.n	8008180 <set_mem_page+0xea>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 800812a:	210d      	movs	r1, #13
 800812c:	187b      	adds	r3, r7, r1
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2210      	movs	r2, #16
 8008132:	4393      	bics	r3, r2
 8008134:	b2da      	uxtb	r2, r3
 8008136:	187b      	adds	r3, r7, r1
 8008138:	701a      	strb	r2, [r3, #0]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	7b5b      	ldrb	r3, [r3, #13]
 800813e:	b25b      	sxtb	r3, r3
 8008140:	2210      	movs	r2, #16
 8008142:	4013      	ands	r3, r2
 8008144:	b25a      	sxtb	r2, r3
 8008146:	187b      	adds	r3, r7, r1
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b25b      	sxtb	r3, r3
 800814c:	4313      	orrs	r3, r2
 800814e:	b25b      	sxtb	r3, r3
 8008150:	b2da      	uxtb	r2, r3
 8008152:	187b      	adds	r3, r7, r1
 8008154:	701a      	strb	r2, [r3, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	1879      	adds	r1, r7, r1
 8008160:	2201      	movs	r2, #1
 8008162:	2073      	movs	r0, #115	@ 0x73
 8008164:	47a0      	blx	r4
 8008166:	0003      	movs	r3, r0
 8008168:	0019      	movs	r1, r3
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	224c      	movs	r2, #76	@ 0x4c
 800816e:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	224c      	movs	r2, #76	@ 0x4c
 8008174:	569b      	ldrsb	r3, [r3, r2]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <set_mem_page+0xea>
                {
                    rslt = BME68X_E_COM_FAIL;
 800817a:	197b      	adds	r3, r7, r5
 800817c:	22fe      	movs	r2, #254	@ 0xfe
 800817e:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 8008180:	230f      	movs	r3, #15
 8008182:	18fb      	adds	r3, r7, r3
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	b25b      	sxtb	r3, r3
}
 8008188:	0018      	movs	r0, r3
 800818a:	46bd      	mov	sp, r7
 800818c:	b004      	add	sp, #16
 800818e:	bdb0      	pop	{r4, r5, r7, pc}

08008190 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8008190:	b5b0      	push	{r4, r5, r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8008198:	250f      	movs	r5, #15
 800819a:	197c      	adds	r4, r7, r5
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	0018      	movs	r0, r3
 80081a0:	f000 f867 	bl	8008272 <null_ptr_check>
 80081a4:	0003      	movs	r3, r0
 80081a6:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80081a8:	197b      	adds	r3, r7, r5
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b25b      	sxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d11e      	bne.n	80081f0 <get_mem_page+0x60>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	220e      	movs	r2, #14
 80081bc:	18b9      	adds	r1, r7, r2
 80081be:	2201      	movs	r2, #1
 80081c0:	20f3      	movs	r0, #243	@ 0xf3
 80081c2:	47a0      	blx	r4
 80081c4:	0003      	movs	r3, r0
 80081c6:	0019      	movs	r1, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	224c      	movs	r2, #76	@ 0x4c
 80081cc:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	224c      	movs	r2, #76	@ 0x4c
 80081d2:	569b      	ldrsb	r3, [r3, r2]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <get_mem_page+0x50>
        {
            rslt = BME68X_E_COM_FAIL;
 80081d8:	197b      	adds	r3, r7, r5
 80081da:	22fe      	movs	r2, #254	@ 0xfe
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	e007      	b.n	80081f0 <get_mem_page+0x60>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80081e0:	230e      	movs	r3, #14
 80081e2:	18fb      	adds	r3, r7, r3
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2210      	movs	r2, #16
 80081e8:	4013      	ands	r3, r2
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80081f0:	230f      	movs	r3, #15
 80081f2:	18fb      	adds	r3, r7, r3
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b25b      	sxtb	r3, r3
}
 80081f8:	0018      	movs	r0, r3
 80081fa:	46bd      	mov	sp, r7
 80081fc:	b004      	add	sp, #16
 80081fe:	bdb0      	pop	{r4, r5, r7, pc}

08008200 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8008200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	607a      	str	r2, [r7, #4]
 800820a:	250b      	movs	r5, #11
 800820c:	197b      	adds	r3, r7, r5
 800820e:	1c0a      	adds	r2, r1, #0
 8008210:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8008212:	2617      	movs	r6, #23
 8008214:	19bc      	adds	r4, r7, r6
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	0018      	movs	r0, r3
 800821a:	f000 f82a 	bl	8008272 <null_ptr_check>
 800821e:	0003      	movs	r3, r0
 8008220:	7023      	strb	r3, [r4, #0]
    if ((value != NULL) && (rslt == BME68X_OK))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d018      	beq.n	800825a <boundary_check+0x5a>
 8008228:	19bb      	adds	r3, r7, r6
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b25b      	sxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d113      	bne.n	800825a <boundary_check+0x5a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	197a      	adds	r2, r7, r5
 8008238:	7812      	ldrb	r2, [r2, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d211      	bcs.n	8008262 <boundary_check+0x62>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	197a      	adds	r2, r7, r5
 8008242:	7812      	ldrb	r2, [r2, #0]
 8008244:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	224d      	movs	r2, #77	@ 0x4d
 800824a:	5c9b      	ldrb	r3, [r3, r2]
 800824c:	2201      	movs	r2, #1
 800824e:	4313      	orrs	r3, r2
 8008250:	b2d9      	uxtb	r1, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	224d      	movs	r2, #77	@ 0x4d
 8008256:	5499      	strb	r1, [r3, r2]
        if (*value > max)
 8008258:	e003      	b.n	8008262 <boundary_check+0x62>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800825a:	2317      	movs	r3, #23
 800825c:	18fb      	adds	r3, r7, r3
 800825e:	22ff      	movs	r2, #255	@ 0xff
 8008260:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8008262:	2317      	movs	r3, #23
 8008264:	18fb      	adds	r3, r7, r3
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	b25b      	sxtb	r3, r3
}
 800826a:	0018      	movs	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	b007      	add	sp, #28
 8008270:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008272 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 800827a:	230f      	movs	r3, #15
 800827c:	18fb      	adds	r3, r7, r3
 800827e:	2200      	movs	r2, #0
 8008280:	701a      	strb	r2, [r3, #0]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <null_ptr_check+0x2e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <null_ptr_check+0x2e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008294:	2b00      	cmp	r3, #0
 8008296:	d003      	beq.n	80082a0 <null_ptr_check+0x2e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <null_ptr_check+0x36>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 80082a0:	230f      	movs	r3, #15
 80082a2:	18fb      	adds	r3, r7, r3
 80082a4:	22ff      	movs	r2, #255	@ 0xff
 80082a6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80082a8:	230f      	movs	r3, #15
 80082aa:	18fb      	adds	r3, r7, r3
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	b25b      	sxtb	r3, r3
}
 80082b0:	0018      	movs	r0, r3
 80082b2:	46bd      	mov	sp, r7
 80082b4:	b004      	add	sp, #16
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80082b8:	b5b0      	push	{r4, r5, r7, lr}
 80082ba:	b092      	sub	sp, #72	@ 0x48
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	607a      	str	r2, [r7, #4]
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	240b      	movs	r4, #11
 80082c6:	193b      	adds	r3, r7, r4
 80082c8:	1c0a      	adds	r2, r1, #0
 80082ca:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 80082cc:	2347      	movs	r3, #71	@ 0x47
 80082ce:	18fb      	adds	r3, r7, r3
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80082d4:	2345      	movs	r3, #69	@ 0x45
 80082d6:	18fb      	adds	r3, r7, r3
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80082dc:	2343      	movs	r3, #67	@ 0x43
 80082de:	18fb      	adds	r3, r7, r3
 80082e0:	226e      	movs	r2, #110	@ 0x6e
 80082e2:	701a      	strb	r2, [r3, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80082e4:	2338      	movs	r3, #56	@ 0x38
 80082e6:	18fb      	adds	r3, r7, r3
 80082e8:	0018      	movs	r0, r3
 80082ea:	230a      	movs	r3, #10
 80082ec:	001a      	movs	r2, r3
 80082ee:	2100      	movs	r1, #0
 80082f0:	f009 fc12 	bl	8011b18 <memset>
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80082f4:	232c      	movs	r3, #44	@ 0x2c
 80082f6:	18fb      	adds	r3, r7, r3
 80082f8:	0018      	movs	r0, r3
 80082fa:	230a      	movs	r3, #10
 80082fc:	001a      	movs	r2, r3
 80082fe:	2100      	movs	r1, #0
 8008300:	f009 fc0a 	bl	8011b18 <memset>
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8008304:	2320      	movs	r3, #32
 8008306:	18fb      	adds	r3, r7, r3
 8008308:	0018      	movs	r0, r3
 800830a:	230a      	movs	r3, #10
 800830c:	001a      	movs	r2, r3
 800830e:	2100      	movs	r1, #0
 8008310:	f009 fc02 	bl	8011b18 <memset>
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8008314:	2314      	movs	r3, #20
 8008316:	18fb      	adds	r3, r7, r3
 8008318:	0018      	movs	r0, r3
 800831a:	230a      	movs	r3, #10
 800831c:	001a      	movs	r2, r3
 800831e:	2100      	movs	r1, #0
 8008320:	f009 fbfa 	bl	8011b18 <memset>

    switch (op_mode)
 8008324:	193b      	adds	r3, r7, r4
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b03      	cmp	r3, #3
 800832a:	d02d      	beq.n	8008388 <set_conf+0xd0>
 800832c:	dd00      	ble.n	8008330 <set_conf+0x78>
 800832e:	e10c      	b.n	800854a <set_conf+0x292>
 8008330:	2b01      	cmp	r3, #1
 8008332:	d003      	beq.n	800833c <set_conf+0x84>
 8008334:	2b02      	cmp	r3, #2
 8008336:	d100      	bne.n	800833a <set_conf+0x82>
 8008338:	e088      	b.n	800844c <set_conf+0x194>
 800833a:	e106      	b.n	800854a <set_conf+0x292>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 800833c:	2338      	movs	r3, #56	@ 0x38
 800833e:	18fb      	adds	r3, r7, r3
 8008340:	225a      	movs	r2, #90	@ 0x5a
 8008342:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	885b      	ldrh	r3, [r3, #2]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	0011      	movs	r1, r2
 800834c:	0018      	movs	r0, r3
 800834e:	f7ff fa0b 	bl	8007768 <calc_res_heat>
 8008352:	0003      	movs	r3, r0
 8008354:	001a      	movs	r2, r3
 8008356:	232c      	movs	r3, #44	@ 0x2c
 8008358:	18fb      	adds	r3, r7, r3
 800835a:	701a      	strb	r2, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 800835c:	2320      	movs	r3, #32
 800835e:	18fb      	adds	r3, r7, r3
 8008360:	2264      	movs	r2, #100	@ 0x64
 8008362:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	889b      	ldrh	r3, [r3, #4]
 8008368:	0018      	movs	r0, r3
 800836a:	f7ff fac9 	bl	8007900 <calc_gas_wait>
 800836e:	0003      	movs	r3, r0
 8008370:	001a      	movs	r2, r3
 8008372:	2314      	movs	r3, #20
 8008374:	18fb      	adds	r3, r7, r3
 8008376:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 800837e:	2345      	movs	r3, #69	@ 0x45
 8008380:	18fb      	adds	r3, r7, r3
 8008382:	2201      	movs	r2, #1
 8008384:	701a      	strb	r2, [r3, #0]
            break;
 8008386:	e0e6      	b.n	8008556 <set_conf+0x29e>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <set_conf+0xe0>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <set_conf+0xea>
            {
                rslt = BME68X_E_NULL_PTR;
 8008398:	2347      	movs	r3, #71	@ 0x47
 800839a:	18fb      	adds	r3, r7, r3
 800839c:	22ff      	movs	r2, #255	@ 0xff
 800839e:	701a      	strb	r2, [r3, #0]
                break;
 80083a0:	e0d9      	b.n	8008556 <set_conf+0x29e>
            }

            for (i = 0; i < conf->profile_len; i++)
 80083a2:	2346      	movs	r3, #70	@ 0x46
 80083a4:	18fb      	adds	r3, r7, r3
 80083a6:	2200      	movs	r2, #0
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e03e      	b.n	800842a <set_conf+0x172>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80083ac:	2046      	movs	r0, #70	@ 0x46
 80083ae:	183b      	adds	r3, r7, r0
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	183a      	adds	r2, r7, r0
 80083b4:	7812      	ldrb	r2, [r2, #0]
 80083b6:	325a      	adds	r2, #90	@ 0x5a
 80083b8:	b2d1      	uxtb	r1, r2
 80083ba:	2238      	movs	r2, #56	@ 0x38
 80083bc:	18ba      	adds	r2, r7, r2
 80083be:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	183b      	adds	r3, r7, r0
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	18d3      	adds	r3, r2, r3
 80083cc:	881a      	ldrh	r2, [r3, #0]
 80083ce:	0005      	movs	r5, r0
 80083d0:	183b      	adds	r3, r7, r0
 80083d2:	781c      	ldrb	r4, [r3, #0]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	0019      	movs	r1, r3
 80083d8:	0010      	movs	r0, r2
 80083da:	f7ff f9c5 	bl	8007768 <calc_res_heat>
 80083de:	0003      	movs	r3, r0
 80083e0:	001a      	movs	r2, r3
 80083e2:	232c      	movs	r3, #44	@ 0x2c
 80083e4:	18fb      	adds	r3, r7, r3
 80083e6:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80083e8:	0028      	movs	r0, r5
 80083ea:	183b      	adds	r3, r7, r0
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	183a      	adds	r2, r7, r0
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	3264      	adds	r2, #100	@ 0x64
 80083f4:	b2d1      	uxtb	r1, r2
 80083f6:	2220      	movs	r2, #32
 80083f8:	18ba      	adds	r2, r7, r2
 80083fa:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	183b      	adds	r3, r7, r0
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	18d3      	adds	r3, r2, r3
 8008408:	881a      	ldrh	r2, [r3, #0]
 800840a:	0005      	movs	r5, r0
 800840c:	183b      	adds	r3, r7, r0
 800840e:	781c      	ldrb	r4, [r3, #0]
 8008410:	0010      	movs	r0, r2
 8008412:	f7ff fa75 	bl	8007900 <calc_gas_wait>
 8008416:	0003      	movs	r3, r0
 8008418:	001a      	movs	r2, r3
 800841a:	2314      	movs	r3, #20
 800841c:	18fb      	adds	r3, r7, r3
 800841e:	551a      	strb	r2, [r3, r4]
            for (i = 0; i < conf->profile_len; i++)
 8008420:	197b      	adds	r3, r7, r5
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	197b      	adds	r3, r7, r5
 8008426:	3201      	adds	r2, #1
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	7c1b      	ldrb	r3, [r3, #16]
 800842e:	2246      	movs	r2, #70	@ 0x46
 8008430:	18ba      	adds	r2, r7, r2
 8008432:	7812      	ldrb	r2, [r2, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d3b9      	bcc.n	80083ac <set_conf+0xf4>
            }

            (*nb_conv) = conf->profile_len;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	7c1a      	ldrb	r2, [r3, #16]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8008440:	2345      	movs	r3, #69	@ 0x45
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	7c12      	ldrb	r2, [r2, #16]
 8008448:	701a      	strb	r2, [r3, #0]
            break;
 800844a:	e084      	b.n	8008556 <set_conf+0x29e>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <set_conf+0x1a4>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d104      	bne.n	8008466 <set_conf+0x1ae>
            {
                rslt = BME68X_E_NULL_PTR;
 800845c:	2347      	movs	r3, #71	@ 0x47
 800845e:	18fb      	adds	r3, r7, r3
 8008460:	22ff      	movs	r2, #255	@ 0xff
 8008462:	701a      	strb	r2, [r3, #0]
                break;
 8008464:	e077      	b.n	8008556 <set_conf+0x29e>
            }

            if (conf->shared_heatr_dur == 0)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8a5b      	ldrh	r3, [r3, #18]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <set_conf+0x1be>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 800846e:	2347      	movs	r3, #71	@ 0x47
 8008470:	18fb      	adds	r3, r7, r3
 8008472:	2203      	movs	r2, #3
 8008474:	701a      	strb	r2, [r3, #0]
            }

            for (i = 0; i < conf->profile_len; i++)
 8008476:	2346      	movs	r3, #70	@ 0x46
 8008478:	18fb      	adds	r3, r7, r3
 800847a:	2200      	movs	r2, #0
 800847c:	701a      	strb	r2, [r3, #0]
 800847e:	e039      	b.n	80084f4 <set_conf+0x23c>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8008480:	2046      	movs	r0, #70	@ 0x46
 8008482:	183b      	adds	r3, r7, r0
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	183a      	adds	r2, r7, r0
 8008488:	7812      	ldrb	r2, [r2, #0]
 800848a:	325a      	adds	r2, #90	@ 0x5a
 800848c:	b2d1      	uxtb	r1, r2
 800848e:	2238      	movs	r2, #56	@ 0x38
 8008490:	18ba      	adds	r2, r7, r2
 8008492:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	183b      	adds	r3, r7, r0
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	18d3      	adds	r3, r2, r3
 80084a0:	881a      	ldrh	r2, [r3, #0]
 80084a2:	0005      	movs	r5, r0
 80084a4:	183b      	adds	r3, r7, r0
 80084a6:	781c      	ldrb	r4, [r3, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	0019      	movs	r1, r3
 80084ac:	0010      	movs	r0, r2
 80084ae:	f7ff f95b 	bl	8007768 <calc_res_heat>
 80084b2:	0003      	movs	r3, r0
 80084b4:	001a      	movs	r2, r3
 80084b6:	232c      	movs	r3, #44	@ 0x2c
 80084b8:	18fb      	adds	r3, r7, r3
 80084ba:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80084bc:	0028      	movs	r0, r5
 80084be:	183b      	adds	r3, r7, r0
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	183a      	adds	r2, r7, r0
 80084c4:	7812      	ldrb	r2, [r2, #0]
 80084c6:	3264      	adds	r2, #100	@ 0x64
 80084c8:	b2d1      	uxtb	r1, r2
 80084ca:	2220      	movs	r2, #32
 80084cc:	18ba      	adds	r2, r7, r2
 80084ce:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	183b      	adds	r3, r7, r0
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	18d3      	adds	r3, r2, r3
 80084dc:	881a      	ldrh	r2, [r3, #0]
 80084de:	183b      	adds	r3, r7, r0
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b2d1      	uxtb	r1, r2
 80084e4:	2214      	movs	r2, #20
 80084e6:	18ba      	adds	r2, r7, r2
 80084e8:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < conf->profile_len; i++)
 80084ea:	183b      	adds	r3, r7, r0
 80084ec:	781a      	ldrb	r2, [r3, #0]
 80084ee:	183b      	adds	r3, r7, r0
 80084f0:	3201      	adds	r2, #1
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	7c1b      	ldrb	r3, [r3, #16]
 80084f8:	2246      	movs	r2, #70	@ 0x46
 80084fa:	18ba      	adds	r2, r7, r2
 80084fc:	7812      	ldrb	r2, [r2, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d3be      	bcc.n	8008480 <set_conf+0x1c8>
            }

            (*nb_conv) = conf->profile_len;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	7c1a      	ldrb	r2, [r3, #16]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 800850a:	2345      	movs	r3, #69	@ 0x45
 800850c:	18fb      	adds	r3, r7, r3
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	7c12      	ldrb	r2, [r2, #16]
 8008512:	701a      	strb	r2, [r3, #0]
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8a5b      	ldrh	r3, [r3, #18]
 8008518:	0018      	movs	r0, r3
 800851a:	f000 f84b 	bl	80085b4 <calc_heatr_dur_shared>
 800851e:	0003      	movs	r3, r0
 8008520:	001a      	movs	r2, r3
 8008522:	2144      	movs	r1, #68	@ 0x44
 8008524:	187b      	adds	r3, r7, r1
 8008526:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8008528:	2247      	movs	r2, #71	@ 0x47
 800852a:	18bb      	adds	r3, r7, r2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	b25b      	sxtb	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10f      	bne.n	8008554 <set_conf+0x29c>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8008534:	18bc      	adds	r4, r7, r2
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	1879      	adds	r1, r7, r1
 800853a:	2243      	movs	r2, #67	@ 0x43
 800853c:	18b8      	adds	r0, r7, r2
 800853e:	2201      	movs	r2, #1
 8008540:	f7fd ff83 	bl	800644a <bme68x_set_regs>
 8008544:	0003      	movs	r3, r0
 8008546:	7023      	strb	r3, [r4, #0]
            }

            break;
 8008548:	e004      	b.n	8008554 <set_conf+0x29c>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 800854a:	2347      	movs	r3, #71	@ 0x47
 800854c:	18fb      	adds	r3, r7, r3
 800854e:	2201      	movs	r2, #1
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	e000      	b.n	8008556 <set_conf+0x29e>
            break;
 8008554:	46c0      	nop			@ (mov r8, r8)
    }

    if (rslt == BME68X_OK)
 8008556:	2147      	movs	r1, #71	@ 0x47
 8008558:	187b      	adds	r3, r7, r1
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	b25b      	sxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10c      	bne.n	800857c <set_conf+0x2c4>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8008562:	2345      	movs	r3, #69	@ 0x45
 8008564:	18fb      	adds	r3, r7, r3
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	187c      	adds	r4, r7, r1
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	212c      	movs	r1, #44	@ 0x2c
 800856e:	1879      	adds	r1, r7, r1
 8008570:	2038      	movs	r0, #56	@ 0x38
 8008572:	1838      	adds	r0, r7, r0
 8008574:	f7fd ff69 	bl	800644a <bme68x_set_regs>
 8008578:	0003      	movs	r3, r0
 800857a:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 800857c:	2147      	movs	r1, #71	@ 0x47
 800857e:	187b      	adds	r3, r7, r1
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b25b      	sxtb	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10c      	bne.n	80085a2 <set_conf+0x2ea>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8008588:	2345      	movs	r3, #69	@ 0x45
 800858a:	18fb      	adds	r3, r7, r3
 800858c:	781a      	ldrb	r2, [r3, #0]
 800858e:	187c      	adds	r4, r7, r1
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2114      	movs	r1, #20
 8008594:	1879      	adds	r1, r7, r1
 8008596:	2020      	movs	r0, #32
 8008598:	1838      	adds	r0, r7, r0
 800859a:	f7fd ff56 	bl	800644a <bme68x_set_regs>
 800859e:	0003      	movs	r3, r0
 80085a0:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80085a2:	2347      	movs	r3, #71	@ 0x47
 80085a4:	18fb      	adds	r3, r7, r3
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	b25b      	sxtb	r3, r3
}
 80085aa:	0018      	movs	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	b012      	add	sp, #72	@ 0x48
 80085b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080085b4 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	0002      	movs	r2, r0
 80085bc:	1dbb      	adds	r3, r7, #6
 80085be:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 80085c0:	230f      	movs	r3, #15
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	2200      	movs	r2, #0
 80085c6:	701a      	strb	r2, [r3, #0]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80085c8:	1dbb      	adds	r3, r7, #6
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008648 <calc_heatr_dur_shared+0x94>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d904      	bls.n	80085dc <calc_heatr_dur_shared+0x28>
    {
        heatdurval = 0xff; /* Max duration */
 80085d2:	230e      	movs	r3, #14
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	22ff      	movs	r2, #255	@ 0xff
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	e02e      	b.n	800863a <calc_heatr_dur_shared+0x86>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 80085dc:	1dbb      	adds	r3, r7, #6
 80085de:	881a      	ldrh	r2, [r3, #0]
 80085e0:	0013      	movs	r3, r2
 80085e2:	015b      	lsls	r3, r3, #5
 80085e4:	1a9b      	subs	r3, r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	189b      	adds	r3, r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	001a      	movs	r2, r3
 80085ee:	23de      	movs	r3, #222	@ 0xde
 80085f0:	33ff      	adds	r3, #255	@ 0xff
 80085f2:	0019      	movs	r1, r3
 80085f4:	0010      	movs	r0, r2
 80085f6:	f7f7 fdab 	bl	8000150 <__udivsi3>
 80085fa:	0003      	movs	r3, r0
 80085fc:	001a      	movs	r2, r3
 80085fe:	1dbb      	adds	r3, r7, #6
 8008600:	801a      	strh	r2, [r3, #0]
        while (dur > 0x3F)
 8008602:	e00a      	b.n	800861a <calc_heatr_dur_shared+0x66>
        {
            dur = dur >> 2;
 8008604:	1dbb      	adds	r3, r7, #6
 8008606:	1dba      	adds	r2, r7, #6
 8008608:	8812      	ldrh	r2, [r2, #0]
 800860a:	0892      	lsrs	r2, r2, #2
 800860c:	801a      	strh	r2, [r3, #0]
            factor += 1;
 800860e:	220f      	movs	r2, #15
 8008610:	18bb      	adds	r3, r7, r2
 8008612:	18ba      	adds	r2, r7, r2
 8008614:	7812      	ldrb	r2, [r2, #0]
 8008616:	3201      	adds	r2, #1
 8008618:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 800861a:	1dbb      	adds	r3, r7, #6
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008620:	d8f0      	bhi.n	8008604 <calc_heatr_dur_shared+0x50>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8008622:	1dbb      	adds	r3, r7, #6
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b2d9      	uxtb	r1, r3
 8008628:	230f      	movs	r3, #15
 800862a:	18fb      	adds	r3, r7, r3
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	019b      	lsls	r3, r3, #6
 8008630:	b2da      	uxtb	r2, r3
 8008632:	230e      	movs	r3, #14
 8008634:	18fb      	adds	r3, r7, r3
 8008636:	188a      	adds	r2, r1, r2
 8008638:	701a      	strb	r2, [r3, #0]
    }

    return heatdurval;
 800863a:	230e      	movs	r3, #14
 800863c:	18fb      	adds	r3, r7, r3
 800863e:	781b      	ldrb	r3, [r3, #0]
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	b004      	add	sp, #16
 8008646:	bd80      	pop	{r7, pc}
 8008648:	00000782 	.word	0x00000782

0800864c <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	603a      	str	r2, [r7, #0]
 8008654:	1dfb      	adds	r3, r7, #7
 8008656:	1c02      	adds	r2, r0, #0
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	1dbb      	adds	r3, r7, #6
 800865c:	1c0a      	adds	r2, r1, #0
 800865e:	701a      	strb	r2, [r3, #0]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8008660:	1dfb      	adds	r3, r7, #7
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	18d3      	adds	r3, r2, r3
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	789a      	ldrb	r2, [r3, #2]
 800866e:	210e      	movs	r1, #14
 8008670:	187b      	adds	r3, r7, r1
 8008672:	801a      	strh	r2, [r3, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8008674:	1dbb      	adds	r3, r7, #6
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	18d3      	adds	r3, r2, r3
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	789a      	ldrb	r2, [r3, #2]
 8008682:	200c      	movs	r0, #12
 8008684:	183b      	adds	r3, r7, r0
 8008686:	801a      	strh	r2, [r3, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8008688:	1dfb      	adds	r3, r7, #7
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	18d3      	adds	r3, r2, r3
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	b25b      	sxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	da2c      	bge.n	80086f6 <sort_sensor_data+0xaa>
 800869c:	1dbb      	adds	r3, r7, #6
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	18d3      	adds	r3, r2, r3
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da22      	bge.n	80086f6 <sort_sensor_data+0xaa>
    {
        int16_t diff = meas_index2 - meas_index1;
 80086b0:	183b      	adds	r3, r7, r0
 80086b2:	881a      	ldrh	r2, [r3, #0]
 80086b4:	187b      	adds	r3, r7, r1
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	210a      	movs	r1, #10
 80086be:	187b      	adds	r3, r7, r1
 80086c0:	801a      	strh	r2, [r3, #0]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 80086c2:	000a      	movs	r2, r1
 80086c4:	18bb      	adds	r3, r7, r2
 80086c6:	2100      	movs	r1, #0
 80086c8:	5e5b      	ldrsh	r3, [r3, r1]
 80086ca:	3302      	adds	r3, #2
 80086cc:	db04      	blt.n	80086d8 <sort_sensor_data+0x8c>
 80086ce:	18bb      	adds	r3, r7, r2
 80086d0:	2200      	movs	r2, #0
 80086d2:	5e9b      	ldrsh	r3, [r3, r2]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	db05      	blt.n	80086e4 <sort_sensor_data+0x98>
 80086d8:	230a      	movs	r3, #10
 80086da:	18fb      	adds	r3, r7, r3
 80086dc:	2200      	movs	r2, #0
 80086de:	5e9b      	ldrsh	r3, [r3, r2]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	dd1b      	ble.n	800871c <sort_sensor_data+0xd0>
        {
            swap_fields(low_index, high_index, field);
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	1dbb      	adds	r3, r7, #6
 80086e8:	7819      	ldrb	r1, [r3, #0]
 80086ea:	1dfb      	adds	r3, r7, #7
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	0018      	movs	r0, r3
 80086f0:	f000 f819 	bl	8008726 <swap_fields>
    {
 80086f4:	e012      	b.n	800871c <sort_sensor_data+0xd0>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 80086f6:	1dbb      	adds	r3, r7, #6
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	18d3      	adds	r3, r2, r3
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	b25b      	sxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	da09      	bge.n	800871e <sort_sensor_data+0xd2>
    {
        swap_fields(low_index, high_index, field);
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	1dbb      	adds	r3, r7, #6
 800870e:	7819      	ldrb	r1, [r3, #0]
 8008710:	1dfb      	adds	r3, r7, #7
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	0018      	movs	r0, r3
 8008716:	f000 f806 	bl	8008726 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 800871a:	e000      	b.n	800871e <sort_sensor_data+0xd2>
    {
 800871c:	46c0      	nop			@ (mov r8, r8)
}
 800871e:	46c0      	nop			@ (mov r8, r8)
 8008720:	46bd      	mov	sp, r7
 8008722:	b004      	add	sp, #16
 8008724:	bd80      	pop	{r7, pc}

08008726 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	603a      	str	r2, [r7, #0]
 800872e:	1dfb      	adds	r3, r7, #7
 8008730:	1c02      	adds	r2, r0, #0
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	1dbb      	adds	r3, r7, #6
 8008736:	1c0a      	adds	r2, r1, #0
 8008738:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *temp;

    temp = field[index1];
 800873a:	1dfb      	adds	r3, r7, #7
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	18d3      	adds	r3, r2, r3
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8008748:	1dbb      	adds	r3, r7, #6
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	18d2      	adds	r2, r2, r3
 8008752:	1dfb      	adds	r3, r7, #7
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	18cb      	adds	r3, r1, r3
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8008760:	1dbb      	adds	r3, r7, #6
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	18d3      	adds	r3, r2, r3
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	601a      	str	r2, [r3, #0]
}
 800876e:	46c0      	nop			@ (mov r8, r8)
 8008770:	46bd      	mov	sp, r7
 8008772:	b004      	add	sp, #16
 8008774:	bd80      	pop	{r7, pc}

08008776 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8008776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008778:	b08f      	sub	sp, #60	@ 0x3c
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 800877e:	2537      	movs	r5, #55	@ 0x37
 8008780:	197c      	adds	r4, r7, r5
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	260c      	movs	r6, #12
 8008786:	19b9      	adds	r1, r7, r6
 8008788:	2217      	movs	r2, #23
 800878a:	208a      	movs	r0, #138	@ 0x8a
 800878c:	f7fd ff0a 	bl	80065a4 <bme68x_get_regs>
 8008790:	0003      	movs	r3, r0
 8008792:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8008794:	197b      	adds	r3, r7, r5
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	b25b      	sxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <get_calib_data+0x40>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 800879e:	197c      	adds	r4, r7, r5
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	19bb      	adds	r3, r7, r6
 80087a4:	3317      	adds	r3, #23
 80087a6:	0019      	movs	r1, r3
 80087a8:	0013      	movs	r3, r2
 80087aa:	220e      	movs	r2, #14
 80087ac:	20e1      	movs	r0, #225	@ 0xe1
 80087ae:	f7fd fef9 	bl	80065a4 <bme68x_get_regs>
 80087b2:	0003      	movs	r3, r0
 80087b4:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 80087b6:	2237      	movs	r2, #55	@ 0x37
 80087b8:	18bb      	adds	r3, r7, r2
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	b25b      	sxtb	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10c      	bne.n	80087dc <get_calib_data+0x66>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 80087c2:	18bc      	adds	r4, r7, r2
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	230c      	movs	r3, #12
 80087c8:	18fb      	adds	r3, r7, r3
 80087ca:	3325      	adds	r3, #37	@ 0x25
 80087cc:	0019      	movs	r1, r3
 80087ce:	0013      	movs	r3, r2
 80087d0:	2205      	movs	r2, #5
 80087d2:	2000      	movs	r0, #0
 80087d4:	f7fd fee6 	bl	80065a4 <bme68x_get_regs>
 80087d8:	0003      	movs	r3, r0
 80087da:	7023      	strb	r3, [r4, #0]
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 80087dc:	2337      	movs	r3, #55	@ 0x37
 80087de:	18fb      	adds	r3, r7, r3
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	b25b      	sxtb	r3, r3
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d000      	beq.n	80087ea <get_calib_data+0x74>
 80087e8:	e0f4      	b.n	80089d4 <get_calib_data+0x25e>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 80087ea:	210c      	movs	r1, #12
 80087ec:	187b      	adds	r3, r7, r1
 80087ee:	2220      	movs	r2, #32
 80087f0:	5c9b      	ldrb	r3, [r3, r2]
 80087f2:	b21b      	sxth	r3, r3
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	b21a      	sxth	r2, r3
 80087f8:	187b      	adds	r3, r7, r1
 80087fa:	7fdb      	ldrb	r3, [r3, #31]
 80087fc:	b21b      	sxth	r3, r3
 80087fe:	4313      	orrs	r3, r2
 8008800:	b21b      	sxth	r3, r3
 8008802:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8008808:	187b      	adds	r3, r7, r1
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	b21b      	sxth	r3, r3
 800880e:	021b      	lsls	r3, r3, #8
 8008810:	b21a      	sxth	r2, r3
 8008812:	187b      	adds	r3, r7, r1
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	b21b      	sxth	r3, r3
 8008818:	4313      	orrs	r3, r2
 800881a:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8008820:	0008      	movs	r0, r1
 8008822:	187b      	adds	r3, r7, r1
 8008824:	789b      	ldrb	r3, [r3, #2]
 8008826:	b259      	sxtb	r1, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2222      	movs	r2, #34	@ 0x22
 800882c:	5499      	strb	r1, [r3, r2]

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 800882e:	0001      	movs	r1, r0
 8008830:	187b      	adds	r3, r7, r1
 8008832:	795b      	ldrb	r3, [r3, #5]
 8008834:	b21b      	sxth	r3, r3
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	b21a      	sxth	r2, r3
 800883a:	187b      	adds	r3, r7, r1
 800883c:	791b      	ldrb	r3, [r3, #4]
 800883e:	b21b      	sxth	r3, r3
 8008840:	4313      	orrs	r3, r2
 8008842:	b21b      	sxth	r3, r3
 8008844:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 800884a:	187b      	adds	r3, r7, r1
 800884c:	79db      	ldrb	r3, [r3, #7]
 800884e:	b21b      	sxth	r3, r3
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	b21a      	sxth	r2, r3
 8008854:	187b      	adds	r3, r7, r1
 8008856:	799b      	ldrb	r3, [r3, #6]
 8008858:	b21b      	sxth	r3, r3
 800885a:	4313      	orrs	r3, r2
 800885c:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8008862:	0008      	movs	r0, r1
 8008864:	187b      	adds	r3, r7, r1
 8008866:	7a1b      	ldrb	r3, [r3, #8]
 8008868:	b259      	sxtb	r1, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2228      	movs	r2, #40	@ 0x28
 800886e:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8008870:	0001      	movs	r1, r0
 8008872:	187b      	adds	r3, r7, r1
 8008874:	7adb      	ldrb	r3, [r3, #11]
 8008876:	b21b      	sxth	r3, r3
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	b21a      	sxth	r2, r3
 800887c:	187b      	adds	r3, r7, r1
 800887e:	7a9b      	ldrb	r3, [r3, #10]
 8008880:	b21b      	sxth	r3, r3
 8008882:	4313      	orrs	r3, r2
 8008884:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 800888a:	187b      	adds	r3, r7, r1
 800888c:	7b5b      	ldrb	r3, [r3, #13]
 800888e:	b21b      	sxth	r3, r3
 8008890:	021b      	lsls	r3, r3, #8
 8008892:	b21a      	sxth	r2, r3
 8008894:	187b      	adds	r3, r7, r1
 8008896:	7b1b      	ldrb	r3, [r3, #12]
 8008898:	b21b      	sxth	r3, r3
 800889a:	4313      	orrs	r3, r2
 800889c:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 80088a2:	0008      	movs	r0, r1
 80088a4:	183b      	adds	r3, r7, r0
 80088a6:	7bdb      	ldrb	r3, [r3, #15]
 80088a8:	b259      	sxtb	r1, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	222e      	movs	r2, #46	@ 0x2e
 80088ae:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 80088b0:	183b      	adds	r3, r7, r0
 80088b2:	7b9b      	ldrb	r3, [r3, #14]
 80088b4:	b259      	sxtb	r1, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	222f      	movs	r2, #47	@ 0x2f
 80088ba:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 80088bc:	183b      	adds	r3, r7, r0
 80088be:	7cdb      	ldrb	r3, [r3, #19]
 80088c0:	b21b      	sxth	r3, r3
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	b21a      	sxth	r2, r3
 80088c6:	183b      	adds	r3, r7, r0
 80088c8:	7c9b      	ldrb	r3, [r3, #18]
 80088ca:	b21b      	sxth	r3, r3
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 80088d4:	183b      	adds	r3, r7, r0
 80088d6:	7d5b      	ldrb	r3, [r3, #21]
 80088d8:	b21b      	sxth	r3, r3
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	b21a      	sxth	r2, r3
 80088de:	183b      	adds	r3, r7, r0
 80088e0:	7d1b      	ldrb	r3, [r3, #20]
 80088e2:	b21b      	sxth	r3, r3
 80088e4:	4313      	orrs	r3, r2
 80088e6:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 80088ec:	183b      	adds	r3, r7, r0
 80088ee:	7d99      	ldrb	r1, [r3, #22]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2234      	movs	r2, #52	@ 0x34
 80088f4:	5499      	strb	r1, [r3, r2]

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80088f6:	183b      	adds	r3, r7, r0
 80088f8:	7e5b      	ldrb	r3, [r3, #25]
 80088fa:	b21b      	sxth	r3, r3
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8008900:	183b      	adds	r3, r7, r0
 8008902:	7e1b      	ldrb	r3, [r3, #24]
 8008904:	b21b      	sxth	r3, r3
 8008906:	210f      	movs	r1, #15
 8008908:	400b      	ands	r3, r1
 800890a:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 800890c:	4313      	orrs	r3, r2
 800890e:	b21b      	sxth	r3, r3
 8008910:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8008916:	183b      	adds	r3, r7, r0
 8008918:	7ddb      	ldrb	r3, [r3, #23]
 800891a:	b21b      	sxth	r3, r3
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	b21a      	sxth	r2, r3
 8008920:	183b      	adds	r3, r7, r0
 8008922:	7e1b      	ldrb	r3, [r3, #24]
 8008924:	091b      	lsrs	r3, r3, #4
 8008926:	b2db      	uxtb	r3, r3
 8008928:	b21b      	sxth	r3, r3
 800892a:	4313      	orrs	r3, r2
 800892c:	b21b      	sxth	r3, r3
 800892e:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8008934:	183b      	adds	r3, r7, r0
 8008936:	7e9b      	ldrb	r3, [r3, #26]
 8008938:	b25a      	sxtb	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 800893e:	183b      	adds	r3, r7, r0
 8008940:	7edb      	ldrb	r3, [r3, #27]
 8008942:	b25a      	sxtb	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8008948:	183b      	adds	r3, r7, r0
 800894a:	7f1b      	ldrb	r3, [r3, #28]
 800894c:	b25a      	sxtb	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8008952:	183b      	adds	r3, r7, r0
 8008954:	7f5a      	ldrb	r2, [r3, #29]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 800895a:	183b      	adds	r3, r7, r0
 800895c:	7f9b      	ldrb	r3, [r3, #30]
 800895e:	b25a      	sxtb	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8008964:	183b      	adds	r3, r7, r0
 8008966:	2223      	movs	r2, #35	@ 0x23
 8008968:	5c9b      	ldrb	r3, [r3, r2]
 800896a:	b25a      	sxtb	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8008970:	183b      	adds	r3, r7, r0
 8008972:	2222      	movs	r2, #34	@ 0x22
 8008974:	5c9b      	ldrb	r3, [r3, r2]
 8008976:	b21b      	sxth	r3, r3
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	b21a      	sxth	r2, r3
 800897c:	183b      	adds	r3, r7, r0
 800897e:	2121      	movs	r1, #33	@ 0x21
 8008980:	5c5b      	ldrb	r3, [r3, r1]
 8008982:	b21b      	sxth	r3, r3
 8008984:	4313      	orrs	r3, r2
 8008986:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 800898c:	183b      	adds	r3, r7, r0
 800898e:	2224      	movs	r2, #36	@ 0x24
 8008990:	5c9b      	ldrb	r3, [r3, r2]
 8008992:	b25a      	sxtb	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8008998:	183b      	adds	r3, r7, r0
 800899a:	2227      	movs	r2, #39	@ 0x27
 800899c:	5c9b      	ldrb	r3, [r3, r2]
 800899e:	001a      	movs	r2, r3
 80089a0:	2330      	movs	r3, #48	@ 0x30
 80089a2:	4013      	ands	r3, r2
 80089a4:	d500      	bpl.n	80089a8 <get_calib_data+0x232>
 80089a6:	330f      	adds	r3, #15
 80089a8:	111b      	asrs	r3, r3, #4
 80089aa:	b2d9      	uxtb	r1, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	223c      	movs	r2, #60	@ 0x3c
 80089b0:	5499      	strb	r1, [r3, r2]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 80089b2:	200c      	movs	r0, #12
 80089b4:	183b      	adds	r3, r7, r0
 80089b6:	2225      	movs	r2, #37	@ 0x25
 80089b8:	5c9b      	ldrb	r3, [r3, r2]
 80089ba:	b259      	sxtb	r1, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	223d      	movs	r2, #61	@ 0x3d
 80089c0:	5499      	strb	r1, [r3, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 80089c2:	183b      	adds	r3, r7, r0
 80089c4:	2229      	movs	r2, #41	@ 0x29
 80089c6:	5c9b      	ldrb	r3, [r3, r2]
 80089c8:	b25b      	sxtb	r3, r3
 80089ca:	111b      	asrs	r3, r3, #4
 80089cc:	b259      	sxtb	r1, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	223e      	movs	r2, #62	@ 0x3e
 80089d2:	5499      	strb	r1, [r3, r2]
    }

    return rslt;
 80089d4:	2337      	movs	r3, #55	@ 0x37
 80089d6:	18fb      	adds	r3, r7, r3
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	b25b      	sxtb	r3, r3
}
 80089dc:	0018      	movs	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	b00f      	add	sp, #60	@ 0x3c
 80089e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089e4 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 80089e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 80089ec:	250e      	movs	r5, #14
 80089ee:	197b      	adds	r3, r7, r5
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 80089f4:	260f      	movs	r6, #15
 80089f6:	19bc      	adds	r4, r7, r6
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	1979      	adds	r1, r7, r5
 80089fc:	2201      	movs	r2, #1
 80089fe:	20f0      	movs	r0, #240	@ 0xf0
 8008a00:	f7fd fdd0 	bl	80065a4 <bme68x_get_regs>
 8008a04:	0003      	movs	r3, r0
 8008a06:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8008a08:	19bb      	adds	r3, r7, r6
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	b25b      	sxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d104      	bne.n	8008a1c <read_variant_id+0x38>
    {
        dev->variant_id = reg_data;
 8008a12:	197b      	adds	r3, r7, r5
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	001a      	movs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8008a1c:	230f      	movs	r3, #15
 8008a1e:	18fb      	adds	r3, r7, r3
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	b25b      	sxtb	r3, r3
}
 8008a24:	0018      	movs	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	b005      	add	sp, #20
 8008a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a2c <command_interface_init>:
static uint8_t system_started = 0;
static uint8_t system_started_usart4 = 0;

// Initialize command interface
void command_interface_init(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
    // Initialize USART2 command interface
    cmd_index = 0;
 8008a30:	4b15      	ldr	r3, [pc, #84]	@ (8008a88 <command_interface_init+0x5c>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	701a      	strb	r2, [r3, #0]
    system_started = 0;
 8008a36:	4b15      	ldr	r3, [pc, #84]	@ (8008a8c <command_interface_init+0x60>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	701a      	strb	r2, [r3, #0]
    memset(cmd_buffer, 0, CMD_BUFFER_SIZE);
 8008a3c:	4b14      	ldr	r3, [pc, #80]	@ (8008a90 <command_interface_init+0x64>)
 8008a3e:	2240      	movs	r2, #64	@ 0x40
 8008a40:	2100      	movs	r1, #0
 8008a42:	0018      	movs	r0, r3
 8008a44:	f009 f868 	bl	8011b18 <memset>
    
    // Initialize USART4 command interface
    cmd_index_usart4 = 0;
 8008a48:	4b12      	ldr	r3, [pc, #72]	@ (8008a94 <command_interface_init+0x68>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
    system_started_usart4 = 0;
 8008a4e:	4b12      	ldr	r3, [pc, #72]	@ (8008a98 <command_interface_init+0x6c>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
    memset(cmd_buffer_usart4, 0, CMD_BUFFER_SIZE);
 8008a54:	4b11      	ldr	r3, [pc, #68]	@ (8008a9c <command_interface_init+0x70>)
 8008a56:	2240      	movs	r2, #64	@ 0x40
 8008a58:	2100      	movs	r1, #0
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f009 f85c 	bl	8011b18 <memset>
    
    // Send welcome message on both UARTs
    command_interface_send_response("IoT Prototype System Ready (USART2)\r\n");
 8008a60:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa0 <command_interface_init+0x74>)
 8008a62:	0018      	movs	r0, r3
 8008a64:	f000 fbee 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("Type 'start' to begin\r\n");
 8008a68:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa4 <command_interface_init+0x78>)
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f000 fbea 	bl	8009244 <command_interface_send_response>
    
    command_interface_send_response_usart4("IoT Prototype System Ready (USART4)\r\n");
 8008a70:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa8 <command_interface_init+0x7c>)
 8008a72:	0018      	movs	r0, r3
 8008a74:	f000 fbfc 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("Type 'start' to begin\r\n");
 8008a78:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa4 <command_interface_init+0x78>)
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f000 fbf8 	bl	8009270 <command_interface_send_response_usart4>
}
 8008a80:	46c0      	nop			@ (mov r8, r8)
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	46c0      	nop			@ (mov r8, r8)
 8008a88:	200002dc 	.word	0x200002dc
 8008a8c:	200002de 	.word	0x200002de
 8008a90:	2000025c 	.word	0x2000025c
 8008a94:	200002dd 	.word	0x200002dd
 8008a98:	200002df 	.word	0x200002df
 8008a9c:	2000029c 	.word	0x2000029c
 8008aa0:	08015c5c 	.word	0x08015c5c
 8008aa4:	08015c84 	.word	0x08015c84
 8008aa8:	08015c9c 	.word	0x08015c9c

08008aac <command_interface_process>:

// Process incoming commands
void command_interface_process(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
    uint8_t rx_byte;
    
    // Check if data is available on USART2
    if (HAL_UART_Receive(&huart2, &rx_byte, 1, 10) == HAL_OK) {
 8008ab2:	1df9      	adds	r1, r7, #7
 8008ab4:	486c      	ldr	r0, [pc, #432]	@ (8008c68 <command_interface_process+0x1bc>)
 8008ab6:	230a      	movs	r3, #10
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f006 fd6b 	bl	800f594 <HAL_UART_Receive>
 8008abe:	1e03      	subs	r3, r0, #0
 8008ac0:	d162      	bne.n	8008b88 <command_interface_process+0xdc>
        // Handle backspace
        if (rx_byte == '\b' || rx_byte == 127) {
 8008ac2:	1dfb      	adds	r3, r7, #7
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d003      	beq.n	8008ad2 <command_interface_process+0x26>
 8008aca:	1dfb      	adds	r3, r7, #7
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ad0:	d114      	bne.n	8008afc <command_interface_process+0x50>
            if (cmd_index > 0) {
 8008ad2:	4b66      	ldr	r3, [pc, #408]	@ (8008c6c <command_interface_process+0x1c0>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d056      	beq.n	8008b88 <command_interface_process+0xdc>
                cmd_index--;
 8008ada:	4b64      	ldr	r3, [pc, #400]	@ (8008c6c <command_interface_process+0x1c0>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	4b62      	ldr	r3, [pc, #392]	@ (8008c6c <command_interface_process+0x1c0>)
 8008ae4:	701a      	strb	r2, [r3, #0]
                cmd_buffer[cmd_index] = '\0';
 8008ae6:	4b61      	ldr	r3, [pc, #388]	@ (8008c6c <command_interface_process+0x1c0>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	001a      	movs	r2, r3
 8008aec:	4b60      	ldr	r3, [pc, #384]	@ (8008c70 <command_interface_process+0x1c4>)
 8008aee:	2100      	movs	r1, #0
 8008af0:	5499      	strb	r1, [r3, r2]
                command_interface_send_response("\b \b"); // Backspace, space, backspace
 8008af2:	4b60      	ldr	r3, [pc, #384]	@ (8008c74 <command_interface_process+0x1c8>)
 8008af4:	0018      	movs	r0, r3
 8008af6:	f000 fba5 	bl	8009244 <command_interface_send_response>
            if (cmd_index > 0) {
 8008afa:	e045      	b.n	8008b88 <command_interface_process+0xdc>
            }
        }
        // Handle enter key
        else if (rx_byte == '\r' || rx_byte == '\n') {
 8008afc:	1dfb      	adds	r3, r7, #7
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b0d      	cmp	r3, #13
 8008b02:	d003      	beq.n	8008b0c <command_interface_process+0x60>
 8008b04:	1dfb      	adds	r3, r7, #7
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b0a      	cmp	r3, #10
 8008b0a:	d11f      	bne.n	8008b4c <command_interface_process+0xa0>
            if (cmd_index > 0) {
 8008b0c:	4b57      	ldr	r3, [pc, #348]	@ (8008c6c <command_interface_process+0x1c0>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d016      	beq.n	8008b42 <command_interface_process+0x96>
                cmd_buffer[cmd_index] = '\0';
 8008b14:	4b55      	ldr	r3, [pc, #340]	@ (8008c6c <command_interface_process+0x1c0>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	001a      	movs	r2, r3
 8008b1a:	4b55      	ldr	r3, [pc, #340]	@ (8008c70 <command_interface_process+0x1c4>)
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	5499      	strb	r1, [r3, r2]
                command_interface_send_response("\r\n");
 8008b20:	4b55      	ldr	r3, [pc, #340]	@ (8008c78 <command_interface_process+0x1cc>)
 8008b22:	0018      	movs	r0, r3
 8008b24:	f000 fb8e 	bl	8009244 <command_interface_send_response>
                
                // Process command
                command_interface_handle_command(cmd_buffer);
 8008b28:	4b51      	ldr	r3, [pc, #324]	@ (8008c70 <command_interface_process+0x1c4>)
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f000 f962 	bl	8008df4 <command_interface_handle_command>
                
                // Reset buffer
                cmd_index = 0;
 8008b30:	4b4e      	ldr	r3, [pc, #312]	@ (8008c6c <command_interface_process+0x1c0>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]
                memset(cmd_buffer, 0, CMD_BUFFER_SIZE);
 8008b36:	4b4e      	ldr	r3, [pc, #312]	@ (8008c70 <command_interface_process+0x1c4>)
 8008b38:	2240      	movs	r2, #64	@ 0x40
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	f008 ffeb 	bl	8011b18 <memset>
            }
            command_interface_send_response("> ");
 8008b42:	4b4e      	ldr	r3, [pc, #312]	@ (8008c7c <command_interface_process+0x1d0>)
 8008b44:	0018      	movs	r0, r3
 8008b46:	f000 fb7d 	bl	8009244 <command_interface_send_response>
 8008b4a:	e01d      	b.n	8008b88 <command_interface_process+0xdc>
        }
        // Handle regular characters
        else if (cmd_index < CMD_BUFFER_SIZE - 1 && rx_byte >= 32 && rx_byte <= 126) {
 8008b4c:	4b47      	ldr	r3, [pc, #284]	@ (8008c6c <command_interface_process+0x1c0>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b52:	d819      	bhi.n	8008b88 <command_interface_process+0xdc>
 8008b54:	1dfb      	adds	r3, r7, #7
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b1f      	cmp	r3, #31
 8008b5a:	d915      	bls.n	8008b88 <command_interface_process+0xdc>
 8008b5c:	1dfb      	adds	r3, r7, #7
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b7e      	cmp	r3, #126	@ 0x7e
 8008b62:	d811      	bhi.n	8008b88 <command_interface_process+0xdc>
            cmd_buffer[cmd_index++] = rx_byte;
 8008b64:	4b41      	ldr	r3, [pc, #260]	@ (8008c6c <command_interface_process+0x1c0>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	1c5a      	adds	r2, r3, #1
 8008b6a:	b2d1      	uxtb	r1, r2
 8008b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c6c <command_interface_process+0x1c0>)
 8008b6e:	7011      	strb	r1, [r2, #0]
 8008b70:	001a      	movs	r2, r3
 8008b72:	1dfb      	adds	r3, r7, #7
 8008b74:	7819      	ldrb	r1, [r3, #0]
 8008b76:	4b3e      	ldr	r3, [pc, #248]	@ (8008c70 <command_interface_process+0x1c4>)
 8008b78:	5499      	strb	r1, [r3, r2]
            // Echo character back
            HAL_UART_Transmit(&huart2, &rx_byte, 1, HAL_MAX_DELAY);
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	425b      	negs	r3, r3
 8008b7e:	1df9      	adds	r1, r7, #7
 8008b80:	4839      	ldr	r0, [pc, #228]	@ (8008c68 <command_interface_process+0x1bc>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	f006 fc62 	bl	800f44c <HAL_UART_Transmit>
        }
    }
    
    // Check if data is available on USART4
    if (HAL_UART_Receive(&huart4, &rx_byte, 1, 10) == HAL_OK) {
 8008b88:	1df9      	adds	r1, r7, #7
 8008b8a:	483d      	ldr	r0, [pc, #244]	@ (8008c80 <command_interface_process+0x1d4>)
 8008b8c:	230a      	movs	r3, #10
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f006 fd00 	bl	800f594 <HAL_UART_Receive>
 8008b94:	1e03      	subs	r3, r0, #0
 8008b96:	d163      	bne.n	8008c60 <command_interface_process+0x1b4>
        // Handle backspace
        if (rx_byte == '\b' || rx_byte == 127) {
 8008b98:	1dfb      	adds	r3, r7, #7
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d003      	beq.n	8008ba8 <command_interface_process+0xfc>
 8008ba0:	1dfb      	adds	r3, r7, #7
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ba6:	d114      	bne.n	8008bd2 <command_interface_process+0x126>
            if (cmd_index_usart4 > 0) {
 8008ba8:	4b36      	ldr	r3, [pc, #216]	@ (8008c84 <command_interface_process+0x1d8>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d057      	beq.n	8008c60 <command_interface_process+0x1b4>
                cmd_index_usart4--;
 8008bb0:	4b34      	ldr	r3, [pc, #208]	@ (8008c84 <command_interface_process+0x1d8>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	4b32      	ldr	r3, [pc, #200]	@ (8008c84 <command_interface_process+0x1d8>)
 8008bba:	701a      	strb	r2, [r3, #0]
                cmd_buffer_usart4[cmd_index_usart4] = '\0';
 8008bbc:	4b31      	ldr	r3, [pc, #196]	@ (8008c84 <command_interface_process+0x1d8>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	001a      	movs	r2, r3
 8008bc2:	4b31      	ldr	r3, [pc, #196]	@ (8008c88 <command_interface_process+0x1dc>)
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	5499      	strb	r1, [r3, r2]
                command_interface_send_response_usart4("\b \b"); // Backspace, space, backspace
 8008bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8008c74 <command_interface_process+0x1c8>)
 8008bca:	0018      	movs	r0, r3
 8008bcc:	f000 fb50 	bl	8009270 <command_interface_send_response_usart4>
            if (cmd_index_usart4 > 0) {
 8008bd0:	e046      	b.n	8008c60 <command_interface_process+0x1b4>
            }
        }
        // Handle enter key
        else if (rx_byte == '\r' || rx_byte == '\n') {
 8008bd2:	1dfb      	adds	r3, r7, #7
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b0d      	cmp	r3, #13
 8008bd8:	d003      	beq.n	8008be2 <command_interface_process+0x136>
 8008bda:	1dfb      	adds	r3, r7, #7
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b0a      	cmp	r3, #10
 8008be0:	d11f      	bne.n	8008c22 <command_interface_process+0x176>
            if (cmd_index_usart4 > 0) {
 8008be2:	4b28      	ldr	r3, [pc, #160]	@ (8008c84 <command_interface_process+0x1d8>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d016      	beq.n	8008c18 <command_interface_process+0x16c>
                cmd_buffer_usart4[cmd_index_usart4] = '\0';
 8008bea:	4b26      	ldr	r3, [pc, #152]	@ (8008c84 <command_interface_process+0x1d8>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	001a      	movs	r2, r3
 8008bf0:	4b25      	ldr	r3, [pc, #148]	@ (8008c88 <command_interface_process+0x1dc>)
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	5499      	strb	r1, [r3, r2]
                command_interface_send_response_usart4("\r\n");
 8008bf6:	4b20      	ldr	r3, [pc, #128]	@ (8008c78 <command_interface_process+0x1cc>)
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	f000 fb39 	bl	8009270 <command_interface_send_response_usart4>
                
                // Process command
                command_interface_handle_command_usart4(cmd_buffer_usart4);
 8008bfe:	4b22      	ldr	r3, [pc, #136]	@ (8008c88 <command_interface_process+0x1dc>)
 8008c00:	0018      	movs	r0, r3
 8008c02:	f001 f8bb 	bl	8009d7c <command_interface_handle_command_usart4>
                
                // Reset buffer
                cmd_index_usart4 = 0;
 8008c06:	4b1f      	ldr	r3, [pc, #124]	@ (8008c84 <command_interface_process+0x1d8>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	701a      	strb	r2, [r3, #0]
                memset(cmd_buffer_usart4, 0, CMD_BUFFER_SIZE);
 8008c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8008c88 <command_interface_process+0x1dc>)
 8008c0e:	2240      	movs	r2, #64	@ 0x40
 8008c10:	2100      	movs	r1, #0
 8008c12:	0018      	movs	r0, r3
 8008c14:	f008 ff80 	bl	8011b18 <memset>
            }
            command_interface_send_response_usart4("> ");
 8008c18:	4b18      	ldr	r3, [pc, #96]	@ (8008c7c <command_interface_process+0x1d0>)
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	f000 fb28 	bl	8009270 <command_interface_send_response_usart4>
 8008c20:	e01e      	b.n	8008c60 <command_interface_process+0x1b4>
        }
        // Handle regular characters
        else if (cmd_index_usart4 < CMD_BUFFER_SIZE - 1 && rx_byte >= 32 && rx_byte <= 126) {
 8008c22:	4b18      	ldr	r3, [pc, #96]	@ (8008c84 <command_interface_process+0x1d8>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c28:	d81a      	bhi.n	8008c60 <command_interface_process+0x1b4>
 8008c2a:	1dfb      	adds	r3, r7, #7
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b1f      	cmp	r3, #31
 8008c30:	d916      	bls.n	8008c60 <command_interface_process+0x1b4>
 8008c32:	1dfb      	adds	r3, r7, #7
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b7e      	cmp	r3, #126	@ 0x7e
 8008c38:	d812      	bhi.n	8008c60 <command_interface_process+0x1b4>
            cmd_buffer_usart4[cmd_index_usart4++] = rx_byte;
 8008c3a:	4b12      	ldr	r3, [pc, #72]	@ (8008c84 <command_interface_process+0x1d8>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	b2d1      	uxtb	r1, r2
 8008c42:	4a10      	ldr	r2, [pc, #64]	@ (8008c84 <command_interface_process+0x1d8>)
 8008c44:	7011      	strb	r1, [r2, #0]
 8008c46:	001a      	movs	r2, r3
 8008c48:	1dfb      	adds	r3, r7, #7
 8008c4a:	7819      	ldrb	r1, [r3, #0]
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c88 <command_interface_process+0x1dc>)
 8008c4e:	5499      	strb	r1, [r3, r2]
            // Echo character back
            HAL_UART_Transmit(&huart4, &rx_byte, 1, HAL_MAX_DELAY);
 8008c50:	2301      	movs	r3, #1
 8008c52:	425b      	negs	r3, r3
 8008c54:	1df9      	adds	r1, r7, #7
 8008c56:	480a      	ldr	r0, [pc, #40]	@ (8008c80 <command_interface_process+0x1d4>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f006 fbf7 	bl	800f44c <HAL_UART_Transmit>
        }
    }
}
 8008c5e:	e7ff      	b.n	8008c60 <command_interface_process+0x1b4>
 8008c60:	46c0      	nop			@ (mov r8, r8)
 8008c62:	46bd      	mov	sp, r7
 8008c64:	b002      	add	sp, #8
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	2000039c 	.word	0x2000039c
 8008c6c:	200002dc 	.word	0x200002dc
 8008c70:	2000025c 	.word	0x2000025c
 8008c74:	08015cc4 	.word	0x08015cc4
 8008c78:	08015cc8 	.word	0x08015cc8
 8008c7c:	08015ccc 	.word	0x08015ccc
 8008c80:	20000430 	.word	0x20000430
 8008c84:	200002dd 	.word	0x200002dd
 8008c88:	2000029c 	.word	0x2000029c

08008c8c <command_interface_show_help>:

// Show help menu
void command_interface_show_help(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
    command_interface_send_response("\r\n=== Available Commands ===\r\n");
 8008c90:	4b3b      	ldr	r3, [pc, #236]	@ (8008d80 <command_interface_show_help+0xf4>)
 8008c92:	0018      	movs	r0, r3
 8008c94:	f000 fad6 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("Sensor Commands:\r\n");
 8008c98:	4b3a      	ldr	r3, [pc, #232]	@ (8008d84 <command_interface_show_help+0xf8>)
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f000 fad2 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  read temperature (rt) - Read temperature from BME680\r\n");
 8008ca0:	4b39      	ldr	r3, [pc, #228]	@ (8008d88 <command_interface_show_help+0xfc>)
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	f000 face 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  read pressure (rp)    - Read pressure from BME680\r\n");
 8008ca8:	4b38      	ldr	r3, [pc, #224]	@ (8008d8c <command_interface_show_help+0x100>)
 8008caa:	0018      	movs	r0, r3
 8008cac:	f000 faca 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  read humidity (rh)    - Read humidity from BME680\r\n");
 8008cb0:	4b37      	ldr	r3, [pc, #220]	@ (8008d90 <command_interface_show_help+0x104>)
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f000 fac6 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  test sensor (ts)      - Test BME680 sensor\r\n");
 8008cb8:	4b36      	ldr	r3, [pc, #216]	@ (8008d94 <command_interface_show_help+0x108>)
 8008cba:	0018      	movs	r0, r3
 8008cbc:	f000 fac2 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  raw registers (rr)    - Read raw BME680 registers\r\n");
 8008cc0:	4b35      	ldr	r3, [pc, #212]	@ (8008d98 <command_interface_show_help+0x10c>)
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	f000 fabe 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  raw adc (ra)          - Read raw BME680 ADC values\r\n");
 8008cc8:	4b34      	ldr	r3, [pc, #208]	@ (8008d9c <command_interface_show_help+0x110>)
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f000 faba 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  calib data (cd)       - Check BME680 calibration data\r\n");
 8008cd0:	4b33      	ldr	r3, [pc, #204]	@ (8008da0 <command_interface_show_help+0x114>)
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	f000 fab6 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  bme diagnostic (bd)   - Run comprehensive BME680 diagnostic\r\n");
 8008cd8:	4b32      	ldr	r3, [pc, #200]	@ (8008da4 <command_interface_show_help+0x118>)
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 fab2 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  scan i2c (si)         - Scan I2C bus for devices\r\n");
 8008ce0:	4b31      	ldr	r3, [pc, #196]	@ (8008da8 <command_interface_show_help+0x11c>)
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	f000 faae 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("\r\nLoRa Commands:\r\n");
 8008ce8:	4b30      	ldr	r3, [pc, #192]	@ (8008dac <command_interface_show_help+0x120>)
 8008cea:	0018      	movs	r0, r3
 8008cec:	f000 faaa 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  lora broadcast (lb)   - Broadcast sensor data via SX1262 LoRa\r\n");
 8008cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8008db0 <command_interface_show_help+0x124>)
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f000 faa6 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  lora config (lc)      - Show SX1262 LoRa configuration\r\n");
 8008cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8008db4 <command_interface_show_help+0x128>)
 8008cfa:	0018      	movs	r0, r3
 8008cfc:	f000 faa2 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  lora test (lt)        - Test SX1262 LoRa transmission\r\n");
 8008d00:	4b2d      	ldr	r3, [pc, #180]	@ (8008db8 <command_interface_show_help+0x12c>)
 8008d02:	0018      	movs	r0, r3
 8008d04:	f000 fa9e 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  lora scan (ls)        - Scan for LoRa signals (5s)\r\n");
 8008d08:	4b2c      	ldr	r3, [pc, #176]	@ (8008dbc <command_interface_show_help+0x130>)
 8008d0a:	0018      	movs	r0, r3
 8008d0c:	f000 fa9a 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  lora monitor (lm)     - Start continuous monitoring\r\n");
 8008d10:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc0 <command_interface_show_help+0x134>)
 8008d12:	0018      	movs	r0, r3
 8008d14:	f000 fa96 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  lora stop (lst)       - Stop LoRa monitoring\r\n");
 8008d18:	4b2a      	ldr	r3, [pc, #168]	@ (8008dc4 <command_interface_show_help+0x138>)
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	f000 fa92 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  lora rssi (lr)        - Get current RSSI\r\n");
 8008d20:	4b29      	ldr	r3, [pc, #164]	@ (8008dc8 <command_interface_show_help+0x13c>)
 8008d22:	0018      	movs	r0, r3
 8008d24:	f000 fa8e 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  test spi (tspi)       - Test SPI communication\r\n");
 8008d28:	4b28      	ldr	r3, [pc, #160]	@ (8008dcc <command_interface_show_help+0x140>)
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f000 fa8a 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  test lora (tl)        - Test LoRa module initialization\r\n");
 8008d30:	4b27      	ldr	r3, [pc, #156]	@ (8008dd0 <command_interface_show_help+0x144>)
 8008d32:	0018      	movs	r0, r3
 8008d34:	f000 fa86 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("\r\nMath Operations:\r\n");
 8008d38:	4b26      	ldr	r3, [pc, #152]	@ (8008dd4 <command_interface_show_help+0x148>)
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	f000 fa82 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  sum <num1> <num2>     - Add two numbers\r\n");
 8008d40:	4b25      	ldr	r3, [pc, #148]	@ (8008dd8 <command_interface_show_help+0x14c>)
 8008d42:	0018      	movs	r0, r3
 8008d44:	f000 fa7e 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  sub <num1> <num2>     - Subtract num2 from num1\r\n");
 8008d48:	4b24      	ldr	r3, [pc, #144]	@ (8008ddc <command_interface_show_help+0x150>)
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f000 fa7a 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  mul <num1> <num2>     - Multiply two numbers\r\n");
 8008d50:	4b23      	ldr	r3, [pc, #140]	@ (8008de0 <command_interface_show_help+0x154>)
 8008d52:	0018      	movs	r0, r3
 8008d54:	f000 fa76 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  div <num1> <num2>     - Divide num1 by num2\r\n");
 8008d58:	4b22      	ldr	r3, [pc, #136]	@ (8008de4 <command_interface_show_help+0x158>)
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f000 fa72 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("\r\nSystem:\r\n");
 8008d60:	4b21      	ldr	r3, [pc, #132]	@ (8008de8 <command_interface_show_help+0x15c>)
 8008d62:	0018      	movs	r0, r3
 8008d64:	f000 fa6e 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  help                  - Show this help menu\r\n");
 8008d68:	4b20      	ldr	r3, [pc, #128]	@ (8008dec <command_interface_show_help+0x160>)
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f000 fa6a 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("========================\r\n");
 8008d70:	4b1f      	ldr	r3, [pc, #124]	@ (8008df0 <command_interface_show_help+0x164>)
 8008d72:	0018      	movs	r0, r3
 8008d74:	f000 fa66 	bl	8009244 <command_interface_send_response>
}
 8008d78:	46c0      	nop			@ (mov r8, r8)
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	46c0      	nop			@ (mov r8, r8)
 8008d80:	08015cd0 	.word	0x08015cd0
 8008d84:	08015cf0 	.word	0x08015cf0
 8008d88:	08015d04 	.word	0x08015d04
 8008d8c:	08015d40 	.word	0x08015d40
 8008d90:	08015d78 	.word	0x08015d78
 8008d94:	08015db0 	.word	0x08015db0
 8008d98:	08015de0 	.word	0x08015de0
 8008d9c:	08015e18 	.word	0x08015e18
 8008da0:	08015e50 	.word	0x08015e50
 8008da4:	08015e8c 	.word	0x08015e8c
 8008da8:	08015ecc 	.word	0x08015ecc
 8008dac:	08015f04 	.word	0x08015f04
 8008db0:	08015f18 	.word	0x08015f18
 8008db4:	08015f5c 	.word	0x08015f5c
 8008db8:	08015f98 	.word	0x08015f98
 8008dbc:	08015fd4 	.word	0x08015fd4
 8008dc0:	0801600c 	.word	0x0801600c
 8008dc4:	08016044 	.word	0x08016044
 8008dc8:	08016078 	.word	0x08016078
 8008dcc:	080160a8 	.word	0x080160a8
 8008dd0:	080160dc 	.word	0x080160dc
 8008dd4:	08016118 	.word	0x08016118
 8008dd8:	08016130 	.word	0x08016130
 8008ddc:	0801615c 	.word	0x0801615c
 8008de0:	08016190 	.word	0x08016190
 8008de4:	080161c4 	.word	0x080161c4
 8008de8:	080161f4 	.word	0x080161f4
 8008dec:	08016200 	.word	0x08016200
 8008df0:	08016230 	.word	0x08016230

08008df4 <command_interface_handle_command>:

// Handle incoming commands
void command_interface_handle_command(char* command)
{
 8008df4:	b590      	push	{r4, r7, lr}
 8008df6:	b0c3      	sub	sp, #268	@ 0x10c
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
    char response[256];
    
    // Check if system is started
    if (!system_started) {
 8008dfc:	4bba      	ldr	r3, [pc, #744]	@ (80090e8 <command_interface_handle_command+0x2f4>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d118      	bne.n	8008e36 <command_interface_handle_command+0x42>
        if (strcmp(command, "start") == 0) {
 8008e04:	4ab9      	ldr	r2, [pc, #740]	@ (80090ec <command_interface_handle_command+0x2f8>)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	0011      	movs	r1, r2
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	f7f7 f97a 	bl	8000104 <strcmp>
 8008e10:	1e03      	subs	r3, r0, #0
 8008e12:	d10b      	bne.n	8008e2c <command_interface_handle_command+0x38>
            system_started = 1;
 8008e14:	4bb4      	ldr	r3, [pc, #720]	@ (80090e8 <command_interface_handle_command+0x2f4>)
 8008e16:	2201      	movs	r2, #1
 8008e18:	701a      	strb	r2, [r3, #0]
            command_interface_send_response("System started! Type 'help' for available commands.\r\n");
 8008e1a:	4bb5      	ldr	r3, [pc, #724]	@ (80090f0 <command_interface_handle_command+0x2fc>)
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	f000 fa11 	bl	8009244 <command_interface_send_response>
            command_interface_send_response("> ");
 8008e22:	4bb4      	ldr	r3, [pc, #720]	@ (80090f4 <command_interface_handle_command+0x300>)
 8008e24:	0018      	movs	r0, r3
 8008e26:	f000 fa0d 	bl	8009244 <command_interface_send_response>
            return;
 8008e2a:	e1fc      	b.n	8009226 <command_interface_handle_command+0x432>
        } else {
            command_interface_send_response("Please type 'start' to begin.\r\n");
 8008e2c:	4bb2      	ldr	r3, [pc, #712]	@ (80090f8 <command_interface_handle_command+0x304>)
 8008e2e:	0018      	movs	r0, r3
 8008e30:	f000 fa08 	bl	8009244 <command_interface_send_response>
            return;
 8008e34:	e1f7      	b.n	8009226 <command_interface_handle_command+0x432>
        }
    }
    
    // Parse commands (full and abbreviated versions)
    if (strcmp(command, "read temperature") == 0 || strcmp(command, "rt") == 0) {
 8008e36:	4ab1      	ldr	r2, [pc, #708]	@ (80090fc <command_interface_handle_command+0x308>)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	0011      	movs	r1, r2
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f7f7 f961 	bl	8000104 <strcmp>
 8008e42:	1e03      	subs	r3, r0, #0
 8008e44:	d007      	beq.n	8008e56 <command_interface_handle_command+0x62>
 8008e46:	4aae      	ldr	r2, [pc, #696]	@ (8009100 <command_interface_handle_command+0x30c>)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	0011      	movs	r1, r2
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f7f7 f959 	bl	8000104 <strcmp>
 8008e52:	1e03      	subs	r3, r0, #0
 8008e54:	d102      	bne.n	8008e5c <command_interface_handle_command+0x68>
        cmd_read_temperature();
 8008e56:	f000 fa21 	bl	800929c <cmd_read_temperature>
 8008e5a:	e1e4      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "read pressure") == 0 || strcmp(command, "rp") == 0) {
 8008e5c:	4aa9      	ldr	r2, [pc, #676]	@ (8009104 <command_interface_handle_command+0x310>)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	0011      	movs	r1, r2
 8008e62:	0018      	movs	r0, r3
 8008e64:	f7f7 f94e 	bl	8000104 <strcmp>
 8008e68:	1e03      	subs	r3, r0, #0
 8008e6a:	d007      	beq.n	8008e7c <command_interface_handle_command+0x88>
 8008e6c:	4aa6      	ldr	r2, [pc, #664]	@ (8009108 <command_interface_handle_command+0x314>)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	0011      	movs	r1, r2
 8008e72:	0018      	movs	r0, r3
 8008e74:	f7f7 f946 	bl	8000104 <strcmp>
 8008e78:	1e03      	subs	r3, r0, #0
 8008e7a:	d102      	bne.n	8008e82 <command_interface_handle_command+0x8e>
        cmd_read_pressure();
 8008e7c:	f000 fb3a 	bl	80094f4 <cmd_read_pressure>
 8008e80:	e1d1      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "read humidity") == 0 || strcmp(command, "rh") == 0) {
 8008e82:	4aa2      	ldr	r2, [pc, #648]	@ (800910c <command_interface_handle_command+0x318>)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	0011      	movs	r1, r2
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7f7 f93b 	bl	8000104 <strcmp>
 8008e8e:	1e03      	subs	r3, r0, #0
 8008e90:	d007      	beq.n	8008ea2 <command_interface_handle_command+0xae>
 8008e92:	4a9f      	ldr	r2, [pc, #636]	@ (8009110 <command_interface_handle_command+0x31c>)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	0011      	movs	r1, r2
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f7f7 f933 	bl	8000104 <strcmp>
 8008e9e:	1e03      	subs	r3, r0, #0
 8008ea0:	d102      	bne.n	8008ea8 <command_interface_handle_command+0xb4>
        cmd_read_humidity();
 8008ea2:	f000 fc11 	bl	80096c8 <cmd_read_humidity>
 8008ea6:	e1be      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "test sensor") == 0 || strcmp(command, "ts") == 0) {
 8008ea8:	4a9a      	ldr	r2, [pc, #616]	@ (8009114 <command_interface_handle_command+0x320>)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	0011      	movs	r1, r2
 8008eae:	0018      	movs	r0, r3
 8008eb0:	f7f7 f928 	bl	8000104 <strcmp>
 8008eb4:	1e03      	subs	r3, r0, #0
 8008eb6:	d007      	beq.n	8008ec8 <command_interface_handle_command+0xd4>
 8008eb8:	4a97      	ldr	r2, [pc, #604]	@ (8009118 <command_interface_handle_command+0x324>)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	0011      	movs	r1, r2
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	f7f7 f920 	bl	8000104 <strcmp>
 8008ec4:	1e03      	subs	r3, r0, #0
 8008ec6:	d102      	bne.n	8008ece <command_interface_handle_command+0xda>
        cmd_test_sensor();
 8008ec8:	f000 fce8 	bl	800989c <cmd_test_sensor>
 8008ecc:	e1ab      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "raw registers") == 0 || strcmp(command, "rr") == 0) {
 8008ece:	4a93      	ldr	r2, [pc, #588]	@ (800911c <command_interface_handle_command+0x328>)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	0011      	movs	r1, r2
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f7f7 f915 	bl	8000104 <strcmp>
 8008eda:	1e03      	subs	r3, r0, #0
 8008edc:	d007      	beq.n	8008eee <command_interface_handle_command+0xfa>
 8008ede:	4a90      	ldr	r2, [pc, #576]	@ (8009120 <command_interface_handle_command+0x32c>)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	0011      	movs	r1, r2
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f7f7 f90d 	bl	8000104 <strcmp>
 8008eea:	1e03      	subs	r3, r0, #0
 8008eec:	d102      	bne.n	8008ef4 <command_interface_handle_command+0x100>
        bme680_read_raw_registers();
 8008eee:	f7fc f867 	bl	8004fc0 <bme680_read_raw_registers>
 8008ef2:	e198      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "raw adc") == 0 || strcmp(command, "ra") == 0) {
 8008ef4:	4a8b      	ldr	r2, [pc, #556]	@ (8009124 <command_interface_handle_command+0x330>)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	0011      	movs	r1, r2
 8008efa:	0018      	movs	r0, r3
 8008efc:	f7f7 f902 	bl	8000104 <strcmp>
 8008f00:	1e03      	subs	r3, r0, #0
 8008f02:	d007      	beq.n	8008f14 <command_interface_handle_command+0x120>
 8008f04:	4a88      	ldr	r2, [pc, #544]	@ (8009128 <command_interface_handle_command+0x334>)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	0011      	movs	r1, r2
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	f7f7 f8fa 	bl	8000104 <strcmp>
 8008f10:	1e03      	subs	r3, r0, #0
 8008f12:	d102      	bne.n	8008f1a <command_interface_handle_command+0x126>
        bme680_read_raw_adc_values();
 8008f14:	f7fb ff9c 	bl	8004e50 <bme680_read_raw_adc_values>
 8008f18:	e185      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "calib data") == 0 || strcmp(command, "cd") == 0) {
 8008f1a:	4a84      	ldr	r2, [pc, #528]	@ (800912c <command_interface_handle_command+0x338>)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	0011      	movs	r1, r2
 8008f20:	0018      	movs	r0, r3
 8008f22:	f7f7 f8ef 	bl	8000104 <strcmp>
 8008f26:	1e03      	subs	r3, r0, #0
 8008f28:	d007      	beq.n	8008f3a <command_interface_handle_command+0x146>
 8008f2a:	4a81      	ldr	r2, [pc, #516]	@ (8009130 <command_interface_handle_command+0x33c>)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	0011      	movs	r1, r2
 8008f30:	0018      	movs	r0, r3
 8008f32:	f7f7 f8e7 	bl	8000104 <strcmp>
 8008f36:	1e03      	subs	r3, r0, #0
 8008f38:	d102      	bne.n	8008f40 <command_interface_handle_command+0x14c>
        bme680_check_calibration_data();
 8008f3a:	f7fb fee9 	bl	8004d10 <bme680_check_calibration_data>
 8008f3e:	e172      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "bme diagnostic") == 0 || strcmp(command, "bd") == 0) {
 8008f40:	4a7c      	ldr	r2, [pc, #496]	@ (8009134 <command_interface_handle_command+0x340>)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	0011      	movs	r1, r2
 8008f46:	0018      	movs	r0, r3
 8008f48:	f7f7 f8dc 	bl	8000104 <strcmp>
 8008f4c:	1e03      	subs	r3, r0, #0
 8008f4e:	d007      	beq.n	8008f60 <command_interface_handle_command+0x16c>
 8008f50:	4a79      	ldr	r2, [pc, #484]	@ (8009138 <command_interface_handle_command+0x344>)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	0011      	movs	r1, r2
 8008f56:	0018      	movs	r0, r3
 8008f58:	f7f7 f8d4 	bl	8000104 <strcmp>
 8008f5c:	1e03      	subs	r3, r0, #0
 8008f5e:	d102      	bne.n	8008f66 <command_interface_handle_command+0x172>
        bme680_comprehensive_diagnostic();
 8008f60:	f7fc fc1a 	bl	8005798 <bme680_comprehensive_diagnostic>
 8008f64:	e15f      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "scan i2c") == 0 || strcmp(command, "si") == 0) {
 8008f66:	4a75      	ldr	r2, [pc, #468]	@ (800913c <command_interface_handle_command+0x348>)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	0011      	movs	r1, r2
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f7f7 f8c9 	bl	8000104 <strcmp>
 8008f72:	1e03      	subs	r3, r0, #0
 8008f74:	d007      	beq.n	8008f86 <command_interface_handle_command+0x192>
 8008f76:	4a72      	ldr	r2, [pc, #456]	@ (8009140 <command_interface_handle_command+0x34c>)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	0011      	movs	r1, r2
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	f7f7 f8c1 	bl	8000104 <strcmp>
 8008f82:	1e03      	subs	r3, r0, #0
 8008f84:	d102      	bne.n	8008f8c <command_interface_handle_command+0x198>
        i2c_scan_bus();
 8008f86:	f7fa fd45 	bl	8003a14 <i2c_scan_bus>
 8008f8a:	e14c      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "lora broadcast") == 0 || strcmp(command, "lb") == 0) {
 8008f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8009144 <command_interface_handle_command+0x350>)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	0011      	movs	r1, r2
 8008f92:	0018      	movs	r0, r3
 8008f94:	f7f7 f8b6 	bl	8000104 <strcmp>
 8008f98:	1e03      	subs	r3, r0, #0
 8008f9a:	d007      	beq.n	8008fac <command_interface_handle_command+0x1b8>
 8008f9c:	4a6a      	ldr	r2, [pc, #424]	@ (8009148 <command_interface_handle_command+0x354>)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	0011      	movs	r1, r2
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f7f7 f8ae 	bl	8000104 <strcmp>
 8008fa8:	1e03      	subs	r3, r0, #0
 8008faa:	d102      	bne.n	8008fb2 <command_interface_handle_command+0x1be>
        cmd_lora_broadcast();
 8008fac:	f001 fbd2 	bl	800a754 <cmd_lora_broadcast>
 8008fb0:	e139      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "lora config") == 0 || strcmp(command, "lc") == 0) {
 8008fb2:	4a66      	ldr	r2, [pc, #408]	@ (800914c <command_interface_handle_command+0x358>)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	0011      	movs	r1, r2
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f7f7 f8a3 	bl	8000104 <strcmp>
 8008fbe:	1e03      	subs	r3, r0, #0
 8008fc0:	d007      	beq.n	8008fd2 <command_interface_handle_command+0x1de>
 8008fc2:	4a63      	ldr	r2, [pc, #396]	@ (8009150 <command_interface_handle_command+0x35c>)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	0011      	movs	r1, r2
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f7f7 f89b 	bl	8000104 <strcmp>
 8008fce:	1e03      	subs	r3, r0, #0
 8008fd0:	d102      	bne.n	8008fd8 <command_interface_handle_command+0x1e4>
        lora_print_config();
 8008fd2:	f002 fa6f 	bl	800b4b4 <sx1262_print_config>
 8008fd6:	e126      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "lora test") == 0 || strcmp(command, "lt") == 0) {
 8008fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8009154 <command_interface_handle_command+0x360>)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	0011      	movs	r1, r2
 8008fde:	0018      	movs	r0, r3
 8008fe0:	f7f7 f890 	bl	8000104 <strcmp>
 8008fe4:	1e03      	subs	r3, r0, #0
 8008fe6:	d007      	beq.n	8008ff8 <command_interface_handle_command+0x204>
 8008fe8:	4a5b      	ldr	r2, [pc, #364]	@ (8009158 <command_interface_handle_command+0x364>)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	0011      	movs	r1, r2
 8008fee:	0018      	movs	r0, r3
 8008ff0:	f7f7 f888 	bl	8000104 <strcmp>
 8008ff4:	1e03      	subs	r3, r0, #0
 8008ff6:	d102      	bne.n	8008ffe <command_interface_handle_command+0x20a>
        lora_test_transmission();
 8008ff8:	f002 fad6 	bl	800b5a8 <sx1262_test_transmission>
 8008ffc:	e113      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "lora scan") == 0 || strcmp(command, "ls") == 0) {
 8008ffe:	4a57      	ldr	r2, [pc, #348]	@ (800915c <command_interface_handle_command+0x368>)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	0011      	movs	r1, r2
 8009004:	0018      	movs	r0, r3
 8009006:	f7f7 f87d 	bl	8000104 <strcmp>
 800900a:	1e03      	subs	r3, r0, #0
 800900c:	d007      	beq.n	800901e <command_interface_handle_command+0x22a>
 800900e:	4a54      	ldr	r2, [pc, #336]	@ (8009160 <command_interface_handle_command+0x36c>)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	0011      	movs	r1, r2
 8009014:	0018      	movs	r0, r3
 8009016:	f7f7 f875 	bl	8000104 <strcmp>
 800901a:	1e03      	subs	r3, r0, #0
 800901c:	d104      	bne.n	8009028 <command_interface_handle_command+0x234>
        lora_scan_signals(5000); // 5 second scan
 800901e:	4b51      	ldr	r3, [pc, #324]	@ (8009164 <command_interface_handle_command+0x370>)
 8009020:	0018      	movs	r0, r3
 8009022:	f002 faef 	bl	800b604 <lora_scan_signals>
 8009026:	e0fe      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "lora monitor") == 0 || strcmp(command, "lm") == 0) {
 8009028:	4a4f      	ldr	r2, [pc, #316]	@ (8009168 <command_interface_handle_command+0x374>)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	0011      	movs	r1, r2
 800902e:	0018      	movs	r0, r3
 8009030:	f7f7 f868 	bl	8000104 <strcmp>
 8009034:	1e03      	subs	r3, r0, #0
 8009036:	d007      	beq.n	8009048 <command_interface_handle_command+0x254>
 8009038:	4a4c      	ldr	r2, [pc, #304]	@ (800916c <command_interface_handle_command+0x378>)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	0011      	movs	r1, r2
 800903e:	0018      	movs	r0, r3
 8009040:	f7f7 f860 	bl	8000104 <strcmp>
 8009044:	1e03      	subs	r3, r0, #0
 8009046:	d102      	bne.n	800904e <command_interface_handle_command+0x25a>
        lora_start_monitoring();
 8009048:	f002 faec 	bl	800b624 <lora_start_monitoring>
 800904c:	e0eb      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "lora stop") == 0 || strcmp(command, "lst") == 0) {
 800904e:	4a48      	ldr	r2, [pc, #288]	@ (8009170 <command_interface_handle_command+0x37c>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	0011      	movs	r1, r2
 8009054:	0018      	movs	r0, r3
 8009056:	f7f7 f855 	bl	8000104 <strcmp>
 800905a:	1e03      	subs	r3, r0, #0
 800905c:	d007      	beq.n	800906e <command_interface_handle_command+0x27a>
 800905e:	4a45      	ldr	r2, [pc, #276]	@ (8009174 <command_interface_handle_command+0x380>)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	0011      	movs	r1, r2
 8009064:	0018      	movs	r0, r3
 8009066:	f7f7 f84d 	bl	8000104 <strcmp>
 800906a:	1e03      	subs	r3, r0, #0
 800906c:	d102      	bne.n	8009074 <command_interface_handle_command+0x280>
        lora_stop_monitoring();
 800906e:	f002 fae7 	bl	800b640 <lora_stop_monitoring>
 8009072:	e0d8      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "lora rssi") == 0 || strcmp(command, "lr") == 0) {
 8009074:	4a40      	ldr	r2, [pc, #256]	@ (8009178 <command_interface_handle_command+0x384>)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	0011      	movs	r1, r2
 800907a:	0018      	movs	r0, r3
 800907c:	f7f7 f842 	bl	8000104 <strcmp>
 8009080:	1e03      	subs	r3, r0, #0
 8009082:	d007      	beq.n	8009094 <command_interface_handle_command+0x2a0>
 8009084:	4a3d      	ldr	r2, [pc, #244]	@ (800917c <command_interface_handle_command+0x388>)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	0011      	movs	r1, r2
 800908a:	0018      	movs	r0, r3
 800908c:	f7f7 f83a 	bl	8000104 <strcmp>
 8009090:	1e03      	subs	r3, r0, #0
 8009092:	d102      	bne.n	800909a <command_interface_handle_command+0x2a6>
        lora_get_rssi();
 8009094:	f002 fae2 	bl	800b65c <lora_get_rssi>
 8009098:	e0c5      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "test spi") == 0 || strcmp(command, "tspi") == 0) {
 800909a:	4a39      	ldr	r2, [pc, #228]	@ (8009180 <command_interface_handle_command+0x38c>)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	0011      	movs	r1, r2
 80090a0:	0018      	movs	r0, r3
 80090a2:	f7f7 f82f 	bl	8000104 <strcmp>
 80090a6:	1e03      	subs	r3, r0, #0
 80090a8:	d007      	beq.n	80090ba <command_interface_handle_command+0x2c6>
 80090aa:	4a36      	ldr	r2, [pc, #216]	@ (8009184 <command_interface_handle_command+0x390>)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	0011      	movs	r1, r2
 80090b0:	0018      	movs	r0, r3
 80090b2:	f7f7 f827 	bl	8000104 <strcmp>
 80090b6:	1e03      	subs	r3, r0, #0
 80090b8:	d102      	bne.n	80090c0 <command_interface_handle_command+0x2cc>
        cmd_test_spi();
 80090ba:	f001 fc43 	bl	800a944 <cmd_test_spi>
 80090be:	e0b2      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "test lora") == 0 || strcmp(command, "tl") == 0) {
 80090c0:	4a31      	ldr	r2, [pc, #196]	@ (8009188 <command_interface_handle_command+0x394>)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	0011      	movs	r1, r2
 80090c6:	0018      	movs	r0, r3
 80090c8:	f7f7 f81c 	bl	8000104 <strcmp>
 80090cc:	1e03      	subs	r3, r0, #0
 80090ce:	d007      	beq.n	80090e0 <command_interface_handle_command+0x2ec>
 80090d0:	4a2e      	ldr	r2, [pc, #184]	@ (800918c <command_interface_handle_command+0x398>)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	0011      	movs	r1, r2
 80090d6:	0018      	movs	r0, r3
 80090d8:	f7f7 f814 	bl	8000104 <strcmp>
 80090dc:	1e03      	subs	r3, r0, #0
 80090de:	d157      	bne.n	8009190 <command_interface_handle_command+0x39c>
        cmd_test_lora_init();
 80090e0:	f001 fc74 	bl	800a9cc <cmd_test_lora_init>
 80090e4:	e09f      	b.n	8009226 <command_interface_handle_command+0x432>
 80090e6:	46c0      	nop			@ (mov r8, r8)
 80090e8:	200002de 	.word	0x200002de
 80090ec:	0801624c 	.word	0x0801624c
 80090f0:	08016254 	.word	0x08016254
 80090f4:	08015ccc 	.word	0x08015ccc
 80090f8:	0801628c 	.word	0x0801628c
 80090fc:	080162ac 	.word	0x080162ac
 8009100:	080162c0 	.word	0x080162c0
 8009104:	080162c4 	.word	0x080162c4
 8009108:	080162d4 	.word	0x080162d4
 800910c:	080162d8 	.word	0x080162d8
 8009110:	080162e8 	.word	0x080162e8
 8009114:	080162ec 	.word	0x080162ec
 8009118:	080162f8 	.word	0x080162f8
 800911c:	080162fc 	.word	0x080162fc
 8009120:	0801630c 	.word	0x0801630c
 8009124:	08016310 	.word	0x08016310
 8009128:	08016318 	.word	0x08016318
 800912c:	0801631c 	.word	0x0801631c
 8009130:	08016328 	.word	0x08016328
 8009134:	0801632c 	.word	0x0801632c
 8009138:	0801633c 	.word	0x0801633c
 800913c:	08016340 	.word	0x08016340
 8009140:	0801634c 	.word	0x0801634c
 8009144:	08016350 	.word	0x08016350
 8009148:	08016360 	.word	0x08016360
 800914c:	08016364 	.word	0x08016364
 8009150:	08016370 	.word	0x08016370
 8009154:	08016374 	.word	0x08016374
 8009158:	08016380 	.word	0x08016380
 800915c:	08016384 	.word	0x08016384
 8009160:	08016390 	.word	0x08016390
 8009164:	00001388 	.word	0x00001388
 8009168:	08016394 	.word	0x08016394
 800916c:	080163a4 	.word	0x080163a4
 8009170:	080163a8 	.word	0x080163a8
 8009174:	080163b4 	.word	0x080163b4
 8009178:	080163b8 	.word	0x080163b8
 800917c:	080163c4 	.word	0x080163c4
 8009180:	080163c8 	.word	0x080163c8
 8009184:	080163d4 	.word	0x080163d4
 8009188:	080163dc 	.word	0x080163dc
 800918c:	080163e8 	.word	0x080163e8
    }
    else if (strncmp(command, "sum ", 4) == 0) {
 8009190:	4926      	ldr	r1, [pc, #152]	@ (800922c <command_interface_handle_command+0x438>)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2204      	movs	r2, #4
 8009196:	0018      	movs	r0, r3
 8009198:	f008 fcc6 	bl	8011b28 <strncmp>
 800919c:	1e03      	subs	r3, r0, #0
 800919e:	d104      	bne.n	80091aa <command_interface_handle_command+0x3b6>
        cmd_math_operation(command);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	0018      	movs	r0, r3
 80091a4:	f000 fb8c 	bl	80098c0 <cmd_math_operation>
 80091a8:	e03d      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strncmp(command, "sub ", 4) == 0) {
 80091aa:	4921      	ldr	r1, [pc, #132]	@ (8009230 <command_interface_handle_command+0x43c>)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2204      	movs	r2, #4
 80091b0:	0018      	movs	r0, r3
 80091b2:	f008 fcb9 	bl	8011b28 <strncmp>
 80091b6:	1e03      	subs	r3, r0, #0
 80091b8:	d104      	bne.n	80091c4 <command_interface_handle_command+0x3d0>
        cmd_math_operation(command);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	0018      	movs	r0, r3
 80091be:	f000 fb7f 	bl	80098c0 <cmd_math_operation>
 80091c2:	e030      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strncmp(command, "mul ", 4) == 0) {
 80091c4:	491b      	ldr	r1, [pc, #108]	@ (8009234 <command_interface_handle_command+0x440>)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2204      	movs	r2, #4
 80091ca:	0018      	movs	r0, r3
 80091cc:	f008 fcac 	bl	8011b28 <strncmp>
 80091d0:	1e03      	subs	r3, r0, #0
 80091d2:	d104      	bne.n	80091de <command_interface_handle_command+0x3ea>
        cmd_math_operation(command);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	0018      	movs	r0, r3
 80091d8:	f000 fb72 	bl	80098c0 <cmd_math_operation>
 80091dc:	e023      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strncmp(command, "div ", 4) == 0) {
 80091de:	4916      	ldr	r1, [pc, #88]	@ (8009238 <command_interface_handle_command+0x444>)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2204      	movs	r2, #4
 80091e4:	0018      	movs	r0, r3
 80091e6:	f008 fc9f 	bl	8011b28 <strncmp>
 80091ea:	1e03      	subs	r3, r0, #0
 80091ec:	d104      	bne.n	80091f8 <command_interface_handle_command+0x404>
        cmd_math_operation(command);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	0018      	movs	r0, r3
 80091f2:	f000 fb65 	bl	80098c0 <cmd_math_operation>
 80091f6:	e016      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else if (strcmp(command, "help") == 0) {
 80091f8:	4a10      	ldr	r2, [pc, #64]	@ (800923c <command_interface_handle_command+0x448>)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	0011      	movs	r1, r2
 80091fe:	0018      	movs	r0, r3
 8009200:	f7f6 ff80 	bl	8000104 <strcmp>
 8009204:	1e03      	subs	r3, r0, #0
 8009206:	d102      	bne.n	800920e <command_interface_handle_command+0x41a>
        command_interface_show_help();
 8009208:	f7ff fd40 	bl	8008c8c <command_interface_show_help>
 800920c:	e00b      	b.n	8009226 <command_interface_handle_command+0x432>
    }
    else {
        snprintf(response, sizeof(response), "Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a0b      	ldr	r2, [pc, #44]	@ (8009240 <command_interface_handle_command+0x44c>)
 8009212:	2180      	movs	r1, #128	@ 0x80
 8009214:	0049      	lsls	r1, r1, #1
 8009216:	2408      	movs	r4, #8
 8009218:	1938      	adds	r0, r7, r4
 800921a:	f008 fbfb 	bl	8011a14 <sniprintf>
        command_interface_send_response(response);
 800921e:	193b      	adds	r3, r7, r4
 8009220:	0018      	movs	r0, r3
 8009222:	f000 f80f 	bl	8009244 <command_interface_send_response>
    }
}
 8009226:	46bd      	mov	sp, r7
 8009228:	b043      	add	sp, #268	@ 0x10c
 800922a:	bd90      	pop	{r4, r7, pc}
 800922c:	080163ec 	.word	0x080163ec
 8009230:	080163f4 	.word	0x080163f4
 8009234:	080163fc 	.word	0x080163fc
 8009238:	08016404 	.word	0x08016404
 800923c:	0801640c 	.word	0x0801640c
 8009240:	08016414 	.word	0x08016414

08009244 <command_interface_send_response>:

// Send response via USART2
void command_interface_send_response(const char* response)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	0018      	movs	r0, r3
 8009250:	f7f6 ff62 	bl	8000118 <strlen>
 8009254:	0003      	movs	r3, r0
 8009256:	b29a      	uxth	r2, r3
 8009258:	2301      	movs	r3, #1
 800925a:	425b      	negs	r3, r3
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4803      	ldr	r0, [pc, #12]	@ (800926c <command_interface_send_response+0x28>)
 8009260:	f006 f8f4 	bl	800f44c <HAL_UART_Transmit>
}
 8009264:	46c0      	nop			@ (mov r8, r8)
 8009266:	46bd      	mov	sp, r7
 8009268:	b002      	add	sp, #8
 800926a:	bd80      	pop	{r7, pc}
 800926c:	2000039c 	.word	0x2000039c

08009270 <command_interface_send_response_usart4>:

// Send response via USART4
void command_interface_send_response_usart4(const char* response)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	0018      	movs	r0, r3
 800927c:	f7f6 ff4c 	bl	8000118 <strlen>
 8009280:	0003      	movs	r3, r0
 8009282:	b29a      	uxth	r2, r3
 8009284:	2301      	movs	r3, #1
 8009286:	425b      	negs	r3, r3
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	4803      	ldr	r0, [pc, #12]	@ (8009298 <command_interface_send_response_usart4+0x28>)
 800928c:	f006 f8de 	bl	800f44c <HAL_UART_Transmit>
}
 8009290:	46c0      	nop			@ (mov r8, r8)
 8009292:	46bd      	mov	sp, r7
 8009294:	b002      	add	sp, #8
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20000430 	.word	0x20000430

0800929c <cmd_read_temperature>:

// Command handler for reading temperature
void cmd_read_temperature(void)
{
 800929c:	b590      	push	{r4, r7, lr}
 800929e:	b0d1      	sub	sp, #324	@ 0x144
 80092a0:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    char debug_msg[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 80092a2:	f7fa fcf3 	bl	8003c8c <bme680_check_sensor_presence>
 80092a6:	1e03      	subs	r3, r0, #0
 80092a8:	d00b      	beq.n	80092c2 <cmd_read_temperature+0x26>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 80092aa:	4a8d      	ldr	r2, [pc, #564]	@ (80094e0 <cmd_read_temperature+0x244>)
 80092ac:	2480      	movs	r4, #128	@ 0x80
 80092ae:	193b      	adds	r3, r7, r4
 80092b0:	2180      	movs	r1, #128	@ 0x80
 80092b2:	0018      	movs	r0, r3
 80092b4:	f008 fbae 	bl	8011a14 <sniprintf>
        command_interface_send_response(response);
 80092b8:	193b      	adds	r3, r7, r4
 80092ba:	0018      	movs	r0, r3
 80092bc:	f7ff ffc2 	bl	8009244 <command_interface_send_response>
 80092c0:	e10a      	b.n	80094d8 <cmd_read_temperature+0x23c>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 80092c2:	1c7b      	adds	r3, r7, #1
 80092c4:	33ff      	adds	r3, #255	@ 0xff
 80092c6:	0018      	movs	r0, r3
 80092c8:	f7fa ff46 	bl	8004158 <bme680_read_sensor_data>
 80092cc:	1e03      	subs	r3, r0, #0
 80092ce:	d000      	beq.n	80092d2 <cmd_read_temperature+0x36>
 80092d0:	e0f6      	b.n	80094c0 <cmd_read_temperature+0x224>
        // Decode the IEEE 754 value from memory
        uint32_t temp_mem = *(uint32_t*)&sensor_data.temperature;
 80092d2:	1c7b      	adds	r3, r7, #1
 80092d4:	33ff      	adds	r3, #255	@ 0xff
 80092d6:	3308      	adds	r3, #8
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2494      	movs	r4, #148	@ 0x94
 80092dc:	0064      	lsls	r4, r4, #1
 80092de:	193a      	adds	r2, r7, r4
 80092e0:	6013      	str	r3, [r2, #0]
        float temp_decoded = decode_ieee754(temp_mem);
 80092e2:	193b      	adds	r3, r7, r4
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	0018      	movs	r0, r3
 80092e8:	f7fa ff08 	bl	80040fc <decode_ieee754>
 80092ec:	1c03      	adds	r3, r0, #0
 80092ee:	229a      	movs	r2, #154	@ 0x9a
 80092f0:	0052      	lsls	r2, r2, #1
 80092f2:	18ba      	adds	r2, r7, r2
 80092f4:	6013      	str	r3, [r2, #0]
        
        // Direct IEEE 754 calculation for temperature
        uint32_t temp_sign = (temp_mem >> 31) & 0x1;
 80092f6:	0021      	movs	r1, r4
 80092f8:	187b      	adds	r3, r7, r1
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	0fdb      	lsrs	r3, r3, #31
 80092fe:	2292      	movs	r2, #146	@ 0x92
 8009300:	0052      	lsls	r2, r2, #1
 8009302:	18ba      	adds	r2, r7, r2
 8009304:	6013      	str	r3, [r2, #0]
        uint32_t temp_exp = (temp_mem >> 23) & 0xFF;
 8009306:	187b      	adds	r3, r7, r1
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	0ddb      	lsrs	r3, r3, #23
 800930c:	22ff      	movs	r2, #255	@ 0xff
 800930e:	4013      	ands	r3, r2
 8009310:	2290      	movs	r2, #144	@ 0x90
 8009312:	0052      	lsls	r2, r2, #1
 8009314:	18b8      	adds	r0, r7, r2
 8009316:	6003      	str	r3, [r0, #0]
        uint32_t temp_mant = temp_mem & 0x7FFFFF;
 8009318:	187b      	adds	r3, r7, r1
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	025b      	lsls	r3, r3, #9
 800931e:	0a5b      	lsrs	r3, r3, #9
 8009320:	218e      	movs	r1, #142	@ 0x8e
 8009322:	0049      	lsls	r1, r1, #1
 8009324:	1879      	adds	r1, r7, r1
 8009326:	600b      	str	r3, [r1, #0]
        
        if (temp_exp != 0 && temp_exp != 0xFF) {
 8009328:	18bb      	adds	r3, r7, r2
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d100      	bne.n	8009332 <cmd_read_temperature+0x96>
 8009330:	e098      	b.n	8009464 <cmd_read_temperature+0x1c8>
 8009332:	18bb      	adds	r3, r7, r2
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2bff      	cmp	r3, #255	@ 0xff
 8009338:	d100      	bne.n	800933c <cmd_read_temperature+0xa0>
 800933a:	e093      	b.n	8009464 <cmd_read_temperature+0x1c8>
            int temp_exp_val = (int)temp_exp - 127;
 800933c:	18bb      	adds	r3, r7, r2
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3b7f      	subs	r3, #127	@ 0x7f
 8009342:	228c      	movs	r2, #140	@ 0x8c
 8009344:	0052      	lsls	r2, r2, #1
 8009346:	18ba      	adds	r2, r7, r2
 8009348:	6013      	str	r3, [r2, #0]
            float temp_result = 1.0f;
 800934a:	23fe      	movs	r3, #254	@ 0xfe
 800934c:	059b      	lsls	r3, r3, #22
 800934e:	2298      	movs	r2, #152	@ 0x98
 8009350:	0052      	lsls	r2, r2, #1
 8009352:	18ba      	adds	r2, r7, r2
 8009354:	6013      	str	r3, [r2, #0]
            
            // Calculate mantissa
            for (int i = 22; i >= 0; i--) {
 8009356:	2316      	movs	r3, #22
 8009358:	2296      	movs	r2, #150	@ 0x96
 800935a:	0052      	lsls	r2, r2, #1
 800935c:	18ba      	adds	r2, r7, r2
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	e02f      	b.n	80093c2 <cmd_read_temperature+0x126>
                if (temp_mant & (1 << i)) {
 8009362:	2201      	movs	r2, #1
 8009364:	2196      	movs	r1, #150	@ 0x96
 8009366:	0049      	lsls	r1, r1, #1
 8009368:	187b      	adds	r3, r7, r1
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	409a      	lsls	r2, r3
 800936e:	0013      	movs	r3, r2
 8009370:	001a      	movs	r2, r3
 8009372:	238e      	movs	r3, #142	@ 0x8e
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	18fb      	adds	r3, r7, r3
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4013      	ands	r3, r2
 800937c:	d01a      	beq.n	80093b4 <cmd_read_temperature+0x118>
                    temp_result += 1.0f / (1 << (23 - i));
 800937e:	187b      	adds	r3, r7, r1
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2217      	movs	r2, #23
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2201      	movs	r2, #1
 8009388:	409a      	lsls	r2, r3
 800938a:	0013      	movs	r3, r2
 800938c:	0018      	movs	r0, r3
 800938e:	f7f8 f9f3 	bl	8001778 <__aeabi_i2f>
 8009392:	1c03      	adds	r3, r0, #0
 8009394:	1c19      	adds	r1, r3, #0
 8009396:	20fe      	movs	r0, #254	@ 0xfe
 8009398:	0580      	lsls	r0, r0, #22
 800939a:	f7f7 fc2b 	bl	8000bf4 <__aeabi_fdiv>
 800939e:	1c03      	adds	r3, r0, #0
 80093a0:	1c19      	adds	r1, r3, #0
 80093a2:	2498      	movs	r4, #152	@ 0x98
 80093a4:	0064      	lsls	r4, r4, #1
 80093a6:	193b      	adds	r3, r7, r4
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	f7f7 fa31 	bl	8000810 <__aeabi_fadd>
 80093ae:	1c03      	adds	r3, r0, #0
 80093b0:	193a      	adds	r2, r7, r4
 80093b2:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80093b4:	2296      	movs	r2, #150	@ 0x96
 80093b6:	0052      	lsls	r2, r2, #1
 80093b8:	18bb      	adds	r3, r7, r2
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3b01      	subs	r3, #1
 80093be:	18ba      	adds	r2, r7, r2
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	2396      	movs	r3, #150	@ 0x96
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	18fb      	adds	r3, r7, r3
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	dac9      	bge.n	8009362 <cmd_read_temperature+0xc6>
                }
            }
            
            // Apply exponent
            if (temp_exp_val > 0) {
 80093ce:	218c      	movs	r1, #140	@ 0x8c
 80093d0:	0049      	lsls	r1, r1, #1
 80093d2:	187b      	adds	r3, r7, r1
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dd13      	ble.n	8009402 <cmd_read_temperature+0x166>
                temp_result *= (1 << temp_exp_val);
 80093da:	2201      	movs	r2, #1
 80093dc:	187b      	adds	r3, r7, r1
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	409a      	lsls	r2, r3
 80093e2:	0013      	movs	r3, r2
 80093e4:	0018      	movs	r0, r3
 80093e6:	f7f8 f9c7 	bl	8001778 <__aeabi_i2f>
 80093ea:	1c03      	adds	r3, r0, #0
 80093ec:	1c19      	adds	r1, r3, #0
 80093ee:	2498      	movs	r4, #152	@ 0x98
 80093f0:	0064      	lsls	r4, r4, #1
 80093f2:	193b      	adds	r3, r7, r4
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	f7f7 fdcb 	bl	8000f90 <__aeabi_fmul>
 80093fa:	1c03      	adds	r3, r0, #0
 80093fc:	193a      	adds	r2, r7, r4
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	e019      	b.n	8009436 <cmd_read_temperature+0x19a>
            } else if (temp_exp_val < 0) {
 8009402:	228c      	movs	r2, #140	@ 0x8c
 8009404:	0052      	lsls	r2, r2, #1
 8009406:	18bb      	adds	r3, r7, r2
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	da13      	bge.n	8009436 <cmd_read_temperature+0x19a>
                temp_result /= (1 << (-temp_exp_val));
 800940e:	18bb      	adds	r3, r7, r2
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	425b      	negs	r3, r3
 8009414:	2201      	movs	r2, #1
 8009416:	409a      	lsls	r2, r3
 8009418:	0013      	movs	r3, r2
 800941a:	0018      	movs	r0, r3
 800941c:	f7f8 f9ac 	bl	8001778 <__aeabi_i2f>
 8009420:	1c03      	adds	r3, r0, #0
 8009422:	1c19      	adds	r1, r3, #0
 8009424:	2498      	movs	r4, #152	@ 0x98
 8009426:	0064      	lsls	r4, r4, #1
 8009428:	193b      	adds	r3, r7, r4
 800942a:	6818      	ldr	r0, [r3, #0]
 800942c:	f7f7 fbe2 	bl	8000bf4 <__aeabi_fdiv>
 8009430:	1c03      	adds	r3, r0, #0
 8009432:	193a      	adds	r2, r7, r4
 8009434:	6013      	str	r3, [r2, #0]
            }
            
            // Apply sign
            if (temp_sign) temp_result = -temp_result;
 8009436:	2392      	movs	r3, #146	@ 0x92
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	18fb      	adds	r3, r7, r3
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d008      	beq.n	8009454 <cmd_read_temperature+0x1b8>
 8009442:	2198      	movs	r1, #152	@ 0x98
 8009444:	0049      	lsls	r1, r1, #1
 8009446:	187b      	adds	r3, r7, r1
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2280      	movs	r2, #128	@ 0x80
 800944c:	0612      	lsls	r2, r2, #24
 800944e:	4053      	eors	r3, r2
 8009450:	187a      	adds	r2, r7, r1
 8009452:	6013      	str	r3, [r2, #0]
            
            temp_decoded = temp_result;
 8009454:	2398      	movs	r3, #152	@ 0x98
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	18fb      	adds	r3, r7, r3
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	229a      	movs	r2, #154	@ 0x9a
 800945e:	0052      	lsls	r2, r2, #1
 8009460:	18ba      	adds	r2, r7, r2
 8009462:	6013      	str	r3, [r2, #0]
        }
        
        // Debug: Print the raw value before formatting
        snprintf(debug_msg, sizeof(debug_msg), "DEBUG: Raw temperature value: %.6f\r\n", temp_decoded);
 8009464:	249a      	movs	r4, #154	@ 0x9a
 8009466:	0064      	lsls	r4, r4, #1
 8009468:	193b      	adds	r3, r7, r4
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	f7fa f9ba 	bl	80037e4 <__aeabi_f2d>
 8009470:	0002      	movs	r2, r0
 8009472:	000b      	movs	r3, r1
 8009474:	491b      	ldr	r1, [pc, #108]	@ (80094e4 <cmd_read_temperature+0x248>)
 8009476:	0038      	movs	r0, r7
 8009478:	9200      	str	r2, [sp, #0]
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	000a      	movs	r2, r1
 800947e:	2180      	movs	r1, #128	@ 0x80
 8009480:	f008 fac8 	bl	8011a14 <sniprintf>
        command_interface_send_response(debug_msg);
 8009484:	003b      	movs	r3, r7
 8009486:	0018      	movs	r0, r3
 8009488:	f7ff fedc 	bl	8009244 <command_interface_send_response>
        
        snprintf(response, sizeof(response), "Temperature: %.2f°C\r\n", temp_decoded);
 800948c:	193b      	adds	r3, r7, r4
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	f7fa f9a8 	bl	80037e4 <__aeabi_f2d>
 8009494:	0002      	movs	r2, r0
 8009496:	000b      	movs	r3, r1
 8009498:	4913      	ldr	r1, [pc, #76]	@ (80094e8 <cmd_read_temperature+0x24c>)
 800949a:	2480      	movs	r4, #128	@ 0x80
 800949c:	1938      	adds	r0, r7, r4
 800949e:	9200      	str	r2, [sp, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	000a      	movs	r2, r1
 80094a4:	2180      	movs	r1, #128	@ 0x80
 80094a6:	f008 fab5 	bl	8011a14 <sniprintf>
        
        // Debug: Print the formatted string
        snprintf(debug_msg, sizeof(debug_msg), "DEBUG: Formatted string: '%.80s'\r\n", response);
 80094aa:	193b      	adds	r3, r7, r4
 80094ac:	4a0f      	ldr	r2, [pc, #60]	@ (80094ec <cmd_read_temperature+0x250>)
 80094ae:	0038      	movs	r0, r7
 80094b0:	2180      	movs	r1, #128	@ 0x80
 80094b2:	f008 faaf 	bl	8011a14 <sniprintf>
        command_interface_send_response(debug_msg);
 80094b6:	003b      	movs	r3, r7
 80094b8:	0018      	movs	r0, r3
 80094ba:	f7ff fec3 	bl	8009244 <command_interface_send_response>
 80094be:	e006      	b.n	80094ce <cmd_read_temperature+0x232>
    } else {
        snprintf(response, sizeof(response), "Error reading temperature from BME680\r\n");
 80094c0:	4a0b      	ldr	r2, [pc, #44]	@ (80094f0 <cmd_read_temperature+0x254>)
 80094c2:	2380      	movs	r3, #128	@ 0x80
 80094c4:	18fb      	adds	r3, r7, r3
 80094c6:	2180      	movs	r1, #128	@ 0x80
 80094c8:	0018      	movs	r0, r3
 80094ca:	f008 faa3 	bl	8011a14 <sniprintf>
    }
    
    command_interface_send_response(response);
 80094ce:	2380      	movs	r3, #128	@ 0x80
 80094d0:	18fb      	adds	r3, r7, r3
 80094d2:	0018      	movs	r0, r3
 80094d4:	f7ff feb6 	bl	8009244 <command_interface_send_response>
}
 80094d8:	46bd      	mov	sp, r7
 80094da:	b04f      	add	sp, #316	@ 0x13c
 80094dc:	bd90      	pop	{r4, r7, pc}
 80094de:	46c0      	nop			@ (mov r8, r8)
 80094e0:	08016450 	.word	0x08016450
 80094e4:	08016478 	.word	0x08016478
 80094e8:	080164a0 	.word	0x080164a0
 80094ec:	080164b8 	.word	0x080164b8
 80094f0:	080164dc 	.word	0x080164dc

080094f4 <cmd_read_pressure>:

// Command handler for reading pressure
void cmd_read_pressure(void)
{
 80094f4:	b590      	push	{r4, r7, lr}
 80094f6:	b0b1      	sub	sp, #196	@ 0xc4
 80094f8:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 80094fa:	f7fa fbc7 	bl	8003c8c <bme680_check_sensor_presence>
 80094fe:	1e03      	subs	r3, r0, #0
 8009500:	d00a      	beq.n	8009518 <cmd_read_pressure+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 8009502:	4a6e      	ldr	r2, [pc, #440]	@ (80096bc <cmd_read_pressure+0x1c8>)
 8009504:	003b      	movs	r3, r7
 8009506:	2180      	movs	r1, #128	@ 0x80
 8009508:	0018      	movs	r0, r3
 800950a:	f008 fa83 	bl	8011a14 <sniprintf>
        command_interface_send_response(response);
 800950e:	003b      	movs	r3, r7
 8009510:	0018      	movs	r0, r3
 8009512:	f7ff fe97 	bl	8009244 <command_interface_send_response>
 8009516:	e0ce      	b.n	80096b6 <cmd_read_pressure+0x1c2>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 8009518:	2480      	movs	r4, #128	@ 0x80
 800951a:	193b      	adds	r3, r7, r4
 800951c:	0018      	movs	r0, r3
 800951e:	f7fa fe1b 	bl	8004158 <bme680_read_sensor_data>
 8009522:	1e03      	subs	r3, r0, #0
 8009524:	d000      	beq.n	8009528 <cmd_read_pressure+0x34>
 8009526:	e0bc      	b.n	80096a2 <cmd_read_pressure+0x1ae>
        // Decode the IEEE 754 value from memory
        uint32_t press_mem = *(uint32_t*)&sensor_data.pressure;
 8009528:	193b      	adds	r3, r7, r4
 800952a:	330c      	adds	r3, #12
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	21a8      	movs	r1, #168	@ 0xa8
 8009530:	187a      	adds	r2, r7, r1
 8009532:	6013      	str	r3, [r2, #0]
        uint32_t press_sign = (press_mem >> 31) & 0x1;
 8009534:	187b      	adds	r3, r7, r1
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	0fdb      	lsrs	r3, r3, #31
 800953a:	22a4      	movs	r2, #164	@ 0xa4
 800953c:	18ba      	adds	r2, r7, r2
 800953e:	6013      	str	r3, [r2, #0]
        uint32_t press_exp = (press_mem >> 23) & 0xFF;
 8009540:	187b      	adds	r3, r7, r1
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	0ddb      	lsrs	r3, r3, #23
 8009546:	22ff      	movs	r2, #255	@ 0xff
 8009548:	4013      	ands	r3, r2
 800954a:	22a0      	movs	r2, #160	@ 0xa0
 800954c:	18b8      	adds	r0, r7, r2
 800954e:	6003      	str	r3, [r0, #0]
        uint32_t press_mant = press_mem & 0x7FFFFF;
 8009550:	187b      	adds	r3, r7, r1
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	025b      	lsls	r3, r3, #9
 8009556:	0a5b      	lsrs	r3, r3, #9
 8009558:	219c      	movs	r1, #156	@ 0x9c
 800955a:	1879      	adds	r1, r7, r1
 800955c:	600b      	str	r3, [r1, #0]
        
        float press_decoded = 0.0f;
 800955e:	2300      	movs	r3, #0
 8009560:	21b4      	movs	r1, #180	@ 0xb4
 8009562:	1879      	adds	r1, r7, r1
 8009564:	600b      	str	r3, [r1, #0]
        if (press_exp != 0 && press_exp != 0xFF) {
 8009566:	18bb      	adds	r3, r7, r2
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d100      	bne.n	8009570 <cmd_read_pressure+0x7c>
 800956e:	e088      	b.n	8009682 <cmd_read_pressure+0x18e>
 8009570:	18bb      	adds	r3, r7, r2
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2bff      	cmp	r3, #255	@ 0xff
 8009576:	d100      	bne.n	800957a <cmd_read_pressure+0x86>
 8009578:	e083      	b.n	8009682 <cmd_read_pressure+0x18e>
            int press_exp_val = (int)press_exp - 127;
 800957a:	18bb      	adds	r3, r7, r2
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3b7f      	subs	r3, #127	@ 0x7f
 8009580:	2298      	movs	r2, #152	@ 0x98
 8009582:	18ba      	adds	r2, r7, r2
 8009584:	6013      	str	r3, [r2, #0]
            float press_result = 1.0f;
 8009586:	23fe      	movs	r3, #254	@ 0xfe
 8009588:	059b      	lsls	r3, r3, #22
 800958a:	22b0      	movs	r2, #176	@ 0xb0
 800958c:	18ba      	adds	r2, r7, r2
 800958e:	6013      	str	r3, [r2, #0]
            
            for (int i = 22; i >= 0; i--) {
 8009590:	2316      	movs	r3, #22
 8009592:	22ac      	movs	r2, #172	@ 0xac
 8009594:	18ba      	adds	r2, r7, r2
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	e02b      	b.n	80095f2 <cmd_read_pressure+0xfe>
                if (press_mant & (1 << i)) {
 800959a:	2201      	movs	r2, #1
 800959c:	21ac      	movs	r1, #172	@ 0xac
 800959e:	187b      	adds	r3, r7, r1
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	409a      	lsls	r2, r3
 80095a4:	0013      	movs	r3, r2
 80095a6:	001a      	movs	r2, r3
 80095a8:	239c      	movs	r3, #156	@ 0x9c
 80095aa:	18fb      	adds	r3, r7, r3
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4013      	ands	r3, r2
 80095b0:	d019      	beq.n	80095e6 <cmd_read_pressure+0xf2>
                    press_result += 1.0f / (1 << (23 - i));
 80095b2:	187b      	adds	r3, r7, r1
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2217      	movs	r2, #23
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2201      	movs	r2, #1
 80095bc:	409a      	lsls	r2, r3
 80095be:	0013      	movs	r3, r2
 80095c0:	0018      	movs	r0, r3
 80095c2:	f7f8 f8d9 	bl	8001778 <__aeabi_i2f>
 80095c6:	1c03      	adds	r3, r0, #0
 80095c8:	1c19      	adds	r1, r3, #0
 80095ca:	20fe      	movs	r0, #254	@ 0xfe
 80095cc:	0580      	lsls	r0, r0, #22
 80095ce:	f7f7 fb11 	bl	8000bf4 <__aeabi_fdiv>
 80095d2:	1c03      	adds	r3, r0, #0
 80095d4:	1c19      	adds	r1, r3, #0
 80095d6:	24b0      	movs	r4, #176	@ 0xb0
 80095d8:	193b      	adds	r3, r7, r4
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	f7f7 f918 	bl	8000810 <__aeabi_fadd>
 80095e0:	1c03      	adds	r3, r0, #0
 80095e2:	193a      	adds	r2, r7, r4
 80095e4:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80095e6:	22ac      	movs	r2, #172	@ 0xac
 80095e8:	18bb      	adds	r3, r7, r2
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	18ba      	adds	r2, r7, r2
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	23ac      	movs	r3, #172	@ 0xac
 80095f4:	18fb      	adds	r3, r7, r3
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dace      	bge.n	800959a <cmd_read_pressure+0xa6>
                }
            }
            
            if (press_exp_val > 0) {
 80095fc:	2198      	movs	r1, #152	@ 0x98
 80095fe:	187b      	adds	r3, r7, r1
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	dd12      	ble.n	800962c <cmd_read_pressure+0x138>
                press_result *= (1 << press_exp_val);
 8009606:	2201      	movs	r2, #1
 8009608:	187b      	adds	r3, r7, r1
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	409a      	lsls	r2, r3
 800960e:	0013      	movs	r3, r2
 8009610:	0018      	movs	r0, r3
 8009612:	f7f8 f8b1 	bl	8001778 <__aeabi_i2f>
 8009616:	1c03      	adds	r3, r0, #0
 8009618:	1c19      	adds	r1, r3, #0
 800961a:	24b0      	movs	r4, #176	@ 0xb0
 800961c:	193b      	adds	r3, r7, r4
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	f7f7 fcb6 	bl	8000f90 <__aeabi_fmul>
 8009624:	1c03      	adds	r3, r0, #0
 8009626:	193a      	adds	r2, r7, r4
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	e017      	b.n	800965c <cmd_read_pressure+0x168>
            } else if (press_exp_val < 0) {
 800962c:	2298      	movs	r2, #152	@ 0x98
 800962e:	18bb      	adds	r3, r7, r2
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	da12      	bge.n	800965c <cmd_read_pressure+0x168>
                press_result /= (1 << (-press_exp_val));
 8009636:	18bb      	adds	r3, r7, r2
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	425b      	negs	r3, r3
 800963c:	2201      	movs	r2, #1
 800963e:	409a      	lsls	r2, r3
 8009640:	0013      	movs	r3, r2
 8009642:	0018      	movs	r0, r3
 8009644:	f7f8 f898 	bl	8001778 <__aeabi_i2f>
 8009648:	1c03      	adds	r3, r0, #0
 800964a:	1c19      	adds	r1, r3, #0
 800964c:	24b0      	movs	r4, #176	@ 0xb0
 800964e:	193b      	adds	r3, r7, r4
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	f7f7 facf 	bl	8000bf4 <__aeabi_fdiv>
 8009656:	1c03      	adds	r3, r0, #0
 8009658:	193a      	adds	r2, r7, r4
 800965a:	6013      	str	r3, [r2, #0]
            }
            
            if (press_sign) press_result = -press_result;
 800965c:	23a4      	movs	r3, #164	@ 0xa4
 800965e:	18fb      	adds	r3, r7, r3
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d007      	beq.n	8009676 <cmd_read_pressure+0x182>
 8009666:	21b0      	movs	r1, #176	@ 0xb0
 8009668:	187b      	adds	r3, r7, r1
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2280      	movs	r2, #128	@ 0x80
 800966e:	0612      	lsls	r2, r2, #24
 8009670:	4053      	eors	r3, r2
 8009672:	187a      	adds	r2, r7, r1
 8009674:	6013      	str	r3, [r2, #0]
            press_decoded = press_result;
 8009676:	23b0      	movs	r3, #176	@ 0xb0
 8009678:	18fb      	adds	r3, r7, r3
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	22b4      	movs	r2, #180	@ 0xb4
 800967e:	18ba      	adds	r2, r7, r2
 8009680:	6013      	str	r3, [r2, #0]
        }
        
        snprintf(response, sizeof(response), "Pressure: %.2f Pa\r\n", press_decoded);
 8009682:	23b4      	movs	r3, #180	@ 0xb4
 8009684:	18fb      	adds	r3, r7, r3
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	f7fa f8ac 	bl	80037e4 <__aeabi_f2d>
 800968c:	0002      	movs	r2, r0
 800968e:	000b      	movs	r3, r1
 8009690:	490b      	ldr	r1, [pc, #44]	@ (80096c0 <cmd_read_pressure+0x1cc>)
 8009692:	0038      	movs	r0, r7
 8009694:	9200      	str	r2, [sp, #0]
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	000a      	movs	r2, r1
 800969a:	2180      	movs	r1, #128	@ 0x80
 800969c:	f008 f9ba 	bl	8011a14 <sniprintf>
 80096a0:	e005      	b.n	80096ae <cmd_read_pressure+0x1ba>
    } else {
        snprintf(response, sizeof(response), "Error reading pressure from BME680\r\n");
 80096a2:	4a08      	ldr	r2, [pc, #32]	@ (80096c4 <cmd_read_pressure+0x1d0>)
 80096a4:	003b      	movs	r3, r7
 80096a6:	2180      	movs	r1, #128	@ 0x80
 80096a8:	0018      	movs	r0, r3
 80096aa:	f008 f9b3 	bl	8011a14 <sniprintf>
    }
    
    command_interface_send_response(response);
 80096ae:	003b      	movs	r3, r7
 80096b0:	0018      	movs	r0, r3
 80096b2:	f7ff fdc7 	bl	8009244 <command_interface_send_response>
}
 80096b6:	46bd      	mov	sp, r7
 80096b8:	b02f      	add	sp, #188	@ 0xbc
 80096ba:	bd90      	pop	{r4, r7, pc}
 80096bc:	08016450 	.word	0x08016450
 80096c0:	08016504 	.word	0x08016504
 80096c4:	08016518 	.word	0x08016518

080096c8 <cmd_read_humidity>:

// Command handler for reading humidity
void cmd_read_humidity(void)
{
 80096c8:	b590      	push	{r4, r7, lr}
 80096ca:	b0b1      	sub	sp, #196	@ 0xc4
 80096cc:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 80096ce:	f7fa fadd 	bl	8003c8c <bme680_check_sensor_presence>
 80096d2:	1e03      	subs	r3, r0, #0
 80096d4:	d00a      	beq.n	80096ec <cmd_read_humidity+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 80096d6:	4a6e      	ldr	r2, [pc, #440]	@ (8009890 <cmd_read_humidity+0x1c8>)
 80096d8:	003b      	movs	r3, r7
 80096da:	2180      	movs	r1, #128	@ 0x80
 80096dc:	0018      	movs	r0, r3
 80096de:	f008 f999 	bl	8011a14 <sniprintf>
        command_interface_send_response(response);
 80096e2:	003b      	movs	r3, r7
 80096e4:	0018      	movs	r0, r3
 80096e6:	f7ff fdad 	bl	8009244 <command_interface_send_response>
 80096ea:	e0ce      	b.n	800988a <cmd_read_humidity+0x1c2>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 80096ec:	2480      	movs	r4, #128	@ 0x80
 80096ee:	193b      	adds	r3, r7, r4
 80096f0:	0018      	movs	r0, r3
 80096f2:	f7fa fd31 	bl	8004158 <bme680_read_sensor_data>
 80096f6:	1e03      	subs	r3, r0, #0
 80096f8:	d000      	beq.n	80096fc <cmd_read_humidity+0x34>
 80096fa:	e0bc      	b.n	8009876 <cmd_read_humidity+0x1ae>
        // Decode the IEEE 754 value from memory
        uint32_t hum_mem = *(uint32_t*)&sensor_data.humidity;
 80096fc:	193b      	adds	r3, r7, r4
 80096fe:	3310      	adds	r3, #16
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	21a8      	movs	r1, #168	@ 0xa8
 8009704:	187a      	adds	r2, r7, r1
 8009706:	6013      	str	r3, [r2, #0]
        uint32_t hum_sign = (hum_mem >> 31) & 0x1;
 8009708:	187b      	adds	r3, r7, r1
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	0fdb      	lsrs	r3, r3, #31
 800970e:	22a4      	movs	r2, #164	@ 0xa4
 8009710:	18ba      	adds	r2, r7, r2
 8009712:	6013      	str	r3, [r2, #0]
        uint32_t hum_exp = (hum_mem >> 23) & 0xFF;
 8009714:	187b      	adds	r3, r7, r1
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	0ddb      	lsrs	r3, r3, #23
 800971a:	22ff      	movs	r2, #255	@ 0xff
 800971c:	4013      	ands	r3, r2
 800971e:	22a0      	movs	r2, #160	@ 0xa0
 8009720:	18b8      	adds	r0, r7, r2
 8009722:	6003      	str	r3, [r0, #0]
        uint32_t hum_mant = hum_mem & 0x7FFFFF;
 8009724:	187b      	adds	r3, r7, r1
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	025b      	lsls	r3, r3, #9
 800972a:	0a5b      	lsrs	r3, r3, #9
 800972c:	219c      	movs	r1, #156	@ 0x9c
 800972e:	1879      	adds	r1, r7, r1
 8009730:	600b      	str	r3, [r1, #0]
        
        float hum_decoded = 0.0f;
 8009732:	2300      	movs	r3, #0
 8009734:	21b4      	movs	r1, #180	@ 0xb4
 8009736:	1879      	adds	r1, r7, r1
 8009738:	600b      	str	r3, [r1, #0]
        if (hum_exp != 0 && hum_exp != 0xFF) {
 800973a:	18bb      	adds	r3, r7, r2
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d100      	bne.n	8009744 <cmd_read_humidity+0x7c>
 8009742:	e088      	b.n	8009856 <cmd_read_humidity+0x18e>
 8009744:	18bb      	adds	r3, r7, r2
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2bff      	cmp	r3, #255	@ 0xff
 800974a:	d100      	bne.n	800974e <cmd_read_humidity+0x86>
 800974c:	e083      	b.n	8009856 <cmd_read_humidity+0x18e>
            int hum_exp_val = (int)hum_exp - 127;
 800974e:	18bb      	adds	r3, r7, r2
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3b7f      	subs	r3, #127	@ 0x7f
 8009754:	2298      	movs	r2, #152	@ 0x98
 8009756:	18ba      	adds	r2, r7, r2
 8009758:	6013      	str	r3, [r2, #0]
            float hum_result = 1.0f;
 800975a:	23fe      	movs	r3, #254	@ 0xfe
 800975c:	059b      	lsls	r3, r3, #22
 800975e:	22b0      	movs	r2, #176	@ 0xb0
 8009760:	18ba      	adds	r2, r7, r2
 8009762:	6013      	str	r3, [r2, #0]
            
            for (int i = 22; i >= 0; i--) {
 8009764:	2316      	movs	r3, #22
 8009766:	22ac      	movs	r2, #172	@ 0xac
 8009768:	18ba      	adds	r2, r7, r2
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	e02b      	b.n	80097c6 <cmd_read_humidity+0xfe>
                if (hum_mant & (1 << i)) {
 800976e:	2201      	movs	r2, #1
 8009770:	21ac      	movs	r1, #172	@ 0xac
 8009772:	187b      	adds	r3, r7, r1
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	409a      	lsls	r2, r3
 8009778:	0013      	movs	r3, r2
 800977a:	001a      	movs	r2, r3
 800977c:	239c      	movs	r3, #156	@ 0x9c
 800977e:	18fb      	adds	r3, r7, r3
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4013      	ands	r3, r2
 8009784:	d019      	beq.n	80097ba <cmd_read_humidity+0xf2>
                    hum_result += 1.0f / (1 << (23 - i));
 8009786:	187b      	adds	r3, r7, r1
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2217      	movs	r2, #23
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	2201      	movs	r2, #1
 8009790:	409a      	lsls	r2, r3
 8009792:	0013      	movs	r3, r2
 8009794:	0018      	movs	r0, r3
 8009796:	f7f7 ffef 	bl	8001778 <__aeabi_i2f>
 800979a:	1c03      	adds	r3, r0, #0
 800979c:	1c19      	adds	r1, r3, #0
 800979e:	20fe      	movs	r0, #254	@ 0xfe
 80097a0:	0580      	lsls	r0, r0, #22
 80097a2:	f7f7 fa27 	bl	8000bf4 <__aeabi_fdiv>
 80097a6:	1c03      	adds	r3, r0, #0
 80097a8:	1c19      	adds	r1, r3, #0
 80097aa:	24b0      	movs	r4, #176	@ 0xb0
 80097ac:	193b      	adds	r3, r7, r4
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	f7f7 f82e 	bl	8000810 <__aeabi_fadd>
 80097b4:	1c03      	adds	r3, r0, #0
 80097b6:	193a      	adds	r2, r7, r4
 80097b8:	6013      	str	r3, [r2, #0]
            for (int i = 22; i >= 0; i--) {
 80097ba:	22ac      	movs	r2, #172	@ 0xac
 80097bc:	18bb      	adds	r3, r7, r2
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3b01      	subs	r3, #1
 80097c2:	18ba      	adds	r2, r7, r2
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	23ac      	movs	r3, #172	@ 0xac
 80097c8:	18fb      	adds	r3, r7, r3
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dace      	bge.n	800976e <cmd_read_humidity+0xa6>
                }
            }
            
            if (hum_exp_val > 0) {
 80097d0:	2198      	movs	r1, #152	@ 0x98
 80097d2:	187b      	adds	r3, r7, r1
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	dd12      	ble.n	8009800 <cmd_read_humidity+0x138>
                hum_result *= (1 << hum_exp_val);
 80097da:	2201      	movs	r2, #1
 80097dc:	187b      	adds	r3, r7, r1
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	409a      	lsls	r2, r3
 80097e2:	0013      	movs	r3, r2
 80097e4:	0018      	movs	r0, r3
 80097e6:	f7f7 ffc7 	bl	8001778 <__aeabi_i2f>
 80097ea:	1c03      	adds	r3, r0, #0
 80097ec:	1c19      	adds	r1, r3, #0
 80097ee:	24b0      	movs	r4, #176	@ 0xb0
 80097f0:	193b      	adds	r3, r7, r4
 80097f2:	6818      	ldr	r0, [r3, #0]
 80097f4:	f7f7 fbcc 	bl	8000f90 <__aeabi_fmul>
 80097f8:	1c03      	adds	r3, r0, #0
 80097fa:	193a      	adds	r2, r7, r4
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	e017      	b.n	8009830 <cmd_read_humidity+0x168>
            } else if (hum_exp_val < 0) {
 8009800:	2298      	movs	r2, #152	@ 0x98
 8009802:	18bb      	adds	r3, r7, r2
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	da12      	bge.n	8009830 <cmd_read_humidity+0x168>
                hum_result /= (1 << (-hum_exp_val));
 800980a:	18bb      	adds	r3, r7, r2
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	425b      	negs	r3, r3
 8009810:	2201      	movs	r2, #1
 8009812:	409a      	lsls	r2, r3
 8009814:	0013      	movs	r3, r2
 8009816:	0018      	movs	r0, r3
 8009818:	f7f7 ffae 	bl	8001778 <__aeabi_i2f>
 800981c:	1c03      	adds	r3, r0, #0
 800981e:	1c19      	adds	r1, r3, #0
 8009820:	24b0      	movs	r4, #176	@ 0xb0
 8009822:	193b      	adds	r3, r7, r4
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f7f7 f9e5 	bl	8000bf4 <__aeabi_fdiv>
 800982a:	1c03      	adds	r3, r0, #0
 800982c:	193a      	adds	r2, r7, r4
 800982e:	6013      	str	r3, [r2, #0]
            }
            
            if (hum_sign) hum_result = -hum_result;
 8009830:	23a4      	movs	r3, #164	@ 0xa4
 8009832:	18fb      	adds	r3, r7, r3
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d007      	beq.n	800984a <cmd_read_humidity+0x182>
 800983a:	21b0      	movs	r1, #176	@ 0xb0
 800983c:	187b      	adds	r3, r7, r1
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2280      	movs	r2, #128	@ 0x80
 8009842:	0612      	lsls	r2, r2, #24
 8009844:	4053      	eors	r3, r2
 8009846:	187a      	adds	r2, r7, r1
 8009848:	6013      	str	r3, [r2, #0]
            hum_decoded = hum_result;
 800984a:	23b0      	movs	r3, #176	@ 0xb0
 800984c:	18fb      	adds	r3, r7, r3
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	22b4      	movs	r2, #180	@ 0xb4
 8009852:	18ba      	adds	r2, r7, r2
 8009854:	6013      	str	r3, [r2, #0]
        }
        
        snprintf(response, sizeof(response), "Humidity: %.2f%%\r\n", hum_decoded);
 8009856:	23b4      	movs	r3, #180	@ 0xb4
 8009858:	18fb      	adds	r3, r7, r3
 800985a:	6818      	ldr	r0, [r3, #0]
 800985c:	f7f9 ffc2 	bl	80037e4 <__aeabi_f2d>
 8009860:	0002      	movs	r2, r0
 8009862:	000b      	movs	r3, r1
 8009864:	490b      	ldr	r1, [pc, #44]	@ (8009894 <cmd_read_humidity+0x1cc>)
 8009866:	0038      	movs	r0, r7
 8009868:	9200      	str	r2, [sp, #0]
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	000a      	movs	r2, r1
 800986e:	2180      	movs	r1, #128	@ 0x80
 8009870:	f008 f8d0 	bl	8011a14 <sniprintf>
 8009874:	e005      	b.n	8009882 <cmd_read_humidity+0x1ba>
    } else {
        snprintf(response, sizeof(response), "Error reading humidity from BME680\r\n");
 8009876:	4a08      	ldr	r2, [pc, #32]	@ (8009898 <cmd_read_humidity+0x1d0>)
 8009878:	003b      	movs	r3, r7
 800987a:	2180      	movs	r1, #128	@ 0x80
 800987c:	0018      	movs	r0, r3
 800987e:	f008 f8c9 	bl	8011a14 <sniprintf>
    }
    
    command_interface_send_response(response);
 8009882:	003b      	movs	r3, r7
 8009884:	0018      	movs	r0, r3
 8009886:	f7ff fcdd 	bl	8009244 <command_interface_send_response>
}
 800988a:	46bd      	mov	sp, r7
 800988c:	b02f      	add	sp, #188	@ 0xbc
 800988e:	bd90      	pop	{r4, r7, pc}
 8009890:	08016450 	.word	0x08016450
 8009894:	08016540 	.word	0x08016540
 8009898:	08016554 	.word	0x08016554

0800989c <cmd_test_sensor>:

// Command handler for testing sensor
void cmd_test_sensor(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 80098a0:	f7fa f9f4 	bl	8003c8c <bme680_check_sensor_presence>
 80098a4:	1e03      	subs	r3, r0, #0
 80098a6:	d004      	beq.n	80098b2 <cmd_test_sensor+0x16>
        command_interface_send_response("Error: BME680 sensor not available\r\n");
 80098a8:	4b04      	ldr	r3, [pc, #16]	@ (80098bc <cmd_test_sensor+0x20>)
 80098aa:	0018      	movs	r0, r3
 80098ac:	f7ff fcca 	bl	8009244 <command_interface_send_response>
        return;
 80098b0:	e001      	b.n	80098b6 <cmd_test_sensor+0x1a>
    }
    
    bme680_test_sensor();
 80098b2:	f7fb fc33 	bl	800511c <bme680_test_sensor>
}
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	46c0      	nop			@ (mov r8, r8)
 80098bc:	08016450 	.word	0x08016450

080098c0 <cmd_math_operation>:

// Command handler for mathematical operations
void cmd_math_operation(char* command)
{
 80098c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c2:	b0b1      	sub	sp, #196	@ 0xc4
 80098c4:	af06      	add	r7, sp, #24
 80098c6:	60f8      	str	r0, [r7, #12]
    char* operation = strtok(command, " ");
 80098c8:	4ac9      	ldr	r2, [pc, #804]	@ (8009bf0 <cmd_math_operation+0x330>)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	0011      	movs	r1, r2
 80098ce:	0018      	movs	r0, r3
 80098d0:	f008 f93c 	bl	8011b4c <strtok>
 80098d4:	0003      	movs	r3, r0
 80098d6:	229c      	movs	r2, #156	@ 0x9c
 80098d8:	2508      	movs	r5, #8
 80098da:	1952      	adds	r2, r2, r5
 80098dc:	19d2      	adds	r2, r2, r7
 80098de:	6013      	str	r3, [r2, #0]
    char* num1_str = strtok(NULL, " ");
 80098e0:	4bc3      	ldr	r3, [pc, #780]	@ (8009bf0 <cmd_math_operation+0x330>)
 80098e2:	0019      	movs	r1, r3
 80098e4:	2000      	movs	r0, #0
 80098e6:	f008 f931 	bl	8011b4c <strtok>
 80098ea:	0003      	movs	r3, r0
 80098ec:	2498      	movs	r4, #152	@ 0x98
 80098ee:	1962      	adds	r2, r4, r5
 80098f0:	19d2      	adds	r2, r2, r7
 80098f2:	6013      	str	r3, [r2, #0]
    char* num2_str = strtok(NULL, " ");
 80098f4:	4bbe      	ldr	r3, [pc, #760]	@ (8009bf0 <cmd_math_operation+0x330>)
 80098f6:	0019      	movs	r1, r3
 80098f8:	2000      	movs	r0, #0
 80098fa:	f008 f927 	bl	8011b4c <strtok>
 80098fe:	0003      	movs	r3, r0
 8009900:	2294      	movs	r2, #148	@ 0x94
 8009902:	1951      	adds	r1, r2, r5
 8009904:	19c9      	adds	r1, r1, r7
 8009906:	600b      	str	r3, [r1, #0]
    char response[128];
    
    if (num1_str == NULL || num2_str == NULL) {
 8009908:	0029      	movs	r1, r5
 800990a:	1963      	adds	r3, r4, r5
 800990c:	19db      	adds	r3, r3, r7
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d004      	beq.n	800991e <cmd_math_operation+0x5e>
 8009914:	1853      	adds	r3, r2, r1
 8009916:	19db      	adds	r3, r3, r7
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d104      	bne.n	8009928 <cmd_math_operation+0x68>
        command_interface_send_response("Usage: <operation> <num1> <num2>\r\n");
 800991e:	4bb5      	ldr	r3, [pc, #724]	@ (8009bf4 <cmd_math_operation+0x334>)
 8009920:	0018      	movs	r0, r3
 8009922:	f7ff fc8f 	bl	8009244 <command_interface_send_response>
 8009926:	e160      	b.n	8009bea <cmd_math_operation+0x32a>
        return;
    }
    
    float num1 = atof(num1_str);
 8009928:	2398      	movs	r3, #152	@ 0x98
 800992a:	2508      	movs	r5, #8
 800992c:	195b      	adds	r3, r3, r5
 800992e:	19db      	adds	r3, r3, r7
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	0018      	movs	r0, r3
 8009934:	f006 fd20 	bl	8010378 <atof>
 8009938:	0002      	movs	r2, r0
 800993a:	000b      	movs	r3, r1
 800993c:	0010      	movs	r0, r2
 800993e:	0019      	movs	r1, r3
 8009940:	f7f9 ff98 	bl	8003874 <__aeabi_d2f>
 8009944:	1c03      	adds	r3, r0, #0
 8009946:	2490      	movs	r4, #144	@ 0x90
 8009948:	1962      	adds	r2, r4, r5
 800994a:	19d2      	adds	r2, r2, r7
 800994c:	6013      	str	r3, [r2, #0]
    float num2 = atof(num2_str);
 800994e:	2394      	movs	r3, #148	@ 0x94
 8009950:	195b      	adds	r3, r3, r5
 8009952:	19db      	adds	r3, r3, r7
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	0018      	movs	r0, r3
 8009958:	f006 fd0e 	bl	8010378 <atof>
 800995c:	0002      	movs	r2, r0
 800995e:	000b      	movs	r3, r1
 8009960:	0010      	movs	r0, r2
 8009962:	0019      	movs	r1, r3
 8009964:	f7f9 ff86 	bl	8003874 <__aeabi_d2f>
 8009968:	1c03      	adds	r3, r0, #0
 800996a:	268c      	movs	r6, #140	@ 0x8c
 800996c:	1972      	adds	r2, r6, r5
 800996e:	19d2      	adds	r2, r2, r7
 8009970:	6013      	str	r3, [r2, #0]
    float result;
    
    if (strcmp(operation, "sum") == 0) {
 8009972:	4aa1      	ldr	r2, [pc, #644]	@ (8009bf8 <cmd_math_operation+0x338>)
 8009974:	239c      	movs	r3, #156	@ 0x9c
 8009976:	195b      	adds	r3, r3, r5
 8009978:	19db      	adds	r3, r3, r7
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	0011      	movs	r1, r2
 800997e:	0018      	movs	r0, r3
 8009980:	f7f6 fbc0 	bl	8000104 <strcmp>
 8009984:	1e03      	subs	r3, r0, #0
 8009986:	d136      	bne.n	80099f6 <cmd_math_operation+0x136>
        result = num1 + num2;
 8009988:	1973      	adds	r3, r6, r5
 800998a:	19db      	adds	r3, r3, r7
 800998c:	6819      	ldr	r1, [r3, #0]
 800998e:	1963      	adds	r3, r4, r5
 8009990:	19db      	adds	r3, r3, r7
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	f7f6 ff3c 	bl	8000810 <__aeabi_fadd>
 8009998:	1c03      	adds	r3, r0, #0
 800999a:	2288      	movs	r2, #136	@ 0x88
 800999c:	1952      	adds	r2, r2, r5
 800999e:	19d1      	adds	r1, r2, r7
 80099a0:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f + %.2f = %.2f\r\n", num1, num2, result);
 80099a2:	1963      	adds	r3, r4, r5
 80099a4:	19d9      	adds	r1, r3, r7
 80099a6:	6808      	ldr	r0, [r1, #0]
 80099a8:	f7f9 ff1c 	bl	80037e4 <__aeabi_f2d>
 80099ac:	0004      	movs	r4, r0
 80099ae:	000d      	movs	r5, r1
 80099b0:	2208      	movs	r2, #8
 80099b2:	18b3      	adds	r3, r6, r2
 80099b4:	19d9      	adds	r1, r3, r7
 80099b6:	6808      	ldr	r0, [r1, #0]
 80099b8:	f7f9 ff14 	bl	80037e4 <__aeabi_f2d>
 80099bc:	6038      	str	r0, [r7, #0]
 80099be:	6079      	str	r1, [r7, #4]
 80099c0:	2388      	movs	r3, #136	@ 0x88
 80099c2:	2208      	movs	r2, #8
 80099c4:	189b      	adds	r3, r3, r2
 80099c6:	19db      	adds	r3, r3, r7
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f7f9 ff0b 	bl	80037e4 <__aeabi_f2d>
 80099ce:	0002      	movs	r2, r0
 80099d0:	000b      	movs	r3, r1
 80099d2:	498a      	ldr	r1, [pc, #552]	@ (8009bfc <cmd_math_operation+0x33c>)
 80099d4:	2608      	movs	r6, #8
 80099d6:	2008      	movs	r0, #8
 80099d8:	1830      	adds	r0, r6, r0
 80099da:	19c0      	adds	r0, r0, r7
 80099dc:	9204      	str	r2, [sp, #16]
 80099de:	9305      	str	r3, [sp, #20]
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	9202      	str	r2, [sp, #8]
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	9400      	str	r4, [sp, #0]
 80099ea:	9501      	str	r5, [sp, #4]
 80099ec:	000a      	movs	r2, r1
 80099ee:	2180      	movs	r1, #128	@ 0x80
 80099f0:	f008 f810 	bl	8011a14 <sniprintf>
 80099f4:	e0f2      	b.n	8009bdc <cmd_math_operation+0x31c>
    }
    else if (strcmp(operation, "sub") == 0) {
 80099f6:	4a82      	ldr	r2, [pc, #520]	@ (8009c00 <cmd_math_operation+0x340>)
 80099f8:	239c      	movs	r3, #156	@ 0x9c
 80099fa:	2408      	movs	r4, #8
 80099fc:	191b      	adds	r3, r3, r4
 80099fe:	19db      	adds	r3, r3, r7
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	0011      	movs	r1, r2
 8009a04:	0018      	movs	r0, r3
 8009a06:	f7f6 fb7d 	bl	8000104 <strcmp>
 8009a0a:	1e03      	subs	r3, r0, #0
 8009a0c:	d13a      	bne.n	8009a84 <cmd_math_operation+0x1c4>
        result = num1 - num2;
 8009a0e:	268c      	movs	r6, #140	@ 0x8c
 8009a10:	0025      	movs	r5, r4
 8009a12:	1973      	adds	r3, r6, r5
 8009a14:	19db      	adds	r3, r3, r7
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	2490      	movs	r4, #144	@ 0x90
 8009a1a:	1963      	adds	r3, r4, r5
 8009a1c:	19db      	adds	r3, r3, r7
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	f7f7 fc10 	bl	8001244 <__aeabi_fsub>
 8009a24:	1c03      	adds	r3, r0, #0
 8009a26:	2288      	movs	r2, #136	@ 0x88
 8009a28:	0028      	movs	r0, r5
 8009a2a:	1812      	adds	r2, r2, r0
 8009a2c:	19d1      	adds	r1, r2, r7
 8009a2e:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f - %.2f = %.2f\r\n", num1, num2, result);
 8009a30:	1823      	adds	r3, r4, r0
 8009a32:	19d9      	adds	r1, r3, r7
 8009a34:	6808      	ldr	r0, [r1, #0]
 8009a36:	f7f9 fed5 	bl	80037e4 <__aeabi_f2d>
 8009a3a:	0004      	movs	r4, r0
 8009a3c:	000d      	movs	r5, r1
 8009a3e:	2008      	movs	r0, #8
 8009a40:	1833      	adds	r3, r6, r0
 8009a42:	19d9      	adds	r1, r3, r7
 8009a44:	6808      	ldr	r0, [r1, #0]
 8009a46:	f7f9 fecd 	bl	80037e4 <__aeabi_f2d>
 8009a4a:	6038      	str	r0, [r7, #0]
 8009a4c:	6079      	str	r1, [r7, #4]
 8009a4e:	2388      	movs	r3, #136	@ 0x88
 8009a50:	2008      	movs	r0, #8
 8009a52:	181b      	adds	r3, r3, r0
 8009a54:	19db      	adds	r3, r3, r7
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	f7f9 fec4 	bl	80037e4 <__aeabi_f2d>
 8009a5c:	0002      	movs	r2, r0
 8009a5e:	000b      	movs	r3, r1
 8009a60:	4968      	ldr	r1, [pc, #416]	@ (8009c04 <cmd_math_operation+0x344>)
 8009a62:	2608      	movs	r6, #8
 8009a64:	2008      	movs	r0, #8
 8009a66:	1830      	adds	r0, r6, r0
 8009a68:	19c0      	adds	r0, r0, r7
 8009a6a:	9204      	str	r2, [sp, #16]
 8009a6c:	9305      	str	r3, [sp, #20]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	9202      	str	r2, [sp, #8]
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	9400      	str	r4, [sp, #0]
 8009a78:	9501      	str	r5, [sp, #4]
 8009a7a:	000a      	movs	r2, r1
 8009a7c:	2180      	movs	r1, #128	@ 0x80
 8009a7e:	f007 ffc9 	bl	8011a14 <sniprintf>
 8009a82:	e0ab      	b.n	8009bdc <cmd_math_operation+0x31c>
    }
    else if (strcmp(operation, "mul") == 0) {
 8009a84:	4a60      	ldr	r2, [pc, #384]	@ (8009c08 <cmd_math_operation+0x348>)
 8009a86:	239c      	movs	r3, #156	@ 0x9c
 8009a88:	2408      	movs	r4, #8
 8009a8a:	191b      	adds	r3, r3, r4
 8009a8c:	19db      	adds	r3, r3, r7
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	0011      	movs	r1, r2
 8009a92:	0018      	movs	r0, r3
 8009a94:	f7f6 fb36 	bl	8000104 <strcmp>
 8009a98:	1e03      	subs	r3, r0, #0
 8009a9a:	d13a      	bne.n	8009b12 <cmd_math_operation+0x252>
        result = num1 * num2;
 8009a9c:	268c      	movs	r6, #140	@ 0x8c
 8009a9e:	0025      	movs	r5, r4
 8009aa0:	1973      	adds	r3, r6, r5
 8009aa2:	19db      	adds	r3, r3, r7
 8009aa4:	6819      	ldr	r1, [r3, #0]
 8009aa6:	2490      	movs	r4, #144	@ 0x90
 8009aa8:	1963      	adds	r3, r4, r5
 8009aaa:	19db      	adds	r3, r3, r7
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	f7f7 fa6f 	bl	8000f90 <__aeabi_fmul>
 8009ab2:	1c03      	adds	r3, r0, #0
 8009ab4:	2288      	movs	r2, #136	@ 0x88
 8009ab6:	0028      	movs	r0, r5
 8009ab8:	1812      	adds	r2, r2, r0
 8009aba:	19d1      	adds	r1, r2, r7
 8009abc:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f * %.2f = %.2f\r\n", num1, num2, result);
 8009abe:	1823      	adds	r3, r4, r0
 8009ac0:	19d9      	adds	r1, r3, r7
 8009ac2:	6808      	ldr	r0, [r1, #0]
 8009ac4:	f7f9 fe8e 	bl	80037e4 <__aeabi_f2d>
 8009ac8:	0004      	movs	r4, r0
 8009aca:	000d      	movs	r5, r1
 8009acc:	2008      	movs	r0, #8
 8009ace:	1833      	adds	r3, r6, r0
 8009ad0:	19d9      	adds	r1, r3, r7
 8009ad2:	6808      	ldr	r0, [r1, #0]
 8009ad4:	f7f9 fe86 	bl	80037e4 <__aeabi_f2d>
 8009ad8:	6038      	str	r0, [r7, #0]
 8009ada:	6079      	str	r1, [r7, #4]
 8009adc:	2388      	movs	r3, #136	@ 0x88
 8009ade:	2008      	movs	r0, #8
 8009ae0:	181b      	adds	r3, r3, r0
 8009ae2:	19db      	adds	r3, r3, r7
 8009ae4:	6818      	ldr	r0, [r3, #0]
 8009ae6:	f7f9 fe7d 	bl	80037e4 <__aeabi_f2d>
 8009aea:	0002      	movs	r2, r0
 8009aec:	000b      	movs	r3, r1
 8009aee:	4947      	ldr	r1, [pc, #284]	@ (8009c0c <cmd_math_operation+0x34c>)
 8009af0:	2608      	movs	r6, #8
 8009af2:	2008      	movs	r0, #8
 8009af4:	1830      	adds	r0, r6, r0
 8009af6:	19c0      	adds	r0, r0, r7
 8009af8:	9204      	str	r2, [sp, #16]
 8009afa:	9305      	str	r3, [sp, #20]
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	9202      	str	r2, [sp, #8]
 8009b02:	9303      	str	r3, [sp, #12]
 8009b04:	9400      	str	r4, [sp, #0]
 8009b06:	9501      	str	r5, [sp, #4]
 8009b08:	000a      	movs	r2, r1
 8009b0a:	2180      	movs	r1, #128	@ 0x80
 8009b0c:	f007 ff82 	bl	8011a14 <sniprintf>
 8009b10:	e064      	b.n	8009bdc <cmd_math_operation+0x31c>
    }
    else if (strcmp(operation, "div") == 0) {
 8009b12:	4a3f      	ldr	r2, [pc, #252]	@ (8009c10 <cmd_math_operation+0x350>)
 8009b14:	239c      	movs	r3, #156	@ 0x9c
 8009b16:	2408      	movs	r4, #8
 8009b18:	191b      	adds	r3, r3, r4
 8009b1a:	19db      	adds	r3, r3, r7
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	0011      	movs	r1, r2
 8009b20:	0018      	movs	r0, r3
 8009b22:	f7f6 faef 	bl	8000104 <strcmp>
 8009b26:	1e03      	subs	r3, r0, #0
 8009b28:	d14c      	bne.n	8009bc4 <cmd_math_operation+0x304>
        if (num2 != 0) {
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	268c      	movs	r6, #140	@ 0x8c
 8009b2e:	1933      	adds	r3, r6, r4
 8009b30:	19db      	adds	r3, r3, r7
 8009b32:	6818      	ldr	r0, [r3, #0]
 8009b34:	f7f6 fccc 	bl	80004d0 <__aeabi_fcmpeq>
 8009b38:	1e03      	subs	r3, r0, #0
 8009b3a:	d139      	bne.n	8009bb0 <cmd_math_operation+0x2f0>
            result = num1 / num2;
 8009b3c:	0025      	movs	r5, r4
 8009b3e:	1933      	adds	r3, r6, r4
 8009b40:	19db      	adds	r3, r3, r7
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	2490      	movs	r4, #144	@ 0x90
 8009b46:	1963      	adds	r3, r4, r5
 8009b48:	19db      	adds	r3, r3, r7
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	f7f7 f852 	bl	8000bf4 <__aeabi_fdiv>
 8009b50:	1c03      	adds	r3, r0, #0
 8009b52:	2288      	movs	r2, #136	@ 0x88
 8009b54:	0028      	movs	r0, r5
 8009b56:	1812      	adds	r2, r2, r0
 8009b58:	19d1      	adds	r1, r2, r7
 8009b5a:	600b      	str	r3, [r1, #0]
            snprintf(response, sizeof(response), "%.2f / %.2f = %.2f\r\n", num1, num2, result);
 8009b5c:	1823      	adds	r3, r4, r0
 8009b5e:	19d9      	adds	r1, r3, r7
 8009b60:	6808      	ldr	r0, [r1, #0]
 8009b62:	f7f9 fe3f 	bl	80037e4 <__aeabi_f2d>
 8009b66:	0004      	movs	r4, r0
 8009b68:	000d      	movs	r5, r1
 8009b6a:	2008      	movs	r0, #8
 8009b6c:	1833      	adds	r3, r6, r0
 8009b6e:	19d9      	adds	r1, r3, r7
 8009b70:	6808      	ldr	r0, [r1, #0]
 8009b72:	f7f9 fe37 	bl	80037e4 <__aeabi_f2d>
 8009b76:	6038      	str	r0, [r7, #0]
 8009b78:	6079      	str	r1, [r7, #4]
 8009b7a:	2388      	movs	r3, #136	@ 0x88
 8009b7c:	2008      	movs	r0, #8
 8009b7e:	181b      	adds	r3, r3, r0
 8009b80:	19db      	adds	r3, r3, r7
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	f7f9 fe2e 	bl	80037e4 <__aeabi_f2d>
 8009b88:	0002      	movs	r2, r0
 8009b8a:	000b      	movs	r3, r1
 8009b8c:	4921      	ldr	r1, [pc, #132]	@ (8009c14 <cmd_math_operation+0x354>)
 8009b8e:	2608      	movs	r6, #8
 8009b90:	2008      	movs	r0, #8
 8009b92:	1830      	adds	r0, r6, r0
 8009b94:	19c0      	adds	r0, r0, r7
 8009b96:	9204      	str	r2, [sp, #16]
 8009b98:	9305      	str	r3, [sp, #20]
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	9202      	str	r2, [sp, #8]
 8009ba0:	9303      	str	r3, [sp, #12]
 8009ba2:	9400      	str	r4, [sp, #0]
 8009ba4:	9501      	str	r5, [sp, #4]
 8009ba6:	000a      	movs	r2, r1
 8009ba8:	2180      	movs	r1, #128	@ 0x80
 8009baa:	f007 ff33 	bl	8011a14 <sniprintf>
 8009bae:	e015      	b.n	8009bdc <cmd_math_operation+0x31c>
        } else {
            snprintf(response, sizeof(response), "Error: Division by zero\r\n");
 8009bb0:	4a19      	ldr	r2, [pc, #100]	@ (8009c18 <cmd_math_operation+0x358>)
 8009bb2:	2308      	movs	r3, #8
 8009bb4:	2108      	movs	r1, #8
 8009bb6:	185b      	adds	r3, r3, r1
 8009bb8:	19db      	adds	r3, r3, r7
 8009bba:	2180      	movs	r1, #128	@ 0x80
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	f007 ff29 	bl	8011a14 <sniprintf>
 8009bc2:	e00b      	b.n	8009bdc <cmd_math_operation+0x31c>
        }
    }
    else {
        snprintf(response, sizeof(response), "Unknown operation: %s\r\n", operation);
 8009bc4:	239c      	movs	r3, #156	@ 0x9c
 8009bc6:	2008      	movs	r0, #8
 8009bc8:	181b      	adds	r3, r3, r0
 8009bca:	19db      	adds	r3, r3, r7
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a13      	ldr	r2, [pc, #76]	@ (8009c1c <cmd_math_operation+0x35c>)
 8009bd0:	2108      	movs	r1, #8
 8009bd2:	1809      	adds	r1, r1, r0
 8009bd4:	19c8      	adds	r0, r1, r7
 8009bd6:	2180      	movs	r1, #128	@ 0x80
 8009bd8:	f007 ff1c 	bl	8011a14 <sniprintf>
    }
    
    command_interface_send_response(response);
 8009bdc:	2308      	movs	r3, #8
 8009bde:	2208      	movs	r2, #8
 8009be0:	189b      	adds	r3, r3, r2
 8009be2:	19db      	adds	r3, r3, r7
 8009be4:	0018      	movs	r0, r3
 8009be6:	f7ff fb2d 	bl	8009244 <command_interface_send_response>
}
 8009bea:	46bd      	mov	sp, r7
 8009bec:	b02b      	add	sp, #172	@ 0xac
 8009bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bf0:	0801657c 	.word	0x0801657c
 8009bf4:	08016580 	.word	0x08016580
 8009bf8:	080165a4 	.word	0x080165a4
 8009bfc:	080165a8 	.word	0x080165a8
 8009c00:	080165c0 	.word	0x080165c0
 8009c04:	080165c4 	.word	0x080165c4
 8009c08:	080165dc 	.word	0x080165dc
 8009c0c:	080165e0 	.word	0x080165e0
 8009c10:	080165f8 	.word	0x080165f8
 8009c14:	080165fc 	.word	0x080165fc
 8009c18:	08016614 	.word	0x08016614
 8009c1c:	08016630 	.word	0x08016630

08009c20 <command_interface_show_help_usart4>:

// Show help menu for USART4
void command_interface_show_help_usart4(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
    command_interface_send_response_usart4("\r\n=== Available Commands (USART4) ===\r\n");
 8009c24:	4b39      	ldr	r3, [pc, #228]	@ (8009d0c <command_interface_show_help_usart4+0xec>)
 8009c26:	0018      	movs	r0, r3
 8009c28:	f7ff fb22 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("Sensor Commands:\r\n");
 8009c2c:	4b38      	ldr	r3, [pc, #224]	@ (8009d10 <command_interface_show_help_usart4+0xf0>)
 8009c2e:	0018      	movs	r0, r3
 8009c30:	f7ff fb1e 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  read temperature (rt) - Read temperature from BME680\r\n");
 8009c34:	4b37      	ldr	r3, [pc, #220]	@ (8009d14 <command_interface_show_help_usart4+0xf4>)
 8009c36:	0018      	movs	r0, r3
 8009c38:	f7ff fb1a 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  read pressure (rp)    - Read pressure from BME680\r\n");
 8009c3c:	4b36      	ldr	r3, [pc, #216]	@ (8009d18 <command_interface_show_help_usart4+0xf8>)
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f7ff fb16 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  read humidity (rh)    - Read humidity from BME680\r\n");
 8009c44:	4b35      	ldr	r3, [pc, #212]	@ (8009d1c <command_interface_show_help_usart4+0xfc>)
 8009c46:	0018      	movs	r0, r3
 8009c48:	f7ff fb12 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  test sensor (ts)      - Test BME680 sensor\r\n");
 8009c4c:	4b34      	ldr	r3, [pc, #208]	@ (8009d20 <command_interface_show_help_usart4+0x100>)
 8009c4e:	0018      	movs	r0, r3
 8009c50:	f7ff fb0e 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  raw registers (rr)    - Read raw BME680 registers\r\n");
 8009c54:	4b33      	ldr	r3, [pc, #204]	@ (8009d24 <command_interface_show_help_usart4+0x104>)
 8009c56:	0018      	movs	r0, r3
 8009c58:	f7ff fb0a 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  raw adc (ra)          - Read raw BME680 ADC values\r\n");
 8009c5c:	4b32      	ldr	r3, [pc, #200]	@ (8009d28 <command_interface_show_help_usart4+0x108>)
 8009c5e:	0018      	movs	r0, r3
 8009c60:	f7ff fb06 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  calib data (cd)       - Check BME680 calibration data\r\n");
 8009c64:	4b31      	ldr	r3, [pc, #196]	@ (8009d2c <command_interface_show_help_usart4+0x10c>)
 8009c66:	0018      	movs	r0, r3
 8009c68:	f7ff fb02 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  bme diagnostic (bd)   - Run comprehensive BME680 diagnostic\r\n");
 8009c6c:	4b30      	ldr	r3, [pc, #192]	@ (8009d30 <command_interface_show_help_usart4+0x110>)
 8009c6e:	0018      	movs	r0, r3
 8009c70:	f7ff fafe 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  scan i2c (si)         - Scan I2C bus for devices\r\n");
 8009c74:	4b2f      	ldr	r3, [pc, #188]	@ (8009d34 <command_interface_show_help_usart4+0x114>)
 8009c76:	0018      	movs	r0, r3
 8009c78:	f7ff fafa 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora broadcast (lb)   - Broadcast sensor data via SX1262 LoRa\r\n");
 8009c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8009d38 <command_interface_show_help_usart4+0x118>)
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7ff faf6 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora config (lc)      - Show SX1262 LoRa configuration\r\n");
 8009c84:	4b2d      	ldr	r3, [pc, #180]	@ (8009d3c <command_interface_show_help_usart4+0x11c>)
 8009c86:	0018      	movs	r0, r3
 8009c88:	f7ff faf2 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora test (lt)        - Test SX1262 LoRa transmission\r\n");
 8009c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8009d40 <command_interface_show_help_usart4+0x120>)
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f7ff faee 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora scan (ls)        - Scan for LoRa signals (5s)\r\n");
 8009c94:	4b2b      	ldr	r3, [pc, #172]	@ (8009d44 <command_interface_show_help_usart4+0x124>)
 8009c96:	0018      	movs	r0, r3
 8009c98:	f7ff faea 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora monitor (lm)     - Start continuous monitoring\r\n");
 8009c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8009d48 <command_interface_show_help_usart4+0x128>)
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	f7ff fae6 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora stop (lst)       - Stop LoRa monitoring\r\n");
 8009ca4:	4b29      	ldr	r3, [pc, #164]	@ (8009d4c <command_interface_show_help_usart4+0x12c>)
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	f7ff fae2 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  lora rssi (lr)        - Get current RSSI\r\n");
 8009cac:	4b28      	ldr	r3, [pc, #160]	@ (8009d50 <command_interface_show_help_usart4+0x130>)
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f7ff fade 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  test spi (tspi)       - Test SPI communication\r\n");
 8009cb4:	4b27      	ldr	r3, [pc, #156]	@ (8009d54 <command_interface_show_help_usart4+0x134>)
 8009cb6:	0018      	movs	r0, r3
 8009cb8:	f7ff fada 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  test lora (tl)        - Test LoRa module initialization\r\n");
 8009cbc:	4b26      	ldr	r3, [pc, #152]	@ (8009d58 <command_interface_show_help_usart4+0x138>)
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	f7ff fad6 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("\r\nMath Operations:\r\n");
 8009cc4:	4b25      	ldr	r3, [pc, #148]	@ (8009d5c <command_interface_show_help_usart4+0x13c>)
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	f7ff fad2 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  sum <num1> <num2>     - Add two numbers\r\n");
 8009ccc:	4b24      	ldr	r3, [pc, #144]	@ (8009d60 <command_interface_show_help_usart4+0x140>)
 8009cce:	0018      	movs	r0, r3
 8009cd0:	f7ff face 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  sub <num1> <num2>     - Subtract num2 from num1\r\n");
 8009cd4:	4b23      	ldr	r3, [pc, #140]	@ (8009d64 <command_interface_show_help_usart4+0x144>)
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	f7ff faca 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  mul <num1> <num2>     - Multiply two numbers\r\n");
 8009cdc:	4b22      	ldr	r3, [pc, #136]	@ (8009d68 <command_interface_show_help_usart4+0x148>)
 8009cde:	0018      	movs	r0, r3
 8009ce0:	f7ff fac6 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  div <num1> <num2>     - Divide num1 by num2\r\n");
 8009ce4:	4b21      	ldr	r3, [pc, #132]	@ (8009d6c <command_interface_show_help_usart4+0x14c>)
 8009ce6:	0018      	movs	r0, r3
 8009ce8:	f7ff fac2 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("\r\nSystem:\r\n");
 8009cec:	4b20      	ldr	r3, [pc, #128]	@ (8009d70 <command_interface_show_help_usart4+0x150>)
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f7ff fabe 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  help                  - Show this help menu\r\n");
 8009cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d74 <command_interface_show_help_usart4+0x154>)
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	f7ff faba 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("========================\r\n");
 8009cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8009d78 <command_interface_show_help_usart4+0x158>)
 8009cfe:	0018      	movs	r0, r3
 8009d00:	f7ff fab6 	bl	8009270 <command_interface_send_response_usart4>
}
 8009d04:	46c0      	nop			@ (mov r8, r8)
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	46c0      	nop			@ (mov r8, r8)
 8009d0c:	08016648 	.word	0x08016648
 8009d10:	08015cf0 	.word	0x08015cf0
 8009d14:	08015d04 	.word	0x08015d04
 8009d18:	08015d40 	.word	0x08015d40
 8009d1c:	08015d78 	.word	0x08015d78
 8009d20:	08015db0 	.word	0x08015db0
 8009d24:	08015de0 	.word	0x08015de0
 8009d28:	08015e18 	.word	0x08015e18
 8009d2c:	08015e50 	.word	0x08015e50
 8009d30:	08015e8c 	.word	0x08015e8c
 8009d34:	08015ecc 	.word	0x08015ecc
 8009d38:	08015f18 	.word	0x08015f18
 8009d3c:	08015f5c 	.word	0x08015f5c
 8009d40:	08015f98 	.word	0x08015f98
 8009d44:	08015fd4 	.word	0x08015fd4
 8009d48:	0801600c 	.word	0x0801600c
 8009d4c:	08016044 	.word	0x08016044
 8009d50:	08016078 	.word	0x08016078
 8009d54:	080160a8 	.word	0x080160a8
 8009d58:	080160dc 	.word	0x080160dc
 8009d5c:	08016118 	.word	0x08016118
 8009d60:	08016130 	.word	0x08016130
 8009d64:	0801615c 	.word	0x0801615c
 8009d68:	08016190 	.word	0x08016190
 8009d6c:	080161c4 	.word	0x080161c4
 8009d70:	080161f4 	.word	0x080161f4
 8009d74:	08016200 	.word	0x08016200
 8009d78:	08016230 	.word	0x08016230

08009d7c <command_interface_handle_command_usart4>:

// Handle incoming commands for USART4
void command_interface_handle_command_usart4(char* command)
{
 8009d7c:	b590      	push	{r4, r7, lr}
 8009d7e:	b0c3      	sub	sp, #268	@ 0x10c
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
    char response[256];
    
    // Check if system is started
    if (!system_started_usart4) {
 8009d84:	4bba      	ldr	r3, [pc, #744]	@ (800a070 <command_interface_handle_command_usart4+0x2f4>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d118      	bne.n	8009dbe <command_interface_handle_command_usart4+0x42>
        if (strcmp(command, "start") == 0) {
 8009d8c:	4ab9      	ldr	r2, [pc, #740]	@ (800a074 <command_interface_handle_command_usart4+0x2f8>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	0011      	movs	r1, r2
 8009d92:	0018      	movs	r0, r3
 8009d94:	f7f6 f9b6 	bl	8000104 <strcmp>
 8009d98:	1e03      	subs	r3, r0, #0
 8009d9a:	d10b      	bne.n	8009db4 <command_interface_handle_command_usart4+0x38>
            system_started_usart4 = 1;
 8009d9c:	4bb4      	ldr	r3, [pc, #720]	@ (800a070 <command_interface_handle_command_usart4+0x2f4>)
 8009d9e:	2201      	movs	r2, #1
 8009da0:	701a      	strb	r2, [r3, #0]
            command_interface_send_response_usart4("System started! Type 'help' for available commands.\r\n");
 8009da2:	4bb5      	ldr	r3, [pc, #724]	@ (800a078 <command_interface_handle_command_usart4+0x2fc>)
 8009da4:	0018      	movs	r0, r3
 8009da6:	f7ff fa63 	bl	8009270 <command_interface_send_response_usart4>
            command_interface_send_response_usart4("> ");
 8009daa:	4bb4      	ldr	r3, [pc, #720]	@ (800a07c <command_interface_handle_command_usart4+0x300>)
 8009dac:	0018      	movs	r0, r3
 8009dae:	f7ff fa5f 	bl	8009270 <command_interface_send_response_usart4>
            return;
 8009db2:	e1fc      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
        } else {
            command_interface_send_response_usart4("Please type 'start' to begin.\r\n");
 8009db4:	4bb2      	ldr	r3, [pc, #712]	@ (800a080 <command_interface_handle_command_usart4+0x304>)
 8009db6:	0018      	movs	r0, r3
 8009db8:	f7ff fa5a 	bl	8009270 <command_interface_send_response_usart4>
            return;
 8009dbc:	e1f7      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
        }
    }
    
    // Parse commands (full and abbreviated versions)
    if (strcmp(command, "read temperature") == 0 || strcmp(command, "rt") == 0) {
 8009dbe:	4ab1      	ldr	r2, [pc, #708]	@ (800a084 <command_interface_handle_command_usart4+0x308>)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	0011      	movs	r1, r2
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	f7f6 f99d 	bl	8000104 <strcmp>
 8009dca:	1e03      	subs	r3, r0, #0
 8009dcc:	d007      	beq.n	8009dde <command_interface_handle_command_usart4+0x62>
 8009dce:	4aae      	ldr	r2, [pc, #696]	@ (800a088 <command_interface_handle_command_usart4+0x30c>)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	0011      	movs	r1, r2
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	f7f6 f995 	bl	8000104 <strcmp>
 8009dda:	1e03      	subs	r3, r0, #0
 8009ddc:	d102      	bne.n	8009de4 <command_interface_handle_command_usart4+0x68>
        cmd_read_temperature_usart4();
 8009dde:	f000 f9f5 	bl	800a1cc <cmd_read_temperature_usart4>
 8009de2:	e1e4      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "read pressure") == 0 || strcmp(command, "rp") == 0) {
 8009de4:	4aa9      	ldr	r2, [pc, #676]	@ (800a08c <command_interface_handle_command_usart4+0x310>)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	0011      	movs	r1, r2
 8009dea:	0018      	movs	r0, r3
 8009dec:	f7f6 f98a 	bl	8000104 <strcmp>
 8009df0:	1e03      	subs	r3, r0, #0
 8009df2:	d007      	beq.n	8009e04 <command_interface_handle_command_usart4+0x88>
 8009df4:	4aa6      	ldr	r2, [pc, #664]	@ (800a090 <command_interface_handle_command_usart4+0x314>)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	0011      	movs	r1, r2
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	f7f6 f982 	bl	8000104 <strcmp>
 8009e00:	1e03      	subs	r3, r0, #0
 8009e02:	d102      	bne.n	8009e0a <command_interface_handle_command_usart4+0x8e>
        cmd_read_pressure_usart4();
 8009e04:	f000 fa1e 	bl	800a244 <cmd_read_pressure_usart4>
 8009e08:	e1d1      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "read humidity") == 0 || strcmp(command, "rh") == 0) {
 8009e0a:	4aa2      	ldr	r2, [pc, #648]	@ (800a094 <command_interface_handle_command_usart4+0x318>)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	0011      	movs	r1, r2
 8009e10:	0018      	movs	r0, r3
 8009e12:	f7f6 f977 	bl	8000104 <strcmp>
 8009e16:	1e03      	subs	r3, r0, #0
 8009e18:	d007      	beq.n	8009e2a <command_interface_handle_command_usart4+0xae>
 8009e1a:	4a9f      	ldr	r2, [pc, #636]	@ (800a098 <command_interface_handle_command_usart4+0x31c>)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	0011      	movs	r1, r2
 8009e20:	0018      	movs	r0, r3
 8009e22:	f7f6 f96f 	bl	8000104 <strcmp>
 8009e26:	1e03      	subs	r3, r0, #0
 8009e28:	d102      	bne.n	8009e30 <command_interface_handle_command_usart4+0xb4>
        cmd_read_humidity_usart4();
 8009e2a:	f000 fa47 	bl	800a2bc <cmd_read_humidity_usart4>
 8009e2e:	e1be      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "test sensor") == 0 || strcmp(command, "ts") == 0) {
 8009e30:	4a9a      	ldr	r2, [pc, #616]	@ (800a09c <command_interface_handle_command_usart4+0x320>)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	0011      	movs	r1, r2
 8009e36:	0018      	movs	r0, r3
 8009e38:	f7f6 f964 	bl	8000104 <strcmp>
 8009e3c:	1e03      	subs	r3, r0, #0
 8009e3e:	d007      	beq.n	8009e50 <command_interface_handle_command_usart4+0xd4>
 8009e40:	4a97      	ldr	r2, [pc, #604]	@ (800a0a0 <command_interface_handle_command_usart4+0x324>)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	0011      	movs	r1, r2
 8009e46:	0018      	movs	r0, r3
 8009e48:	f7f6 f95c 	bl	8000104 <strcmp>
 8009e4c:	1e03      	subs	r3, r0, #0
 8009e4e:	d102      	bne.n	8009e56 <command_interface_handle_command_usart4+0xda>
        cmd_test_sensor_usart4();
 8009e50:	f000 fa70 	bl	800a334 <cmd_test_sensor_usart4>
 8009e54:	e1ab      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "raw registers") == 0 || strcmp(command, "rr") == 0) {
 8009e56:	4a93      	ldr	r2, [pc, #588]	@ (800a0a4 <command_interface_handle_command_usart4+0x328>)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	0011      	movs	r1, r2
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	f7f6 f951 	bl	8000104 <strcmp>
 8009e62:	1e03      	subs	r3, r0, #0
 8009e64:	d007      	beq.n	8009e76 <command_interface_handle_command_usart4+0xfa>
 8009e66:	4a90      	ldr	r2, [pc, #576]	@ (800a0a8 <command_interface_handle_command_usart4+0x32c>)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	0011      	movs	r1, r2
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f7f6 f949 	bl	8000104 <strcmp>
 8009e72:	1e03      	subs	r3, r0, #0
 8009e74:	d102      	bne.n	8009e7c <command_interface_handle_command_usart4+0x100>
        bme680_read_raw_registers();
 8009e76:	f7fb f8a3 	bl	8004fc0 <bme680_read_raw_registers>
 8009e7a:	e198      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "raw adc") == 0 || strcmp(command, "ra") == 0) {
 8009e7c:	4a8b      	ldr	r2, [pc, #556]	@ (800a0ac <command_interface_handle_command_usart4+0x330>)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	0011      	movs	r1, r2
 8009e82:	0018      	movs	r0, r3
 8009e84:	f7f6 f93e 	bl	8000104 <strcmp>
 8009e88:	1e03      	subs	r3, r0, #0
 8009e8a:	d007      	beq.n	8009e9c <command_interface_handle_command_usart4+0x120>
 8009e8c:	4a88      	ldr	r2, [pc, #544]	@ (800a0b0 <command_interface_handle_command_usart4+0x334>)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	0011      	movs	r1, r2
 8009e92:	0018      	movs	r0, r3
 8009e94:	f7f6 f936 	bl	8000104 <strcmp>
 8009e98:	1e03      	subs	r3, r0, #0
 8009e9a:	d102      	bne.n	8009ea2 <command_interface_handle_command_usart4+0x126>
        bme680_read_raw_adc_values();
 8009e9c:	f7fa ffd8 	bl	8004e50 <bme680_read_raw_adc_values>
 8009ea0:	e185      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "calib data") == 0 || strcmp(command, "cd") == 0) {
 8009ea2:	4a84      	ldr	r2, [pc, #528]	@ (800a0b4 <command_interface_handle_command_usart4+0x338>)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	0011      	movs	r1, r2
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f7f6 f92b 	bl	8000104 <strcmp>
 8009eae:	1e03      	subs	r3, r0, #0
 8009eb0:	d007      	beq.n	8009ec2 <command_interface_handle_command_usart4+0x146>
 8009eb2:	4a81      	ldr	r2, [pc, #516]	@ (800a0b8 <command_interface_handle_command_usart4+0x33c>)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	0011      	movs	r1, r2
 8009eb8:	0018      	movs	r0, r3
 8009eba:	f7f6 f923 	bl	8000104 <strcmp>
 8009ebe:	1e03      	subs	r3, r0, #0
 8009ec0:	d102      	bne.n	8009ec8 <command_interface_handle_command_usart4+0x14c>
        bme680_check_calibration_data();
 8009ec2:	f7fa ff25 	bl	8004d10 <bme680_check_calibration_data>
 8009ec6:	e172      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "bme diagnostic") == 0 || strcmp(command, "bd") == 0) {
 8009ec8:	4a7c      	ldr	r2, [pc, #496]	@ (800a0bc <command_interface_handle_command_usart4+0x340>)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	0011      	movs	r1, r2
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f7f6 f918 	bl	8000104 <strcmp>
 8009ed4:	1e03      	subs	r3, r0, #0
 8009ed6:	d007      	beq.n	8009ee8 <command_interface_handle_command_usart4+0x16c>
 8009ed8:	4a79      	ldr	r2, [pc, #484]	@ (800a0c0 <command_interface_handle_command_usart4+0x344>)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	0011      	movs	r1, r2
 8009ede:	0018      	movs	r0, r3
 8009ee0:	f7f6 f910 	bl	8000104 <strcmp>
 8009ee4:	1e03      	subs	r3, r0, #0
 8009ee6:	d102      	bne.n	8009eee <command_interface_handle_command_usart4+0x172>
        bme680_comprehensive_diagnostic();
 8009ee8:	f7fb fc56 	bl	8005798 <bme680_comprehensive_diagnostic>
 8009eec:	e15f      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "scan i2c") == 0 || strcmp(command, "si") == 0) {
 8009eee:	4a75      	ldr	r2, [pc, #468]	@ (800a0c4 <command_interface_handle_command_usart4+0x348>)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	0011      	movs	r1, r2
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f7f6 f905 	bl	8000104 <strcmp>
 8009efa:	1e03      	subs	r3, r0, #0
 8009efc:	d007      	beq.n	8009f0e <command_interface_handle_command_usart4+0x192>
 8009efe:	4a72      	ldr	r2, [pc, #456]	@ (800a0c8 <command_interface_handle_command_usart4+0x34c>)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	0011      	movs	r1, r2
 8009f04:	0018      	movs	r0, r3
 8009f06:	f7f6 f8fd 	bl	8000104 <strcmp>
 8009f0a:	1e03      	subs	r3, r0, #0
 8009f0c:	d102      	bne.n	8009f14 <command_interface_handle_command_usart4+0x198>
        i2c_scan_bus();
 8009f0e:	f7f9 fd81 	bl	8003a14 <i2c_scan_bus>
 8009f12:	e14c      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "lora broadcast") == 0 || strcmp(command, "lb") == 0) {
 8009f14:	4a6d      	ldr	r2, [pc, #436]	@ (800a0cc <command_interface_handle_command_usart4+0x350>)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	0011      	movs	r1, r2
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	f7f6 f8f2 	bl	8000104 <strcmp>
 8009f20:	1e03      	subs	r3, r0, #0
 8009f22:	d007      	beq.n	8009f34 <command_interface_handle_command_usart4+0x1b8>
 8009f24:	4a6a      	ldr	r2, [pc, #424]	@ (800a0d0 <command_interface_handle_command_usart4+0x354>)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	0011      	movs	r1, r2
 8009f2a:	0018      	movs	r0, r3
 8009f2c:	f7f6 f8ea 	bl	8000104 <strcmp>
 8009f30:	1e03      	subs	r3, r0, #0
 8009f32:	d102      	bne.n	8009f3a <command_interface_handle_command_usart4+0x1be>
        cmd_lora_broadcast_usart4();
 8009f34:	f000 fc8a 	bl	800a84c <cmd_lora_broadcast_usart4>
 8009f38:	e139      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "lora config") == 0 || strcmp(command, "lc") == 0) {
 8009f3a:	4a66      	ldr	r2, [pc, #408]	@ (800a0d4 <command_interface_handle_command_usart4+0x358>)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	0011      	movs	r1, r2
 8009f40:	0018      	movs	r0, r3
 8009f42:	f7f6 f8df 	bl	8000104 <strcmp>
 8009f46:	1e03      	subs	r3, r0, #0
 8009f48:	d007      	beq.n	8009f5a <command_interface_handle_command_usart4+0x1de>
 8009f4a:	4a63      	ldr	r2, [pc, #396]	@ (800a0d8 <command_interface_handle_command_usart4+0x35c>)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	0011      	movs	r1, r2
 8009f50:	0018      	movs	r0, r3
 8009f52:	f7f6 f8d7 	bl	8000104 <strcmp>
 8009f56:	1e03      	subs	r3, r0, #0
 8009f58:	d102      	bne.n	8009f60 <command_interface_handle_command_usart4+0x1e4>
        lora_print_config();
 8009f5a:	f001 faab 	bl	800b4b4 <sx1262_print_config>
 8009f5e:	e126      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "lora test") == 0 || strcmp(command, "lt") == 0) {
 8009f60:	4a5e      	ldr	r2, [pc, #376]	@ (800a0dc <command_interface_handle_command_usart4+0x360>)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	0011      	movs	r1, r2
 8009f66:	0018      	movs	r0, r3
 8009f68:	f7f6 f8cc 	bl	8000104 <strcmp>
 8009f6c:	1e03      	subs	r3, r0, #0
 8009f6e:	d007      	beq.n	8009f80 <command_interface_handle_command_usart4+0x204>
 8009f70:	4a5b      	ldr	r2, [pc, #364]	@ (800a0e0 <command_interface_handle_command_usart4+0x364>)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	0011      	movs	r1, r2
 8009f76:	0018      	movs	r0, r3
 8009f78:	f7f6 f8c4 	bl	8000104 <strcmp>
 8009f7c:	1e03      	subs	r3, r0, #0
 8009f7e:	d102      	bne.n	8009f86 <command_interface_handle_command_usart4+0x20a>
        lora_test_transmission();
 8009f80:	f001 fb12 	bl	800b5a8 <sx1262_test_transmission>
 8009f84:	e113      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "lora scan") == 0 || strcmp(command, "ls") == 0) {
 8009f86:	4a57      	ldr	r2, [pc, #348]	@ (800a0e4 <command_interface_handle_command_usart4+0x368>)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	0011      	movs	r1, r2
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f7f6 f8b9 	bl	8000104 <strcmp>
 8009f92:	1e03      	subs	r3, r0, #0
 8009f94:	d007      	beq.n	8009fa6 <command_interface_handle_command_usart4+0x22a>
 8009f96:	4a54      	ldr	r2, [pc, #336]	@ (800a0e8 <command_interface_handle_command_usart4+0x36c>)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	0011      	movs	r1, r2
 8009f9c:	0018      	movs	r0, r3
 8009f9e:	f7f6 f8b1 	bl	8000104 <strcmp>
 8009fa2:	1e03      	subs	r3, r0, #0
 8009fa4:	d104      	bne.n	8009fb0 <command_interface_handle_command_usart4+0x234>
        lora_scan_signals(5000); // 5 second scan
 8009fa6:	4b51      	ldr	r3, [pc, #324]	@ (800a0ec <command_interface_handle_command_usart4+0x370>)
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f001 fb2b 	bl	800b604 <lora_scan_signals>
 8009fae:	e0fe      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "lora monitor") == 0 || strcmp(command, "lm") == 0) {
 8009fb0:	4a4f      	ldr	r2, [pc, #316]	@ (800a0f0 <command_interface_handle_command_usart4+0x374>)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	0011      	movs	r1, r2
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f7f6 f8a4 	bl	8000104 <strcmp>
 8009fbc:	1e03      	subs	r3, r0, #0
 8009fbe:	d007      	beq.n	8009fd0 <command_interface_handle_command_usart4+0x254>
 8009fc0:	4a4c      	ldr	r2, [pc, #304]	@ (800a0f4 <command_interface_handle_command_usart4+0x378>)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	0011      	movs	r1, r2
 8009fc6:	0018      	movs	r0, r3
 8009fc8:	f7f6 f89c 	bl	8000104 <strcmp>
 8009fcc:	1e03      	subs	r3, r0, #0
 8009fce:	d102      	bne.n	8009fd6 <command_interface_handle_command_usart4+0x25a>
        lora_start_monitoring();
 8009fd0:	f001 fb28 	bl	800b624 <lora_start_monitoring>
 8009fd4:	e0eb      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "lora stop") == 0 || strcmp(command, "lst") == 0) {
 8009fd6:	4a48      	ldr	r2, [pc, #288]	@ (800a0f8 <command_interface_handle_command_usart4+0x37c>)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	0011      	movs	r1, r2
 8009fdc:	0018      	movs	r0, r3
 8009fde:	f7f6 f891 	bl	8000104 <strcmp>
 8009fe2:	1e03      	subs	r3, r0, #0
 8009fe4:	d007      	beq.n	8009ff6 <command_interface_handle_command_usart4+0x27a>
 8009fe6:	4a45      	ldr	r2, [pc, #276]	@ (800a0fc <command_interface_handle_command_usart4+0x380>)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	0011      	movs	r1, r2
 8009fec:	0018      	movs	r0, r3
 8009fee:	f7f6 f889 	bl	8000104 <strcmp>
 8009ff2:	1e03      	subs	r3, r0, #0
 8009ff4:	d102      	bne.n	8009ffc <command_interface_handle_command_usart4+0x280>
        lora_stop_monitoring();
 8009ff6:	f001 fb23 	bl	800b640 <lora_stop_monitoring>
 8009ffa:	e0d8      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "lora rssi") == 0 || strcmp(command, "lr") == 0) {
 8009ffc:	4a40      	ldr	r2, [pc, #256]	@ (800a100 <command_interface_handle_command_usart4+0x384>)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	0011      	movs	r1, r2
 800a002:	0018      	movs	r0, r3
 800a004:	f7f6 f87e 	bl	8000104 <strcmp>
 800a008:	1e03      	subs	r3, r0, #0
 800a00a:	d007      	beq.n	800a01c <command_interface_handle_command_usart4+0x2a0>
 800a00c:	4a3d      	ldr	r2, [pc, #244]	@ (800a104 <command_interface_handle_command_usart4+0x388>)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	0011      	movs	r1, r2
 800a012:	0018      	movs	r0, r3
 800a014:	f7f6 f876 	bl	8000104 <strcmp>
 800a018:	1e03      	subs	r3, r0, #0
 800a01a:	d102      	bne.n	800a022 <command_interface_handle_command_usart4+0x2a6>
        lora_get_rssi();
 800a01c:	f001 fb1e 	bl	800b65c <lora_get_rssi>
 800a020:	e0c5      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "test spi") == 0 || strcmp(command, "tspi") == 0) {
 800a022:	4a39      	ldr	r2, [pc, #228]	@ (800a108 <command_interface_handle_command_usart4+0x38c>)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	0011      	movs	r1, r2
 800a028:	0018      	movs	r0, r3
 800a02a:	f7f6 f86b 	bl	8000104 <strcmp>
 800a02e:	1e03      	subs	r3, r0, #0
 800a030:	d007      	beq.n	800a042 <command_interface_handle_command_usart4+0x2c6>
 800a032:	4a36      	ldr	r2, [pc, #216]	@ (800a10c <command_interface_handle_command_usart4+0x390>)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	0011      	movs	r1, r2
 800a038:	0018      	movs	r0, r3
 800a03a:	f7f6 f863 	bl	8000104 <strcmp>
 800a03e:	1e03      	subs	r3, r0, #0
 800a040:	d102      	bne.n	800a048 <command_interface_handle_command_usart4+0x2cc>
        cmd_test_spi_usart4();
 800a042:	f000 fca1 	bl	800a988 <cmd_test_spi_usart4>
 800a046:	e0b2      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "test lora") == 0 || strcmp(command, "tl") == 0) {
 800a048:	4a31      	ldr	r2, [pc, #196]	@ (800a110 <command_interface_handle_command_usart4+0x394>)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	0011      	movs	r1, r2
 800a04e:	0018      	movs	r0, r3
 800a050:	f7f6 f858 	bl	8000104 <strcmp>
 800a054:	1e03      	subs	r3, r0, #0
 800a056:	d007      	beq.n	800a068 <command_interface_handle_command_usart4+0x2ec>
 800a058:	4a2e      	ldr	r2, [pc, #184]	@ (800a114 <command_interface_handle_command_usart4+0x398>)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	0011      	movs	r1, r2
 800a05e:	0018      	movs	r0, r3
 800a060:	f7f6 f850 	bl	8000104 <strcmp>
 800a064:	1e03      	subs	r3, r0, #0
 800a066:	d157      	bne.n	800a118 <command_interface_handle_command_usart4+0x39c>
        cmd_test_lora_init_usart4();
 800a068:	f000 fd06 	bl	800aa78 <cmd_test_lora_init_usart4>
 800a06c:	e09f      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
 800a06e:	46c0      	nop			@ (mov r8, r8)
 800a070:	200002df 	.word	0x200002df
 800a074:	0801624c 	.word	0x0801624c
 800a078:	08016254 	.word	0x08016254
 800a07c:	08015ccc 	.word	0x08015ccc
 800a080:	0801628c 	.word	0x0801628c
 800a084:	080162ac 	.word	0x080162ac
 800a088:	080162c0 	.word	0x080162c0
 800a08c:	080162c4 	.word	0x080162c4
 800a090:	080162d4 	.word	0x080162d4
 800a094:	080162d8 	.word	0x080162d8
 800a098:	080162e8 	.word	0x080162e8
 800a09c:	080162ec 	.word	0x080162ec
 800a0a0:	080162f8 	.word	0x080162f8
 800a0a4:	080162fc 	.word	0x080162fc
 800a0a8:	0801630c 	.word	0x0801630c
 800a0ac:	08016310 	.word	0x08016310
 800a0b0:	08016318 	.word	0x08016318
 800a0b4:	0801631c 	.word	0x0801631c
 800a0b8:	08016328 	.word	0x08016328
 800a0bc:	0801632c 	.word	0x0801632c
 800a0c0:	0801633c 	.word	0x0801633c
 800a0c4:	08016340 	.word	0x08016340
 800a0c8:	0801634c 	.word	0x0801634c
 800a0cc:	08016350 	.word	0x08016350
 800a0d0:	08016360 	.word	0x08016360
 800a0d4:	08016364 	.word	0x08016364
 800a0d8:	08016370 	.word	0x08016370
 800a0dc:	08016374 	.word	0x08016374
 800a0e0:	08016380 	.word	0x08016380
 800a0e4:	08016384 	.word	0x08016384
 800a0e8:	08016390 	.word	0x08016390
 800a0ec:	00001388 	.word	0x00001388
 800a0f0:	08016394 	.word	0x08016394
 800a0f4:	080163a4 	.word	0x080163a4
 800a0f8:	080163a8 	.word	0x080163a8
 800a0fc:	080163b4 	.word	0x080163b4
 800a100:	080163b8 	.word	0x080163b8
 800a104:	080163c4 	.word	0x080163c4
 800a108:	080163c8 	.word	0x080163c8
 800a10c:	080163d4 	.word	0x080163d4
 800a110:	080163dc 	.word	0x080163dc
 800a114:	080163e8 	.word	0x080163e8
    }
    else if (strncmp(command, "sum ", 4) == 0) {
 800a118:	4926      	ldr	r1, [pc, #152]	@ (800a1b4 <command_interface_handle_command_usart4+0x438>)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2204      	movs	r2, #4
 800a11e:	0018      	movs	r0, r3
 800a120:	f007 fd02 	bl	8011b28 <strncmp>
 800a124:	1e03      	subs	r3, r0, #0
 800a126:	d104      	bne.n	800a132 <command_interface_handle_command_usart4+0x3b6>
        cmd_math_operation_usart4(command);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	0018      	movs	r0, r3
 800a12c:	f000 f962 	bl	800a3f4 <cmd_math_operation_usart4>
 800a130:	e03d      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strncmp(command, "sub ", 4) == 0) {
 800a132:	4921      	ldr	r1, [pc, #132]	@ (800a1b8 <command_interface_handle_command_usart4+0x43c>)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2204      	movs	r2, #4
 800a138:	0018      	movs	r0, r3
 800a13a:	f007 fcf5 	bl	8011b28 <strncmp>
 800a13e:	1e03      	subs	r3, r0, #0
 800a140:	d104      	bne.n	800a14c <command_interface_handle_command_usart4+0x3d0>
        cmd_math_operation_usart4(command);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	0018      	movs	r0, r3
 800a146:	f000 f955 	bl	800a3f4 <cmd_math_operation_usart4>
 800a14a:	e030      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strncmp(command, "mul ", 4) == 0) {
 800a14c:	491b      	ldr	r1, [pc, #108]	@ (800a1bc <command_interface_handle_command_usart4+0x440>)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2204      	movs	r2, #4
 800a152:	0018      	movs	r0, r3
 800a154:	f007 fce8 	bl	8011b28 <strncmp>
 800a158:	1e03      	subs	r3, r0, #0
 800a15a:	d104      	bne.n	800a166 <command_interface_handle_command_usart4+0x3ea>
        cmd_math_operation_usart4(command);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	0018      	movs	r0, r3
 800a160:	f000 f948 	bl	800a3f4 <cmd_math_operation_usart4>
 800a164:	e023      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strncmp(command, "div ", 4) == 0) {
 800a166:	4916      	ldr	r1, [pc, #88]	@ (800a1c0 <command_interface_handle_command_usart4+0x444>)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2204      	movs	r2, #4
 800a16c:	0018      	movs	r0, r3
 800a16e:	f007 fcdb 	bl	8011b28 <strncmp>
 800a172:	1e03      	subs	r3, r0, #0
 800a174:	d104      	bne.n	800a180 <command_interface_handle_command_usart4+0x404>
        cmd_math_operation_usart4(command);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	0018      	movs	r0, r3
 800a17a:	f000 f93b 	bl	800a3f4 <cmd_math_operation_usart4>
 800a17e:	e016      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else if (strcmp(command, "help") == 0) {
 800a180:	4a10      	ldr	r2, [pc, #64]	@ (800a1c4 <command_interface_handle_command_usart4+0x448>)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	0011      	movs	r1, r2
 800a186:	0018      	movs	r0, r3
 800a188:	f7f5 ffbc 	bl	8000104 <strcmp>
 800a18c:	1e03      	subs	r3, r0, #0
 800a18e:	d102      	bne.n	800a196 <command_interface_handle_command_usart4+0x41a>
        command_interface_show_help_usart4();
 800a190:	f7ff fd46 	bl	8009c20 <command_interface_show_help_usart4>
 800a194:	e00b      	b.n	800a1ae <command_interface_handle_command_usart4+0x432>
    }
    else {
        snprintf(response, sizeof(response), "Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a0b      	ldr	r2, [pc, #44]	@ (800a1c8 <command_interface_handle_command_usart4+0x44c>)
 800a19a:	2180      	movs	r1, #128	@ 0x80
 800a19c:	0049      	lsls	r1, r1, #1
 800a19e:	2408      	movs	r4, #8
 800a1a0:	1938      	adds	r0, r7, r4
 800a1a2:	f007 fc37 	bl	8011a14 <sniprintf>
        command_interface_send_response_usart4(response);
 800a1a6:	193b      	adds	r3, r7, r4
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f7ff f861 	bl	8009270 <command_interface_send_response_usart4>
    }
}
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	b043      	add	sp, #268	@ 0x10c
 800a1b2:	bd90      	pop	{r4, r7, pc}
 800a1b4:	080163ec 	.word	0x080163ec
 800a1b8:	080163f4 	.word	0x080163f4
 800a1bc:	080163fc 	.word	0x080163fc
 800a1c0:	08016404 	.word	0x08016404
 800a1c4:	0801640c 	.word	0x0801640c
 800a1c8:	08016414 	.word	0x08016414

0800a1cc <cmd_read_temperature_usart4>:

// USART4 Command handlers

// Command handler for reading temperature (USART4)
void cmd_read_temperature_usart4(void)
{
 800a1cc:	b590      	push	{r4, r7, lr}
 800a1ce:	b0a9      	sub	sp, #164	@ 0xa4
 800a1d0:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800a1d2:	f7f9 fd5b 	bl	8003c8c <bme680_check_sensor_presence>
 800a1d6:	1e03      	subs	r3, r0, #0
 800a1d8:	d00a      	beq.n	800a1f0 <cmd_read_temperature_usart4+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 800a1da:	4a17      	ldr	r2, [pc, #92]	@ (800a238 <cmd_read_temperature_usart4+0x6c>)
 800a1dc:	003b      	movs	r3, r7
 800a1de:	2180      	movs	r1, #128	@ 0x80
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	f007 fc17 	bl	8011a14 <sniprintf>
        command_interface_send_response_usart4(response);
 800a1e6:	003b      	movs	r3, r7
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f7ff f841 	bl	8009270 <command_interface_send_response_usart4>
 800a1ee:	e020      	b.n	800a232 <cmd_read_temperature_usart4+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 800a1f0:	2480      	movs	r4, #128	@ 0x80
 800a1f2:	193b      	adds	r3, r7, r4
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f7f9 ffaf 	bl	8004158 <bme680_read_sensor_data>
 800a1fa:	1e03      	subs	r3, r0, #0
 800a1fc:	d10f      	bne.n	800a21e <cmd_read_temperature_usart4+0x52>
        snprintf(response, sizeof(response), "Temperature: %.2f°C\r\n", sensor_data.temperature);
 800a1fe:	193b      	adds	r3, r7, r4
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	1c18      	adds	r0, r3, #0
 800a204:	f7f9 faee 	bl	80037e4 <__aeabi_f2d>
 800a208:	0002      	movs	r2, r0
 800a20a:	000b      	movs	r3, r1
 800a20c:	490b      	ldr	r1, [pc, #44]	@ (800a23c <cmd_read_temperature_usart4+0x70>)
 800a20e:	0038      	movs	r0, r7
 800a210:	9200      	str	r2, [sp, #0]
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	000a      	movs	r2, r1
 800a216:	2180      	movs	r1, #128	@ 0x80
 800a218:	f007 fbfc 	bl	8011a14 <sniprintf>
 800a21c:	e005      	b.n	800a22a <cmd_read_temperature_usart4+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading temperature from BME680\r\n");
 800a21e:	4a08      	ldr	r2, [pc, #32]	@ (800a240 <cmd_read_temperature_usart4+0x74>)
 800a220:	003b      	movs	r3, r7
 800a222:	2180      	movs	r1, #128	@ 0x80
 800a224:	0018      	movs	r0, r3
 800a226:	f007 fbf5 	bl	8011a14 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 800a22a:	003b      	movs	r3, r7
 800a22c:	0018      	movs	r0, r3
 800a22e:	f7ff f81f 	bl	8009270 <command_interface_send_response_usart4>
}
 800a232:	46bd      	mov	sp, r7
 800a234:	b027      	add	sp, #156	@ 0x9c
 800a236:	bd90      	pop	{r4, r7, pc}
 800a238:	08016450 	.word	0x08016450
 800a23c:	080164a0 	.word	0x080164a0
 800a240:	080164dc 	.word	0x080164dc

0800a244 <cmd_read_pressure_usart4>:

// Command handler for reading pressure (USART4)
void cmd_read_pressure_usart4(void)
{
 800a244:	b590      	push	{r4, r7, lr}
 800a246:	b0a9      	sub	sp, #164	@ 0xa4
 800a248:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800a24a:	f7f9 fd1f 	bl	8003c8c <bme680_check_sensor_presence>
 800a24e:	1e03      	subs	r3, r0, #0
 800a250:	d00a      	beq.n	800a268 <cmd_read_pressure_usart4+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 800a252:	4a17      	ldr	r2, [pc, #92]	@ (800a2b0 <cmd_read_pressure_usart4+0x6c>)
 800a254:	003b      	movs	r3, r7
 800a256:	2180      	movs	r1, #128	@ 0x80
 800a258:	0018      	movs	r0, r3
 800a25a:	f007 fbdb 	bl	8011a14 <sniprintf>
        command_interface_send_response_usart4(response);
 800a25e:	003b      	movs	r3, r7
 800a260:	0018      	movs	r0, r3
 800a262:	f7ff f805 	bl	8009270 <command_interface_send_response_usart4>
 800a266:	e020      	b.n	800a2aa <cmd_read_pressure_usart4+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 800a268:	2480      	movs	r4, #128	@ 0x80
 800a26a:	193b      	adds	r3, r7, r4
 800a26c:	0018      	movs	r0, r3
 800a26e:	f7f9 ff73 	bl	8004158 <bme680_read_sensor_data>
 800a272:	1e03      	subs	r3, r0, #0
 800a274:	d10f      	bne.n	800a296 <cmd_read_pressure_usart4+0x52>
        snprintf(response, sizeof(response), "Pressure: %.2f Pa\r\n", sensor_data.pressure);
 800a276:	193b      	adds	r3, r7, r4
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	1c18      	adds	r0, r3, #0
 800a27c:	f7f9 fab2 	bl	80037e4 <__aeabi_f2d>
 800a280:	0002      	movs	r2, r0
 800a282:	000b      	movs	r3, r1
 800a284:	490b      	ldr	r1, [pc, #44]	@ (800a2b4 <cmd_read_pressure_usart4+0x70>)
 800a286:	0038      	movs	r0, r7
 800a288:	9200      	str	r2, [sp, #0]
 800a28a:	9301      	str	r3, [sp, #4]
 800a28c:	000a      	movs	r2, r1
 800a28e:	2180      	movs	r1, #128	@ 0x80
 800a290:	f007 fbc0 	bl	8011a14 <sniprintf>
 800a294:	e005      	b.n	800a2a2 <cmd_read_pressure_usart4+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading pressure from BME680\r\n");
 800a296:	4a08      	ldr	r2, [pc, #32]	@ (800a2b8 <cmd_read_pressure_usart4+0x74>)
 800a298:	003b      	movs	r3, r7
 800a29a:	2180      	movs	r1, #128	@ 0x80
 800a29c:	0018      	movs	r0, r3
 800a29e:	f007 fbb9 	bl	8011a14 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 800a2a2:	003b      	movs	r3, r7
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	f7fe ffe3 	bl	8009270 <command_interface_send_response_usart4>
}
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	b027      	add	sp, #156	@ 0x9c
 800a2ae:	bd90      	pop	{r4, r7, pc}
 800a2b0:	08016450 	.word	0x08016450
 800a2b4:	08016504 	.word	0x08016504
 800a2b8:	08016518 	.word	0x08016518

0800a2bc <cmd_read_humidity_usart4>:

// Command handler for reading humidity (USART4)
void cmd_read_humidity_usart4(void)
{
 800a2bc:	b590      	push	{r4, r7, lr}
 800a2be:	b0a9      	sub	sp, #164	@ 0xa4
 800a2c0:	af02      	add	r7, sp, #8
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800a2c2:	f7f9 fce3 	bl	8003c8c <bme680_check_sensor_presence>
 800a2c6:	1e03      	subs	r3, r0, #0
 800a2c8:	d00a      	beq.n	800a2e0 <cmd_read_humidity_usart4+0x24>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 800a2ca:	4a17      	ldr	r2, [pc, #92]	@ (800a328 <cmd_read_humidity_usart4+0x6c>)
 800a2cc:	003b      	movs	r3, r7
 800a2ce:	2180      	movs	r1, #128	@ 0x80
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f007 fb9f 	bl	8011a14 <sniprintf>
        command_interface_send_response_usart4(response);
 800a2d6:	003b      	movs	r3, r7
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f7fe ffc9 	bl	8009270 <command_interface_send_response_usart4>
 800a2de:	e020      	b.n	800a322 <cmd_read_humidity_usart4+0x66>
        return;
    }
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 800a2e0:	2480      	movs	r4, #128	@ 0x80
 800a2e2:	193b      	adds	r3, r7, r4
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f7f9 ff37 	bl	8004158 <bme680_read_sensor_data>
 800a2ea:	1e03      	subs	r3, r0, #0
 800a2ec:	d10f      	bne.n	800a30e <cmd_read_humidity_usart4+0x52>
        snprintf(response, sizeof(response), "Humidity: %.2f%%\r\n", sensor_data.humidity);
 800a2ee:	193b      	adds	r3, r7, r4
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	1c18      	adds	r0, r3, #0
 800a2f4:	f7f9 fa76 	bl	80037e4 <__aeabi_f2d>
 800a2f8:	0002      	movs	r2, r0
 800a2fa:	000b      	movs	r3, r1
 800a2fc:	490b      	ldr	r1, [pc, #44]	@ (800a32c <cmd_read_humidity_usart4+0x70>)
 800a2fe:	0038      	movs	r0, r7
 800a300:	9200      	str	r2, [sp, #0]
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	000a      	movs	r2, r1
 800a306:	2180      	movs	r1, #128	@ 0x80
 800a308:	f007 fb84 	bl	8011a14 <sniprintf>
 800a30c:	e005      	b.n	800a31a <cmd_read_humidity_usart4+0x5e>
    } else {
        snprintf(response, sizeof(response), "Error reading humidity from BME680\r\n");
 800a30e:	4a08      	ldr	r2, [pc, #32]	@ (800a330 <cmd_read_humidity_usart4+0x74>)
 800a310:	003b      	movs	r3, r7
 800a312:	2180      	movs	r1, #128	@ 0x80
 800a314:	0018      	movs	r0, r3
 800a316:	f007 fb7d 	bl	8011a14 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 800a31a:	003b      	movs	r3, r7
 800a31c:	0018      	movs	r0, r3
 800a31e:	f7fe ffa7 	bl	8009270 <command_interface_send_response_usart4>
}
 800a322:	46bd      	mov	sp, r7
 800a324:	b027      	add	sp, #156	@ 0x9c
 800a326:	bd90      	pop	{r4, r7, pc}
 800a328:	08016450 	.word	0x08016450
 800a32c:	08016540 	.word	0x08016540
 800a330:	08016554 	.word	0x08016554

0800a334 <cmd_test_sensor_usart4>:

// Command handler for testing sensor (USART4)
void cmd_test_sensor_usart4(void)
{
 800a334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a336:	b0cf      	sub	sp, #316	@ 0x13c
 800a338:	af06      	add	r7, sp, #24
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800a33a:	f7f9 fca7 	bl	8003c8c <bme680_check_sensor_presence>
 800a33e:	1e03      	subs	r3, r0, #0
 800a340:	d004      	beq.n	800a34c <cmd_test_sensor_usart4+0x18>
        command_interface_send_response_usart4("Error: BME680 sensor not available\r\n");
 800a342:	4b28      	ldr	r3, [pc, #160]	@ (800a3e4 <cmd_test_sensor_usart4+0xb0>)
 800a344:	0018      	movs	r0, r3
 800a346:	f7fe ff93 	bl	8009270 <command_interface_send_response_usart4>
 800a34a:	e047      	b.n	800a3dc <cmd_test_sensor_usart4+0xa8>
    
    // Create a custom test function for USART4
    struct bme68x_data sensor_data;
    char test_msg[256];
    
    snprintf(test_msg, sizeof(test_msg), "Testing BME680 sensor (USART4)...\r\n");
 800a34c:	4a26      	ldr	r2, [pc, #152]	@ (800a3e8 <cmd_test_sensor_usart4+0xb4>)
 800a34e:	2380      	movs	r3, #128	@ 0x80
 800a350:	0059      	lsls	r1, r3, #1
 800a352:	2408      	movs	r4, #8
 800a354:	193b      	adds	r3, r7, r4
 800a356:	0018      	movs	r0, r3
 800a358:	f007 fb5c 	bl	8011a14 <sniprintf>
    command_interface_send_response_usart4(test_msg);
 800a35c:	193b      	adds	r3, r7, r4
 800a35e:	0018      	movs	r0, r3
 800a360:	f7fe ff86 	bl	8009270 <command_interface_send_response_usart4>
    
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 800a364:	2484      	movs	r4, #132	@ 0x84
 800a366:	0064      	lsls	r4, r4, #1
 800a368:	193b      	adds	r3, r7, r4
 800a36a:	0018      	movs	r0, r3
 800a36c:	f7f9 fef4 	bl	8004158 <bme680_read_sensor_data>
 800a370:	1e03      	subs	r3, r0, #0
 800a372:	d126      	bne.n	800a3c2 <cmd_test_sensor_usart4+0x8e>
        snprintf(test_msg, sizeof(test_msg), 
                 "Test successful!\r\nTemperature: %.2f°C\r\nPressure: %.2f Pa\r\nHumidity: %.2f%%\r\n",
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 800a374:	0026      	movs	r6, r4
 800a376:	193b      	adds	r3, r7, r4
 800a378:	689b      	ldr	r3, [r3, #8]
        snprintf(test_msg, sizeof(test_msg), 
 800a37a:	1c18      	adds	r0, r3, #0
 800a37c:	f7f9 fa32 	bl	80037e4 <__aeabi_f2d>
 800a380:	0004      	movs	r4, r0
 800a382:	000d      	movs	r5, r1
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 800a384:	19bb      	adds	r3, r7, r6
 800a386:	68db      	ldr	r3, [r3, #12]
        snprintf(test_msg, sizeof(test_msg), 
 800a388:	1c18      	adds	r0, r3, #0
 800a38a:	f7f9 fa2b 	bl	80037e4 <__aeabi_f2d>
 800a38e:	6038      	str	r0, [r7, #0]
 800a390:	6079      	str	r1, [r7, #4]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 800a392:	19bb      	adds	r3, r7, r6
 800a394:	691b      	ldr	r3, [r3, #16]
        snprintf(test_msg, sizeof(test_msg), 
 800a396:	1c18      	adds	r0, r3, #0
 800a398:	f7f9 fa24 	bl	80037e4 <__aeabi_f2d>
 800a39c:	0002      	movs	r2, r0
 800a39e:	000b      	movs	r3, r1
 800a3a0:	4e12      	ldr	r6, [pc, #72]	@ (800a3ec <cmd_test_sensor_usart4+0xb8>)
 800a3a2:	2180      	movs	r1, #128	@ 0x80
 800a3a4:	0049      	lsls	r1, r1, #1
 800a3a6:	2008      	movs	r0, #8
 800a3a8:	1838      	adds	r0, r7, r0
 800a3aa:	9204      	str	r2, [sp, #16]
 800a3ac:	9305      	str	r3, [sp, #20]
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	9202      	str	r2, [sp, #8]
 800a3b4:	9303      	str	r3, [sp, #12]
 800a3b6:	9400      	str	r4, [sp, #0]
 800a3b8:	9501      	str	r5, [sp, #4]
 800a3ba:	0032      	movs	r2, r6
 800a3bc:	f007 fb2a 	bl	8011a14 <sniprintf>
 800a3c0:	e007      	b.n	800a3d2 <cmd_test_sensor_usart4+0x9e>
    } else {
        snprintf(test_msg, sizeof(test_msg), "Test failed! Error reading sensor data.\r\n");
 800a3c2:	4a0b      	ldr	r2, [pc, #44]	@ (800a3f0 <cmd_test_sensor_usart4+0xbc>)
 800a3c4:	2380      	movs	r3, #128	@ 0x80
 800a3c6:	0059      	lsls	r1, r3, #1
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	18fb      	adds	r3, r7, r3
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f007 fb21 	bl	8011a14 <sniprintf>
    }
    
    command_interface_send_response_usart4(test_msg);
 800a3d2:	2308      	movs	r3, #8
 800a3d4:	18fb      	adds	r3, r7, r3
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f7fe ff4a 	bl	8009270 <command_interface_send_response_usart4>
}
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	b049      	add	sp, #292	@ 0x124
 800a3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e2:	46c0      	nop			@ (mov r8, r8)
 800a3e4:	08016450 	.word	0x08016450
 800a3e8:	08016670 	.word	0x08016670
 800a3ec:	08016694 	.word	0x08016694
 800a3f0:	080166e4 	.word	0x080166e4

0800a3f4 <cmd_math_operation_usart4>:

// Command handler for mathematical operations (USART4)
void cmd_math_operation_usart4(char* command)
{
 800a3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f6:	b0b1      	sub	sp, #196	@ 0xc4
 800a3f8:	af06      	add	r7, sp, #24
 800a3fa:	60f8      	str	r0, [r7, #12]
    char* operation = strtok(command, " ");
 800a3fc:	4ac9      	ldr	r2, [pc, #804]	@ (800a724 <cmd_math_operation_usart4+0x330>)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	0011      	movs	r1, r2
 800a402:	0018      	movs	r0, r3
 800a404:	f007 fba2 	bl	8011b4c <strtok>
 800a408:	0003      	movs	r3, r0
 800a40a:	229c      	movs	r2, #156	@ 0x9c
 800a40c:	2508      	movs	r5, #8
 800a40e:	1952      	adds	r2, r2, r5
 800a410:	19d2      	adds	r2, r2, r7
 800a412:	6013      	str	r3, [r2, #0]
    char* num1_str = strtok(NULL, " ");
 800a414:	4bc3      	ldr	r3, [pc, #780]	@ (800a724 <cmd_math_operation_usart4+0x330>)
 800a416:	0019      	movs	r1, r3
 800a418:	2000      	movs	r0, #0
 800a41a:	f007 fb97 	bl	8011b4c <strtok>
 800a41e:	0003      	movs	r3, r0
 800a420:	2498      	movs	r4, #152	@ 0x98
 800a422:	1962      	adds	r2, r4, r5
 800a424:	19d2      	adds	r2, r2, r7
 800a426:	6013      	str	r3, [r2, #0]
    char* num2_str = strtok(NULL, " ");
 800a428:	4bbe      	ldr	r3, [pc, #760]	@ (800a724 <cmd_math_operation_usart4+0x330>)
 800a42a:	0019      	movs	r1, r3
 800a42c:	2000      	movs	r0, #0
 800a42e:	f007 fb8d 	bl	8011b4c <strtok>
 800a432:	0003      	movs	r3, r0
 800a434:	2294      	movs	r2, #148	@ 0x94
 800a436:	1951      	adds	r1, r2, r5
 800a438:	19c9      	adds	r1, r1, r7
 800a43a:	600b      	str	r3, [r1, #0]
    char response[128];
    
    if (num1_str == NULL || num2_str == NULL) {
 800a43c:	0029      	movs	r1, r5
 800a43e:	1963      	adds	r3, r4, r5
 800a440:	19db      	adds	r3, r3, r7
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d004      	beq.n	800a452 <cmd_math_operation_usart4+0x5e>
 800a448:	1853      	adds	r3, r2, r1
 800a44a:	19db      	adds	r3, r3, r7
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d104      	bne.n	800a45c <cmd_math_operation_usart4+0x68>
        command_interface_send_response_usart4("Usage: <operation> <num1> <num2>\r\n");
 800a452:	4bb5      	ldr	r3, [pc, #724]	@ (800a728 <cmd_math_operation_usart4+0x334>)
 800a454:	0018      	movs	r0, r3
 800a456:	f7fe ff0b 	bl	8009270 <command_interface_send_response_usart4>
 800a45a:	e160      	b.n	800a71e <cmd_math_operation_usart4+0x32a>
        return;
    }
    
    float num1 = atof(num1_str);
 800a45c:	2398      	movs	r3, #152	@ 0x98
 800a45e:	2508      	movs	r5, #8
 800a460:	195b      	adds	r3, r3, r5
 800a462:	19db      	adds	r3, r3, r7
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	0018      	movs	r0, r3
 800a468:	f005 ff86 	bl	8010378 <atof>
 800a46c:	0002      	movs	r2, r0
 800a46e:	000b      	movs	r3, r1
 800a470:	0010      	movs	r0, r2
 800a472:	0019      	movs	r1, r3
 800a474:	f7f9 f9fe 	bl	8003874 <__aeabi_d2f>
 800a478:	1c03      	adds	r3, r0, #0
 800a47a:	2490      	movs	r4, #144	@ 0x90
 800a47c:	1962      	adds	r2, r4, r5
 800a47e:	19d2      	adds	r2, r2, r7
 800a480:	6013      	str	r3, [r2, #0]
    float num2 = atof(num2_str);
 800a482:	2394      	movs	r3, #148	@ 0x94
 800a484:	195b      	adds	r3, r3, r5
 800a486:	19db      	adds	r3, r3, r7
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	0018      	movs	r0, r3
 800a48c:	f005 ff74 	bl	8010378 <atof>
 800a490:	0002      	movs	r2, r0
 800a492:	000b      	movs	r3, r1
 800a494:	0010      	movs	r0, r2
 800a496:	0019      	movs	r1, r3
 800a498:	f7f9 f9ec 	bl	8003874 <__aeabi_d2f>
 800a49c:	1c03      	adds	r3, r0, #0
 800a49e:	268c      	movs	r6, #140	@ 0x8c
 800a4a0:	1972      	adds	r2, r6, r5
 800a4a2:	19d2      	adds	r2, r2, r7
 800a4a4:	6013      	str	r3, [r2, #0]
    float result;
    
    if (strcmp(operation, "sum") == 0) {
 800a4a6:	4aa1      	ldr	r2, [pc, #644]	@ (800a72c <cmd_math_operation_usart4+0x338>)
 800a4a8:	239c      	movs	r3, #156	@ 0x9c
 800a4aa:	195b      	adds	r3, r3, r5
 800a4ac:	19db      	adds	r3, r3, r7
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	0011      	movs	r1, r2
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f7f5 fe26 	bl	8000104 <strcmp>
 800a4b8:	1e03      	subs	r3, r0, #0
 800a4ba:	d136      	bne.n	800a52a <cmd_math_operation_usart4+0x136>
        result = num1 + num2;
 800a4bc:	1973      	adds	r3, r6, r5
 800a4be:	19db      	adds	r3, r3, r7
 800a4c0:	6819      	ldr	r1, [r3, #0]
 800a4c2:	1963      	adds	r3, r4, r5
 800a4c4:	19db      	adds	r3, r3, r7
 800a4c6:	6818      	ldr	r0, [r3, #0]
 800a4c8:	f7f6 f9a2 	bl	8000810 <__aeabi_fadd>
 800a4cc:	1c03      	adds	r3, r0, #0
 800a4ce:	2288      	movs	r2, #136	@ 0x88
 800a4d0:	1952      	adds	r2, r2, r5
 800a4d2:	19d1      	adds	r1, r2, r7
 800a4d4:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f + %.2f = %.2f\r\n", num1, num2, result);
 800a4d6:	1963      	adds	r3, r4, r5
 800a4d8:	19d9      	adds	r1, r3, r7
 800a4da:	6808      	ldr	r0, [r1, #0]
 800a4dc:	f7f9 f982 	bl	80037e4 <__aeabi_f2d>
 800a4e0:	0004      	movs	r4, r0
 800a4e2:	000d      	movs	r5, r1
 800a4e4:	2208      	movs	r2, #8
 800a4e6:	18b3      	adds	r3, r6, r2
 800a4e8:	19d9      	adds	r1, r3, r7
 800a4ea:	6808      	ldr	r0, [r1, #0]
 800a4ec:	f7f9 f97a 	bl	80037e4 <__aeabi_f2d>
 800a4f0:	6038      	str	r0, [r7, #0]
 800a4f2:	6079      	str	r1, [r7, #4]
 800a4f4:	2388      	movs	r3, #136	@ 0x88
 800a4f6:	2208      	movs	r2, #8
 800a4f8:	189b      	adds	r3, r3, r2
 800a4fa:	19db      	adds	r3, r3, r7
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	f7f9 f971 	bl	80037e4 <__aeabi_f2d>
 800a502:	0002      	movs	r2, r0
 800a504:	000b      	movs	r3, r1
 800a506:	498a      	ldr	r1, [pc, #552]	@ (800a730 <cmd_math_operation_usart4+0x33c>)
 800a508:	2608      	movs	r6, #8
 800a50a:	2008      	movs	r0, #8
 800a50c:	1830      	adds	r0, r6, r0
 800a50e:	19c0      	adds	r0, r0, r7
 800a510:	9204      	str	r2, [sp, #16]
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	9202      	str	r2, [sp, #8]
 800a51a:	9303      	str	r3, [sp, #12]
 800a51c:	9400      	str	r4, [sp, #0]
 800a51e:	9501      	str	r5, [sp, #4]
 800a520:	000a      	movs	r2, r1
 800a522:	2180      	movs	r1, #128	@ 0x80
 800a524:	f007 fa76 	bl	8011a14 <sniprintf>
 800a528:	e0f2      	b.n	800a710 <cmd_math_operation_usart4+0x31c>
    }
    else if (strcmp(operation, "sub") == 0) {
 800a52a:	4a82      	ldr	r2, [pc, #520]	@ (800a734 <cmd_math_operation_usart4+0x340>)
 800a52c:	239c      	movs	r3, #156	@ 0x9c
 800a52e:	2408      	movs	r4, #8
 800a530:	191b      	adds	r3, r3, r4
 800a532:	19db      	adds	r3, r3, r7
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	0011      	movs	r1, r2
 800a538:	0018      	movs	r0, r3
 800a53a:	f7f5 fde3 	bl	8000104 <strcmp>
 800a53e:	1e03      	subs	r3, r0, #0
 800a540:	d13a      	bne.n	800a5b8 <cmd_math_operation_usart4+0x1c4>
        result = num1 - num2;
 800a542:	268c      	movs	r6, #140	@ 0x8c
 800a544:	0025      	movs	r5, r4
 800a546:	1973      	adds	r3, r6, r5
 800a548:	19db      	adds	r3, r3, r7
 800a54a:	6819      	ldr	r1, [r3, #0]
 800a54c:	2490      	movs	r4, #144	@ 0x90
 800a54e:	1963      	adds	r3, r4, r5
 800a550:	19db      	adds	r3, r3, r7
 800a552:	6818      	ldr	r0, [r3, #0]
 800a554:	f7f6 fe76 	bl	8001244 <__aeabi_fsub>
 800a558:	1c03      	adds	r3, r0, #0
 800a55a:	2288      	movs	r2, #136	@ 0x88
 800a55c:	0028      	movs	r0, r5
 800a55e:	1812      	adds	r2, r2, r0
 800a560:	19d1      	adds	r1, r2, r7
 800a562:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f - %.2f = %.2f\r\n", num1, num2, result);
 800a564:	1823      	adds	r3, r4, r0
 800a566:	19d9      	adds	r1, r3, r7
 800a568:	6808      	ldr	r0, [r1, #0]
 800a56a:	f7f9 f93b 	bl	80037e4 <__aeabi_f2d>
 800a56e:	0004      	movs	r4, r0
 800a570:	000d      	movs	r5, r1
 800a572:	2008      	movs	r0, #8
 800a574:	1833      	adds	r3, r6, r0
 800a576:	19d9      	adds	r1, r3, r7
 800a578:	6808      	ldr	r0, [r1, #0]
 800a57a:	f7f9 f933 	bl	80037e4 <__aeabi_f2d>
 800a57e:	6038      	str	r0, [r7, #0]
 800a580:	6079      	str	r1, [r7, #4]
 800a582:	2388      	movs	r3, #136	@ 0x88
 800a584:	2008      	movs	r0, #8
 800a586:	181b      	adds	r3, r3, r0
 800a588:	19db      	adds	r3, r3, r7
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	f7f9 f92a 	bl	80037e4 <__aeabi_f2d>
 800a590:	0002      	movs	r2, r0
 800a592:	000b      	movs	r3, r1
 800a594:	4968      	ldr	r1, [pc, #416]	@ (800a738 <cmd_math_operation_usart4+0x344>)
 800a596:	2608      	movs	r6, #8
 800a598:	2008      	movs	r0, #8
 800a59a:	1830      	adds	r0, r6, r0
 800a59c:	19c0      	adds	r0, r0, r7
 800a59e:	9204      	str	r2, [sp, #16]
 800a5a0:	9305      	str	r3, [sp, #20]
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	9202      	str	r2, [sp, #8]
 800a5a8:	9303      	str	r3, [sp, #12]
 800a5aa:	9400      	str	r4, [sp, #0]
 800a5ac:	9501      	str	r5, [sp, #4]
 800a5ae:	000a      	movs	r2, r1
 800a5b0:	2180      	movs	r1, #128	@ 0x80
 800a5b2:	f007 fa2f 	bl	8011a14 <sniprintf>
 800a5b6:	e0ab      	b.n	800a710 <cmd_math_operation_usart4+0x31c>
    }
    else if (strcmp(operation, "mul") == 0) {
 800a5b8:	4a60      	ldr	r2, [pc, #384]	@ (800a73c <cmd_math_operation_usart4+0x348>)
 800a5ba:	239c      	movs	r3, #156	@ 0x9c
 800a5bc:	2408      	movs	r4, #8
 800a5be:	191b      	adds	r3, r3, r4
 800a5c0:	19db      	adds	r3, r3, r7
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	0011      	movs	r1, r2
 800a5c6:	0018      	movs	r0, r3
 800a5c8:	f7f5 fd9c 	bl	8000104 <strcmp>
 800a5cc:	1e03      	subs	r3, r0, #0
 800a5ce:	d13a      	bne.n	800a646 <cmd_math_operation_usart4+0x252>
        result = num1 * num2;
 800a5d0:	268c      	movs	r6, #140	@ 0x8c
 800a5d2:	0025      	movs	r5, r4
 800a5d4:	1973      	adds	r3, r6, r5
 800a5d6:	19db      	adds	r3, r3, r7
 800a5d8:	6819      	ldr	r1, [r3, #0]
 800a5da:	2490      	movs	r4, #144	@ 0x90
 800a5dc:	1963      	adds	r3, r4, r5
 800a5de:	19db      	adds	r3, r3, r7
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	f7f6 fcd5 	bl	8000f90 <__aeabi_fmul>
 800a5e6:	1c03      	adds	r3, r0, #0
 800a5e8:	2288      	movs	r2, #136	@ 0x88
 800a5ea:	0028      	movs	r0, r5
 800a5ec:	1812      	adds	r2, r2, r0
 800a5ee:	19d1      	adds	r1, r2, r7
 800a5f0:	600b      	str	r3, [r1, #0]
        snprintf(response, sizeof(response), "%.2f * %.2f = %.2f\r\n", num1, num2, result);
 800a5f2:	1823      	adds	r3, r4, r0
 800a5f4:	19d9      	adds	r1, r3, r7
 800a5f6:	6808      	ldr	r0, [r1, #0]
 800a5f8:	f7f9 f8f4 	bl	80037e4 <__aeabi_f2d>
 800a5fc:	0004      	movs	r4, r0
 800a5fe:	000d      	movs	r5, r1
 800a600:	2008      	movs	r0, #8
 800a602:	1833      	adds	r3, r6, r0
 800a604:	19d9      	adds	r1, r3, r7
 800a606:	6808      	ldr	r0, [r1, #0]
 800a608:	f7f9 f8ec 	bl	80037e4 <__aeabi_f2d>
 800a60c:	6038      	str	r0, [r7, #0]
 800a60e:	6079      	str	r1, [r7, #4]
 800a610:	2388      	movs	r3, #136	@ 0x88
 800a612:	2008      	movs	r0, #8
 800a614:	181b      	adds	r3, r3, r0
 800a616:	19db      	adds	r3, r3, r7
 800a618:	6818      	ldr	r0, [r3, #0]
 800a61a:	f7f9 f8e3 	bl	80037e4 <__aeabi_f2d>
 800a61e:	0002      	movs	r2, r0
 800a620:	000b      	movs	r3, r1
 800a622:	4947      	ldr	r1, [pc, #284]	@ (800a740 <cmd_math_operation_usart4+0x34c>)
 800a624:	2608      	movs	r6, #8
 800a626:	2008      	movs	r0, #8
 800a628:	1830      	adds	r0, r6, r0
 800a62a:	19c0      	adds	r0, r0, r7
 800a62c:	9204      	str	r2, [sp, #16]
 800a62e:	9305      	str	r3, [sp, #20]
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	9202      	str	r2, [sp, #8]
 800a636:	9303      	str	r3, [sp, #12]
 800a638:	9400      	str	r4, [sp, #0]
 800a63a:	9501      	str	r5, [sp, #4]
 800a63c:	000a      	movs	r2, r1
 800a63e:	2180      	movs	r1, #128	@ 0x80
 800a640:	f007 f9e8 	bl	8011a14 <sniprintf>
 800a644:	e064      	b.n	800a710 <cmd_math_operation_usart4+0x31c>
    }
    else if (strcmp(operation, "div") == 0) {
 800a646:	4a3f      	ldr	r2, [pc, #252]	@ (800a744 <cmd_math_operation_usart4+0x350>)
 800a648:	239c      	movs	r3, #156	@ 0x9c
 800a64a:	2408      	movs	r4, #8
 800a64c:	191b      	adds	r3, r3, r4
 800a64e:	19db      	adds	r3, r3, r7
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	0011      	movs	r1, r2
 800a654:	0018      	movs	r0, r3
 800a656:	f7f5 fd55 	bl	8000104 <strcmp>
 800a65a:	1e03      	subs	r3, r0, #0
 800a65c:	d14c      	bne.n	800a6f8 <cmd_math_operation_usart4+0x304>
        if (num2 != 0) {
 800a65e:	2100      	movs	r1, #0
 800a660:	268c      	movs	r6, #140	@ 0x8c
 800a662:	1933      	adds	r3, r6, r4
 800a664:	19db      	adds	r3, r3, r7
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	f7f5 ff32 	bl	80004d0 <__aeabi_fcmpeq>
 800a66c:	1e03      	subs	r3, r0, #0
 800a66e:	d139      	bne.n	800a6e4 <cmd_math_operation_usart4+0x2f0>
            result = num1 / num2;
 800a670:	0025      	movs	r5, r4
 800a672:	1933      	adds	r3, r6, r4
 800a674:	19db      	adds	r3, r3, r7
 800a676:	6819      	ldr	r1, [r3, #0]
 800a678:	2490      	movs	r4, #144	@ 0x90
 800a67a:	1963      	adds	r3, r4, r5
 800a67c:	19db      	adds	r3, r3, r7
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	f7f6 fab8 	bl	8000bf4 <__aeabi_fdiv>
 800a684:	1c03      	adds	r3, r0, #0
 800a686:	2288      	movs	r2, #136	@ 0x88
 800a688:	0028      	movs	r0, r5
 800a68a:	1812      	adds	r2, r2, r0
 800a68c:	19d1      	adds	r1, r2, r7
 800a68e:	600b      	str	r3, [r1, #0]
            snprintf(response, sizeof(response), "%.2f / %.2f = %.2f\r\n", num1, num2, result);
 800a690:	1823      	adds	r3, r4, r0
 800a692:	19d9      	adds	r1, r3, r7
 800a694:	6808      	ldr	r0, [r1, #0]
 800a696:	f7f9 f8a5 	bl	80037e4 <__aeabi_f2d>
 800a69a:	0004      	movs	r4, r0
 800a69c:	000d      	movs	r5, r1
 800a69e:	2008      	movs	r0, #8
 800a6a0:	1833      	adds	r3, r6, r0
 800a6a2:	19d9      	adds	r1, r3, r7
 800a6a4:	6808      	ldr	r0, [r1, #0]
 800a6a6:	f7f9 f89d 	bl	80037e4 <__aeabi_f2d>
 800a6aa:	6038      	str	r0, [r7, #0]
 800a6ac:	6079      	str	r1, [r7, #4]
 800a6ae:	2388      	movs	r3, #136	@ 0x88
 800a6b0:	2008      	movs	r0, #8
 800a6b2:	181b      	adds	r3, r3, r0
 800a6b4:	19db      	adds	r3, r3, r7
 800a6b6:	6818      	ldr	r0, [r3, #0]
 800a6b8:	f7f9 f894 	bl	80037e4 <__aeabi_f2d>
 800a6bc:	0002      	movs	r2, r0
 800a6be:	000b      	movs	r3, r1
 800a6c0:	4921      	ldr	r1, [pc, #132]	@ (800a748 <cmd_math_operation_usart4+0x354>)
 800a6c2:	2608      	movs	r6, #8
 800a6c4:	2008      	movs	r0, #8
 800a6c6:	1830      	adds	r0, r6, r0
 800a6c8:	19c0      	adds	r0, r0, r7
 800a6ca:	9204      	str	r2, [sp, #16]
 800a6cc:	9305      	str	r3, [sp, #20]
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	9202      	str	r2, [sp, #8]
 800a6d4:	9303      	str	r3, [sp, #12]
 800a6d6:	9400      	str	r4, [sp, #0]
 800a6d8:	9501      	str	r5, [sp, #4]
 800a6da:	000a      	movs	r2, r1
 800a6dc:	2180      	movs	r1, #128	@ 0x80
 800a6de:	f007 f999 	bl	8011a14 <sniprintf>
 800a6e2:	e015      	b.n	800a710 <cmd_math_operation_usart4+0x31c>
        } else {
            snprintf(response, sizeof(response), "Error: Division by zero\r\n");
 800a6e4:	4a19      	ldr	r2, [pc, #100]	@ (800a74c <cmd_math_operation_usart4+0x358>)
 800a6e6:	2308      	movs	r3, #8
 800a6e8:	2108      	movs	r1, #8
 800a6ea:	185b      	adds	r3, r3, r1
 800a6ec:	19db      	adds	r3, r3, r7
 800a6ee:	2180      	movs	r1, #128	@ 0x80
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f007 f98f 	bl	8011a14 <sniprintf>
 800a6f6:	e00b      	b.n	800a710 <cmd_math_operation_usart4+0x31c>
        }
    }
    else {
        snprintf(response, sizeof(response), "Unknown operation: %s\r\n", operation);
 800a6f8:	239c      	movs	r3, #156	@ 0x9c
 800a6fa:	2008      	movs	r0, #8
 800a6fc:	181b      	adds	r3, r3, r0
 800a6fe:	19db      	adds	r3, r3, r7
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a13      	ldr	r2, [pc, #76]	@ (800a750 <cmd_math_operation_usart4+0x35c>)
 800a704:	2108      	movs	r1, #8
 800a706:	1809      	adds	r1, r1, r0
 800a708:	19c8      	adds	r0, r1, r7
 800a70a:	2180      	movs	r1, #128	@ 0x80
 800a70c:	f007 f982 	bl	8011a14 <sniprintf>
    }
    
    command_interface_send_response_usart4(response);
 800a710:	2308      	movs	r3, #8
 800a712:	2208      	movs	r2, #8
 800a714:	189b      	adds	r3, r3, r2
 800a716:	19db      	adds	r3, r3, r7
 800a718:	0018      	movs	r0, r3
 800a71a:	f7fe fda9 	bl	8009270 <command_interface_send_response_usart4>
}
 800a71e:	46bd      	mov	sp, r7
 800a720:	b02b      	add	sp, #172	@ 0xac
 800a722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a724:	0801657c 	.word	0x0801657c
 800a728:	08016580 	.word	0x08016580
 800a72c:	080165a4 	.word	0x080165a4
 800a730:	080165a8 	.word	0x080165a8
 800a734:	080165c0 	.word	0x080165c0
 800a738:	080165c4 	.word	0x080165c4
 800a73c:	080165dc 	.word	0x080165dc
 800a740:	080165e0 	.word	0x080165e0
 800a744:	080165f8 	.word	0x080165f8
 800a748:	080165fc 	.word	0x080165fc
 800a74c:	08016614 	.word	0x08016614
 800a750:	08016630 	.word	0x08016630

0800a754 <cmd_lora_broadcast>:

// Command handler for LoRa broadcast (USART2)
void cmd_lora_broadcast(void)
{
 800a754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a756:	b0af      	sub	sp, #188	@ 0xbc
 800a758:	af06      	add	r7, sp, #24
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800a75a:	f7f9 fa97 	bl	8003c8c <bme680_check_sensor_presence>
 800a75e:	1e03      	subs	r3, r0, #0
 800a760:	d00b      	beq.n	800a77a <cmd_lora_broadcast+0x26>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 800a762:	4a35      	ldr	r2, [pc, #212]	@ (800a838 <cmd_lora_broadcast+0xe4>)
 800a764:	2408      	movs	r4, #8
 800a766:	193b      	adds	r3, r7, r4
 800a768:	2180      	movs	r1, #128	@ 0x80
 800a76a:	0018      	movs	r0, r3
 800a76c:	f007 f952 	bl	8011a14 <sniprintf>
        command_interface_send_response(response);
 800a770:	193b      	adds	r3, r7, r4
 800a772:	0018      	movs	r0, r3
 800a774:	f7fe fd66 	bl	8009244 <command_interface_send_response>
 800a778:	e05a      	b.n	800a830 <cmd_lora_broadcast+0xdc>
        return;
    }
    
    // Read sensor data
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 800a77a:	2680      	movs	r6, #128	@ 0x80
 800a77c:	2408      	movs	r4, #8
 800a77e:	1933      	adds	r3, r6, r4
 800a780:	19db      	adds	r3, r3, r7
 800a782:	0018      	movs	r0, r3
 800a784:	f7f9 fce8 	bl	8004158 <bme680_read_sensor_data>
 800a788:	1e03      	subs	r3, r0, #0
 800a78a:	d146      	bne.n	800a81a <cmd_lora_broadcast+0xc6>
        snprintf(response, sizeof(response), 
                 "Broadcasting sensor data via LoRa...\r\nTemperature: %.2f°C, Pressure: %.2f Pa, Humidity: %.2f%%\r\n",
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 800a78c:	1933      	adds	r3, r6, r4
 800a78e:	19db      	adds	r3, r3, r7
 800a790:	689b      	ldr	r3, [r3, #8]
        snprintf(response, sizeof(response), 
 800a792:	1c18      	adds	r0, r3, #0
 800a794:	f7f9 f826 	bl	80037e4 <__aeabi_f2d>
 800a798:	0004      	movs	r4, r0
 800a79a:	000d      	movs	r5, r1
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 800a79c:	2008      	movs	r0, #8
 800a79e:	1833      	adds	r3, r6, r0
 800a7a0:	19db      	adds	r3, r3, r7
 800a7a2:	68db      	ldr	r3, [r3, #12]
        snprintf(response, sizeof(response), 
 800a7a4:	1c18      	adds	r0, r3, #0
 800a7a6:	f7f9 f81d 	bl	80037e4 <__aeabi_f2d>
 800a7aa:	6038      	str	r0, [r7, #0]
 800a7ac:	6079      	str	r1, [r7, #4]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 800a7ae:	2008      	movs	r0, #8
 800a7b0:	1833      	adds	r3, r6, r0
 800a7b2:	19db      	adds	r3, r3, r7
 800a7b4:	691b      	ldr	r3, [r3, #16]
        snprintf(response, sizeof(response), 
 800a7b6:	1c18      	adds	r0, r3, #0
 800a7b8:	f7f9 f814 	bl	80037e4 <__aeabi_f2d>
 800a7bc:	0002      	movs	r2, r0
 800a7be:	000b      	movs	r3, r1
 800a7c0:	491e      	ldr	r1, [pc, #120]	@ (800a83c <cmd_lora_broadcast+0xe8>)
 800a7c2:	2008      	movs	r0, #8
 800a7c4:	1838      	adds	r0, r7, r0
 800a7c6:	9204      	str	r2, [sp, #16]
 800a7c8:	9305      	str	r3, [sp, #20]
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	9202      	str	r2, [sp, #8]
 800a7d0:	9303      	str	r3, [sp, #12]
 800a7d2:	9400      	str	r4, [sp, #0]
 800a7d4:	9501      	str	r5, [sp, #4]
 800a7d6:	000a      	movs	r2, r1
 800a7d8:	2180      	movs	r1, #128	@ 0x80
 800a7da:	f007 f91b 	bl	8011a14 <sniprintf>
        command_interface_send_response(response);
 800a7de:	2408      	movs	r4, #8
 800a7e0:	193b      	adds	r3, r7, r4
 800a7e2:	0018      	movs	r0, r3
 800a7e4:	f7fe fd2e 	bl	8009244 <command_interface_send_response>
        
        // Send via LoRa
        if (lora_send_sensor_data(sensor_data.temperature, sensor_data.pressure, sensor_data.humidity) == 0) {
 800a7e8:	0022      	movs	r2, r4
 800a7ea:	18b3      	adds	r3, r6, r2
 800a7ec:	19db      	adds	r3, r3, r7
 800a7ee:	6898      	ldr	r0, [r3, #8]
 800a7f0:	18b3      	adds	r3, r6, r2
 800a7f2:	19db      	adds	r3, r3, r7
 800a7f4:	68d9      	ldr	r1, [r3, #12]
 800a7f6:	18b3      	adds	r3, r6, r2
 800a7f8:	19db      	adds	r3, r3, r7
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	1c1a      	adds	r2, r3, #0
 800a7fe:	f000 fd71 	bl	800b2e4 <sx1262_send_sensor_data>
 800a802:	1e03      	subs	r3, r0, #0
 800a804:	d104      	bne.n	800a810 <cmd_lora_broadcast+0xbc>
            command_interface_send_response("✓ LoRa broadcast successful\r\n");
 800a806:	4b0e      	ldr	r3, [pc, #56]	@ (800a840 <cmd_lora_broadcast+0xec>)
 800a808:	0018      	movs	r0, r3
 800a80a:	f7fe fd1b 	bl	8009244 <command_interface_send_response>
 800a80e:	e00f      	b.n	800a830 <cmd_lora_broadcast+0xdc>
        } else {
            command_interface_send_response("✗ LoRa broadcast failed\r\n");
 800a810:	4b0c      	ldr	r3, [pc, #48]	@ (800a844 <cmd_lora_broadcast+0xf0>)
 800a812:	0018      	movs	r0, r3
 800a814:	f7fe fd16 	bl	8009244 <command_interface_send_response>
 800a818:	e00a      	b.n	800a830 <cmd_lora_broadcast+0xdc>
        }
    } else {
        snprintf(response, sizeof(response), "Error reading sensor data for LoRa broadcast\r\n");
 800a81a:	4a0b      	ldr	r2, [pc, #44]	@ (800a848 <cmd_lora_broadcast+0xf4>)
 800a81c:	2408      	movs	r4, #8
 800a81e:	193b      	adds	r3, r7, r4
 800a820:	2180      	movs	r1, #128	@ 0x80
 800a822:	0018      	movs	r0, r3
 800a824:	f007 f8f6 	bl	8011a14 <sniprintf>
        command_interface_send_response(response);
 800a828:	193b      	adds	r3, r7, r4
 800a82a:	0018      	movs	r0, r3
 800a82c:	f7fe fd0a 	bl	8009244 <command_interface_send_response>
    }
}
 800a830:	46bd      	mov	sp, r7
 800a832:	b029      	add	sp, #164	@ 0xa4
 800a834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a836:	46c0      	nop			@ (mov r8, r8)
 800a838:	08016450 	.word	0x08016450
 800a83c:	08016710 	.word	0x08016710
 800a840:	08016774 	.word	0x08016774
 800a844:	08016794 	.word	0x08016794
 800a848:	080167b0 	.word	0x080167b0

0800a84c <cmd_lora_broadcast_usart4>:

// Command handler for LoRa broadcast (USART4)
void cmd_lora_broadcast_usart4(void)
{
 800a84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a84e:	b0af      	sub	sp, #188	@ 0xbc
 800a850:	af06      	add	r7, sp, #24
    struct bme68x_data sensor_data;
    char response[128];
    
    // Check if sensor is available
    if (bme680_check_sensor_presence() != BME68X_OK) {
 800a852:	f7f9 fa1b 	bl	8003c8c <bme680_check_sensor_presence>
 800a856:	1e03      	subs	r3, r0, #0
 800a858:	d00b      	beq.n	800a872 <cmd_lora_broadcast_usart4+0x26>
        snprintf(response, sizeof(response), "Error: BME680 sensor not available\r\n");
 800a85a:	4a35      	ldr	r2, [pc, #212]	@ (800a930 <cmd_lora_broadcast_usart4+0xe4>)
 800a85c:	2408      	movs	r4, #8
 800a85e:	193b      	adds	r3, r7, r4
 800a860:	2180      	movs	r1, #128	@ 0x80
 800a862:	0018      	movs	r0, r3
 800a864:	f007 f8d6 	bl	8011a14 <sniprintf>
        command_interface_send_response_usart4(response);
 800a868:	193b      	adds	r3, r7, r4
 800a86a:	0018      	movs	r0, r3
 800a86c:	f7fe fd00 	bl	8009270 <command_interface_send_response_usart4>
 800a870:	e05a      	b.n	800a928 <cmd_lora_broadcast_usart4+0xdc>
        return;
    }
    
    // Read sensor data
    if (bme680_read_sensor_data(&sensor_data) == BME68X_OK) {
 800a872:	2680      	movs	r6, #128	@ 0x80
 800a874:	2408      	movs	r4, #8
 800a876:	1933      	adds	r3, r6, r4
 800a878:	19db      	adds	r3, r3, r7
 800a87a:	0018      	movs	r0, r3
 800a87c:	f7f9 fc6c 	bl	8004158 <bme680_read_sensor_data>
 800a880:	1e03      	subs	r3, r0, #0
 800a882:	d146      	bne.n	800a912 <cmd_lora_broadcast_usart4+0xc6>
        snprintf(response, sizeof(response), 
                 "Broadcasting sensor data via LoRa...\r\nTemperature: %.2f°C, Pressure: %.2f Pa, Humidity: %.2f%%\r\n",
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 800a884:	1933      	adds	r3, r6, r4
 800a886:	19db      	adds	r3, r3, r7
 800a888:	689b      	ldr	r3, [r3, #8]
        snprintf(response, sizeof(response), 
 800a88a:	1c18      	adds	r0, r3, #0
 800a88c:	f7f8 ffaa 	bl	80037e4 <__aeabi_f2d>
 800a890:	0004      	movs	r4, r0
 800a892:	000d      	movs	r5, r1
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 800a894:	2008      	movs	r0, #8
 800a896:	1833      	adds	r3, r6, r0
 800a898:	19db      	adds	r3, r3, r7
 800a89a:	68db      	ldr	r3, [r3, #12]
        snprintf(response, sizeof(response), 
 800a89c:	1c18      	adds	r0, r3, #0
 800a89e:	f7f8 ffa1 	bl	80037e4 <__aeabi_f2d>
 800a8a2:	6038      	str	r0, [r7, #0]
 800a8a4:	6079      	str	r1, [r7, #4]
                 sensor_data.temperature, sensor_data.pressure, sensor_data.humidity);
 800a8a6:	2008      	movs	r0, #8
 800a8a8:	1833      	adds	r3, r6, r0
 800a8aa:	19db      	adds	r3, r3, r7
 800a8ac:	691b      	ldr	r3, [r3, #16]
        snprintf(response, sizeof(response), 
 800a8ae:	1c18      	adds	r0, r3, #0
 800a8b0:	f7f8 ff98 	bl	80037e4 <__aeabi_f2d>
 800a8b4:	0002      	movs	r2, r0
 800a8b6:	000b      	movs	r3, r1
 800a8b8:	491e      	ldr	r1, [pc, #120]	@ (800a934 <cmd_lora_broadcast_usart4+0xe8>)
 800a8ba:	2008      	movs	r0, #8
 800a8bc:	1838      	adds	r0, r7, r0
 800a8be:	9204      	str	r2, [sp, #16]
 800a8c0:	9305      	str	r3, [sp, #20]
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	9202      	str	r2, [sp, #8]
 800a8c8:	9303      	str	r3, [sp, #12]
 800a8ca:	9400      	str	r4, [sp, #0]
 800a8cc:	9501      	str	r5, [sp, #4]
 800a8ce:	000a      	movs	r2, r1
 800a8d0:	2180      	movs	r1, #128	@ 0x80
 800a8d2:	f007 f89f 	bl	8011a14 <sniprintf>
        command_interface_send_response_usart4(response);
 800a8d6:	2408      	movs	r4, #8
 800a8d8:	193b      	adds	r3, r7, r4
 800a8da:	0018      	movs	r0, r3
 800a8dc:	f7fe fcc8 	bl	8009270 <command_interface_send_response_usart4>
        
        // Send via LoRa
        if (lora_send_sensor_data(sensor_data.temperature, sensor_data.pressure, sensor_data.humidity) == 0) {
 800a8e0:	0022      	movs	r2, r4
 800a8e2:	18b3      	adds	r3, r6, r2
 800a8e4:	19db      	adds	r3, r3, r7
 800a8e6:	6898      	ldr	r0, [r3, #8]
 800a8e8:	18b3      	adds	r3, r6, r2
 800a8ea:	19db      	adds	r3, r3, r7
 800a8ec:	68d9      	ldr	r1, [r3, #12]
 800a8ee:	18b3      	adds	r3, r6, r2
 800a8f0:	19db      	adds	r3, r3, r7
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	1c1a      	adds	r2, r3, #0
 800a8f6:	f000 fcf5 	bl	800b2e4 <sx1262_send_sensor_data>
 800a8fa:	1e03      	subs	r3, r0, #0
 800a8fc:	d104      	bne.n	800a908 <cmd_lora_broadcast_usart4+0xbc>
            command_interface_send_response_usart4("✓ LoRa broadcast successful\r\n");
 800a8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a938 <cmd_lora_broadcast_usart4+0xec>)
 800a900:	0018      	movs	r0, r3
 800a902:	f7fe fcb5 	bl	8009270 <command_interface_send_response_usart4>
 800a906:	e00f      	b.n	800a928 <cmd_lora_broadcast_usart4+0xdc>
        } else {
            command_interface_send_response_usart4("✗ LoRa broadcast failed\r\n");
 800a908:	4b0c      	ldr	r3, [pc, #48]	@ (800a93c <cmd_lora_broadcast_usart4+0xf0>)
 800a90a:	0018      	movs	r0, r3
 800a90c:	f7fe fcb0 	bl	8009270 <command_interface_send_response_usart4>
 800a910:	e00a      	b.n	800a928 <cmd_lora_broadcast_usart4+0xdc>
        }
    } else {
        snprintf(response, sizeof(response), "Error reading sensor data for LoRa broadcast\r\n");
 800a912:	4a0b      	ldr	r2, [pc, #44]	@ (800a940 <cmd_lora_broadcast_usart4+0xf4>)
 800a914:	2408      	movs	r4, #8
 800a916:	193b      	adds	r3, r7, r4
 800a918:	2180      	movs	r1, #128	@ 0x80
 800a91a:	0018      	movs	r0, r3
 800a91c:	f007 f87a 	bl	8011a14 <sniprintf>
        command_interface_send_response_usart4(response);
 800a920:	193b      	adds	r3, r7, r4
 800a922:	0018      	movs	r0, r3
 800a924:	f7fe fca4 	bl	8009270 <command_interface_send_response_usart4>
    }
}
 800a928:	46bd      	mov	sp, r7
 800a92a:	b029      	add	sp, #164	@ 0xa4
 800a92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a92e:	46c0      	nop			@ (mov r8, r8)
 800a930:	08016450 	.word	0x08016450
 800a934:	08016710 	.word	0x08016710
 800a938:	08016774 	.word	0x08016774
 800a93c:	08016794 	.word	0x08016794
 800a940:	080167b0 	.word	0x080167b0

0800a944 <cmd_test_spi>:

// SPI test command handlers

// Test SPI communication (USART2)
void cmd_test_spi(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
    command_interface_send_response("Testing SPI communication with SX1262...\r\n");
 800a948:	4b0b      	ldr	r3, [pc, #44]	@ (800a978 <cmd_test_spi+0x34>)
 800a94a:	0018      	movs	r0, r3
 800a94c:	f7fe fc7a 	bl	8009244 <command_interface_send_response>
    
    if (sx1262_test_spi() == 0) {
 800a950:	f000 f980 	bl	800ac54 <sx1262_test_spi>
 800a954:	1e03      	subs	r3, r0, #0
 800a956:	d104      	bne.n	800a962 <cmd_test_spi+0x1e>
        command_interface_send_response("✓ SPI communication test successful\r\n");
 800a958:	4b08      	ldr	r3, [pc, #32]	@ (800a97c <cmd_test_spi+0x38>)
 800a95a:	0018      	movs	r0, r3
 800a95c:	f7fe fc72 	bl	8009244 <command_interface_send_response>
    } else {
        command_interface_send_response("✗ SPI communication test failed\r\n");
        command_interface_send_response("Check SPI connections and power supply\r\n");
    }
}
 800a960:	e007      	b.n	800a972 <cmd_test_spi+0x2e>
        command_interface_send_response("✗ SPI communication test failed\r\n");
 800a962:	4b07      	ldr	r3, [pc, #28]	@ (800a980 <cmd_test_spi+0x3c>)
 800a964:	0018      	movs	r0, r3
 800a966:	f7fe fc6d 	bl	8009244 <command_interface_send_response>
        command_interface_send_response("Check SPI connections and power supply\r\n");
 800a96a:	4b06      	ldr	r3, [pc, #24]	@ (800a984 <cmd_test_spi+0x40>)
 800a96c:	0018      	movs	r0, r3
 800a96e:	f7fe fc69 	bl	8009244 <command_interface_send_response>
}
 800a972:	46c0      	nop			@ (mov r8, r8)
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	080167e0 	.word	0x080167e0
 800a97c:	0801680c 	.word	0x0801680c
 800a980:	08016834 	.word	0x08016834
 800a984:	08016858 	.word	0x08016858

0800a988 <cmd_test_spi_usart4>:

// Test SPI communication (USART4)
void cmd_test_spi_usart4(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
    command_interface_send_response_usart4("Testing SPI communication with SX1262...\r\n");
 800a98c:	4b0b      	ldr	r3, [pc, #44]	@ (800a9bc <cmd_test_spi_usart4+0x34>)
 800a98e:	0018      	movs	r0, r3
 800a990:	f7fe fc6e 	bl	8009270 <command_interface_send_response_usart4>
    
    if (sx1262_test_spi() == 0) {
 800a994:	f000 f95e 	bl	800ac54 <sx1262_test_spi>
 800a998:	1e03      	subs	r3, r0, #0
 800a99a:	d104      	bne.n	800a9a6 <cmd_test_spi_usart4+0x1e>
        command_interface_send_response_usart4("✓ SPI communication test successful\r\n");
 800a99c:	4b08      	ldr	r3, [pc, #32]	@ (800a9c0 <cmd_test_spi_usart4+0x38>)
 800a99e:	0018      	movs	r0, r3
 800a9a0:	f7fe fc66 	bl	8009270 <command_interface_send_response_usart4>
    } else {
        command_interface_send_response_usart4("✗ SPI communication test failed\r\n");
        command_interface_send_response_usart4("Check SPI connections and power supply\r\n");
    }
}
 800a9a4:	e007      	b.n	800a9b6 <cmd_test_spi_usart4+0x2e>
        command_interface_send_response_usart4("✗ SPI communication test failed\r\n");
 800a9a6:	4b07      	ldr	r3, [pc, #28]	@ (800a9c4 <cmd_test_spi_usart4+0x3c>)
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	f7fe fc61 	bl	8009270 <command_interface_send_response_usart4>
        command_interface_send_response_usart4("Check SPI connections and power supply\r\n");
 800a9ae:	4b06      	ldr	r3, [pc, #24]	@ (800a9c8 <cmd_test_spi_usart4+0x40>)
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	f7fe fc5d 	bl	8009270 <command_interface_send_response_usart4>
}
 800a9b6:	46c0      	nop			@ (mov r8, r8)
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	080167e0 	.word	0x080167e0
 800a9c0:	0801680c 	.word	0x0801680c
 800a9c4:	08016834 	.word	0x08016834
 800a9c8:	08016858 	.word	0x08016858

0800a9cc <cmd_test_lora_init>:

// Test LoRa initialization (USART2)
void cmd_test_lora_init(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
    command_interface_send_response("Testing LoRa module initialization...\r\n");
 800a9d0:	4b1e      	ldr	r3, [pc, #120]	@ (800aa4c <cmd_test_lora_init+0x80>)
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	f7fe fc36 	bl	8009244 <command_interface_send_response>
    
    // Test module detection
    command_interface_send_response("Step 1: Testing module detection...\r\n");
 800a9d8:	4b1d      	ldr	r3, [pc, #116]	@ (800aa50 <cmd_test_lora_init+0x84>)
 800a9da:	0018      	movs	r0, r3
 800a9dc:	f7fe fc32 	bl	8009244 <command_interface_send_response>
    if (sx1262_detect_module() == 0) {
 800a9e0:	f000 f912 	bl	800ac08 <sx1262_detect_module>
 800a9e4:	1e03      	subs	r3, r0, #0
 800a9e6:	d10c      	bne.n	800aa02 <cmd_test_lora_init+0x36>
        command_interface_send_response("✓ Module detected\r\n");
 800a9e8:	4b1a      	ldr	r3, [pc, #104]	@ (800aa54 <cmd_test_lora_init+0x88>)
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	f7fe fc2a 	bl	8009244 <command_interface_send_response>
        command_interface_send_response("✗ Module not detected\r\n");
        return;
    }
    
    // Test reset
    command_interface_send_response("Step 2: Testing module reset...\r\n");
 800a9f0:	4b19      	ldr	r3, [pc, #100]	@ (800aa58 <cmd_test_lora_init+0x8c>)
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f7fe fc26 	bl	8009244 <command_interface_send_response>
    if (sx1262_reset() == 0) {
 800a9f8:	f000 fa7e 	bl	800aef8 <sx1262_reset>
 800a9fc:	1e03      	subs	r3, r0, #0
 800a9fe:	d10a      	bne.n	800aa16 <cmd_test_lora_init+0x4a>
 800aa00:	e004      	b.n	800aa0c <cmd_test_lora_init+0x40>
        command_interface_send_response("✗ Module not detected\r\n");
 800aa02:	4b16      	ldr	r3, [pc, #88]	@ (800aa5c <cmd_test_lora_init+0x90>)
 800aa04:	0018      	movs	r0, r3
 800aa06:	f7fe fc1d 	bl	8009244 <command_interface_send_response>
        return;
 800aa0a:	e01d      	b.n	800aa48 <cmd_test_lora_init+0x7c>
        command_interface_send_response("✓ Module reset successful\r\n");
 800aa0c:	4b14      	ldr	r3, [pc, #80]	@ (800aa60 <cmd_test_lora_init+0x94>)
 800aa0e:	0018      	movs	r0, r3
 800aa10:	f7fe fc18 	bl	8009244 <command_interface_send_response>
 800aa14:	e007      	b.n	800aa26 <cmd_test_lora_init+0x5a>
    } else {
        command_interface_send_response("✗ Module reset failed\r\n");
 800aa16:	4b13      	ldr	r3, [pc, #76]	@ (800aa64 <cmd_test_lora_init+0x98>)
 800aa18:	0018      	movs	r0, r3
 800aa1a:	f7fe fc13 	bl	8009244 <command_interface_send_response>
        command_interface_send_response("Trying alternative initialization...\r\n");
 800aa1e:	4b12      	ldr	r3, [pc, #72]	@ (800aa68 <cmd_test_lora_init+0x9c>)
 800aa20:	0018      	movs	r0, r3
 800aa22:	f7fe fc0f 	bl	8009244 <command_interface_send_response>
    }
    
    // Test full initialization
    command_interface_send_response("Step 3: Testing full initialization...\r\n");
 800aa26:	4b11      	ldr	r3, [pc, #68]	@ (800aa6c <cmd_test_lora_init+0xa0>)
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7fe fc0b 	bl	8009244 <command_interface_send_response>
    if (sx1262_init() == 0) {
 800aa2e:	f000 fbb5 	bl	800b19c <sx1262_init>
 800aa32:	1e03      	subs	r3, r0, #0
 800aa34:	d104      	bne.n	800aa40 <cmd_test_lora_init+0x74>
        command_interface_send_response("✓ LoRa module initialization successful\r\n");
 800aa36:	4b0e      	ldr	r3, [pc, #56]	@ (800aa70 <cmd_test_lora_init+0xa4>)
 800aa38:	0018      	movs	r0, r3
 800aa3a:	f7fe fc03 	bl	8009244 <command_interface_send_response>
 800aa3e:	e003      	b.n	800aa48 <cmd_test_lora_init+0x7c>
    } else {
        command_interface_send_response("✗ LoRa module initialization failed\r\n");
 800aa40:	4b0c      	ldr	r3, [pc, #48]	@ (800aa74 <cmd_test_lora_init+0xa8>)
 800aa42:	0018      	movs	r0, r3
 800aa44:	f7fe fbfe 	bl	8009244 <command_interface_send_response>
    }
}
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	08016884 	.word	0x08016884
 800aa50:	080168ac 	.word	0x080168ac
 800aa54:	080168d4 	.word	0x080168d4
 800aa58:	08016908 	.word	0x08016908
 800aa5c:	080168ec 	.word	0x080168ec
 800aa60:	0801692c 	.word	0x0801692c
 800aa64:	0801694c 	.word	0x0801694c
 800aa68:	08016968 	.word	0x08016968
 800aa6c:	08016990 	.word	0x08016990
 800aa70:	080169bc 	.word	0x080169bc
 800aa74:	080169e8 	.word	0x080169e8

0800aa78 <cmd_test_lora_init_usart4>:

// Test LoRa initialization (USART4)
void cmd_test_lora_init_usart4(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	af00      	add	r7, sp, #0
    command_interface_send_response_usart4("Testing LoRa module initialization...\r\n");
 800aa7c:	4b1e      	ldr	r3, [pc, #120]	@ (800aaf8 <cmd_test_lora_init_usart4+0x80>)
 800aa7e:	0018      	movs	r0, r3
 800aa80:	f7fe fbf6 	bl	8009270 <command_interface_send_response_usart4>
    
    // Test module detection
    command_interface_send_response_usart4("Step 1: Testing module detection...\r\n");
 800aa84:	4b1d      	ldr	r3, [pc, #116]	@ (800aafc <cmd_test_lora_init_usart4+0x84>)
 800aa86:	0018      	movs	r0, r3
 800aa88:	f7fe fbf2 	bl	8009270 <command_interface_send_response_usart4>
    if (sx1262_detect_module() == 0) {
 800aa8c:	f000 f8bc 	bl	800ac08 <sx1262_detect_module>
 800aa90:	1e03      	subs	r3, r0, #0
 800aa92:	d10c      	bne.n	800aaae <cmd_test_lora_init_usart4+0x36>
        command_interface_send_response_usart4("✓ Module detected\r\n");
 800aa94:	4b1a      	ldr	r3, [pc, #104]	@ (800ab00 <cmd_test_lora_init_usart4+0x88>)
 800aa96:	0018      	movs	r0, r3
 800aa98:	f7fe fbea 	bl	8009270 <command_interface_send_response_usart4>
        command_interface_send_response_usart4("✗ Module not detected\r\n");
        return;
    }
    
    // Test reset
    command_interface_send_response_usart4("Step 2: Testing module reset...\r\n");
 800aa9c:	4b19      	ldr	r3, [pc, #100]	@ (800ab04 <cmd_test_lora_init_usart4+0x8c>)
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	f7fe fbe6 	bl	8009270 <command_interface_send_response_usart4>
    if (sx1262_reset() == 0) {
 800aaa4:	f000 fa28 	bl	800aef8 <sx1262_reset>
 800aaa8:	1e03      	subs	r3, r0, #0
 800aaaa:	d10a      	bne.n	800aac2 <cmd_test_lora_init_usart4+0x4a>
 800aaac:	e004      	b.n	800aab8 <cmd_test_lora_init_usart4+0x40>
        command_interface_send_response_usart4("✗ Module not detected\r\n");
 800aaae:	4b16      	ldr	r3, [pc, #88]	@ (800ab08 <cmd_test_lora_init_usart4+0x90>)
 800aab0:	0018      	movs	r0, r3
 800aab2:	f7fe fbdd 	bl	8009270 <command_interface_send_response_usart4>
        return;
 800aab6:	e01d      	b.n	800aaf4 <cmd_test_lora_init_usart4+0x7c>
        command_interface_send_response_usart4("✓ Module reset successful\r\n");
 800aab8:	4b14      	ldr	r3, [pc, #80]	@ (800ab0c <cmd_test_lora_init_usart4+0x94>)
 800aaba:	0018      	movs	r0, r3
 800aabc:	f7fe fbd8 	bl	8009270 <command_interface_send_response_usart4>
 800aac0:	e007      	b.n	800aad2 <cmd_test_lora_init_usart4+0x5a>
    } else {
        command_interface_send_response_usart4("✗ Module reset failed\r\n");
 800aac2:	4b13      	ldr	r3, [pc, #76]	@ (800ab10 <cmd_test_lora_init_usart4+0x98>)
 800aac4:	0018      	movs	r0, r3
 800aac6:	f7fe fbd3 	bl	8009270 <command_interface_send_response_usart4>
        command_interface_send_response_usart4("Trying alternative initialization...\r\n");
 800aaca:	4b12      	ldr	r3, [pc, #72]	@ (800ab14 <cmd_test_lora_init_usart4+0x9c>)
 800aacc:	0018      	movs	r0, r3
 800aace:	f7fe fbcf 	bl	8009270 <command_interface_send_response_usart4>
    }
    
    // Test full initialization
    command_interface_send_response_usart4("Step 3: Testing full initialization...\r\n");
 800aad2:	4b11      	ldr	r3, [pc, #68]	@ (800ab18 <cmd_test_lora_init_usart4+0xa0>)
 800aad4:	0018      	movs	r0, r3
 800aad6:	f7fe fbcb 	bl	8009270 <command_interface_send_response_usart4>
    if (sx1262_init() == 0) {
 800aada:	f000 fb5f 	bl	800b19c <sx1262_init>
 800aade:	1e03      	subs	r3, r0, #0
 800aae0:	d104      	bne.n	800aaec <cmd_test_lora_init_usart4+0x74>
        command_interface_send_response_usart4("✓ LoRa module initialization successful\r\n");
 800aae2:	4b0e      	ldr	r3, [pc, #56]	@ (800ab1c <cmd_test_lora_init_usart4+0xa4>)
 800aae4:	0018      	movs	r0, r3
 800aae6:	f7fe fbc3 	bl	8009270 <command_interface_send_response_usart4>
 800aaea:	e003      	b.n	800aaf4 <cmd_test_lora_init_usart4+0x7c>
    } else {
        command_interface_send_response_usart4("✗ LoRa module initialization failed\r\n");
 800aaec:	4b0c      	ldr	r3, [pc, #48]	@ (800ab20 <cmd_test_lora_init_usart4+0xa8>)
 800aaee:	0018      	movs	r0, r3
 800aaf0:	f7fe fbbe 	bl	8009270 <command_interface_send_response_usart4>
    }
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	08016884 	.word	0x08016884
 800aafc:	080168ac 	.word	0x080168ac
 800ab00:	080168d4 	.word	0x080168d4
 800ab04:	08016908 	.word	0x08016908
 800ab08:	080168ec 	.word	0x080168ec
 800ab0c:	0801692c 	.word	0x0801692c
 800ab10:	0801694c 	.word	0x0801694c
 800ab14:	08016968 	.word	0x08016968
 800ab18:	08016990 	.word	0x08016990
 800ab1c:	080169bc 	.word	0x080169bc
 800ab20:	080169e8 	.word	0x080169e8

0800ab24 <sx1262_debug_print>:
    .busy_port = GPIOC,
    .busy_pin = GPIO_PIN_1
};

// Debug function
static void sx1262_debug_print(const char* message) {
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	0018      	movs	r0, r3
 800ab30:	f7f5 faf2 	bl	8000118 <strlen>
 800ab34:	0003      	movs	r3, r0
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	23fa      	movs	r3, #250	@ 0xfa
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	4809      	ldr	r0, [pc, #36]	@ (800ab64 <sx1262_debug_print+0x40>)
 800ab40:	f004 fc84 	bl	800f44c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), 1000);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	0018      	movs	r0, r3
 800ab48:	f7f5 fae6 	bl	8000118 <strlen>
 800ab4c:	0003      	movs	r3, r0
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	23fa      	movs	r3, #250	@ 0xfa
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4804      	ldr	r0, [pc, #16]	@ (800ab68 <sx1262_debug_print+0x44>)
 800ab58:	f004 fc78 	bl	800f44c <HAL_UART_Transmit>
}
 800ab5c:	46c0      	nop			@ (mov r8, r8)
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	b002      	add	sp, #8
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	2000039c 	.word	0x2000039c
 800ab68:	20000430 	.word	0x20000430

0800ab6c <sx1262_wait_for_busy>:

// Wait for SX1262 BUSY pin to go low
uint8_t sx1262_wait_for_busy(void) {
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08a      	sub	sp, #40	@ 0x28
 800ab70:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 2000; // 2 second timeout (increased)
 800ab72:	f001 fbf9 	bl	800c368 <HAL_GetTick>
 800ab76:	0003      	movs	r3, r0
 800ab78:	22fa      	movs	r2, #250	@ 0xfa
 800ab7a:	00d2      	lsls	r2, r2, #3
 800ab7c:	4694      	mov	ip, r2
 800ab7e:	4463      	add	r3, ip
 800ab80:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t start_time = HAL_GetTick();
 800ab82:	f001 fbf1 	bl	800c368 <HAL_GetTick>
 800ab86:	0003      	movs	r3, r0
 800ab88:	623b      	str	r3, [r7, #32]
    
    // First check if BUSY is already low
    if (HAL_GPIO_ReadPin(sx1262_ctx.busy_port, sx1262_ctx.busy_pin) == GPIO_PIN_RESET) {
 800ab8a:	4b1c      	ldr	r3, [pc, #112]	@ (800abfc <sx1262_wait_for_busy+0x90>)
 800ab8c:	695a      	ldr	r2, [r3, #20]
 800ab8e:	4b1b      	ldr	r3, [pc, #108]	@ (800abfc <sx1262_wait_for_busy+0x90>)
 800ab90:	8b1b      	ldrh	r3, [r3, #24]
 800ab92:	0019      	movs	r1, r3
 800ab94:	0010      	movs	r0, r2
 800ab96:	f001 fe2d 	bl	800c7f4 <HAL_GPIO_ReadPin>
 800ab9a:	1e03      	subs	r3, r0, #0
 800ab9c:	d11e      	bne.n	800abdc <sx1262_wait_for_busy+0x70>
        return 1; // Already ready
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e028      	b.n	800abf4 <sx1262_wait_for_busy+0x88>
    }
    
    // Wait for BUSY to go low
    while (HAL_GPIO_ReadPin(sx1262_ctx.busy_port, sx1262_ctx.busy_pin) == GPIO_PIN_SET) {
        if (HAL_GetTick() > timeout) {
 800aba2:	f001 fbe1 	bl	800c368 <HAL_GetTick>
 800aba6:	0002      	movs	r2, r0
 800aba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abaa:	4293      	cmp	r3, r2
 800abac:	d213      	bcs.n	800abd6 <sx1262_wait_for_busy+0x6a>
            sx1262_debug_print("BUSY timeout after ");
 800abae:	4b14      	ldr	r3, [pc, #80]	@ (800ac00 <sx1262_wait_for_busy+0x94>)
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7ff ffb7 	bl	800ab24 <sx1262_debug_print>
            char timeout_msg[32];
            snprintf(timeout_msg, sizeof(timeout_msg), "%lu ms\r\n", HAL_GetTick() - start_time);
 800abb6:	f001 fbd7 	bl	800c368 <HAL_GetTick>
 800abba:	0002      	movs	r2, r0
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	4a10      	ldr	r2, [pc, #64]	@ (800ac04 <sx1262_wait_for_busy+0x98>)
 800abc2:	0038      	movs	r0, r7
 800abc4:	2120      	movs	r1, #32
 800abc6:	f006 ff25 	bl	8011a14 <sniprintf>
            sx1262_debug_print(timeout_msg);
 800abca:	003b      	movs	r3, r7
 800abcc:	0018      	movs	r0, r3
 800abce:	f7ff ffa9 	bl	800ab24 <sx1262_debug_print>
            return 0; // Timeout
 800abd2:	2300      	movs	r3, #0
 800abd4:	e00e      	b.n	800abf4 <sx1262_wait_for_busy+0x88>
        }
        HAL_Delay(1); // Small delay to prevent tight loop
 800abd6:	2001      	movs	r0, #1
 800abd8:	f001 fbd0 	bl	800c37c <HAL_Delay>
    while (HAL_GPIO_ReadPin(sx1262_ctx.busy_port, sx1262_ctx.busy_pin) == GPIO_PIN_SET) {
 800abdc:	4b07      	ldr	r3, [pc, #28]	@ (800abfc <sx1262_wait_for_busy+0x90>)
 800abde:	695a      	ldr	r2, [r3, #20]
 800abe0:	4b06      	ldr	r3, [pc, #24]	@ (800abfc <sx1262_wait_for_busy+0x90>)
 800abe2:	8b1b      	ldrh	r3, [r3, #24]
 800abe4:	0019      	movs	r1, r3
 800abe6:	0010      	movs	r0, r2
 800abe8:	f001 fe04 	bl	800c7f4 <HAL_GPIO_ReadPin>
 800abec:	0003      	movs	r3, r0
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d0d7      	beq.n	800aba2 <sx1262_wait_for_busy+0x36>
    }
    
    return 1; // Success
 800abf2:	2301      	movs	r3, #1
}
 800abf4:	0018      	movs	r0, r3
 800abf6:	46bd      	mov	sp, r7
 800abf8:	b00a      	add	sp, #40	@ 0x28
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20000000 	.word	0x20000000
 800ac00:	08016a10 	.word	0x08016a10
 800ac04:	08016a24 	.word	0x08016a24

0800ac08 <sx1262_detect_module>:

// Check if SX1262 module is present and responding
int8_t sx1262_detect_module(void) {
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
    uint8_t status;
    
    sx1262_debug_print("Detecting SX1262 module...\r\n");
 800ac0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac48 <sx1262_detect_module+0x40>)
 800ac10:	0018      	movs	r0, r3
 800ac12:	f7ff ff87 	bl	800ab24 <sx1262_debug_print>
    
    // Try to read the chip status register
    if (sx1262_spi_read(0xC0, &status, 1) == 0) {
 800ac16:	1dfb      	adds	r3, r7, #7
 800ac18:	2201      	movs	r2, #1
 800ac1a:	0019      	movs	r1, r3
 800ac1c:	20c0      	movs	r0, #192	@ 0xc0
 800ac1e:	f000 f85b 	bl	800acd8 <sx1262_spi_read>
 800ac22:	1e03      	subs	r3, r0, #0
 800ac24:	d105      	bne.n	800ac32 <sx1262_detect_module+0x2a>
        sx1262_debug_print("✓ SX1262 module detected\r\n");
 800ac26:	4b09      	ldr	r3, [pc, #36]	@ (800ac4c <sx1262_detect_module+0x44>)
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f7ff ff7b 	bl	800ab24 <sx1262_debug_print>
        return 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e005      	b.n	800ac3e <sx1262_detect_module+0x36>
    } else {
        sx1262_debug_print("✗ SX1262 module not detected\r\n");
 800ac32:	4b07      	ldr	r3, [pc, #28]	@ (800ac50 <sx1262_detect_module+0x48>)
 800ac34:	0018      	movs	r0, r3
 800ac36:	f7ff ff75 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	425b      	negs	r3, r3
    }
}
 800ac3e:	0018      	movs	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	b002      	add	sp, #8
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	46c0      	nop			@ (mov r8, r8)
 800ac48:	08016a30 	.word	0x08016a30
 800ac4c:	08016a50 	.word	0x08016a50
 800ac50:	08016a70 	.word	0x08016a70

0800ac54 <sx1262_test_spi>:

// Simple SPI test function
int8_t sx1262_test_spi(void) {
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
    uint8_t test_data[4] = {0x12, 0x34, 0x56, 0x78};
 800ac5a:	1d3b      	adds	r3, r7, #4
 800ac5c:	4a18      	ldr	r2, [pc, #96]	@ (800acc0 <sx1262_test_spi+0x6c>)
 800ac5e:	601a      	str	r2, [r3, #0]
    uint8_t read_data[4];
    
    sx1262_debug_print("Testing SPI communication...\r\n");
 800ac60:	4b18      	ldr	r3, [pc, #96]	@ (800acc4 <sx1262_test_spi+0x70>)
 800ac62:	0018      	movs	r0, r3
 800ac64:	f7ff ff5e 	bl	800ab24 <sx1262_debug_print>
    
    // Test basic SPI write/read
    if (sx1262_spi_write(0x00, test_data, 4) == 0) {
 800ac68:	1d3b      	adds	r3, r7, #4
 800ac6a:	2204      	movs	r2, #4
 800ac6c:	0019      	movs	r1, r3
 800ac6e:	2000      	movs	r0, #0
 800ac70:	f000 f8ca 	bl	800ae08 <sx1262_spi_write>
 800ac74:	1e03      	subs	r3, r0, #0
 800ac76:	d10c      	bne.n	800ac92 <sx1262_test_spi+0x3e>
        sx1262_debug_print("✓ SPI write test passed\r\n");
 800ac78:	4b13      	ldr	r3, [pc, #76]	@ (800acc8 <sx1262_test_spi+0x74>)
 800ac7a:	0018      	movs	r0, r3
 800ac7c:	f7ff ff52 	bl	800ab24 <sx1262_debug_print>
    } else {
        sx1262_debug_print("✗ SPI write test failed\r\n");
        return -1;
    }
    
    if (sx1262_spi_read(0x00, read_data, 4) == 0) {
 800ac80:	003b      	movs	r3, r7
 800ac82:	2204      	movs	r2, #4
 800ac84:	0019      	movs	r1, r3
 800ac86:	2000      	movs	r0, #0
 800ac88:	f000 f826 	bl	800acd8 <sx1262_spi_read>
 800ac8c:	1e03      	subs	r3, r0, #0
 800ac8e:	d10d      	bne.n	800acac <sx1262_test_spi+0x58>
 800ac90:	e006      	b.n	800aca0 <sx1262_test_spi+0x4c>
        sx1262_debug_print("✗ SPI write test failed\r\n");
 800ac92:	4b0e      	ldr	r3, [pc, #56]	@ (800accc <sx1262_test_spi+0x78>)
 800ac94:	0018      	movs	r0, r3
 800ac96:	f7ff ff45 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	425b      	negs	r3, r3
 800ac9e:	e00b      	b.n	800acb8 <sx1262_test_spi+0x64>
        sx1262_debug_print("✓ SPI read test passed\r\n");
 800aca0:	4b0b      	ldr	r3, [pc, #44]	@ (800acd0 <sx1262_test_spi+0x7c>)
 800aca2:	0018      	movs	r0, r3
 800aca4:	f7ff ff3e 	bl	800ab24 <sx1262_debug_print>
        return 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	e005      	b.n	800acb8 <sx1262_test_spi+0x64>
    } else {
        sx1262_debug_print("✗ SPI read test failed\r\n");
 800acac:	4b09      	ldr	r3, [pc, #36]	@ (800acd4 <sx1262_test_spi+0x80>)
 800acae:	0018      	movs	r0, r3
 800acb0:	f7ff ff38 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800acb4:	2301      	movs	r3, #1
 800acb6:	425b      	negs	r3, r3
    }
}
 800acb8:	0018      	movs	r0, r3
 800acba:	46bd      	mov	sp, r7
 800acbc:	b002      	add	sp, #8
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	78563412 	.word	0x78563412
 800acc4:	08016a94 	.word	0x08016a94
 800acc8:	08016ab4 	.word	0x08016ab4
 800accc:	08016ad0 	.word	0x08016ad0
 800acd0:	08016aec 	.word	0x08016aec
 800acd4:	08016b08 	.word	0x08016b08

0800acd8 <sx1262_spi_read>:

// SPI read function for SX1262
int8_t sx1262_spi_read(uint8_t address, uint8_t* data, uint8_t length) {
 800acd8:	b590      	push	{r4, r7, lr}
 800acda:	4c43      	ldr	r4, [pc, #268]	@ (800ade8 <sx1262_spi_read+0x110>)
 800acdc:	44a5      	add	sp, r4
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6039      	str	r1, [r7, #0]
 800ace2:	0011      	movs	r1, r2
 800ace4:	4b41      	ldr	r3, [pc, #260]	@ (800adec <sx1262_spi_read+0x114>)
 800ace6:	2482      	movs	r4, #130	@ 0x82
 800ace8:	00a4      	lsls	r4, r4, #2
 800acea:	191b      	adds	r3, r3, r4
 800acec:	19db      	adds	r3, r3, r7
 800acee:	1c02      	adds	r2, r0, #0
 800acf0:	701a      	strb	r2, [r3, #0]
 800acf2:	4b3f      	ldr	r3, [pc, #252]	@ (800adf0 <sx1262_spi_read+0x118>)
 800acf4:	0020      	movs	r0, r4
 800acf6:	181b      	adds	r3, r3, r0
 800acf8:	19db      	adds	r3, r3, r7
 800acfa:	1c0a      	adds	r2, r1, #0
 800acfc:	701a      	strb	r2, [r3, #0]
    uint8_t rx_buffer[256];
    
    if (length > 255) return -1;
    
    // Prepare command - SX1262 uses 8-bit addresses
    tx_buffer[0] = address; // Direct address for SX1262
 800acfe:	4b3d      	ldr	r3, [pc, #244]	@ (800adf4 <sx1262_spi_read+0x11c>)
 800ad00:	181b      	adds	r3, r3, r0
 800ad02:	19db      	adds	r3, r3, r7
 800ad04:	4a39      	ldr	r2, [pc, #228]	@ (800adec <sx1262_spi_read+0x114>)
 800ad06:	1812      	adds	r2, r2, r0
 800ad08:	19d2      	adds	r2, r2, r7
 800ad0a:	7812      	ldrb	r2, [r2, #0]
 800ad0c:	701a      	strb	r2, [r3, #0]
    
    // Wait for BUSY to go low
    if (!sx1262_wait_for_busy()) {
 800ad0e:	f7ff ff2d 	bl	800ab6c <sx1262_wait_for_busy>
 800ad12:	1e03      	subs	r3, r0, #0
 800ad14:	d106      	bne.n	800ad24 <sx1262_spi_read+0x4c>
        sx1262_debug_print("BUSY timeout during SPI read\r\n");
 800ad16:	4b38      	ldr	r3, [pc, #224]	@ (800adf8 <sx1262_spi_read+0x120>)
 800ad18:	0018      	movs	r0, r3
 800ad1a:	f7ff ff03 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	425b      	negs	r3, r3
 800ad22:	e05a      	b.n	800adda <sx1262_spi_read+0x102>
    }
    
    // Pull NSS low
    HAL_GPIO_WritePin(sx1262_ctx.nss_port, sx1262_ctx.nss_pin, GPIO_PIN_RESET);
 800ad24:	4b35      	ldr	r3, [pc, #212]	@ (800adfc <sx1262_spi_read+0x124>)
 800ad26:	6858      	ldr	r0, [r3, #4]
 800ad28:	4b34      	ldr	r3, [pc, #208]	@ (800adfc <sx1262_spi_read+0x124>)
 800ad2a:	891b      	ldrh	r3, [r3, #8]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	0019      	movs	r1, r3
 800ad30:	f001 fd7d 	bl	800c82e <HAL_GPIO_WritePin>
    HAL_Delay(1); // Small delay for NSS setup
 800ad34:	2001      	movs	r0, #1
 800ad36:	f001 fb21 	bl	800c37c <HAL_Delay>
    
    // Transmit command
    if (HAL_SPI_Transmit(sx1262_ctx.spi, tx_buffer, 1, 1000) != HAL_OK) {
 800ad3a:	4b30      	ldr	r3, [pc, #192]	@ (800adfc <sx1262_spi_read+0x124>)
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	23fa      	movs	r3, #250	@ 0xfa
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	2284      	movs	r2, #132	@ 0x84
 800ad44:	0052      	lsls	r2, r2, #1
 800ad46:	18b9      	adds	r1, r7, r2
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f003 fcc1 	bl	800e6d0 <HAL_SPI_Transmit>
 800ad4e:	1e03      	subs	r3, r0, #0
 800ad50:	d00e      	beq.n	800ad70 <sx1262_spi_read+0x98>
        HAL_GPIO_WritePin(sx1262_ctx.nss_port, sx1262_ctx.nss_pin, GPIO_PIN_SET);
 800ad52:	4b2a      	ldr	r3, [pc, #168]	@ (800adfc <sx1262_spi_read+0x124>)
 800ad54:	6858      	ldr	r0, [r3, #4]
 800ad56:	4b29      	ldr	r3, [pc, #164]	@ (800adfc <sx1262_spi_read+0x124>)
 800ad58:	891b      	ldrh	r3, [r3, #8]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	0019      	movs	r1, r3
 800ad5e:	f001 fd66 	bl	800c82e <HAL_GPIO_WritePin>
        sx1262_debug_print("SPI transmit failed\r\n");
 800ad62:	4b27      	ldr	r3, [pc, #156]	@ (800ae00 <sx1262_spi_read+0x128>)
 800ad64:	0018      	movs	r0, r3
 800ad66:	f7ff fedd 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	425b      	negs	r3, r3
 800ad6e:	e034      	b.n	800adda <sx1262_spi_read+0x102>
    }
    
    // Receive data
    if (HAL_SPI_Receive(sx1262_ctx.spi, rx_buffer, length, 1000) != HAL_OK) {
 800ad70:	4b22      	ldr	r3, [pc, #136]	@ (800adfc <sx1262_spi_read+0x124>)
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	4b1e      	ldr	r3, [pc, #120]	@ (800adf0 <sx1262_spi_read+0x118>)
 800ad76:	2282      	movs	r2, #130	@ 0x82
 800ad78:	0092      	lsls	r2, r2, #2
 800ad7a:	189b      	adds	r3, r3, r2
 800ad7c:	19db      	adds	r3, r3, r7
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	23fa      	movs	r3, #250	@ 0xfa
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	2108      	movs	r1, #8
 800ad88:	1879      	adds	r1, r7, r1
 800ad8a:	f003 fe01 	bl	800e990 <HAL_SPI_Receive>
 800ad8e:	1e03      	subs	r3, r0, #0
 800ad90:	d00e      	beq.n	800adb0 <sx1262_spi_read+0xd8>
        HAL_GPIO_WritePin(sx1262_ctx.nss_port, sx1262_ctx.nss_pin, GPIO_PIN_SET);
 800ad92:	4b1a      	ldr	r3, [pc, #104]	@ (800adfc <sx1262_spi_read+0x124>)
 800ad94:	6858      	ldr	r0, [r3, #4]
 800ad96:	4b19      	ldr	r3, [pc, #100]	@ (800adfc <sx1262_spi_read+0x124>)
 800ad98:	891b      	ldrh	r3, [r3, #8]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	0019      	movs	r1, r3
 800ad9e:	f001 fd46 	bl	800c82e <HAL_GPIO_WritePin>
        sx1262_debug_print("SPI receive failed\r\n");
 800ada2:	4b18      	ldr	r3, [pc, #96]	@ (800ae04 <sx1262_spi_read+0x12c>)
 800ada4:	0018      	movs	r0, r3
 800ada6:	f7ff febd 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800adaa:	2301      	movs	r3, #1
 800adac:	425b      	negs	r3, r3
 800adae:	e014      	b.n	800adda <sx1262_spi_read+0x102>
    }
    
    // Pull NSS high
    HAL_GPIO_WritePin(sx1262_ctx.nss_port, sx1262_ctx.nss_pin, GPIO_PIN_SET);
 800adb0:	4b12      	ldr	r3, [pc, #72]	@ (800adfc <sx1262_spi_read+0x124>)
 800adb2:	6858      	ldr	r0, [r3, #4]
 800adb4:	4b11      	ldr	r3, [pc, #68]	@ (800adfc <sx1262_spi_read+0x124>)
 800adb6:	891b      	ldrh	r3, [r3, #8]
 800adb8:	2201      	movs	r2, #1
 800adba:	0019      	movs	r1, r3
 800adbc:	f001 fd37 	bl	800c82e <HAL_GPIO_WritePin>
    
    // Copy received data
    memcpy(data, rx_buffer, length);
 800adc0:	4b0b      	ldr	r3, [pc, #44]	@ (800adf0 <sx1262_spi_read+0x118>)
 800adc2:	2282      	movs	r2, #130	@ 0x82
 800adc4:	0092      	lsls	r2, r2, #2
 800adc6:	189b      	adds	r3, r3, r2
 800adc8:	19db      	adds	r3, r3, r7
 800adca:	781a      	ldrb	r2, [r3, #0]
 800adcc:	2308      	movs	r3, #8
 800adce:	18f9      	adds	r1, r7, r3
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	0018      	movs	r0, r3
 800add4:	f006 ffa4 	bl	8011d20 <memcpy>
    
    return 0;
 800add8:	2300      	movs	r3, #0
}
 800adda:	0018      	movs	r0, r3
 800addc:	46bd      	mov	sp, r7
 800adde:	2383      	movs	r3, #131	@ 0x83
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	449d      	add	sp, r3
 800ade4:	bd90      	pop	{r4, r7, pc}
 800ade6:	46c0      	nop			@ (mov r8, r8)
 800ade8:	fffffdf4 	.word	0xfffffdf4
 800adec:	fffffdff 	.word	0xfffffdff
 800adf0:	fffffdfe 	.word	0xfffffdfe
 800adf4:	ffffff00 	.word	0xffffff00
 800adf8:	08016b24 	.word	0x08016b24
 800adfc:	20000000 	.word	0x20000000
 800ae00:	08016b44 	.word	0x08016b44
 800ae04:	08016b5c 	.word	0x08016b5c

0800ae08 <sx1262_spi_write>:

// SPI write function for SX1262
int8_t sx1262_spi_write(uint8_t address, const uint8_t* data, uint8_t length) {
 800ae08:	b590      	push	{r4, r7, lr}
 800ae0a:	b0c3      	sub	sp, #268	@ 0x10c
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6039      	str	r1, [r7, #0]
 800ae10:	0011      	movs	r1, r2
 800ae12:	4b33      	ldr	r3, [pc, #204]	@ (800aee0 <sx1262_spi_write+0xd8>)
 800ae14:	2484      	movs	r4, #132	@ 0x84
 800ae16:	0064      	lsls	r4, r4, #1
 800ae18:	191b      	adds	r3, r3, r4
 800ae1a:	19db      	adds	r3, r3, r7
 800ae1c:	1c02      	adds	r2, r0, #0
 800ae1e:	701a      	strb	r2, [r3, #0]
 800ae20:	4b30      	ldr	r3, [pc, #192]	@ (800aee4 <sx1262_spi_write+0xdc>)
 800ae22:	0020      	movs	r0, r4
 800ae24:	181b      	adds	r3, r3, r0
 800ae26:	19db      	adds	r3, r3, r7
 800ae28:	1c0a      	adds	r2, r1, #0
 800ae2a:	701a      	strb	r2, [r3, #0]
    uint8_t tx_buffer[256];
    
    if (length > 255) return -1;
    
    // Prepare command and data - SX1262 uses 8-bit addresses
    tx_buffer[0] = address; // Direct address for SX1262
 800ae2c:	4b2e      	ldr	r3, [pc, #184]	@ (800aee8 <sx1262_spi_write+0xe0>)
 800ae2e:	0001      	movs	r1, r0
 800ae30:	185b      	adds	r3, r3, r1
 800ae32:	19db      	adds	r3, r3, r7
 800ae34:	4a2a      	ldr	r2, [pc, #168]	@ (800aee0 <sx1262_spi_write+0xd8>)
 800ae36:	1852      	adds	r2, r2, r1
 800ae38:	19d2      	adds	r2, r2, r7
 800ae3a:	7812      	ldrb	r2, [r2, #0]
 800ae3c:	701a      	strb	r2, [r3, #0]
    memcpy(&tx_buffer[1], data, length);
 800ae3e:	4b29      	ldr	r3, [pc, #164]	@ (800aee4 <sx1262_spi_write+0xdc>)
 800ae40:	185b      	adds	r3, r3, r1
 800ae42:	19db      	adds	r3, r3, r7
 800ae44:	781a      	ldrb	r2, [r3, #0]
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	2308      	movs	r3, #8
 800ae4a:	18fb      	adds	r3, r7, r3
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	0018      	movs	r0, r3
 800ae50:	f006 ff66 	bl	8011d20 <memcpy>
    
    // Wait for BUSY to go low
    if (!sx1262_wait_for_busy()) {
 800ae54:	f7ff fe8a 	bl	800ab6c <sx1262_wait_for_busy>
 800ae58:	1e03      	subs	r3, r0, #0
 800ae5a:	d106      	bne.n	800ae6a <sx1262_spi_write+0x62>
        sx1262_debug_print("BUSY timeout during SPI write\r\n");
 800ae5c:	4b23      	ldr	r3, [pc, #140]	@ (800aeec <sx1262_spi_write+0xe4>)
 800ae5e:	0018      	movs	r0, r3
 800ae60:	f7ff fe60 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800ae64:	2301      	movs	r3, #1
 800ae66:	425b      	negs	r3, r3
 800ae68:	e035      	b.n	800aed6 <sx1262_spi_write+0xce>
    }
    
    // Pull NSS low
    HAL_GPIO_WritePin(sx1262_ctx.nss_port, sx1262_ctx.nss_pin, GPIO_PIN_RESET);
 800ae6a:	4b21      	ldr	r3, [pc, #132]	@ (800aef0 <sx1262_spi_write+0xe8>)
 800ae6c:	6858      	ldr	r0, [r3, #4]
 800ae6e:	4b20      	ldr	r3, [pc, #128]	@ (800aef0 <sx1262_spi_write+0xe8>)
 800ae70:	891b      	ldrh	r3, [r3, #8]
 800ae72:	2200      	movs	r2, #0
 800ae74:	0019      	movs	r1, r3
 800ae76:	f001 fcda 	bl	800c82e <HAL_GPIO_WritePin>
    HAL_Delay(1); // Small delay for NSS setup
 800ae7a:	2001      	movs	r0, #1
 800ae7c:	f001 fa7e 	bl	800c37c <HAL_Delay>
    
    // Transmit command and data
    if (HAL_SPI_Transmit(sx1262_ctx.spi, tx_buffer, length + 1, 1000) != HAL_OK) {
 800ae80:	4b1b      	ldr	r3, [pc, #108]	@ (800aef0 <sx1262_spi_write+0xe8>)
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	4b17      	ldr	r3, [pc, #92]	@ (800aee4 <sx1262_spi_write+0xdc>)
 800ae86:	2284      	movs	r2, #132	@ 0x84
 800ae88:	0052      	lsls	r2, r2, #1
 800ae8a:	189b      	adds	r3, r3, r2
 800ae8c:	19db      	adds	r3, r3, r7
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	3301      	adds	r3, #1
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	23fa      	movs	r3, #250	@ 0xfa
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	2108      	movs	r1, #8
 800ae9c:	1879      	adds	r1, r7, r1
 800ae9e:	f003 fc17 	bl	800e6d0 <HAL_SPI_Transmit>
 800aea2:	1e03      	subs	r3, r0, #0
 800aea4:	d00e      	beq.n	800aec4 <sx1262_spi_write+0xbc>
        HAL_GPIO_WritePin(sx1262_ctx.nss_port, sx1262_ctx.nss_pin, GPIO_PIN_SET);
 800aea6:	4b12      	ldr	r3, [pc, #72]	@ (800aef0 <sx1262_spi_write+0xe8>)
 800aea8:	6858      	ldr	r0, [r3, #4]
 800aeaa:	4b11      	ldr	r3, [pc, #68]	@ (800aef0 <sx1262_spi_write+0xe8>)
 800aeac:	891b      	ldrh	r3, [r3, #8]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	0019      	movs	r1, r3
 800aeb2:	f001 fcbc 	bl	800c82e <HAL_GPIO_WritePin>
        sx1262_debug_print("SPI transmit failed\r\n");
 800aeb6:	4b0f      	ldr	r3, [pc, #60]	@ (800aef4 <sx1262_spi_write+0xec>)
 800aeb8:	0018      	movs	r0, r3
 800aeba:	f7ff fe33 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800aebe:	2301      	movs	r3, #1
 800aec0:	425b      	negs	r3, r3
 800aec2:	e008      	b.n	800aed6 <sx1262_spi_write+0xce>
    }
    
    // Pull NSS high
    HAL_GPIO_WritePin(sx1262_ctx.nss_port, sx1262_ctx.nss_pin, GPIO_PIN_SET);
 800aec4:	4b0a      	ldr	r3, [pc, #40]	@ (800aef0 <sx1262_spi_write+0xe8>)
 800aec6:	6858      	ldr	r0, [r3, #4]
 800aec8:	4b09      	ldr	r3, [pc, #36]	@ (800aef0 <sx1262_spi_write+0xe8>)
 800aeca:	891b      	ldrh	r3, [r3, #8]
 800aecc:	2201      	movs	r2, #1
 800aece:	0019      	movs	r1, r3
 800aed0:	f001 fcad 	bl	800c82e <HAL_GPIO_WritePin>
    
    return 0;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	0018      	movs	r0, r3
 800aed8:	46bd      	mov	sp, r7
 800aeda:	b043      	add	sp, #268	@ 0x10c
 800aedc:	bd90      	pop	{r4, r7, pc}
 800aede:	46c0      	nop			@ (mov r8, r8)
 800aee0:	fffffeff 	.word	0xfffffeff
 800aee4:	fffffefe 	.word	0xfffffefe
 800aee8:	ffffff00 	.word	0xffffff00
 800aeec:	08016b74 	.word	0x08016b74
 800aef0:	20000000 	.word	0x20000000
 800aef4:	08016b44 	.word	0x08016b44

0800aef8 <sx1262_reset>:
    
    return 0;
}

// Reset SX1262 module
int8_t sx1262_reset(void) {
 800aef8:	b580      	push	{r7, lr}
 800aefa:	af00      	add	r7, sp, #0
    sx1262_debug_print("Resetting SX1262 module...\r\n");
 800aefc:	4b1f      	ldr	r3, [pc, #124]	@ (800af7c <sx1262_reset+0x84>)
 800aefe:	0018      	movs	r0, r3
 800af00:	f7ff fe10 	bl	800ab24 <sx1262_debug_print>
    
    // Pull RESET low
    HAL_GPIO_WritePin(sx1262_ctx.reset_port, sx1262_ctx.reset_pin, GPIO_PIN_RESET);
 800af04:	4b1e      	ldr	r3, [pc, #120]	@ (800af80 <sx1262_reset+0x88>)
 800af06:	68d8      	ldr	r0, [r3, #12]
 800af08:	4b1d      	ldr	r3, [pc, #116]	@ (800af80 <sx1262_reset+0x88>)
 800af0a:	8a1b      	ldrh	r3, [r3, #16]
 800af0c:	2200      	movs	r2, #0
 800af0e:	0019      	movs	r1, r3
 800af10:	f001 fc8d 	bl	800c82e <HAL_GPIO_WritePin>
    HAL_Delay(20); // Longer reset pulse
 800af14:	2014      	movs	r0, #20
 800af16:	f001 fa31 	bl	800c37c <HAL_Delay>
    
    // Pull RESET high
    HAL_GPIO_WritePin(sx1262_ctx.reset_port, sx1262_ctx.reset_pin, GPIO_PIN_SET);
 800af1a:	4b19      	ldr	r3, [pc, #100]	@ (800af80 <sx1262_reset+0x88>)
 800af1c:	68d8      	ldr	r0, [r3, #12]
 800af1e:	4b18      	ldr	r3, [pc, #96]	@ (800af80 <sx1262_reset+0x88>)
 800af20:	8a1b      	ldrh	r3, [r3, #16]
 800af22:	2201      	movs	r2, #1
 800af24:	0019      	movs	r1, r3
 800af26:	f001 fc82 	bl	800c82e <HAL_GPIO_WritePin>
    HAL_Delay(50); // Wait for module to stabilize
 800af2a:	2032      	movs	r0, #50	@ 0x32
 800af2c:	f001 fa26 	bl	800c37c <HAL_Delay>
    
    // Check if BUSY is high initially (normal after reset)
    if (HAL_GPIO_ReadPin(sx1262_ctx.busy_port, sx1262_ctx.busy_pin) == GPIO_PIN_SET) {
 800af30:	4b13      	ldr	r3, [pc, #76]	@ (800af80 <sx1262_reset+0x88>)
 800af32:	695a      	ldr	r2, [r3, #20]
 800af34:	4b12      	ldr	r3, [pc, #72]	@ (800af80 <sx1262_reset+0x88>)
 800af36:	8b1b      	ldrh	r3, [r3, #24]
 800af38:	0019      	movs	r1, r3
 800af3a:	0010      	movs	r0, r2
 800af3c:	f001 fc5a 	bl	800c7f4 <HAL_GPIO_ReadPin>
 800af40:	0003      	movs	r3, r0
 800af42:	2b01      	cmp	r3, #1
 800af44:	d106      	bne.n	800af54 <sx1262_reset+0x5c>
        sx1262_debug_print("BUSY is high after reset (normal)\r\n");
 800af46:	4b0f      	ldr	r3, [pc, #60]	@ (800af84 <sx1262_reset+0x8c>)
 800af48:	0018      	movs	r0, r3
 800af4a:	f7ff fdeb 	bl	800ab24 <sx1262_debug_print>
        HAL_Delay(100); // Wait for module to finish initialization
 800af4e:	2064      	movs	r0, #100	@ 0x64
 800af50:	f001 fa14 	bl	800c37c <HAL_Delay>
    }
    
    // Now wait for BUSY to go low (module ready)
    if (!sx1262_wait_for_busy()) {
 800af54:	f7ff fe0a 	bl	800ab6c <sx1262_wait_for_busy>
 800af58:	1e03      	subs	r3, r0, #0
 800af5a:	d106      	bne.n	800af6a <sx1262_reset+0x72>
        sx1262_debug_print("✗ SX1262 reset failed - BUSY timeout\r\n");
 800af5c:	4b0a      	ldr	r3, [pc, #40]	@ (800af88 <sx1262_reset+0x90>)
 800af5e:	0018      	movs	r0, r3
 800af60:	f7ff fde0 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800af64:	2301      	movs	r3, #1
 800af66:	425b      	negs	r3, r3
 800af68:	e004      	b.n	800af74 <sx1262_reset+0x7c>
    }
    
    sx1262_debug_print("✓ SX1262 reset successful\r\n");
 800af6a:	4b08      	ldr	r3, [pc, #32]	@ (800af8c <sx1262_reset+0x94>)
 800af6c:	0018      	movs	r0, r3
 800af6e:	f7ff fdd9 	bl	800ab24 <sx1262_debug_print>
    return 0;
 800af72:	2300      	movs	r3, #0
}
 800af74:	0018      	movs	r0, r3
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	46c0      	nop			@ (mov r8, r8)
 800af7c:	08016b94 	.word	0x08016b94
 800af80:	20000000 	.word	0x20000000
 800af84:	08016bb4 	.word	0x08016bb4
 800af88:	08016bd8 	.word	0x08016bd8
 800af8c:	08016c04 	.word	0x08016c04

0800af90 <sx1262_configure_lora>:

// Configure SX1262 for LoRa operation
int8_t sx1262_configure_lora(void) {
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
    uint8_t config_data[16];
    
    // Set to standby mode
    config_data[0] = 0x80; // STANDBY_RC command
 800af96:	1d3b      	adds	r3, r7, #4
 800af98:	2280      	movs	r2, #128	@ 0x80
 800af9a:	701a      	strb	r2, [r3, #0]
    if (sx1262_spi_write(0x80, config_data, 1) != 0) {
 800af9c:	1d3b      	adds	r3, r7, #4
 800af9e:	2201      	movs	r2, #1
 800afa0:	0019      	movs	r1, r3
 800afa2:	2080      	movs	r0, #128	@ 0x80
 800afa4:	f7ff ff30 	bl	800ae08 <sx1262_spi_write>
 800afa8:	1e03      	subs	r3, r0, #0
 800afaa:	d006      	beq.n	800afba <sx1262_configure_lora+0x2a>
        sx1262_debug_print("✗ Failed to set standby mode\r\n");
 800afac:	4b71      	ldr	r3, [pc, #452]	@ (800b174 <sx1262_configure_lora+0x1e4>)
 800afae:	0018      	movs	r0, r3
 800afb0:	f7ff fdb8 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800afb4:	2301      	movs	r3, #1
 800afb6:	425b      	negs	r3, r3
 800afb8:	e0d8      	b.n	800b16c <sx1262_configure_lora+0x1dc>
    }
    
    // Set regulator mode to LDO
    config_data[0] = 0x96; // SET_REGULATOR_MODE command
 800afba:	1d3b      	adds	r3, r7, #4
 800afbc:	2296      	movs	r2, #150	@ 0x96
 800afbe:	701a      	strb	r2, [r3, #0]
    config_data[1] = 0x00; // LDO mode
 800afc0:	1d3b      	adds	r3, r7, #4
 800afc2:	2200      	movs	r2, #0
 800afc4:	705a      	strb	r2, [r3, #1]
    if (sx1262_spi_write(0x96, config_data, 2) != 0) {
 800afc6:	1d3b      	adds	r3, r7, #4
 800afc8:	2202      	movs	r2, #2
 800afca:	0019      	movs	r1, r3
 800afcc:	2096      	movs	r0, #150	@ 0x96
 800afce:	f7ff ff1b 	bl	800ae08 <sx1262_spi_write>
 800afd2:	1e03      	subs	r3, r0, #0
 800afd4:	d006      	beq.n	800afe4 <sx1262_configure_lora+0x54>
        sx1262_debug_print("✗ Failed to set regulator mode\r\n");
 800afd6:	4b68      	ldr	r3, [pc, #416]	@ (800b178 <sx1262_configure_lora+0x1e8>)
 800afd8:	0018      	movs	r0, r3
 800afda:	f7ff fda3 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800afde:	2301      	movs	r3, #1
 800afe0:	425b      	negs	r3, r3
 800afe2:	e0c3      	b.n	800b16c <sx1262_configure_lora+0x1dc>
    }
    
    // Set packet type to LoRa
    config_data[0] = 0x8A; // SET_PKT_TYPE command
 800afe4:	1d3b      	adds	r3, r7, #4
 800afe6:	228a      	movs	r2, #138	@ 0x8a
 800afe8:	701a      	strb	r2, [r3, #0]
    config_data[1] = 0x01; // LoRa packet type
 800afea:	1d3b      	adds	r3, r7, #4
 800afec:	2201      	movs	r2, #1
 800afee:	705a      	strb	r2, [r3, #1]
    if (sx1262_spi_write(0x8A, config_data, 2) != 0) {
 800aff0:	1d3b      	adds	r3, r7, #4
 800aff2:	2202      	movs	r2, #2
 800aff4:	0019      	movs	r1, r3
 800aff6:	208a      	movs	r0, #138	@ 0x8a
 800aff8:	f7ff ff06 	bl	800ae08 <sx1262_spi_write>
 800affc:	1e03      	subs	r3, r0, #0
 800affe:	d006      	beq.n	800b00e <sx1262_configure_lora+0x7e>
        sx1262_debug_print("✗ Failed to set packet type\r\n");
 800b000:	4b5e      	ldr	r3, [pc, #376]	@ (800b17c <sx1262_configure_lora+0x1ec>)
 800b002:	0018      	movs	r0, r3
 800b004:	f7ff fd8e 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b008:	2301      	movs	r3, #1
 800b00a:	425b      	negs	r3, r3
 800b00c:	e0ae      	b.n	800b16c <sx1262_configure_lora+0x1dc>
    }
    
    // Set RF frequency (868 MHz)
    uint32_t freq = ((uint64_t)SX1262_FREQUENCY_HZ * 16384) / 32000000; // Convert to SX1262 format
 800b00e:	23d9      	movs	r3, #217	@ 0xd9
 800b010:	02db      	lsls	r3, r3, #11
 800b012:	617b      	str	r3, [r7, #20]
    config_data[0] = 0x86; // SET_RF_FREQUENCY command
 800b014:	1d3b      	adds	r3, r7, #4
 800b016:	2286      	movs	r2, #134	@ 0x86
 800b018:	701a      	strb	r2, [r3, #0]
    config_data[1] = (freq >> 16) & 0xFF;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	0c1b      	lsrs	r3, r3, #16
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	1d3b      	adds	r3, r7, #4
 800b022:	705a      	strb	r2, [r3, #1]
    config_data[2] = (freq >> 8) & 0xFF;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	0a1b      	lsrs	r3, r3, #8
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	1d3b      	adds	r3, r7, #4
 800b02c:	709a      	strb	r2, [r3, #2]
    config_data[3] = freq & 0xFF;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	b2da      	uxtb	r2, r3
 800b032:	1d3b      	adds	r3, r7, #4
 800b034:	70da      	strb	r2, [r3, #3]
    if (sx1262_spi_write(0x86, config_data, 4) != 0) {
 800b036:	1d3b      	adds	r3, r7, #4
 800b038:	2204      	movs	r2, #4
 800b03a:	0019      	movs	r1, r3
 800b03c:	2086      	movs	r0, #134	@ 0x86
 800b03e:	f7ff fee3 	bl	800ae08 <sx1262_spi_write>
 800b042:	1e03      	subs	r3, r0, #0
 800b044:	d006      	beq.n	800b054 <sx1262_configure_lora+0xc4>
        sx1262_debug_print("✗ Failed to set RF frequency\r\n");
 800b046:	4b4e      	ldr	r3, [pc, #312]	@ (800b180 <sx1262_configure_lora+0x1f0>)
 800b048:	0018      	movs	r0, r3
 800b04a:	f7ff fd6b 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b04e:	2301      	movs	r3, #1
 800b050:	425b      	negs	r3, r3
 800b052:	e08b      	b.n	800b16c <sx1262_configure_lora+0x1dc>
    }
    
    // Set LoRa modulation parameters
    config_data[0] = 0x8B; // SET_MODULATION_PARAMS command
 800b054:	1d3b      	adds	r3, r7, #4
 800b056:	228b      	movs	r2, #139	@ 0x8b
 800b058:	701a      	strb	r2, [r3, #0]
    config_data[1] = SX1262_SPREADING_FACTOR; // Spreading factor
 800b05a:	1d3b      	adds	r3, r7, #4
 800b05c:	2207      	movs	r2, #7
 800b05e:	705a      	strb	r2, [r3, #1]
    config_data[2] = SX1262_BANDWIDTH / 125; // Bandwidth (125 kHz = 0x00)
 800b060:	1d3b      	adds	r3, r7, #4
 800b062:	2201      	movs	r2, #1
 800b064:	709a      	strb	r2, [r3, #2]
    config_data[3] = SX1262_CODING_RATE; // Coding rate
 800b066:	1d3b      	adds	r3, r7, #4
 800b068:	2201      	movs	r2, #1
 800b06a:	70da      	strb	r2, [r3, #3]
    config_data[4] = 0x01; // Low data rate optimization
 800b06c:	1d3b      	adds	r3, r7, #4
 800b06e:	2201      	movs	r2, #1
 800b070:	711a      	strb	r2, [r3, #4]
    if (sx1262_spi_write(0x8B, config_data, 5) != 0) {
 800b072:	1d3b      	adds	r3, r7, #4
 800b074:	2205      	movs	r2, #5
 800b076:	0019      	movs	r1, r3
 800b078:	208b      	movs	r0, #139	@ 0x8b
 800b07a:	f7ff fec5 	bl	800ae08 <sx1262_spi_write>
 800b07e:	1e03      	subs	r3, r0, #0
 800b080:	d006      	beq.n	800b090 <sx1262_configure_lora+0x100>
        sx1262_debug_print("✗ Failed to set modulation parameters\r\n");
 800b082:	4b40      	ldr	r3, [pc, #256]	@ (800b184 <sx1262_configure_lora+0x1f4>)
 800b084:	0018      	movs	r0, r3
 800b086:	f7ff fd4d 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b08a:	2301      	movs	r3, #1
 800b08c:	425b      	negs	r3, r3
 800b08e:	e06d      	b.n	800b16c <sx1262_configure_lora+0x1dc>
    }
    
    // Set LoRa packet parameters
    config_data[0] = 0x8C; // SET_PKT_PARAMS command
 800b090:	1d3b      	adds	r3, r7, #4
 800b092:	228c      	movs	r2, #140	@ 0x8c
 800b094:	701a      	strb	r2, [r3, #0]
    config_data[1] = SX1262_PREAMBLE_LENGTH >> 8; // Preamble length MSB
 800b096:	1d3b      	adds	r3, r7, #4
 800b098:	2200      	movs	r2, #0
 800b09a:	705a      	strb	r2, [r3, #1]
    config_data[2] = SX1262_PREAMBLE_LENGTH & 0xFF; // Preamble length LSB
 800b09c:	1d3b      	adds	r3, r7, #4
 800b09e:	2208      	movs	r2, #8
 800b0a0:	709a      	strb	r2, [r3, #2]
    config_data[3] = 0x01; // Header type (explicit)
 800b0a2:	1d3b      	adds	r3, r7, #4
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	70da      	strb	r2, [r3, #3]
    config_data[4] = SX1262_PAYLOAD_LENGTH; // Payload length
 800b0a8:	1d3b      	adds	r3, r7, #4
 800b0aa:	2240      	movs	r2, #64	@ 0x40
 800b0ac:	711a      	strb	r2, [r3, #4]
    config_data[5] = 0x01; // CRC on
 800b0ae:	1d3b      	adds	r3, r7, #4
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	715a      	strb	r2, [r3, #5]
    config_data[6] = 0x00; // Invert IQ off
 800b0b4:	1d3b      	adds	r3, r7, #4
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	719a      	strb	r2, [r3, #6]
    if (sx1262_spi_write(0x8C, config_data, 7) != 0) {
 800b0ba:	1d3b      	adds	r3, r7, #4
 800b0bc:	2207      	movs	r2, #7
 800b0be:	0019      	movs	r1, r3
 800b0c0:	208c      	movs	r0, #140	@ 0x8c
 800b0c2:	f7ff fea1 	bl	800ae08 <sx1262_spi_write>
 800b0c6:	1e03      	subs	r3, r0, #0
 800b0c8:	d006      	beq.n	800b0d8 <sx1262_configure_lora+0x148>
        sx1262_debug_print("✗ Failed to set packet parameters\r\n");
 800b0ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b188 <sx1262_configure_lora+0x1f8>)
 800b0cc:	0018      	movs	r0, r3
 800b0ce:	f7ff fd29 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	425b      	negs	r3, r3
 800b0d6:	e049      	b.n	800b16c <sx1262_configure_lora+0x1dc>
    }
    
    // Set TX parameters
    config_data[0] = 0x8E; // SET_TX_PARAMS command
 800b0d8:	1d3b      	adds	r3, r7, #4
 800b0da:	228e      	movs	r2, #142	@ 0x8e
 800b0dc:	701a      	strb	r2, [r3, #0]
    config_data[1] = SX1262_TX_POWER_DBM; // TX power
 800b0de:	1d3b      	adds	r3, r7, #4
 800b0e0:	220e      	movs	r2, #14
 800b0e2:	705a      	strb	r2, [r3, #1]
    config_data[2] = 0x00; // Ramp time (10 us)
 800b0e4:	1d3b      	adds	r3, r7, #4
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	709a      	strb	r2, [r3, #2]
    if (sx1262_spi_write(0x8E, config_data, 3) != 0) {
 800b0ea:	1d3b      	adds	r3, r7, #4
 800b0ec:	2203      	movs	r2, #3
 800b0ee:	0019      	movs	r1, r3
 800b0f0:	208e      	movs	r0, #142	@ 0x8e
 800b0f2:	f7ff fe89 	bl	800ae08 <sx1262_spi_write>
 800b0f6:	1e03      	subs	r3, r0, #0
 800b0f8:	d006      	beq.n	800b108 <sx1262_configure_lora+0x178>
        sx1262_debug_print("✗ Failed to set TX parameters\r\n");
 800b0fa:	4b24      	ldr	r3, [pc, #144]	@ (800b18c <sx1262_configure_lora+0x1fc>)
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	f7ff fd11 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b102:	2301      	movs	r3, #1
 800b104:	425b      	negs	r3, r3
 800b106:	e031      	b.n	800b16c <sx1262_configure_lora+0x1dc>
    }
    
    // Set LoRa sync word
    config_data[0] = 0x91; // SET_LORA_SYNC_WORD command
 800b108:	1d3b      	adds	r3, r7, #4
 800b10a:	2291      	movs	r2, #145	@ 0x91
 800b10c:	701a      	strb	r2, [r3, #0]
    config_data[1] = SX1262_SYNC_WORD; // Sync word
 800b10e:	1d3b      	adds	r3, r7, #4
 800b110:	2212      	movs	r2, #18
 800b112:	705a      	strb	r2, [r3, #1]
    if (sx1262_spi_write(0x91, config_data, 2) != 0) {
 800b114:	1d3b      	adds	r3, r7, #4
 800b116:	2202      	movs	r2, #2
 800b118:	0019      	movs	r1, r3
 800b11a:	2091      	movs	r0, #145	@ 0x91
 800b11c:	f7ff fe74 	bl	800ae08 <sx1262_spi_write>
 800b120:	1e03      	subs	r3, r0, #0
 800b122:	d006      	beq.n	800b132 <sx1262_configure_lora+0x1a2>
        sx1262_debug_print("✗ Failed to set sync word\r\n");
 800b124:	4b1a      	ldr	r3, [pc, #104]	@ (800b190 <sx1262_configure_lora+0x200>)
 800b126:	0018      	movs	r0, r3
 800b128:	f7ff fcfc 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b12c:	2301      	movs	r3, #1
 800b12e:	425b      	negs	r3, r3
 800b130:	e01c      	b.n	800b16c <sx1262_configure_lora+0x1dc>
    }
    
    // Set buffer base address
    config_data[0] = 0x8F; // SET_BUFFER_BASE_ADDRESS command
 800b132:	1d3b      	adds	r3, r7, #4
 800b134:	228f      	movs	r2, #143	@ 0x8f
 800b136:	701a      	strb	r2, [r3, #0]
    config_data[1] = 0x00; // TX base address
 800b138:	1d3b      	adds	r3, r7, #4
 800b13a:	2200      	movs	r2, #0
 800b13c:	705a      	strb	r2, [r3, #1]
    config_data[2] = 0x00; // RX base address
 800b13e:	1d3b      	adds	r3, r7, #4
 800b140:	2200      	movs	r2, #0
 800b142:	709a      	strb	r2, [r3, #2]
    if (sx1262_spi_write(0x8F, config_data, 3) != 0) {
 800b144:	1d3b      	adds	r3, r7, #4
 800b146:	2203      	movs	r2, #3
 800b148:	0019      	movs	r1, r3
 800b14a:	208f      	movs	r0, #143	@ 0x8f
 800b14c:	f7ff fe5c 	bl	800ae08 <sx1262_spi_write>
 800b150:	1e03      	subs	r3, r0, #0
 800b152:	d006      	beq.n	800b162 <sx1262_configure_lora+0x1d2>
        sx1262_debug_print("✗ Failed to set buffer base address\r\n");
 800b154:	4b0f      	ldr	r3, [pc, #60]	@ (800b194 <sx1262_configure_lora+0x204>)
 800b156:	0018      	movs	r0, r3
 800b158:	f7ff fce4 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b15c:	2301      	movs	r3, #1
 800b15e:	425b      	negs	r3, r3
 800b160:	e004      	b.n	800b16c <sx1262_configure_lora+0x1dc>
    }
    
    sx1262_debug_print("✓ SX1262 LoRa configuration successful\r\n");
 800b162:	4b0d      	ldr	r3, [pc, #52]	@ (800b198 <sx1262_configure_lora+0x208>)
 800b164:	0018      	movs	r0, r3
 800b166:	f7ff fcdd 	bl	800ab24 <sx1262_debug_print>
    return 0;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	0018      	movs	r0, r3
 800b16e:	46bd      	mov	sp, r7
 800b170:	b006      	add	sp, #24
 800b172:	bd80      	pop	{r7, pc}
 800b174:	08016c24 	.word	0x08016c24
 800b178:	08016c48 	.word	0x08016c48
 800b17c:	08016c6c 	.word	0x08016c6c
 800b180:	08016c8c 	.word	0x08016c8c
 800b184:	08016cb0 	.word	0x08016cb0
 800b188:	08016cdc 	.word	0x08016cdc
 800b18c:	08016d04 	.word	0x08016d04
 800b190:	08016d28 	.word	0x08016d28
 800b194:	08016d48 	.word	0x08016d48
 800b198:	08016d70 	.word	0x08016d70

0800b19c <sx1262_init>:

// Initialize SX1262 module
int8_t sx1262_init(void) {
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
    sx1262_debug_print("Initializing SX1262 LoRa module...\r\n");
 800b1a0:	4b3d      	ldr	r3, [pc, #244]	@ (800b298 <sx1262_init+0xfc>)
 800b1a2:	0018      	movs	r0, r3
 800b1a4:	f7ff fcbe 	bl	800ab24 <sx1262_debug_print>
    
    // First detect if module is present
    if (sx1262_detect_module() != 0) {
 800b1a8:	f7ff fd2e 	bl	800ac08 <sx1262_detect_module>
 800b1ac:	1e03      	subs	r3, r0, #0
 800b1ae:	d030      	beq.n	800b212 <sx1262_init+0x76>
        sx1262_debug_print("✗ SX1262 module not detected - check connections\r\n");
 800b1b0:	4b3a      	ldr	r3, [pc, #232]	@ (800b29c <sx1262_init+0x100>)
 800b1b2:	0018      	movs	r0, r3
 800b1b4:	f7ff fcb6 	bl	800ab24 <sx1262_debug_print>
        sx1262_debug_print("Check wiring:\r\n");
 800b1b8:	4b39      	ldr	r3, [pc, #228]	@ (800b2a0 <sx1262_init+0x104>)
 800b1ba:	0018      	movs	r0, r3
 800b1bc:	f7ff fcb2 	bl	800ab24 <sx1262_debug_print>
        sx1262_debug_print("  - PA4 (NSS) → SX1262 CS\r\n");
 800b1c0:	4b38      	ldr	r3, [pc, #224]	@ (800b2a4 <sx1262_init+0x108>)
 800b1c2:	0018      	movs	r0, r3
 800b1c4:	f7ff fcae 	bl	800ab24 <sx1262_debug_print>
        sx1262_debug_print("  - PA5 (SCK) → SX1262 SCK\r\n");
 800b1c8:	4b37      	ldr	r3, [pc, #220]	@ (800b2a8 <sx1262_init+0x10c>)
 800b1ca:	0018      	movs	r0, r3
 800b1cc:	f7ff fcaa 	bl	800ab24 <sx1262_debug_print>
        sx1262_debug_print("  - PA6 (MISO) → SX1262 MISO\r\n");
 800b1d0:	4b36      	ldr	r3, [pc, #216]	@ (800b2ac <sx1262_init+0x110>)
 800b1d2:	0018      	movs	r0, r3
 800b1d4:	f7ff fca6 	bl	800ab24 <sx1262_debug_print>
        sx1262_debug_print("  - PA7 (MOSI) → SX1262 MOSI\r\n");
 800b1d8:	4b35      	ldr	r3, [pc, #212]	@ (800b2b0 <sx1262_init+0x114>)
 800b1da:	0018      	movs	r0, r3
 800b1dc:	f7ff fca2 	bl	800ab24 <sx1262_debug_print>
        sx1262_debug_print("  - PC0 (RESET) → SX1262 RESET\r\n");
 800b1e0:	4b34      	ldr	r3, [pc, #208]	@ (800b2b4 <sx1262_init+0x118>)
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	f7ff fc9e 	bl	800ab24 <sx1262_debug_print>
        sx1262_debug_print("  - PC1 (BUSY) → SX1262 BUSY\r\n");
 800b1e8:	4b33      	ldr	r3, [pc, #204]	@ (800b2b8 <sx1262_init+0x11c>)
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f7ff fc9a 	bl	800ab24 <sx1262_debug_print>
        sx1262_debug_print("  - 3.3V → SX1262 VCC\r\n");
 800b1f0:	4b32      	ldr	r3, [pc, #200]	@ (800b2bc <sx1262_init+0x120>)
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	f7ff fc96 	bl	800ab24 <sx1262_debug_print>
        sx1262_debug_print("  - GND → SX1262 GND\r\n");
 800b1f8:	4b31      	ldr	r3, [pc, #196]	@ (800b2c0 <sx1262_init+0x124>)
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	f7ff fc92 	bl	800ab24 <sx1262_debug_print>
        sx1262_module_detected = 0;
 800b200:	4b30      	ldr	r3, [pc, #192]	@ (800b2c4 <sx1262_init+0x128>)
 800b202:	2200      	movs	r2, #0
 800b204:	701a      	strb	r2, [r3, #0]
        sx1262_initialized = 0;
 800b206:	4b30      	ldr	r3, [pc, #192]	@ (800b2c8 <sx1262_init+0x12c>)
 800b208:	2200      	movs	r2, #0
 800b20a:	701a      	strb	r2, [r3, #0]
        return -1;
 800b20c:	2301      	movs	r3, #1
 800b20e:	425b      	negs	r3, r3
 800b210:	e03e      	b.n	800b290 <sx1262_init+0xf4>
    }
    
    sx1262_module_detected = 1;
 800b212:	4b2c      	ldr	r3, [pc, #176]	@ (800b2c4 <sx1262_init+0x128>)
 800b214:	2201      	movs	r2, #1
 800b216:	701a      	strb	r2, [r3, #0]
    sx1262_debug_print("✓ Module detected, proceeding with initialization...\r\n");
 800b218:	4b2c      	ldr	r3, [pc, #176]	@ (800b2cc <sx1262_init+0x130>)
 800b21a:	0018      	movs	r0, r3
 800b21c:	f7ff fc82 	bl	800ab24 <sx1262_debug_print>
    
    // Reset the module
    if (sx1262_reset() != 0) {
 800b220:	f7ff fe6a 	bl	800aef8 <sx1262_reset>
 800b224:	1e03      	subs	r3, r0, #0
 800b226:	d01d      	beq.n	800b264 <sx1262_init+0xc8>
        sx1262_debug_print("✗ SX1262 reset failed - trying alternative approach\r\n");
 800b228:	4b29      	ldr	r3, [pc, #164]	@ (800b2d0 <sx1262_init+0x134>)
 800b22a:	0018      	movs	r0, r3
 800b22c:	f7ff fc7a 	bl	800ab24 <sx1262_debug_print>
        
        // Try a simpler approach - just wait and try to configure
        HAL_Delay(200); // Wait longer for module to stabilize
 800b230:	20c8      	movs	r0, #200	@ 0xc8
 800b232:	f001 f8a3 	bl	800c37c <HAL_Delay>
        
        if (sx1262_configure_lora() != 0) {
 800b236:	f7ff feab 	bl	800af90 <sx1262_configure_lora>
 800b23a:	1e03      	subs	r3, r0, #0
 800b23c:	d009      	beq.n	800b252 <sx1262_init+0xb6>
            sx1262_debug_print("✗ SX1262 LoRa configuration failed after reset timeout\r\n");
 800b23e:	4b25      	ldr	r3, [pc, #148]	@ (800b2d4 <sx1262_init+0x138>)
 800b240:	0018      	movs	r0, r3
 800b242:	f7ff fc6f 	bl	800ab24 <sx1262_debug_print>
            sx1262_initialized = 0;
 800b246:	4b20      	ldr	r3, [pc, #128]	@ (800b2c8 <sx1262_init+0x12c>)
 800b248:	2200      	movs	r2, #0
 800b24a:	701a      	strb	r2, [r3, #0]
            return -1;
 800b24c:	2301      	movs	r3, #1
 800b24e:	425b      	negs	r3, r3
 800b250:	e01e      	b.n	800b290 <sx1262_init+0xf4>
        }
        
        sx1262_debug_print("✓ SX1262 LoRa module initialized (alternative method)\r\n");
 800b252:	4b21      	ldr	r3, [pc, #132]	@ (800b2d8 <sx1262_init+0x13c>)
 800b254:	0018      	movs	r0, r3
 800b256:	f7ff fc65 	bl	800ab24 <sx1262_debug_print>
        sx1262_initialized = 1;
 800b25a:	4b1b      	ldr	r3, [pc, #108]	@ (800b2c8 <sx1262_init+0x12c>)
 800b25c:	2201      	movs	r2, #1
 800b25e:	701a      	strb	r2, [r3, #0]
        return 0;
 800b260:	2300      	movs	r3, #0
 800b262:	e015      	b.n	800b290 <sx1262_init+0xf4>
    }
    
    // Configure for LoRa operation
    if (sx1262_configure_lora() != 0) {
 800b264:	f7ff fe94 	bl	800af90 <sx1262_configure_lora>
 800b268:	1e03      	subs	r3, r0, #0
 800b26a:	d009      	beq.n	800b280 <sx1262_init+0xe4>
        sx1262_debug_print("✗ SX1262 LoRa configuration failed\r\n");
 800b26c:	4b1b      	ldr	r3, [pc, #108]	@ (800b2dc <sx1262_init+0x140>)
 800b26e:	0018      	movs	r0, r3
 800b270:	f7ff fc58 	bl	800ab24 <sx1262_debug_print>
        sx1262_initialized = 0;
 800b274:	4b14      	ldr	r3, [pc, #80]	@ (800b2c8 <sx1262_init+0x12c>)
 800b276:	2200      	movs	r2, #0
 800b278:	701a      	strb	r2, [r3, #0]
        return -1;
 800b27a:	2301      	movs	r3, #1
 800b27c:	425b      	negs	r3, r3
 800b27e:	e007      	b.n	800b290 <sx1262_init+0xf4>
    }
    
    sx1262_debug_print("✓ SX1262 LoRa module initialized successfully\r\n");
 800b280:	4b17      	ldr	r3, [pc, #92]	@ (800b2e0 <sx1262_init+0x144>)
 800b282:	0018      	movs	r0, r3
 800b284:	f7ff fc4e 	bl	800ab24 <sx1262_debug_print>
    sx1262_initialized = 1;
 800b288:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c8 <sx1262_init+0x12c>)
 800b28a:	2201      	movs	r2, #1
 800b28c:	701a      	strb	r2, [r3, #0]
    return 0;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	0018      	movs	r0, r3
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	46c0      	nop			@ (mov r8, r8)
 800b298:	08016d9c 	.word	0x08016d9c
 800b29c:	08016dc4 	.word	0x08016dc4
 800b2a0:	08016dfc 	.word	0x08016dfc
 800b2a4:	08016e0c 	.word	0x08016e0c
 800b2a8:	08016e2c 	.word	0x08016e2c
 800b2ac:	08016e4c 	.word	0x08016e4c
 800b2b0:	08016e70 	.word	0x08016e70
 800b2b4:	08016e94 	.word	0x08016e94
 800b2b8:	08016eb8 	.word	0x08016eb8
 800b2bc:	08016edc 	.word	0x08016edc
 800b2c0:	08016ef8 	.word	0x08016ef8
 800b2c4:	200002e0 	.word	0x200002e0
 800b2c8:	200002e1 	.word	0x200002e1
 800b2cc:	08016f14 	.word	0x08016f14
 800b2d0:	08016f50 	.word	0x08016f50
 800b2d4:	08016f88 	.word	0x08016f88
 800b2d8:	08016fc4 	.word	0x08016fc4
 800b2dc:	08017000 	.word	0x08017000
 800b2e0:	08017028 	.word	0x08017028

0800b2e4 <sx1262_send_sensor_data>:

// Send sensor data via SX1262 LoRa
int8_t sx1262_send_sensor_data(float temperature, float pressure, float humidity) {
 800b2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e6:	b09d      	sub	sp, #116	@ 0x74
 800b2e8:	af06      	add	r7, sp, #24
 800b2ea:	6178      	str	r0, [r7, #20]
 800b2ec:	6139      	str	r1, [r7, #16]
 800b2ee:	60fa      	str	r2, [r7, #12]
    if (!sx1262_module_detected) {
 800b2f0:	4b24      	ldr	r3, [pc, #144]	@ (800b384 <sx1262_send_sensor_data+0xa0>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d106      	bne.n	800b306 <sx1262_send_sensor_data+0x22>
        sx1262_debug_print("✗ LoRa transmission failed - no module detected\r\n");
 800b2f8:	4b23      	ldr	r3, [pc, #140]	@ (800b388 <sx1262_send_sensor_data+0xa4>)
 800b2fa:	0018      	movs	r0, r3
 800b2fc:	f7ff fc12 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b300:	2301      	movs	r3, #1
 800b302:	425b      	negs	r3, r3
 800b304:	e03a      	b.n	800b37c <sx1262_send_sensor_data+0x98>
    }
    
    if (!sx1262_initialized) {
 800b306:	4b21      	ldr	r3, [pc, #132]	@ (800b38c <sx1262_send_sensor_data+0xa8>)
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d106      	bne.n	800b31c <sx1262_send_sensor_data+0x38>
        sx1262_debug_print("✗ LoRa transmission failed - module not initialized\r\n");
 800b30e:	4b20      	ldr	r3, [pc, #128]	@ (800b390 <sx1262_send_sensor_data+0xac>)
 800b310:	0018      	movs	r0, r3
 800b312:	f7ff fc07 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b316:	2301      	movs	r3, #1
 800b318:	425b      	negs	r3, r3
 800b31a:	e02f      	b.n	800b37c <sx1262_send_sensor_data+0x98>
    }
    
    char payload[SX1262_PAYLOAD_LENGTH];
    
    // Format sensor data as JSON-like string
    snprintf(payload, sizeof(payload), 
 800b31c:	6978      	ldr	r0, [r7, #20]
 800b31e:	f7f8 fa61 	bl	80037e4 <__aeabi_f2d>
 800b322:	0004      	movs	r4, r0
 800b324:	000d      	movs	r5, r1
 800b326:	6938      	ldr	r0, [r7, #16]
 800b328:	f7f8 fa5c 	bl	80037e4 <__aeabi_f2d>
 800b32c:	6038      	str	r0, [r7, #0]
 800b32e:	6079      	str	r1, [r7, #4]
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f7f8 fa57 	bl	80037e4 <__aeabi_f2d>
 800b336:	0002      	movs	r2, r0
 800b338:	000b      	movs	r3, r1
 800b33a:	4916      	ldr	r1, [pc, #88]	@ (800b394 <sx1262_send_sensor_data+0xb0>)
 800b33c:	2610      	movs	r6, #16
 800b33e:	2008      	movs	r0, #8
 800b340:	1830      	adds	r0, r6, r0
 800b342:	19c0      	adds	r0, r0, r7
 800b344:	9204      	str	r2, [sp, #16]
 800b346:	9305      	str	r3, [sp, #20]
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	9202      	str	r2, [sp, #8]
 800b34e:	9303      	str	r3, [sp, #12]
 800b350:	9400      	str	r4, [sp, #0]
 800b352:	9501      	str	r5, [sp, #4]
 800b354:	000a      	movs	r2, r1
 800b356:	2140      	movs	r1, #64	@ 0x40
 800b358:	f006 fb5c 	bl	8011a14 <sniprintf>
                   "{\"temp\":%.2f,\"press\":%.2f,\"hum\":%.2f,\"node\":\"STM32\"}",
                   temperature, pressure, humidity);
    
    return sx1262_send_message((uint8_t*)payload, strlen(payload));
 800b35c:	0034      	movs	r4, r6
 800b35e:	2508      	movs	r5, #8
 800b360:	1963      	adds	r3, r4, r5
 800b362:	19db      	adds	r3, r3, r7
 800b364:	0018      	movs	r0, r3
 800b366:	f7f4 fed7 	bl	8000118 <strlen>
 800b36a:	0003      	movs	r3, r0
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	1963      	adds	r3, r4, r5
 800b370:	19db      	adds	r3, r3, r7
 800b372:	0011      	movs	r1, r2
 800b374:	0018      	movs	r0, r3
 800b376:	f000 f80f 	bl	800b398 <sx1262_send_message>
 800b37a:	0003      	movs	r3, r0
}
 800b37c:	0018      	movs	r0, r3
 800b37e:	46bd      	mov	sp, r7
 800b380:	b017      	add	sp, #92	@ 0x5c
 800b382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b384:	200002e0 	.word	0x200002e0
 800b388:	0801705c 	.word	0x0801705c
 800b38c:	200002e1 	.word	0x200002e1
 800b390:	08017090 	.word	0x08017090
 800b394:	080170c8 	.word	0x080170c8

0800b398 <sx1262_send_message>:

// Send message via SX1262 LoRa
int8_t sx1262_send_message(const uint8_t* data, uint8_t length) {
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	000a      	movs	r2, r1
 800b3a2:	1cfb      	adds	r3, r7, #3
 800b3a4:	701a      	strb	r2, [r3, #0]
    if (!sx1262_module_detected) {
 800b3a6:	4b39      	ldr	r3, [pc, #228]	@ (800b48c <sx1262_send_message+0xf4>)
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d106      	bne.n	800b3bc <sx1262_send_message+0x24>
        sx1262_debug_print("✗ LoRa transmission failed - no module detected\r\n");
 800b3ae:	4b38      	ldr	r3, [pc, #224]	@ (800b490 <sx1262_send_message+0xf8>)
 800b3b0:	0018      	movs	r0, r3
 800b3b2:	f7ff fbb7 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	425b      	negs	r3, r3
 800b3ba:	e063      	b.n	800b484 <sx1262_send_message+0xec>
    }
    
    if (!sx1262_initialized) {
 800b3bc:	4b35      	ldr	r3, [pc, #212]	@ (800b494 <sx1262_send_message+0xfc>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d106      	bne.n	800b3d2 <sx1262_send_message+0x3a>
        sx1262_debug_print("✗ LoRa transmission failed - module not initialized\r\n");
 800b3c4:	4b34      	ldr	r3, [pc, #208]	@ (800b498 <sx1262_send_message+0x100>)
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	f7ff fbac 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	425b      	negs	r3, r3
 800b3d0:	e058      	b.n	800b484 <sx1262_send_message+0xec>
    }
    
    if (data == NULL || length == 0 || length > SX1262_PAYLOAD_LENGTH) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d007      	beq.n	800b3e8 <sx1262_send_message+0x50>
 800b3d8:	1cfb      	adds	r3, r7, #3
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d003      	beq.n	800b3e8 <sx1262_send_message+0x50>
 800b3e0:	1cfb      	adds	r3, r7, #3
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b40      	cmp	r3, #64	@ 0x40
 800b3e6:	d906      	bls.n	800b3f6 <sx1262_send_message+0x5e>
        sx1262_debug_print("Invalid LoRa message parameters\r\n");
 800b3e8:	4b2c      	ldr	r3, [pc, #176]	@ (800b49c <sx1262_send_message+0x104>)
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	f7ff fb9a 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	425b      	negs	r3, r3
 800b3f4:	e046      	b.n	800b484 <sx1262_send_message+0xec>
    }
    
    // Write payload to buffer
    if (sx1262_spi_write(0x0E, data, length) != 0) {
 800b3f6:	1cfb      	adds	r3, r7, #3
 800b3f8:	781a      	ldrb	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	0019      	movs	r1, r3
 800b3fe:	200e      	movs	r0, #14
 800b400:	f7ff fd02 	bl	800ae08 <sx1262_spi_write>
 800b404:	1e03      	subs	r3, r0, #0
 800b406:	d006      	beq.n	800b416 <sx1262_send_message+0x7e>
        sx1262_debug_print("✗ Failed to write payload to buffer\r\n");
 800b408:	4b25      	ldr	r3, [pc, #148]	@ (800b4a0 <sx1262_send_message+0x108>)
 800b40a:	0018      	movs	r0, r3
 800b40c:	f7ff fb8a 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b410:	2301      	movs	r3, #1
 800b412:	425b      	negs	r3, r3
 800b414:	e036      	b.n	800b484 <sx1262_send_message+0xec>
    }
    
    // Set packet length
    uint8_t pkt_len = length;
 800b416:	210f      	movs	r1, #15
 800b418:	187b      	adds	r3, r7, r1
 800b41a:	1cfa      	adds	r2, r7, #3
 800b41c:	7812      	ldrb	r2, [r2, #0]
 800b41e:	701a      	strb	r2, [r3, #0]
    if (sx1262_spi_write(0x8C, &pkt_len, 1) != 0) {
 800b420:	187b      	adds	r3, r7, r1
 800b422:	2201      	movs	r2, #1
 800b424:	0019      	movs	r1, r3
 800b426:	208c      	movs	r0, #140	@ 0x8c
 800b428:	f7ff fcee 	bl	800ae08 <sx1262_spi_write>
 800b42c:	1e03      	subs	r3, r0, #0
 800b42e:	d006      	beq.n	800b43e <sx1262_send_message+0xa6>
        sx1262_debug_print("✗ Failed to set packet length\r\n");
 800b430:	4b1c      	ldr	r3, [pc, #112]	@ (800b4a4 <sx1262_send_message+0x10c>)
 800b432:	0018      	movs	r0, r3
 800b434:	f7ff fb76 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b438:	2301      	movs	r3, #1
 800b43a:	425b      	negs	r3, r3
 800b43c:	e022      	b.n	800b484 <sx1262_send_message+0xec>
    }
    
    // Start transmission
    uint8_t tx_cmd = 0x83; // TX command
 800b43e:	210e      	movs	r1, #14
 800b440:	187b      	adds	r3, r7, r1
 800b442:	2283      	movs	r2, #131	@ 0x83
 800b444:	701a      	strb	r2, [r3, #0]
    if (sx1262_spi_write(0x83, &tx_cmd, 1) != 0) {
 800b446:	187b      	adds	r3, r7, r1
 800b448:	2201      	movs	r2, #1
 800b44a:	0019      	movs	r1, r3
 800b44c:	2083      	movs	r0, #131	@ 0x83
 800b44e:	f7ff fcdb 	bl	800ae08 <sx1262_spi_write>
 800b452:	1e03      	subs	r3, r0, #0
 800b454:	d006      	beq.n	800b464 <sx1262_send_message+0xcc>
        sx1262_debug_print("✗ Failed to start transmission\r\n");
 800b456:	4b14      	ldr	r3, [pc, #80]	@ (800b4a8 <sx1262_send_message+0x110>)
 800b458:	0018      	movs	r0, r3
 800b45a:	f7ff fb63 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b45e:	2301      	movs	r3, #1
 800b460:	425b      	negs	r3, r3
 800b462:	e00f      	b.n	800b484 <sx1262_send_message+0xec>
    }
    
    // Wait for transmission to complete (BUSY will go low)
    if (!sx1262_wait_for_busy()) {
 800b464:	f7ff fb82 	bl	800ab6c <sx1262_wait_for_busy>
 800b468:	1e03      	subs	r3, r0, #0
 800b46a:	d106      	bne.n	800b47a <sx1262_send_message+0xe2>
        sx1262_debug_print("✗ LoRa transmission timeout\r\n");
 800b46c:	4b0f      	ldr	r3, [pc, #60]	@ (800b4ac <sx1262_send_message+0x114>)
 800b46e:	0018      	movs	r0, r3
 800b470:	f7ff fb58 	bl	800ab24 <sx1262_debug_print>
                return -1;
 800b474:	2301      	movs	r3, #1
 800b476:	425b      	negs	r3, r3
 800b478:	e004      	b.n	800b484 <sx1262_send_message+0xec>
    }
    
    sx1262_debug_print("✓ Message sent successfully via SX1262 LoRa\r\n");
 800b47a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b0 <sx1262_send_message+0x118>)
 800b47c:	0018      	movs	r0, r3
 800b47e:	f7ff fb51 	bl	800ab24 <sx1262_debug_print>
    return 0;
 800b482:	2300      	movs	r3, #0
}
 800b484:	0018      	movs	r0, r3
 800b486:	46bd      	mov	sp, r7
 800b488:	b004      	add	sp, #16
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	200002e0 	.word	0x200002e0
 800b490:	0801705c 	.word	0x0801705c
 800b494:	200002e1 	.word	0x200002e1
 800b498:	08017090 	.word	0x08017090
 800b49c:	08017100 	.word	0x08017100
 800b4a0:	08017124 	.word	0x08017124
 800b4a4:	0801714c 	.word	0x0801714c
 800b4a8:	08017170 	.word	0x08017170
 800b4ac:	08017194 	.word	0x08017194
 800b4b0:	080171b4 	.word	0x080171b4

0800b4b4 <sx1262_print_config>:
    
        return -1;
    }
    
// Print SX1262 configuration
void sx1262_print_config(void) {
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	af00      	add	r7, sp, #0
    sx1262_debug_print("\r\n=== SX1262 LoRa Configuration ===\r\n");
 800b4b8:	4b27      	ldr	r3, [pc, #156]	@ (800b558 <sx1262_print_config+0xa4>)
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	f7ff fb32 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("Status: ");
 800b4c0:	4b26      	ldr	r3, [pc, #152]	@ (800b55c <sx1262_print_config+0xa8>)
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	f7ff fb2e 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print(sx1262_module_detected ? "Module detected\r\n" : "No module detected\r\n");
 800b4c8:	4b25      	ldr	r3, [pc, #148]	@ (800b560 <sx1262_print_config+0xac>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <sx1262_print_config+0x20>
 800b4d0:	4b24      	ldr	r3, [pc, #144]	@ (800b564 <sx1262_print_config+0xb0>)
 800b4d2:	e000      	b.n	800b4d6 <sx1262_print_config+0x22>
 800b4d4:	4b24      	ldr	r3, [pc, #144]	@ (800b568 <sx1262_print_config+0xb4>)
 800b4d6:	0018      	movs	r0, r3
 800b4d8:	f7ff fb24 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("Initialized: ");
 800b4dc:	4b23      	ldr	r3, [pc, #140]	@ (800b56c <sx1262_print_config+0xb8>)
 800b4de:	0018      	movs	r0, r3
 800b4e0:	f7ff fb20 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print(sx1262_initialized ? "Yes\r\n" : "No\r\n");
 800b4e4:	4b22      	ldr	r3, [pc, #136]	@ (800b570 <sx1262_print_config+0xbc>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <sx1262_print_config+0x3c>
 800b4ec:	4b21      	ldr	r3, [pc, #132]	@ (800b574 <sx1262_print_config+0xc0>)
 800b4ee:	e000      	b.n	800b4f2 <sx1262_print_config+0x3e>
 800b4f0:	4b21      	ldr	r3, [pc, #132]	@ (800b578 <sx1262_print_config+0xc4>)
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	f7ff fb16 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("Frequency: 868 MHz (EU band)\r\n");
 800b4f8:	4b20      	ldr	r3, [pc, #128]	@ (800b57c <sx1262_print_config+0xc8>)
 800b4fa:	0018      	movs	r0, r3
 800b4fc:	f7ff fb12 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("Spreading Factor: SF7\r\n");
 800b500:	4b1f      	ldr	r3, [pc, #124]	@ (800b580 <sx1262_print_config+0xcc>)
 800b502:	0018      	movs	r0, r3
 800b504:	f7ff fb0e 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("Bandwidth: 125 kHz\r\n");
 800b508:	4b1e      	ldr	r3, [pc, #120]	@ (800b584 <sx1262_print_config+0xd0>)
 800b50a:	0018      	movs	r0, r3
 800b50c:	f7ff fb0a 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("Coding Rate: 4/5\r\n");
 800b510:	4b1d      	ldr	r3, [pc, #116]	@ (800b588 <sx1262_print_config+0xd4>)
 800b512:	0018      	movs	r0, r3
 800b514:	f7ff fb06 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("TX Power: 14 dBm\r\n");
 800b518:	4b1c      	ldr	r3, [pc, #112]	@ (800b58c <sx1262_print_config+0xd8>)
 800b51a:	0018      	movs	r0, r3
 800b51c:	f7ff fb02 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("Sync Word: 0x12\r\n");
 800b520:	4b1b      	ldr	r3, [pc, #108]	@ (800b590 <sx1262_print_config+0xdc>)
 800b522:	0018      	movs	r0, r3
 800b524:	f7ff fafe 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("Payload Length: 64 bytes\r\n");
 800b528:	4b1a      	ldr	r3, [pc, #104]	@ (800b594 <sx1262_print_config+0xe0>)
 800b52a:	0018      	movs	r0, r3
 800b52c:	f7ff fafa 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("Preamble Length: 8 symbols\r\n");
 800b530:	4b19      	ldr	r3, [pc, #100]	@ (800b598 <sx1262_print_config+0xe4>)
 800b532:	0018      	movs	r0, r3
 800b534:	f7ff faf6 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("CRC: Enabled\r\n");
 800b538:	4b18      	ldr	r3, [pc, #96]	@ (800b59c <sx1262_print_config+0xe8>)
 800b53a:	0018      	movs	r0, r3
 800b53c:	f7ff faf2 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("IQ Inversion: Disabled\r\n");
 800b540:	4b17      	ldr	r3, [pc, #92]	@ (800b5a0 <sx1262_print_config+0xec>)
 800b542:	0018      	movs	r0, r3
 800b544:	f7ff faee 	bl	800ab24 <sx1262_debug_print>
    sx1262_debug_print("========================\r\n");
 800b548:	4b16      	ldr	r3, [pc, #88]	@ (800b5a4 <sx1262_print_config+0xf0>)
 800b54a:	0018      	movs	r0, r3
 800b54c:	f7ff faea 	bl	800ab24 <sx1262_debug_print>
}
 800b550:	46c0      	nop			@ (mov r8, r8)
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	46c0      	nop			@ (mov r8, r8)
 800b558:	080171fc 	.word	0x080171fc
 800b55c:	08017224 	.word	0x08017224
 800b560:	200002e0 	.word	0x200002e0
 800b564:	08017230 	.word	0x08017230
 800b568:	08017244 	.word	0x08017244
 800b56c:	0801725c 	.word	0x0801725c
 800b570:	200002e1 	.word	0x200002e1
 800b574:	0801726c 	.word	0x0801726c
 800b578:	08017274 	.word	0x08017274
 800b57c:	0801727c 	.word	0x0801727c
 800b580:	0801729c 	.word	0x0801729c
 800b584:	080172b4 	.word	0x080172b4
 800b588:	080172cc 	.word	0x080172cc
 800b58c:	080172e0 	.word	0x080172e0
 800b590:	080172f4 	.word	0x080172f4
 800b594:	08017308 	.word	0x08017308
 800b598:	08017324 	.word	0x08017324
 800b59c:	08017344 	.word	0x08017344
 800b5a0:	08017354 	.word	0x08017354
 800b5a4:	08017370 	.word	0x08017370

0800b5a8 <sx1262_test_transmission>:

// Test SX1262 transmission
int8_t sx1262_test_transmission(void) {
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
    const char* test_message = "Hello SX1262 from STM32!";
 800b5ae:	4b11      	ldr	r3, [pc, #68]	@ (800b5f4 <sx1262_test_transmission+0x4c>)
 800b5b0:	607b      	str	r3, [r7, #4]
    
    sx1262_debug_print("Testing SX1262 LoRa transmission...\r\n");
 800b5b2:	4b11      	ldr	r3, [pc, #68]	@ (800b5f8 <sx1262_test_transmission+0x50>)
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	f7ff fab5 	bl	800ab24 <sx1262_debug_print>
    
    if (sx1262_send_message((uint8_t*)test_message, strlen(test_message)) == 0) {
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	0018      	movs	r0, r3
 800b5be:	f7f4 fdab 	bl	8000118 <strlen>
 800b5c2:	0003      	movs	r3, r0
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	0011      	movs	r1, r2
 800b5ca:	0018      	movs	r0, r3
 800b5cc:	f7ff fee4 	bl	800b398 <sx1262_send_message>
 800b5d0:	1e03      	subs	r3, r0, #0
 800b5d2:	d105      	bne.n	800b5e0 <sx1262_test_transmission+0x38>
        sx1262_debug_print("✓ SX1262 transmission test successful\r\n");
 800b5d4:	4b09      	ldr	r3, [pc, #36]	@ (800b5fc <sx1262_test_transmission+0x54>)
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	f7ff faa4 	bl	800ab24 <sx1262_debug_print>
        return 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e005      	b.n	800b5ec <sx1262_test_transmission+0x44>
    } else {
        sx1262_debug_print("✗ SX1262 transmission test failed\r\n");
 800b5e0:	4b07      	ldr	r3, [pc, #28]	@ (800b600 <sx1262_test_transmission+0x58>)
 800b5e2:	0018      	movs	r0, r3
 800b5e4:	f7ff fa9e 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	425b      	negs	r3, r3
    }
}
 800b5ec:	0018      	movs	r0, r3
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	b002      	add	sp, #8
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	0801738c 	.word	0x0801738c
 800b5f8:	080173a8 	.word	0x080173a8
 800b5fc:	080173d0 	.word	0x080173d0
 800b600:	080173fc 	.word	0x080173fc

0800b604 <lora_scan_signals>:

// Legacy function implementations for compatibility

// Scan for LoRa signals (placeholder implementation)
int8_t lora_scan_signals(uint32_t scan_time_ms) {
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
    sx1262_debug_print("LoRa signal scanning not implemented yet\r\n");
 800b60c:	4b04      	ldr	r3, [pc, #16]	@ (800b620 <lora_scan_signals+0x1c>)
 800b60e:	0018      	movs	r0, r3
 800b610:	f7ff fa88 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b614:	2301      	movs	r3, #1
 800b616:	425b      	negs	r3, r3
    }
 800b618:	0018      	movs	r0, r3
 800b61a:	46bd      	mov	sp, r7
 800b61c:	b002      	add	sp, #8
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	08017424 	.word	0x08017424

0800b624 <lora_start_monitoring>:
    
// Start LoRa monitoring (placeholder implementation)
int8_t lora_start_monitoring(void) {
 800b624:	b580      	push	{r7, lr}
 800b626:	af00      	add	r7, sp, #0
    sx1262_debug_print("LoRa monitoring not implemented yet\r\n");
 800b628:	4b04      	ldr	r3, [pc, #16]	@ (800b63c <lora_start_monitoring+0x18>)
 800b62a:	0018      	movs	r0, r3
 800b62c:	f7ff fa7a 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b630:	2301      	movs	r3, #1
 800b632:	425b      	negs	r3, r3
    }
 800b634:	0018      	movs	r0, r3
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	46c0      	nop			@ (mov r8, r8)
 800b63c:	08017450 	.word	0x08017450

0800b640 <lora_stop_monitoring>:
    
// Stop LoRa monitoring (placeholder implementation)
int8_t lora_stop_monitoring(void) {
 800b640:	b580      	push	{r7, lr}
 800b642:	af00      	add	r7, sp, #0
    sx1262_debug_print("LoRa monitoring not implemented yet\r\n");
 800b644:	4b04      	ldr	r3, [pc, #16]	@ (800b658 <lora_stop_monitoring+0x18>)
 800b646:	0018      	movs	r0, r3
 800b648:	f7ff fa6c 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b64c:	2301      	movs	r3, #1
 800b64e:	425b      	negs	r3, r3
    }
 800b650:	0018      	movs	r0, r3
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	46c0      	nop			@ (mov r8, r8)
 800b658:	08017450 	.word	0x08017450

0800b65c <lora_get_rssi>:
    
// Get RSSI value (placeholder implementation)
int8_t lora_get_rssi(void) {
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
    sx1262_debug_print("RSSI measurement not implemented yet\r\n");
 800b660:	4b04      	ldr	r3, [pc, #16]	@ (800b674 <lora_get_rssi+0x18>)
 800b662:	0018      	movs	r0, r3
 800b664:	f7ff fa5e 	bl	800ab24 <sx1262_debug_print>
        return -1;
 800b668:	2301      	movs	r3, #1
 800b66a:	425b      	negs	r3, r3
 800b66c:	0018      	movs	r0, r3
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	46c0      	nop			@ (mov r8, r8)
 800b674:	08017478 	.word	0x08017478

0800b678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b678:	b590      	push	{r4, r7, lr}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b67e:	f000 fdf7 	bl	800c270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b682:	f000 f9d5 	bl	800ba30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b686:	f000 fb1b 	bl	800bcc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800b68a:	f000 fa97 	bl	800bbbc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800b68e:	f000 fa17 	bl	800bac0 <MX_I2C1_Init>
  MX_USART4_UART_Init();
 800b692:	f000 fae1 	bl	800bc58 <MX_USART4_UART_Init>
  MX_SPI1_Init();
 800b696:	f000 fa53 	bl	800bb40 <MX_SPI1_Init>
  
  // Small delay to ensure I2C bus is stable
  HAL_Delay(100);
 800b69a:	2064      	movs	r0, #100	@ 0x64
 800b69c:	f000 fe6e 	bl	800c37c <HAL_Delay>
  
  /* USER CODE BEGIN 2 */
  // System initialization messages
  command_interface_send_response("========================================\r\n");
 800b6a0:	4bbb      	ldr	r3, [pc, #748]	@ (800b990 <main+0x318>)
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f7fd fdce 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("IoT Prototype System - STM32G071RB\r\n");
 800b6a8:	4bba      	ldr	r3, [pc, #744]	@ (800b994 <main+0x31c>)
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	f7fd fdca 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("========================================\r\n");
 800b6b0:	4bb7      	ldr	r3, [pc, #732]	@ (800b990 <main+0x318>)
 800b6b2:	0018      	movs	r0, r3
 800b6b4:	f7fd fdc6 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("System Clock: 16 MHz\r\n");
 800b6b8:	4bb7      	ldr	r3, [pc, #732]	@ (800b998 <main+0x320>)
 800b6ba:	0018      	movs	r0, r3
 800b6bc:	f7fd fdc2 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("I2C1 Configuration: PA9 (SCL), PA10 (SDA)\r\n");
 800b6c0:	4bb6      	ldr	r3, [pc, #728]	@ (800b99c <main+0x324>)
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	f7fd fdbe 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("USART1: PC4 (TX), PC5 (RX) - 115200 baud\r\n");
 800b6c8:	4bb5      	ldr	r3, [pc, #724]	@ (800b9a0 <main+0x328>)
 800b6ca:	0018      	movs	r0, r3
 800b6cc:	f7fd fdba 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("USART2: PA2 (TX), PA3 (RX) - 115200 baud\r\n");
 800b6d0:	4bb4      	ldr	r3, [pc, #720]	@ (800b9a4 <main+0x32c>)
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	f7fd fdb6 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("USART4: PA0 (TX), PA1 (RX) - 115200 baud\r\n");
 800b6d8:	4bb3      	ldr	r3, [pc, #716]	@ (800b9a8 <main+0x330>)
 800b6da:	0018      	movs	r0, r3
 800b6dc:	f7fd fdb2 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("SPI1: PA5 (SCK), PA6 (MISO), PA7 (MOSI), PA4 (NSS)\r\n");
 800b6e0:	4bb2      	ldr	r3, [pc, #712]	@ (800b9ac <main+0x334>)
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	f7fd fdae 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("SX1262 LoRa: PA4 (NSS), PC0 (RESET), PC1 (BUSY)\r\n");
 800b6e8:	4bb1      	ldr	r3, [pc, #708]	@ (800b9b0 <main+0x338>)
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	f7fd fdaa 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("LED Status: PA5\r\n");
 800b6f0:	4bb0      	ldr	r3, [pc, #704]	@ (800b9b4 <main+0x33c>)
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	f7fd fda6 	bl	8009244 <command_interface_send_response>
  command_interface_send_response("========================================\r\n");
 800b6f8:	4ba5      	ldr	r3, [pc, #660]	@ (800b990 <main+0x318>)
 800b6fa:	0018      	movs	r0, r3
 800b6fc:	f7fd fda2 	bl	8009244 <command_interface_send_response>
  
  command_interface_send_response_usart4("========================================\r\n");
 800b700:	4ba3      	ldr	r3, [pc, #652]	@ (800b990 <main+0x318>)
 800b702:	0018      	movs	r0, r3
 800b704:	f7fd fdb4 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("IoT Prototype System - STM32G071RB\r\n");
 800b708:	4ba2      	ldr	r3, [pc, #648]	@ (800b994 <main+0x31c>)
 800b70a:	0018      	movs	r0, r3
 800b70c:	f7fd fdb0 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("========================================\r\n");
 800b710:	4b9f      	ldr	r3, [pc, #636]	@ (800b990 <main+0x318>)
 800b712:	0018      	movs	r0, r3
 800b714:	f7fd fdac 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("System Clock: 16 MHz\r\n");
 800b718:	4b9f      	ldr	r3, [pc, #636]	@ (800b998 <main+0x320>)
 800b71a:	0018      	movs	r0, r3
 800b71c:	f7fd fda8 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("I2C1 Configuration: PA9 (SCL), PA10 (SDA)\r\n");
 800b720:	4b9e      	ldr	r3, [pc, #632]	@ (800b99c <main+0x324>)
 800b722:	0018      	movs	r0, r3
 800b724:	f7fd fda4 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("USART1: PC4 (TX), PC5 (RX) - 115200 baud\r\n");
 800b728:	4b9d      	ldr	r3, [pc, #628]	@ (800b9a0 <main+0x328>)
 800b72a:	0018      	movs	r0, r3
 800b72c:	f7fd fda0 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("USART2: PA2 (TX), PA3 (RX) - 115200 baud\r\n");
 800b730:	4b9c      	ldr	r3, [pc, #624]	@ (800b9a4 <main+0x32c>)
 800b732:	0018      	movs	r0, r3
 800b734:	f7fd fd9c 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("USART4: PA0 (TX), PA1 (RX) - 115200 baud\r\n");
 800b738:	4b9b      	ldr	r3, [pc, #620]	@ (800b9a8 <main+0x330>)
 800b73a:	0018      	movs	r0, r3
 800b73c:	f7fd fd98 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("SPI1: PA5 (SCK), PA6 (MISO), PA7 (MOSI), PA4 (NSS)\r\n");
 800b740:	4b9a      	ldr	r3, [pc, #616]	@ (800b9ac <main+0x334>)
 800b742:	0018      	movs	r0, r3
 800b744:	f7fd fd94 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("SX1262 LoRa: PA4 (NSS), PC0 (RESET), PC1 (BUSY)\r\n");
 800b748:	4b99      	ldr	r3, [pc, #612]	@ (800b9b0 <main+0x338>)
 800b74a:	0018      	movs	r0, r3
 800b74c:	f7fd fd90 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("LED Status: PA5\r\n");
 800b750:	4b98      	ldr	r3, [pc, #608]	@ (800b9b4 <main+0x33c>)
 800b752:	0018      	movs	r0, r3
 800b754:	f7fd fd8c 	bl	8009270 <command_interface_send_response_usart4>
  command_interface_send_response_usart4("========================================\r\n");
 800b758:	4b8d      	ldr	r3, [pc, #564]	@ (800b990 <main+0x318>)
 800b75a:	0018      	movs	r0, r3
 800b75c:	f7fd fd88 	bl	8009270 <command_interface_send_response_usart4>
  
  // Scan I2C bus for devices
  command_interface_send_response("\r\nScanning I2C bus for devices...\r\n");
 800b760:	4b95      	ldr	r3, [pc, #596]	@ (800b9b8 <main+0x340>)
 800b762:	0018      	movs	r0, r3
 800b764:	f7fd fd6e 	bl	8009244 <command_interface_send_response>
  command_interface_send_response_usart4("\r\nScanning I2C bus for devices...\r\n");
 800b768:	4b93      	ldr	r3, [pc, #588]	@ (800b9b8 <main+0x340>)
 800b76a:	0018      	movs	r0, r3
 800b76c:	f7fd fd80 	bl	8009270 <command_interface_send_response_usart4>
  i2c_scan_bus();
 800b770:	f7f8 f950 	bl	8003a14 <i2c_scan_bus>
  
  // Test I2C configuration
  command_interface_send_response("\r\nTesting I2C configuration...\r\n");
 800b774:	4b91      	ldr	r3, [pc, #580]	@ (800b9bc <main+0x344>)
 800b776:	0018      	movs	r0, r3
 800b778:	f7fd fd64 	bl	8009244 <command_interface_send_response>
  command_interface_send_response_usart4("\r\nTesting I2C configuration...\r\n");
 800b77c:	4b8f      	ldr	r3, [pc, #572]	@ (800b9bc <main+0x344>)
 800b77e:	0018      	movs	r0, r3
 800b780:	f7fd fd76 	bl	8009270 <command_interface_send_response_usart4>
  
  // Test I2C bus with a simple ping
  HAL_StatusTypeDef i2c_test = HAL_I2C_IsDeviceReady(&hi2c1, 0x76 << 1, 3, 1000);
 800b784:	1dfc      	adds	r4, r7, #7
 800b786:	23fa      	movs	r3, #250	@ 0xfa
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	488d      	ldr	r0, [pc, #564]	@ (800b9c0 <main+0x348>)
 800b78c:	2203      	movs	r2, #3
 800b78e:	21ec      	movs	r1, #236	@ 0xec
 800b790:	f001 fb8e 	bl	800ceb0 <HAL_I2C_IsDeviceReady>
 800b794:	0003      	movs	r3, r0
 800b796:	7023      	strb	r3, [r4, #0]
  if (i2c_test == HAL_OK) {
 800b798:	1dfb      	adds	r3, r7, #7
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d108      	bne.n	800b7b2 <main+0x13a>
    command_interface_send_response("✓ I2C bus test successful - device responds at 0x76\r\n");
 800b7a0:	4b88      	ldr	r3, [pc, #544]	@ (800b9c4 <main+0x34c>)
 800b7a2:	0018      	movs	r0, r3
 800b7a4:	f7fd fd4e 	bl	8009244 <command_interface_send_response>
    command_interface_send_response_usart4("✓ I2C bus test successful - device responds at 0x76\r\n");
 800b7a8:	4b86      	ldr	r3, [pc, #536]	@ (800b9c4 <main+0x34c>)
 800b7aa:	0018      	movs	r0, r3
 800b7ac:	f7fd fd60 	bl	8009270 <command_interface_send_response_usart4>
 800b7b0:	e007      	b.n	800b7c2 <main+0x14a>
  } else {
    command_interface_send_response("✗ I2C bus test failed - no device at 0x76\r\n");
 800b7b2:	4b85      	ldr	r3, [pc, #532]	@ (800b9c8 <main+0x350>)
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	f7fd fd45 	bl	8009244 <command_interface_send_response>
    command_interface_send_response_usart4("✗ I2C bus test failed - no device at 0x76\r\n");
 800b7ba:	4b83      	ldr	r3, [pc, #524]	@ (800b9c8 <main+0x350>)
 800b7bc:	0018      	movs	r0, r3
 800b7be:	f7fd fd57 	bl	8009270 <command_interface_send_response_usart4>
  }
  
  // Check BME680 sensor presence
  command_interface_send_response("\r\nChecking BME680 sensor presence...\r\n");
 800b7c2:	4b82      	ldr	r3, [pc, #520]	@ (800b9cc <main+0x354>)
 800b7c4:	0018      	movs	r0, r3
 800b7c6:	f7fd fd3d 	bl	8009244 <command_interface_send_response>
  command_interface_send_response_usart4("\r\nChecking BME680 sensor presence...\r\n");
 800b7ca:	4b80      	ldr	r3, [pc, #512]	@ (800b9cc <main+0x354>)
 800b7cc:	0018      	movs	r0, r3
 800b7ce:	f7fd fd4f 	bl	8009270 <command_interface_send_response_usart4>
  
  if (bme680_check_sensor_presence() == BME68X_OK) {
 800b7d2:	f7f8 fa5b 	bl	8003c8c <bme680_check_sensor_presence>
 800b7d6:	1e03      	subs	r3, r0, #0
 800b7d8:	d155      	bne.n	800b886 <main+0x20e>
    command_interface_send_response("✓ BME680 sensor detected on I2C bus (Address: 0x76)\r\n");
 800b7da:	4b7d      	ldr	r3, [pc, #500]	@ (800b9d0 <main+0x358>)
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f7fd fd31 	bl	8009244 <command_interface_send_response>
    command_interface_send_response_usart4("✓ BME680 sensor detected on I2C bus (Address: 0x76)\r\n");
 800b7e2:	4b7b      	ldr	r3, [pc, #492]	@ (800b9d0 <main+0x358>)
 800b7e4:	0018      	movs	r0, r3
 800b7e6:	f7fd fd43 	bl	8009270 <command_interface_send_response_usart4>
    
    // Initialize BME680 sensor
    command_interface_send_response("Initializing BME680 sensor...\r\n");
 800b7ea:	4b7a      	ldr	r3, [pc, #488]	@ (800b9d4 <main+0x35c>)
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	f7fd fd29 	bl	8009244 <command_interface_send_response>
    command_interface_send_response_usart4("Initializing BME680 sensor...\r\n");
 800b7f2:	4b78      	ldr	r3, [pc, #480]	@ (800b9d4 <main+0x35c>)
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	f7fd fd3b 	bl	8009270 <command_interface_send_response_usart4>
    
    if (bme680_init_sensor() == BME68X_OK) {
 800b7fa:	f7f8 fb31 	bl	8003e60 <bme680_init_sensor>
 800b7fe:	1e03      	subs	r3, r0, #0
 800b800:	d128      	bne.n	800b854 <main+0x1dc>
      command_interface_send_response("✓ BME680 sensor initialized successfully\r\n");
 800b802:	4b75      	ldr	r3, [pc, #468]	@ (800b9d8 <main+0x360>)
 800b804:	0018      	movs	r0, r3
 800b806:	f7fd fd1d 	bl	8009244 <command_interface_send_response>
      command_interface_send_response("  - Temperature oversampling: 1x\r\n");
 800b80a:	4b74      	ldr	r3, [pc, #464]	@ (800b9dc <main+0x364>)
 800b80c:	0018      	movs	r0, r3
 800b80e:	f7fd fd19 	bl	8009244 <command_interface_send_response>
      command_interface_send_response("  - Pressure oversampling: 1x\r\n");
 800b812:	4b73      	ldr	r3, [pc, #460]	@ (800b9e0 <main+0x368>)
 800b814:	0018      	movs	r0, r3
 800b816:	f7fd fd15 	bl	8009244 <command_interface_send_response>
      command_interface_send_response("  - Humidity oversampling: 1x\r\n");
 800b81a:	4b72      	ldr	r3, [pc, #456]	@ (800b9e4 <main+0x36c>)
 800b81c:	0018      	movs	r0, r3
 800b81e:	f7fd fd11 	bl	8009244 <command_interface_send_response>
      command_interface_send_response("  - Gas sensor: Disabled\r\n");
 800b822:	4b71      	ldr	r3, [pc, #452]	@ (800b9e8 <main+0x370>)
 800b824:	0018      	movs	r0, r3
 800b826:	f7fd fd0d 	bl	8009244 <command_interface_send_response>
      
      command_interface_send_response_usart4("✓ BME680 sensor initialized successfully\r\n");
 800b82a:	4b6b      	ldr	r3, [pc, #428]	@ (800b9d8 <main+0x360>)
 800b82c:	0018      	movs	r0, r3
 800b82e:	f7fd fd1f 	bl	8009270 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Temperature oversampling: 1x\r\n");
 800b832:	4b6a      	ldr	r3, [pc, #424]	@ (800b9dc <main+0x364>)
 800b834:	0018      	movs	r0, r3
 800b836:	f7fd fd1b 	bl	8009270 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Pressure oversampling: 1x\r\n");
 800b83a:	4b69      	ldr	r3, [pc, #420]	@ (800b9e0 <main+0x368>)
 800b83c:	0018      	movs	r0, r3
 800b83e:	f7fd fd17 	bl	8009270 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Humidity oversampling: 1x\r\n");
 800b842:	4b68      	ldr	r3, [pc, #416]	@ (800b9e4 <main+0x36c>)
 800b844:	0018      	movs	r0, r3
 800b846:	f7fd fd13 	bl	8009270 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Gas sensor: Disabled\r\n");
 800b84a:	4b67      	ldr	r3, [pc, #412]	@ (800b9e8 <main+0x370>)
 800b84c:	0018      	movs	r0, r3
 800b84e:	f7fd fd0f 	bl	8009270 <command_interface_send_response_usart4>
 800b852:	e070      	b.n	800b936 <main+0x2be>
    } else {
      command_interface_send_response("✗ Error initializing BME680 sensor\r\n");
 800b854:	4b65      	ldr	r3, [pc, #404]	@ (800b9ec <main+0x374>)
 800b856:	0018      	movs	r0, r3
 800b858:	f7fd fcf4 	bl	8009244 <command_interface_send_response>
      command_interface_send_response("  - Check sensor power supply (3.3V)\r\n");
 800b85c:	4b64      	ldr	r3, [pc, #400]	@ (800b9f0 <main+0x378>)
 800b85e:	0018      	movs	r0, r3
 800b860:	f7fd fcf0 	bl	8009244 <command_interface_send_response>
      command_interface_send_response("  - Verify I2C connections\r\n");
 800b864:	4b63      	ldr	r3, [pc, #396]	@ (800b9f4 <main+0x37c>)
 800b866:	0018      	movs	r0, r3
 800b868:	f7fd fcec 	bl	8009244 <command_interface_send_response>
      
      command_interface_send_response_usart4("✗ Error initializing BME680 sensor\r\n");
 800b86c:	4b5f      	ldr	r3, [pc, #380]	@ (800b9ec <main+0x374>)
 800b86e:	0018      	movs	r0, r3
 800b870:	f7fd fcfe 	bl	8009270 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Check sensor power supply (3.3V)\r\n");
 800b874:	4b5e      	ldr	r3, [pc, #376]	@ (800b9f0 <main+0x378>)
 800b876:	0018      	movs	r0, r3
 800b878:	f7fd fcfa 	bl	8009270 <command_interface_send_response_usart4>
      command_interface_send_response_usart4("  - Verify I2C connections\r\n");
 800b87c:	4b5d      	ldr	r3, [pc, #372]	@ (800b9f4 <main+0x37c>)
 800b87e:	0018      	movs	r0, r3
 800b880:	f7fd fcf6 	bl	8009270 <command_interface_send_response_usart4>
 800b884:	e057      	b.n	800b936 <main+0x2be>
    }
  } else {
    command_interface_send_response("✗ BME680 sensor not found on I2C bus\r\n");
 800b886:	4b5c      	ldr	r3, [pc, #368]	@ (800b9f8 <main+0x380>)
 800b888:	0018      	movs	r0, r3
 800b88a:	f7fd fcdb 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("Troubleshooting steps:\r\n");
 800b88e:	4b5b      	ldr	r3, [pc, #364]	@ (800b9fc <main+0x384>)
 800b890:	0018      	movs	r0, r3
 800b892:	f7fd fcd7 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  1. Check I2C connections:\r\n");
 800b896:	4b5a      	ldr	r3, [pc, #360]	@ (800ba00 <main+0x388>)
 800b898:	0018      	movs	r0, r3
 800b89a:	f7fd fcd3 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("     - PA9 (SCL) → BME680 SCL\r\n");
 800b89e:	4b59      	ldr	r3, [pc, #356]	@ (800ba04 <main+0x38c>)
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	f7fd fccf 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("     - PA10 (SDA) → BME680 SDA\r\n");
 800b8a6:	4b58      	ldr	r3, [pc, #352]	@ (800ba08 <main+0x390>)
 800b8a8:	0018      	movs	r0, r3
 800b8aa:	f7fd fccb 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  2. Verify power supply:\r\n");
 800b8ae:	4b57      	ldr	r3, [pc, #348]	@ (800ba0c <main+0x394>)
 800b8b0:	0018      	movs	r0, r3
 800b8b2:	f7fd fcc7 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("     - BME680 VCC → 3.3V\r\n");
 800b8b6:	4b56      	ldr	r3, [pc, #344]	@ (800ba10 <main+0x398>)
 800b8b8:	0018      	movs	r0, r3
 800b8ba:	f7fd fcc3 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("     - BME680 GND → GND\r\n");
 800b8be:	4b55      	ldr	r3, [pc, #340]	@ (800ba14 <main+0x39c>)
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f7fd fcbf 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  3. Check pull-up resistors (4.7kΩ recommended)\r\n");
 800b8c6:	4b54      	ldr	r3, [pc, #336]	@ (800ba18 <main+0x3a0>)
 800b8c8:	0018      	movs	r0, r3
 800b8ca:	f7fd fcbb 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("  4. Verify I2C address (default: 0x76)\r\n");
 800b8ce:	4b53      	ldr	r3, [pc, #332]	@ (800ba1c <main+0x3a4>)
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	f7fd fcb7 	bl	8009244 <command_interface_send_response>
    command_interface_send_response("System will continue without sensor functionality\r\n");
 800b8d6:	4b52      	ldr	r3, [pc, #328]	@ (800ba20 <main+0x3a8>)
 800b8d8:	0018      	movs	r0, r3
 800b8da:	f7fd fcb3 	bl	8009244 <command_interface_send_response>
    
    command_interface_send_response_usart4("✗ BME680 sensor not found on I2C bus\r\n");
 800b8de:	4b46      	ldr	r3, [pc, #280]	@ (800b9f8 <main+0x380>)
 800b8e0:	0018      	movs	r0, r3
 800b8e2:	f7fd fcc5 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("Troubleshooting steps:\r\n");
 800b8e6:	4b45      	ldr	r3, [pc, #276]	@ (800b9fc <main+0x384>)
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	f7fd fcc1 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  1. Check I2C connections:\r\n");
 800b8ee:	4b44      	ldr	r3, [pc, #272]	@ (800ba00 <main+0x388>)
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	f7fd fcbd 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - PA9 (SCL) → BME680 SCL\r\n");
 800b8f6:	4b43      	ldr	r3, [pc, #268]	@ (800ba04 <main+0x38c>)
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	f7fd fcb9 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - PA10 (SDA) → BME680 SDA\r\n");
 800b8fe:	4b42      	ldr	r3, [pc, #264]	@ (800ba08 <main+0x390>)
 800b900:	0018      	movs	r0, r3
 800b902:	f7fd fcb5 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  2. Verify power supply:\r\n");
 800b906:	4b41      	ldr	r3, [pc, #260]	@ (800ba0c <main+0x394>)
 800b908:	0018      	movs	r0, r3
 800b90a:	f7fd fcb1 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - BME680 VCC → 3.3V\r\n");
 800b90e:	4b40      	ldr	r3, [pc, #256]	@ (800ba10 <main+0x398>)
 800b910:	0018      	movs	r0, r3
 800b912:	f7fd fcad 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("     - BME680 GND → GND\r\n");
 800b916:	4b3f      	ldr	r3, [pc, #252]	@ (800ba14 <main+0x39c>)
 800b918:	0018      	movs	r0, r3
 800b91a:	f7fd fca9 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  3. Check pull-up resistors (4.7kΩ recommended)\r\n");
 800b91e:	4b3e      	ldr	r3, [pc, #248]	@ (800ba18 <main+0x3a0>)
 800b920:	0018      	movs	r0, r3
 800b922:	f7fd fca5 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("  4. Verify I2C address (default: 0x76)\r\n");
 800b926:	4b3d      	ldr	r3, [pc, #244]	@ (800ba1c <main+0x3a4>)
 800b928:	0018      	movs	r0, r3
 800b92a:	f7fd fca1 	bl	8009270 <command_interface_send_response_usart4>
    command_interface_send_response_usart4("System will continue without sensor functionality\r\n");
 800b92e:	4b3c      	ldr	r3, [pc, #240]	@ (800ba20 <main+0x3a8>)
 800b930:	0018      	movs	r0, r3
 800b932:	f7fd fc9d 	bl	8009270 <command_interface_send_response_usart4>
  }
  
  // Initialize LoRa module
  command_interface_send_response("\r\nInitializing LoRa module...\r\n");
 800b936:	4b3b      	ldr	r3, [pc, #236]	@ (800ba24 <main+0x3ac>)
 800b938:	0018      	movs	r0, r3
 800b93a:	f7fd fc83 	bl	8009244 <command_interface_send_response>
  command_interface_send_response_usart4("\r\nInitializing LoRa module...\r\n");
 800b93e:	4b39      	ldr	r3, [pc, #228]	@ (800ba24 <main+0x3ac>)
 800b940:	0018      	movs	r0, r3
 800b942:	f7fd fc95 	bl	8009270 <command_interface_send_response_usart4>
  
  if (lora_init() == 0) {
 800b946:	f7ff fc29 	bl	800b19c <sx1262_init>
 800b94a:	1e03      	subs	r3, r0, #0
 800b94c:	d108      	bne.n	800b960 <main+0x2e8>
    command_interface_send_response("✓ LoRa module initialized successfully\r\n");
 800b94e:	4b36      	ldr	r3, [pc, #216]	@ (800ba28 <main+0x3b0>)
 800b950:	0018      	movs	r0, r3
 800b952:	f7fd fc77 	bl	8009244 <command_interface_send_response>
    command_interface_send_response_usart4("✓ LoRa module initialized successfully\r\n");
 800b956:	4b34      	ldr	r3, [pc, #208]	@ (800ba28 <main+0x3b0>)
 800b958:	0018      	movs	r0, r3
 800b95a:	f7fd fc89 	bl	8009270 <command_interface_send_response_usart4>
 800b95e:	e007      	b.n	800b970 <main+0x2f8>
  } else {
    command_interface_send_response("✗ LoRa module initialization failed\r\n");
 800b960:	4b32      	ldr	r3, [pc, #200]	@ (800ba2c <main+0x3b4>)
 800b962:	0018      	movs	r0, r3
 800b964:	f7fd fc6e 	bl	8009244 <command_interface_send_response>
    command_interface_send_response_usart4("✗ LoRa module initialization failed\r\n");
 800b968:	4b30      	ldr	r3, [pc, #192]	@ (800ba2c <main+0x3b4>)
 800b96a:	0018      	movs	r0, r3
 800b96c:	f7fd fc80 	bl	8009270 <command_interface_send_response_usart4>
  }
  
  // Initialize command interface
  command_interface_init();
 800b970:	f7fd f85c 	bl	8008a2c <command_interface_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Process command interface
    command_interface_process();
 800b974:	f7fd f89a 	bl	8008aac <command_interface_process>

    // Toggle LED to show system is running
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800b978:	23a0      	movs	r3, #160	@ 0xa0
 800b97a:	05db      	lsls	r3, r3, #23
 800b97c:	2120      	movs	r1, #32
 800b97e:	0018      	movs	r0, r3
 800b980:	f000 ff72 	bl	800c868 <HAL_GPIO_TogglePin>
    
    // Small delay
    HAL_Delay(10);
 800b984:	200a      	movs	r0, #10
 800b986:	f000 fcf9 	bl	800c37c <HAL_Delay>
    command_interface_process();
 800b98a:	46c0      	nop			@ (mov r8, r8)
 800b98c:	e7f2      	b.n	800b974 <main+0x2fc>
 800b98e:	46c0      	nop			@ (mov r8, r8)
 800b990:	080174a0 	.word	0x080174a0
 800b994:	080174cc 	.word	0x080174cc
 800b998:	080174f4 	.word	0x080174f4
 800b99c:	0801750c 	.word	0x0801750c
 800b9a0:	08017538 	.word	0x08017538
 800b9a4:	08017564 	.word	0x08017564
 800b9a8:	08017590 	.word	0x08017590
 800b9ac:	080175bc 	.word	0x080175bc
 800b9b0:	080175f4 	.word	0x080175f4
 800b9b4:	08017628 	.word	0x08017628
 800b9b8:	0801763c 	.word	0x0801763c
 800b9bc:	08017660 	.word	0x08017660
 800b9c0:	200002e4 	.word	0x200002e4
 800b9c4:	08017684 	.word	0x08017684
 800b9c8:	080176bc 	.word	0x080176bc
 800b9cc:	080176ec 	.word	0x080176ec
 800b9d0:	08017714 	.word	0x08017714
 800b9d4:	0801774c 	.word	0x0801774c
 800b9d8:	0801776c 	.word	0x0801776c
 800b9dc:	0801779c 	.word	0x0801779c
 800b9e0:	080177c0 	.word	0x080177c0
 800b9e4:	080177e0 	.word	0x080177e0
 800b9e8:	08017800 	.word	0x08017800
 800b9ec:	0801781c 	.word	0x0801781c
 800b9f0:	08017844 	.word	0x08017844
 800b9f4:	0801786c 	.word	0x0801786c
 800b9f8:	0801788c 	.word	0x0801788c
 800b9fc:	080178b8 	.word	0x080178b8
 800ba00:	080178d4 	.word	0x080178d4
 800ba04:	080178f4 	.word	0x080178f4
 800ba08:	08017918 	.word	0x08017918
 800ba0c:	0801793c 	.word	0x0801793c
 800ba10:	08017958 	.word	0x08017958
 800ba14:	08017978 	.word	0x08017978
 800ba18:	08017994 	.word	0x08017994
 800ba1c:	080179c8 	.word	0x080179c8
 800ba20:	080179f4 	.word	0x080179f4
 800ba24:	08017a28 	.word	0x08017a28
 800ba28:	08017a48 	.word	0x08017a48
 800ba2c:	08017a74 	.word	0x08017a74

0800ba30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ba30:	b590      	push	{r4, r7, lr}
 800ba32:	b093      	sub	sp, #76	@ 0x4c
 800ba34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ba36:	2410      	movs	r4, #16
 800ba38:	193b      	adds	r3, r7, r4
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	2338      	movs	r3, #56	@ 0x38
 800ba3e:	001a      	movs	r2, r3
 800ba40:	2100      	movs	r1, #0
 800ba42:	f006 f869 	bl	8011b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ba46:	003b      	movs	r3, r7
 800ba48:	0018      	movs	r0, r3
 800ba4a:	2310      	movs	r3, #16
 800ba4c:	001a      	movs	r2, r3
 800ba4e:	2100      	movs	r1, #0
 800ba50:	f006 f862 	bl	8011b18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ba54:	2380      	movs	r3, #128	@ 0x80
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	0018      	movs	r0, r3
 800ba5a:	f001 feb9 	bl	800d7d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ba5e:	193b      	adds	r3, r7, r4
 800ba60:	2202      	movs	r2, #2
 800ba62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ba64:	193b      	adds	r3, r7, r4
 800ba66:	2280      	movs	r2, #128	@ 0x80
 800ba68:	0052      	lsls	r2, r2, #1
 800ba6a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800ba6c:	193b      	adds	r3, r7, r4
 800ba6e:	2200      	movs	r2, #0
 800ba70:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ba72:	193b      	adds	r3, r7, r4
 800ba74:	2240      	movs	r2, #64	@ 0x40
 800ba76:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800ba78:	193b      	adds	r3, r7, r4
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ba7e:	193b      	adds	r3, r7, r4
 800ba80:	0018      	movs	r0, r3
 800ba82:	f001 fef1 	bl	800d868 <HAL_RCC_OscConfig>
 800ba86:	1e03      	subs	r3, r0, #0
 800ba88:	d001      	beq.n	800ba8e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800ba8a:	f000 f979 	bl	800bd80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ba8e:	003b      	movs	r3, r7
 800ba90:	2207      	movs	r2, #7
 800ba92:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800ba94:	003b      	movs	r3, r7
 800ba96:	2200      	movs	r2, #0
 800ba98:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ba9a:	003b      	movs	r3, r7
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800baa0:	003b      	movs	r3, r7
 800baa2:	2200      	movs	r2, #0
 800baa4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800baa6:	003b      	movs	r3, r7
 800baa8:	2100      	movs	r1, #0
 800baaa:	0018      	movs	r0, r3
 800baac:	f002 f9f6 	bl	800de9c <HAL_RCC_ClockConfig>
 800bab0:	1e03      	subs	r3, r0, #0
 800bab2:	d001      	beq.n	800bab8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800bab4:	f000 f964 	bl	800bd80 <Error_Handler>
  }
}
 800bab8:	46c0      	nop			@ (mov r8, r8)
 800baba:	46bd      	mov	sp, r7
 800babc:	b013      	add	sp, #76	@ 0x4c
 800babe:	bd90      	pop	{r4, r7, pc}

0800bac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bac4:	4b1b      	ldr	r3, [pc, #108]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800bac6:	4a1c      	ldr	r2, [pc, #112]	@ (800bb38 <MX_I2C1_Init+0x78>)
 800bac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800baca:	4b1a      	ldr	r3, [pc, #104]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800bacc:	4a1b      	ldr	r2, [pc, #108]	@ (800bb3c <MX_I2C1_Init+0x7c>)
 800bace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800bad0:	4b18      	ldr	r3, [pc, #96]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bad6:	4b17      	ldr	r3, [pc, #92]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800bad8:	2201      	movs	r2, #1
 800bada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800badc:	4b15      	ldr	r3, [pc, #84]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800bade:	2200      	movs	r2, #0
 800bae0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bae2:	4b14      	ldr	r3, [pc, #80]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bae8:	4b12      	ldr	r3, [pc, #72]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800baea:	2200      	movs	r2, #0
 800baec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800baee:	4b11      	ldr	r3, [pc, #68]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800baf4:	4b0f      	ldr	r3, [pc, #60]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bafa:	4b0e      	ldr	r3, [pc, #56]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800bafc:	0018      	movs	r0, r3
 800bafe:	f000 fecf 	bl	800c8a0 <HAL_I2C_Init>
 800bb02:	1e03      	subs	r3, r0, #0
 800bb04:	d001      	beq.n	800bb0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800bb06:	f000 f93b 	bl	800bd80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bb0a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	0018      	movs	r0, r3
 800bb10:	f001 fdc6 	bl	800d6a0 <HAL_I2CEx_ConfigAnalogFilter>
 800bb14:	1e03      	subs	r3, r0, #0
 800bb16:	d001      	beq.n	800bb1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800bb18:	f000 f932 	bl	800bd80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bb1c:	4b05      	ldr	r3, [pc, #20]	@ (800bb34 <MX_I2C1_Init+0x74>)
 800bb1e:	2100      	movs	r1, #0
 800bb20:	0018      	movs	r0, r3
 800bb22:	f001 fe09 	bl	800d738 <HAL_I2CEx_ConfigDigitalFilter>
 800bb26:	1e03      	subs	r3, r0, #0
 800bb28:	d001      	beq.n	800bb2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800bb2a:	f000 f929 	bl	800bd80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bb2e:	46c0      	nop			@ (mov r8, r8)
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	200002e4 	.word	0x200002e4
 800bb38:	40005400 	.word	0x40005400
 800bb3c:	00503d58 	.word	0x00503d58

0800bb40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800bb44:	4b1b      	ldr	r3, [pc, #108]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb46:	4a1c      	ldr	r2, [pc, #112]	@ (800bbb8 <MX_SPI1_Init+0x78>)
 800bb48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800bb4a:	4b1a      	ldr	r3, [pc, #104]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb4c:	2282      	movs	r2, #130	@ 0x82
 800bb4e:	0052      	lsls	r2, r2, #1
 800bb50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800bb52:	4b18      	ldr	r3, [pc, #96]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800bb58:	4b16      	ldr	r3, [pc, #88]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb5a:	22e0      	movs	r2, #224	@ 0xe0
 800bb5c:	00d2      	lsls	r2, r2, #3
 800bb5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bb60:	4b14      	ldr	r3, [pc, #80]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bb66:	4b13      	ldr	r3, [pc, #76]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800bb6c:	4b11      	ldr	r3, [pc, #68]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb6e:	2280      	movs	r2, #128	@ 0x80
 800bb70:	02d2      	lsls	r2, r2, #11
 800bb72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bb74:	4b0f      	ldr	r3, [pc, #60]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bb7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800bb80:	4b0c      	ldr	r3, [pc, #48]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb86:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800bb8c:	4b09      	ldr	r3, [pc, #36]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb8e:	2207      	movs	r2, #7
 800bb90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800bb92:	4b08      	ldr	r3, [pc, #32]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800bb98:	4b06      	ldr	r3, [pc, #24]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bb9a:	2208      	movs	r2, #8
 800bb9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800bb9e:	4b05      	ldr	r3, [pc, #20]	@ (800bbb4 <MX_SPI1_Init+0x74>)
 800bba0:	0018      	movs	r0, r3
 800bba2:	f002 fcdd 	bl	800e560 <HAL_SPI_Init>
 800bba6:	1e03      	subs	r3, r0, #0
 800bba8:	d001      	beq.n	800bbae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800bbaa:	f000 f8e9 	bl	800bd80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800bbae:	46c0      	nop			@ (mov r8, r8)
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	20000338 	.word	0x20000338
 800bbb8:	40013000 	.word	0x40013000

0800bbbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800bbc0:	4b23      	ldr	r3, [pc, #140]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbc2:	4a24      	ldr	r2, [pc, #144]	@ (800bc54 <MX_USART2_UART_Init+0x98>)
 800bbc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800bbc6:	4b22      	ldr	r3, [pc, #136]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbc8:	22e1      	movs	r2, #225	@ 0xe1
 800bbca:	0252      	lsls	r2, r2, #9
 800bbcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800bbce:	4b20      	ldr	r3, [pc, #128]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800bbd4:	4b1e      	ldr	r3, [pc, #120]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800bbda:	4b1d      	ldr	r3, [pc, #116]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800bbe0:	4b1b      	ldr	r3, [pc, #108]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbe2:	220c      	movs	r2, #12
 800bbe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bbe6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800bbec:	4b18      	ldr	r3, [pc, #96]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bbf2:	4b17      	ldr	r3, [pc, #92]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800bbf8:	4b15      	ldr	r3, [pc, #84]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bbfe:	4b14      	ldr	r3, [pc, #80]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800bc04:	4b12      	ldr	r3, [pc, #72]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bc06:	0018      	movs	r0, r3
 800bc08:	f003 fbca 	bl	800f3a0 <HAL_UART_Init>
 800bc0c:	1e03      	subs	r3, r0, #0
 800bc0e:	d001      	beq.n	800bc14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800bc10:	f000 f8b6 	bl	800bd80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800bc14:	4b0e      	ldr	r3, [pc, #56]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bc16:	2100      	movs	r1, #0
 800bc18:	0018      	movs	r0, r3
 800bc1a:	f004 facd 	bl	80101b8 <HAL_UARTEx_SetTxFifoThreshold>
 800bc1e:	1e03      	subs	r3, r0, #0
 800bc20:	d001      	beq.n	800bc26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800bc22:	f000 f8ad 	bl	800bd80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800bc26:	4b0a      	ldr	r3, [pc, #40]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bc28:	2100      	movs	r1, #0
 800bc2a:	0018      	movs	r0, r3
 800bc2c:	f004 fb04 	bl	8010238 <HAL_UARTEx_SetRxFifoThreshold>
 800bc30:	1e03      	subs	r3, r0, #0
 800bc32:	d001      	beq.n	800bc38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800bc34:	f000 f8a4 	bl	800bd80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800bc38:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <MX_USART2_UART_Init+0x94>)
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	f004 fa82 	bl	8010144 <HAL_UARTEx_DisableFifoMode>
 800bc40:	1e03      	subs	r3, r0, #0
 800bc42:	d001      	beq.n	800bc48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800bc44:	f000 f89c 	bl	800bd80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800bc48:	46c0      	nop			@ (mov r8, r8)
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	46c0      	nop			@ (mov r8, r8)
 800bc50:	2000039c 	.word	0x2000039c
 800bc54:	40004400 	.word	0x40004400

0800bc58 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800bc5c:	4b16      	ldr	r3, [pc, #88]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc5e:	4a17      	ldr	r2, [pc, #92]	@ (800bcbc <MX_USART4_UART_Init+0x64>)
 800bc60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800bc62:	4b15      	ldr	r3, [pc, #84]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc64:	22e1      	movs	r2, #225	@ 0xe1
 800bc66:	0252      	lsls	r2, r2, #9
 800bc68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800bc6a:	4b13      	ldr	r3, [pc, #76]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800bc70:	4b11      	ldr	r3, [pc, #68]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800bc76:	4b10      	ldr	r3, [pc, #64]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc78:	2200      	movs	r2, #0
 800bc7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800bc7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc7e:	220c      	movs	r2, #12
 800bc80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bc82:	4b0d      	ldr	r3, [pc, #52]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800bc88:	4b0b      	ldr	r3, [pc, #44]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bc8e:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800bc94:	4b08      	ldr	r3, [pc, #32]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bc9a:	4b07      	ldr	r3, [pc, #28]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800bca0:	4b05      	ldr	r3, [pc, #20]	@ (800bcb8 <MX_USART4_UART_Init+0x60>)
 800bca2:	0018      	movs	r0, r3
 800bca4:	f003 fb7c 	bl	800f3a0 <HAL_UART_Init>
 800bca8:	1e03      	subs	r3, r0, #0
 800bcaa:	d001      	beq.n	800bcb0 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 800bcac:	f000 f868 	bl	800bd80 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800bcb0:	46c0      	nop			@ (mov r8, r8)
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	46c0      	nop			@ (mov r8, r8)
 800bcb8:	20000430 	.word	0x20000430
 800bcbc:	40004c00 	.word	0x40004c00

0800bcc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bcc0:	b590      	push	{r4, r7, lr}
 800bcc2:	b089      	sub	sp, #36	@ 0x24
 800bcc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcc6:	240c      	movs	r4, #12
 800bcc8:	193b      	adds	r3, r7, r4
 800bcca:	0018      	movs	r0, r3
 800bccc:	2314      	movs	r3, #20
 800bcce:	001a      	movs	r2, r3
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	f005 ff21 	bl	8011b18 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bcd6:	4b28      	ldr	r3, [pc, #160]	@ (800bd78 <MX_GPIO_Init+0xb8>)
 800bcd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcda:	4b27      	ldr	r3, [pc, #156]	@ (800bd78 <MX_GPIO_Init+0xb8>)
 800bcdc:	2104      	movs	r1, #4
 800bcde:	430a      	orrs	r2, r1
 800bce0:	635a      	str	r2, [r3, #52]	@ 0x34
 800bce2:	4b25      	ldr	r3, [pc, #148]	@ (800bd78 <MX_GPIO_Init+0xb8>)
 800bce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bce6:	2204      	movs	r2, #4
 800bce8:	4013      	ands	r3, r2
 800bcea:	60bb      	str	r3, [r7, #8]
 800bcec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800bcee:	4b22      	ldr	r3, [pc, #136]	@ (800bd78 <MX_GPIO_Init+0xb8>)
 800bcf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcf2:	4b21      	ldr	r3, [pc, #132]	@ (800bd78 <MX_GPIO_Init+0xb8>)
 800bcf4:	2120      	movs	r1, #32
 800bcf6:	430a      	orrs	r2, r1
 800bcf8:	635a      	str	r2, [r3, #52]	@ 0x34
 800bcfa:	4b1f      	ldr	r3, [pc, #124]	@ (800bd78 <MX_GPIO_Init+0xb8>)
 800bcfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcfe:	2220      	movs	r2, #32
 800bd00:	4013      	ands	r3, r2
 800bd02:	607b      	str	r3, [r7, #4]
 800bd04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd06:	4b1c      	ldr	r3, [pc, #112]	@ (800bd78 <MX_GPIO_Init+0xb8>)
 800bd08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd0a:	4b1b      	ldr	r3, [pc, #108]	@ (800bd78 <MX_GPIO_Init+0xb8>)
 800bd0c:	2101      	movs	r1, #1
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	635a      	str	r2, [r3, #52]	@ 0x34
 800bd12:	4b19      	ldr	r3, [pc, #100]	@ (800bd78 <MX_GPIO_Init+0xb8>)
 800bd14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd16:	2201      	movs	r2, #1
 800bd18:	4013      	ands	r3, r2
 800bd1a:	603b      	str	r3, [r7, #0]
 800bd1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800bd1e:	4b17      	ldr	r3, [pc, #92]	@ (800bd7c <MX_GPIO_Init+0xbc>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	2101      	movs	r1, #1
 800bd24:	0018      	movs	r0, r3
 800bd26:	f000 fd82 	bl	800c82e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800bd2a:	193b      	adds	r3, r7, r4
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd30:	193b      	adds	r3, r7, r4
 800bd32:	2201      	movs	r2, #1
 800bd34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd36:	193b      	adds	r3, r7, r4
 800bd38:	2200      	movs	r2, #0
 800bd3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd3c:	193b      	adds	r3, r7, r4
 800bd3e:	2200      	movs	r2, #0
 800bd40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd42:	193b      	adds	r3, r7, r4
 800bd44:	4a0d      	ldr	r2, [pc, #52]	@ (800bd7c <MX_GPIO_Init+0xbc>)
 800bd46:	0019      	movs	r1, r3
 800bd48:	0010      	movs	r0, r2
 800bd4a:	f000 fbef 	bl	800c52c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800bd4e:	0021      	movs	r1, r4
 800bd50:	187b      	adds	r3, r7, r1
 800bd52:	2202      	movs	r2, #2
 800bd54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bd56:	187b      	adds	r3, r7, r1
 800bd58:	2288      	movs	r2, #136	@ 0x88
 800bd5a:	0352      	lsls	r2, r2, #13
 800bd5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd5e:	187b      	adds	r3, r7, r1
 800bd60:	2200      	movs	r2, #0
 800bd62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd64:	187b      	adds	r3, r7, r1
 800bd66:	4a05      	ldr	r2, [pc, #20]	@ (800bd7c <MX_GPIO_Init+0xbc>)
 800bd68:	0019      	movs	r1, r3
 800bd6a:	0010      	movs	r0, r2
 800bd6c:	f000 fbde 	bl	800c52c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* PC1 is configured for SX1262 BUSY pin input */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800bd70:	46c0      	nop			@ (mov r8, r8)
 800bd72:	46bd      	mov	sp, r7
 800bd74:	b009      	add	sp, #36	@ 0x24
 800bd76:	bd90      	pop	{r4, r7, pc}
 800bd78:	40021000 	.word	0x40021000
 800bd7c:	50000800 	.word	0x50000800

0800bd80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800bd84:	b672      	cpsid	i
}
 800bd86:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800bd88:	46c0      	nop			@ (mov r8, r8)
 800bd8a:	e7fd      	b.n	800bd88 <Error_Handler+0x8>

0800bd8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd92:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd0 <HAL_MspInit+0x44>)
 800bd94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd96:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd0 <HAL_MspInit+0x44>)
 800bd98:	2101      	movs	r1, #1
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	641a      	str	r2, [r3, #64]	@ 0x40
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd0 <HAL_MspInit+0x44>)
 800bda0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda2:	2201      	movs	r2, #1
 800bda4:	4013      	ands	r3, r2
 800bda6:	607b      	str	r3, [r7, #4]
 800bda8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bdaa:	4b09      	ldr	r3, [pc, #36]	@ (800bdd0 <HAL_MspInit+0x44>)
 800bdac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdae:	4b08      	ldr	r3, [pc, #32]	@ (800bdd0 <HAL_MspInit+0x44>)
 800bdb0:	2180      	movs	r1, #128	@ 0x80
 800bdb2:	0549      	lsls	r1, r1, #21
 800bdb4:	430a      	orrs	r2, r1
 800bdb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bdb8:	4b05      	ldr	r3, [pc, #20]	@ (800bdd0 <HAL_MspInit+0x44>)
 800bdba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdbc:	2380      	movs	r3, #128	@ 0x80
 800bdbe:	055b      	lsls	r3, r3, #21
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	603b      	str	r3, [r7, #0]
 800bdc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bdc6:	46c0      	nop			@ (mov r8, r8)
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	b002      	add	sp, #8
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	46c0      	nop			@ (mov r8, r8)
 800bdd0:	40021000 	.word	0x40021000

0800bdd4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800bdd4:	b590      	push	{r4, r7, lr}
 800bdd6:	b097      	sub	sp, #92	@ 0x5c
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bddc:	2344      	movs	r3, #68	@ 0x44
 800bdde:	18fb      	adds	r3, r7, r3
 800bde0:	0018      	movs	r0, r3
 800bde2:	2314      	movs	r3, #20
 800bde4:	001a      	movs	r2, r3
 800bde6:	2100      	movs	r1, #0
 800bde8:	f005 fe96 	bl	8011b18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bdec:	2410      	movs	r4, #16
 800bdee:	193b      	adds	r3, r7, r4
 800bdf0:	0018      	movs	r0, r3
 800bdf2:	2334      	movs	r3, #52	@ 0x34
 800bdf4:	001a      	movs	r2, r3
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	f005 fe8e 	bl	8011b18 <memset>
  if(hi2c->Instance==I2C1)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a23      	ldr	r2, [pc, #140]	@ (800be90 <HAL_I2C_MspInit+0xbc>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d13f      	bne.n	800be86 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800be06:	193b      	adds	r3, r7, r4
 800be08:	2220      	movs	r2, #32
 800be0a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800be0c:	193b      	adds	r3, r7, r4
 800be0e:	2200      	movs	r2, #0
 800be10:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800be12:	193b      	adds	r3, r7, r4
 800be14:	0018      	movs	r0, r3
 800be16:	f002 f9eb 	bl	800e1f0 <HAL_RCCEx_PeriphCLKConfig>
 800be1a:	1e03      	subs	r3, r0, #0
 800be1c:	d001      	beq.n	800be22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800be1e:	f7ff ffaf 	bl	800bd80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be22:	4b1c      	ldr	r3, [pc, #112]	@ (800be94 <HAL_I2C_MspInit+0xc0>)
 800be24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be26:	4b1b      	ldr	r3, [pc, #108]	@ (800be94 <HAL_I2C_MspInit+0xc0>)
 800be28:	2101      	movs	r1, #1
 800be2a:	430a      	orrs	r2, r1
 800be2c:	635a      	str	r2, [r3, #52]	@ 0x34
 800be2e:	4b19      	ldr	r3, [pc, #100]	@ (800be94 <HAL_I2C_MspInit+0xc0>)
 800be30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be32:	2201      	movs	r2, #1
 800be34:	4013      	ands	r3, r2
 800be36:	60fb      	str	r3, [r7, #12]
 800be38:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800be3a:	2144      	movs	r1, #68	@ 0x44
 800be3c:	187b      	adds	r3, r7, r1
 800be3e:	22c0      	movs	r2, #192	@ 0xc0
 800be40:	00d2      	lsls	r2, r2, #3
 800be42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800be44:	187b      	adds	r3, r7, r1
 800be46:	2212      	movs	r2, #18
 800be48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be4a:	187b      	adds	r3, r7, r1
 800be4c:	2200      	movs	r2, #0
 800be4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be50:	187b      	adds	r3, r7, r1
 800be52:	2200      	movs	r2, #0
 800be54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800be56:	187b      	adds	r3, r7, r1
 800be58:	2206      	movs	r2, #6
 800be5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be5c:	187a      	adds	r2, r7, r1
 800be5e:	23a0      	movs	r3, #160	@ 0xa0
 800be60:	05db      	lsls	r3, r3, #23
 800be62:	0011      	movs	r1, r2
 800be64:	0018      	movs	r0, r3
 800be66:	f000 fb61 	bl	800c52c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800be6a:	4b0a      	ldr	r3, [pc, #40]	@ (800be94 <HAL_I2C_MspInit+0xc0>)
 800be6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be6e:	4b09      	ldr	r3, [pc, #36]	@ (800be94 <HAL_I2C_MspInit+0xc0>)
 800be70:	2180      	movs	r1, #128	@ 0x80
 800be72:	0389      	lsls	r1, r1, #14
 800be74:	430a      	orrs	r2, r1
 800be76:	63da      	str	r2, [r3, #60]	@ 0x3c
 800be78:	4b06      	ldr	r3, [pc, #24]	@ (800be94 <HAL_I2C_MspInit+0xc0>)
 800be7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be7c:	2380      	movs	r3, #128	@ 0x80
 800be7e:	039b      	lsls	r3, r3, #14
 800be80:	4013      	ands	r3, r2
 800be82:	60bb      	str	r3, [r7, #8]
 800be84:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800be86:	46c0      	nop			@ (mov r8, r8)
 800be88:	46bd      	mov	sp, r7
 800be8a:	b017      	add	sp, #92	@ 0x5c
 800be8c:	bd90      	pop	{r4, r7, pc}
 800be8e:	46c0      	nop			@ (mov r8, r8)
 800be90:	40005400 	.word	0x40005400
 800be94:	40021000 	.word	0x40021000

0800be98 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800be98:	b590      	push	{r4, r7, lr}
 800be9a:	b08b      	sub	sp, #44	@ 0x2c
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bea0:	2414      	movs	r4, #20
 800bea2:	193b      	adds	r3, r7, r4
 800bea4:	0018      	movs	r0, r3
 800bea6:	2314      	movs	r3, #20
 800bea8:	001a      	movs	r2, r3
 800beaa:	2100      	movs	r1, #0
 800beac:	f005 fe34 	bl	8011b18 <memset>
  if(hspi->Instance==SPI1)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a1b      	ldr	r2, [pc, #108]	@ (800bf24 <HAL_SPI_MspInit+0x8c>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d130      	bne.n	800bf1c <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800beba:	4b1b      	ldr	r3, [pc, #108]	@ (800bf28 <HAL_SPI_MspInit+0x90>)
 800bebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bebe:	4b1a      	ldr	r3, [pc, #104]	@ (800bf28 <HAL_SPI_MspInit+0x90>)
 800bec0:	2180      	movs	r1, #128	@ 0x80
 800bec2:	0149      	lsls	r1, r1, #5
 800bec4:	430a      	orrs	r2, r1
 800bec6:	641a      	str	r2, [r3, #64]	@ 0x40
 800bec8:	4b17      	ldr	r3, [pc, #92]	@ (800bf28 <HAL_SPI_MspInit+0x90>)
 800beca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800becc:	2380      	movs	r3, #128	@ 0x80
 800bece:	015b      	lsls	r3, r3, #5
 800bed0:	4013      	ands	r3, r2
 800bed2:	613b      	str	r3, [r7, #16]
 800bed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bed6:	4b14      	ldr	r3, [pc, #80]	@ (800bf28 <HAL_SPI_MspInit+0x90>)
 800bed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800beda:	4b13      	ldr	r3, [pc, #76]	@ (800bf28 <HAL_SPI_MspInit+0x90>)
 800bedc:	2101      	movs	r1, #1
 800bede:	430a      	orrs	r2, r1
 800bee0:	635a      	str	r2, [r3, #52]	@ 0x34
 800bee2:	4b11      	ldr	r3, [pc, #68]	@ (800bf28 <HAL_SPI_MspInit+0x90>)
 800bee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee6:	2201      	movs	r2, #1
 800bee8:	4013      	ands	r3, r2
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800beee:	0021      	movs	r1, r4
 800bef0:	187b      	adds	r3, r7, r1
 800bef2:	22f0      	movs	r2, #240	@ 0xf0
 800bef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef6:	187b      	adds	r3, r7, r1
 800bef8:	2202      	movs	r2, #2
 800befa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800befc:	187b      	adds	r3, r7, r1
 800befe:	2200      	movs	r2, #0
 800bf00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf02:	187b      	adds	r3, r7, r1
 800bf04:	2200      	movs	r2, #0
 800bf06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800bf08:	187b      	adds	r3, r7, r1
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf0e:	187a      	adds	r2, r7, r1
 800bf10:	23a0      	movs	r3, #160	@ 0xa0
 800bf12:	05db      	lsls	r3, r3, #23
 800bf14:	0011      	movs	r1, r2
 800bf16:	0018      	movs	r0, r3
 800bf18:	f000 fb08 	bl	800c52c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800bf1c:	46c0      	nop			@ (mov r8, r8)
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	b00b      	add	sp, #44	@ 0x2c
 800bf22:	bd90      	pop	{r4, r7, pc}
 800bf24:	40013000 	.word	0x40013000
 800bf28:	40021000 	.word	0x40021000

0800bf2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bf2c:	b590      	push	{r4, r7, lr}
 800bf2e:	b099      	sub	sp, #100	@ 0x64
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf34:	234c      	movs	r3, #76	@ 0x4c
 800bf36:	18fb      	adds	r3, r7, r3
 800bf38:	0018      	movs	r0, r3
 800bf3a:	2314      	movs	r3, #20
 800bf3c:	001a      	movs	r2, r3
 800bf3e:	2100      	movs	r1, #0
 800bf40:	f005 fdea 	bl	8011b18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bf44:	2418      	movs	r4, #24
 800bf46:	193b      	adds	r3, r7, r4
 800bf48:	0018      	movs	r0, r3
 800bf4a:	2334      	movs	r3, #52	@ 0x34
 800bf4c:	001a      	movs	r2, r3
 800bf4e:	2100      	movs	r1, #0
 800bf50:	f005 fde2 	bl	8011b18 <memset>
  if(huart->Instance==USART2)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a3e      	ldr	r2, [pc, #248]	@ (800c054 <HAL_UART_MspInit+0x128>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d13f      	bne.n	800bfde <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800bf5e:	193b      	adds	r3, r7, r4
 800bf60:	2202      	movs	r2, #2
 800bf62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bf64:	193b      	adds	r3, r7, r4
 800bf66:	2200      	movs	r2, #0
 800bf68:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bf6a:	193b      	adds	r3, r7, r4
 800bf6c:	0018      	movs	r0, r3
 800bf6e:	f002 f93f 	bl	800e1f0 <HAL_RCCEx_PeriphCLKConfig>
 800bf72:	1e03      	subs	r3, r0, #0
 800bf74:	d001      	beq.n	800bf7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800bf76:	f7ff ff03 	bl	800bd80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800bf7a:	4b37      	ldr	r3, [pc, #220]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800bf7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf7e:	4b36      	ldr	r3, [pc, #216]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800bf80:	2180      	movs	r1, #128	@ 0x80
 800bf82:	0289      	lsls	r1, r1, #10
 800bf84:	430a      	orrs	r2, r1
 800bf86:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bf88:	4b33      	ldr	r3, [pc, #204]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800bf8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf8c:	2380      	movs	r3, #128	@ 0x80
 800bf8e:	029b      	lsls	r3, r3, #10
 800bf90:	4013      	ands	r3, r2
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf96:	4b30      	ldr	r3, [pc, #192]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800bf98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf9a:	4b2f      	ldr	r3, [pc, #188]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	635a      	str	r2, [r3, #52]	@ 0x34
 800bfa2:	4b2d      	ldr	r3, [pc, #180]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800bfa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	613b      	str	r3, [r7, #16]
 800bfac:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800bfae:	214c      	movs	r1, #76	@ 0x4c
 800bfb0:	187b      	adds	r3, r7, r1
 800bfb2:	220c      	movs	r2, #12
 800bfb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfb6:	187b      	adds	r3, r7, r1
 800bfb8:	2202      	movs	r2, #2
 800bfba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bfbc:	187b      	adds	r3, r7, r1
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfc2:	187b      	adds	r3, r7, r1
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800bfc8:	187b      	adds	r3, r7, r1
 800bfca:	2201      	movs	r2, #1
 800bfcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfce:	187a      	adds	r2, r7, r1
 800bfd0:	23a0      	movs	r3, #160	@ 0xa0
 800bfd2:	05db      	lsls	r3, r3, #23
 800bfd4:	0011      	movs	r1, r2
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	f000 faa8 	bl	800c52c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART4_MspInit 1 */

    /* USER CODE END USART4_MspInit 1 */
  }

}
 800bfdc:	e035      	b.n	800c04a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART4)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a1e      	ldr	r2, [pc, #120]	@ (800c05c <HAL_UART_MspInit+0x130>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d130      	bne.n	800c04a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART4_CLK_ENABLE();
 800bfe8:	4b1b      	ldr	r3, [pc, #108]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800bfea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfec:	4b1a      	ldr	r3, [pc, #104]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800bfee:	2180      	movs	r1, #128	@ 0x80
 800bff0:	0309      	lsls	r1, r1, #12
 800bff2:	430a      	orrs	r2, r1
 800bff4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bff6:	4b18      	ldr	r3, [pc, #96]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800bff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bffa:	2380      	movs	r3, #128	@ 0x80
 800bffc:	031b      	lsls	r3, r3, #12
 800bffe:	4013      	ands	r3, r2
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c004:	4b14      	ldr	r3, [pc, #80]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800c006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c008:	4b13      	ldr	r3, [pc, #76]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800c00a:	2101      	movs	r1, #1
 800c00c:	430a      	orrs	r2, r1
 800c00e:	635a      	str	r2, [r3, #52]	@ 0x34
 800c010:	4b11      	ldr	r3, [pc, #68]	@ (800c058 <HAL_UART_MspInit+0x12c>)
 800c012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c014:	2201      	movs	r2, #1
 800c016:	4013      	ands	r3, r2
 800c018:	60bb      	str	r3, [r7, #8]
 800c01a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c01c:	214c      	movs	r1, #76	@ 0x4c
 800c01e:	187b      	adds	r3, r7, r1
 800c020:	2203      	movs	r2, #3
 800c022:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c024:	187b      	adds	r3, r7, r1
 800c026:	2202      	movs	r2, #2
 800c028:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c02a:	187b      	adds	r3, r7, r1
 800c02c:	2200      	movs	r2, #0
 800c02e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c030:	187b      	adds	r3, r7, r1
 800c032:	2200      	movs	r2, #0
 800c034:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800c036:	187b      	adds	r3, r7, r1
 800c038:	2204      	movs	r2, #4
 800c03a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c03c:	187a      	adds	r2, r7, r1
 800c03e:	23a0      	movs	r3, #160	@ 0xa0
 800c040:	05db      	lsls	r3, r3, #23
 800c042:	0011      	movs	r1, r2
 800c044:	0018      	movs	r0, r3
 800c046:	f000 fa71 	bl	800c52c <HAL_GPIO_Init>
}
 800c04a:	46c0      	nop			@ (mov r8, r8)
 800c04c:	46bd      	mov	sp, r7
 800c04e:	b019      	add	sp, #100	@ 0x64
 800c050:	bd90      	pop	{r4, r7, pc}
 800c052:	46c0      	nop			@ (mov r8, r8)
 800c054:	40004400 	.word	0x40004400
 800c058:	40021000 	.word	0x40021000
 800c05c:	40004c00 	.word	0x40004c00

0800c060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c064:	46c0      	nop			@ (mov r8, r8)
 800c066:	e7fd      	b.n	800c064 <NMI_Handler+0x4>

0800c068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c06c:	46c0      	nop			@ (mov r8, r8)
 800c06e:	e7fd      	b.n	800c06c <HardFault_Handler+0x4>

0800c070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800c074:	46c0      	nop			@ (mov r8, r8)
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c07e:	46c0      	nop			@ (mov r8, r8)
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c088:	f000 f95c 	bl	800c344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c08c:	46c0      	nop			@ (mov r8, r8)
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	af00      	add	r7, sp, #0
  return 1;
 800c096:	2301      	movs	r3, #1
}
 800c098:	0018      	movs	r0, r3
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <_kill>:

int _kill(int pid, int sig)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b082      	sub	sp, #8
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c0a8:	f005 fe02 	bl	8011cb0 <__errno>
 800c0ac:	0003      	movs	r3, r0
 800c0ae:	2216      	movs	r2, #22
 800c0b0:	601a      	str	r2, [r3, #0]
  return -1;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	425b      	negs	r3, r3
}
 800c0b6:	0018      	movs	r0, r3
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	b002      	add	sp, #8
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <_exit>:

void _exit (int status)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	425a      	negs	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	0011      	movs	r1, r2
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	f7ff ffe5 	bl	800c09e <_kill>
  while (1) {}    /* Make sure we hang here */
 800c0d4:	46c0      	nop			@ (mov r8, r8)
 800c0d6:	e7fd      	b.n	800c0d4 <_exit+0x16>

0800c0d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	e00a      	b.n	800c100 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c0ea:	e000      	b.n	800c0ee <_read+0x16>
 800c0ec:	bf00      	nop
 800c0ee:	0001      	movs	r1, r0
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	1c5a      	adds	r2, r3, #1
 800c0f4:	60ba      	str	r2, [r7, #8]
 800c0f6:	b2ca      	uxtb	r2, r1
 800c0f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	617b      	str	r3, [r7, #20]
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	429a      	cmp	r2, r3
 800c106:	dbf0      	blt.n	800c0ea <_read+0x12>
  }

  return len;
 800c108:	687b      	ldr	r3, [r7, #4]
}
 800c10a:	0018      	movs	r0, r3
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b006      	add	sp, #24
 800c110:	bd80      	pop	{r7, pc}

0800c112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b086      	sub	sp, #24
 800c116:	af00      	add	r7, sp, #0
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c11e:	2300      	movs	r3, #0
 800c120:	617b      	str	r3, [r7, #20]
 800c122:	e009      	b.n	800c138 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	60ba      	str	r2, [r7, #8]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	0018      	movs	r0, r3
 800c12e:	e000      	b.n	800c132 <_write+0x20>
 800c130:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	3301      	adds	r3, #1
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	697a      	ldr	r2, [r7, #20]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	dbf1      	blt.n	800c124 <_write+0x12>
  }
  return len;
 800c140:	687b      	ldr	r3, [r7, #4]
}
 800c142:	0018      	movs	r0, r3
 800c144:	46bd      	mov	sp, r7
 800c146:	b006      	add	sp, #24
 800c148:	bd80      	pop	{r7, pc}

0800c14a <_close>:

int _close(int file)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c152:	2301      	movs	r3, #1
 800c154:	425b      	negs	r3, r3
}
 800c156:	0018      	movs	r0, r3
 800c158:	46bd      	mov	sp, r7
 800c15a:	b002      	add	sp, #8
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b082      	sub	sp, #8
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2280      	movs	r2, #128	@ 0x80
 800c16c:	0192      	lsls	r2, r2, #6
 800c16e:	605a      	str	r2, [r3, #4]
  return 0;
 800c170:	2300      	movs	r3, #0
}
 800c172:	0018      	movs	r0, r3
 800c174:	46bd      	mov	sp, r7
 800c176:	b002      	add	sp, #8
 800c178:	bd80      	pop	{r7, pc}

0800c17a <_isatty>:

int _isatty(int file)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b082      	sub	sp, #8
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c182:	2301      	movs	r3, #1
}
 800c184:	0018      	movs	r0, r3
 800c186:	46bd      	mov	sp, r7
 800c188:	b002      	add	sp, #8
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	0018      	movs	r0, r3
 800c19c:	46bd      	mov	sp, r7
 800c19e:	b004      	add	sp, #16
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c1ac:	4a14      	ldr	r2, [pc, #80]	@ (800c200 <_sbrk+0x5c>)
 800c1ae:	4b15      	ldr	r3, [pc, #84]	@ (800c204 <_sbrk+0x60>)
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c1b8:	4b13      	ldr	r3, [pc, #76]	@ (800c208 <_sbrk+0x64>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d102      	bne.n	800c1c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c1c0:	4b11      	ldr	r3, [pc, #68]	@ (800c208 <_sbrk+0x64>)
 800c1c2:	4a12      	ldr	r2, [pc, #72]	@ (800c20c <_sbrk+0x68>)
 800c1c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c1c6:	4b10      	ldr	r3, [pc, #64]	@ (800c208 <_sbrk+0x64>)
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	18d3      	adds	r3, r2, r3
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d207      	bcs.n	800c1e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c1d4:	f005 fd6c 	bl	8011cb0 <__errno>
 800c1d8:	0003      	movs	r3, r0
 800c1da:	220c      	movs	r2, #12
 800c1dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	425b      	negs	r3, r3
 800c1e2:	e009      	b.n	800c1f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c1e4:	4b08      	ldr	r3, [pc, #32]	@ (800c208 <_sbrk+0x64>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c1ea:	4b07      	ldr	r3, [pc, #28]	@ (800c208 <_sbrk+0x64>)
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	18d2      	adds	r2, r2, r3
 800c1f2:	4b05      	ldr	r3, [pc, #20]	@ (800c208 <_sbrk+0x64>)
 800c1f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
}
 800c1f8:	0018      	movs	r0, r3
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	b006      	add	sp, #24
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	20009000 	.word	0x20009000
 800c204:	00000400 	.word	0x00000400
 800c208:	200004c4 	.word	0x200004c4
 800c20c:	20000618 	.word	0x20000618

0800c210 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c214:	46c0      	nop			@ (mov r8, r8)
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
	...

0800c21c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c21c:	480d      	ldr	r0, [pc, #52]	@ (800c254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800c21e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800c220:	f7ff fff6 	bl	800c210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c224:	480c      	ldr	r0, [pc, #48]	@ (800c258 <LoopForever+0x6>)
  ldr r1, =_edata
 800c226:	490d      	ldr	r1, [pc, #52]	@ (800c25c <LoopForever+0xa>)
  ldr r2, =_sidata
 800c228:	4a0d      	ldr	r2, [pc, #52]	@ (800c260 <LoopForever+0xe>)
  movs r3, #0
 800c22a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c22c:	e002      	b.n	800c234 <LoopCopyDataInit>

0800c22e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c22e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c232:	3304      	adds	r3, #4

0800c234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c238:	d3f9      	bcc.n	800c22e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c23a:	4a0a      	ldr	r2, [pc, #40]	@ (800c264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c23c:	4c0a      	ldr	r4, [pc, #40]	@ (800c268 <LoopForever+0x16>)
  movs r3, #0
 800c23e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c240:	e001      	b.n	800c246 <LoopFillZerobss>

0800c242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c244:	3204      	adds	r2, #4

0800c246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c248:	d3fb      	bcc.n	800c242 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800c24a:	f005 fd37 	bl	8011cbc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800c24e:	f7ff fa13 	bl	800b678 <main>

0800c252 <LoopForever>:

LoopForever:
  b LoopForever
 800c252:	e7fe      	b.n	800c252 <LoopForever>
  ldr   r0, =_estack
 800c254:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800c258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c25c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800c260:	08018074 	.word	0x08018074
  ldr r2, =_sbss
 800c264:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800c268:	20000618 	.word	0x20000618

0800c26c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c26c:	e7fe      	b.n	800c26c <ADC1_COMP_IRQHandler>
	...

0800c270 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c276:	1dfb      	adds	r3, r7, #7
 800c278:	2200      	movs	r2, #0
 800c27a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c27c:	4b0b      	ldr	r3, [pc, #44]	@ (800c2ac <HAL_Init+0x3c>)
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	4b0a      	ldr	r3, [pc, #40]	@ (800c2ac <HAL_Init+0x3c>)
 800c282:	2180      	movs	r1, #128	@ 0x80
 800c284:	0049      	lsls	r1, r1, #1
 800c286:	430a      	orrs	r2, r1
 800c288:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c28a:	2000      	movs	r0, #0
 800c28c:	f000 f810 	bl	800c2b0 <HAL_InitTick>
 800c290:	1e03      	subs	r3, r0, #0
 800c292:	d003      	beq.n	800c29c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800c294:	1dfb      	adds	r3, r7, #7
 800c296:	2201      	movs	r2, #1
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	e001      	b.n	800c2a0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800c29c:	f7ff fd76 	bl	800bd8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c2a0:	1dfb      	adds	r3, r7, #7
 800c2a2:	781b      	ldrb	r3, [r3, #0]
}
 800c2a4:	0018      	movs	r0, r3
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	b002      	add	sp, #8
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	40022000 	.word	0x40022000

0800c2b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c2b0:	b590      	push	{r4, r7, lr}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c2b8:	230f      	movs	r3, #15
 800c2ba:	18fb      	adds	r3, r7, r3
 800c2bc:	2200      	movs	r2, #0
 800c2be:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800c2c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c338 <HAL_InitTick+0x88>)
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d02b      	beq.n	800c320 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800c2c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c33c <HAL_InitTick+0x8c>)
 800c2ca:	681c      	ldr	r4, [r3, #0]
 800c2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c338 <HAL_InitTick+0x88>)
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	0019      	movs	r1, r3
 800c2d2:	23fa      	movs	r3, #250	@ 0xfa
 800c2d4:	0098      	lsls	r0, r3, #2
 800c2d6:	f7f3 ff3b 	bl	8000150 <__udivsi3>
 800c2da:	0003      	movs	r3, r0
 800c2dc:	0019      	movs	r1, r3
 800c2de:	0020      	movs	r0, r4
 800c2e0:	f7f3 ff36 	bl	8000150 <__udivsi3>
 800c2e4:	0003      	movs	r3, r0
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	f000 f913 	bl	800c512 <HAL_SYSTICK_Config>
 800c2ec:	1e03      	subs	r3, r0, #0
 800c2ee:	d112      	bne.n	800c316 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d80a      	bhi.n	800c30c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c2f6:	6879      	ldr	r1, [r7, #4]
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	425b      	negs	r3, r3
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	0018      	movs	r0, r3
 800c300:	f000 f8f2 	bl	800c4e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c304:	4b0e      	ldr	r3, [pc, #56]	@ (800c340 <HAL_InitTick+0x90>)
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	e00d      	b.n	800c328 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800c30c:	230f      	movs	r3, #15
 800c30e:	18fb      	adds	r3, r7, r3
 800c310:	2201      	movs	r2, #1
 800c312:	701a      	strb	r2, [r3, #0]
 800c314:	e008      	b.n	800c328 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800c316:	230f      	movs	r3, #15
 800c318:	18fb      	adds	r3, r7, r3
 800c31a:	2201      	movs	r2, #1
 800c31c:	701a      	strb	r2, [r3, #0]
 800c31e:	e003      	b.n	800c328 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c320:	230f      	movs	r3, #15
 800c322:	18fb      	adds	r3, r7, r3
 800c324:	2201      	movs	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800c328:	230f      	movs	r3, #15
 800c32a:	18fb      	adds	r3, r7, r3
 800c32c:	781b      	ldrb	r3, [r3, #0]
}
 800c32e:	0018      	movs	r0, r3
 800c330:	46bd      	mov	sp, r7
 800c332:	b005      	add	sp, #20
 800c334:	bd90      	pop	{r4, r7, pc}
 800c336:	46c0      	nop			@ (mov r8, r8)
 800c338:	20000024 	.word	0x20000024
 800c33c:	2000001c 	.word	0x2000001c
 800c340:	20000020 	.word	0x20000020

0800c344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c348:	4b05      	ldr	r3, [pc, #20]	@ (800c360 <HAL_IncTick+0x1c>)
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	001a      	movs	r2, r3
 800c34e:	4b05      	ldr	r3, [pc, #20]	@ (800c364 <HAL_IncTick+0x20>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	18d2      	adds	r2, r2, r3
 800c354:	4b03      	ldr	r3, [pc, #12]	@ (800c364 <HAL_IncTick+0x20>)
 800c356:	601a      	str	r2, [r3, #0]
}
 800c358:	46c0      	nop			@ (mov r8, r8)
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	46c0      	nop			@ (mov r8, r8)
 800c360:	20000024 	.word	0x20000024
 800c364:	200004c8 	.word	0x200004c8

0800c368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	af00      	add	r7, sp, #0
  return uwTick;
 800c36c:	4b02      	ldr	r3, [pc, #8]	@ (800c378 <HAL_GetTick+0x10>)
 800c36e:	681b      	ldr	r3, [r3, #0]
}
 800c370:	0018      	movs	r0, r3
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	46c0      	nop			@ (mov r8, r8)
 800c378:	200004c8 	.word	0x200004c8

0800c37c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c384:	f7ff fff0 	bl	800c368 <HAL_GetTick>
 800c388:	0003      	movs	r3, r0
 800c38a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	3301      	adds	r3, #1
 800c394:	d005      	beq.n	800c3a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c396:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c0 <HAL_Delay+0x44>)
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	001a      	movs	r2, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	189b      	adds	r3, r3, r2
 800c3a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c3a2:	46c0      	nop			@ (mov r8, r8)
 800c3a4:	f7ff ffe0 	bl	800c368 <HAL_GetTick>
 800c3a8:	0002      	movs	r2, r0
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	1ad3      	subs	r3, r2, r3
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d8f7      	bhi.n	800c3a4 <HAL_Delay+0x28>
  {
  }
}
 800c3b4:	46c0      	nop			@ (mov r8, r8)
 800c3b6:	46c0      	nop			@ (mov r8, r8)
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	b004      	add	sp, #16
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	46c0      	nop			@ (mov r8, r8)
 800c3c0:	20000024 	.word	0x20000024

0800c3c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c3c4:	b590      	push	{r4, r7, lr}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	0002      	movs	r2, r0
 800c3cc:	6039      	str	r1, [r7, #0]
 800c3ce:	1dfb      	adds	r3, r7, #7
 800c3d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c3d2:	1dfb      	adds	r3, r7, #7
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3d8:	d828      	bhi.n	800c42c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c3da:	4a2f      	ldr	r2, [pc, #188]	@ (800c498 <__NVIC_SetPriority+0xd4>)
 800c3dc:	1dfb      	adds	r3, r7, #7
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	b25b      	sxtb	r3, r3
 800c3e2:	089b      	lsrs	r3, r3, #2
 800c3e4:	33c0      	adds	r3, #192	@ 0xc0
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	589b      	ldr	r3, [r3, r2]
 800c3ea:	1dfa      	adds	r2, r7, #7
 800c3ec:	7812      	ldrb	r2, [r2, #0]
 800c3ee:	0011      	movs	r1, r2
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	400a      	ands	r2, r1
 800c3f4:	00d2      	lsls	r2, r2, #3
 800c3f6:	21ff      	movs	r1, #255	@ 0xff
 800c3f8:	4091      	lsls	r1, r2
 800c3fa:	000a      	movs	r2, r1
 800c3fc:	43d2      	mvns	r2, r2
 800c3fe:	401a      	ands	r2, r3
 800c400:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	019b      	lsls	r3, r3, #6
 800c406:	22ff      	movs	r2, #255	@ 0xff
 800c408:	401a      	ands	r2, r3
 800c40a:	1dfb      	adds	r3, r7, #7
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	0018      	movs	r0, r3
 800c410:	2303      	movs	r3, #3
 800c412:	4003      	ands	r3, r0
 800c414:	00db      	lsls	r3, r3, #3
 800c416:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c418:	481f      	ldr	r0, [pc, #124]	@ (800c498 <__NVIC_SetPriority+0xd4>)
 800c41a:	1dfb      	adds	r3, r7, #7
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	b25b      	sxtb	r3, r3
 800c420:	089b      	lsrs	r3, r3, #2
 800c422:	430a      	orrs	r2, r1
 800c424:	33c0      	adds	r3, #192	@ 0xc0
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800c42a:	e031      	b.n	800c490 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c42c:	4a1b      	ldr	r2, [pc, #108]	@ (800c49c <__NVIC_SetPriority+0xd8>)
 800c42e:	1dfb      	adds	r3, r7, #7
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	0019      	movs	r1, r3
 800c434:	230f      	movs	r3, #15
 800c436:	400b      	ands	r3, r1
 800c438:	3b08      	subs	r3, #8
 800c43a:	089b      	lsrs	r3, r3, #2
 800c43c:	3306      	adds	r3, #6
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	18d3      	adds	r3, r2, r3
 800c442:	3304      	adds	r3, #4
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	1dfa      	adds	r2, r7, #7
 800c448:	7812      	ldrb	r2, [r2, #0]
 800c44a:	0011      	movs	r1, r2
 800c44c:	2203      	movs	r2, #3
 800c44e:	400a      	ands	r2, r1
 800c450:	00d2      	lsls	r2, r2, #3
 800c452:	21ff      	movs	r1, #255	@ 0xff
 800c454:	4091      	lsls	r1, r2
 800c456:	000a      	movs	r2, r1
 800c458:	43d2      	mvns	r2, r2
 800c45a:	401a      	ands	r2, r3
 800c45c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	019b      	lsls	r3, r3, #6
 800c462:	22ff      	movs	r2, #255	@ 0xff
 800c464:	401a      	ands	r2, r3
 800c466:	1dfb      	adds	r3, r7, #7
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	0018      	movs	r0, r3
 800c46c:	2303      	movs	r3, #3
 800c46e:	4003      	ands	r3, r0
 800c470:	00db      	lsls	r3, r3, #3
 800c472:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c474:	4809      	ldr	r0, [pc, #36]	@ (800c49c <__NVIC_SetPriority+0xd8>)
 800c476:	1dfb      	adds	r3, r7, #7
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	001c      	movs	r4, r3
 800c47c:	230f      	movs	r3, #15
 800c47e:	4023      	ands	r3, r4
 800c480:	3b08      	subs	r3, #8
 800c482:	089b      	lsrs	r3, r3, #2
 800c484:	430a      	orrs	r2, r1
 800c486:	3306      	adds	r3, #6
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	18c3      	adds	r3, r0, r3
 800c48c:	3304      	adds	r3, #4
 800c48e:	601a      	str	r2, [r3, #0]
}
 800c490:	46c0      	nop			@ (mov r8, r8)
 800c492:	46bd      	mov	sp, r7
 800c494:	b003      	add	sp, #12
 800c496:	bd90      	pop	{r4, r7, pc}
 800c498:	e000e100 	.word	0xe000e100
 800c49c:	e000ed00 	.word	0xe000ed00

0800c4a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	1e5a      	subs	r2, r3, #1
 800c4ac:	2380      	movs	r3, #128	@ 0x80
 800c4ae:	045b      	lsls	r3, r3, #17
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d301      	bcc.n	800c4b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e010      	b.n	800c4da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c4b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c4e4 <SysTick_Config+0x44>)
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	3a01      	subs	r2, #1
 800c4be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	425b      	negs	r3, r3
 800c4c4:	2103      	movs	r1, #3
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	f7ff ff7c 	bl	800c3c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c4cc:	4b05      	ldr	r3, [pc, #20]	@ (800c4e4 <SysTick_Config+0x44>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c4d2:	4b04      	ldr	r3, [pc, #16]	@ (800c4e4 <SysTick_Config+0x44>)
 800c4d4:	2207      	movs	r2, #7
 800c4d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	0018      	movs	r0, r3
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	b002      	add	sp, #8
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	46c0      	nop			@ (mov r8, r8)
 800c4e4:	e000e010 	.word	0xe000e010

0800c4e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60b9      	str	r1, [r7, #8]
 800c4f0:	607a      	str	r2, [r7, #4]
 800c4f2:	210f      	movs	r1, #15
 800c4f4:	187b      	adds	r3, r7, r1
 800c4f6:	1c02      	adds	r2, r0, #0
 800c4f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	187b      	adds	r3, r7, r1
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	b25b      	sxtb	r3, r3
 800c502:	0011      	movs	r1, r2
 800c504:	0018      	movs	r0, r3
 800c506:	f7ff ff5d 	bl	800c3c4 <__NVIC_SetPriority>
}
 800c50a:	46c0      	nop			@ (mov r8, r8)
 800c50c:	46bd      	mov	sp, r7
 800c50e:	b004      	add	sp, #16
 800c510:	bd80      	pop	{r7, pc}

0800c512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b082      	sub	sp, #8
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	0018      	movs	r0, r3
 800c51e:	f7ff ffbf 	bl	800c4a0 <SysTick_Config>
 800c522:	0003      	movs	r3, r0
}
 800c524:	0018      	movs	r0, r3
 800c526:	46bd      	mov	sp, r7
 800c528:	b002      	add	sp, #8
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c536:	2300      	movs	r3, #0
 800c538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c53a:	e147      	b.n	800c7cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2101      	movs	r1, #1
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	4091      	lsls	r1, r2
 800c546:	000a      	movs	r2, r1
 800c548:	4013      	ands	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d100      	bne.n	800c554 <HAL_GPIO_Init+0x28>
 800c552:	e138      	b.n	800c7c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	2203      	movs	r2, #3
 800c55a:	4013      	ands	r3, r2
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d005      	beq.n	800c56c <HAL_GPIO_Init+0x40>
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	2203      	movs	r2, #3
 800c566:	4013      	ands	r3, r2
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d130      	bne.n	800c5ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	2203      	movs	r2, #3
 800c578:	409a      	lsls	r2, r3
 800c57a:	0013      	movs	r3, r2
 800c57c:	43da      	mvns	r2, r3
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	4013      	ands	r3, r2
 800c582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	68da      	ldr	r2, [r3, #12]
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	409a      	lsls	r2, r3
 800c58e:	0013      	movs	r3, r2
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	4313      	orrs	r3, r2
 800c594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	409a      	lsls	r2, r3
 800c5a8:	0013      	movs	r3, r2
 800c5aa:	43da      	mvns	r2, r3
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	091b      	lsrs	r3, r3, #4
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	401a      	ands	r2, r3
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	409a      	lsls	r2, r3
 800c5c0:	0013      	movs	r3, r2
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	2203      	movs	r2, #3
 800c5d4:	4013      	ands	r3, r2
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	d017      	beq.n	800c60a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	409a      	lsls	r2, r3
 800c5e8:	0013      	movs	r3, r2
 800c5ea:	43da      	mvns	r2, r3
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	689a      	ldr	r2, [r3, #8]
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	409a      	lsls	r2, r3
 800c5fc:	0013      	movs	r3, r2
 800c5fe:	693a      	ldr	r2, [r7, #16]
 800c600:	4313      	orrs	r3, r2
 800c602:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	2203      	movs	r2, #3
 800c610:	4013      	ands	r3, r2
 800c612:	2b02      	cmp	r3, #2
 800c614:	d123      	bne.n	800c65e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	08da      	lsrs	r2, r3, #3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	3208      	adds	r2, #8
 800c61e:	0092      	lsls	r2, r2, #2
 800c620:	58d3      	ldr	r3, [r2, r3]
 800c622:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	2207      	movs	r2, #7
 800c628:	4013      	ands	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	220f      	movs	r2, #15
 800c62e:	409a      	lsls	r2, r3
 800c630:	0013      	movs	r3, r2
 800c632:	43da      	mvns	r2, r3
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	4013      	ands	r3, r2
 800c638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	691a      	ldr	r2, [r3, #16]
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	2107      	movs	r1, #7
 800c642:	400b      	ands	r3, r1
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	409a      	lsls	r2, r3
 800c648:	0013      	movs	r3, r2
 800c64a:	693a      	ldr	r2, [r7, #16]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	08da      	lsrs	r2, r3, #3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3208      	adds	r2, #8
 800c658:	0092      	lsls	r2, r2, #2
 800c65a:	6939      	ldr	r1, [r7, #16]
 800c65c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	005b      	lsls	r3, r3, #1
 800c668:	2203      	movs	r2, #3
 800c66a:	409a      	lsls	r2, r3
 800c66c:	0013      	movs	r3, r2
 800c66e:	43da      	mvns	r2, r3
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	4013      	ands	r3, r2
 800c674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	2203      	movs	r2, #3
 800c67c:	401a      	ands	r2, r3
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	005b      	lsls	r3, r3, #1
 800c682:	409a      	lsls	r2, r3
 800c684:	0013      	movs	r3, r2
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	4313      	orrs	r3, r2
 800c68a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	693a      	ldr	r2, [r7, #16]
 800c690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	23c0      	movs	r3, #192	@ 0xc0
 800c698:	029b      	lsls	r3, r3, #10
 800c69a:	4013      	ands	r3, r2
 800c69c:	d100      	bne.n	800c6a0 <HAL_GPIO_Init+0x174>
 800c69e:	e092      	b.n	800c7c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800c6a0:	4a50      	ldr	r2, [pc, #320]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	089b      	lsrs	r3, r3, #2
 800c6a6:	3318      	adds	r3, #24
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	589b      	ldr	r3, [r3, r2]
 800c6ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2203      	movs	r2, #3
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	220f      	movs	r2, #15
 800c6b8:	409a      	lsls	r2, r3
 800c6ba:	0013      	movs	r3, r2
 800c6bc:	43da      	mvns	r2, r3
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	23a0      	movs	r3, #160	@ 0xa0
 800c6c8:	05db      	lsls	r3, r3, #23
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d013      	beq.n	800c6f6 <HAL_GPIO_Init+0x1ca>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a45      	ldr	r2, [pc, #276]	@ (800c7e8 <HAL_GPIO_Init+0x2bc>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d00d      	beq.n	800c6f2 <HAL_GPIO_Init+0x1c6>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a44      	ldr	r2, [pc, #272]	@ (800c7ec <HAL_GPIO_Init+0x2c0>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d007      	beq.n	800c6ee <HAL_GPIO_Init+0x1c2>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a43      	ldr	r2, [pc, #268]	@ (800c7f0 <HAL_GPIO_Init+0x2c4>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d101      	bne.n	800c6ea <HAL_GPIO_Init+0x1be>
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e006      	b.n	800c6f8 <HAL_GPIO_Init+0x1cc>
 800c6ea:	2305      	movs	r3, #5
 800c6ec:	e004      	b.n	800c6f8 <HAL_GPIO_Init+0x1cc>
 800c6ee:	2302      	movs	r3, #2
 800c6f0:	e002      	b.n	800c6f8 <HAL_GPIO_Init+0x1cc>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e000      	b.n	800c6f8 <HAL_GPIO_Init+0x1cc>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	697a      	ldr	r2, [r7, #20]
 800c6fa:	2103      	movs	r1, #3
 800c6fc:	400a      	ands	r2, r1
 800c6fe:	00d2      	lsls	r2, r2, #3
 800c700:	4093      	lsls	r3, r2
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	4313      	orrs	r3, r2
 800c706:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800c708:	4936      	ldr	r1, [pc, #216]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	089b      	lsrs	r3, r3, #2
 800c70e:	3318      	adds	r3, #24
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c716:	4b33      	ldr	r3, [pc, #204]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	43da      	mvns	r2, r3
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	4013      	ands	r3, r2
 800c724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	2380      	movs	r3, #128	@ 0x80
 800c72c:	035b      	lsls	r3, r3, #13
 800c72e:	4013      	ands	r3, r2
 800c730:	d003      	beq.n	800c73a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	4313      	orrs	r3, r2
 800c738:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c73a:	4b2a      	ldr	r3, [pc, #168]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c73c:	693a      	ldr	r2, [r7, #16]
 800c73e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800c740:	4b28      	ldr	r3, [pc, #160]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	43da      	mvns	r2, r3
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	4013      	ands	r3, r2
 800c74e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	2380      	movs	r3, #128	@ 0x80
 800c756:	039b      	lsls	r3, r3, #14
 800c758:	4013      	ands	r3, r2
 800c75a:	d003      	beq.n	800c764 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	4313      	orrs	r3, r2
 800c762:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c764:	4b1f      	ldr	r3, [pc, #124]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800c76a:	4a1e      	ldr	r2, [pc, #120]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c76c:	2384      	movs	r3, #132	@ 0x84
 800c76e:	58d3      	ldr	r3, [r2, r3]
 800c770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	43da      	mvns	r2, r3
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	4013      	ands	r3, r2
 800c77a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	2380      	movs	r3, #128	@ 0x80
 800c782:	029b      	lsls	r3, r3, #10
 800c784:	4013      	ands	r3, r2
 800c786:	d003      	beq.n	800c790 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800c788:	693a      	ldr	r2, [r7, #16]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c790:	4914      	ldr	r1, [pc, #80]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c792:	2284      	movs	r2, #132	@ 0x84
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800c798:	4a12      	ldr	r2, [pc, #72]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c79a:	2380      	movs	r3, #128	@ 0x80
 800c79c:	58d3      	ldr	r3, [r2, r3]
 800c79e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	43da      	mvns	r2, r3
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	2380      	movs	r3, #128	@ 0x80
 800c7b0:	025b      	lsls	r3, r3, #9
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	d003      	beq.n	800c7be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c7be:	4909      	ldr	r1, [pc, #36]	@ (800c7e4 <HAL_GPIO_Init+0x2b8>)
 800c7c0:	2280      	movs	r2, #128	@ 0x80
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	40da      	lsrs	r2, r3
 800c7d4:	1e13      	subs	r3, r2, #0
 800c7d6:	d000      	beq.n	800c7da <HAL_GPIO_Init+0x2ae>
 800c7d8:	e6b0      	b.n	800c53c <HAL_GPIO_Init+0x10>
  }
}
 800c7da:	46c0      	nop			@ (mov r8, r8)
 800c7dc:	46c0      	nop			@ (mov r8, r8)
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	b006      	add	sp, #24
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	40021800 	.word	0x40021800
 800c7e8:	50000400 	.word	0x50000400
 800c7ec:	50000800 	.word	0x50000800
 800c7f0:	50000c00 	.word	0x50000c00

0800c7f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	000a      	movs	r2, r1
 800c7fe:	1cbb      	adds	r3, r7, #2
 800c800:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	1cba      	adds	r2, r7, #2
 800c808:	8812      	ldrh	r2, [r2, #0]
 800c80a:	4013      	ands	r3, r2
 800c80c:	d004      	beq.n	800c818 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800c80e:	230f      	movs	r3, #15
 800c810:	18fb      	adds	r3, r7, r3
 800c812:	2201      	movs	r2, #1
 800c814:	701a      	strb	r2, [r3, #0]
 800c816:	e003      	b.n	800c820 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c818:	230f      	movs	r3, #15
 800c81a:	18fb      	adds	r3, r7, r3
 800c81c:	2200      	movs	r2, #0
 800c81e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800c820:	230f      	movs	r3, #15
 800c822:	18fb      	adds	r3, r7, r3
 800c824:	781b      	ldrb	r3, [r3, #0]
}
 800c826:	0018      	movs	r0, r3
 800c828:	46bd      	mov	sp, r7
 800c82a:	b004      	add	sp, #16
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b082      	sub	sp, #8
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	0008      	movs	r0, r1
 800c838:	0011      	movs	r1, r2
 800c83a:	1cbb      	adds	r3, r7, #2
 800c83c:	1c02      	adds	r2, r0, #0
 800c83e:	801a      	strh	r2, [r3, #0]
 800c840:	1c7b      	adds	r3, r7, #1
 800c842:	1c0a      	adds	r2, r1, #0
 800c844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c846:	1c7b      	adds	r3, r7, #1
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d004      	beq.n	800c858 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c84e:	1cbb      	adds	r3, r7, #2
 800c850:	881a      	ldrh	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c856:	e003      	b.n	800c860 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c858:	1cbb      	adds	r3, r7, #2
 800c85a:	881a      	ldrh	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c860:	46c0      	nop			@ (mov r8, r8)
 800c862:	46bd      	mov	sp, r7
 800c864:	b002      	add	sp, #8
 800c866:	bd80      	pop	{r7, pc}

0800c868 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	000a      	movs	r2, r1
 800c872:	1cbb      	adds	r3, r7, #2
 800c874:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	695b      	ldr	r3, [r3, #20]
 800c87a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c87c:	1cbb      	adds	r3, r7, #2
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	4013      	ands	r3, r2
 800c884:	041a      	lsls	r2, r3, #16
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	43db      	mvns	r3, r3
 800c88a:	1cb9      	adds	r1, r7, #2
 800c88c:	8809      	ldrh	r1, [r1, #0]
 800c88e:	400b      	ands	r3, r1
 800c890:	431a      	orrs	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	619a      	str	r2, [r3, #24]
}
 800c896:	46c0      	nop			@ (mov r8, r8)
 800c898:	46bd      	mov	sp, r7
 800c89a:	b004      	add	sp, #16
 800c89c:	bd80      	pop	{r7, pc}
	...

0800c8a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e08f      	b.n	800c9d2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2241      	movs	r2, #65	@ 0x41
 800c8b6:	5c9b      	ldrb	r3, [r3, r2]
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d107      	bne.n	800c8ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2240      	movs	r2, #64	@ 0x40
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	0018      	movs	r0, r3
 800c8ca:	f7ff fa83 	bl	800bdd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2241      	movs	r2, #65	@ 0x41
 800c8d2:	2124      	movs	r1, #36	@ 0x24
 800c8d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	438a      	bics	r2, r1
 800c8e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685a      	ldr	r2, [r3, #4]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	493b      	ldr	r1, [pc, #236]	@ (800c9dc <HAL_I2C_Init+0x13c>)
 800c8f0:	400a      	ands	r2, r1
 800c8f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	689a      	ldr	r2, [r3, #8]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4938      	ldr	r1, [pc, #224]	@ (800c9e0 <HAL_I2C_Init+0x140>)
 800c900:	400a      	ands	r2, r1
 800c902:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d108      	bne.n	800c91e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	689a      	ldr	r2, [r3, #8]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2180      	movs	r1, #128	@ 0x80
 800c916:	0209      	lsls	r1, r1, #8
 800c918:	430a      	orrs	r2, r1
 800c91a:	609a      	str	r2, [r3, #8]
 800c91c:	e007      	b.n	800c92e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	689a      	ldr	r2, [r3, #8]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2184      	movs	r1, #132	@ 0x84
 800c928:	0209      	lsls	r1, r1, #8
 800c92a:	430a      	orrs	r2, r1
 800c92c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	2b02      	cmp	r3, #2
 800c934:	d109      	bne.n	800c94a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2180      	movs	r1, #128	@ 0x80
 800c942:	0109      	lsls	r1, r1, #4
 800c944:	430a      	orrs	r2, r1
 800c946:	605a      	str	r2, [r3, #4]
 800c948:	e007      	b.n	800c95a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4923      	ldr	r1, [pc, #140]	@ (800c9e4 <HAL_I2C_Init+0x144>)
 800c956:	400a      	ands	r2, r1
 800c958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	685a      	ldr	r2, [r3, #4]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4920      	ldr	r1, [pc, #128]	@ (800c9e8 <HAL_I2C_Init+0x148>)
 800c966:	430a      	orrs	r2, r1
 800c968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68da      	ldr	r2, [r3, #12]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	491a      	ldr	r1, [pc, #104]	@ (800c9e0 <HAL_I2C_Init+0x140>)
 800c976:	400a      	ands	r2, r1
 800c978:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	691a      	ldr	r2, [r3, #16]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	695b      	ldr	r3, [r3, #20]
 800c982:	431a      	orrs	r2, r3
 800c984:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	430a      	orrs	r2, r1
 800c992:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	69d9      	ldr	r1, [r3, #28]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a1a      	ldr	r2, [r3, #32]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	430a      	orrs	r2, r1
 800c9a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2101      	movs	r1, #1
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2241      	movs	r2, #65	@ 0x41
 800c9be:	2120      	movs	r1, #32
 800c9c0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2242      	movs	r2, #66	@ 0x42
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	0018      	movs	r0, r3
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	b002      	add	sp, #8
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	46c0      	nop			@ (mov r8, r8)
 800c9dc:	f0ffffff 	.word	0xf0ffffff
 800c9e0:	ffff7fff 	.word	0xffff7fff
 800c9e4:	fffff7ff 	.word	0xfffff7ff
 800c9e8:	02008000 	.word	0x02008000

0800c9ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9ec:	b590      	push	{r4, r7, lr}
 800c9ee:	b089      	sub	sp, #36	@ 0x24
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	000c      	movs	r4, r1
 800c9f6:	0010      	movs	r0, r2
 800c9f8:	0019      	movs	r1, r3
 800c9fa:	230a      	movs	r3, #10
 800c9fc:	18fb      	adds	r3, r7, r3
 800c9fe:	1c22      	adds	r2, r4, #0
 800ca00:	801a      	strh	r2, [r3, #0]
 800ca02:	2308      	movs	r3, #8
 800ca04:	18fb      	adds	r3, r7, r3
 800ca06:	1c02      	adds	r2, r0, #0
 800ca08:	801a      	strh	r2, [r3, #0]
 800ca0a:	1dbb      	adds	r3, r7, #6
 800ca0c:	1c0a      	adds	r2, r1, #0
 800ca0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2241      	movs	r2, #65	@ 0x41
 800ca14:	5c9b      	ldrb	r3, [r3, r2]
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b20      	cmp	r3, #32
 800ca1a:	d000      	beq.n	800ca1e <HAL_I2C_Mem_Write+0x32>
 800ca1c:	e10c      	b.n	800cc38 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d004      	beq.n	800ca2e <HAL_I2C_Mem_Write+0x42>
 800ca24:	232c      	movs	r3, #44	@ 0x2c
 800ca26:	18fb      	adds	r3, r7, r3
 800ca28:	881b      	ldrh	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d105      	bne.n	800ca3a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2280      	movs	r2, #128	@ 0x80
 800ca32:	0092      	lsls	r2, r2, #2
 800ca34:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	e0ff      	b.n	800cc3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2240      	movs	r2, #64	@ 0x40
 800ca3e:	5c9b      	ldrb	r3, [r3, r2]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d101      	bne.n	800ca48 <HAL_I2C_Mem_Write+0x5c>
 800ca44:	2302      	movs	r3, #2
 800ca46:	e0f8      	b.n	800cc3a <HAL_I2C_Mem_Write+0x24e>
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2240      	movs	r2, #64	@ 0x40
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ca50:	f7ff fc8a 	bl	800c368 <HAL_GetTick>
 800ca54:	0003      	movs	r3, r0
 800ca56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ca58:	2380      	movs	r3, #128	@ 0x80
 800ca5a:	0219      	lsls	r1, r3, #8
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	2319      	movs	r3, #25
 800ca64:	2201      	movs	r2, #1
 800ca66:	f000 fc07 	bl	800d278 <I2C_WaitOnFlagUntilTimeout>
 800ca6a:	1e03      	subs	r3, r0, #0
 800ca6c:	d001      	beq.n	800ca72 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e0e3      	b.n	800cc3a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2241      	movs	r2, #65	@ 0x41
 800ca76:	2121      	movs	r1, #33	@ 0x21
 800ca78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2242      	movs	r2, #66	@ 0x42
 800ca7e:	2140      	movs	r1, #64	@ 0x40
 800ca80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	222c      	movs	r2, #44	@ 0x2c
 800ca92:	18ba      	adds	r2, r7, r2
 800ca94:	8812      	ldrh	r2, [r2, #0]
 800ca96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ca9e:	1dbb      	adds	r3, r7, #6
 800caa0:	881c      	ldrh	r4, [r3, #0]
 800caa2:	2308      	movs	r3, #8
 800caa4:	18fb      	adds	r3, r7, r3
 800caa6:	881a      	ldrh	r2, [r3, #0]
 800caa8:	230a      	movs	r3, #10
 800caaa:	18fb      	adds	r3, r7, r3
 800caac:	8819      	ldrh	r1, [r3, #0]
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	9301      	str	r3, [sp, #4]
 800cab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	0023      	movs	r3, r4
 800caba:	f000 faf5 	bl	800d0a8 <I2C_RequestMemoryWrite>
 800cabe:	1e03      	subs	r3, r0, #0
 800cac0:	d005      	beq.n	800cace <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2240      	movs	r2, #64	@ 0x40
 800cac6:	2100      	movs	r1, #0
 800cac8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e0b5      	b.n	800cc3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	2bff      	cmp	r3, #255	@ 0xff
 800cad6:	d911      	bls.n	800cafc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	22ff      	movs	r2, #255	@ 0xff
 800cadc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	2380      	movs	r3, #128	@ 0x80
 800cae6:	045c      	lsls	r4, r3, #17
 800cae8:	230a      	movs	r3, #10
 800caea:	18fb      	adds	r3, r7, r3
 800caec:	8819      	ldrh	r1, [r3, #0]
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	2300      	movs	r3, #0
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	0023      	movs	r3, r4
 800caf6:	f000 fd99 	bl	800d62c <I2C_TransferConfig>
 800cafa:	e012      	b.n	800cb22 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	2380      	movs	r3, #128	@ 0x80
 800cb0e:	049c      	lsls	r4, r3, #18
 800cb10:	230a      	movs	r3, #10
 800cb12:	18fb      	adds	r3, r7, r3
 800cb14:	8819      	ldrh	r1, [r3, #0]
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	0023      	movs	r3, r4
 800cb1e:	f000 fd85 	bl	800d62c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	0018      	movs	r0, r3
 800cb2a:	f000 fbfd 	bl	800d328 <I2C_WaitOnTXISFlagUntilTimeout>
 800cb2e:	1e03      	subs	r3, r0, #0
 800cb30:	d001      	beq.n	800cb36 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e081      	b.n	800cc3a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb3a:	781a      	ldrb	r2, [r3, #0]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb46:	1c5a      	adds	r2, r3, #1
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	3b01      	subs	r3, #1
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d03a      	beq.n	800cbe6 <HAL_I2C_Mem_Write+0x1fa>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d136      	bne.n	800cbe6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cb78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	0013      	movs	r3, r2
 800cb82:	2200      	movs	r2, #0
 800cb84:	2180      	movs	r1, #128	@ 0x80
 800cb86:	f000 fb77 	bl	800d278 <I2C_WaitOnFlagUntilTimeout>
 800cb8a:	1e03      	subs	r3, r0, #0
 800cb8c:	d001      	beq.n	800cb92 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e053      	b.n	800cc3a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	2bff      	cmp	r3, #255	@ 0xff
 800cb9a:	d911      	bls.n	800cbc0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	22ff      	movs	r2, #255	@ 0xff
 800cba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	2380      	movs	r3, #128	@ 0x80
 800cbaa:	045c      	lsls	r4, r3, #17
 800cbac:	230a      	movs	r3, #10
 800cbae:	18fb      	adds	r3, r7, r3
 800cbb0:	8819      	ldrh	r1, [r3, #0]
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	0023      	movs	r3, r4
 800cbba:	f000 fd37 	bl	800d62c <I2C_TransferConfig>
 800cbbe:	e012      	b.n	800cbe6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbce:	b2da      	uxtb	r2, r3
 800cbd0:	2380      	movs	r3, #128	@ 0x80
 800cbd2:	049c      	lsls	r4, r3, #18
 800cbd4:	230a      	movs	r3, #10
 800cbd6:	18fb      	adds	r3, r7, r3
 800cbd8:	8819      	ldrh	r1, [r3, #0]
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	0023      	movs	r3, r4
 800cbe2:	f000 fd23 	bl	800d62c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d198      	bne.n	800cb22 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	0018      	movs	r0, r3
 800cbf8:	f000 fbdc 	bl	800d3b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cbfc:	1e03      	subs	r3, r0, #0
 800cbfe:	d001      	beq.n	800cc04 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	e01a      	b.n	800cc3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2220      	movs	r2, #32
 800cc0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	685a      	ldr	r2, [r3, #4]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	490b      	ldr	r1, [pc, #44]	@ (800cc44 <HAL_I2C_Mem_Write+0x258>)
 800cc18:	400a      	ands	r2, r1
 800cc1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2241      	movs	r2, #65	@ 0x41
 800cc20:	2120      	movs	r1, #32
 800cc22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2242      	movs	r2, #66	@ 0x42
 800cc28:	2100      	movs	r1, #0
 800cc2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2240      	movs	r2, #64	@ 0x40
 800cc30:	2100      	movs	r1, #0
 800cc32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	e000      	b.n	800cc3a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800cc38:	2302      	movs	r3, #2
  }
}
 800cc3a:	0018      	movs	r0, r3
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	b007      	add	sp, #28
 800cc40:	bd90      	pop	{r4, r7, pc}
 800cc42:	46c0      	nop			@ (mov r8, r8)
 800cc44:	fe00e800 	.word	0xfe00e800

0800cc48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc48:	b590      	push	{r4, r7, lr}
 800cc4a:	b089      	sub	sp, #36	@ 0x24
 800cc4c:	af02      	add	r7, sp, #8
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	000c      	movs	r4, r1
 800cc52:	0010      	movs	r0, r2
 800cc54:	0019      	movs	r1, r3
 800cc56:	230a      	movs	r3, #10
 800cc58:	18fb      	adds	r3, r7, r3
 800cc5a:	1c22      	adds	r2, r4, #0
 800cc5c:	801a      	strh	r2, [r3, #0]
 800cc5e:	2308      	movs	r3, #8
 800cc60:	18fb      	adds	r3, r7, r3
 800cc62:	1c02      	adds	r2, r0, #0
 800cc64:	801a      	strh	r2, [r3, #0]
 800cc66:	1dbb      	adds	r3, r7, #6
 800cc68:	1c0a      	adds	r2, r1, #0
 800cc6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2241      	movs	r2, #65	@ 0x41
 800cc70:	5c9b      	ldrb	r3, [r3, r2]
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	2b20      	cmp	r3, #32
 800cc76:	d000      	beq.n	800cc7a <HAL_I2C_Mem_Read+0x32>
 800cc78:	e110      	b.n	800ce9c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d004      	beq.n	800cc8a <HAL_I2C_Mem_Read+0x42>
 800cc80:	232c      	movs	r3, #44	@ 0x2c
 800cc82:	18fb      	adds	r3, r7, r3
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d105      	bne.n	800cc96 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2280      	movs	r2, #128	@ 0x80
 800cc8e:	0092      	lsls	r2, r2, #2
 800cc90:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	e103      	b.n	800ce9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2240      	movs	r2, #64	@ 0x40
 800cc9a:	5c9b      	ldrb	r3, [r3, r2]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d101      	bne.n	800cca4 <HAL_I2C_Mem_Read+0x5c>
 800cca0:	2302      	movs	r3, #2
 800cca2:	e0fc      	b.n	800ce9e <HAL_I2C_Mem_Read+0x256>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2240      	movs	r2, #64	@ 0x40
 800cca8:	2101      	movs	r1, #1
 800ccaa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ccac:	f7ff fb5c 	bl	800c368 <HAL_GetTick>
 800ccb0:	0003      	movs	r3, r0
 800ccb2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ccb4:	2380      	movs	r3, #128	@ 0x80
 800ccb6:	0219      	lsls	r1, r3, #8
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	2319      	movs	r3, #25
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	f000 fad9 	bl	800d278 <I2C_WaitOnFlagUntilTimeout>
 800ccc6:	1e03      	subs	r3, r0, #0
 800ccc8:	d001      	beq.n	800ccce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800ccca:	2301      	movs	r3, #1
 800cccc:	e0e7      	b.n	800ce9e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2241      	movs	r2, #65	@ 0x41
 800ccd2:	2122      	movs	r1, #34	@ 0x22
 800ccd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2242      	movs	r2, #66	@ 0x42
 800ccda:	2140      	movs	r1, #64	@ 0x40
 800ccdc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2200      	movs	r2, #0
 800cce2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cce8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	222c      	movs	r2, #44	@ 0x2c
 800ccee:	18ba      	adds	r2, r7, r2
 800ccf0:	8812      	ldrh	r2, [r2, #0]
 800ccf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ccfa:	1dbb      	adds	r3, r7, #6
 800ccfc:	881c      	ldrh	r4, [r3, #0]
 800ccfe:	2308      	movs	r3, #8
 800cd00:	18fb      	adds	r3, r7, r3
 800cd02:	881a      	ldrh	r2, [r3, #0]
 800cd04:	230a      	movs	r3, #10
 800cd06:	18fb      	adds	r3, r7, r3
 800cd08:	8819      	ldrh	r1, [r3, #0]
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	9301      	str	r3, [sp, #4]
 800cd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	0023      	movs	r3, r4
 800cd16:	f000 fa2b 	bl	800d170 <I2C_RequestMemoryRead>
 800cd1a:	1e03      	subs	r3, r0, #0
 800cd1c:	d005      	beq.n	800cd2a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2240      	movs	r2, #64	@ 0x40
 800cd22:	2100      	movs	r1, #0
 800cd24:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e0b9      	b.n	800ce9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	2bff      	cmp	r3, #255	@ 0xff
 800cd32:	d911      	bls.n	800cd58 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	22ff      	movs	r2, #255	@ 0xff
 800cd38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	2380      	movs	r3, #128	@ 0x80
 800cd42:	045c      	lsls	r4, r3, #17
 800cd44:	230a      	movs	r3, #10
 800cd46:	18fb      	adds	r3, r7, r3
 800cd48:	8819      	ldrh	r1, [r3, #0]
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	4b56      	ldr	r3, [pc, #344]	@ (800cea8 <HAL_I2C_Mem_Read+0x260>)
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	0023      	movs	r3, r4
 800cd52:	f000 fc6b 	bl	800d62c <I2C_TransferConfig>
 800cd56:	e012      	b.n	800cd7e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	2380      	movs	r3, #128	@ 0x80
 800cd6a:	049c      	lsls	r4, r3, #18
 800cd6c:	230a      	movs	r3, #10
 800cd6e:	18fb      	adds	r3, r7, r3
 800cd70:	8819      	ldrh	r1, [r3, #0]
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	4b4c      	ldr	r3, [pc, #304]	@ (800cea8 <HAL_I2C_Mem_Read+0x260>)
 800cd76:	9300      	str	r3, [sp, #0]
 800cd78:	0023      	movs	r3, r4
 800cd7a:	f000 fc57 	bl	800d62c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800cd7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	0013      	movs	r3, r2
 800cd88:	2200      	movs	r2, #0
 800cd8a:	2104      	movs	r1, #4
 800cd8c:	f000 fa74 	bl	800d278 <I2C_WaitOnFlagUntilTimeout>
 800cd90:	1e03      	subs	r3, r0, #0
 800cd92:	d001      	beq.n	800cd98 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e082      	b.n	800ce9e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cda2:	b2d2      	uxtb	r2, r2
 800cda4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdaa:	1c5a      	adds	r2, r3, #1
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d03a      	beq.n	800ce4a <HAL_I2C_Mem_Read+0x202>
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d136      	bne.n	800ce4a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	0013      	movs	r3, r2
 800cde6:	2200      	movs	r2, #0
 800cde8:	2180      	movs	r1, #128	@ 0x80
 800cdea:	f000 fa45 	bl	800d278 <I2C_WaitOnFlagUntilTimeout>
 800cdee:	1e03      	subs	r3, r0, #0
 800cdf0:	d001      	beq.n	800cdf6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e053      	b.n	800ce9e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	2bff      	cmp	r3, #255	@ 0xff
 800cdfe:	d911      	bls.n	800ce24 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	22ff      	movs	r2, #255	@ 0xff
 800ce04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	2380      	movs	r3, #128	@ 0x80
 800ce0e:	045c      	lsls	r4, r3, #17
 800ce10:	230a      	movs	r3, #10
 800ce12:	18fb      	adds	r3, r7, r3
 800ce14:	8819      	ldrh	r1, [r3, #0]
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	0023      	movs	r3, r4
 800ce1e:	f000 fc05 	bl	800d62c <I2C_TransferConfig>
 800ce22:	e012      	b.n	800ce4a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce32:	b2da      	uxtb	r2, r3
 800ce34:	2380      	movs	r3, #128	@ 0x80
 800ce36:	049c      	lsls	r4, r3, #18
 800ce38:	230a      	movs	r3, #10
 800ce3a:	18fb      	adds	r3, r7, r3
 800ce3c:	8819      	ldrh	r1, [r3, #0]
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	2300      	movs	r3, #0
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	0023      	movs	r3, r4
 800ce46:	f000 fbf1 	bl	800d62c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d194      	bne.n	800cd7e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	0018      	movs	r0, r3
 800ce5c:	f000 faaa 	bl	800d3b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ce60:	1e03      	subs	r3, r0, #0
 800ce62:	d001      	beq.n	800ce68 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	e01a      	b.n	800ce9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2220      	movs	r2, #32
 800ce6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	685a      	ldr	r2, [r3, #4]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	490c      	ldr	r1, [pc, #48]	@ (800ceac <HAL_I2C_Mem_Read+0x264>)
 800ce7c:	400a      	ands	r2, r1
 800ce7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2241      	movs	r2, #65	@ 0x41
 800ce84:	2120      	movs	r1, #32
 800ce86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2242      	movs	r2, #66	@ 0x42
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2240      	movs	r2, #64	@ 0x40
 800ce94:	2100      	movs	r1, #0
 800ce96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	e000      	b.n	800ce9e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800ce9c:	2302      	movs	r3, #2
  }
}
 800ce9e:	0018      	movs	r0, r3
 800cea0:	46bd      	mov	sp, r7
 800cea2:	b007      	add	sp, #28
 800cea4:	bd90      	pop	{r4, r7, pc}
 800cea6:	46c0      	nop			@ (mov r8, r8)
 800cea8:	80002400 	.word	0x80002400
 800ceac:	fe00e800 	.word	0xfe00e800

0800ceb0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b08a      	sub	sp, #40	@ 0x28
 800ceb4:	af02      	add	r7, sp, #8
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	607a      	str	r2, [r7, #4]
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	230a      	movs	r3, #10
 800cebe:	18fb      	adds	r3, r7, r3
 800cec0:	1c0a      	adds	r2, r1, #0
 800cec2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800cec4:	2300      	movs	r3, #0
 800cec6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2241      	movs	r2, #65	@ 0x41
 800cecc:	5c9b      	ldrb	r3, [r3, r2]
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	2b20      	cmp	r3, #32
 800ced2:	d000      	beq.n	800ced6 <HAL_I2C_IsDeviceReady+0x26>
 800ced4:	e0df      	b.n	800d096 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	699a      	ldr	r2, [r3, #24]
 800cedc:	2380      	movs	r3, #128	@ 0x80
 800cede:	021b      	lsls	r3, r3, #8
 800cee0:	401a      	ands	r2, r3
 800cee2:	2380      	movs	r3, #128	@ 0x80
 800cee4:	021b      	lsls	r3, r3, #8
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d101      	bne.n	800ceee <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800ceea:	2302      	movs	r3, #2
 800ceec:	e0d4      	b.n	800d098 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2240      	movs	r2, #64	@ 0x40
 800cef2:	5c9b      	ldrb	r3, [r3, r2]
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d101      	bne.n	800cefc <HAL_I2C_IsDeviceReady+0x4c>
 800cef8:	2302      	movs	r3, #2
 800cefa:	e0cd      	b.n	800d098 <HAL_I2C_IsDeviceReady+0x1e8>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2240      	movs	r2, #64	@ 0x40
 800cf00:	2101      	movs	r1, #1
 800cf02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2241      	movs	r2, #65	@ 0x41
 800cf08:	2124      	movs	r1, #36	@ 0x24
 800cf0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d107      	bne.n	800cf2a <HAL_I2C_IsDeviceReady+0x7a>
 800cf1a:	230a      	movs	r3, #10
 800cf1c:	18fb      	adds	r3, r7, r3
 800cf1e:	881b      	ldrh	r3, [r3, #0]
 800cf20:	059b      	lsls	r3, r3, #22
 800cf22:	0d9b      	lsrs	r3, r3, #22
 800cf24:	4a5e      	ldr	r2, [pc, #376]	@ (800d0a0 <HAL_I2C_IsDeviceReady+0x1f0>)
 800cf26:	431a      	orrs	r2, r3
 800cf28:	e006      	b.n	800cf38 <HAL_I2C_IsDeviceReady+0x88>
 800cf2a:	230a      	movs	r3, #10
 800cf2c:	18fb      	adds	r3, r7, r3
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	059b      	lsls	r3, r3, #22
 800cf32:	0d9b      	lsrs	r3, r3, #22
 800cf34:	4a5b      	ldr	r2, [pc, #364]	@ (800d0a4 <HAL_I2C_IsDeviceReady+0x1f4>)
 800cf36:	431a      	orrs	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800cf3e:	f7ff fa13 	bl	800c368 <HAL_GetTick>
 800cf42:	0003      	movs	r3, r0
 800cf44:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	699b      	ldr	r3, [r3, #24]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	4013      	ands	r3, r2
 800cf50:	3b20      	subs	r3, #32
 800cf52:	425a      	negs	r2, r3
 800cf54:	4153      	adcs	r3, r2
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	231f      	movs	r3, #31
 800cf5a:	18fb      	adds	r3, r7, r3
 800cf5c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	699b      	ldr	r3, [r3, #24]
 800cf64:	2210      	movs	r2, #16
 800cf66:	4013      	ands	r3, r2
 800cf68:	3b10      	subs	r3, #16
 800cf6a:	425a      	negs	r2, r3
 800cf6c:	4153      	adcs	r3, r2
 800cf6e:	b2da      	uxtb	r2, r3
 800cf70:	231e      	movs	r3, #30
 800cf72:	18fb      	adds	r3, r7, r3
 800cf74:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800cf76:	e035      	b.n	800cfe4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	d01a      	beq.n	800cfb4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cf7e:	f7ff f9f3 	bl	800c368 <HAL_GetTick>
 800cf82:	0002      	movs	r2, r0
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d302      	bcc.n	800cf94 <HAL_I2C_IsDeviceReady+0xe4>
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10f      	bne.n	800cfb4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2241      	movs	r2, #65	@ 0x41
 800cf98:	2120      	movs	r1, #32
 800cf9a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfa0:	2220      	movs	r2, #32
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2240      	movs	r2, #64	@ 0x40
 800cfac:	2100      	movs	r1, #0
 800cfae:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e071      	b.n	800d098 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	2220      	movs	r2, #32
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	3b20      	subs	r3, #32
 800cfc0:	425a      	negs	r2, r3
 800cfc2:	4153      	adcs	r3, r2
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	231f      	movs	r3, #31
 800cfc8:	18fb      	adds	r3, r7, r3
 800cfca:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	2210      	movs	r2, #16
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	3b10      	subs	r3, #16
 800cfd8:	425a      	negs	r2, r3
 800cfda:	4153      	adcs	r3, r2
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	231e      	movs	r3, #30
 800cfe0:	18fb      	adds	r3, r7, r3
 800cfe2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800cfe4:	231f      	movs	r3, #31
 800cfe6:	18fb      	adds	r3, r7, r3
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d104      	bne.n	800cff8 <HAL_I2C_IsDeviceReady+0x148>
 800cfee:	231e      	movs	r3, #30
 800cff0:	18fb      	adds	r3, r7, r3
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d0bf      	beq.n	800cf78 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	699b      	ldr	r3, [r3, #24]
 800cffe:	2210      	movs	r2, #16
 800d000:	4013      	ands	r3, r2
 800d002:	2b10      	cmp	r3, #16
 800d004:	d01a      	beq.n	800d03c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	0013      	movs	r3, r2
 800d010:	2200      	movs	r2, #0
 800d012:	2120      	movs	r1, #32
 800d014:	f000 f930 	bl	800d278 <I2C_WaitOnFlagUntilTimeout>
 800d018:	1e03      	subs	r3, r0, #0
 800d01a:	d001      	beq.n	800d020 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800d01c:	2301      	movs	r3, #1
 800d01e:	e03b      	b.n	800d098 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2220      	movs	r2, #32
 800d026:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2241      	movs	r2, #65	@ 0x41
 800d02c:	2120      	movs	r1, #32
 800d02e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2240      	movs	r2, #64	@ 0x40
 800d034:	2100      	movs	r1, #0
 800d036:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800d038:	2300      	movs	r3, #0
 800d03a:	e02d      	b.n	800d098 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	9300      	str	r3, [sp, #0]
 800d044:	0013      	movs	r3, r2
 800d046:	2200      	movs	r2, #0
 800d048:	2120      	movs	r1, #32
 800d04a:	f000 f915 	bl	800d278 <I2C_WaitOnFlagUntilTimeout>
 800d04e:	1e03      	subs	r3, r0, #0
 800d050:	d001      	beq.n	800d056 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	e020      	b.n	800d098 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2210      	movs	r2, #16
 800d05c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2220      	movs	r2, #32
 800d064:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	3301      	adds	r3, #1
 800d06a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	429a      	cmp	r2, r3
 800d072:	d900      	bls.n	800d076 <HAL_I2C_IsDeviceReady+0x1c6>
 800d074:	e74d      	b.n	800cf12 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2241      	movs	r2, #65	@ 0x41
 800d07a:	2120      	movs	r1, #32
 800d07c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d082:	2220      	movs	r2, #32
 800d084:	431a      	orrs	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2240      	movs	r2, #64	@ 0x40
 800d08e:	2100      	movs	r1, #0
 800d090:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	e000      	b.n	800d098 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800d096:	2302      	movs	r3, #2
  }
}
 800d098:	0018      	movs	r0, r3
 800d09a:	46bd      	mov	sp, r7
 800d09c:	b008      	add	sp, #32
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	02002000 	.word	0x02002000
 800d0a4:	02002800 	.word	0x02002800

0800d0a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d0a8:	b5b0      	push	{r4, r5, r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af02      	add	r7, sp, #8
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	000c      	movs	r4, r1
 800d0b2:	0010      	movs	r0, r2
 800d0b4:	0019      	movs	r1, r3
 800d0b6:	250a      	movs	r5, #10
 800d0b8:	197b      	adds	r3, r7, r5
 800d0ba:	1c22      	adds	r2, r4, #0
 800d0bc:	801a      	strh	r2, [r3, #0]
 800d0be:	2308      	movs	r3, #8
 800d0c0:	18fb      	adds	r3, r7, r3
 800d0c2:	1c02      	adds	r2, r0, #0
 800d0c4:	801a      	strh	r2, [r3, #0]
 800d0c6:	1dbb      	adds	r3, r7, #6
 800d0c8:	1c0a      	adds	r2, r1, #0
 800d0ca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d0cc:	1dbb      	adds	r3, r7, #6
 800d0ce:	881b      	ldrh	r3, [r3, #0]
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	2380      	movs	r3, #128	@ 0x80
 800d0d4:	045c      	lsls	r4, r3, #17
 800d0d6:	197b      	adds	r3, r7, r5
 800d0d8:	8819      	ldrh	r1, [r3, #0]
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	4b23      	ldr	r3, [pc, #140]	@ (800d16c <I2C_RequestMemoryWrite+0xc4>)
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	0023      	movs	r3, r4
 800d0e2:	f000 faa3 	bl	800d62c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0e8:	6a39      	ldr	r1, [r7, #32]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	f000 f91b 	bl	800d328 <I2C_WaitOnTXISFlagUntilTimeout>
 800d0f2:	1e03      	subs	r3, r0, #0
 800d0f4:	d001      	beq.n	800d0fa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e033      	b.n	800d162 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d0fa:	1dbb      	adds	r3, r7, #6
 800d0fc:	881b      	ldrh	r3, [r3, #0]
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d107      	bne.n	800d112 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d102:	2308      	movs	r3, #8
 800d104:	18fb      	adds	r3, r7, r3
 800d106:	881b      	ldrh	r3, [r3, #0]
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	629a      	str	r2, [r3, #40]	@ 0x28
 800d110:	e019      	b.n	800d146 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d112:	2308      	movs	r3, #8
 800d114:	18fb      	adds	r3, r7, r3
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	0a1b      	lsrs	r3, r3, #8
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d126:	6a39      	ldr	r1, [r7, #32]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	0018      	movs	r0, r3
 800d12c:	f000 f8fc 	bl	800d328 <I2C_WaitOnTXISFlagUntilTimeout>
 800d130:	1e03      	subs	r3, r0, #0
 800d132:	d001      	beq.n	800d138 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	e014      	b.n	800d162 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d138:	2308      	movs	r3, #8
 800d13a:	18fb      	adds	r3, r7, r3
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d146:	6a3a      	ldr	r2, [r7, #32]
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	0013      	movs	r3, r2
 800d150:	2200      	movs	r2, #0
 800d152:	2180      	movs	r1, #128	@ 0x80
 800d154:	f000 f890 	bl	800d278 <I2C_WaitOnFlagUntilTimeout>
 800d158:	1e03      	subs	r3, r0, #0
 800d15a:	d001      	beq.n	800d160 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e000      	b.n	800d162 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	0018      	movs	r0, r3
 800d164:	46bd      	mov	sp, r7
 800d166:	b004      	add	sp, #16
 800d168:	bdb0      	pop	{r4, r5, r7, pc}
 800d16a:	46c0      	nop			@ (mov r8, r8)
 800d16c:	80002000 	.word	0x80002000

0800d170 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d170:	b5b0      	push	{r4, r5, r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af02      	add	r7, sp, #8
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	000c      	movs	r4, r1
 800d17a:	0010      	movs	r0, r2
 800d17c:	0019      	movs	r1, r3
 800d17e:	250a      	movs	r5, #10
 800d180:	197b      	adds	r3, r7, r5
 800d182:	1c22      	adds	r2, r4, #0
 800d184:	801a      	strh	r2, [r3, #0]
 800d186:	2308      	movs	r3, #8
 800d188:	18fb      	adds	r3, r7, r3
 800d18a:	1c02      	adds	r2, r0, #0
 800d18c:	801a      	strh	r2, [r3, #0]
 800d18e:	1dbb      	adds	r3, r7, #6
 800d190:	1c0a      	adds	r2, r1, #0
 800d192:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d194:	1dbb      	adds	r3, r7, #6
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	197b      	adds	r3, r7, r5
 800d19c:	8819      	ldrh	r1, [r3, #0]
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	4b23      	ldr	r3, [pc, #140]	@ (800d230 <I2C_RequestMemoryRead+0xc0>)
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f000 fa41 	bl	800d62c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1ac:	6a39      	ldr	r1, [r7, #32]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	f000 f8b9 	bl	800d328 <I2C_WaitOnTXISFlagUntilTimeout>
 800d1b6:	1e03      	subs	r3, r0, #0
 800d1b8:	d001      	beq.n	800d1be <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e033      	b.n	800d226 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d1be:	1dbb      	adds	r3, r7, #6
 800d1c0:	881b      	ldrh	r3, [r3, #0]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d107      	bne.n	800d1d6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d1c6:	2308      	movs	r3, #8
 800d1c8:	18fb      	adds	r3, r7, r3
 800d1ca:	881b      	ldrh	r3, [r3, #0]
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	629a      	str	r2, [r3, #40]	@ 0x28
 800d1d4:	e019      	b.n	800d20a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d1d6:	2308      	movs	r3, #8
 800d1d8:	18fb      	adds	r3, r7, r3
 800d1da:	881b      	ldrh	r3, [r3, #0]
 800d1dc:	0a1b      	lsrs	r3, r3, #8
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1ea:	6a39      	ldr	r1, [r7, #32]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	0018      	movs	r0, r3
 800d1f0:	f000 f89a 	bl	800d328 <I2C_WaitOnTXISFlagUntilTimeout>
 800d1f4:	1e03      	subs	r3, r0, #0
 800d1f6:	d001      	beq.n	800d1fc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e014      	b.n	800d226 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d1fc:	2308      	movs	r3, #8
 800d1fe:	18fb      	adds	r3, r7, r3
 800d200:	881b      	ldrh	r3, [r3, #0]
 800d202:	b2da      	uxtb	r2, r3
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d20a:	6a3a      	ldr	r2, [r7, #32]
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d210:	9300      	str	r3, [sp, #0]
 800d212:	0013      	movs	r3, r2
 800d214:	2200      	movs	r2, #0
 800d216:	2140      	movs	r1, #64	@ 0x40
 800d218:	f000 f82e 	bl	800d278 <I2C_WaitOnFlagUntilTimeout>
 800d21c:	1e03      	subs	r3, r0, #0
 800d21e:	d001      	beq.n	800d224 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800d220:	2301      	movs	r3, #1
 800d222:	e000      	b.n	800d226 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	0018      	movs	r0, r3
 800d228:	46bd      	mov	sp, r7
 800d22a:	b004      	add	sp, #16
 800d22c:	bdb0      	pop	{r4, r5, r7, pc}
 800d22e:	46c0      	nop			@ (mov r8, r8)
 800d230:	80002000 	.word	0x80002000

0800d234 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	2202      	movs	r2, #2
 800d244:	4013      	ands	r3, r2
 800d246:	2b02      	cmp	r3, #2
 800d248:	d103      	bne.n	800d252 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2200      	movs	r2, #0
 800d250:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	2201      	movs	r2, #1
 800d25a:	4013      	ands	r3, r2
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d007      	beq.n	800d270 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	699a      	ldr	r2, [r3, #24]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2101      	movs	r1, #1
 800d26c:	430a      	orrs	r2, r1
 800d26e:	619a      	str	r2, [r3, #24]
  }
}
 800d270:	46c0      	nop			@ (mov r8, r8)
 800d272:	46bd      	mov	sp, r7
 800d274:	b002      	add	sp, #8
 800d276:	bd80      	pop	{r7, pc}

0800d278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	603b      	str	r3, [r7, #0]
 800d284:	1dfb      	adds	r3, r7, #7
 800d286:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d288:	e03a      	b.n	800d300 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d28a:	69ba      	ldr	r2, [r7, #24]
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	0018      	movs	r0, r3
 800d292:	f000 f8d3 	bl	800d43c <I2C_IsErrorOccurred>
 800d296:	1e03      	subs	r3, r0, #0
 800d298:	d001      	beq.n	800d29e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800d29a:	2301      	movs	r3, #1
 800d29c:	e040      	b.n	800d320 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	d02d      	beq.n	800d300 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2a4:	f7ff f860 	bl	800c368 <HAL_GetTick>
 800d2a8:	0002      	movs	r2, r0
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d302      	bcc.n	800d2ba <I2C_WaitOnFlagUntilTimeout+0x42>
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d122      	bne.n	800d300 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	4013      	ands	r3, r2
 800d2c4:	68ba      	ldr	r2, [r7, #8]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	425a      	negs	r2, r3
 800d2ca:	4153      	adcs	r3, r2
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	001a      	movs	r2, r3
 800d2d0:	1dfb      	adds	r3, r7, #7
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d113      	bne.n	800d300 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2dc:	2220      	movs	r2, #32
 800d2de:	431a      	orrs	r2, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2241      	movs	r2, #65	@ 0x41
 800d2e8:	2120      	movs	r1, #32
 800d2ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2242      	movs	r2, #66	@ 0x42
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2240      	movs	r2, #64	@ 0x40
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e00f      	b.n	800d320 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	4013      	ands	r3, r2
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	425a      	negs	r2, r3
 800d310:	4153      	adcs	r3, r2
 800d312:	b2db      	uxtb	r3, r3
 800d314:	001a      	movs	r2, r3
 800d316:	1dfb      	adds	r3, r7, #7
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d0b5      	beq.n	800d28a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	0018      	movs	r0, r3
 800d322:	46bd      	mov	sp, r7
 800d324:	b004      	add	sp, #16
 800d326:	bd80      	pop	{r7, pc}

0800d328 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d334:	e032      	b.n	800d39c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	68b9      	ldr	r1, [r7, #8]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	0018      	movs	r0, r3
 800d33e:	f000 f87d 	bl	800d43c <I2C_IsErrorOccurred>
 800d342:	1e03      	subs	r3, r0, #0
 800d344:	d001      	beq.n	800d34a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	e030      	b.n	800d3ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	3301      	adds	r3, #1
 800d34e:	d025      	beq.n	800d39c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d350:	f7ff f80a 	bl	800c368 <HAL_GetTick>
 800d354:	0002      	movs	r2, r0
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	1ad3      	subs	r3, r2, r3
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d302      	bcc.n	800d366 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d11a      	bne.n	800d39c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	2202      	movs	r2, #2
 800d36e:	4013      	ands	r3, r2
 800d370:	2b02      	cmp	r3, #2
 800d372:	d013      	beq.n	800d39c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d378:	2220      	movs	r2, #32
 800d37a:	431a      	orrs	r2, r3
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2241      	movs	r2, #65	@ 0x41
 800d384:	2120      	movs	r1, #32
 800d386:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2242      	movs	r2, #66	@ 0x42
 800d38c:	2100      	movs	r1, #0
 800d38e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2240      	movs	r2, #64	@ 0x40
 800d394:	2100      	movs	r1, #0
 800d396:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	e007      	b.n	800d3ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	4013      	ands	r3, r2
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d1c5      	bne.n	800d336 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	b004      	add	sp, #16
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d3c0:	e02f      	b.n	800d422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	68b9      	ldr	r1, [r7, #8]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	0018      	movs	r0, r3
 800d3ca:	f000 f837 	bl	800d43c <I2C_IsErrorOccurred>
 800d3ce:	1e03      	subs	r3, r0, #0
 800d3d0:	d001      	beq.n	800d3d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	e02d      	b.n	800d432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3d6:	f7fe ffc7 	bl	800c368 <HAL_GetTick>
 800d3da:	0002      	movs	r2, r0
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d302      	bcc.n	800d3ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d11a      	bne.n	800d422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	2220      	movs	r2, #32
 800d3f4:	4013      	ands	r3, r2
 800d3f6:	2b20      	cmp	r3, #32
 800d3f8:	d013      	beq.n	800d422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3fe:	2220      	movs	r2, #32
 800d400:	431a      	orrs	r2, r3
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2241      	movs	r2, #65	@ 0x41
 800d40a:	2120      	movs	r1, #32
 800d40c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2242      	movs	r2, #66	@ 0x42
 800d412:	2100      	movs	r1, #0
 800d414:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2240      	movs	r2, #64	@ 0x40
 800d41a:	2100      	movs	r1, #0
 800d41c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	e007      	b.n	800d432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	699b      	ldr	r3, [r3, #24]
 800d428:	2220      	movs	r2, #32
 800d42a:	4013      	ands	r3, r2
 800d42c:	2b20      	cmp	r3, #32
 800d42e:	d1c8      	bne.n	800d3c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d430:	2300      	movs	r3, #0
}
 800d432:	0018      	movs	r0, r3
 800d434:	46bd      	mov	sp, r7
 800d436:	b004      	add	sp, #16
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b08a      	sub	sp, #40	@ 0x28
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d448:	2327      	movs	r3, #39	@ 0x27
 800d44a:	18fb      	adds	r3, r7, r3
 800d44c:	2200      	movs	r2, #0
 800d44e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	699b      	ldr	r3, [r3, #24]
 800d456:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	2210      	movs	r2, #16
 800d464:	4013      	ands	r3, r2
 800d466:	d100      	bne.n	800d46a <I2C_IsErrorOccurred+0x2e>
 800d468:	e079      	b.n	800d55e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2210      	movs	r2, #16
 800d470:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d472:	e057      	b.n	800d524 <I2C_IsErrorOccurred+0xe8>
 800d474:	2227      	movs	r2, #39	@ 0x27
 800d476:	18bb      	adds	r3, r7, r2
 800d478:	18ba      	adds	r2, r7, r2
 800d47a:	7812      	ldrb	r2, [r2, #0]
 800d47c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	3301      	adds	r3, #1
 800d482:	d04f      	beq.n	800d524 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d484:	f7fe ff70 	bl	800c368 <HAL_GetTick>
 800d488:	0002      	movs	r2, r0
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	68ba      	ldr	r2, [r7, #8]
 800d490:	429a      	cmp	r2, r3
 800d492:	d302      	bcc.n	800d49a <I2C_IsErrorOccurred+0x5e>
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d144      	bne.n	800d524 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	685a      	ldr	r2, [r3, #4]
 800d4a0:	2380      	movs	r3, #128	@ 0x80
 800d4a2:	01db      	lsls	r3, r3, #7
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d4a8:	2013      	movs	r0, #19
 800d4aa:	183b      	adds	r3, r7, r0
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	2142      	movs	r1, #66	@ 0x42
 800d4b0:	5c52      	ldrb	r2, [r2, r1]
 800d4b2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	699a      	ldr	r2, [r3, #24]
 800d4ba:	2380      	movs	r3, #128	@ 0x80
 800d4bc:	021b      	lsls	r3, r3, #8
 800d4be:	401a      	ands	r2, r3
 800d4c0:	2380      	movs	r3, #128	@ 0x80
 800d4c2:	021b      	lsls	r3, r3, #8
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d126      	bne.n	800d516 <I2C_IsErrorOccurred+0xda>
 800d4c8:	697a      	ldr	r2, [r7, #20]
 800d4ca:	2380      	movs	r3, #128	@ 0x80
 800d4cc:	01db      	lsls	r3, r3, #7
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d021      	beq.n	800d516 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800d4d2:	183b      	adds	r3, r7, r0
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b20      	cmp	r3, #32
 800d4d8:	d01d      	beq.n	800d516 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	685a      	ldr	r2, [r3, #4]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2180      	movs	r1, #128	@ 0x80
 800d4e6:	01c9      	lsls	r1, r1, #7
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d4ec:	f7fe ff3c 	bl	800c368 <HAL_GetTick>
 800d4f0:	0003      	movs	r3, r0
 800d4f2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d4f4:	e00f      	b.n	800d516 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d4f6:	f7fe ff37 	bl	800c368 <HAL_GetTick>
 800d4fa:	0002      	movs	r2, r0
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	2b19      	cmp	r3, #25
 800d502:	d908      	bls.n	800d516 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	2220      	movs	r2, #32
 800d508:	4313      	orrs	r3, r2
 800d50a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d50c:	2327      	movs	r3, #39	@ 0x27
 800d50e:	18fb      	adds	r3, r7, r3
 800d510:	2201      	movs	r2, #1
 800d512:	701a      	strb	r2, [r3, #0]

              break;
 800d514:	e006      	b.n	800d524 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	699b      	ldr	r3, [r3, #24]
 800d51c:	2220      	movs	r2, #32
 800d51e:	4013      	ands	r3, r2
 800d520:	2b20      	cmp	r3, #32
 800d522:	d1e8      	bne.n	800d4f6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	2220      	movs	r2, #32
 800d52c:	4013      	ands	r3, r2
 800d52e:	2b20      	cmp	r3, #32
 800d530:	d004      	beq.n	800d53c <I2C_IsErrorOccurred+0x100>
 800d532:	2327      	movs	r3, #39	@ 0x27
 800d534:	18fb      	adds	r3, r7, r3
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d09b      	beq.n	800d474 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d53c:	2327      	movs	r3, #39	@ 0x27
 800d53e:	18fb      	adds	r3, r7, r3
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d103      	bne.n	800d54e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2220      	movs	r2, #32
 800d54c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d54e:	6a3b      	ldr	r3, [r7, #32]
 800d550:	2204      	movs	r2, #4
 800d552:	4313      	orrs	r3, r2
 800d554:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d556:	2327      	movs	r3, #39	@ 0x27
 800d558:	18fb      	adds	r3, r7, r3
 800d55a:	2201      	movs	r2, #1
 800d55c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	699b      	ldr	r3, [r3, #24]
 800d564:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d566:	69ba      	ldr	r2, [r7, #24]
 800d568:	2380      	movs	r3, #128	@ 0x80
 800d56a:	005b      	lsls	r3, r3, #1
 800d56c:	4013      	ands	r3, r2
 800d56e:	d00c      	beq.n	800d58a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	2201      	movs	r2, #1
 800d574:	4313      	orrs	r3, r2
 800d576:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2280      	movs	r2, #128	@ 0x80
 800d57e:	0052      	lsls	r2, r2, #1
 800d580:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d582:	2327      	movs	r3, #39	@ 0x27
 800d584:	18fb      	adds	r3, r7, r3
 800d586:	2201      	movs	r2, #1
 800d588:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d58a:	69ba      	ldr	r2, [r7, #24]
 800d58c:	2380      	movs	r3, #128	@ 0x80
 800d58e:	00db      	lsls	r3, r3, #3
 800d590:	4013      	ands	r3, r2
 800d592:	d00c      	beq.n	800d5ae <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	2208      	movs	r2, #8
 800d598:	4313      	orrs	r3, r2
 800d59a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2280      	movs	r2, #128	@ 0x80
 800d5a2:	00d2      	lsls	r2, r2, #3
 800d5a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5a6:	2327      	movs	r3, #39	@ 0x27
 800d5a8:	18fb      	adds	r3, r7, r3
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d5ae:	69ba      	ldr	r2, [r7, #24]
 800d5b0:	2380      	movs	r3, #128	@ 0x80
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	d00c      	beq.n	800d5d2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d5b8:	6a3b      	ldr	r3, [r7, #32]
 800d5ba:	2202      	movs	r2, #2
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2280      	movs	r2, #128	@ 0x80
 800d5c6:	0092      	lsls	r2, r2, #2
 800d5c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5ca:	2327      	movs	r3, #39	@ 0x27
 800d5cc:	18fb      	adds	r3, r7, r3
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800d5d2:	2327      	movs	r3, #39	@ 0x27
 800d5d4:	18fb      	adds	r3, r7, r3
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d01d      	beq.n	800d618 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	0018      	movs	r0, r3
 800d5e0:	f7ff fe28 	bl	800d234 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	685a      	ldr	r2, [r3, #4]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	490e      	ldr	r1, [pc, #56]	@ (800d628 <I2C_IsErrorOccurred+0x1ec>)
 800d5f0:	400a      	ands	r2, r1
 800d5f2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d5f8:	6a3b      	ldr	r3, [r7, #32]
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2241      	movs	r2, #65	@ 0x41
 800d604:	2120      	movs	r1, #32
 800d606:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2242      	movs	r2, #66	@ 0x42
 800d60c:	2100      	movs	r1, #0
 800d60e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2240      	movs	r2, #64	@ 0x40
 800d614:	2100      	movs	r1, #0
 800d616:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800d618:	2327      	movs	r3, #39	@ 0x27
 800d61a:	18fb      	adds	r3, r7, r3
 800d61c:	781b      	ldrb	r3, [r3, #0]
}
 800d61e:	0018      	movs	r0, r3
 800d620:	46bd      	mov	sp, r7
 800d622:	b00a      	add	sp, #40	@ 0x28
 800d624:	bd80      	pop	{r7, pc}
 800d626:	46c0      	nop			@ (mov r8, r8)
 800d628:	fe00e800 	.word	0xfe00e800

0800d62c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d62c:	b590      	push	{r4, r7, lr}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	0008      	movs	r0, r1
 800d636:	0011      	movs	r1, r2
 800d638:	607b      	str	r3, [r7, #4]
 800d63a:	240a      	movs	r4, #10
 800d63c:	193b      	adds	r3, r7, r4
 800d63e:	1c02      	adds	r2, r0, #0
 800d640:	801a      	strh	r2, [r3, #0]
 800d642:	2009      	movs	r0, #9
 800d644:	183b      	adds	r3, r7, r0
 800d646:	1c0a      	adds	r2, r1, #0
 800d648:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d64a:	193b      	adds	r3, r7, r4
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	059b      	lsls	r3, r3, #22
 800d650:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d652:	183b      	adds	r3, r7, r0
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	0419      	lsls	r1, r3, #16
 800d658:	23ff      	movs	r3, #255	@ 0xff
 800d65a:	041b      	lsls	r3, r3, #16
 800d65c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d65e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d666:	4313      	orrs	r3, r2
 800d668:	005b      	lsls	r3, r3, #1
 800d66a:	085b      	lsrs	r3, r3, #1
 800d66c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d676:	0d51      	lsrs	r1, r2, #21
 800d678:	2280      	movs	r2, #128	@ 0x80
 800d67a:	00d2      	lsls	r2, r2, #3
 800d67c:	400a      	ands	r2, r1
 800d67e:	4907      	ldr	r1, [pc, #28]	@ (800d69c <I2C_TransferConfig+0x70>)
 800d680:	430a      	orrs	r2, r1
 800d682:	43d2      	mvns	r2, r2
 800d684:	401a      	ands	r2, r3
 800d686:	0011      	movs	r1, r2
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	697a      	ldr	r2, [r7, #20]
 800d68e:	430a      	orrs	r2, r1
 800d690:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d692:	46c0      	nop			@ (mov r8, r8)
 800d694:	46bd      	mov	sp, r7
 800d696:	b007      	add	sp, #28
 800d698:	bd90      	pop	{r4, r7, pc}
 800d69a:	46c0      	nop			@ (mov r8, r8)
 800d69c:	03ff63ff 	.word	0x03ff63ff

0800d6a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2241      	movs	r2, #65	@ 0x41
 800d6ae:	5c9b      	ldrb	r3, [r3, r2]
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b20      	cmp	r3, #32
 800d6b4:	d138      	bne.n	800d728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2240      	movs	r2, #64	@ 0x40
 800d6ba:	5c9b      	ldrb	r3, [r3, r2]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d101      	bne.n	800d6c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	e032      	b.n	800d72a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2240      	movs	r2, #64	@ 0x40
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2241      	movs	r2, #65	@ 0x41
 800d6d0:	2124      	movs	r1, #36	@ 0x24
 800d6d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2101      	movs	r1, #1
 800d6e0:	438a      	bics	r2, r1
 800d6e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4911      	ldr	r1, [pc, #68]	@ (800d734 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d6f0:	400a      	ands	r2, r1
 800d6f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6819      	ldr	r1, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	430a      	orrs	r2, r1
 800d702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2101      	movs	r1, #1
 800d710:	430a      	orrs	r2, r1
 800d712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2241      	movs	r2, #65	@ 0x41
 800d718:	2120      	movs	r1, #32
 800d71a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2240      	movs	r2, #64	@ 0x40
 800d720:	2100      	movs	r1, #0
 800d722:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	e000      	b.n	800d72a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d728:	2302      	movs	r3, #2
  }
}
 800d72a:	0018      	movs	r0, r3
 800d72c:	46bd      	mov	sp, r7
 800d72e:	b002      	add	sp, #8
 800d730:	bd80      	pop	{r7, pc}
 800d732:	46c0      	nop			@ (mov r8, r8)
 800d734:	ffffefff 	.word	0xffffefff

0800d738 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2241      	movs	r2, #65	@ 0x41
 800d746:	5c9b      	ldrb	r3, [r3, r2]
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b20      	cmp	r3, #32
 800d74c:	d139      	bne.n	800d7c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2240      	movs	r2, #64	@ 0x40
 800d752:	5c9b      	ldrb	r3, [r3, r2]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d101      	bne.n	800d75c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d758:	2302      	movs	r3, #2
 800d75a:	e033      	b.n	800d7c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2240      	movs	r2, #64	@ 0x40
 800d760:	2101      	movs	r1, #1
 800d762:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2241      	movs	r2, #65	@ 0x41
 800d768:	2124      	movs	r1, #36	@ 0x24
 800d76a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2101      	movs	r1, #1
 800d778:	438a      	bics	r2, r1
 800d77a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	4a11      	ldr	r2, [pc, #68]	@ (800d7cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d788:	4013      	ands	r3, r2
 800d78a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	021b      	lsls	r3, r3, #8
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	4313      	orrs	r3, r2
 800d794:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	68fa      	ldr	r2, [r7, #12]
 800d79c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2101      	movs	r1, #1
 800d7aa:	430a      	orrs	r2, r1
 800d7ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2241      	movs	r2, #65	@ 0x41
 800d7b2:	2120      	movs	r1, #32
 800d7b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2240      	movs	r2, #64	@ 0x40
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	e000      	b.n	800d7c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d7c2:	2302      	movs	r3, #2
  }
}
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	b004      	add	sp, #16
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	fffff0ff 	.word	0xfffff0ff

0800d7d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800d7d8:	4b19      	ldr	r3, [pc, #100]	@ (800d840 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4a19      	ldr	r2, [pc, #100]	@ (800d844 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800d7de:	4013      	ands	r3, r2
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	4b17      	ldr	r3, [pc, #92]	@ (800d840 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	430a      	orrs	r2, r1
 800d7e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	2380      	movs	r3, #128	@ 0x80
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d11f      	bne.n	800d834 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800d7f4:	4b14      	ldr	r3, [pc, #80]	@ (800d848 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	0013      	movs	r3, r2
 800d7fa:	005b      	lsls	r3, r3, #1
 800d7fc:	189b      	adds	r3, r3, r2
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	4912      	ldr	r1, [pc, #72]	@ (800d84c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800d802:	0018      	movs	r0, r3
 800d804:	f7f2 fca4 	bl	8000150 <__udivsi3>
 800d808:	0003      	movs	r3, r0
 800d80a:	3301      	adds	r3, #1
 800d80c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d80e:	e008      	b.n	800d822 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d003      	beq.n	800d81e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3b01      	subs	r3, #1
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	e001      	b.n	800d822 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800d81e:	2303      	movs	r3, #3
 800d820:	e009      	b.n	800d836 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d822:	4b07      	ldr	r3, [pc, #28]	@ (800d840 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800d824:	695a      	ldr	r2, [r3, #20]
 800d826:	2380      	movs	r3, #128	@ 0x80
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	401a      	ands	r2, r3
 800d82c:	2380      	movs	r3, #128	@ 0x80
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	429a      	cmp	r2, r3
 800d832:	d0ed      	beq.n	800d810 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	0018      	movs	r0, r3
 800d838:	46bd      	mov	sp, r7
 800d83a:	b004      	add	sp, #16
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	46c0      	nop			@ (mov r8, r8)
 800d840:	40007000 	.word	0x40007000
 800d844:	fffff9ff 	.word	0xfffff9ff
 800d848:	2000001c 	.word	0x2000001c
 800d84c:	000f4240 	.word	0x000f4240

0800d850 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800d854:	4b03      	ldr	r3, [pc, #12]	@ (800d864 <LL_RCC_GetAPB1Prescaler+0x14>)
 800d856:	689a      	ldr	r2, [r3, #8]
 800d858:	23e0      	movs	r3, #224	@ 0xe0
 800d85a:	01db      	lsls	r3, r3, #7
 800d85c:	4013      	ands	r3, r2
}
 800d85e:	0018      	movs	r0, r3
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	40021000 	.word	0x40021000

0800d868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b088      	sub	sp, #32
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e2fe      	b.n	800de78 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2201      	movs	r2, #1
 800d880:	4013      	ands	r3, r2
 800d882:	d100      	bne.n	800d886 <HAL_RCC_OscConfig+0x1e>
 800d884:	e07c      	b.n	800d980 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d886:	4bc3      	ldr	r3, [pc, #780]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	2238      	movs	r2, #56	@ 0x38
 800d88c:	4013      	ands	r3, r2
 800d88e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d890:	4bc0      	ldr	r3, [pc, #768]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	2203      	movs	r2, #3
 800d896:	4013      	ands	r3, r2
 800d898:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	2b10      	cmp	r3, #16
 800d89e:	d102      	bne.n	800d8a6 <HAL_RCC_OscConfig+0x3e>
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	d002      	beq.n	800d8ac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	2b08      	cmp	r3, #8
 800d8aa:	d10b      	bne.n	800d8c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8ac:	4bb9      	ldr	r3, [pc, #740]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	2380      	movs	r3, #128	@ 0x80
 800d8b2:	029b      	lsls	r3, r3, #10
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	d062      	beq.n	800d97e <HAL_RCC_OscConfig+0x116>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d15e      	bne.n	800d97e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e2d9      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685a      	ldr	r2, [r3, #4]
 800d8c8:	2380      	movs	r3, #128	@ 0x80
 800d8ca:	025b      	lsls	r3, r3, #9
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d107      	bne.n	800d8e0 <HAL_RCC_OscConfig+0x78>
 800d8d0:	4bb0      	ldr	r3, [pc, #704]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	4baf      	ldr	r3, [pc, #700]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d8d6:	2180      	movs	r1, #128	@ 0x80
 800d8d8:	0249      	lsls	r1, r1, #9
 800d8da:	430a      	orrs	r2, r1
 800d8dc:	601a      	str	r2, [r3, #0]
 800d8de:	e020      	b.n	800d922 <HAL_RCC_OscConfig+0xba>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	685a      	ldr	r2, [r3, #4]
 800d8e4:	23a0      	movs	r3, #160	@ 0xa0
 800d8e6:	02db      	lsls	r3, r3, #11
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d10e      	bne.n	800d90a <HAL_RCC_OscConfig+0xa2>
 800d8ec:	4ba9      	ldr	r3, [pc, #676]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	4ba8      	ldr	r3, [pc, #672]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d8f2:	2180      	movs	r1, #128	@ 0x80
 800d8f4:	02c9      	lsls	r1, r1, #11
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	4ba6      	ldr	r3, [pc, #664]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	4ba5      	ldr	r3, [pc, #660]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d900:	2180      	movs	r1, #128	@ 0x80
 800d902:	0249      	lsls	r1, r1, #9
 800d904:	430a      	orrs	r2, r1
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	e00b      	b.n	800d922 <HAL_RCC_OscConfig+0xba>
 800d90a:	4ba2      	ldr	r3, [pc, #648]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	4ba1      	ldr	r3, [pc, #644]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d910:	49a1      	ldr	r1, [pc, #644]	@ (800db98 <HAL_RCC_OscConfig+0x330>)
 800d912:	400a      	ands	r2, r1
 800d914:	601a      	str	r2, [r3, #0]
 800d916:	4b9f      	ldr	r3, [pc, #636]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	4b9e      	ldr	r3, [pc, #632]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d91c:	499f      	ldr	r1, [pc, #636]	@ (800db9c <HAL_RCC_OscConfig+0x334>)
 800d91e:	400a      	ands	r2, r1
 800d920:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d014      	beq.n	800d954 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d92a:	f7fe fd1d 	bl	800c368 <HAL_GetTick>
 800d92e:	0003      	movs	r3, r0
 800d930:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d932:	e008      	b.n	800d946 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d934:	f7fe fd18 	bl	800c368 <HAL_GetTick>
 800d938:	0002      	movs	r2, r0
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	2b64      	cmp	r3, #100	@ 0x64
 800d940:	d901      	bls.n	800d946 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800d942:	2303      	movs	r3, #3
 800d944:	e298      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d946:	4b93      	ldr	r3, [pc, #588]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	2380      	movs	r3, #128	@ 0x80
 800d94c:	029b      	lsls	r3, r3, #10
 800d94e:	4013      	ands	r3, r2
 800d950:	d0f0      	beq.n	800d934 <HAL_RCC_OscConfig+0xcc>
 800d952:	e015      	b.n	800d980 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d954:	f7fe fd08 	bl	800c368 <HAL_GetTick>
 800d958:	0003      	movs	r3, r0
 800d95a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d95c:	e008      	b.n	800d970 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d95e:	f7fe fd03 	bl	800c368 <HAL_GetTick>
 800d962:	0002      	movs	r2, r0
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	1ad3      	subs	r3, r2, r3
 800d968:	2b64      	cmp	r3, #100	@ 0x64
 800d96a:	d901      	bls.n	800d970 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800d96c:	2303      	movs	r3, #3
 800d96e:	e283      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d970:	4b88      	ldr	r3, [pc, #544]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	2380      	movs	r3, #128	@ 0x80
 800d976:	029b      	lsls	r3, r3, #10
 800d978:	4013      	ands	r3, r2
 800d97a:	d1f0      	bne.n	800d95e <HAL_RCC_OscConfig+0xf6>
 800d97c:	e000      	b.n	800d980 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d97e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2202      	movs	r2, #2
 800d986:	4013      	ands	r3, r2
 800d988:	d100      	bne.n	800d98c <HAL_RCC_OscConfig+0x124>
 800d98a:	e099      	b.n	800dac0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d98c:	4b81      	ldr	r3, [pc, #516]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	2238      	movs	r2, #56	@ 0x38
 800d992:	4013      	ands	r3, r2
 800d994:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d996:	4b7f      	ldr	r3, [pc, #508]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	2203      	movs	r2, #3
 800d99c:	4013      	ands	r3, r2
 800d99e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	2b10      	cmp	r3, #16
 800d9a4:	d102      	bne.n	800d9ac <HAL_RCC_OscConfig+0x144>
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d002      	beq.n	800d9b2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d135      	bne.n	800da1e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d9b2:	4b78      	ldr	r3, [pc, #480]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	2380      	movs	r3, #128	@ 0x80
 800d9b8:	00db      	lsls	r3, r3, #3
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	d005      	beq.n	800d9ca <HAL_RCC_OscConfig+0x162>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d101      	bne.n	800d9ca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	e256      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9ca:	4b72      	ldr	r3, [pc, #456]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	4a74      	ldr	r2, [pc, #464]	@ (800dba0 <HAL_RCC_OscConfig+0x338>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	0019      	movs	r1, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	695b      	ldr	r3, [r3, #20]
 800d9d8:	021a      	lsls	r2, r3, #8
 800d9da:	4b6e      	ldr	r3, [pc, #440]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d9dc:	430a      	orrs	r2, r1
 800d9de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d112      	bne.n	800da0c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800d9e6:	4b6b      	ldr	r3, [pc, #428]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a6e      	ldr	r2, [pc, #440]	@ (800dba4 <HAL_RCC_OscConfig+0x33c>)
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	0019      	movs	r1, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	691a      	ldr	r2, [r3, #16]
 800d9f4:	4b67      	ldr	r3, [pc, #412]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d9f6:	430a      	orrs	r2, r1
 800d9f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800d9fa:	4b66      	ldr	r3, [pc, #408]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	0adb      	lsrs	r3, r3, #11
 800da00:	2207      	movs	r2, #7
 800da02:	4013      	ands	r3, r2
 800da04:	4a68      	ldr	r2, [pc, #416]	@ (800dba8 <HAL_RCC_OscConfig+0x340>)
 800da06:	40da      	lsrs	r2, r3
 800da08:	4b68      	ldr	r3, [pc, #416]	@ (800dbac <HAL_RCC_OscConfig+0x344>)
 800da0a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800da0c:	4b68      	ldr	r3, [pc, #416]	@ (800dbb0 <HAL_RCC_OscConfig+0x348>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	0018      	movs	r0, r3
 800da12:	f7fe fc4d 	bl	800c2b0 <HAL_InitTick>
 800da16:	1e03      	subs	r3, r0, #0
 800da18:	d051      	beq.n	800dabe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800da1a:	2301      	movs	r3, #1
 800da1c:	e22c      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	68db      	ldr	r3, [r3, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d030      	beq.n	800da88 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800da26:	4b5b      	ldr	r3, [pc, #364]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a5e      	ldr	r2, [pc, #376]	@ (800dba4 <HAL_RCC_OscConfig+0x33c>)
 800da2c:	4013      	ands	r3, r2
 800da2e:	0019      	movs	r1, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	691a      	ldr	r2, [r3, #16]
 800da34:	4b57      	ldr	r3, [pc, #348]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800da36:	430a      	orrs	r2, r1
 800da38:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800da3a:	4b56      	ldr	r3, [pc, #344]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	4b55      	ldr	r3, [pc, #340]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800da40:	2180      	movs	r1, #128	@ 0x80
 800da42:	0049      	lsls	r1, r1, #1
 800da44:	430a      	orrs	r2, r1
 800da46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da48:	f7fe fc8e 	bl	800c368 <HAL_GetTick>
 800da4c:	0003      	movs	r3, r0
 800da4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da50:	e008      	b.n	800da64 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da52:	f7fe fc89 	bl	800c368 <HAL_GetTick>
 800da56:	0002      	movs	r2, r0
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d901      	bls.n	800da64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800da60:	2303      	movs	r3, #3
 800da62:	e209      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da64:	4b4b      	ldr	r3, [pc, #300]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	2380      	movs	r3, #128	@ 0x80
 800da6a:	00db      	lsls	r3, r3, #3
 800da6c:	4013      	ands	r3, r2
 800da6e:	d0f0      	beq.n	800da52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da70:	4b48      	ldr	r3, [pc, #288]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	4a4a      	ldr	r2, [pc, #296]	@ (800dba0 <HAL_RCC_OscConfig+0x338>)
 800da76:	4013      	ands	r3, r2
 800da78:	0019      	movs	r1, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	695b      	ldr	r3, [r3, #20]
 800da7e:	021a      	lsls	r2, r3, #8
 800da80:	4b44      	ldr	r3, [pc, #272]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800da82:	430a      	orrs	r2, r1
 800da84:	605a      	str	r2, [r3, #4]
 800da86:	e01b      	b.n	800dac0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800da88:	4b42      	ldr	r3, [pc, #264]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	4b41      	ldr	r3, [pc, #260]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800da8e:	4949      	ldr	r1, [pc, #292]	@ (800dbb4 <HAL_RCC_OscConfig+0x34c>)
 800da90:	400a      	ands	r2, r1
 800da92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da94:	f7fe fc68 	bl	800c368 <HAL_GetTick>
 800da98:	0003      	movs	r3, r0
 800da9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800da9c:	e008      	b.n	800dab0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da9e:	f7fe fc63 	bl	800c368 <HAL_GetTick>
 800daa2:	0002      	movs	r2, r0
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d901      	bls.n	800dab0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800daac:	2303      	movs	r3, #3
 800daae:	e1e3      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800dab0:	4b38      	ldr	r3, [pc, #224]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	2380      	movs	r3, #128	@ 0x80
 800dab6:	00db      	lsls	r3, r3, #3
 800dab8:	4013      	ands	r3, r2
 800daba:	d1f0      	bne.n	800da9e <HAL_RCC_OscConfig+0x236>
 800dabc:	e000      	b.n	800dac0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dabe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2208      	movs	r2, #8
 800dac6:	4013      	ands	r3, r2
 800dac8:	d047      	beq.n	800db5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800daca:	4b32      	ldr	r3, [pc, #200]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	2238      	movs	r2, #56	@ 0x38
 800dad0:	4013      	ands	r3, r2
 800dad2:	2b18      	cmp	r3, #24
 800dad4:	d10a      	bne.n	800daec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800dad6:	4b2f      	ldr	r3, [pc, #188]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800dad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dada:	2202      	movs	r2, #2
 800dadc:	4013      	ands	r3, r2
 800dade:	d03c      	beq.n	800db5a <HAL_RCC_OscConfig+0x2f2>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d138      	bne.n	800db5a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800dae8:	2301      	movs	r3, #1
 800daea:	e1c5      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	699b      	ldr	r3, [r3, #24]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d019      	beq.n	800db28 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800daf4:	4b27      	ldr	r3, [pc, #156]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800daf6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800daf8:	4b26      	ldr	r3, [pc, #152]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800dafa:	2101      	movs	r1, #1
 800dafc:	430a      	orrs	r2, r1
 800dafe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db00:	f7fe fc32 	bl	800c368 <HAL_GetTick>
 800db04:	0003      	movs	r3, r0
 800db06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800db08:	e008      	b.n	800db1c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800db0a:	f7fe fc2d 	bl	800c368 <HAL_GetTick>
 800db0e:	0002      	movs	r2, r0
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	2b02      	cmp	r3, #2
 800db16:	d901      	bls.n	800db1c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800db18:	2303      	movs	r3, #3
 800db1a:	e1ad      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800db1c:	4b1d      	ldr	r3, [pc, #116]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800db1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db20:	2202      	movs	r2, #2
 800db22:	4013      	ands	r3, r2
 800db24:	d0f1      	beq.n	800db0a <HAL_RCC_OscConfig+0x2a2>
 800db26:	e018      	b.n	800db5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800db28:	4b1a      	ldr	r3, [pc, #104]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800db2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800db2c:	4b19      	ldr	r3, [pc, #100]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800db2e:	2101      	movs	r1, #1
 800db30:	438a      	bics	r2, r1
 800db32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db34:	f7fe fc18 	bl	800c368 <HAL_GetTick>
 800db38:	0003      	movs	r3, r0
 800db3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800db3c:	e008      	b.n	800db50 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800db3e:	f7fe fc13 	bl	800c368 <HAL_GetTick>
 800db42:	0002      	movs	r2, r0
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	2b02      	cmp	r3, #2
 800db4a:	d901      	bls.n	800db50 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800db4c:	2303      	movs	r3, #3
 800db4e:	e193      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800db50:	4b10      	ldr	r3, [pc, #64]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800db52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db54:	2202      	movs	r2, #2
 800db56:	4013      	ands	r3, r2
 800db58:	d1f1      	bne.n	800db3e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2204      	movs	r2, #4
 800db60:	4013      	ands	r3, r2
 800db62:	d100      	bne.n	800db66 <HAL_RCC_OscConfig+0x2fe>
 800db64:	e0c6      	b.n	800dcf4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800db66:	231f      	movs	r3, #31
 800db68:	18fb      	adds	r3, r7, r3
 800db6a:	2200      	movs	r2, #0
 800db6c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800db6e:	4b09      	ldr	r3, [pc, #36]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	2238      	movs	r2, #56	@ 0x38
 800db74:	4013      	ands	r3, r2
 800db76:	2b20      	cmp	r3, #32
 800db78:	d11e      	bne.n	800dbb8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800db7a:	4b06      	ldr	r3, [pc, #24]	@ (800db94 <HAL_RCC_OscConfig+0x32c>)
 800db7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db7e:	2202      	movs	r2, #2
 800db80:	4013      	ands	r3, r2
 800db82:	d100      	bne.n	800db86 <HAL_RCC_OscConfig+0x31e>
 800db84:	e0b6      	b.n	800dcf4 <HAL_RCC_OscConfig+0x48c>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d000      	beq.n	800db90 <HAL_RCC_OscConfig+0x328>
 800db8e:	e0b1      	b.n	800dcf4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	e171      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
 800db94:	40021000 	.word	0x40021000
 800db98:	fffeffff 	.word	0xfffeffff
 800db9c:	fffbffff 	.word	0xfffbffff
 800dba0:	ffff80ff 	.word	0xffff80ff
 800dba4:	ffffc7ff 	.word	0xffffc7ff
 800dba8:	00f42400 	.word	0x00f42400
 800dbac:	2000001c 	.word	0x2000001c
 800dbb0:	20000020 	.word	0x20000020
 800dbb4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800dbb8:	4bb1      	ldr	r3, [pc, #708]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dbba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbbc:	2380      	movs	r3, #128	@ 0x80
 800dbbe:	055b      	lsls	r3, r3, #21
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	d101      	bne.n	800dbc8 <HAL_RCC_OscConfig+0x360>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e000      	b.n	800dbca <HAL_RCC_OscConfig+0x362>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d011      	beq.n	800dbf2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800dbce:	4bac      	ldr	r3, [pc, #688]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dbd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbd2:	4bab      	ldr	r3, [pc, #684]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dbd4:	2180      	movs	r1, #128	@ 0x80
 800dbd6:	0549      	lsls	r1, r1, #21
 800dbd8:	430a      	orrs	r2, r1
 800dbda:	63da      	str	r2, [r3, #60]	@ 0x3c
 800dbdc:	4ba8      	ldr	r3, [pc, #672]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dbde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbe0:	2380      	movs	r3, #128	@ 0x80
 800dbe2:	055b      	lsls	r3, r3, #21
 800dbe4:	4013      	ands	r3, r2
 800dbe6:	60fb      	str	r3, [r7, #12]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800dbea:	231f      	movs	r3, #31
 800dbec:	18fb      	adds	r3, r7, r3
 800dbee:	2201      	movs	r2, #1
 800dbf0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dbf2:	4ba4      	ldr	r3, [pc, #656]	@ (800de84 <HAL_RCC_OscConfig+0x61c>)
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	2380      	movs	r3, #128	@ 0x80
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	4013      	ands	r3, r2
 800dbfc:	d11a      	bne.n	800dc34 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dbfe:	4ba1      	ldr	r3, [pc, #644]	@ (800de84 <HAL_RCC_OscConfig+0x61c>)
 800dc00:	681a      	ldr	r2, [r3, #0]
 800dc02:	4ba0      	ldr	r3, [pc, #640]	@ (800de84 <HAL_RCC_OscConfig+0x61c>)
 800dc04:	2180      	movs	r1, #128	@ 0x80
 800dc06:	0049      	lsls	r1, r1, #1
 800dc08:	430a      	orrs	r2, r1
 800dc0a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800dc0c:	f7fe fbac 	bl	800c368 <HAL_GetTick>
 800dc10:	0003      	movs	r3, r0
 800dc12:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dc14:	e008      	b.n	800dc28 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc16:	f7fe fba7 	bl	800c368 <HAL_GetTick>
 800dc1a:	0002      	movs	r2, r0
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	1ad3      	subs	r3, r2, r3
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d901      	bls.n	800dc28 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800dc24:	2303      	movs	r3, #3
 800dc26:	e127      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dc28:	4b96      	ldr	r3, [pc, #600]	@ (800de84 <HAL_RCC_OscConfig+0x61c>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	2380      	movs	r3, #128	@ 0x80
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	4013      	ands	r3, r2
 800dc32:	d0f0      	beq.n	800dc16 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d106      	bne.n	800dc4a <HAL_RCC_OscConfig+0x3e2>
 800dc3c:	4b90      	ldr	r3, [pc, #576]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dc40:	4b8f      	ldr	r3, [pc, #572]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc42:	2101      	movs	r1, #1
 800dc44:	430a      	orrs	r2, r1
 800dc46:	65da      	str	r2, [r3, #92]	@ 0x5c
 800dc48:	e01c      	b.n	800dc84 <HAL_RCC_OscConfig+0x41c>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	2b05      	cmp	r3, #5
 800dc50:	d10c      	bne.n	800dc6c <HAL_RCC_OscConfig+0x404>
 800dc52:	4b8b      	ldr	r3, [pc, #556]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dc56:	4b8a      	ldr	r3, [pc, #552]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc58:	2104      	movs	r1, #4
 800dc5a:	430a      	orrs	r2, r1
 800dc5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800dc5e:	4b88      	ldr	r3, [pc, #544]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dc62:	4b87      	ldr	r3, [pc, #540]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc64:	2101      	movs	r1, #1
 800dc66:	430a      	orrs	r2, r1
 800dc68:	65da      	str	r2, [r3, #92]	@ 0x5c
 800dc6a:	e00b      	b.n	800dc84 <HAL_RCC_OscConfig+0x41c>
 800dc6c:	4b84      	ldr	r3, [pc, #528]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dc70:	4b83      	ldr	r3, [pc, #524]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc72:	2101      	movs	r1, #1
 800dc74:	438a      	bics	r2, r1
 800dc76:	65da      	str	r2, [r3, #92]	@ 0x5c
 800dc78:	4b81      	ldr	r3, [pc, #516]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dc7c:	4b80      	ldr	r3, [pc, #512]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dc7e:	2104      	movs	r1, #4
 800dc80:	438a      	bics	r2, r1
 800dc82:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d014      	beq.n	800dcb6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc8c:	f7fe fb6c 	bl	800c368 <HAL_GetTick>
 800dc90:	0003      	movs	r3, r0
 800dc92:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc94:	e009      	b.n	800dcaa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc96:	f7fe fb67 	bl	800c368 <HAL_GetTick>
 800dc9a:	0002      	movs	r2, r0
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	4a79      	ldr	r2, [pc, #484]	@ (800de88 <HAL_RCC_OscConfig+0x620>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d901      	bls.n	800dcaa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800dca6:	2303      	movs	r3, #3
 800dca8:	e0e6      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dcaa:	4b75      	ldr	r3, [pc, #468]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dcac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcae:	2202      	movs	r2, #2
 800dcb0:	4013      	ands	r3, r2
 800dcb2:	d0f0      	beq.n	800dc96 <HAL_RCC_OscConfig+0x42e>
 800dcb4:	e013      	b.n	800dcde <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcb6:	f7fe fb57 	bl	800c368 <HAL_GetTick>
 800dcba:	0003      	movs	r3, r0
 800dcbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800dcbe:	e009      	b.n	800dcd4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dcc0:	f7fe fb52 	bl	800c368 <HAL_GetTick>
 800dcc4:	0002      	movs	r2, r0
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	4a6f      	ldr	r2, [pc, #444]	@ (800de88 <HAL_RCC_OscConfig+0x620>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d901      	bls.n	800dcd4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	e0d1      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800dcd4:	4b6a      	ldr	r3, [pc, #424]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dcd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcd8:	2202      	movs	r2, #2
 800dcda:	4013      	ands	r3, r2
 800dcdc:	d1f0      	bne.n	800dcc0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800dcde:	231f      	movs	r3, #31
 800dce0:	18fb      	adds	r3, r7, r3
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d105      	bne.n	800dcf4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800dce8:	4b65      	ldr	r3, [pc, #404]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dcea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dcec:	4b64      	ldr	r3, [pc, #400]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dcee:	4967      	ldr	r1, [pc, #412]	@ (800de8c <HAL_RCC_OscConfig+0x624>)
 800dcf0:	400a      	ands	r2, r1
 800dcf2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	69db      	ldr	r3, [r3, #28]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d100      	bne.n	800dcfe <HAL_RCC_OscConfig+0x496>
 800dcfc:	e0bb      	b.n	800de76 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dcfe:	4b60      	ldr	r3, [pc, #384]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	2238      	movs	r2, #56	@ 0x38
 800dd04:	4013      	ands	r3, r2
 800dd06:	2b10      	cmp	r3, #16
 800dd08:	d100      	bne.n	800dd0c <HAL_RCC_OscConfig+0x4a4>
 800dd0a:	e07b      	b.n	800de04 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	69db      	ldr	r3, [r3, #28]
 800dd10:	2b02      	cmp	r3, #2
 800dd12:	d156      	bne.n	800ddc2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dd14:	4b5a      	ldr	r3, [pc, #360]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	4b59      	ldr	r3, [pc, #356]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd1a:	495d      	ldr	r1, [pc, #372]	@ (800de90 <HAL_RCC_OscConfig+0x628>)
 800dd1c:	400a      	ands	r2, r1
 800dd1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd20:	f7fe fb22 	bl	800c368 <HAL_GetTick>
 800dd24:	0003      	movs	r3, r0
 800dd26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dd28:	e008      	b.n	800dd3c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dd2a:	f7fe fb1d 	bl	800c368 <HAL_GetTick>
 800dd2e:	0002      	movs	r2, r0
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d901      	bls.n	800dd3c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800dd38:	2303      	movs	r3, #3
 800dd3a:	e09d      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dd3c:	4b50      	ldr	r3, [pc, #320]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	2380      	movs	r3, #128	@ 0x80
 800dd42:	049b      	lsls	r3, r3, #18
 800dd44:	4013      	ands	r3, r2
 800dd46:	d1f0      	bne.n	800dd2a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dd48:	4b4d      	ldr	r3, [pc, #308]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	4a51      	ldr	r2, [pc, #324]	@ (800de94 <HAL_RCC_OscConfig+0x62c>)
 800dd4e:	4013      	ands	r3, r2
 800dd50:	0019      	movs	r1, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a1a      	ldr	r2, [r3, #32]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd60:	021b      	lsls	r3, r3, #8
 800dd62:	431a      	orrs	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd68:	431a      	orrs	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd74:	431a      	orrs	r2, r3
 800dd76:	4b42      	ldr	r3, [pc, #264]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd78:	430a      	orrs	r2, r1
 800dd7a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dd7c:	4b40      	ldr	r3, [pc, #256]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	4b3f      	ldr	r3, [pc, #252]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd82:	2180      	movs	r1, #128	@ 0x80
 800dd84:	0449      	lsls	r1, r1, #17
 800dd86:	430a      	orrs	r2, r1
 800dd88:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800dd8a:	4b3d      	ldr	r3, [pc, #244]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd8c:	68da      	ldr	r2, [r3, #12]
 800dd8e:	4b3c      	ldr	r3, [pc, #240]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800dd90:	2180      	movs	r1, #128	@ 0x80
 800dd92:	0549      	lsls	r1, r1, #21
 800dd94:	430a      	orrs	r2, r1
 800dd96:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd98:	f7fe fae6 	bl	800c368 <HAL_GetTick>
 800dd9c:	0003      	movs	r3, r0
 800dd9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dda0:	e008      	b.n	800ddb4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dda2:	f7fe fae1 	bl	800c368 <HAL_GetTick>
 800dda6:	0002      	movs	r2, r0
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	1ad3      	subs	r3, r2, r3
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d901      	bls.n	800ddb4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e061      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ddb4:	4b32      	ldr	r3, [pc, #200]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	2380      	movs	r3, #128	@ 0x80
 800ddba:	049b      	lsls	r3, r3, #18
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	d0f0      	beq.n	800dda2 <HAL_RCC_OscConfig+0x53a>
 800ddc0:	e059      	b.n	800de76 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ddc2:	4b2f      	ldr	r3, [pc, #188]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	4b2e      	ldr	r3, [pc, #184]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800ddc8:	4931      	ldr	r1, [pc, #196]	@ (800de90 <HAL_RCC_OscConfig+0x628>)
 800ddca:	400a      	ands	r2, r1
 800ddcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddce:	f7fe facb 	bl	800c368 <HAL_GetTick>
 800ddd2:	0003      	movs	r3, r0
 800ddd4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ddd6:	e008      	b.n	800ddea <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ddd8:	f7fe fac6 	bl	800c368 <HAL_GetTick>
 800dddc:	0002      	movs	r2, r0
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d901      	bls.n	800ddea <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800dde6:	2303      	movs	r3, #3
 800dde8:	e046      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ddea:	4b25      	ldr	r3, [pc, #148]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	2380      	movs	r3, #128	@ 0x80
 800ddf0:	049b      	lsls	r3, r3, #18
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	d1f0      	bne.n	800ddd8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800ddf6:	4b22      	ldr	r3, [pc, #136]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800ddf8:	68da      	ldr	r2, [r3, #12]
 800ddfa:	4b21      	ldr	r3, [pc, #132]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800ddfc:	4926      	ldr	r1, [pc, #152]	@ (800de98 <HAL_RCC_OscConfig+0x630>)
 800ddfe:	400a      	ands	r2, r1
 800de00:	60da      	str	r2, [r3, #12]
 800de02:	e038      	b.n	800de76 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	69db      	ldr	r3, [r3, #28]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d101      	bne.n	800de10 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800de0c:	2301      	movs	r3, #1
 800de0e:	e033      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800de10:	4b1b      	ldr	r3, [pc, #108]	@ (800de80 <HAL_RCC_OscConfig+0x618>)
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2203      	movs	r2, #3
 800de1a:	401a      	ands	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6a1b      	ldr	r3, [r3, #32]
 800de20:	429a      	cmp	r2, r3
 800de22:	d126      	bne.n	800de72 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	2270      	movs	r2, #112	@ 0x70
 800de28:	401a      	ands	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de2e:	429a      	cmp	r2, r3
 800de30:	d11f      	bne.n	800de72 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	23fe      	movs	r3, #254	@ 0xfe
 800de36:	01db      	lsls	r3, r3, #7
 800de38:	401a      	ands	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de3e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800de40:	429a      	cmp	r2, r3
 800de42:	d116      	bne.n	800de72 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	23f8      	movs	r3, #248	@ 0xf8
 800de48:	039b      	lsls	r3, r3, #14
 800de4a:	401a      	ands	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800de50:	429a      	cmp	r2, r3
 800de52:	d10e      	bne.n	800de72 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800de54:	697a      	ldr	r2, [r7, #20]
 800de56:	23e0      	movs	r3, #224	@ 0xe0
 800de58:	051b      	lsls	r3, r3, #20
 800de5a:	401a      	ands	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800de60:	429a      	cmp	r2, r3
 800de62:	d106      	bne.n	800de72 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	0f5b      	lsrs	r3, r3, #29
 800de68:	075a      	lsls	r2, r3, #29
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800de6e:	429a      	cmp	r2, r3
 800de70:	d001      	beq.n	800de76 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800de72:	2301      	movs	r3, #1
 800de74:	e000      	b.n	800de78 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	0018      	movs	r0, r3
 800de7a:	46bd      	mov	sp, r7
 800de7c:	b008      	add	sp, #32
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	40021000 	.word	0x40021000
 800de84:	40007000 	.word	0x40007000
 800de88:	00001388 	.word	0x00001388
 800de8c:	efffffff 	.word	0xefffffff
 800de90:	feffffff 	.word	0xfeffffff
 800de94:	11c1808c 	.word	0x11c1808c
 800de98:	eefefffc 	.word	0xeefefffc

0800de9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d101      	bne.n	800deb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	e0e9      	b.n	800e084 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800deb0:	4b76      	ldr	r3, [pc, #472]	@ (800e08c <HAL_RCC_ClockConfig+0x1f0>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2207      	movs	r2, #7
 800deb6:	4013      	ands	r3, r2
 800deb8:	683a      	ldr	r2, [r7, #0]
 800deba:	429a      	cmp	r2, r3
 800debc:	d91e      	bls.n	800defc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800debe:	4b73      	ldr	r3, [pc, #460]	@ (800e08c <HAL_RCC_ClockConfig+0x1f0>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2207      	movs	r2, #7
 800dec4:	4393      	bics	r3, r2
 800dec6:	0019      	movs	r1, r3
 800dec8:	4b70      	ldr	r3, [pc, #448]	@ (800e08c <HAL_RCC_ClockConfig+0x1f0>)
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	430a      	orrs	r2, r1
 800dece:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ded0:	f7fe fa4a 	bl	800c368 <HAL_GetTick>
 800ded4:	0003      	movs	r3, r0
 800ded6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ded8:	e009      	b.n	800deee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800deda:	f7fe fa45 	bl	800c368 <HAL_GetTick>
 800dede:	0002      	movs	r2, r0
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	4a6a      	ldr	r2, [pc, #424]	@ (800e090 <HAL_RCC_ClockConfig+0x1f4>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d901      	bls.n	800deee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800deea:	2303      	movs	r3, #3
 800deec:	e0ca      	b.n	800e084 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800deee:	4b67      	ldr	r3, [pc, #412]	@ (800e08c <HAL_RCC_ClockConfig+0x1f0>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2207      	movs	r2, #7
 800def4:	4013      	ands	r3, r2
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	429a      	cmp	r2, r3
 800defa:	d1ee      	bne.n	800deda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2202      	movs	r2, #2
 800df02:	4013      	ands	r3, r2
 800df04:	d015      	beq.n	800df32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2204      	movs	r2, #4
 800df0c:	4013      	ands	r3, r2
 800df0e:	d006      	beq.n	800df1e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800df10:	4b60      	ldr	r3, [pc, #384]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800df12:	689a      	ldr	r2, [r3, #8]
 800df14:	4b5f      	ldr	r3, [pc, #380]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800df16:	21e0      	movs	r1, #224	@ 0xe0
 800df18:	01c9      	lsls	r1, r1, #7
 800df1a:	430a      	orrs	r2, r1
 800df1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df1e:	4b5d      	ldr	r3, [pc, #372]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	4a5d      	ldr	r2, [pc, #372]	@ (800e098 <HAL_RCC_ClockConfig+0x1fc>)
 800df24:	4013      	ands	r3, r2
 800df26:	0019      	movs	r1, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	689a      	ldr	r2, [r3, #8]
 800df2c:	4b59      	ldr	r3, [pc, #356]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800df2e:	430a      	orrs	r2, r1
 800df30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2201      	movs	r2, #1
 800df38:	4013      	ands	r3, r2
 800df3a:	d057      	beq.n	800dfec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d107      	bne.n	800df54 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800df44:	4b53      	ldr	r3, [pc, #332]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	2380      	movs	r3, #128	@ 0x80
 800df4a:	029b      	lsls	r3, r3, #10
 800df4c:	4013      	ands	r3, r2
 800df4e:	d12b      	bne.n	800dfa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800df50:	2301      	movs	r3, #1
 800df52:	e097      	b.n	800e084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	2b02      	cmp	r3, #2
 800df5a:	d107      	bne.n	800df6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df5c:	4b4d      	ldr	r3, [pc, #308]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	2380      	movs	r3, #128	@ 0x80
 800df62:	049b      	lsls	r3, r3, #18
 800df64:	4013      	ands	r3, r2
 800df66:	d11f      	bne.n	800dfa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800df68:	2301      	movs	r3, #1
 800df6a:	e08b      	b.n	800e084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d107      	bne.n	800df84 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800df74:	4b47      	ldr	r3, [pc, #284]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	2380      	movs	r3, #128	@ 0x80
 800df7a:	00db      	lsls	r3, r3, #3
 800df7c:	4013      	ands	r3, r2
 800df7e:	d113      	bne.n	800dfa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e07f      	b.n	800e084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	2b03      	cmp	r3, #3
 800df8a:	d106      	bne.n	800df9a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800df8c:	4b41      	ldr	r3, [pc, #260]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800df8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df90:	2202      	movs	r2, #2
 800df92:	4013      	ands	r3, r2
 800df94:	d108      	bne.n	800dfa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800df96:	2301      	movs	r3, #1
 800df98:	e074      	b.n	800e084 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800df9a:	4b3e      	ldr	r3, [pc, #248]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800df9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df9e:	2202      	movs	r2, #2
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	d101      	bne.n	800dfa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e06d      	b.n	800e084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dfa8:	4b3a      	ldr	r3, [pc, #232]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	2207      	movs	r2, #7
 800dfae:	4393      	bics	r3, r2
 800dfb0:	0019      	movs	r1, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	685a      	ldr	r2, [r3, #4]
 800dfb6:	4b37      	ldr	r3, [pc, #220]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800dfb8:	430a      	orrs	r2, r1
 800dfba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfbc:	f7fe f9d4 	bl	800c368 <HAL_GetTick>
 800dfc0:	0003      	movs	r3, r0
 800dfc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dfc4:	e009      	b.n	800dfda <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dfc6:	f7fe f9cf 	bl	800c368 <HAL_GetTick>
 800dfca:	0002      	movs	r2, r0
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	1ad3      	subs	r3, r2, r3
 800dfd0:	4a2f      	ldr	r2, [pc, #188]	@ (800e090 <HAL_RCC_ClockConfig+0x1f4>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d901      	bls.n	800dfda <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	e054      	b.n	800e084 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dfda:	4b2e      	ldr	r3, [pc, #184]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	2238      	movs	r2, #56	@ 0x38
 800dfe0:	401a      	ands	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	00db      	lsls	r3, r3, #3
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d1ec      	bne.n	800dfc6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dfec:	4b27      	ldr	r3, [pc, #156]	@ (800e08c <HAL_RCC_ClockConfig+0x1f0>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2207      	movs	r2, #7
 800dff2:	4013      	ands	r3, r2
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d21e      	bcs.n	800e038 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dffa:	4b24      	ldr	r3, [pc, #144]	@ (800e08c <HAL_RCC_ClockConfig+0x1f0>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2207      	movs	r2, #7
 800e000:	4393      	bics	r3, r2
 800e002:	0019      	movs	r1, r3
 800e004:	4b21      	ldr	r3, [pc, #132]	@ (800e08c <HAL_RCC_ClockConfig+0x1f0>)
 800e006:	683a      	ldr	r2, [r7, #0]
 800e008:	430a      	orrs	r2, r1
 800e00a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e00c:	f7fe f9ac 	bl	800c368 <HAL_GetTick>
 800e010:	0003      	movs	r3, r0
 800e012:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e014:	e009      	b.n	800e02a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e016:	f7fe f9a7 	bl	800c368 <HAL_GetTick>
 800e01a:	0002      	movs	r2, r0
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	1ad3      	subs	r3, r2, r3
 800e020:	4a1b      	ldr	r2, [pc, #108]	@ (800e090 <HAL_RCC_ClockConfig+0x1f4>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d901      	bls.n	800e02a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800e026:	2303      	movs	r3, #3
 800e028:	e02c      	b.n	800e084 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e02a:	4b18      	ldr	r3, [pc, #96]	@ (800e08c <HAL_RCC_ClockConfig+0x1f0>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2207      	movs	r2, #7
 800e030:	4013      	ands	r3, r2
 800e032:	683a      	ldr	r2, [r7, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	d1ee      	bne.n	800e016 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2204      	movs	r2, #4
 800e03e:	4013      	ands	r3, r2
 800e040:	d009      	beq.n	800e056 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800e042:	4b14      	ldr	r3, [pc, #80]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800e044:	689b      	ldr	r3, [r3, #8]
 800e046:	4a15      	ldr	r2, [pc, #84]	@ (800e09c <HAL_RCC_ClockConfig+0x200>)
 800e048:	4013      	ands	r3, r2
 800e04a:	0019      	movs	r1, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68da      	ldr	r2, [r3, #12]
 800e050:	4b10      	ldr	r3, [pc, #64]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800e052:	430a      	orrs	r2, r1
 800e054:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800e056:	f000 f829 	bl	800e0ac <HAL_RCC_GetSysClockFreq>
 800e05a:	0001      	movs	r1, r0
 800e05c:	4b0d      	ldr	r3, [pc, #52]	@ (800e094 <HAL_RCC_ClockConfig+0x1f8>)
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	0a1b      	lsrs	r3, r3, #8
 800e062:	220f      	movs	r2, #15
 800e064:	401a      	ands	r2, r3
 800e066:	4b0e      	ldr	r3, [pc, #56]	@ (800e0a0 <HAL_RCC_ClockConfig+0x204>)
 800e068:	0092      	lsls	r2, r2, #2
 800e06a:	58d3      	ldr	r3, [r2, r3]
 800e06c:	221f      	movs	r2, #31
 800e06e:	4013      	ands	r3, r2
 800e070:	000a      	movs	r2, r1
 800e072:	40da      	lsrs	r2, r3
 800e074:	4b0b      	ldr	r3, [pc, #44]	@ (800e0a4 <HAL_RCC_ClockConfig+0x208>)
 800e076:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e078:	4b0b      	ldr	r3, [pc, #44]	@ (800e0a8 <HAL_RCC_ClockConfig+0x20c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	0018      	movs	r0, r3
 800e07e:	f7fe f917 	bl	800c2b0 <HAL_InitTick>
 800e082:	0003      	movs	r3, r0
}
 800e084:	0018      	movs	r0, r3
 800e086:	46bd      	mov	sp, r7
 800e088:	b004      	add	sp, #16
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	40022000 	.word	0x40022000
 800e090:	00001388 	.word	0x00001388
 800e094:	40021000 	.word	0x40021000
 800e098:	fffff0ff 	.word	0xfffff0ff
 800e09c:	ffff8fff 	.word	0xffff8fff
 800e0a0:	08017b58 	.word	0x08017b58
 800e0a4:	2000001c 	.word	0x2000001c
 800e0a8:	20000020 	.word	0x20000020

0800e0ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b086      	sub	sp, #24
 800e0b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e0b2:	4b3c      	ldr	r3, [pc, #240]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	2238      	movs	r2, #56	@ 0x38
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	d10f      	bne.n	800e0dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800e0bc:	4b39      	ldr	r3, [pc, #228]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	0adb      	lsrs	r3, r3, #11
 800e0c2:	2207      	movs	r2, #7
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	409a      	lsls	r2, r3
 800e0ca:	0013      	movs	r3, r2
 800e0cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800e0ce:	6839      	ldr	r1, [r7, #0]
 800e0d0:	4835      	ldr	r0, [pc, #212]	@ (800e1a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e0d2:	f7f2 f83d 	bl	8000150 <__udivsi3>
 800e0d6:	0003      	movs	r3, r0
 800e0d8:	613b      	str	r3, [r7, #16]
 800e0da:	e05d      	b.n	800e198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e0dc:	4b31      	ldr	r3, [pc, #196]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	2238      	movs	r2, #56	@ 0x38
 800e0e2:	4013      	ands	r3, r2
 800e0e4:	2b08      	cmp	r3, #8
 800e0e6:	d102      	bne.n	800e0ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e0e8:	4b30      	ldr	r3, [pc, #192]	@ (800e1ac <HAL_RCC_GetSysClockFreq+0x100>)
 800e0ea:	613b      	str	r3, [r7, #16]
 800e0ec:	e054      	b.n	800e198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e0ee:	4b2d      	ldr	r3, [pc, #180]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	2238      	movs	r2, #56	@ 0x38
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	2b10      	cmp	r3, #16
 800e0f8:	d138      	bne.n	800e16c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800e0fa:	4b2a      	ldr	r3, [pc, #168]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	2203      	movs	r2, #3
 800e100:	4013      	ands	r3, r2
 800e102:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e104:	4b27      	ldr	r3, [pc, #156]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	091b      	lsrs	r3, r3, #4
 800e10a:	2207      	movs	r2, #7
 800e10c:	4013      	ands	r3, r2
 800e10e:	3301      	adds	r3, #1
 800e110:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2b03      	cmp	r3, #3
 800e116:	d10d      	bne.n	800e134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e118:	68b9      	ldr	r1, [r7, #8]
 800e11a:	4824      	ldr	r0, [pc, #144]	@ (800e1ac <HAL_RCC_GetSysClockFreq+0x100>)
 800e11c:	f7f2 f818 	bl	8000150 <__udivsi3>
 800e120:	0003      	movs	r3, r0
 800e122:	0019      	movs	r1, r3
 800e124:	4b1f      	ldr	r3, [pc, #124]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	0a1b      	lsrs	r3, r3, #8
 800e12a:	227f      	movs	r2, #127	@ 0x7f
 800e12c:	4013      	ands	r3, r2
 800e12e:	434b      	muls	r3, r1
 800e130:	617b      	str	r3, [r7, #20]
        break;
 800e132:	e00d      	b.n	800e150 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800e134:	68b9      	ldr	r1, [r7, #8]
 800e136:	481c      	ldr	r0, [pc, #112]	@ (800e1a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e138:	f7f2 f80a 	bl	8000150 <__udivsi3>
 800e13c:	0003      	movs	r3, r0
 800e13e:	0019      	movs	r1, r3
 800e140:	4b18      	ldr	r3, [pc, #96]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	0a1b      	lsrs	r3, r3, #8
 800e146:	227f      	movs	r2, #127	@ 0x7f
 800e148:	4013      	ands	r3, r2
 800e14a:	434b      	muls	r3, r1
 800e14c:	617b      	str	r3, [r7, #20]
        break;
 800e14e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800e150:	4b14      	ldr	r3, [pc, #80]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	0f5b      	lsrs	r3, r3, #29
 800e156:	2207      	movs	r2, #7
 800e158:	4013      	ands	r3, r2
 800e15a:	3301      	adds	r3, #1
 800e15c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800e15e:	6879      	ldr	r1, [r7, #4]
 800e160:	6978      	ldr	r0, [r7, #20]
 800e162:	f7f1 fff5 	bl	8000150 <__udivsi3>
 800e166:	0003      	movs	r3, r0
 800e168:	613b      	str	r3, [r7, #16]
 800e16a:	e015      	b.n	800e198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800e16c:	4b0d      	ldr	r3, [pc, #52]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	2238      	movs	r2, #56	@ 0x38
 800e172:	4013      	ands	r3, r2
 800e174:	2b20      	cmp	r3, #32
 800e176:	d103      	bne.n	800e180 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800e178:	2380      	movs	r3, #128	@ 0x80
 800e17a:	021b      	lsls	r3, r3, #8
 800e17c:	613b      	str	r3, [r7, #16]
 800e17e:	e00b      	b.n	800e198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800e180:	4b08      	ldr	r3, [pc, #32]	@ (800e1a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	2238      	movs	r2, #56	@ 0x38
 800e186:	4013      	ands	r3, r2
 800e188:	2b18      	cmp	r3, #24
 800e18a:	d103      	bne.n	800e194 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800e18c:	23fa      	movs	r3, #250	@ 0xfa
 800e18e:	01db      	lsls	r3, r3, #7
 800e190:	613b      	str	r3, [r7, #16]
 800e192:	e001      	b.n	800e198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800e194:	2300      	movs	r3, #0
 800e196:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e198:	693b      	ldr	r3, [r7, #16]
}
 800e19a:	0018      	movs	r0, r3
 800e19c:	46bd      	mov	sp, r7
 800e19e:	b006      	add	sp, #24
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	46c0      	nop			@ (mov r8, r8)
 800e1a4:	40021000 	.word	0x40021000
 800e1a8:	00f42400 	.word	0x00f42400
 800e1ac:	007a1200 	.word	0x007a1200

0800e1b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e1b4:	4b02      	ldr	r3, [pc, #8]	@ (800e1c0 <HAL_RCC_GetHCLKFreq+0x10>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
}
 800e1b8:	0018      	movs	r0, r3
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	46c0      	nop			@ (mov r8, r8)
 800e1c0:	2000001c 	.word	0x2000001c

0800e1c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e1c4:	b5b0      	push	{r4, r5, r7, lr}
 800e1c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800e1c8:	f7ff fff2 	bl	800e1b0 <HAL_RCC_GetHCLKFreq>
 800e1cc:	0004      	movs	r4, r0
 800e1ce:	f7ff fb3f 	bl	800d850 <LL_RCC_GetAPB1Prescaler>
 800e1d2:	0003      	movs	r3, r0
 800e1d4:	0b1a      	lsrs	r2, r3, #12
 800e1d6:	4b05      	ldr	r3, [pc, #20]	@ (800e1ec <HAL_RCC_GetPCLK1Freq+0x28>)
 800e1d8:	0092      	lsls	r2, r2, #2
 800e1da:	58d3      	ldr	r3, [r2, r3]
 800e1dc:	221f      	movs	r2, #31
 800e1de:	4013      	ands	r3, r2
 800e1e0:	40dc      	lsrs	r4, r3
 800e1e2:	0023      	movs	r3, r4
}
 800e1e4:	0018      	movs	r0, r3
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e1ea:	46c0      	nop			@ (mov r8, r8)
 800e1ec:	08017b98 	.word	0x08017b98

0800e1f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800e1f8:	2313      	movs	r3, #19
 800e1fa:	18fb      	adds	r3, r7, r3
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e200:	2312      	movs	r3, #18
 800e202:	18fb      	adds	r3, r7, r3
 800e204:	2200      	movs	r2, #0
 800e206:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	2380      	movs	r3, #128	@ 0x80
 800e20e:	029b      	lsls	r3, r3, #10
 800e210:	4013      	ands	r3, r2
 800e212:	d100      	bne.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800e214:	e0a3      	b.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e216:	2011      	movs	r0, #17
 800e218:	183b      	adds	r3, r7, r0
 800e21a:	2200      	movs	r2, #0
 800e21c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e21e:	4bc3      	ldr	r3, [pc, #780]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e220:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e222:	2380      	movs	r3, #128	@ 0x80
 800e224:	055b      	lsls	r3, r3, #21
 800e226:	4013      	ands	r3, r2
 800e228:	d110      	bne.n	800e24c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e22a:	4bc0      	ldr	r3, [pc, #768]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e22c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e22e:	4bbf      	ldr	r3, [pc, #764]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e230:	2180      	movs	r1, #128	@ 0x80
 800e232:	0549      	lsls	r1, r1, #21
 800e234:	430a      	orrs	r2, r1
 800e236:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e238:	4bbc      	ldr	r3, [pc, #752]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e23a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e23c:	2380      	movs	r3, #128	@ 0x80
 800e23e:	055b      	lsls	r3, r3, #21
 800e240:	4013      	ands	r3, r2
 800e242:	60bb      	str	r3, [r7, #8]
 800e244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e246:	183b      	adds	r3, r7, r0
 800e248:	2201      	movs	r2, #1
 800e24a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e24c:	4bb8      	ldr	r3, [pc, #736]	@ (800e530 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	4bb7      	ldr	r3, [pc, #732]	@ (800e530 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800e252:	2180      	movs	r1, #128	@ 0x80
 800e254:	0049      	lsls	r1, r1, #1
 800e256:	430a      	orrs	r2, r1
 800e258:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e25a:	f7fe f885 	bl	800c368 <HAL_GetTick>
 800e25e:	0003      	movs	r3, r0
 800e260:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e262:	e00b      	b.n	800e27c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e264:	f7fe f880 	bl	800c368 <HAL_GetTick>
 800e268:	0002      	movs	r2, r0
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	2b02      	cmp	r3, #2
 800e270:	d904      	bls.n	800e27c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800e272:	2313      	movs	r3, #19
 800e274:	18fb      	adds	r3, r7, r3
 800e276:	2203      	movs	r2, #3
 800e278:	701a      	strb	r2, [r3, #0]
        break;
 800e27a:	e005      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e27c:	4bac      	ldr	r3, [pc, #688]	@ (800e530 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	2380      	movs	r3, #128	@ 0x80
 800e282:	005b      	lsls	r3, r3, #1
 800e284:	4013      	ands	r3, r2
 800e286:	d0ed      	beq.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800e288:	2313      	movs	r3, #19
 800e28a:	18fb      	adds	r3, r7, r3
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d154      	bne.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e292:	4ba6      	ldr	r3, [pc, #664]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e294:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e296:	23c0      	movs	r3, #192	@ 0xc0
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	4013      	ands	r3, r2
 800e29c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d019      	beq.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d014      	beq.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e2ae:	4b9f      	ldr	r3, [pc, #636]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e2b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2b2:	4aa0      	ldr	r2, [pc, #640]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800e2b4:	4013      	ands	r3, r2
 800e2b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e2b8:	4b9c      	ldr	r3, [pc, #624]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e2ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e2bc:	4b9b      	ldr	r3, [pc, #620]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e2be:	2180      	movs	r1, #128	@ 0x80
 800e2c0:	0249      	lsls	r1, r1, #9
 800e2c2:	430a      	orrs	r2, r1
 800e2c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e2c6:	4b99      	ldr	r3, [pc, #612]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e2c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e2ca:	4b98      	ldr	r3, [pc, #608]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e2cc:	499a      	ldr	r1, [pc, #616]	@ (800e538 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800e2ce:	400a      	ands	r2, r1
 800e2d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e2d2:	4b96      	ldr	r3, [pc, #600]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e2d4:	697a      	ldr	r2, [r7, #20]
 800e2d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	4013      	ands	r3, r2
 800e2de:	d016      	beq.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2e0:	f7fe f842 	bl	800c368 <HAL_GetTick>
 800e2e4:	0003      	movs	r3, r0
 800e2e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e2e8:	e00c      	b.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e2ea:	f7fe f83d 	bl	800c368 <HAL_GetTick>
 800e2ee:	0002      	movs	r2, r0
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	4a91      	ldr	r2, [pc, #580]	@ (800e53c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d904      	bls.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800e2fa:	2313      	movs	r3, #19
 800e2fc:	18fb      	adds	r3, r7, r3
 800e2fe:	2203      	movs	r2, #3
 800e300:	701a      	strb	r2, [r3, #0]
            break;
 800e302:	e004      	b.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e304:	4b89      	ldr	r3, [pc, #548]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e308:	2202      	movs	r2, #2
 800e30a:	4013      	ands	r3, r2
 800e30c:	d0ed      	beq.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800e30e:	2313      	movs	r3, #19
 800e310:	18fb      	adds	r3, r7, r3
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10a      	bne.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e318:	4b84      	ldr	r3, [pc, #528]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e31a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e31c:	4a85      	ldr	r2, [pc, #532]	@ (800e534 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800e31e:	4013      	ands	r3, r2
 800e320:	0019      	movs	r1, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e326:	4b81      	ldr	r3, [pc, #516]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e328:	430a      	orrs	r2, r1
 800e32a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e32c:	e00c      	b.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e32e:	2312      	movs	r3, #18
 800e330:	18fb      	adds	r3, r7, r3
 800e332:	2213      	movs	r2, #19
 800e334:	18ba      	adds	r2, r7, r2
 800e336:	7812      	ldrb	r2, [r2, #0]
 800e338:	701a      	strb	r2, [r3, #0]
 800e33a:	e005      	b.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e33c:	2312      	movs	r3, #18
 800e33e:	18fb      	adds	r3, r7, r3
 800e340:	2213      	movs	r2, #19
 800e342:	18ba      	adds	r2, r7, r2
 800e344:	7812      	ldrb	r2, [r2, #0]
 800e346:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e348:	2311      	movs	r3, #17
 800e34a:	18fb      	adds	r3, r7, r3
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d105      	bne.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e352:	4b76      	ldr	r3, [pc, #472]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e354:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e356:	4b75      	ldr	r3, [pc, #468]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e358:	4979      	ldr	r1, [pc, #484]	@ (800e540 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800e35a:	400a      	ands	r2, r1
 800e35c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2201      	movs	r2, #1
 800e364:	4013      	ands	r3, r2
 800e366:	d009      	beq.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e368:	4b70      	ldr	r3, [pc, #448]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e36c:	2203      	movs	r2, #3
 800e36e:	4393      	bics	r3, r2
 800e370:	0019      	movs	r1, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	4b6d      	ldr	r3, [pc, #436]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e378:	430a      	orrs	r2, r1
 800e37a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2202      	movs	r2, #2
 800e382:	4013      	ands	r3, r2
 800e384:	d009      	beq.n	800e39a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e386:	4b69      	ldr	r3, [pc, #420]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e38a:	220c      	movs	r2, #12
 800e38c:	4393      	bics	r3, r2
 800e38e:	0019      	movs	r1, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	689a      	ldr	r2, [r3, #8]
 800e394:	4b65      	ldr	r3, [pc, #404]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e396:	430a      	orrs	r2, r1
 800e398:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2210      	movs	r2, #16
 800e3a0:	4013      	ands	r3, r2
 800e3a2:	d009      	beq.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e3a4:	4b61      	ldr	r3, [pc, #388]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e3a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3a8:	4a66      	ldr	r2, [pc, #408]	@ (800e544 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800e3aa:	4013      	ands	r3, r2
 800e3ac:	0019      	movs	r1, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	68da      	ldr	r2, [r3, #12]
 800e3b2:	4b5e      	ldr	r3, [pc, #376]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e3b4:	430a      	orrs	r2, r1
 800e3b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	2380      	movs	r3, #128	@ 0x80
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	d009      	beq.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e3c4:	4b59      	ldr	r3, [pc, #356]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e3c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3c8:	4a5f      	ldr	r2, [pc, #380]	@ (800e548 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	0019      	movs	r1, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	699a      	ldr	r2, [r3, #24]
 800e3d2:	4b56      	ldr	r3, [pc, #344]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e3d4:	430a      	orrs	r2, r1
 800e3d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	2380      	movs	r3, #128	@ 0x80
 800e3de:	00db      	lsls	r3, r3, #3
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	d009      	beq.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e3e4:	4b51      	ldr	r3, [pc, #324]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e3e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3e8:	4a58      	ldr	r2, [pc, #352]	@ (800e54c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	0019      	movs	r1, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	69da      	ldr	r2, [r3, #28]
 800e3f2:	4b4e      	ldr	r3, [pc, #312]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e3f4:	430a      	orrs	r2, r1
 800e3f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2220      	movs	r2, #32
 800e3fe:	4013      	ands	r3, r2
 800e400:	d009      	beq.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e402:	4b4a      	ldr	r3, [pc, #296]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e406:	4a52      	ldr	r2, [pc, #328]	@ (800e550 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800e408:	4013      	ands	r3, r2
 800e40a:	0019      	movs	r1, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	691a      	ldr	r2, [r3, #16]
 800e410:	4b46      	ldr	r3, [pc, #280]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e412:	430a      	orrs	r2, r1
 800e414:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	2380      	movs	r3, #128	@ 0x80
 800e41c:	01db      	lsls	r3, r3, #7
 800e41e:	4013      	ands	r3, r2
 800e420:	d015      	beq.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e422:	4b42      	ldr	r3, [pc, #264]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	0899      	lsrs	r1, r3, #2
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a1a      	ldr	r2, [r3, #32]
 800e42e:	4b3f      	ldr	r3, [pc, #252]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e430:	430a      	orrs	r2, r1
 800e432:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6a1a      	ldr	r2, [r3, #32]
 800e438:	2380      	movs	r3, #128	@ 0x80
 800e43a:	05db      	lsls	r3, r3, #23
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d106      	bne.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800e440:	4b3a      	ldr	r3, [pc, #232]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e442:	68da      	ldr	r2, [r3, #12]
 800e444:	4b39      	ldr	r3, [pc, #228]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e446:	2180      	movs	r1, #128	@ 0x80
 800e448:	0249      	lsls	r1, r1, #9
 800e44a:	430a      	orrs	r2, r1
 800e44c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	2380      	movs	r3, #128	@ 0x80
 800e454:	031b      	lsls	r3, r3, #12
 800e456:	4013      	ands	r3, r2
 800e458:	d009      	beq.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e45a:	4b34      	ldr	r3, [pc, #208]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e45c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e45e:	2240      	movs	r2, #64	@ 0x40
 800e460:	4393      	bics	r3, r2
 800e462:	0019      	movs	r1, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e468:	4b30      	ldr	r3, [pc, #192]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e46a:	430a      	orrs	r2, r1
 800e46c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	2380      	movs	r3, #128	@ 0x80
 800e474:	039b      	lsls	r3, r3, #14
 800e476:	4013      	ands	r3, r2
 800e478:	d016      	beq.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800e47a:	4b2c      	ldr	r3, [pc, #176]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e47c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e47e:	4a35      	ldr	r2, [pc, #212]	@ (800e554 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800e480:	4013      	ands	r3, r2
 800e482:	0019      	movs	r1, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e488:	4b28      	ldr	r3, [pc, #160]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e48a:	430a      	orrs	r2, r1
 800e48c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e492:	2380      	movs	r3, #128	@ 0x80
 800e494:	03db      	lsls	r3, r3, #15
 800e496:	429a      	cmp	r2, r3
 800e498:	d106      	bne.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800e49a:	4b24      	ldr	r3, [pc, #144]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e49c:	68da      	ldr	r2, [r3, #12]
 800e49e:	4b23      	ldr	r3, [pc, #140]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e4a0:	2180      	movs	r1, #128	@ 0x80
 800e4a2:	0449      	lsls	r1, r1, #17
 800e4a4:	430a      	orrs	r2, r1
 800e4a6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	2380      	movs	r3, #128	@ 0x80
 800e4ae:	03db      	lsls	r3, r3, #15
 800e4b0:	4013      	ands	r3, r2
 800e4b2:	d016      	beq.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800e4b4:	4b1d      	ldr	r3, [pc, #116]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e4b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4b8:	4a27      	ldr	r2, [pc, #156]	@ (800e558 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800e4ba:	4013      	ands	r3, r2
 800e4bc:	0019      	movs	r1, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c2:	4b1a      	ldr	r3, [pc, #104]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e4c4:	430a      	orrs	r2, r1
 800e4c6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4cc:	2380      	movs	r3, #128	@ 0x80
 800e4ce:	045b      	lsls	r3, r3, #17
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d106      	bne.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800e4d4:	4b15      	ldr	r3, [pc, #84]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e4d6:	68da      	ldr	r2, [r3, #12]
 800e4d8:	4b14      	ldr	r3, [pc, #80]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e4da:	2180      	movs	r1, #128	@ 0x80
 800e4dc:	0449      	lsls	r1, r1, #17
 800e4de:	430a      	orrs	r2, r1
 800e4e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	2380      	movs	r3, #128	@ 0x80
 800e4e8:	011b      	lsls	r3, r3, #4
 800e4ea:	4013      	ands	r3, r2
 800e4ec:	d016      	beq.n	800e51c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800e4ee:	4b0f      	ldr	r3, [pc, #60]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4f2:	4a1a      	ldr	r2, [pc, #104]	@ (800e55c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	0019      	movs	r1, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	695a      	ldr	r2, [r3, #20]
 800e4fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e4fe:	430a      	orrs	r2, r1
 800e500:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	695a      	ldr	r2, [r3, #20]
 800e506:	2380      	movs	r3, #128	@ 0x80
 800e508:	01db      	lsls	r3, r3, #7
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d106      	bne.n	800e51c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800e50e:	4b07      	ldr	r3, [pc, #28]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e510:	68da      	ldr	r2, [r3, #12]
 800e512:	4b06      	ldr	r3, [pc, #24]	@ (800e52c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800e514:	2180      	movs	r1, #128	@ 0x80
 800e516:	0249      	lsls	r1, r1, #9
 800e518:	430a      	orrs	r2, r1
 800e51a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800e51c:	2312      	movs	r3, #18
 800e51e:	18fb      	adds	r3, r7, r3
 800e520:	781b      	ldrb	r3, [r3, #0]
}
 800e522:	0018      	movs	r0, r3
 800e524:	46bd      	mov	sp, r7
 800e526:	b006      	add	sp, #24
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	46c0      	nop			@ (mov r8, r8)
 800e52c:	40021000 	.word	0x40021000
 800e530:	40007000 	.word	0x40007000
 800e534:	fffffcff 	.word	0xfffffcff
 800e538:	fffeffff 	.word	0xfffeffff
 800e53c:	00001388 	.word	0x00001388
 800e540:	efffffff 	.word	0xefffffff
 800e544:	fffff3ff 	.word	0xfffff3ff
 800e548:	fff3ffff 	.word	0xfff3ffff
 800e54c:	ffcfffff 	.word	0xffcfffff
 800e550:	ffffcfff 	.word	0xffffcfff
 800e554:	ffbfffff 	.word	0xffbfffff
 800e558:	feffffff 	.word	0xfeffffff
 800e55c:	ffff3fff 	.word	0xffff3fff

0800e560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d101      	bne.n	800e572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e56e:	2301      	movs	r3, #1
 800e570:	e0a8      	b.n	800e6c4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e576:	2b00      	cmp	r3, #0
 800e578:	d109      	bne.n	800e58e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	2382      	movs	r3, #130	@ 0x82
 800e580:	005b      	lsls	r3, r3, #1
 800e582:	429a      	cmp	r2, r3
 800e584:	d009      	beq.n	800e59a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	61da      	str	r2, [r3, #28]
 800e58c:	e005      	b.n	800e59a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	225d      	movs	r2, #93	@ 0x5d
 800e5a4:	5c9b      	ldrb	r3, [r3, r2]
 800e5a6:	b2db      	uxtb	r3, r3
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d107      	bne.n	800e5bc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	225c      	movs	r2, #92	@ 0x5c
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	0018      	movs	r0, r3
 800e5b8:	f7fd fc6e 	bl	800be98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	225d      	movs	r2, #93	@ 0x5d
 800e5c0:	2102      	movs	r1, #2
 800e5c2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2140      	movs	r1, #64	@ 0x40
 800e5d0:	438a      	bics	r2, r1
 800e5d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	68da      	ldr	r2, [r3, #12]
 800e5d8:	23e0      	movs	r3, #224	@ 0xe0
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d902      	bls.n	800e5e6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60fb      	str	r3, [r7, #12]
 800e5e4:	e002      	b.n	800e5ec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e5e6:	2380      	movs	r3, #128	@ 0x80
 800e5e8:	015b      	lsls	r3, r3, #5
 800e5ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	68da      	ldr	r2, [r3, #12]
 800e5f0:	23f0      	movs	r3, #240	@ 0xf0
 800e5f2:	011b      	lsls	r3, r3, #4
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d008      	beq.n	800e60a <HAL_SPI_Init+0xaa>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68da      	ldr	r2, [r3, #12]
 800e5fc:	23e0      	movs	r3, #224	@ 0xe0
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	429a      	cmp	r2, r3
 800e602:	d002      	beq.n	800e60a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	685a      	ldr	r2, [r3, #4]
 800e60e:	2382      	movs	r3, #130	@ 0x82
 800e610:	005b      	lsls	r3, r3, #1
 800e612:	401a      	ands	r2, r3
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6899      	ldr	r1, [r3, #8]
 800e618:	2384      	movs	r3, #132	@ 0x84
 800e61a:	021b      	lsls	r3, r3, #8
 800e61c:	400b      	ands	r3, r1
 800e61e:	431a      	orrs	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	691b      	ldr	r3, [r3, #16]
 800e624:	2102      	movs	r1, #2
 800e626:	400b      	ands	r3, r1
 800e628:	431a      	orrs	r2, r3
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	695b      	ldr	r3, [r3, #20]
 800e62e:	2101      	movs	r1, #1
 800e630:	400b      	ands	r3, r1
 800e632:	431a      	orrs	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6999      	ldr	r1, [r3, #24]
 800e638:	2380      	movs	r3, #128	@ 0x80
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	400b      	ands	r3, r1
 800e63e:	431a      	orrs	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	69db      	ldr	r3, [r3, #28]
 800e644:	2138      	movs	r1, #56	@ 0x38
 800e646:	400b      	ands	r3, r1
 800e648:	431a      	orrs	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	2180      	movs	r1, #128	@ 0x80
 800e650:	400b      	ands	r3, r1
 800e652:	431a      	orrs	r2, r3
 800e654:	0011      	movs	r1, r2
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e65a:	2380      	movs	r3, #128	@ 0x80
 800e65c:	019b      	lsls	r3, r3, #6
 800e65e:	401a      	ands	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	430a      	orrs	r2, r1
 800e666:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	699b      	ldr	r3, [r3, #24]
 800e66c:	0c1b      	lsrs	r3, r3, #16
 800e66e:	2204      	movs	r2, #4
 800e670:	401a      	ands	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e676:	2110      	movs	r1, #16
 800e678:	400b      	ands	r3, r1
 800e67a:	431a      	orrs	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e680:	2108      	movs	r1, #8
 800e682:	400b      	ands	r3, r1
 800e684:	431a      	orrs	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68d9      	ldr	r1, [r3, #12]
 800e68a:	23f0      	movs	r3, #240	@ 0xf0
 800e68c:	011b      	lsls	r3, r3, #4
 800e68e:	400b      	ands	r3, r1
 800e690:	431a      	orrs	r2, r3
 800e692:	0011      	movs	r1, r2
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	2380      	movs	r3, #128	@ 0x80
 800e698:	015b      	lsls	r3, r3, #5
 800e69a:	401a      	ands	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	430a      	orrs	r2, r1
 800e6a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	69da      	ldr	r2, [r3, #28]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4907      	ldr	r1, [pc, #28]	@ (800e6cc <HAL_SPI_Init+0x16c>)
 800e6b0:	400a      	ands	r2, r1
 800e6b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	225d      	movs	r2, #93	@ 0x5d
 800e6be:	2101      	movs	r1, #1
 800e6c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	0018      	movs	r0, r3
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	b004      	add	sp, #16
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	fffff7ff 	.word	0xfffff7ff

0800e6d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b088      	sub	sp, #32
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	603b      	str	r3, [r7, #0]
 800e6dc:	1dbb      	adds	r3, r7, #6
 800e6de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e6e0:	231f      	movs	r3, #31
 800e6e2:	18fb      	adds	r3, r7, r3
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	225c      	movs	r2, #92	@ 0x5c
 800e6ec:	5c9b      	ldrb	r3, [r3, r2]
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d101      	bne.n	800e6f6 <HAL_SPI_Transmit+0x26>
 800e6f2:	2302      	movs	r3, #2
 800e6f4:	e147      	b.n	800e986 <HAL_SPI_Transmit+0x2b6>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	225c      	movs	r2, #92	@ 0x5c
 800e6fa:	2101      	movs	r1, #1
 800e6fc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6fe:	f7fd fe33 	bl	800c368 <HAL_GetTick>
 800e702:	0003      	movs	r3, r0
 800e704:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e706:	2316      	movs	r3, #22
 800e708:	18fb      	adds	r3, r7, r3
 800e70a:	1dba      	adds	r2, r7, #6
 800e70c:	8812      	ldrh	r2, [r2, #0]
 800e70e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	225d      	movs	r2, #93	@ 0x5d
 800e714:	5c9b      	ldrb	r3, [r3, r2]
 800e716:	b2db      	uxtb	r3, r3
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d004      	beq.n	800e726 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800e71c:	231f      	movs	r3, #31
 800e71e:	18fb      	adds	r3, r7, r3
 800e720:	2202      	movs	r2, #2
 800e722:	701a      	strb	r2, [r3, #0]
    goto error;
 800e724:	e128      	b.n	800e978 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d003      	beq.n	800e734 <HAL_SPI_Transmit+0x64>
 800e72c:	1dbb      	adds	r3, r7, #6
 800e72e:	881b      	ldrh	r3, [r3, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d104      	bne.n	800e73e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800e734:	231f      	movs	r3, #31
 800e736:	18fb      	adds	r3, r7, r3
 800e738:	2201      	movs	r2, #1
 800e73a:	701a      	strb	r2, [r3, #0]
    goto error;
 800e73c:	e11c      	b.n	800e978 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	225d      	movs	r2, #93	@ 0x5d
 800e742:	2103      	movs	r1, #3
 800e744:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	1dba      	adds	r2, r7, #6
 800e756:	8812      	ldrh	r2, [r2, #0]
 800e758:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	1dba      	adds	r2, r7, #6
 800e75e:	8812      	ldrh	r2, [r2, #0]
 800e760:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2200      	movs	r2, #0
 800e766:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2244      	movs	r2, #68	@ 0x44
 800e76c:	2100      	movs	r1, #0
 800e76e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2246      	movs	r2, #70	@ 0x46
 800e774:	2100      	movs	r1, #0
 800e776:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2200      	movs	r2, #0
 800e782:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	689a      	ldr	r2, [r3, #8]
 800e788:	2380      	movs	r3, #128	@ 0x80
 800e78a:	021b      	lsls	r3, r3, #8
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d110      	bne.n	800e7b2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2140      	movs	r1, #64	@ 0x40
 800e79c:	438a      	bics	r2, r1
 800e79e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2180      	movs	r1, #128	@ 0x80
 800e7ac:	01c9      	lsls	r1, r1, #7
 800e7ae:	430a      	orrs	r2, r1
 800e7b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2240      	movs	r2, #64	@ 0x40
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	2b40      	cmp	r3, #64	@ 0x40
 800e7be:	d007      	beq.n	800e7d0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2140      	movs	r1, #64	@ 0x40
 800e7cc:	430a      	orrs	r2, r1
 800e7ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	68da      	ldr	r2, [r3, #12]
 800e7d4:	23e0      	movs	r3, #224	@ 0xe0
 800e7d6:	00db      	lsls	r3, r3, #3
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d952      	bls.n	800e882 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d004      	beq.n	800e7ee <HAL_SPI_Transmit+0x11e>
 800e7e4:	2316      	movs	r3, #22
 800e7e6:	18fb      	adds	r3, r7, r3
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d143      	bne.n	800e876 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7f2:	881a      	ldrh	r2, [r3, #0]
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7fe:	1c9a      	adds	r2, r3, #2
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e808:	b29b      	uxth	r3, r3
 800e80a:	3b01      	subs	r3, #1
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e812:	e030      	b.n	800e876 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	2202      	movs	r2, #2
 800e81c:	4013      	ands	r3, r2
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d112      	bne.n	800e848 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e826:	881a      	ldrh	r2, [r3, #0]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e832:	1c9a      	adds	r2, r3, #2
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	3b01      	subs	r3, #1
 800e840:	b29a      	uxth	r2, r3
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e846:	e016      	b.n	800e876 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e848:	f7fd fd8e 	bl	800c368 <HAL_GetTick>
 800e84c:	0002      	movs	r2, r0
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	683a      	ldr	r2, [r7, #0]
 800e854:	429a      	cmp	r2, r3
 800e856:	d802      	bhi.n	800e85e <HAL_SPI_Transmit+0x18e>
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	3301      	adds	r3, #1
 800e85c:	d102      	bne.n	800e864 <HAL_SPI_Transmit+0x194>
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d108      	bne.n	800e876 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800e864:	231f      	movs	r3, #31
 800e866:	18fb      	adds	r3, r7, r3
 800e868:	2203      	movs	r2, #3
 800e86a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	225d      	movs	r2, #93	@ 0x5d
 800e870:	2101      	movs	r1, #1
 800e872:	5499      	strb	r1, [r3, r2]
          goto error;
 800e874:	e080      	b.n	800e978 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1c9      	bne.n	800e814 <HAL_SPI_Transmit+0x144>
 800e880:	e053      	b.n	800e92a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d004      	beq.n	800e894 <HAL_SPI_Transmit+0x1c4>
 800e88a:	2316      	movs	r3, #22
 800e88c:	18fb      	adds	r3, r7, r3
 800e88e:	881b      	ldrh	r3, [r3, #0]
 800e890:	2b01      	cmp	r3, #1
 800e892:	d145      	bne.n	800e920 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	330c      	adds	r3, #12
 800e89e:	7812      	ldrb	r2, [r2, #0]
 800e8a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8a6:	1c5a      	adds	r2, r3, #1
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	b29a      	uxth	r2, r3
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800e8ba:	e031      	b.n	800e920 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	689b      	ldr	r3, [r3, #8]
 800e8c2:	2202      	movs	r2, #2
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	2b02      	cmp	r3, #2
 800e8c8:	d113      	bne.n	800e8f2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	330c      	adds	r3, #12
 800e8d4:	7812      	ldrb	r2, [r2, #0]
 800e8d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8dc:	1c5a      	adds	r2, r3, #1
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e8f0:	e016      	b.n	800e920 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8f2:	f7fd fd39 	bl	800c368 <HAL_GetTick>
 800e8f6:	0002      	movs	r2, r0
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d802      	bhi.n	800e908 <HAL_SPI_Transmit+0x238>
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	3301      	adds	r3, #1
 800e906:	d102      	bne.n	800e90e <HAL_SPI_Transmit+0x23e>
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d108      	bne.n	800e920 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800e90e:	231f      	movs	r3, #31
 800e910:	18fb      	adds	r3, r7, r3
 800e912:	2203      	movs	r2, #3
 800e914:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	225d      	movs	r2, #93	@ 0x5d
 800e91a:	2101      	movs	r1, #1
 800e91c:	5499      	strb	r1, [r3, r2]
          goto error;
 800e91e:	e02b      	b.n	800e978 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e924:	b29b      	uxth	r3, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	d1c8      	bne.n	800e8bc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e92a:	69ba      	ldr	r2, [r7, #24]
 800e92c:	6839      	ldr	r1, [r7, #0]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	0018      	movs	r0, r3
 800e932:	f000 fcef 	bl	800f314 <SPI_EndRxTxTransaction>
 800e936:	1e03      	subs	r3, r0, #0
 800e938:	d002      	beq.n	800e940 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2220      	movs	r2, #32
 800e93e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d10a      	bne.n	800e95e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e948:	2300      	movs	r3, #0
 800e94a:	613b      	str	r3, [r7, #16]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	613b      	str	r3, [r7, #16]
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	689b      	ldr	r3, [r3, #8]
 800e95a:	613b      	str	r3, [r7, #16]
 800e95c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e962:	2b00      	cmp	r3, #0
 800e964:	d004      	beq.n	800e970 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800e966:	231f      	movs	r3, #31
 800e968:	18fb      	adds	r3, r7, r3
 800e96a:	2201      	movs	r2, #1
 800e96c:	701a      	strb	r2, [r3, #0]
 800e96e:	e003      	b.n	800e978 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	225d      	movs	r2, #93	@ 0x5d
 800e974:	2101      	movs	r1, #1
 800e976:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	225c      	movs	r2, #92	@ 0x5c
 800e97c:	2100      	movs	r1, #0
 800e97e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800e980:	231f      	movs	r3, #31
 800e982:	18fb      	adds	r3, r7, r3
 800e984:	781b      	ldrb	r3, [r3, #0]
}
 800e986:	0018      	movs	r0, r3
 800e988:	46bd      	mov	sp, r7
 800e98a:	b008      	add	sp, #32
 800e98c:	bd80      	pop	{r7, pc}
	...

0800e990 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e990:	b590      	push	{r4, r7, lr}
 800e992:	b089      	sub	sp, #36	@ 0x24
 800e994:	af02      	add	r7, sp, #8
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	603b      	str	r3, [r7, #0]
 800e99c:	1dbb      	adds	r3, r7, #6
 800e99e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e9a0:	2117      	movs	r1, #23
 800e9a2:	187b      	adds	r3, r7, r1
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	225d      	movs	r2, #93	@ 0x5d
 800e9ac:	5c9b      	ldrb	r3, [r3, r2]
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d003      	beq.n	800e9bc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800e9b4:	187b      	adds	r3, r7, r1
 800e9b6:	2202      	movs	r2, #2
 800e9b8:	701a      	strb	r2, [r3, #0]
    goto error;
 800e9ba:	e12b      	b.n	800ec14 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	685a      	ldr	r2, [r3, #4]
 800e9c0:	2382      	movs	r3, #130	@ 0x82
 800e9c2:	005b      	lsls	r3, r3, #1
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d113      	bne.n	800e9f0 <HAL_SPI_Receive+0x60>
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d10f      	bne.n	800e9f0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	225d      	movs	r2, #93	@ 0x5d
 800e9d4:	2104      	movs	r1, #4
 800e9d6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e9d8:	1dbb      	adds	r3, r7, #6
 800e9da:	881c      	ldrh	r4, [r3, #0]
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	68b9      	ldr	r1, [r7, #8]
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	0023      	movs	r3, r4
 800e9e8:	f000 f924 	bl	800ec34 <HAL_SPI_TransmitReceive>
 800e9ec:	0003      	movs	r3, r0
 800e9ee:	e118      	b.n	800ec22 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	225c      	movs	r2, #92	@ 0x5c
 800e9f4:	5c9b      	ldrb	r3, [r3, r2]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d101      	bne.n	800e9fe <HAL_SPI_Receive+0x6e>
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	e111      	b.n	800ec22 <HAL_SPI_Receive+0x292>
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	225c      	movs	r2, #92	@ 0x5c
 800ea02:	2101      	movs	r1, #1
 800ea04:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea06:	f7fd fcaf 	bl	800c368 <HAL_GetTick>
 800ea0a:	0003      	movs	r3, r0
 800ea0c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d003      	beq.n	800ea1c <HAL_SPI_Receive+0x8c>
 800ea14:	1dbb      	adds	r3, r7, #6
 800ea16:	881b      	ldrh	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d104      	bne.n	800ea26 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800ea1c:	2317      	movs	r3, #23
 800ea1e:	18fb      	adds	r3, r7, r3
 800ea20:	2201      	movs	r2, #1
 800ea22:	701a      	strb	r2, [r3, #0]
    goto error;
 800ea24:	e0f6      	b.n	800ec14 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	225d      	movs	r2, #93	@ 0x5d
 800ea2a:	2104      	movs	r1, #4
 800ea2c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	1dba      	adds	r2, r7, #6
 800ea3e:	2144      	movs	r1, #68	@ 0x44
 800ea40:	8812      	ldrh	r2, [r2, #0]
 800ea42:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	1dba      	adds	r2, r7, #6
 800ea48:	2146      	movs	r1, #70	@ 0x46
 800ea4a:	8812      	ldrh	r2, [r2, #0]
 800ea4c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2200      	movs	r2, #0
 800ea64:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	68da      	ldr	r2, [r3, #12]
 800ea70:	23e0      	movs	r3, #224	@ 0xe0
 800ea72:	00db      	lsls	r3, r3, #3
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d908      	bls.n	800ea8a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	685a      	ldr	r2, [r3, #4]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	496a      	ldr	r1, [pc, #424]	@ (800ec2c <HAL_SPI_Receive+0x29c>)
 800ea84:	400a      	ands	r2, r1
 800ea86:	605a      	str	r2, [r3, #4]
 800ea88:	e008      	b.n	800ea9c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	685a      	ldr	r2, [r3, #4]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2180      	movs	r1, #128	@ 0x80
 800ea96:	0149      	lsls	r1, r1, #5
 800ea98:	430a      	orrs	r2, r1
 800ea9a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	689a      	ldr	r2, [r3, #8]
 800eaa0:	2380      	movs	r3, #128	@ 0x80
 800eaa2:	021b      	lsls	r3, r3, #8
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d10f      	bne.n	800eac8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2140      	movs	r1, #64	@ 0x40
 800eab4:	438a      	bics	r2, r1
 800eab6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	495b      	ldr	r1, [pc, #364]	@ (800ec30 <HAL_SPI_Receive+0x2a0>)
 800eac4:	400a      	ands	r2, r1
 800eac6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2240      	movs	r2, #64	@ 0x40
 800ead0:	4013      	ands	r3, r2
 800ead2:	2b40      	cmp	r3, #64	@ 0x40
 800ead4:	d007      	beq.n	800eae6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2140      	movs	r1, #64	@ 0x40
 800eae2:	430a      	orrs	r2, r1
 800eae4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	68da      	ldr	r2, [r3, #12]
 800eaea:	23e0      	movs	r3, #224	@ 0xe0
 800eaec:	00db      	lsls	r3, r3, #3
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d900      	bls.n	800eaf4 <HAL_SPI_Receive+0x164>
 800eaf2:	e071      	b.n	800ebd8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eaf4:	e035      	b.n	800eb62 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	2201      	movs	r2, #1
 800eafe:	4013      	ands	r3, r2
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d117      	bne.n	800eb34 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	330c      	adds	r3, #12
 800eb0a:	001a      	movs	r2, r3
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb10:	7812      	ldrb	r2, [r2, #0]
 800eb12:	b2d2      	uxtb	r2, r2
 800eb14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb1a:	1c5a      	adds	r2, r3, #1
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2246      	movs	r2, #70	@ 0x46
 800eb24:	5a9b      	ldrh	r3, [r3, r2]
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	b299      	uxth	r1, r3
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2246      	movs	r2, #70	@ 0x46
 800eb30:	5299      	strh	r1, [r3, r2]
 800eb32:	e016      	b.n	800eb62 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb34:	f7fd fc18 	bl	800c368 <HAL_GetTick>
 800eb38:	0002      	movs	r2, r0
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	1ad3      	subs	r3, r2, r3
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d802      	bhi.n	800eb4a <HAL_SPI_Receive+0x1ba>
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	3301      	adds	r3, #1
 800eb48:	d102      	bne.n	800eb50 <HAL_SPI_Receive+0x1c0>
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d108      	bne.n	800eb62 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800eb50:	2317      	movs	r3, #23
 800eb52:	18fb      	adds	r3, r7, r3
 800eb54:	2203      	movs	r2, #3
 800eb56:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	225d      	movs	r2, #93	@ 0x5d
 800eb5c:	2101      	movs	r1, #1
 800eb5e:	5499      	strb	r1, [r3, r2]
          goto error;
 800eb60:	e058      	b.n	800ec14 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2246      	movs	r2, #70	@ 0x46
 800eb66:	5a9b      	ldrh	r3, [r3, r2]
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d1c3      	bne.n	800eaf6 <HAL_SPI_Receive+0x166>
 800eb6e:	e039      	b.n	800ebe4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	2201      	movs	r2, #1
 800eb78:	4013      	ands	r3, r2
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d115      	bne.n	800ebaa <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	68da      	ldr	r2, [r3, #12]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb88:	b292      	uxth	r2, r2
 800eb8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb90:	1c9a      	adds	r2, r3, #2
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2246      	movs	r2, #70	@ 0x46
 800eb9a:	5a9b      	ldrh	r3, [r3, r2]
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	b299      	uxth	r1, r3
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2246      	movs	r2, #70	@ 0x46
 800eba6:	5299      	strh	r1, [r3, r2]
 800eba8:	e016      	b.n	800ebd8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebaa:	f7fd fbdd 	bl	800c368 <HAL_GetTick>
 800ebae:	0002      	movs	r2, r0
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	683a      	ldr	r2, [r7, #0]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d802      	bhi.n	800ebc0 <HAL_SPI_Receive+0x230>
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	d102      	bne.n	800ebc6 <HAL_SPI_Receive+0x236>
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d108      	bne.n	800ebd8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800ebc6:	2317      	movs	r3, #23
 800ebc8:	18fb      	adds	r3, r7, r3
 800ebca:	2203      	movs	r2, #3
 800ebcc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	225d      	movs	r2, #93	@ 0x5d
 800ebd2:	2101      	movs	r1, #1
 800ebd4:	5499      	strb	r1, [r3, r2]
          goto error;
 800ebd6:	e01d      	b.n	800ec14 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2246      	movs	r2, #70	@ 0x46
 800ebdc:	5a9b      	ldrh	r3, [r3, r2]
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d1c5      	bne.n	800eb70 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ebe4:	693a      	ldr	r2, [r7, #16]
 800ebe6:	6839      	ldr	r1, [r7, #0]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	0018      	movs	r0, r3
 800ebec:	f000 fb34 	bl	800f258 <SPI_EndRxTransaction>
 800ebf0:	1e03      	subs	r3, r0, #0
 800ebf2:	d002      	beq.n	800ebfa <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2220      	movs	r2, #32
 800ebf8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d004      	beq.n	800ec0c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800ec02:	2317      	movs	r3, #23
 800ec04:	18fb      	adds	r3, r7, r3
 800ec06:	2201      	movs	r2, #1
 800ec08:	701a      	strb	r2, [r3, #0]
 800ec0a:	e003      	b.n	800ec14 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	225d      	movs	r2, #93	@ 0x5d
 800ec10:	2101      	movs	r1, #1
 800ec12:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	225c      	movs	r2, #92	@ 0x5c
 800ec18:	2100      	movs	r1, #0
 800ec1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ec1c:	2317      	movs	r3, #23
 800ec1e:	18fb      	adds	r3, r7, r3
 800ec20:	781b      	ldrb	r3, [r3, #0]
}
 800ec22:	0018      	movs	r0, r3
 800ec24:	46bd      	mov	sp, r7
 800ec26:	b007      	add	sp, #28
 800ec28:	bd90      	pop	{r4, r7, pc}
 800ec2a:	46c0      	nop			@ (mov r8, r8)
 800ec2c:	ffffefff 	.word	0xffffefff
 800ec30:	ffffbfff 	.word	0xffffbfff

0800ec34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b08a      	sub	sp, #40	@ 0x28
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	607a      	str	r2, [r7, #4]
 800ec40:	001a      	movs	r2, r3
 800ec42:	1cbb      	adds	r3, r7, #2
 800ec44:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ec46:	2301      	movs	r3, #1
 800ec48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ec4a:	2323      	movs	r3, #35	@ 0x23
 800ec4c:	18fb      	adds	r3, r7, r3
 800ec4e:	2200      	movs	r2, #0
 800ec50:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	225c      	movs	r2, #92	@ 0x5c
 800ec56:	5c9b      	ldrb	r3, [r3, r2]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d101      	bne.n	800ec60 <HAL_SPI_TransmitReceive+0x2c>
 800ec5c:	2302      	movs	r3, #2
 800ec5e:	e1c4      	b.n	800efea <HAL_SPI_TransmitReceive+0x3b6>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	225c      	movs	r2, #92	@ 0x5c
 800ec64:	2101      	movs	r1, #1
 800ec66:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec68:	f7fd fb7e 	bl	800c368 <HAL_GetTick>
 800ec6c:	0003      	movs	r3, r0
 800ec6e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec70:	201b      	movs	r0, #27
 800ec72:	183b      	adds	r3, r7, r0
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	215d      	movs	r1, #93	@ 0x5d
 800ec78:	5c52      	ldrb	r2, [r2, r1]
 800ec7a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ec82:	2312      	movs	r3, #18
 800ec84:	18fb      	adds	r3, r7, r3
 800ec86:	1cba      	adds	r2, r7, #2
 800ec88:	8812      	ldrh	r2, [r2, #0]
 800ec8a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec8c:	183b      	adds	r3, r7, r0
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d011      	beq.n	800ecb8 <HAL_SPI_TransmitReceive+0x84>
 800ec94:	697a      	ldr	r2, [r7, #20]
 800ec96:	2382      	movs	r3, #130	@ 0x82
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d107      	bne.n	800ecae <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d103      	bne.n	800ecae <HAL_SPI_TransmitReceive+0x7a>
 800eca6:	183b      	adds	r3, r7, r0
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	2b04      	cmp	r3, #4
 800ecac:	d004      	beq.n	800ecb8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800ecae:	2323      	movs	r3, #35	@ 0x23
 800ecb0:	18fb      	adds	r3, r7, r3
 800ecb2:	2202      	movs	r2, #2
 800ecb4:	701a      	strb	r2, [r3, #0]
    goto error;
 800ecb6:	e191      	b.n	800efdc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d006      	beq.n	800eccc <HAL_SPI_TransmitReceive+0x98>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d003      	beq.n	800eccc <HAL_SPI_TransmitReceive+0x98>
 800ecc4:	1cbb      	adds	r3, r7, #2
 800ecc6:	881b      	ldrh	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d104      	bne.n	800ecd6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800eccc:	2323      	movs	r3, #35	@ 0x23
 800ecce:	18fb      	adds	r3, r7, r3
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	701a      	strb	r2, [r3, #0]
    goto error;
 800ecd4:	e182      	b.n	800efdc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	225d      	movs	r2, #93	@ 0x5d
 800ecda:	5c9b      	ldrb	r3, [r3, r2]
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	2b04      	cmp	r3, #4
 800ece0:	d003      	beq.n	800ecea <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	225d      	movs	r2, #93	@ 0x5d
 800ece6:	2105      	movs	r1, #5
 800ece8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2200      	movs	r2, #0
 800ecee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	1cba      	adds	r2, r7, #2
 800ecfa:	2146      	movs	r1, #70	@ 0x46
 800ecfc:	8812      	ldrh	r2, [r2, #0]
 800ecfe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	1cba      	adds	r2, r7, #2
 800ed04:	2144      	movs	r1, #68	@ 0x44
 800ed06:	8812      	ldrh	r2, [r2, #0]
 800ed08:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	1cba      	adds	r2, r7, #2
 800ed14:	8812      	ldrh	r2, [r2, #0]
 800ed16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	1cba      	adds	r2, r7, #2
 800ed1c:	8812      	ldrh	r2, [r2, #0]
 800ed1e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2200      	movs	r2, #0
 800ed24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	68da      	ldr	r2, [r3, #12]
 800ed30:	23e0      	movs	r3, #224	@ 0xe0
 800ed32:	00db      	lsls	r3, r3, #3
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d908      	bls.n	800ed4a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	685a      	ldr	r2, [r3, #4]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	49ac      	ldr	r1, [pc, #688]	@ (800eff4 <HAL_SPI_TransmitReceive+0x3c0>)
 800ed44:	400a      	ands	r2, r1
 800ed46:	605a      	str	r2, [r3, #4]
 800ed48:	e008      	b.n	800ed5c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	685a      	ldr	r2, [r3, #4]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2180      	movs	r1, #128	@ 0x80
 800ed56:	0149      	lsls	r1, r1, #5
 800ed58:	430a      	orrs	r2, r1
 800ed5a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2240      	movs	r2, #64	@ 0x40
 800ed64:	4013      	ands	r3, r2
 800ed66:	2b40      	cmp	r3, #64	@ 0x40
 800ed68:	d007      	beq.n	800ed7a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2140      	movs	r1, #64	@ 0x40
 800ed76:	430a      	orrs	r2, r1
 800ed78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	68da      	ldr	r2, [r3, #12]
 800ed7e:	23e0      	movs	r3, #224	@ 0xe0
 800ed80:	00db      	lsls	r3, r3, #3
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d800      	bhi.n	800ed88 <HAL_SPI_TransmitReceive+0x154>
 800ed86:	e083      	b.n	800ee90 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d005      	beq.n	800ed9c <HAL_SPI_TransmitReceive+0x168>
 800ed90:	2312      	movs	r3, #18
 800ed92:	18fb      	adds	r3, r7, r3
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d000      	beq.n	800ed9c <HAL_SPI_TransmitReceive+0x168>
 800ed9a:	e06d      	b.n	800ee78 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eda0:	881a      	ldrh	r2, [r3, #0]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edac:	1c9a      	adds	r2, r3, #2
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	3b01      	subs	r3, #1
 800edba:	b29a      	uxth	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edc0:	e05a      	b.n	800ee78 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	2202      	movs	r2, #2
 800edca:	4013      	ands	r3, r2
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d11b      	bne.n	800ee08 <HAL_SPI_TransmitReceive+0x1d4>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d016      	beq.n	800ee08 <HAL_SPI_TransmitReceive+0x1d4>
 800edda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d113      	bne.n	800ee08 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ede4:	881a      	ldrh	r2, [r3, #0]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edf0:	1c9a      	adds	r2, r3, #2
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	3b01      	subs	r3, #1
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee04:	2300      	movs	r3, #0
 800ee06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	689b      	ldr	r3, [r3, #8]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	4013      	ands	r3, r2
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d11c      	bne.n	800ee50 <HAL_SPI_TransmitReceive+0x21c>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2246      	movs	r2, #70	@ 0x46
 800ee1a:	5a9b      	ldrh	r3, [r3, r2]
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d016      	beq.n	800ee50 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	68da      	ldr	r2, [r3, #12]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee2c:	b292      	uxth	r2, r2
 800ee2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee34:	1c9a      	adds	r2, r3, #2
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2246      	movs	r2, #70	@ 0x46
 800ee3e:	5a9b      	ldrh	r3, [r3, r2]
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	3b01      	subs	r3, #1
 800ee44:	b299      	uxth	r1, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2246      	movs	r2, #70	@ 0x46
 800ee4a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ee50:	f7fd fa8a 	bl	800c368 <HAL_GetTick>
 800ee54:	0002      	movs	r2, r0
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d80b      	bhi.n	800ee78 <HAL_SPI_TransmitReceive+0x244>
 800ee60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee62:	3301      	adds	r3, #1
 800ee64:	d008      	beq.n	800ee78 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800ee66:	2323      	movs	r3, #35	@ 0x23
 800ee68:	18fb      	adds	r3, r7, r3
 800ee6a:	2203      	movs	r2, #3
 800ee6c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	225d      	movs	r2, #93	@ 0x5d
 800ee72:	2101      	movs	r1, #1
 800ee74:	5499      	strb	r1, [r3, r2]
        goto error;
 800ee76:	e0b1      	b.n	800efdc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d19f      	bne.n	800edc2 <HAL_SPI_TransmitReceive+0x18e>
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2246      	movs	r2, #70	@ 0x46
 800ee86:	5a9b      	ldrh	r3, [r3, r2]
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d199      	bne.n	800edc2 <HAL_SPI_TransmitReceive+0x18e>
 800ee8e:	e089      	b.n	800efa4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d005      	beq.n	800eea4 <HAL_SPI_TransmitReceive+0x270>
 800ee98:	2312      	movs	r3, #18
 800ee9a:	18fb      	adds	r3, r7, r3
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	d000      	beq.n	800eea4 <HAL_SPI_TransmitReceive+0x270>
 800eea2:	e074      	b.n	800ef8e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	330c      	adds	r3, #12
 800eeae:	7812      	ldrb	r2, [r2, #0]
 800eeb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	3b01      	subs	r3, #1
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eeca:	e060      	b.n	800ef8e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	2202      	movs	r2, #2
 800eed4:	4013      	ands	r3, r2
 800eed6:	2b02      	cmp	r3, #2
 800eed8:	d11c      	bne.n	800ef14 <HAL_SPI_TransmitReceive+0x2e0>
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eede:	b29b      	uxth	r3, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d017      	beq.n	800ef14 <HAL_SPI_TransmitReceive+0x2e0>
 800eee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d114      	bne.n	800ef14 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	330c      	adds	r3, #12
 800eef4:	7812      	ldrb	r2, [r2, #0]
 800eef6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eefc:	1c5a      	adds	r2, r3, #1
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ef10:	2300      	movs	r3, #0
 800ef12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	4013      	ands	r3, r2
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d11e      	bne.n	800ef60 <HAL_SPI_TransmitReceive+0x32c>
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2246      	movs	r2, #70	@ 0x46
 800ef26:	5a9b      	ldrh	r3, [r3, r2]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d018      	beq.n	800ef60 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	330c      	adds	r3, #12
 800ef34:	001a      	movs	r2, r3
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef3a:	7812      	ldrb	r2, [r2, #0]
 800ef3c:	b2d2      	uxtb	r2, r2
 800ef3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef44:	1c5a      	adds	r2, r3, #1
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2246      	movs	r2, #70	@ 0x46
 800ef4e:	5a9b      	ldrh	r3, [r3, r2]
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	3b01      	subs	r3, #1
 800ef54:	b299      	uxth	r1, r3
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2246      	movs	r2, #70	@ 0x46
 800ef5a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ef60:	f7fd fa02 	bl	800c368 <HAL_GetTick>
 800ef64:	0002      	movs	r2, r0
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d802      	bhi.n	800ef76 <HAL_SPI_TransmitReceive+0x342>
 800ef70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef72:	3301      	adds	r3, #1
 800ef74:	d102      	bne.n	800ef7c <HAL_SPI_TransmitReceive+0x348>
 800ef76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d108      	bne.n	800ef8e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800ef7c:	2323      	movs	r3, #35	@ 0x23
 800ef7e:	18fb      	adds	r3, r7, r3
 800ef80:	2203      	movs	r2, #3
 800ef82:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	225d      	movs	r2, #93	@ 0x5d
 800ef88:	2101      	movs	r1, #1
 800ef8a:	5499      	strb	r1, [r3, r2]
        goto error;
 800ef8c:	e026      	b.n	800efdc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d199      	bne.n	800eecc <HAL_SPI_TransmitReceive+0x298>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2246      	movs	r2, #70	@ 0x46
 800ef9c:	5a9b      	ldrh	r3, [r3, r2]
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d193      	bne.n	800eecc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800efa4:	69fa      	ldr	r2, [r7, #28]
 800efa6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	0018      	movs	r0, r3
 800efac:	f000 f9b2 	bl	800f314 <SPI_EndRxTxTransaction>
 800efb0:	1e03      	subs	r3, r0, #0
 800efb2:	d006      	beq.n	800efc2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800efb4:	2323      	movs	r3, #35	@ 0x23
 800efb6:	18fb      	adds	r3, r7, r3
 800efb8:	2201      	movs	r2, #1
 800efba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2220      	movs	r2, #32
 800efc0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d004      	beq.n	800efd4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800efca:	2323      	movs	r3, #35	@ 0x23
 800efcc:	18fb      	adds	r3, r7, r3
 800efce:	2201      	movs	r2, #1
 800efd0:	701a      	strb	r2, [r3, #0]
 800efd2:	e003      	b.n	800efdc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	225d      	movs	r2, #93	@ 0x5d
 800efd8:	2101      	movs	r1, #1
 800efda:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	225c      	movs	r2, #92	@ 0x5c
 800efe0:	2100      	movs	r1, #0
 800efe2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800efe4:	2323      	movs	r3, #35	@ 0x23
 800efe6:	18fb      	adds	r3, r7, r3
 800efe8:	781b      	ldrb	r3, [r3, #0]
}
 800efea:	0018      	movs	r0, r3
 800efec:	46bd      	mov	sp, r7
 800efee:	b00a      	add	sp, #40	@ 0x28
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	46c0      	nop			@ (mov r8, r8)
 800eff4:	ffffefff 	.word	0xffffefff

0800eff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b088      	sub	sp, #32
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	603b      	str	r3, [r7, #0]
 800f004:	1dfb      	adds	r3, r7, #7
 800f006:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f008:	f7fd f9ae 	bl	800c368 <HAL_GetTick>
 800f00c:	0002      	movs	r2, r0
 800f00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f010:	1a9b      	subs	r3, r3, r2
 800f012:	683a      	ldr	r2, [r7, #0]
 800f014:	18d3      	adds	r3, r2, r3
 800f016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f018:	f7fd f9a6 	bl	800c368 <HAL_GetTick>
 800f01c:	0003      	movs	r3, r0
 800f01e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f020:	4b3a      	ldr	r3, [pc, #232]	@ (800f10c <SPI_WaitFlagStateUntilTimeout+0x114>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	015b      	lsls	r3, r3, #5
 800f026:	0d1b      	lsrs	r3, r3, #20
 800f028:	69fa      	ldr	r2, [r7, #28]
 800f02a:	4353      	muls	r3, r2
 800f02c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f02e:	e058      	b.n	800f0e2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	3301      	adds	r3, #1
 800f034:	d055      	beq.n	800f0e2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f036:	f7fd f997 	bl	800c368 <HAL_GetTick>
 800f03a:	0002      	movs	r2, r0
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	69fa      	ldr	r2, [r7, #28]
 800f042:	429a      	cmp	r2, r3
 800f044:	d902      	bls.n	800f04c <SPI_WaitFlagStateUntilTimeout+0x54>
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d142      	bne.n	800f0d2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	685a      	ldr	r2, [r3, #4]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	21e0      	movs	r1, #224	@ 0xe0
 800f058:	438a      	bics	r2, r1
 800f05a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	685a      	ldr	r2, [r3, #4]
 800f060:	2382      	movs	r3, #130	@ 0x82
 800f062:	005b      	lsls	r3, r3, #1
 800f064:	429a      	cmp	r2, r3
 800f066:	d113      	bne.n	800f090 <SPI_WaitFlagStateUntilTimeout+0x98>
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	689a      	ldr	r2, [r3, #8]
 800f06c:	2380      	movs	r3, #128	@ 0x80
 800f06e:	021b      	lsls	r3, r3, #8
 800f070:	429a      	cmp	r2, r3
 800f072:	d005      	beq.n	800f080 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	689a      	ldr	r2, [r3, #8]
 800f078:	2380      	movs	r3, #128	@ 0x80
 800f07a:	00db      	lsls	r3, r3, #3
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d107      	bne.n	800f090 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2140      	movs	r1, #64	@ 0x40
 800f08c:	438a      	bics	r2, r1
 800f08e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f094:	2380      	movs	r3, #128	@ 0x80
 800f096:	019b      	lsls	r3, r3, #6
 800f098:	429a      	cmp	r2, r3
 800f09a:	d110      	bne.n	800f0be <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	491a      	ldr	r1, [pc, #104]	@ (800f110 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800f0a8:	400a      	ands	r2, r1
 800f0aa:	601a      	str	r2, [r3, #0]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	681a      	ldr	r2, [r3, #0]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2180      	movs	r1, #128	@ 0x80
 800f0b8:	0189      	lsls	r1, r1, #6
 800f0ba:	430a      	orrs	r2, r1
 800f0bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	225d      	movs	r2, #93	@ 0x5d
 800f0c2:	2101      	movs	r1, #1
 800f0c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	225c      	movs	r2, #92	@ 0x5c
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f0ce:	2303      	movs	r3, #3
 800f0d0:	e017      	b.n	800f102 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	3b01      	subs	r3, #1
 800f0e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	68ba      	ldr	r2, [r7, #8]
 800f0ea:	4013      	ands	r3, r2
 800f0ec:	68ba      	ldr	r2, [r7, #8]
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	425a      	negs	r2, r3
 800f0f2:	4153      	adcs	r3, r2
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	001a      	movs	r2, r3
 800f0f8:	1dfb      	adds	r3, r7, #7
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d197      	bne.n	800f030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	0018      	movs	r0, r3
 800f104:	46bd      	mov	sp, r7
 800f106:	b008      	add	sp, #32
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	46c0      	nop			@ (mov r8, r8)
 800f10c:	2000001c 	.word	0x2000001c
 800f110:	ffffdfff 	.word	0xffffdfff

0800f114 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b08a      	sub	sp, #40	@ 0x28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f122:	2317      	movs	r3, #23
 800f124:	18fb      	adds	r3, r7, r3
 800f126:	2200      	movs	r2, #0
 800f128:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f12a:	f7fd f91d 	bl	800c368 <HAL_GetTick>
 800f12e:	0002      	movs	r2, r0
 800f130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f132:	1a9b      	subs	r3, r3, r2
 800f134:	683a      	ldr	r2, [r7, #0]
 800f136:	18d3      	adds	r3, r2, r3
 800f138:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800f13a:	f7fd f915 	bl	800c368 <HAL_GetTick>
 800f13e:	0003      	movs	r3, r0
 800f140:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	330c      	adds	r3, #12
 800f148:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f14a:	4b41      	ldr	r3, [pc, #260]	@ (800f250 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	0013      	movs	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	189b      	adds	r3, r3, r2
 800f154:	00da      	lsls	r2, r3, #3
 800f156:	1ad3      	subs	r3, r2, r3
 800f158:	0d1b      	lsrs	r3, r3, #20
 800f15a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f15c:	4353      	muls	r3, r2
 800f15e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f160:	e068      	b.n	800f234 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f162:	68ba      	ldr	r2, [r7, #8]
 800f164:	23c0      	movs	r3, #192	@ 0xc0
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	429a      	cmp	r2, r3
 800f16a:	d10a      	bne.n	800f182 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d107      	bne.n	800f182 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	b2da      	uxtb	r2, r3
 800f178:	2117      	movs	r1, #23
 800f17a:	187b      	adds	r3, r7, r1
 800f17c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f17e:	187b      	adds	r3, r7, r1
 800f180:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	3301      	adds	r3, #1
 800f186:	d055      	beq.n	800f234 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f188:	f7fd f8ee 	bl	800c368 <HAL_GetTick>
 800f18c:	0002      	movs	r2, r0
 800f18e:	6a3b      	ldr	r3, [r7, #32]
 800f190:	1ad3      	subs	r3, r2, r3
 800f192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f194:	429a      	cmp	r2, r3
 800f196:	d902      	bls.n	800f19e <SPI_WaitFifoStateUntilTimeout+0x8a>
 800f198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d142      	bne.n	800f224 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	685a      	ldr	r2, [r3, #4]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	21e0      	movs	r1, #224	@ 0xe0
 800f1aa:	438a      	bics	r2, r1
 800f1ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	685a      	ldr	r2, [r3, #4]
 800f1b2:	2382      	movs	r3, #130	@ 0x82
 800f1b4:	005b      	lsls	r3, r3, #1
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d113      	bne.n	800f1e2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	689a      	ldr	r2, [r3, #8]
 800f1be:	2380      	movs	r3, #128	@ 0x80
 800f1c0:	021b      	lsls	r3, r3, #8
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d005      	beq.n	800f1d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	689a      	ldr	r2, [r3, #8]
 800f1ca:	2380      	movs	r3, #128	@ 0x80
 800f1cc:	00db      	lsls	r3, r3, #3
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d107      	bne.n	800f1e2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2140      	movs	r1, #64	@ 0x40
 800f1de:	438a      	bics	r2, r1
 800f1e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f1e6:	2380      	movs	r3, #128	@ 0x80
 800f1e8:	019b      	lsls	r3, r3, #6
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d110      	bne.n	800f210 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4916      	ldr	r1, [pc, #88]	@ (800f254 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800f1fa:	400a      	ands	r2, r1
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2180      	movs	r1, #128	@ 0x80
 800f20a:	0189      	lsls	r1, r1, #6
 800f20c:	430a      	orrs	r2, r1
 800f20e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	225d      	movs	r2, #93	@ 0x5d
 800f214:	2101      	movs	r1, #1
 800f216:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	225c      	movs	r2, #92	@ 0x5c
 800f21c:	2100      	movs	r1, #0
 800f21e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f220:	2303      	movs	r3, #3
 800f222:	e010      	b.n	800f246 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d101      	bne.n	800f22e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800f22a:	2300      	movs	r3, #0
 800f22c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	3b01      	subs	r3, #1
 800f232:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	4013      	ands	r3, r2
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	429a      	cmp	r2, r3
 800f242:	d18e      	bne.n	800f162 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800f244:	2300      	movs	r3, #0
}
 800f246:	0018      	movs	r0, r3
 800f248:	46bd      	mov	sp, r7
 800f24a:	b00a      	add	sp, #40	@ 0x28
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	46c0      	nop			@ (mov r8, r8)
 800f250:	2000001c 	.word	0x2000001c
 800f254:	ffffdfff 	.word	0xffffdfff

0800f258 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b086      	sub	sp, #24
 800f25c:	af02      	add	r7, sp, #8
 800f25e:	60f8      	str	r0, [r7, #12]
 800f260:	60b9      	str	r1, [r7, #8]
 800f262:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	685a      	ldr	r2, [r3, #4]
 800f268:	2382      	movs	r3, #130	@ 0x82
 800f26a:	005b      	lsls	r3, r3, #1
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d113      	bne.n	800f298 <SPI_EndRxTransaction+0x40>
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	689a      	ldr	r2, [r3, #8]
 800f274:	2380      	movs	r3, #128	@ 0x80
 800f276:	021b      	lsls	r3, r3, #8
 800f278:	429a      	cmp	r2, r3
 800f27a:	d005      	beq.n	800f288 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	689a      	ldr	r2, [r3, #8]
 800f280:	2380      	movs	r3, #128	@ 0x80
 800f282:	00db      	lsls	r3, r3, #3
 800f284:	429a      	cmp	r2, r3
 800f286:	d107      	bne.n	800f298 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2140      	movs	r1, #64	@ 0x40
 800f294:	438a      	bics	r2, r1
 800f296:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f298:	68ba      	ldr	r2, [r7, #8]
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	0013      	movs	r3, r2
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	2180      	movs	r1, #128	@ 0x80
 800f2a6:	f7ff fea7 	bl	800eff8 <SPI_WaitFlagStateUntilTimeout>
 800f2aa:	1e03      	subs	r3, r0, #0
 800f2ac:	d007      	beq.n	800f2be <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2b2:	2220      	movs	r2, #32
 800f2b4:	431a      	orrs	r2, r3
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	e026      	b.n	800f30c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	685a      	ldr	r2, [r3, #4]
 800f2c2:	2382      	movs	r3, #130	@ 0x82
 800f2c4:	005b      	lsls	r3, r3, #1
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d11f      	bne.n	800f30a <SPI_EndRxTransaction+0xb2>
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	689a      	ldr	r2, [r3, #8]
 800f2ce:	2380      	movs	r3, #128	@ 0x80
 800f2d0:	021b      	lsls	r3, r3, #8
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d005      	beq.n	800f2e2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	689a      	ldr	r2, [r3, #8]
 800f2da:	2380      	movs	r3, #128	@ 0x80
 800f2dc:	00db      	lsls	r3, r3, #3
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d113      	bne.n	800f30a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f2e2:	68ba      	ldr	r2, [r7, #8]
 800f2e4:	23c0      	movs	r3, #192	@ 0xc0
 800f2e6:	00d9      	lsls	r1, r3, #3
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	9300      	str	r3, [sp, #0]
 800f2ee:	0013      	movs	r3, r2
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	f7ff ff0f 	bl	800f114 <SPI_WaitFifoStateUntilTimeout>
 800f2f6:	1e03      	subs	r3, r0, #0
 800f2f8:	d007      	beq.n	800f30a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2fe:	2220      	movs	r2, #32
 800f300:	431a      	orrs	r2, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800f306:	2303      	movs	r3, #3
 800f308:	e000      	b.n	800f30c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	0018      	movs	r0, r3
 800f30e:	46bd      	mov	sp, r7
 800f310:	b004      	add	sp, #16
 800f312:	bd80      	pop	{r7, pc}

0800f314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af02      	add	r7, sp, #8
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f320:	68ba      	ldr	r2, [r7, #8]
 800f322:	23c0      	movs	r3, #192	@ 0xc0
 800f324:	0159      	lsls	r1, r3, #5
 800f326:	68f8      	ldr	r0, [r7, #12]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	0013      	movs	r3, r2
 800f32e:	2200      	movs	r2, #0
 800f330:	f7ff fef0 	bl	800f114 <SPI_WaitFifoStateUntilTimeout>
 800f334:	1e03      	subs	r3, r0, #0
 800f336:	d007      	beq.n	800f348 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f33c:	2220      	movs	r2, #32
 800f33e:	431a      	orrs	r2, r3
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f344:	2303      	movs	r3, #3
 800f346:	e027      	b.n	800f398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	68f8      	ldr	r0, [r7, #12]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	0013      	movs	r3, r2
 800f352:	2200      	movs	r2, #0
 800f354:	2180      	movs	r1, #128	@ 0x80
 800f356:	f7ff fe4f 	bl	800eff8 <SPI_WaitFlagStateUntilTimeout>
 800f35a:	1e03      	subs	r3, r0, #0
 800f35c:	d007      	beq.n	800f36e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f362:	2220      	movs	r2, #32
 800f364:	431a      	orrs	r2, r3
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f36a:	2303      	movs	r3, #3
 800f36c:	e014      	b.n	800f398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f36e:	68ba      	ldr	r2, [r7, #8]
 800f370:	23c0      	movs	r3, #192	@ 0xc0
 800f372:	00d9      	lsls	r1, r3, #3
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	0013      	movs	r3, r2
 800f37c:	2200      	movs	r2, #0
 800f37e:	f7ff fec9 	bl	800f114 <SPI_WaitFifoStateUntilTimeout>
 800f382:	1e03      	subs	r3, r0, #0
 800f384:	d007      	beq.n	800f396 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f38a:	2220      	movs	r2, #32
 800f38c:	431a      	orrs	r2, r3
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f392:	2303      	movs	r3, #3
 800f394:	e000      	b.n	800f398 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f396:	2300      	movs	r3, #0
}
 800f398:	0018      	movs	r0, r3
 800f39a:	46bd      	mov	sp, r7
 800f39c:	b004      	add	sp, #16
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d101      	bne.n	800f3b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e046      	b.n	800f440 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2288      	movs	r2, #136	@ 0x88
 800f3b6:	589b      	ldr	r3, [r3, r2]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d107      	bne.n	800f3cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2284      	movs	r2, #132	@ 0x84
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	0018      	movs	r0, r3
 800f3c8:	f7fc fdb0 	bl	800bf2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2288      	movs	r2, #136	@ 0x88
 800f3d0:	2124      	movs	r1, #36	@ 0x24
 800f3d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2101      	movs	r1, #1
 800f3e0:	438a      	bics	r2, r1
 800f3e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d003      	beq.n	800f3f4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	0018      	movs	r0, r3
 800f3f0:	f000 fc74 	bl	800fcdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	0018      	movs	r0, r3
 800f3f8:	f000 f9b2 	bl	800f760 <UART_SetConfig>
 800f3fc:	0003      	movs	r3, r0
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d101      	bne.n	800f406 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800f402:	2301      	movs	r3, #1
 800f404:	e01c      	b.n	800f440 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	685a      	ldr	r2, [r3, #4]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	490d      	ldr	r1, [pc, #52]	@ (800f448 <HAL_UART_Init+0xa8>)
 800f412:	400a      	ands	r2, r1
 800f414:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	689a      	ldr	r2, [r3, #8]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	212a      	movs	r1, #42	@ 0x2a
 800f422:	438a      	bics	r2, r1
 800f424:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2101      	movs	r1, #1
 800f432:	430a      	orrs	r2, r1
 800f434:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	0018      	movs	r0, r3
 800f43a:	f000 fd03 	bl	800fe44 <UART_CheckIdleState>
 800f43e:	0003      	movs	r3, r0
}
 800f440:	0018      	movs	r0, r3
 800f442:	46bd      	mov	sp, r7
 800f444:	b002      	add	sp, #8
 800f446:	bd80      	pop	{r7, pc}
 800f448:	ffffb7ff 	.word	0xffffb7ff

0800f44c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b08a      	sub	sp, #40	@ 0x28
 800f450:	af02      	add	r7, sp, #8
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	603b      	str	r3, [r7, #0]
 800f458:	1dbb      	adds	r3, r7, #6
 800f45a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2288      	movs	r2, #136	@ 0x88
 800f460:	589b      	ldr	r3, [r3, r2]
 800f462:	2b20      	cmp	r3, #32
 800f464:	d000      	beq.n	800f468 <HAL_UART_Transmit+0x1c>
 800f466:	e090      	b.n	800f58a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d003      	beq.n	800f476 <HAL_UART_Transmit+0x2a>
 800f46e:	1dbb      	adds	r3, r7, #6
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d101      	bne.n	800f47a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800f476:	2301      	movs	r3, #1
 800f478:	e088      	b.n	800f58c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	689a      	ldr	r2, [r3, #8]
 800f47e:	2380      	movs	r3, #128	@ 0x80
 800f480:	015b      	lsls	r3, r3, #5
 800f482:	429a      	cmp	r2, r3
 800f484:	d109      	bne.n	800f49a <HAL_UART_Transmit+0x4e>
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d105      	bne.n	800f49a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	2201      	movs	r2, #1
 800f492:	4013      	ands	r3, r2
 800f494:	d001      	beq.n	800f49a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800f496:	2301      	movs	r3, #1
 800f498:	e078      	b.n	800f58c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2290      	movs	r2, #144	@ 0x90
 800f49e:	2100      	movs	r1, #0
 800f4a0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2288      	movs	r2, #136	@ 0x88
 800f4a6:	2121      	movs	r1, #33	@ 0x21
 800f4a8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f4aa:	f7fc ff5d 	bl	800c368 <HAL_GetTick>
 800f4ae:	0003      	movs	r3, r0
 800f4b0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	1dba      	adds	r2, r7, #6
 800f4b6:	2154      	movs	r1, #84	@ 0x54
 800f4b8:	8812      	ldrh	r2, [r2, #0]
 800f4ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	1dba      	adds	r2, r7, #6
 800f4c0:	2156      	movs	r1, #86	@ 0x56
 800f4c2:	8812      	ldrh	r2, [r2, #0]
 800f4c4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	689a      	ldr	r2, [r3, #8]
 800f4ca:	2380      	movs	r3, #128	@ 0x80
 800f4cc:	015b      	lsls	r3, r3, #5
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d108      	bne.n	800f4e4 <HAL_UART_Transmit+0x98>
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	691b      	ldr	r3, [r3, #16]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d104      	bne.n	800f4e4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	61bb      	str	r3, [r7, #24]
 800f4e2:	e003      	b.n	800f4ec <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f4ec:	e030      	b.n	800f550 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f4ee:	697a      	ldr	r2, [r7, #20]
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	0013      	movs	r3, r2
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	2180      	movs	r1, #128	@ 0x80
 800f4fc:	f000 fd4c 	bl	800ff98 <UART_WaitOnFlagUntilTimeout>
 800f500:	1e03      	subs	r3, r0, #0
 800f502:	d005      	beq.n	800f510 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2288      	movs	r2, #136	@ 0x88
 800f508:	2120      	movs	r1, #32
 800f50a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f50c:	2303      	movs	r3, #3
 800f50e:	e03d      	b.n	800f58c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d10b      	bne.n	800f52e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	001a      	movs	r2, r3
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	05d2      	lsls	r2, r2, #23
 800f522:	0dd2      	lsrs	r2, r2, #23
 800f524:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	3302      	adds	r3, #2
 800f52a:	61bb      	str	r3, [r7, #24]
 800f52c:	e007      	b.n	800f53e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	781a      	ldrb	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	3301      	adds	r3, #1
 800f53c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2256      	movs	r2, #86	@ 0x56
 800f542:	5a9b      	ldrh	r3, [r3, r2]
 800f544:	b29b      	uxth	r3, r3
 800f546:	3b01      	subs	r3, #1
 800f548:	b299      	uxth	r1, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2256      	movs	r2, #86	@ 0x56
 800f54e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2256      	movs	r2, #86	@ 0x56
 800f554:	5a9b      	ldrh	r3, [r3, r2]
 800f556:	b29b      	uxth	r3, r3
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1c8      	bne.n	800f4ee <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f55c:	697a      	ldr	r2, [r7, #20]
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	0013      	movs	r3, r2
 800f566:	2200      	movs	r2, #0
 800f568:	2140      	movs	r1, #64	@ 0x40
 800f56a:	f000 fd15 	bl	800ff98 <UART_WaitOnFlagUntilTimeout>
 800f56e:	1e03      	subs	r3, r0, #0
 800f570:	d005      	beq.n	800f57e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2288      	movs	r2, #136	@ 0x88
 800f576:	2120      	movs	r1, #32
 800f578:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800f57a:	2303      	movs	r3, #3
 800f57c:	e006      	b.n	800f58c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2288      	movs	r2, #136	@ 0x88
 800f582:	2120      	movs	r1, #32
 800f584:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800f586:	2300      	movs	r3, #0
 800f588:	e000      	b.n	800f58c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800f58a:	2302      	movs	r3, #2
  }
}
 800f58c:	0018      	movs	r0, r3
 800f58e:	46bd      	mov	sp, r7
 800f590:	b008      	add	sp, #32
 800f592:	bd80      	pop	{r7, pc}

0800f594 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b08a      	sub	sp, #40	@ 0x28
 800f598:	af02      	add	r7, sp, #8
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	603b      	str	r3, [r7, #0]
 800f5a0:	1dbb      	adds	r3, r7, #6
 800f5a2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	228c      	movs	r2, #140	@ 0x8c
 800f5a8:	589b      	ldr	r3, [r3, r2]
 800f5aa:	2b20      	cmp	r3, #32
 800f5ac:	d000      	beq.n	800f5b0 <HAL_UART_Receive+0x1c>
 800f5ae:	e0d0      	b.n	800f752 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d003      	beq.n	800f5be <HAL_UART_Receive+0x2a>
 800f5b6:	1dbb      	adds	r3, r7, #6
 800f5b8:	881b      	ldrh	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d101      	bne.n	800f5c2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e0c8      	b.n	800f754 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	689a      	ldr	r2, [r3, #8]
 800f5c6:	2380      	movs	r3, #128	@ 0x80
 800f5c8:	015b      	lsls	r3, r3, #5
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d109      	bne.n	800f5e2 <HAL_UART_Receive+0x4e>
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	691b      	ldr	r3, [r3, #16]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d105      	bne.n	800f5e2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2201      	movs	r2, #1
 800f5da:	4013      	ands	r3, r2
 800f5dc:	d001      	beq.n	800f5e2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e0b8      	b.n	800f754 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2290      	movs	r2, #144	@ 0x90
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	228c      	movs	r2, #140	@ 0x8c
 800f5ee:	2122      	movs	r1, #34	@ 0x22
 800f5f0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f5f8:	f7fc feb6 	bl	800c368 <HAL_GetTick>
 800f5fc:	0003      	movs	r3, r0
 800f5fe:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	1dba      	adds	r2, r7, #6
 800f604:	215c      	movs	r1, #92	@ 0x5c
 800f606:	8812      	ldrh	r2, [r2, #0]
 800f608:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	1dba      	adds	r2, r7, #6
 800f60e:	215e      	movs	r1, #94	@ 0x5e
 800f610:	8812      	ldrh	r2, [r2, #0]
 800f612:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	689a      	ldr	r2, [r3, #8]
 800f618:	2380      	movs	r3, #128	@ 0x80
 800f61a:	015b      	lsls	r3, r3, #5
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d10d      	bne.n	800f63c <HAL_UART_Receive+0xa8>
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	691b      	ldr	r3, [r3, #16]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d104      	bne.n	800f632 <HAL_UART_Receive+0x9e>
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2260      	movs	r2, #96	@ 0x60
 800f62c:	494b      	ldr	r1, [pc, #300]	@ (800f75c <HAL_UART_Receive+0x1c8>)
 800f62e:	5299      	strh	r1, [r3, r2]
 800f630:	e02e      	b.n	800f690 <HAL_UART_Receive+0xfc>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2260      	movs	r2, #96	@ 0x60
 800f636:	21ff      	movs	r1, #255	@ 0xff
 800f638:	5299      	strh	r1, [r3, r2]
 800f63a:	e029      	b.n	800f690 <HAL_UART_Receive+0xfc>
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	689b      	ldr	r3, [r3, #8]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d10d      	bne.n	800f660 <HAL_UART_Receive+0xcc>
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	691b      	ldr	r3, [r3, #16]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d104      	bne.n	800f656 <HAL_UART_Receive+0xc2>
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2260      	movs	r2, #96	@ 0x60
 800f650:	21ff      	movs	r1, #255	@ 0xff
 800f652:	5299      	strh	r1, [r3, r2]
 800f654:	e01c      	b.n	800f690 <HAL_UART_Receive+0xfc>
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2260      	movs	r2, #96	@ 0x60
 800f65a:	217f      	movs	r1, #127	@ 0x7f
 800f65c:	5299      	strh	r1, [r3, r2]
 800f65e:	e017      	b.n	800f690 <HAL_UART_Receive+0xfc>
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	689a      	ldr	r2, [r3, #8]
 800f664:	2380      	movs	r3, #128	@ 0x80
 800f666:	055b      	lsls	r3, r3, #21
 800f668:	429a      	cmp	r2, r3
 800f66a:	d10d      	bne.n	800f688 <HAL_UART_Receive+0xf4>
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	691b      	ldr	r3, [r3, #16]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d104      	bne.n	800f67e <HAL_UART_Receive+0xea>
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2260      	movs	r2, #96	@ 0x60
 800f678:	217f      	movs	r1, #127	@ 0x7f
 800f67a:	5299      	strh	r1, [r3, r2]
 800f67c:	e008      	b.n	800f690 <HAL_UART_Receive+0xfc>
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2260      	movs	r2, #96	@ 0x60
 800f682:	213f      	movs	r1, #63	@ 0x3f
 800f684:	5299      	strh	r1, [r3, r2]
 800f686:	e003      	b.n	800f690 <HAL_UART_Receive+0xfc>
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2260      	movs	r2, #96	@ 0x60
 800f68c:	2100      	movs	r1, #0
 800f68e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800f690:	2312      	movs	r3, #18
 800f692:	18fb      	adds	r3, r7, r3
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	2160      	movs	r1, #96	@ 0x60
 800f698:	5a52      	ldrh	r2, [r2, r1]
 800f69a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	689a      	ldr	r2, [r3, #8]
 800f6a0:	2380      	movs	r3, #128	@ 0x80
 800f6a2:	015b      	lsls	r3, r3, #5
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d108      	bne.n	800f6ba <HAL_UART_Receive+0x126>
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d104      	bne.n	800f6ba <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	61bb      	str	r3, [r7, #24]
 800f6b8:	e003      	b.n	800f6c2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f6c2:	e03a      	b.n	800f73a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f6c4:	697a      	ldr	r2, [r7, #20]
 800f6c6:	68f8      	ldr	r0, [r7, #12]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	9300      	str	r3, [sp, #0]
 800f6cc:	0013      	movs	r3, r2
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	2120      	movs	r1, #32
 800f6d2:	f000 fc61 	bl	800ff98 <UART_WaitOnFlagUntilTimeout>
 800f6d6:	1e03      	subs	r3, r0, #0
 800f6d8:	d005      	beq.n	800f6e6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	228c      	movs	r2, #140	@ 0x8c
 800f6de:	2120      	movs	r1, #32
 800f6e0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f6e2:	2303      	movs	r3, #3
 800f6e4:	e036      	b.n	800f754 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800f6e6:	69fb      	ldr	r3, [r7, #28]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d10e      	bne.n	800f70a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	2212      	movs	r2, #18
 800f6f6:	18ba      	adds	r2, r7, r2
 800f6f8:	8812      	ldrh	r2, [r2, #0]
 800f6fa:	4013      	ands	r3, r2
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	3302      	adds	r3, #2
 800f706:	61bb      	str	r3, [r7, #24]
 800f708:	e00e      	b.n	800f728 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f710:	b2db      	uxtb	r3, r3
 800f712:	2212      	movs	r2, #18
 800f714:	18ba      	adds	r2, r7, r2
 800f716:	8812      	ldrh	r2, [r2, #0]
 800f718:	b2d2      	uxtb	r2, r2
 800f71a:	4013      	ands	r3, r2
 800f71c:	b2da      	uxtb	r2, r3
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	3301      	adds	r3, #1
 800f726:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	225e      	movs	r2, #94	@ 0x5e
 800f72c:	5a9b      	ldrh	r3, [r3, r2]
 800f72e:	b29b      	uxth	r3, r3
 800f730:	3b01      	subs	r3, #1
 800f732:	b299      	uxth	r1, r3
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	225e      	movs	r2, #94	@ 0x5e
 800f738:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	225e      	movs	r2, #94	@ 0x5e
 800f73e:	5a9b      	ldrh	r3, [r3, r2]
 800f740:	b29b      	uxth	r3, r3
 800f742:	2b00      	cmp	r3, #0
 800f744:	d1be      	bne.n	800f6c4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	228c      	movs	r2, #140	@ 0x8c
 800f74a:	2120      	movs	r1, #32
 800f74c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800f74e:	2300      	movs	r3, #0
 800f750:	e000      	b.n	800f754 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800f752:	2302      	movs	r3, #2
  }
}
 800f754:	0018      	movs	r0, r3
 800f756:	46bd      	mov	sp, r7
 800f758:	b008      	add	sp, #32
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	000001ff 	.word	0x000001ff

0800f760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f760:	b5b0      	push	{r4, r5, r7, lr}
 800f762:	b090      	sub	sp, #64	@ 0x40
 800f764:	af00      	add	r7, sp, #0
 800f766:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f768:	231a      	movs	r3, #26
 800f76a:	2220      	movs	r2, #32
 800f76c:	189b      	adds	r3, r3, r2
 800f76e:	19db      	adds	r3, r3, r7
 800f770:	2200      	movs	r2, #0
 800f772:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f776:	689a      	ldr	r2, [r3, #8]
 800f778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	431a      	orrs	r2, r3
 800f77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f780:	695b      	ldr	r3, [r3, #20]
 800f782:	431a      	orrs	r2, r3
 800f784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f786:	69db      	ldr	r3, [r3, #28]
 800f788:	4313      	orrs	r3, r2
 800f78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4aaf      	ldr	r2, [pc, #700]	@ (800fa50 <UART_SetConfig+0x2f0>)
 800f794:	4013      	ands	r3, r2
 800f796:	0019      	movs	r1, r3
 800f798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f79e:	430b      	orrs	r3, r1
 800f7a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	4aaa      	ldr	r2, [pc, #680]	@ (800fa54 <UART_SetConfig+0x2f4>)
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	0018      	movs	r0, r3
 800f7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b0:	68d9      	ldr	r1, [r3, #12]
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	0003      	movs	r3, r0
 800f7b8:	430b      	orrs	r3, r1
 800f7ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7be:	699b      	ldr	r3, [r3, #24]
 800f7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4aa4      	ldr	r2, [pc, #656]	@ (800fa58 <UART_SetConfig+0x2f8>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d004      	beq.n	800f7d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ce:	6a1b      	ldr	r3, [r3, #32]
 800f7d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	689b      	ldr	r3, [r3, #8]
 800f7dc:	4a9f      	ldr	r2, [pc, #636]	@ (800fa5c <UART_SetConfig+0x2fc>)
 800f7de:	4013      	ands	r3, r2
 800f7e0:	0019      	movs	r1, r3
 800f7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e4:	681a      	ldr	r2, [r3, #0]
 800f7e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7e8:	430b      	orrs	r3, r1
 800f7ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7f2:	220f      	movs	r2, #15
 800f7f4:	4393      	bics	r3, r2
 800f7f6:	0018      	movs	r0, r3
 800f7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	0003      	movs	r3, r0
 800f802:	430b      	orrs	r3, r1
 800f804:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a95      	ldr	r2, [pc, #596]	@ (800fa60 <UART_SetConfig+0x300>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d131      	bne.n	800f874 <UART_SetConfig+0x114>
 800f810:	4b94      	ldr	r3, [pc, #592]	@ (800fa64 <UART_SetConfig+0x304>)
 800f812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f814:	2203      	movs	r2, #3
 800f816:	4013      	ands	r3, r2
 800f818:	2b03      	cmp	r3, #3
 800f81a:	d01d      	beq.n	800f858 <UART_SetConfig+0xf8>
 800f81c:	d823      	bhi.n	800f866 <UART_SetConfig+0x106>
 800f81e:	2b02      	cmp	r3, #2
 800f820:	d00c      	beq.n	800f83c <UART_SetConfig+0xdc>
 800f822:	d820      	bhi.n	800f866 <UART_SetConfig+0x106>
 800f824:	2b00      	cmp	r3, #0
 800f826:	d002      	beq.n	800f82e <UART_SetConfig+0xce>
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d00e      	beq.n	800f84a <UART_SetConfig+0xea>
 800f82c:	e01b      	b.n	800f866 <UART_SetConfig+0x106>
 800f82e:	231b      	movs	r3, #27
 800f830:	2220      	movs	r2, #32
 800f832:	189b      	adds	r3, r3, r2
 800f834:	19db      	adds	r3, r3, r7
 800f836:	2200      	movs	r2, #0
 800f838:	701a      	strb	r2, [r3, #0]
 800f83a:	e0b4      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f83c:	231b      	movs	r3, #27
 800f83e:	2220      	movs	r2, #32
 800f840:	189b      	adds	r3, r3, r2
 800f842:	19db      	adds	r3, r3, r7
 800f844:	2202      	movs	r2, #2
 800f846:	701a      	strb	r2, [r3, #0]
 800f848:	e0ad      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f84a:	231b      	movs	r3, #27
 800f84c:	2220      	movs	r2, #32
 800f84e:	189b      	adds	r3, r3, r2
 800f850:	19db      	adds	r3, r3, r7
 800f852:	2204      	movs	r2, #4
 800f854:	701a      	strb	r2, [r3, #0]
 800f856:	e0a6      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f858:	231b      	movs	r3, #27
 800f85a:	2220      	movs	r2, #32
 800f85c:	189b      	adds	r3, r3, r2
 800f85e:	19db      	adds	r3, r3, r7
 800f860:	2208      	movs	r2, #8
 800f862:	701a      	strb	r2, [r3, #0]
 800f864:	e09f      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f866:	231b      	movs	r3, #27
 800f868:	2220      	movs	r2, #32
 800f86a:	189b      	adds	r3, r3, r2
 800f86c:	19db      	adds	r3, r3, r7
 800f86e:	2210      	movs	r2, #16
 800f870:	701a      	strb	r2, [r3, #0]
 800f872:	e098      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a7b      	ldr	r2, [pc, #492]	@ (800fa68 <UART_SetConfig+0x308>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d131      	bne.n	800f8e2 <UART_SetConfig+0x182>
 800f87e:	4b79      	ldr	r3, [pc, #484]	@ (800fa64 <UART_SetConfig+0x304>)
 800f880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f882:	220c      	movs	r2, #12
 800f884:	4013      	ands	r3, r2
 800f886:	2b0c      	cmp	r3, #12
 800f888:	d01d      	beq.n	800f8c6 <UART_SetConfig+0x166>
 800f88a:	d823      	bhi.n	800f8d4 <UART_SetConfig+0x174>
 800f88c:	2b08      	cmp	r3, #8
 800f88e:	d00c      	beq.n	800f8aa <UART_SetConfig+0x14a>
 800f890:	d820      	bhi.n	800f8d4 <UART_SetConfig+0x174>
 800f892:	2b00      	cmp	r3, #0
 800f894:	d002      	beq.n	800f89c <UART_SetConfig+0x13c>
 800f896:	2b04      	cmp	r3, #4
 800f898:	d00e      	beq.n	800f8b8 <UART_SetConfig+0x158>
 800f89a:	e01b      	b.n	800f8d4 <UART_SetConfig+0x174>
 800f89c:	231b      	movs	r3, #27
 800f89e:	2220      	movs	r2, #32
 800f8a0:	189b      	adds	r3, r3, r2
 800f8a2:	19db      	adds	r3, r3, r7
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	701a      	strb	r2, [r3, #0]
 800f8a8:	e07d      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f8aa:	231b      	movs	r3, #27
 800f8ac:	2220      	movs	r2, #32
 800f8ae:	189b      	adds	r3, r3, r2
 800f8b0:	19db      	adds	r3, r3, r7
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	701a      	strb	r2, [r3, #0]
 800f8b6:	e076      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f8b8:	231b      	movs	r3, #27
 800f8ba:	2220      	movs	r2, #32
 800f8bc:	189b      	adds	r3, r3, r2
 800f8be:	19db      	adds	r3, r3, r7
 800f8c0:	2204      	movs	r2, #4
 800f8c2:	701a      	strb	r2, [r3, #0]
 800f8c4:	e06f      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f8c6:	231b      	movs	r3, #27
 800f8c8:	2220      	movs	r2, #32
 800f8ca:	189b      	adds	r3, r3, r2
 800f8cc:	19db      	adds	r3, r3, r7
 800f8ce:	2208      	movs	r2, #8
 800f8d0:	701a      	strb	r2, [r3, #0]
 800f8d2:	e068      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f8d4:	231b      	movs	r3, #27
 800f8d6:	2220      	movs	r2, #32
 800f8d8:	189b      	adds	r3, r3, r2
 800f8da:	19db      	adds	r3, r3, r7
 800f8dc:	2210      	movs	r2, #16
 800f8de:	701a      	strb	r2, [r3, #0]
 800f8e0:	e061      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4a61      	ldr	r2, [pc, #388]	@ (800fa6c <UART_SetConfig+0x30c>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d106      	bne.n	800f8fa <UART_SetConfig+0x19a>
 800f8ec:	231b      	movs	r3, #27
 800f8ee:	2220      	movs	r2, #32
 800f8f0:	189b      	adds	r3, r3, r2
 800f8f2:	19db      	adds	r3, r3, r7
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	701a      	strb	r2, [r3, #0]
 800f8f8:	e055      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a5c      	ldr	r2, [pc, #368]	@ (800fa70 <UART_SetConfig+0x310>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d106      	bne.n	800f912 <UART_SetConfig+0x1b2>
 800f904:	231b      	movs	r3, #27
 800f906:	2220      	movs	r2, #32
 800f908:	189b      	adds	r3, r3, r2
 800f90a:	19db      	adds	r3, r3, r7
 800f90c:	2200      	movs	r2, #0
 800f90e:	701a      	strb	r2, [r3, #0]
 800f910:	e049      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	4a50      	ldr	r2, [pc, #320]	@ (800fa58 <UART_SetConfig+0x2f8>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d13e      	bne.n	800f99a <UART_SetConfig+0x23a>
 800f91c:	4b51      	ldr	r3, [pc, #324]	@ (800fa64 <UART_SetConfig+0x304>)
 800f91e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f920:	23c0      	movs	r3, #192	@ 0xc0
 800f922:	011b      	lsls	r3, r3, #4
 800f924:	4013      	ands	r3, r2
 800f926:	22c0      	movs	r2, #192	@ 0xc0
 800f928:	0112      	lsls	r2, r2, #4
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d027      	beq.n	800f97e <UART_SetConfig+0x21e>
 800f92e:	22c0      	movs	r2, #192	@ 0xc0
 800f930:	0112      	lsls	r2, r2, #4
 800f932:	4293      	cmp	r3, r2
 800f934:	d82a      	bhi.n	800f98c <UART_SetConfig+0x22c>
 800f936:	2280      	movs	r2, #128	@ 0x80
 800f938:	0112      	lsls	r2, r2, #4
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d011      	beq.n	800f962 <UART_SetConfig+0x202>
 800f93e:	2280      	movs	r2, #128	@ 0x80
 800f940:	0112      	lsls	r2, r2, #4
 800f942:	4293      	cmp	r3, r2
 800f944:	d822      	bhi.n	800f98c <UART_SetConfig+0x22c>
 800f946:	2b00      	cmp	r3, #0
 800f948:	d004      	beq.n	800f954 <UART_SetConfig+0x1f4>
 800f94a:	2280      	movs	r2, #128	@ 0x80
 800f94c:	00d2      	lsls	r2, r2, #3
 800f94e:	4293      	cmp	r3, r2
 800f950:	d00e      	beq.n	800f970 <UART_SetConfig+0x210>
 800f952:	e01b      	b.n	800f98c <UART_SetConfig+0x22c>
 800f954:	231b      	movs	r3, #27
 800f956:	2220      	movs	r2, #32
 800f958:	189b      	adds	r3, r3, r2
 800f95a:	19db      	adds	r3, r3, r7
 800f95c:	2200      	movs	r2, #0
 800f95e:	701a      	strb	r2, [r3, #0]
 800f960:	e021      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f962:	231b      	movs	r3, #27
 800f964:	2220      	movs	r2, #32
 800f966:	189b      	adds	r3, r3, r2
 800f968:	19db      	adds	r3, r3, r7
 800f96a:	2202      	movs	r2, #2
 800f96c:	701a      	strb	r2, [r3, #0]
 800f96e:	e01a      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f970:	231b      	movs	r3, #27
 800f972:	2220      	movs	r2, #32
 800f974:	189b      	adds	r3, r3, r2
 800f976:	19db      	adds	r3, r3, r7
 800f978:	2204      	movs	r2, #4
 800f97a:	701a      	strb	r2, [r3, #0]
 800f97c:	e013      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f97e:	231b      	movs	r3, #27
 800f980:	2220      	movs	r2, #32
 800f982:	189b      	adds	r3, r3, r2
 800f984:	19db      	adds	r3, r3, r7
 800f986:	2208      	movs	r2, #8
 800f988:	701a      	strb	r2, [r3, #0]
 800f98a:	e00c      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f98c:	231b      	movs	r3, #27
 800f98e:	2220      	movs	r2, #32
 800f990:	189b      	adds	r3, r3, r2
 800f992:	19db      	adds	r3, r3, r7
 800f994:	2210      	movs	r2, #16
 800f996:	701a      	strb	r2, [r3, #0]
 800f998:	e005      	b.n	800f9a6 <UART_SetConfig+0x246>
 800f99a:	231b      	movs	r3, #27
 800f99c:	2220      	movs	r2, #32
 800f99e:	189b      	adds	r3, r3, r2
 800f9a0:	19db      	adds	r3, r3, r7
 800f9a2:	2210      	movs	r2, #16
 800f9a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a2b      	ldr	r2, [pc, #172]	@ (800fa58 <UART_SetConfig+0x2f8>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d000      	beq.n	800f9b2 <UART_SetConfig+0x252>
 800f9b0:	e0a9      	b.n	800fb06 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f9b2:	231b      	movs	r3, #27
 800f9b4:	2220      	movs	r2, #32
 800f9b6:	189b      	adds	r3, r3, r2
 800f9b8:	19db      	adds	r3, r3, r7
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	2b08      	cmp	r3, #8
 800f9be:	d015      	beq.n	800f9ec <UART_SetConfig+0x28c>
 800f9c0:	dc18      	bgt.n	800f9f4 <UART_SetConfig+0x294>
 800f9c2:	2b04      	cmp	r3, #4
 800f9c4:	d00d      	beq.n	800f9e2 <UART_SetConfig+0x282>
 800f9c6:	dc15      	bgt.n	800f9f4 <UART_SetConfig+0x294>
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <UART_SetConfig+0x272>
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d005      	beq.n	800f9dc <UART_SetConfig+0x27c>
 800f9d0:	e010      	b.n	800f9f4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9d2:	f7fe fbf7 	bl	800e1c4 <HAL_RCC_GetPCLK1Freq>
 800f9d6:	0003      	movs	r3, r0
 800f9d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f9da:	e014      	b.n	800fa06 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f9dc:	4b25      	ldr	r3, [pc, #148]	@ (800fa74 <UART_SetConfig+0x314>)
 800f9de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f9e0:	e011      	b.n	800fa06 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f9e2:	f7fe fb63 	bl	800e0ac <HAL_RCC_GetSysClockFreq>
 800f9e6:	0003      	movs	r3, r0
 800f9e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f9ea:	e00c      	b.n	800fa06 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f9ec:	2380      	movs	r3, #128	@ 0x80
 800f9ee:	021b      	lsls	r3, r3, #8
 800f9f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f9f2:	e008      	b.n	800fa06 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800f9f8:	231a      	movs	r3, #26
 800f9fa:	2220      	movs	r2, #32
 800f9fc:	189b      	adds	r3, r3, r2
 800f9fe:	19db      	adds	r3, r3, r7
 800fa00:	2201      	movs	r2, #1
 800fa02:	701a      	strb	r2, [r3, #0]
        break;
 800fa04:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fa06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d100      	bne.n	800fa0e <UART_SetConfig+0x2ae>
 800fa0c:	e14b      	b.n	800fca6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa12:	4b19      	ldr	r3, [pc, #100]	@ (800fa78 <UART_SetConfig+0x318>)
 800fa14:	0052      	lsls	r2, r2, #1
 800fa16:	5ad3      	ldrh	r3, [r2, r3]
 800fa18:	0019      	movs	r1, r3
 800fa1a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fa1c:	f7f0 fb98 	bl	8000150 <__udivsi3>
 800fa20:	0003      	movs	r3, r0
 800fa22:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa26:	685a      	ldr	r2, [r3, #4]
 800fa28:	0013      	movs	r3, r2
 800fa2a:	005b      	lsls	r3, r3, #1
 800fa2c:	189b      	adds	r3, r3, r2
 800fa2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d305      	bcc.n	800fa40 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa36:	685b      	ldr	r3, [r3, #4]
 800fa38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d91d      	bls.n	800fa7c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800fa40:	231a      	movs	r3, #26
 800fa42:	2220      	movs	r2, #32
 800fa44:	189b      	adds	r3, r3, r2
 800fa46:	19db      	adds	r3, r3, r7
 800fa48:	2201      	movs	r2, #1
 800fa4a:	701a      	strb	r2, [r3, #0]
 800fa4c:	e12b      	b.n	800fca6 <UART_SetConfig+0x546>
 800fa4e:	46c0      	nop			@ (mov r8, r8)
 800fa50:	cfff69f3 	.word	0xcfff69f3
 800fa54:	ffffcfff 	.word	0xffffcfff
 800fa58:	40008000 	.word	0x40008000
 800fa5c:	11fff4ff 	.word	0x11fff4ff
 800fa60:	40013800 	.word	0x40013800
 800fa64:	40021000 	.word	0x40021000
 800fa68:	40004400 	.word	0x40004400
 800fa6c:	40004800 	.word	0x40004800
 800fa70:	40004c00 	.word	0x40004c00
 800fa74:	00f42400 	.word	0x00f42400
 800fa78:	08017bb8 	.word	0x08017bb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa7e:	61bb      	str	r3, [r7, #24]
 800fa80:	2300      	movs	r3, #0
 800fa82:	61fb      	str	r3, [r7, #28]
 800fa84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa88:	4b92      	ldr	r3, [pc, #584]	@ (800fcd4 <UART_SetConfig+0x574>)
 800fa8a:	0052      	lsls	r2, r2, #1
 800fa8c:	5ad3      	ldrh	r3, [r2, r3]
 800fa8e:	613b      	str	r3, [r7, #16]
 800fa90:	2300      	movs	r3, #0
 800fa92:	617b      	str	r3, [r7, #20]
 800fa94:	693a      	ldr	r2, [r7, #16]
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	69b8      	ldr	r0, [r7, #24]
 800fa9a:	69f9      	ldr	r1, [r7, #28]
 800fa9c:	f7f0 fd46 	bl	800052c <__aeabi_uldivmod>
 800faa0:	0002      	movs	r2, r0
 800faa2:	000b      	movs	r3, r1
 800faa4:	0e11      	lsrs	r1, r2, #24
 800faa6:	021d      	lsls	r5, r3, #8
 800faa8:	430d      	orrs	r5, r1
 800faaa:	0214      	lsls	r4, r2, #8
 800faac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	085b      	lsrs	r3, r3, #1
 800fab2:	60bb      	str	r3, [r7, #8]
 800fab4:	2300      	movs	r3, #0
 800fab6:	60fb      	str	r3, [r7, #12]
 800fab8:	68b8      	ldr	r0, [r7, #8]
 800faba:	68f9      	ldr	r1, [r7, #12]
 800fabc:	1900      	adds	r0, r0, r4
 800fabe:	4169      	adcs	r1, r5
 800fac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	603b      	str	r3, [r7, #0]
 800fac6:	2300      	movs	r3, #0
 800fac8:	607b      	str	r3, [r7, #4]
 800faca:	683a      	ldr	r2, [r7, #0]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f7f0 fd2d 	bl	800052c <__aeabi_uldivmod>
 800fad2:	0002      	movs	r2, r0
 800fad4:	000b      	movs	r3, r1
 800fad6:	0013      	movs	r3, r2
 800fad8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fadc:	23c0      	movs	r3, #192	@ 0xc0
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d309      	bcc.n	800faf8 <UART_SetConfig+0x398>
 800fae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fae6:	2380      	movs	r3, #128	@ 0x80
 800fae8:	035b      	lsls	r3, r3, #13
 800faea:	429a      	cmp	r2, r3
 800faec:	d204      	bcs.n	800faf8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800faee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800faf4:	60da      	str	r2, [r3, #12]
 800faf6:	e0d6      	b.n	800fca6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800faf8:	231a      	movs	r3, #26
 800fafa:	2220      	movs	r2, #32
 800fafc:	189b      	adds	r3, r3, r2
 800fafe:	19db      	adds	r3, r3, r7
 800fb00:	2201      	movs	r2, #1
 800fb02:	701a      	strb	r2, [r3, #0]
 800fb04:	e0cf      	b.n	800fca6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb08:	69da      	ldr	r2, [r3, #28]
 800fb0a:	2380      	movs	r3, #128	@ 0x80
 800fb0c:	021b      	lsls	r3, r3, #8
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d000      	beq.n	800fb14 <UART_SetConfig+0x3b4>
 800fb12:	e070      	b.n	800fbf6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800fb14:	231b      	movs	r3, #27
 800fb16:	2220      	movs	r2, #32
 800fb18:	189b      	adds	r3, r3, r2
 800fb1a:	19db      	adds	r3, r3, r7
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	2b08      	cmp	r3, #8
 800fb20:	d015      	beq.n	800fb4e <UART_SetConfig+0x3ee>
 800fb22:	dc18      	bgt.n	800fb56 <UART_SetConfig+0x3f6>
 800fb24:	2b04      	cmp	r3, #4
 800fb26:	d00d      	beq.n	800fb44 <UART_SetConfig+0x3e4>
 800fb28:	dc15      	bgt.n	800fb56 <UART_SetConfig+0x3f6>
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d002      	beq.n	800fb34 <UART_SetConfig+0x3d4>
 800fb2e:	2b02      	cmp	r3, #2
 800fb30:	d005      	beq.n	800fb3e <UART_SetConfig+0x3de>
 800fb32:	e010      	b.n	800fb56 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb34:	f7fe fb46 	bl	800e1c4 <HAL_RCC_GetPCLK1Freq>
 800fb38:	0003      	movs	r3, r0
 800fb3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fb3c:	e014      	b.n	800fb68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fb3e:	4b66      	ldr	r3, [pc, #408]	@ (800fcd8 <UART_SetConfig+0x578>)
 800fb40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fb42:	e011      	b.n	800fb68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fb44:	f7fe fab2 	bl	800e0ac <HAL_RCC_GetSysClockFreq>
 800fb48:	0003      	movs	r3, r0
 800fb4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fb4c:	e00c      	b.n	800fb68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb4e:	2380      	movs	r3, #128	@ 0x80
 800fb50:	021b      	lsls	r3, r3, #8
 800fb52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fb54:	e008      	b.n	800fb68 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800fb56:	2300      	movs	r3, #0
 800fb58:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800fb5a:	231a      	movs	r3, #26
 800fb5c:	2220      	movs	r2, #32
 800fb5e:	189b      	adds	r3, r3, r2
 800fb60:	19db      	adds	r3, r3, r7
 800fb62:	2201      	movs	r2, #1
 800fb64:	701a      	strb	r2, [r3, #0]
        break;
 800fb66:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fb68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d100      	bne.n	800fb70 <UART_SetConfig+0x410>
 800fb6e:	e09a      	b.n	800fca6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb74:	4b57      	ldr	r3, [pc, #348]	@ (800fcd4 <UART_SetConfig+0x574>)
 800fb76:	0052      	lsls	r2, r2, #1
 800fb78:	5ad3      	ldrh	r3, [r2, r3]
 800fb7a:	0019      	movs	r1, r3
 800fb7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fb7e:	f7f0 fae7 	bl	8000150 <__udivsi3>
 800fb82:	0003      	movs	r3, r0
 800fb84:	005a      	lsls	r2, r3, #1
 800fb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	085b      	lsrs	r3, r3, #1
 800fb8c:	18d2      	adds	r2, r2, r3
 800fb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	0019      	movs	r1, r3
 800fb94:	0010      	movs	r0, r2
 800fb96:	f7f0 fadb 	bl	8000150 <__udivsi3>
 800fb9a:	0003      	movs	r3, r0
 800fb9c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba0:	2b0f      	cmp	r3, #15
 800fba2:	d921      	bls.n	800fbe8 <UART_SetConfig+0x488>
 800fba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fba6:	2380      	movs	r3, #128	@ 0x80
 800fba8:	025b      	lsls	r3, r3, #9
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d21c      	bcs.n	800fbe8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	200e      	movs	r0, #14
 800fbb4:	2420      	movs	r4, #32
 800fbb6:	1903      	adds	r3, r0, r4
 800fbb8:	19db      	adds	r3, r3, r7
 800fbba:	210f      	movs	r1, #15
 800fbbc:	438a      	bics	r2, r1
 800fbbe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc2:	085b      	lsrs	r3, r3, #1
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	2207      	movs	r2, #7
 800fbc8:	4013      	ands	r3, r2
 800fbca:	b299      	uxth	r1, r3
 800fbcc:	1903      	adds	r3, r0, r4
 800fbce:	19db      	adds	r3, r3, r7
 800fbd0:	1902      	adds	r2, r0, r4
 800fbd2:	19d2      	adds	r2, r2, r7
 800fbd4:	8812      	ldrh	r2, [r2, #0]
 800fbd6:	430a      	orrs	r2, r1
 800fbd8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800fbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	1902      	adds	r2, r0, r4
 800fbe0:	19d2      	adds	r2, r2, r7
 800fbe2:	8812      	ldrh	r2, [r2, #0]
 800fbe4:	60da      	str	r2, [r3, #12]
 800fbe6:	e05e      	b.n	800fca6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800fbe8:	231a      	movs	r3, #26
 800fbea:	2220      	movs	r2, #32
 800fbec:	189b      	adds	r3, r3, r2
 800fbee:	19db      	adds	r3, r3, r7
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	701a      	strb	r2, [r3, #0]
 800fbf4:	e057      	b.n	800fca6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fbf6:	231b      	movs	r3, #27
 800fbf8:	2220      	movs	r2, #32
 800fbfa:	189b      	adds	r3, r3, r2
 800fbfc:	19db      	adds	r3, r3, r7
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	2b08      	cmp	r3, #8
 800fc02:	d015      	beq.n	800fc30 <UART_SetConfig+0x4d0>
 800fc04:	dc18      	bgt.n	800fc38 <UART_SetConfig+0x4d8>
 800fc06:	2b04      	cmp	r3, #4
 800fc08:	d00d      	beq.n	800fc26 <UART_SetConfig+0x4c6>
 800fc0a:	dc15      	bgt.n	800fc38 <UART_SetConfig+0x4d8>
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d002      	beq.n	800fc16 <UART_SetConfig+0x4b6>
 800fc10:	2b02      	cmp	r3, #2
 800fc12:	d005      	beq.n	800fc20 <UART_SetConfig+0x4c0>
 800fc14:	e010      	b.n	800fc38 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc16:	f7fe fad5 	bl	800e1c4 <HAL_RCC_GetPCLK1Freq>
 800fc1a:	0003      	movs	r3, r0
 800fc1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc1e:	e014      	b.n	800fc4a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fc20:	4b2d      	ldr	r3, [pc, #180]	@ (800fcd8 <UART_SetConfig+0x578>)
 800fc22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc24:	e011      	b.n	800fc4a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fc26:	f7fe fa41 	bl	800e0ac <HAL_RCC_GetSysClockFreq>
 800fc2a:	0003      	movs	r3, r0
 800fc2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc2e:	e00c      	b.n	800fc4a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc30:	2380      	movs	r3, #128	@ 0x80
 800fc32:	021b      	lsls	r3, r3, #8
 800fc34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc36:	e008      	b.n	800fc4a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800fc3c:	231a      	movs	r3, #26
 800fc3e:	2220      	movs	r2, #32
 800fc40:	189b      	adds	r3, r3, r2
 800fc42:	19db      	adds	r3, r3, r7
 800fc44:	2201      	movs	r2, #1
 800fc46:	701a      	strb	r2, [r3, #0]
        break;
 800fc48:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800fc4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d02a      	beq.n	800fca6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc54:	4b1f      	ldr	r3, [pc, #124]	@ (800fcd4 <UART_SetConfig+0x574>)
 800fc56:	0052      	lsls	r2, r2, #1
 800fc58:	5ad3      	ldrh	r3, [r2, r3]
 800fc5a:	0019      	movs	r1, r3
 800fc5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fc5e:	f7f0 fa77 	bl	8000150 <__udivsi3>
 800fc62:	0003      	movs	r3, r0
 800fc64:	001a      	movs	r2, r3
 800fc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	085b      	lsrs	r3, r3, #1
 800fc6c:	18d2      	adds	r2, r2, r3
 800fc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	0019      	movs	r1, r3
 800fc74:	0010      	movs	r0, r2
 800fc76:	f7f0 fa6b 	bl	8000150 <__udivsi3>
 800fc7a:	0003      	movs	r3, r0
 800fc7c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc80:	2b0f      	cmp	r3, #15
 800fc82:	d90a      	bls.n	800fc9a <UART_SetConfig+0x53a>
 800fc84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc86:	2380      	movs	r3, #128	@ 0x80
 800fc88:	025b      	lsls	r3, r3, #9
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d205      	bcs.n	800fc9a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	60da      	str	r2, [r3, #12]
 800fc98:	e005      	b.n	800fca6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800fc9a:	231a      	movs	r3, #26
 800fc9c:	2220      	movs	r2, #32
 800fc9e:	189b      	adds	r3, r3, r2
 800fca0:	19db      	adds	r3, r3, r7
 800fca2:	2201      	movs	r2, #1
 800fca4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca8:	226a      	movs	r2, #106	@ 0x6a
 800fcaa:	2101      	movs	r1, #1
 800fcac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800fcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb0:	2268      	movs	r2, #104	@ 0x68
 800fcb2:	2101      	movs	r1, #1
 800fcb4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb8:	2200      	movs	r2, #0
 800fcba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fcc2:	231a      	movs	r3, #26
 800fcc4:	2220      	movs	r2, #32
 800fcc6:	189b      	adds	r3, r3, r2
 800fcc8:	19db      	adds	r3, r3, r7
 800fcca:	781b      	ldrb	r3, [r3, #0]
}
 800fccc:	0018      	movs	r0, r3
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	b010      	add	sp, #64	@ 0x40
 800fcd2:	bdb0      	pop	{r4, r5, r7, pc}
 800fcd4:	08017bb8 	.word	0x08017bb8
 800fcd8:	00f42400 	.word	0x00f42400

0800fcdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fce8:	2208      	movs	r2, #8
 800fcea:	4013      	ands	r3, r2
 800fcec:	d00b      	beq.n	800fd06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	4a4a      	ldr	r2, [pc, #296]	@ (800fe20 <UART_AdvFeatureConfig+0x144>)
 800fcf6:	4013      	ands	r3, r2
 800fcf8:	0019      	movs	r1, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	430a      	orrs	r2, r1
 800fd04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	4013      	ands	r3, r2
 800fd0e:	d00b      	beq.n	800fd28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	4a43      	ldr	r2, [pc, #268]	@ (800fe24 <UART_AdvFeatureConfig+0x148>)
 800fd18:	4013      	ands	r3, r2
 800fd1a:	0019      	movs	r1, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	430a      	orrs	r2, r1
 800fd26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd2c:	2202      	movs	r2, #2
 800fd2e:	4013      	ands	r3, r2
 800fd30:	d00b      	beq.n	800fd4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	4a3b      	ldr	r2, [pc, #236]	@ (800fe28 <UART_AdvFeatureConfig+0x14c>)
 800fd3a:	4013      	ands	r3, r2
 800fd3c:	0019      	movs	r1, r3
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	430a      	orrs	r2, r1
 800fd48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd4e:	2204      	movs	r2, #4
 800fd50:	4013      	ands	r3, r2
 800fd52:	d00b      	beq.n	800fd6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	4a34      	ldr	r2, [pc, #208]	@ (800fe2c <UART_AdvFeatureConfig+0x150>)
 800fd5c:	4013      	ands	r3, r2
 800fd5e:	0019      	movs	r1, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	430a      	orrs	r2, r1
 800fd6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd70:	2210      	movs	r2, #16
 800fd72:	4013      	ands	r3, r2
 800fd74:	d00b      	beq.n	800fd8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	689b      	ldr	r3, [r3, #8]
 800fd7c:	4a2c      	ldr	r2, [pc, #176]	@ (800fe30 <UART_AdvFeatureConfig+0x154>)
 800fd7e:	4013      	ands	r3, r2
 800fd80:	0019      	movs	r1, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	430a      	orrs	r2, r1
 800fd8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd92:	2220      	movs	r2, #32
 800fd94:	4013      	ands	r3, r2
 800fd96:	d00b      	beq.n	800fdb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	4a25      	ldr	r2, [pc, #148]	@ (800fe34 <UART_AdvFeatureConfig+0x158>)
 800fda0:	4013      	ands	r3, r2
 800fda2:	0019      	movs	r1, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	430a      	orrs	r2, r1
 800fdae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdb4:	2240      	movs	r2, #64	@ 0x40
 800fdb6:	4013      	ands	r3, r2
 800fdb8:	d01d      	beq.n	800fdf6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	4a1d      	ldr	r2, [pc, #116]	@ (800fe38 <UART_AdvFeatureConfig+0x15c>)
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	0019      	movs	r1, r3
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	430a      	orrs	r2, r1
 800fdd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fdd6:	2380      	movs	r3, #128	@ 0x80
 800fdd8:	035b      	lsls	r3, r3, #13
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d10b      	bne.n	800fdf6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	4a15      	ldr	r2, [pc, #84]	@ (800fe3c <UART_AdvFeatureConfig+0x160>)
 800fde6:	4013      	ands	r3, r2
 800fde8:	0019      	movs	r1, r3
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	430a      	orrs	r2, r1
 800fdf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdfa:	2280      	movs	r2, #128	@ 0x80
 800fdfc:	4013      	ands	r3, r2
 800fdfe:	d00b      	beq.n	800fe18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	4a0e      	ldr	r2, [pc, #56]	@ (800fe40 <UART_AdvFeatureConfig+0x164>)
 800fe08:	4013      	ands	r3, r2
 800fe0a:	0019      	movs	r1, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	430a      	orrs	r2, r1
 800fe16:	605a      	str	r2, [r3, #4]
  }
}
 800fe18:	46c0      	nop			@ (mov r8, r8)
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	b002      	add	sp, #8
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	ffff7fff 	.word	0xffff7fff
 800fe24:	fffdffff 	.word	0xfffdffff
 800fe28:	fffeffff 	.word	0xfffeffff
 800fe2c:	fffbffff 	.word	0xfffbffff
 800fe30:	ffffefff 	.word	0xffffefff
 800fe34:	ffffdfff 	.word	0xffffdfff
 800fe38:	ffefffff 	.word	0xffefffff
 800fe3c:	ff9fffff 	.word	0xff9fffff
 800fe40:	fff7ffff 	.word	0xfff7ffff

0800fe44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b092      	sub	sp, #72	@ 0x48
 800fe48:	af02      	add	r7, sp, #8
 800fe4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2290      	movs	r2, #144	@ 0x90
 800fe50:	2100      	movs	r1, #0
 800fe52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fe54:	f7fc fa88 	bl	800c368 <HAL_GetTick>
 800fe58:	0003      	movs	r3, r0
 800fe5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2208      	movs	r2, #8
 800fe64:	4013      	ands	r3, r2
 800fe66:	2b08      	cmp	r3, #8
 800fe68:	d12d      	bne.n	800fec6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe6c:	2280      	movs	r2, #128	@ 0x80
 800fe6e:	0391      	lsls	r1, r2, #14
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	4a47      	ldr	r2, [pc, #284]	@ (800ff90 <UART_CheckIdleState+0x14c>)
 800fe74:	9200      	str	r2, [sp, #0]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f000 f88e 	bl	800ff98 <UART_WaitOnFlagUntilTimeout>
 800fe7c:	1e03      	subs	r3, r0, #0
 800fe7e:	d022      	beq.n	800fec6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe80:	f3ef 8310 	mrs	r3, PRIMASK
 800fe84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800fe86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fe88:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe90:	f383 8810 	msr	PRIMASK, r3
}
 800fe94:	46c0      	nop			@ (mov r8, r8)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2180      	movs	r1, #128	@ 0x80
 800fea2:	438a      	bics	r2, r1
 800fea4:	601a      	str	r2, [r3, #0]
 800fea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800feaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feac:	f383 8810 	msr	PRIMASK, r3
}
 800feb0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2288      	movs	r2, #136	@ 0x88
 800feb6:	2120      	movs	r1, #32
 800feb8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2284      	movs	r2, #132	@ 0x84
 800febe:	2100      	movs	r1, #0
 800fec0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fec2:	2303      	movs	r3, #3
 800fec4:	e060      	b.n	800ff88 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2204      	movs	r2, #4
 800fece:	4013      	ands	r3, r2
 800fed0:	2b04      	cmp	r3, #4
 800fed2:	d146      	bne.n	800ff62 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fed6:	2280      	movs	r2, #128	@ 0x80
 800fed8:	03d1      	lsls	r1, r2, #15
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	4a2c      	ldr	r2, [pc, #176]	@ (800ff90 <UART_CheckIdleState+0x14c>)
 800fede:	9200      	str	r2, [sp, #0]
 800fee0:	2200      	movs	r2, #0
 800fee2:	f000 f859 	bl	800ff98 <UART_WaitOnFlagUntilTimeout>
 800fee6:	1e03      	subs	r3, r0, #0
 800fee8:	d03b      	beq.n	800ff62 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800feea:	f3ef 8310 	mrs	r3, PRIMASK
 800feee:	60fb      	str	r3, [r7, #12]
  return(result);
 800fef0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fef2:	637b      	str	r3, [r7, #52]	@ 0x34
 800fef4:	2301      	movs	r3, #1
 800fef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	f383 8810 	msr	PRIMASK, r3
}
 800fefe:	46c0      	nop			@ (mov r8, r8)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4922      	ldr	r1, [pc, #136]	@ (800ff94 <UART_CheckIdleState+0x150>)
 800ff0c:	400a      	ands	r2, r1
 800ff0e:	601a      	str	r2, [r3, #0]
 800ff10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	f383 8810 	msr	PRIMASK, r3
}
 800ff1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ff20:	61bb      	str	r3, [r7, #24]
  return(result);
 800ff22:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff24:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff26:	2301      	movs	r3, #1
 800ff28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	f383 8810 	msr	PRIMASK, r3
}
 800ff30:	46c0      	nop			@ (mov r8, r8)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	689a      	ldr	r2, [r3, #8]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	438a      	bics	r2, r1
 800ff40:	609a      	str	r2, [r3, #8]
 800ff42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff46:	6a3b      	ldr	r3, [r7, #32]
 800ff48:	f383 8810 	msr	PRIMASK, r3
}
 800ff4c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	228c      	movs	r2, #140	@ 0x8c
 800ff52:	2120      	movs	r1, #32
 800ff54:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2284      	movs	r2, #132	@ 0x84
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff5e:	2303      	movs	r3, #3
 800ff60:	e012      	b.n	800ff88 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2288      	movs	r2, #136	@ 0x88
 800ff66:	2120      	movs	r1, #32
 800ff68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	228c      	movs	r2, #140	@ 0x8c
 800ff6e:	2120      	movs	r1, #32
 800ff70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2284      	movs	r2, #132	@ 0x84
 800ff82:	2100      	movs	r1, #0
 800ff84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ff86:	2300      	movs	r3, #0
}
 800ff88:	0018      	movs	r0, r3
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	b010      	add	sp, #64	@ 0x40
 800ff8e:	bd80      	pop	{r7, pc}
 800ff90:	01ffffff 	.word	0x01ffffff
 800ff94:	fffffedf 	.word	0xfffffedf

0800ff98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	603b      	str	r3, [r7, #0]
 800ffa4:	1dfb      	adds	r3, r7, #7
 800ffa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffa8:	e051      	b.n	801004e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	3301      	adds	r3, #1
 800ffae:	d04e      	beq.n	801004e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ffb0:	f7fc f9da 	bl	800c368 <HAL_GetTick>
 800ffb4:	0002      	movs	r2, r0
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	69ba      	ldr	r2, [r7, #24]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d302      	bcc.n	800ffc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800ffc0:	69bb      	ldr	r3, [r7, #24]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d101      	bne.n	800ffca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800ffc6:	2303      	movs	r3, #3
 800ffc8:	e051      	b.n	801006e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2204      	movs	r2, #4
 800ffd2:	4013      	ands	r3, r2
 800ffd4:	d03b      	beq.n	801004e <UART_WaitOnFlagUntilTimeout+0xb6>
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	2b80      	cmp	r3, #128	@ 0x80
 800ffda:	d038      	beq.n	801004e <UART_WaitOnFlagUntilTimeout+0xb6>
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	2b40      	cmp	r3, #64	@ 0x40
 800ffe0:	d035      	beq.n	801004e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	69db      	ldr	r3, [r3, #28]
 800ffe8:	2208      	movs	r2, #8
 800ffea:	4013      	ands	r3, r2
 800ffec:	2b08      	cmp	r3, #8
 800ffee:	d111      	bne.n	8010014 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2208      	movs	r2, #8
 800fff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	0018      	movs	r0, r3
 800fffc:	f000 f83c 	bl	8010078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	2290      	movs	r2, #144	@ 0x90
 8010004:	2108      	movs	r1, #8
 8010006:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2284      	movs	r2, #132	@ 0x84
 801000c:	2100      	movs	r1, #0
 801000e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8010010:	2301      	movs	r3, #1
 8010012:	e02c      	b.n	801006e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	69da      	ldr	r2, [r3, #28]
 801001a:	2380      	movs	r3, #128	@ 0x80
 801001c:	011b      	lsls	r3, r3, #4
 801001e:	401a      	ands	r2, r3
 8010020:	2380      	movs	r3, #128	@ 0x80
 8010022:	011b      	lsls	r3, r3, #4
 8010024:	429a      	cmp	r2, r3
 8010026:	d112      	bne.n	801004e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	2280      	movs	r2, #128	@ 0x80
 801002e:	0112      	lsls	r2, r2, #4
 8010030:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	0018      	movs	r0, r3
 8010036:	f000 f81f 	bl	8010078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2290      	movs	r2, #144	@ 0x90
 801003e:	2120      	movs	r1, #32
 8010040:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2284      	movs	r2, #132	@ 0x84
 8010046:	2100      	movs	r1, #0
 8010048:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801004a:	2303      	movs	r3, #3
 801004c:	e00f      	b.n	801006e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	69db      	ldr	r3, [r3, #28]
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	4013      	ands	r3, r2
 8010058:	68ba      	ldr	r2, [r7, #8]
 801005a:	1ad3      	subs	r3, r2, r3
 801005c:	425a      	negs	r2, r3
 801005e:	4153      	adcs	r3, r2
 8010060:	b2db      	uxtb	r3, r3
 8010062:	001a      	movs	r2, r3
 8010064:	1dfb      	adds	r3, r7, #7
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	429a      	cmp	r2, r3
 801006a:	d09e      	beq.n	800ffaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	0018      	movs	r0, r3
 8010070:	46bd      	mov	sp, r7
 8010072:	b004      	add	sp, #16
 8010074:	bd80      	pop	{r7, pc}
	...

08010078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b08e      	sub	sp, #56	@ 0x38
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010080:	f3ef 8310 	mrs	r3, PRIMASK
 8010084:	617b      	str	r3, [r7, #20]
  return(result);
 8010086:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010088:	637b      	str	r3, [r7, #52]	@ 0x34
 801008a:	2301      	movs	r3, #1
 801008c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	f383 8810 	msr	PRIMASK, r3
}
 8010094:	46c0      	nop			@ (mov r8, r8)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4926      	ldr	r1, [pc, #152]	@ (801013c <UART_EndRxTransfer+0xc4>)
 80100a2:	400a      	ands	r2, r1
 80100a4:	601a      	str	r2, [r3, #0]
 80100a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	f383 8810 	msr	PRIMASK, r3
}
 80100b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100b2:	f3ef 8310 	mrs	r3, PRIMASK
 80100b6:	623b      	str	r3, [r7, #32]
  return(result);
 80100b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80100ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80100bc:	2301      	movs	r3, #1
 80100be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c2:	f383 8810 	msr	PRIMASK, r3
}
 80100c6:	46c0      	nop			@ (mov r8, r8)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	689a      	ldr	r2, [r3, #8]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	491b      	ldr	r1, [pc, #108]	@ (8010140 <UART_EndRxTransfer+0xc8>)
 80100d4:	400a      	ands	r2, r1
 80100d6:	609a      	str	r2, [r3, #8]
 80100d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100de:	f383 8810 	msr	PRIMASK, r3
}
 80100e2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d118      	bne.n	801011e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100ec:	f3ef 8310 	mrs	r3, PRIMASK
 80100f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80100f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80100f6:	2301      	movs	r3, #1
 80100f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f383 8810 	msr	PRIMASK, r3
}
 8010100:	46c0      	nop			@ (mov r8, r8)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2110      	movs	r1, #16
 801010e:	438a      	bics	r2, r1
 8010110:	601a      	str	r2, [r3, #0]
 8010112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010114:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	f383 8810 	msr	PRIMASK, r3
}
 801011c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	228c      	movs	r2, #140	@ 0x8c
 8010122:	2120      	movs	r1, #32
 8010124:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2200      	movs	r2, #0
 801012a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2200      	movs	r2, #0
 8010130:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010132:	46c0      	nop			@ (mov r8, r8)
 8010134:	46bd      	mov	sp, r7
 8010136:	b00e      	add	sp, #56	@ 0x38
 8010138:	bd80      	pop	{r7, pc}
 801013a:	46c0      	nop			@ (mov r8, r8)
 801013c:	fffffedf 	.word	0xfffffedf
 8010140:	effffffe 	.word	0xeffffffe

08010144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2284      	movs	r2, #132	@ 0x84
 8010150:	5c9b      	ldrb	r3, [r3, r2]
 8010152:	2b01      	cmp	r3, #1
 8010154:	d101      	bne.n	801015a <HAL_UARTEx_DisableFifoMode+0x16>
 8010156:	2302      	movs	r3, #2
 8010158:	e027      	b.n	80101aa <HAL_UARTEx_DisableFifoMode+0x66>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2284      	movs	r2, #132	@ 0x84
 801015e:	2101      	movs	r1, #1
 8010160:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2288      	movs	r2, #136	@ 0x88
 8010166:	2124      	movs	r1, #36	@ 0x24
 8010168:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	2101      	movs	r1, #1
 801017e:	438a      	bics	r2, r1
 8010180:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	4a0b      	ldr	r2, [pc, #44]	@ (80101b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8010186:	4013      	ands	r3, r2
 8010188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2200      	movs	r2, #0
 801018e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	68fa      	ldr	r2, [r7, #12]
 8010196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2288      	movs	r2, #136	@ 0x88
 801019c:	2120      	movs	r1, #32
 801019e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2284      	movs	r2, #132	@ 0x84
 80101a4:	2100      	movs	r1, #0
 80101a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	0018      	movs	r0, r3
 80101ac:	46bd      	mov	sp, r7
 80101ae:	b004      	add	sp, #16
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	46c0      	nop			@ (mov r8, r8)
 80101b4:	dfffffff 	.word	0xdfffffff

080101b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b084      	sub	sp, #16
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2284      	movs	r2, #132	@ 0x84
 80101c6:	5c9b      	ldrb	r3, [r3, r2]
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d101      	bne.n	80101d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80101cc:	2302      	movs	r3, #2
 80101ce:	e02e      	b.n	801022e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2284      	movs	r2, #132	@ 0x84
 80101d4:	2101      	movs	r1, #1
 80101d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2288      	movs	r2, #136	@ 0x88
 80101dc:	2124      	movs	r1, #36	@ 0x24
 80101de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2101      	movs	r1, #1
 80101f4:	438a      	bics	r2, r1
 80101f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	689b      	ldr	r3, [r3, #8]
 80101fe:	00db      	lsls	r3, r3, #3
 8010200:	08d9      	lsrs	r1, r3, #3
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	683a      	ldr	r2, [r7, #0]
 8010208:	430a      	orrs	r2, r1
 801020a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	0018      	movs	r0, r3
 8010210:	f000 f854 	bl	80102bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2288      	movs	r2, #136	@ 0x88
 8010220:	2120      	movs	r1, #32
 8010222:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2284      	movs	r2, #132	@ 0x84
 8010228:	2100      	movs	r1, #0
 801022a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801022c:	2300      	movs	r3, #0
}
 801022e:	0018      	movs	r0, r3
 8010230:	46bd      	mov	sp, r7
 8010232:	b004      	add	sp, #16
 8010234:	bd80      	pop	{r7, pc}
	...

08010238 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2284      	movs	r2, #132	@ 0x84
 8010246:	5c9b      	ldrb	r3, [r3, r2]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d101      	bne.n	8010250 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801024c:	2302      	movs	r3, #2
 801024e:	e02f      	b.n	80102b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2284      	movs	r2, #132	@ 0x84
 8010254:	2101      	movs	r1, #1
 8010256:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2288      	movs	r2, #136	@ 0x88
 801025c:	2124      	movs	r1, #36	@ 0x24
 801025e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	2101      	movs	r1, #1
 8010274:	438a      	bics	r2, r1
 8010276:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	689b      	ldr	r3, [r3, #8]
 801027e:	4a0e      	ldr	r2, [pc, #56]	@ (80102b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8010280:	4013      	ands	r3, r2
 8010282:	0019      	movs	r1, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	683a      	ldr	r2, [r7, #0]
 801028a:	430a      	orrs	r2, r1
 801028c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	0018      	movs	r0, r3
 8010292:	f000 f813 	bl	80102bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	68fa      	ldr	r2, [r7, #12]
 801029c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2288      	movs	r2, #136	@ 0x88
 80102a2:	2120      	movs	r1, #32
 80102a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2284      	movs	r2, #132	@ 0x84
 80102aa:	2100      	movs	r1, #0
 80102ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80102ae:	2300      	movs	r3, #0
}
 80102b0:	0018      	movs	r0, r3
 80102b2:	46bd      	mov	sp, r7
 80102b4:	b004      	add	sp, #16
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	f1ffffff 	.word	0xf1ffffff

080102bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80102bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102be:	b085      	sub	sp, #20
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d108      	bne.n	80102de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	226a      	movs	r2, #106	@ 0x6a
 80102d0:	2101      	movs	r1, #1
 80102d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2268      	movs	r2, #104	@ 0x68
 80102d8:	2101      	movs	r1, #1
 80102da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80102dc:	e043      	b.n	8010366 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80102de:	260f      	movs	r6, #15
 80102e0:	19bb      	adds	r3, r7, r6
 80102e2:	2208      	movs	r2, #8
 80102e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80102e6:	200e      	movs	r0, #14
 80102e8:	183b      	adds	r3, r7, r0
 80102ea:	2208      	movs	r2, #8
 80102ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	0e5b      	lsrs	r3, r3, #25
 80102f6:	b2da      	uxtb	r2, r3
 80102f8:	240d      	movs	r4, #13
 80102fa:	193b      	adds	r3, r7, r4
 80102fc:	2107      	movs	r1, #7
 80102fe:	400a      	ands	r2, r1
 8010300:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	0f5b      	lsrs	r3, r3, #29
 801030a:	b2da      	uxtb	r2, r3
 801030c:	250c      	movs	r5, #12
 801030e:	197b      	adds	r3, r7, r5
 8010310:	2107      	movs	r1, #7
 8010312:	400a      	ands	r2, r1
 8010314:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010316:	183b      	adds	r3, r7, r0
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	197a      	adds	r2, r7, r5
 801031c:	7812      	ldrb	r2, [r2, #0]
 801031e:	4914      	ldr	r1, [pc, #80]	@ (8010370 <UARTEx_SetNbDataToProcess+0xb4>)
 8010320:	5c8a      	ldrb	r2, [r1, r2]
 8010322:	435a      	muls	r2, r3
 8010324:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8010326:	197b      	adds	r3, r7, r5
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	4a12      	ldr	r2, [pc, #72]	@ (8010374 <UARTEx_SetNbDataToProcess+0xb8>)
 801032c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801032e:	0019      	movs	r1, r3
 8010330:	f7ef ff98 	bl	8000264 <__divsi3>
 8010334:	0003      	movs	r3, r0
 8010336:	b299      	uxth	r1, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	226a      	movs	r2, #106	@ 0x6a
 801033c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801033e:	19bb      	adds	r3, r7, r6
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	193a      	adds	r2, r7, r4
 8010344:	7812      	ldrb	r2, [r2, #0]
 8010346:	490a      	ldr	r1, [pc, #40]	@ (8010370 <UARTEx_SetNbDataToProcess+0xb4>)
 8010348:	5c8a      	ldrb	r2, [r1, r2]
 801034a:	435a      	muls	r2, r3
 801034c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 801034e:	193b      	adds	r3, r7, r4
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	4a08      	ldr	r2, [pc, #32]	@ (8010374 <UARTEx_SetNbDataToProcess+0xb8>)
 8010354:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010356:	0019      	movs	r1, r3
 8010358:	f7ef ff84 	bl	8000264 <__divsi3>
 801035c:	0003      	movs	r3, r0
 801035e:	b299      	uxth	r1, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2268      	movs	r2, #104	@ 0x68
 8010364:	5299      	strh	r1, [r3, r2]
}
 8010366:	46c0      	nop			@ (mov r8, r8)
 8010368:	46bd      	mov	sp, r7
 801036a:	b005      	add	sp, #20
 801036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801036e:	46c0      	nop			@ (mov r8, r8)
 8010370:	08017bd0 	.word	0x08017bd0
 8010374:	08017bd8 	.word	0x08017bd8

08010378 <atof>:
 8010378:	b510      	push	{r4, lr}
 801037a:	2100      	movs	r1, #0
 801037c:	f000 fe18 	bl	8010fb0 <strtod>
 8010380:	bd10      	pop	{r4, pc}
	...

08010384 <sulp>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	0016      	movs	r6, r2
 8010388:	000d      	movs	r5, r1
 801038a:	f003 fb67 	bl	8013a5c <__ulp>
 801038e:	2e00      	cmp	r6, #0
 8010390:	d00d      	beq.n	80103ae <sulp+0x2a>
 8010392:	236b      	movs	r3, #107	@ 0x6b
 8010394:	006a      	lsls	r2, r5, #1
 8010396:	0d52      	lsrs	r2, r2, #21
 8010398:	1a9b      	subs	r3, r3, r2
 801039a:	2b00      	cmp	r3, #0
 801039c:	dd07      	ble.n	80103ae <sulp+0x2a>
 801039e:	2400      	movs	r4, #0
 80103a0:	4a03      	ldr	r2, [pc, #12]	@ (80103b0 <sulp+0x2c>)
 80103a2:	051b      	lsls	r3, r3, #20
 80103a4:	189d      	adds	r5, r3, r2
 80103a6:	002b      	movs	r3, r5
 80103a8:	0022      	movs	r2, r4
 80103aa:	f7f2 fa7b 	bl	80028a4 <__aeabi_dmul>
 80103ae:	bd70      	pop	{r4, r5, r6, pc}
 80103b0:	3ff00000 	.word	0x3ff00000

080103b4 <_strtod_l>:
 80103b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103b6:	b0a3      	sub	sp, #140	@ 0x8c
 80103b8:	921b      	str	r2, [sp, #108]	@ 0x6c
 80103ba:	2200      	movs	r2, #0
 80103bc:	2600      	movs	r6, #0
 80103be:	2700      	movs	r7, #0
 80103c0:	9005      	str	r0, [sp, #20]
 80103c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80103c4:	921e      	str	r2, [sp, #120]	@ 0x78
 80103c6:	911d      	str	r1, [sp, #116]	@ 0x74
 80103c8:	780a      	ldrb	r2, [r1, #0]
 80103ca:	2a2b      	cmp	r2, #43	@ 0x2b
 80103cc:	d053      	beq.n	8010476 <_strtod_l+0xc2>
 80103ce:	d83f      	bhi.n	8010450 <_strtod_l+0x9c>
 80103d0:	2a0d      	cmp	r2, #13
 80103d2:	d839      	bhi.n	8010448 <_strtod_l+0x94>
 80103d4:	2a08      	cmp	r2, #8
 80103d6:	d839      	bhi.n	801044c <_strtod_l+0x98>
 80103d8:	2a00      	cmp	r2, #0
 80103da:	d042      	beq.n	8010462 <_strtod_l+0xae>
 80103dc:	2200      	movs	r2, #0
 80103de:	9212      	str	r2, [sp, #72]	@ 0x48
 80103e0:	2100      	movs	r1, #0
 80103e2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80103e4:	910c      	str	r1, [sp, #48]	@ 0x30
 80103e6:	782a      	ldrb	r2, [r5, #0]
 80103e8:	2a30      	cmp	r2, #48	@ 0x30
 80103ea:	d000      	beq.n	80103ee <_strtod_l+0x3a>
 80103ec:	e083      	b.n	80104f6 <_strtod_l+0x142>
 80103ee:	786a      	ldrb	r2, [r5, #1]
 80103f0:	3120      	adds	r1, #32
 80103f2:	438a      	bics	r2, r1
 80103f4:	2a58      	cmp	r2, #88	@ 0x58
 80103f6:	d000      	beq.n	80103fa <_strtod_l+0x46>
 80103f8:	e073      	b.n	80104e2 <_strtod_l+0x12e>
 80103fa:	9302      	str	r3, [sp, #8]
 80103fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80103fe:	4a9b      	ldr	r2, [pc, #620]	@ (801066c <_strtod_l+0x2b8>)
 8010400:	9301      	str	r3, [sp, #4]
 8010402:	ab1e      	add	r3, sp, #120	@ 0x78
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	9805      	ldr	r0, [sp, #20]
 8010408:	ab1f      	add	r3, sp, #124	@ 0x7c
 801040a:	a91d      	add	r1, sp, #116	@ 0x74
 801040c:	f002 fbde 	bl	8012bcc <__gethex>
 8010410:	230f      	movs	r3, #15
 8010412:	0002      	movs	r2, r0
 8010414:	401a      	ands	r2, r3
 8010416:	0004      	movs	r4, r0
 8010418:	9206      	str	r2, [sp, #24]
 801041a:	4218      	tst	r0, r3
 801041c:	d005      	beq.n	801042a <_strtod_l+0x76>
 801041e:	2a06      	cmp	r2, #6
 8010420:	d12b      	bne.n	801047a <_strtod_l+0xc6>
 8010422:	2300      	movs	r3, #0
 8010424:	3501      	adds	r5, #1
 8010426:	951d      	str	r5, [sp, #116]	@ 0x74
 8010428:	9312      	str	r3, [sp, #72]	@ 0x48
 801042a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801042c:	2b00      	cmp	r3, #0
 801042e:	d002      	beq.n	8010436 <_strtod_l+0x82>
 8010430:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010432:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010434:	6013      	str	r3, [r2, #0]
 8010436:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010438:	2b00      	cmp	r3, #0
 801043a:	d019      	beq.n	8010470 <_strtod_l+0xbc>
 801043c:	2380      	movs	r3, #128	@ 0x80
 801043e:	0030      	movs	r0, r6
 8010440:	061b      	lsls	r3, r3, #24
 8010442:	18f9      	adds	r1, r7, r3
 8010444:	b023      	add	sp, #140	@ 0x8c
 8010446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010448:	2a20      	cmp	r2, #32
 801044a:	d1c7      	bne.n	80103dc <_strtod_l+0x28>
 801044c:	3101      	adds	r1, #1
 801044e:	e7ba      	b.n	80103c6 <_strtod_l+0x12>
 8010450:	2a2d      	cmp	r2, #45	@ 0x2d
 8010452:	d1c3      	bne.n	80103dc <_strtod_l+0x28>
 8010454:	3a2c      	subs	r2, #44	@ 0x2c
 8010456:	9212      	str	r2, [sp, #72]	@ 0x48
 8010458:	1c4a      	adds	r2, r1, #1
 801045a:	921d      	str	r2, [sp, #116]	@ 0x74
 801045c:	784a      	ldrb	r2, [r1, #1]
 801045e:	2a00      	cmp	r2, #0
 8010460:	d1be      	bne.n	80103e0 <_strtod_l+0x2c>
 8010462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010464:	931d      	str	r3, [sp, #116]	@ 0x74
 8010466:	2300      	movs	r3, #0
 8010468:	9312      	str	r3, [sp, #72]	@ 0x48
 801046a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1df      	bne.n	8010430 <_strtod_l+0x7c>
 8010470:	0030      	movs	r0, r6
 8010472:	0039      	movs	r1, r7
 8010474:	e7e6      	b.n	8010444 <_strtod_l+0x90>
 8010476:	2200      	movs	r2, #0
 8010478:	e7ed      	b.n	8010456 <_strtod_l+0xa2>
 801047a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801047c:	2a00      	cmp	r2, #0
 801047e:	d007      	beq.n	8010490 <_strtod_l+0xdc>
 8010480:	2135      	movs	r1, #53	@ 0x35
 8010482:	a820      	add	r0, sp, #128	@ 0x80
 8010484:	f003 fbe0 	bl	8013c48 <__copybits>
 8010488:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801048a:	9805      	ldr	r0, [sp, #20]
 801048c:	f002 ffa2 	bl	80133d4 <_Bfree>
 8010490:	9806      	ldr	r0, [sp, #24]
 8010492:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010494:	3801      	subs	r0, #1
 8010496:	2804      	cmp	r0, #4
 8010498:	d806      	bhi.n	80104a8 <_strtod_l+0xf4>
 801049a:	f7ef fe45 	bl	8000128 <__gnu_thumb1_case_uqi>
 801049e:	0312      	.short	0x0312
 80104a0:	1e1c      	.short	0x1e1c
 80104a2:	12          	.byte	0x12
 80104a3:	00          	.byte	0x00
 80104a4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80104a6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 80104a8:	05e4      	lsls	r4, r4, #23
 80104aa:	d502      	bpl.n	80104b2 <_strtod_l+0xfe>
 80104ac:	2380      	movs	r3, #128	@ 0x80
 80104ae:	061b      	lsls	r3, r3, #24
 80104b0:	431f      	orrs	r7, r3
 80104b2:	4b6f      	ldr	r3, [pc, #444]	@ (8010670 <_strtod_l+0x2bc>)
 80104b4:	423b      	tst	r3, r7
 80104b6:	d1b8      	bne.n	801042a <_strtod_l+0x76>
 80104b8:	f001 fbfa 	bl	8011cb0 <__errno>
 80104bc:	2322      	movs	r3, #34	@ 0x22
 80104be:	6003      	str	r3, [r0, #0]
 80104c0:	e7b3      	b.n	801042a <_strtod_l+0x76>
 80104c2:	496c      	ldr	r1, [pc, #432]	@ (8010674 <_strtod_l+0x2c0>)
 80104c4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80104c6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80104c8:	400a      	ands	r2, r1
 80104ca:	496b      	ldr	r1, [pc, #428]	@ (8010678 <_strtod_l+0x2c4>)
 80104cc:	185b      	adds	r3, r3, r1
 80104ce:	051b      	lsls	r3, r3, #20
 80104d0:	431a      	orrs	r2, r3
 80104d2:	0017      	movs	r7, r2
 80104d4:	e7e8      	b.n	80104a8 <_strtod_l+0xf4>
 80104d6:	4f66      	ldr	r7, [pc, #408]	@ (8010670 <_strtod_l+0x2bc>)
 80104d8:	e7e6      	b.n	80104a8 <_strtod_l+0xf4>
 80104da:	2601      	movs	r6, #1
 80104dc:	4f67      	ldr	r7, [pc, #412]	@ (801067c <_strtod_l+0x2c8>)
 80104de:	4276      	negs	r6, r6
 80104e0:	e7e2      	b.n	80104a8 <_strtod_l+0xf4>
 80104e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80104e4:	1c5a      	adds	r2, r3, #1
 80104e6:	921d      	str	r2, [sp, #116]	@ 0x74
 80104e8:	785b      	ldrb	r3, [r3, #1]
 80104ea:	2b30      	cmp	r3, #48	@ 0x30
 80104ec:	d0f9      	beq.n	80104e2 <_strtod_l+0x12e>
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d09b      	beq.n	801042a <_strtod_l+0x76>
 80104f2:	2301      	movs	r3, #1
 80104f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80104f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80104f8:	220a      	movs	r2, #10
 80104fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80104fc:	2300      	movs	r3, #0
 80104fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8010500:	930d      	str	r3, [sp, #52]	@ 0x34
 8010502:	9308      	str	r3, [sp, #32]
 8010504:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010506:	7804      	ldrb	r4, [r0, #0]
 8010508:	0023      	movs	r3, r4
 801050a:	3b30      	subs	r3, #48	@ 0x30
 801050c:	b2d9      	uxtb	r1, r3
 801050e:	2909      	cmp	r1, #9
 8010510:	d927      	bls.n	8010562 <_strtod_l+0x1ae>
 8010512:	2201      	movs	r2, #1
 8010514:	495a      	ldr	r1, [pc, #360]	@ (8010680 <_strtod_l+0x2cc>)
 8010516:	f001 fb07 	bl	8011b28 <strncmp>
 801051a:	2800      	cmp	r0, #0
 801051c:	d033      	beq.n	8010586 <_strtod_l+0x1d2>
 801051e:	2000      	movs	r0, #0
 8010520:	0023      	movs	r3, r4
 8010522:	4684      	mov	ip, r0
 8010524:	9a08      	ldr	r2, [sp, #32]
 8010526:	900e      	str	r0, [sp, #56]	@ 0x38
 8010528:	9206      	str	r2, [sp, #24]
 801052a:	2220      	movs	r2, #32
 801052c:	0019      	movs	r1, r3
 801052e:	4391      	bics	r1, r2
 8010530:	000a      	movs	r2, r1
 8010532:	2100      	movs	r1, #0
 8010534:	9107      	str	r1, [sp, #28]
 8010536:	2a45      	cmp	r2, #69	@ 0x45
 8010538:	d000      	beq.n	801053c <_strtod_l+0x188>
 801053a:	e0cb      	b.n	80106d4 <_strtod_l+0x320>
 801053c:	9b06      	ldr	r3, [sp, #24]
 801053e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010540:	4303      	orrs	r3, r0
 8010542:	4313      	orrs	r3, r2
 8010544:	428b      	cmp	r3, r1
 8010546:	d08c      	beq.n	8010462 <_strtod_l+0xae>
 8010548:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801054a:	9309      	str	r3, [sp, #36]	@ 0x24
 801054c:	3301      	adds	r3, #1
 801054e:	931d      	str	r3, [sp, #116]	@ 0x74
 8010550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010552:	785b      	ldrb	r3, [r3, #1]
 8010554:	2b2b      	cmp	r3, #43	@ 0x2b
 8010556:	d07b      	beq.n	8010650 <_strtod_l+0x29c>
 8010558:	000c      	movs	r4, r1
 801055a:	2b2d      	cmp	r3, #45	@ 0x2d
 801055c:	d17e      	bne.n	801065c <_strtod_l+0x2a8>
 801055e:	2401      	movs	r4, #1
 8010560:	e077      	b.n	8010652 <_strtod_l+0x29e>
 8010562:	9908      	ldr	r1, [sp, #32]
 8010564:	2908      	cmp	r1, #8
 8010566:	dc09      	bgt.n	801057c <_strtod_l+0x1c8>
 8010568:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801056a:	4351      	muls	r1, r2
 801056c:	185b      	adds	r3, r3, r1
 801056e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010570:	9b08      	ldr	r3, [sp, #32]
 8010572:	3001      	adds	r0, #1
 8010574:	3301      	adds	r3, #1
 8010576:	9308      	str	r3, [sp, #32]
 8010578:	901d      	str	r0, [sp, #116]	@ 0x74
 801057a:	e7c3      	b.n	8010504 <_strtod_l+0x150>
 801057c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801057e:	4355      	muls	r5, r2
 8010580:	195b      	adds	r3, r3, r5
 8010582:	9310      	str	r3, [sp, #64]	@ 0x40
 8010584:	e7f4      	b.n	8010570 <_strtod_l+0x1bc>
 8010586:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010588:	1c5a      	adds	r2, r3, #1
 801058a:	921d      	str	r2, [sp, #116]	@ 0x74
 801058c:	9a08      	ldr	r2, [sp, #32]
 801058e:	785b      	ldrb	r3, [r3, #1]
 8010590:	2a00      	cmp	r2, #0
 8010592:	d03e      	beq.n	8010612 <_strtod_l+0x25e>
 8010594:	900e      	str	r0, [sp, #56]	@ 0x38
 8010596:	9206      	str	r2, [sp, #24]
 8010598:	001a      	movs	r2, r3
 801059a:	3a30      	subs	r2, #48	@ 0x30
 801059c:	2a09      	cmp	r2, #9
 801059e:	d912      	bls.n	80105c6 <_strtod_l+0x212>
 80105a0:	2201      	movs	r2, #1
 80105a2:	4694      	mov	ip, r2
 80105a4:	e7c1      	b.n	801052a <_strtod_l+0x176>
 80105a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80105a8:	3001      	adds	r0, #1
 80105aa:	1c5a      	adds	r2, r3, #1
 80105ac:	921d      	str	r2, [sp, #116]	@ 0x74
 80105ae:	785b      	ldrb	r3, [r3, #1]
 80105b0:	2b30      	cmp	r3, #48	@ 0x30
 80105b2:	d0f8      	beq.n	80105a6 <_strtod_l+0x1f2>
 80105b4:	001a      	movs	r2, r3
 80105b6:	3a31      	subs	r2, #49	@ 0x31
 80105b8:	2a08      	cmp	r2, #8
 80105ba:	d844      	bhi.n	8010646 <_strtod_l+0x292>
 80105bc:	900e      	str	r0, [sp, #56]	@ 0x38
 80105be:	2000      	movs	r0, #0
 80105c0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80105c2:	9006      	str	r0, [sp, #24]
 80105c4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80105c6:	001c      	movs	r4, r3
 80105c8:	1c42      	adds	r2, r0, #1
 80105ca:	3c30      	subs	r4, #48	@ 0x30
 80105cc:	2b30      	cmp	r3, #48	@ 0x30
 80105ce:	d01a      	beq.n	8010606 <_strtod_l+0x252>
 80105d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105d2:	9906      	ldr	r1, [sp, #24]
 80105d4:	189b      	adds	r3, r3, r2
 80105d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80105d8:	230a      	movs	r3, #10
 80105da:	469c      	mov	ip, r3
 80105dc:	9d06      	ldr	r5, [sp, #24]
 80105de:	1c4b      	adds	r3, r1, #1
 80105e0:	1b5d      	subs	r5, r3, r5
 80105e2:	42aa      	cmp	r2, r5
 80105e4:	dc17      	bgt.n	8010616 <_strtod_l+0x262>
 80105e6:	43c3      	mvns	r3, r0
 80105e8:	9a06      	ldr	r2, [sp, #24]
 80105ea:	17db      	asrs	r3, r3, #31
 80105ec:	4003      	ands	r3, r0
 80105ee:	18d1      	adds	r1, r2, r3
 80105f0:	3201      	adds	r2, #1
 80105f2:	18d3      	adds	r3, r2, r3
 80105f4:	9306      	str	r3, [sp, #24]
 80105f6:	2908      	cmp	r1, #8
 80105f8:	dc1c      	bgt.n	8010634 <_strtod_l+0x280>
 80105fa:	230a      	movs	r3, #10
 80105fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80105fe:	4353      	muls	r3, r2
 8010600:	2200      	movs	r2, #0
 8010602:	18e3      	adds	r3, r4, r3
 8010604:	930d      	str	r3, [sp, #52]	@ 0x34
 8010606:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010608:	0010      	movs	r0, r2
 801060a:	1c59      	adds	r1, r3, #1
 801060c:	911d      	str	r1, [sp, #116]	@ 0x74
 801060e:	785b      	ldrb	r3, [r3, #1]
 8010610:	e7c2      	b.n	8010598 <_strtod_l+0x1e4>
 8010612:	9808      	ldr	r0, [sp, #32]
 8010614:	e7cc      	b.n	80105b0 <_strtod_l+0x1fc>
 8010616:	2908      	cmp	r1, #8
 8010618:	dc05      	bgt.n	8010626 <_strtod_l+0x272>
 801061a:	4665      	mov	r5, ip
 801061c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801061e:	4369      	muls	r1, r5
 8010620:	910d      	str	r1, [sp, #52]	@ 0x34
 8010622:	0019      	movs	r1, r3
 8010624:	e7da      	b.n	80105dc <_strtod_l+0x228>
 8010626:	2b10      	cmp	r3, #16
 8010628:	dcfb      	bgt.n	8010622 <_strtod_l+0x26e>
 801062a:	4661      	mov	r1, ip
 801062c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801062e:	434d      	muls	r5, r1
 8010630:	9510      	str	r5, [sp, #64]	@ 0x40
 8010632:	e7f6      	b.n	8010622 <_strtod_l+0x26e>
 8010634:	2200      	movs	r2, #0
 8010636:	290f      	cmp	r1, #15
 8010638:	dce5      	bgt.n	8010606 <_strtod_l+0x252>
 801063a:	230a      	movs	r3, #10
 801063c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801063e:	435d      	muls	r5, r3
 8010640:	1963      	adds	r3, r4, r5
 8010642:	9310      	str	r3, [sp, #64]	@ 0x40
 8010644:	e7df      	b.n	8010606 <_strtod_l+0x252>
 8010646:	2200      	movs	r2, #0
 8010648:	920e      	str	r2, [sp, #56]	@ 0x38
 801064a:	9206      	str	r2, [sp, #24]
 801064c:	3201      	adds	r2, #1
 801064e:	e7a8      	b.n	80105a2 <_strtod_l+0x1ee>
 8010650:	2400      	movs	r4, #0
 8010652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010654:	3302      	adds	r3, #2
 8010656:	931d      	str	r3, [sp, #116]	@ 0x74
 8010658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801065a:	789b      	ldrb	r3, [r3, #2]
 801065c:	001a      	movs	r2, r3
 801065e:	3a30      	subs	r2, #48	@ 0x30
 8010660:	2a09      	cmp	r2, #9
 8010662:	d913      	bls.n	801068c <_strtod_l+0x2d8>
 8010664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010666:	921d      	str	r2, [sp, #116]	@ 0x74
 8010668:	2200      	movs	r2, #0
 801066a:	e032      	b.n	80106d2 <_strtod_l+0x31e>
 801066c:	08017e20 	.word	0x08017e20
 8010670:	7ff00000 	.word	0x7ff00000
 8010674:	ffefffff 	.word	0xffefffff
 8010678:	00000433 	.word	0x00000433
 801067c:	7fffffff 	.word	0x7fffffff
 8010680:	08017be0 	.word	0x08017be0
 8010684:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010686:	1c5a      	adds	r2, r3, #1
 8010688:	921d      	str	r2, [sp, #116]	@ 0x74
 801068a:	785b      	ldrb	r3, [r3, #1]
 801068c:	2b30      	cmp	r3, #48	@ 0x30
 801068e:	d0f9      	beq.n	8010684 <_strtod_l+0x2d0>
 8010690:	2200      	movs	r2, #0
 8010692:	9207      	str	r2, [sp, #28]
 8010694:	001a      	movs	r2, r3
 8010696:	3a31      	subs	r2, #49	@ 0x31
 8010698:	2a08      	cmp	r2, #8
 801069a:	d81b      	bhi.n	80106d4 <_strtod_l+0x320>
 801069c:	3b30      	subs	r3, #48	@ 0x30
 801069e:	001a      	movs	r2, r3
 80106a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80106a2:	9307      	str	r3, [sp, #28]
 80106a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80106a6:	1c59      	adds	r1, r3, #1
 80106a8:	911d      	str	r1, [sp, #116]	@ 0x74
 80106aa:	785b      	ldrb	r3, [r3, #1]
 80106ac:	001d      	movs	r5, r3
 80106ae:	3d30      	subs	r5, #48	@ 0x30
 80106b0:	2d09      	cmp	r5, #9
 80106b2:	d93a      	bls.n	801072a <_strtod_l+0x376>
 80106b4:	9d07      	ldr	r5, [sp, #28]
 80106b6:	1b49      	subs	r1, r1, r5
 80106b8:	000d      	movs	r5, r1
 80106ba:	49b3      	ldr	r1, [pc, #716]	@ (8010988 <_strtod_l+0x5d4>)
 80106bc:	9107      	str	r1, [sp, #28]
 80106be:	2d08      	cmp	r5, #8
 80106c0:	dc03      	bgt.n	80106ca <_strtod_l+0x316>
 80106c2:	9207      	str	r2, [sp, #28]
 80106c4:	428a      	cmp	r2, r1
 80106c6:	dd00      	ble.n	80106ca <_strtod_l+0x316>
 80106c8:	9107      	str	r1, [sp, #28]
 80106ca:	2c00      	cmp	r4, #0
 80106cc:	d002      	beq.n	80106d4 <_strtod_l+0x320>
 80106ce:	9a07      	ldr	r2, [sp, #28]
 80106d0:	4252      	negs	r2, r2
 80106d2:	9207      	str	r2, [sp, #28]
 80106d4:	9a06      	ldr	r2, [sp, #24]
 80106d6:	2a00      	cmp	r2, #0
 80106d8:	d14b      	bne.n	8010772 <_strtod_l+0x3be>
 80106da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80106dc:	4310      	orrs	r0, r2
 80106de:	d000      	beq.n	80106e2 <_strtod_l+0x32e>
 80106e0:	e6a3      	b.n	801042a <_strtod_l+0x76>
 80106e2:	4662      	mov	r2, ip
 80106e4:	2a00      	cmp	r2, #0
 80106e6:	d000      	beq.n	80106ea <_strtod_l+0x336>
 80106e8:	e6bb      	b.n	8010462 <_strtod_l+0xae>
 80106ea:	2b69      	cmp	r3, #105	@ 0x69
 80106ec:	d025      	beq.n	801073a <_strtod_l+0x386>
 80106ee:	dc21      	bgt.n	8010734 <_strtod_l+0x380>
 80106f0:	2b49      	cmp	r3, #73	@ 0x49
 80106f2:	d022      	beq.n	801073a <_strtod_l+0x386>
 80106f4:	2b4e      	cmp	r3, #78	@ 0x4e
 80106f6:	d000      	beq.n	80106fa <_strtod_l+0x346>
 80106f8:	e6b3      	b.n	8010462 <_strtod_l+0xae>
 80106fa:	49a4      	ldr	r1, [pc, #656]	@ (801098c <_strtod_l+0x5d8>)
 80106fc:	a81d      	add	r0, sp, #116	@ 0x74
 80106fe:	f002 fc9b 	bl	8013038 <__match>
 8010702:	2800      	cmp	r0, #0
 8010704:	d100      	bne.n	8010708 <_strtod_l+0x354>
 8010706:	e6ac      	b.n	8010462 <_strtod_l+0xae>
 8010708:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	2b28      	cmp	r3, #40	@ 0x28
 801070e:	d12a      	bne.n	8010766 <_strtod_l+0x3b2>
 8010710:	499f      	ldr	r1, [pc, #636]	@ (8010990 <_strtod_l+0x5dc>)
 8010712:	aa20      	add	r2, sp, #128	@ 0x80
 8010714:	a81d      	add	r0, sp, #116	@ 0x74
 8010716:	f002 fca3 	bl	8013060 <__hexnan>
 801071a:	2805      	cmp	r0, #5
 801071c:	d123      	bne.n	8010766 <_strtod_l+0x3b2>
 801071e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010720:	4a9c      	ldr	r2, [pc, #624]	@ (8010994 <_strtod_l+0x5e0>)
 8010722:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010724:	431a      	orrs	r2, r3
 8010726:	0017      	movs	r7, r2
 8010728:	e67f      	b.n	801042a <_strtod_l+0x76>
 801072a:	210a      	movs	r1, #10
 801072c:	434a      	muls	r2, r1
 801072e:	18d2      	adds	r2, r2, r3
 8010730:	3a30      	subs	r2, #48	@ 0x30
 8010732:	e7b7      	b.n	80106a4 <_strtod_l+0x2f0>
 8010734:	2b6e      	cmp	r3, #110	@ 0x6e
 8010736:	d0e0      	beq.n	80106fa <_strtod_l+0x346>
 8010738:	e693      	b.n	8010462 <_strtod_l+0xae>
 801073a:	4997      	ldr	r1, [pc, #604]	@ (8010998 <_strtod_l+0x5e4>)
 801073c:	a81d      	add	r0, sp, #116	@ 0x74
 801073e:	f002 fc7b 	bl	8013038 <__match>
 8010742:	2800      	cmp	r0, #0
 8010744:	d100      	bne.n	8010748 <_strtod_l+0x394>
 8010746:	e68c      	b.n	8010462 <_strtod_l+0xae>
 8010748:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801074a:	4994      	ldr	r1, [pc, #592]	@ (801099c <_strtod_l+0x5e8>)
 801074c:	3b01      	subs	r3, #1
 801074e:	a81d      	add	r0, sp, #116	@ 0x74
 8010750:	931d      	str	r3, [sp, #116]	@ 0x74
 8010752:	f002 fc71 	bl	8013038 <__match>
 8010756:	2800      	cmp	r0, #0
 8010758:	d102      	bne.n	8010760 <_strtod_l+0x3ac>
 801075a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801075c:	3301      	adds	r3, #1
 801075e:	931d      	str	r3, [sp, #116]	@ 0x74
 8010760:	2600      	movs	r6, #0
 8010762:	4f8c      	ldr	r7, [pc, #560]	@ (8010994 <_strtod_l+0x5e0>)
 8010764:	e661      	b.n	801042a <_strtod_l+0x76>
 8010766:	488e      	ldr	r0, [pc, #568]	@ (80109a0 <_strtod_l+0x5ec>)
 8010768:	f001 fae4 	bl	8011d34 <nan>
 801076c:	0006      	movs	r6, r0
 801076e:	000f      	movs	r7, r1
 8010770:	e65b      	b.n	801042a <_strtod_l+0x76>
 8010772:	9b07      	ldr	r3, [sp, #28]
 8010774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010776:	1a9b      	subs	r3, r3, r2
 8010778:	930c      	str	r3, [sp, #48]	@ 0x30
 801077a:	9b08      	ldr	r3, [sp, #32]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d101      	bne.n	8010784 <_strtod_l+0x3d0>
 8010780:	9b06      	ldr	r3, [sp, #24]
 8010782:	9308      	str	r3, [sp, #32]
 8010784:	9c06      	ldr	r4, [sp, #24]
 8010786:	2c10      	cmp	r4, #16
 8010788:	dd00      	ble.n	801078c <_strtod_l+0x3d8>
 801078a:	2410      	movs	r4, #16
 801078c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801078e:	f7f3 f805 	bl	800379c <__aeabi_ui2d>
 8010792:	9b06      	ldr	r3, [sp, #24]
 8010794:	0006      	movs	r6, r0
 8010796:	000f      	movs	r7, r1
 8010798:	2b09      	cmp	r3, #9
 801079a:	dc13      	bgt.n	80107c4 <_strtod_l+0x410>
 801079c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d100      	bne.n	80107a4 <_strtod_l+0x3f0>
 80107a2:	e642      	b.n	801042a <_strtod_l+0x76>
 80107a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	dc00      	bgt.n	80107ac <_strtod_l+0x3f8>
 80107aa:	e07e      	b.n	80108aa <_strtod_l+0x4f6>
 80107ac:	2b16      	cmp	r3, #22
 80107ae:	dc63      	bgt.n	8010878 <_strtod_l+0x4c4>
 80107b0:	497c      	ldr	r1, [pc, #496]	@ (80109a4 <_strtod_l+0x5f0>)
 80107b2:	00db      	lsls	r3, r3, #3
 80107b4:	18c9      	adds	r1, r1, r3
 80107b6:	0032      	movs	r2, r6
 80107b8:	6808      	ldr	r0, [r1, #0]
 80107ba:	6849      	ldr	r1, [r1, #4]
 80107bc:	003b      	movs	r3, r7
 80107be:	f7f2 f871 	bl	80028a4 <__aeabi_dmul>
 80107c2:	e7d3      	b.n	801076c <_strtod_l+0x3b8>
 80107c4:	0022      	movs	r2, r4
 80107c6:	4b77      	ldr	r3, [pc, #476]	@ (80109a4 <_strtod_l+0x5f0>)
 80107c8:	3a09      	subs	r2, #9
 80107ca:	00d2      	lsls	r2, r2, #3
 80107cc:	189b      	adds	r3, r3, r2
 80107ce:	681a      	ldr	r2, [r3, #0]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	f7f2 f867 	bl	80028a4 <__aeabi_dmul>
 80107d6:	0006      	movs	r6, r0
 80107d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80107da:	000f      	movs	r7, r1
 80107dc:	f7f2 ffde 	bl	800379c <__aeabi_ui2d>
 80107e0:	000b      	movs	r3, r1
 80107e2:	0002      	movs	r2, r0
 80107e4:	0039      	movs	r1, r7
 80107e6:	0030      	movs	r0, r6
 80107e8:	f7f1 f85c 	bl	80018a4 <__aeabi_dadd>
 80107ec:	9b06      	ldr	r3, [sp, #24]
 80107ee:	0006      	movs	r6, r0
 80107f0:	000f      	movs	r7, r1
 80107f2:	2b0f      	cmp	r3, #15
 80107f4:	ddd2      	ble.n	801079c <_strtod_l+0x3e8>
 80107f6:	9b06      	ldr	r3, [sp, #24]
 80107f8:	1b1c      	subs	r4, r3, r4
 80107fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107fc:	18e4      	adds	r4, r4, r3
 80107fe:	2c00      	cmp	r4, #0
 8010800:	dc00      	bgt.n	8010804 <_strtod_l+0x450>
 8010802:	e09b      	b.n	801093c <_strtod_l+0x588>
 8010804:	220f      	movs	r2, #15
 8010806:	0023      	movs	r3, r4
 8010808:	4013      	ands	r3, r2
 801080a:	4214      	tst	r4, r2
 801080c:	d00a      	beq.n	8010824 <_strtod_l+0x470>
 801080e:	4965      	ldr	r1, [pc, #404]	@ (80109a4 <_strtod_l+0x5f0>)
 8010810:	00db      	lsls	r3, r3, #3
 8010812:	18c9      	adds	r1, r1, r3
 8010814:	0032      	movs	r2, r6
 8010816:	6808      	ldr	r0, [r1, #0]
 8010818:	6849      	ldr	r1, [r1, #4]
 801081a:	003b      	movs	r3, r7
 801081c:	f7f2 f842 	bl	80028a4 <__aeabi_dmul>
 8010820:	0006      	movs	r6, r0
 8010822:	000f      	movs	r7, r1
 8010824:	230f      	movs	r3, #15
 8010826:	439c      	bics	r4, r3
 8010828:	d073      	beq.n	8010912 <_strtod_l+0x55e>
 801082a:	3326      	adds	r3, #38	@ 0x26
 801082c:	33ff      	adds	r3, #255	@ 0xff
 801082e:	429c      	cmp	r4, r3
 8010830:	dd4b      	ble.n	80108ca <_strtod_l+0x516>
 8010832:	2300      	movs	r3, #0
 8010834:	9306      	str	r3, [sp, #24]
 8010836:	9307      	str	r3, [sp, #28]
 8010838:	930d      	str	r3, [sp, #52]	@ 0x34
 801083a:	9308      	str	r3, [sp, #32]
 801083c:	2322      	movs	r3, #34	@ 0x22
 801083e:	2600      	movs	r6, #0
 8010840:	9a05      	ldr	r2, [sp, #20]
 8010842:	4f54      	ldr	r7, [pc, #336]	@ (8010994 <_strtod_l+0x5e0>)
 8010844:	6013      	str	r3, [r2, #0]
 8010846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010848:	42b3      	cmp	r3, r6
 801084a:	d100      	bne.n	801084e <_strtod_l+0x49a>
 801084c:	e5ed      	b.n	801042a <_strtod_l+0x76>
 801084e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010850:	9805      	ldr	r0, [sp, #20]
 8010852:	f002 fdbf 	bl	80133d4 <_Bfree>
 8010856:	9908      	ldr	r1, [sp, #32]
 8010858:	9805      	ldr	r0, [sp, #20]
 801085a:	f002 fdbb 	bl	80133d4 <_Bfree>
 801085e:	9907      	ldr	r1, [sp, #28]
 8010860:	9805      	ldr	r0, [sp, #20]
 8010862:	f002 fdb7 	bl	80133d4 <_Bfree>
 8010866:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010868:	9805      	ldr	r0, [sp, #20]
 801086a:	f002 fdb3 	bl	80133d4 <_Bfree>
 801086e:	9906      	ldr	r1, [sp, #24]
 8010870:	9805      	ldr	r0, [sp, #20]
 8010872:	f002 fdaf 	bl	80133d4 <_Bfree>
 8010876:	e5d8      	b.n	801042a <_strtod_l+0x76>
 8010878:	2325      	movs	r3, #37	@ 0x25
 801087a:	9a06      	ldr	r2, [sp, #24]
 801087c:	1a9b      	subs	r3, r3, r2
 801087e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010880:	4293      	cmp	r3, r2
 8010882:	dbb8      	blt.n	80107f6 <_strtod_l+0x442>
 8010884:	240f      	movs	r4, #15
 8010886:	9b06      	ldr	r3, [sp, #24]
 8010888:	4d46      	ldr	r5, [pc, #280]	@ (80109a4 <_strtod_l+0x5f0>)
 801088a:	1ae4      	subs	r4, r4, r3
 801088c:	00e1      	lsls	r1, r4, #3
 801088e:	1869      	adds	r1, r5, r1
 8010890:	0032      	movs	r2, r6
 8010892:	6808      	ldr	r0, [r1, #0]
 8010894:	6849      	ldr	r1, [r1, #4]
 8010896:	003b      	movs	r3, r7
 8010898:	f7f2 f804 	bl	80028a4 <__aeabi_dmul>
 801089c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801089e:	1b1c      	subs	r4, r3, r4
 80108a0:	00e4      	lsls	r4, r4, #3
 80108a2:	192d      	adds	r5, r5, r4
 80108a4:	682a      	ldr	r2, [r5, #0]
 80108a6:	686b      	ldr	r3, [r5, #4]
 80108a8:	e789      	b.n	80107be <_strtod_l+0x40a>
 80108aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80108ac:	3316      	adds	r3, #22
 80108ae:	dba2      	blt.n	80107f6 <_strtod_l+0x442>
 80108b0:	9907      	ldr	r1, [sp, #28]
 80108b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108b4:	4b3b      	ldr	r3, [pc, #236]	@ (80109a4 <_strtod_l+0x5f0>)
 80108b6:	1a52      	subs	r2, r2, r1
 80108b8:	00d2      	lsls	r2, r2, #3
 80108ba:	189b      	adds	r3, r3, r2
 80108bc:	0030      	movs	r0, r6
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	0039      	movs	r1, r7
 80108c4:	f7f1 fbb4 	bl	8002030 <__aeabi_ddiv>
 80108c8:	e750      	b.n	801076c <_strtod_l+0x3b8>
 80108ca:	2300      	movs	r3, #0
 80108cc:	0030      	movs	r0, r6
 80108ce:	0039      	movs	r1, r7
 80108d0:	4d35      	ldr	r5, [pc, #212]	@ (80109a8 <_strtod_l+0x5f4>)
 80108d2:	1124      	asrs	r4, r4, #4
 80108d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80108d6:	2c01      	cmp	r4, #1
 80108d8:	dc1e      	bgt.n	8010918 <_strtod_l+0x564>
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d001      	beq.n	80108e2 <_strtod_l+0x52e>
 80108de:	0006      	movs	r6, r0
 80108e0:	000f      	movs	r7, r1
 80108e2:	4b32      	ldr	r3, [pc, #200]	@ (80109ac <_strtod_l+0x5f8>)
 80108e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108e6:	18ff      	adds	r7, r7, r3
 80108e8:	4b2f      	ldr	r3, [pc, #188]	@ (80109a8 <_strtod_l+0x5f4>)
 80108ea:	00d5      	lsls	r5, r2, #3
 80108ec:	195d      	adds	r5, r3, r5
 80108ee:	0032      	movs	r2, r6
 80108f0:	6828      	ldr	r0, [r5, #0]
 80108f2:	6869      	ldr	r1, [r5, #4]
 80108f4:	003b      	movs	r3, r7
 80108f6:	f7f1 ffd5 	bl	80028a4 <__aeabi_dmul>
 80108fa:	4b26      	ldr	r3, [pc, #152]	@ (8010994 <_strtod_l+0x5e0>)
 80108fc:	4a2c      	ldr	r2, [pc, #176]	@ (80109b0 <_strtod_l+0x5fc>)
 80108fe:	0006      	movs	r6, r0
 8010900:	400b      	ands	r3, r1
 8010902:	4293      	cmp	r3, r2
 8010904:	d895      	bhi.n	8010832 <_strtod_l+0x47e>
 8010906:	4a2b      	ldr	r2, [pc, #172]	@ (80109b4 <_strtod_l+0x600>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d913      	bls.n	8010934 <_strtod_l+0x580>
 801090c:	2601      	movs	r6, #1
 801090e:	4f2a      	ldr	r7, [pc, #168]	@ (80109b8 <_strtod_l+0x604>)
 8010910:	4276      	negs	r6, r6
 8010912:	2300      	movs	r3, #0
 8010914:	9309      	str	r3, [sp, #36]	@ 0x24
 8010916:	e086      	b.n	8010a26 <_strtod_l+0x672>
 8010918:	2201      	movs	r2, #1
 801091a:	4214      	tst	r4, r2
 801091c:	d004      	beq.n	8010928 <_strtod_l+0x574>
 801091e:	682a      	ldr	r2, [r5, #0]
 8010920:	686b      	ldr	r3, [r5, #4]
 8010922:	f7f1 ffbf 	bl	80028a4 <__aeabi_dmul>
 8010926:	2301      	movs	r3, #1
 8010928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801092a:	1064      	asrs	r4, r4, #1
 801092c:	3201      	adds	r2, #1
 801092e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010930:	3508      	adds	r5, #8
 8010932:	e7d0      	b.n	80108d6 <_strtod_l+0x522>
 8010934:	23d4      	movs	r3, #212	@ 0xd4
 8010936:	049b      	lsls	r3, r3, #18
 8010938:	18cf      	adds	r7, r1, r3
 801093a:	e7ea      	b.n	8010912 <_strtod_l+0x55e>
 801093c:	2c00      	cmp	r4, #0
 801093e:	d0e8      	beq.n	8010912 <_strtod_l+0x55e>
 8010940:	4264      	negs	r4, r4
 8010942:	230f      	movs	r3, #15
 8010944:	0022      	movs	r2, r4
 8010946:	401a      	ands	r2, r3
 8010948:	421c      	tst	r4, r3
 801094a:	d00a      	beq.n	8010962 <_strtod_l+0x5ae>
 801094c:	4b15      	ldr	r3, [pc, #84]	@ (80109a4 <_strtod_l+0x5f0>)
 801094e:	00d2      	lsls	r2, r2, #3
 8010950:	189b      	adds	r3, r3, r2
 8010952:	0030      	movs	r0, r6
 8010954:	681a      	ldr	r2, [r3, #0]
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	0039      	movs	r1, r7
 801095a:	f7f1 fb69 	bl	8002030 <__aeabi_ddiv>
 801095e:	0006      	movs	r6, r0
 8010960:	000f      	movs	r7, r1
 8010962:	1124      	asrs	r4, r4, #4
 8010964:	d0d5      	beq.n	8010912 <_strtod_l+0x55e>
 8010966:	2c1f      	cmp	r4, #31
 8010968:	dd28      	ble.n	80109bc <_strtod_l+0x608>
 801096a:	2300      	movs	r3, #0
 801096c:	9306      	str	r3, [sp, #24]
 801096e:	9307      	str	r3, [sp, #28]
 8010970:	930d      	str	r3, [sp, #52]	@ 0x34
 8010972:	9308      	str	r3, [sp, #32]
 8010974:	2322      	movs	r3, #34	@ 0x22
 8010976:	9a05      	ldr	r2, [sp, #20]
 8010978:	2600      	movs	r6, #0
 801097a:	6013      	str	r3, [r2, #0]
 801097c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801097e:	2700      	movs	r7, #0
 8010980:	2b00      	cmp	r3, #0
 8010982:	d000      	beq.n	8010986 <_strtod_l+0x5d2>
 8010984:	e763      	b.n	801084e <_strtod_l+0x49a>
 8010986:	e550      	b.n	801042a <_strtod_l+0x76>
 8010988:	00004e1f 	.word	0x00004e1f
 801098c:	08017bef 	.word	0x08017bef
 8010990:	08017e0c 	.word	0x08017e0c
 8010994:	7ff00000 	.word	0x7ff00000
 8010998:	08017be7 	.word	0x08017be7
 801099c:	08017cce 	.word	0x08017cce
 80109a0:	08017cca 	.word	0x08017cca
 80109a4:	08017e98 	.word	0x08017e98
 80109a8:	08017e70 	.word	0x08017e70
 80109ac:	fcb00000 	.word	0xfcb00000
 80109b0:	7ca00000 	.word	0x7ca00000
 80109b4:	7c900000 	.word	0x7c900000
 80109b8:	7fefffff 	.word	0x7fefffff
 80109bc:	2310      	movs	r3, #16
 80109be:	0022      	movs	r2, r4
 80109c0:	401a      	ands	r2, r3
 80109c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80109c4:	421c      	tst	r4, r3
 80109c6:	d001      	beq.n	80109cc <_strtod_l+0x618>
 80109c8:	335a      	adds	r3, #90	@ 0x5a
 80109ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80109cc:	0030      	movs	r0, r6
 80109ce:	0039      	movs	r1, r7
 80109d0:	2300      	movs	r3, #0
 80109d2:	4dc0      	ldr	r5, [pc, #768]	@ (8010cd4 <_strtod_l+0x920>)
 80109d4:	2201      	movs	r2, #1
 80109d6:	4214      	tst	r4, r2
 80109d8:	d004      	beq.n	80109e4 <_strtod_l+0x630>
 80109da:	682a      	ldr	r2, [r5, #0]
 80109dc:	686b      	ldr	r3, [r5, #4]
 80109de:	f7f1 ff61 	bl	80028a4 <__aeabi_dmul>
 80109e2:	2301      	movs	r3, #1
 80109e4:	1064      	asrs	r4, r4, #1
 80109e6:	3508      	adds	r5, #8
 80109e8:	2c00      	cmp	r4, #0
 80109ea:	d1f3      	bne.n	80109d4 <_strtod_l+0x620>
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <_strtod_l+0x640>
 80109f0:	0006      	movs	r6, r0
 80109f2:	000f      	movs	r7, r1
 80109f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00d      	beq.n	8010a16 <_strtod_l+0x662>
 80109fa:	236b      	movs	r3, #107	@ 0x6b
 80109fc:	007a      	lsls	r2, r7, #1
 80109fe:	0d52      	lsrs	r2, r2, #21
 8010a00:	0039      	movs	r1, r7
 8010a02:	1a9b      	subs	r3, r3, r2
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	dd06      	ble.n	8010a16 <_strtod_l+0x662>
 8010a08:	2b1f      	cmp	r3, #31
 8010a0a:	dd5c      	ble.n	8010ac6 <_strtod_l+0x712>
 8010a0c:	2600      	movs	r6, #0
 8010a0e:	2b34      	cmp	r3, #52	@ 0x34
 8010a10:	dd52      	ble.n	8010ab8 <_strtod_l+0x704>
 8010a12:	27dc      	movs	r7, #220	@ 0xdc
 8010a14:	04bf      	lsls	r7, r7, #18
 8010a16:	2200      	movs	r2, #0
 8010a18:	2300      	movs	r3, #0
 8010a1a:	0030      	movs	r0, r6
 8010a1c:	0039      	movs	r1, r7
 8010a1e:	f7ef fd1d 	bl	800045c <__aeabi_dcmpeq>
 8010a22:	2800      	cmp	r0, #0
 8010a24:	d1a1      	bne.n	801096a <_strtod_l+0x5b6>
 8010a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a28:	9a08      	ldr	r2, [sp, #32]
 8010a2a:	9300      	str	r3, [sp, #0]
 8010a2c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010a2e:	9b06      	ldr	r3, [sp, #24]
 8010a30:	9805      	ldr	r0, [sp, #20]
 8010a32:	f002 fd37 	bl	80134a4 <__s2b>
 8010a36:	900d      	str	r0, [sp, #52]	@ 0x34
 8010a38:	2800      	cmp	r0, #0
 8010a3a:	d100      	bne.n	8010a3e <_strtod_l+0x68a>
 8010a3c:	e6f9      	b.n	8010832 <_strtod_l+0x47e>
 8010a3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a40:	9907      	ldr	r1, [sp, #28]
 8010a42:	43db      	mvns	r3, r3
 8010a44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a46:	17db      	asrs	r3, r3, #31
 8010a48:	1a52      	subs	r2, r2, r1
 8010a4a:	9214      	str	r2, [sp, #80]	@ 0x50
 8010a4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010a4e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010a50:	17d2      	asrs	r2, r2, #31
 8010a52:	4011      	ands	r1, r2
 8010a54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010a56:	9114      	str	r1, [sp, #80]	@ 0x50
 8010a58:	401a      	ands	r2, r3
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8010a5e:	9306      	str	r3, [sp, #24]
 8010a60:	9307      	str	r3, [sp, #28]
 8010a62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a64:	9805      	ldr	r0, [sp, #20]
 8010a66:	6859      	ldr	r1, [r3, #4]
 8010a68:	f002 fc70 	bl	801334c <_Balloc>
 8010a6c:	9008      	str	r0, [sp, #32]
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d100      	bne.n	8010a74 <_strtod_l+0x6c0>
 8010a72:	e6e3      	b.n	801083c <_strtod_l+0x488>
 8010a74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a76:	300c      	adds	r0, #12
 8010a78:	0019      	movs	r1, r3
 8010a7a:	691a      	ldr	r2, [r3, #16]
 8010a7c:	310c      	adds	r1, #12
 8010a7e:	3202      	adds	r2, #2
 8010a80:	0092      	lsls	r2, r2, #2
 8010a82:	f001 f94d 	bl	8011d20 <memcpy>
 8010a86:	ab20      	add	r3, sp, #128	@ 0x80
 8010a88:	9301      	str	r3, [sp, #4]
 8010a8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	0032      	movs	r2, r6
 8010a90:	003b      	movs	r3, r7
 8010a92:	9805      	ldr	r0, [sp, #20]
 8010a94:	9610      	str	r6, [sp, #64]	@ 0x40
 8010a96:	9711      	str	r7, [sp, #68]	@ 0x44
 8010a98:	f003 f84c 	bl	8013b34 <__d2b>
 8010a9c:	901e      	str	r0, [sp, #120]	@ 0x78
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d100      	bne.n	8010aa4 <_strtod_l+0x6f0>
 8010aa2:	e6cb      	b.n	801083c <_strtod_l+0x488>
 8010aa4:	2101      	movs	r1, #1
 8010aa6:	9805      	ldr	r0, [sp, #20]
 8010aa8:	f002 fd98 	bl	80135dc <__i2b>
 8010aac:	9007      	str	r0, [sp, #28]
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d10e      	bne.n	8010ad0 <_strtod_l+0x71c>
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	9307      	str	r3, [sp, #28]
 8010ab6:	e6c1      	b.n	801083c <_strtod_l+0x488>
 8010ab8:	234b      	movs	r3, #75	@ 0x4b
 8010aba:	1a9a      	subs	r2, r3, r2
 8010abc:	3b4c      	subs	r3, #76	@ 0x4c
 8010abe:	4093      	lsls	r3, r2
 8010ac0:	4019      	ands	r1, r3
 8010ac2:	000f      	movs	r7, r1
 8010ac4:	e7a7      	b.n	8010a16 <_strtod_l+0x662>
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	4252      	negs	r2, r2
 8010aca:	409a      	lsls	r2, r3
 8010acc:	4016      	ands	r6, r2
 8010ace:	e7a2      	b.n	8010a16 <_strtod_l+0x662>
 8010ad0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010ad2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010ad4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010ad6:	1ad4      	subs	r4, r2, r3
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	db01      	blt.n	8010ae0 <_strtod_l+0x72c>
 8010adc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8010ade:	195d      	adds	r5, r3, r5
 8010ae0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ae2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010ae4:	1a5b      	subs	r3, r3, r1
 8010ae6:	2136      	movs	r1, #54	@ 0x36
 8010ae8:	189b      	adds	r3, r3, r2
 8010aea:	1a8a      	subs	r2, r1, r2
 8010aec:	497a      	ldr	r1, [pc, #488]	@ (8010cd8 <_strtod_l+0x924>)
 8010aee:	2001      	movs	r0, #1
 8010af0:	468c      	mov	ip, r1
 8010af2:	2100      	movs	r1, #0
 8010af4:	3b01      	subs	r3, #1
 8010af6:	9115      	str	r1, [sp, #84]	@ 0x54
 8010af8:	9016      	str	r0, [sp, #88]	@ 0x58
 8010afa:	4563      	cmp	r3, ip
 8010afc:	da06      	bge.n	8010b0c <_strtod_l+0x758>
 8010afe:	4661      	mov	r1, ip
 8010b00:	1ac9      	subs	r1, r1, r3
 8010b02:	1a52      	subs	r2, r2, r1
 8010b04:	291f      	cmp	r1, #31
 8010b06:	dc3f      	bgt.n	8010b88 <_strtod_l+0x7d4>
 8010b08:	4088      	lsls	r0, r1
 8010b0a:	9016      	str	r0, [sp, #88]	@ 0x58
 8010b0c:	18ab      	adds	r3, r5, r2
 8010b0e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b10:	18a4      	adds	r4, r4, r2
 8010b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b16:	191c      	adds	r4, r3, r4
 8010b18:	002b      	movs	r3, r5
 8010b1a:	4295      	cmp	r5, r2
 8010b1c:	dd00      	ble.n	8010b20 <_strtod_l+0x76c>
 8010b1e:	0013      	movs	r3, r2
 8010b20:	42a3      	cmp	r3, r4
 8010b22:	dd00      	ble.n	8010b26 <_strtod_l+0x772>
 8010b24:	0023      	movs	r3, r4
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	dd04      	ble.n	8010b34 <_strtod_l+0x780>
 8010b2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b2c:	1ae4      	subs	r4, r4, r3
 8010b2e:	1ad2      	subs	r2, r2, r3
 8010b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b32:	1aed      	subs	r5, r5, r3
 8010b34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	dd16      	ble.n	8010b68 <_strtod_l+0x7b4>
 8010b3a:	001a      	movs	r2, r3
 8010b3c:	9907      	ldr	r1, [sp, #28]
 8010b3e:	9805      	ldr	r0, [sp, #20]
 8010b40:	f002 fe0e 	bl	8013760 <__pow5mult>
 8010b44:	9007      	str	r0, [sp, #28]
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d0b3      	beq.n	8010ab2 <_strtod_l+0x6fe>
 8010b4a:	0001      	movs	r1, r0
 8010b4c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010b4e:	9805      	ldr	r0, [sp, #20]
 8010b50:	f002 fd5c 	bl	801360c <__multiply>
 8010b54:	9013      	str	r0, [sp, #76]	@ 0x4c
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d100      	bne.n	8010b5c <_strtod_l+0x7a8>
 8010b5a:	e66f      	b.n	801083c <_strtod_l+0x488>
 8010b5c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010b5e:	9805      	ldr	r0, [sp, #20]
 8010b60:	f002 fc38 	bl	80133d4 <_Bfree>
 8010b64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010b66:	931e      	str	r3, [sp, #120]	@ 0x78
 8010b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	dc12      	bgt.n	8010b94 <_strtod_l+0x7e0>
 8010b6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	dd18      	ble.n	8010ba6 <_strtod_l+0x7f2>
 8010b74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010b76:	9908      	ldr	r1, [sp, #32]
 8010b78:	9805      	ldr	r0, [sp, #20]
 8010b7a:	f002 fdf1 	bl	8013760 <__pow5mult>
 8010b7e:	9008      	str	r0, [sp, #32]
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d110      	bne.n	8010ba6 <_strtod_l+0x7f2>
 8010b84:	2300      	movs	r3, #0
 8010b86:	e658      	b.n	801083a <_strtod_l+0x486>
 8010b88:	4954      	ldr	r1, [pc, #336]	@ (8010cdc <_strtod_l+0x928>)
 8010b8a:	1acb      	subs	r3, r1, r3
 8010b8c:	0001      	movs	r1, r0
 8010b8e:	4099      	lsls	r1, r3
 8010b90:	9115      	str	r1, [sp, #84]	@ 0x54
 8010b92:	e7ba      	b.n	8010b0a <_strtod_l+0x756>
 8010b94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b96:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010b98:	9805      	ldr	r0, [sp, #20]
 8010b9a:	f002 fe3d 	bl	8013818 <__lshift>
 8010b9e:	901e      	str	r0, [sp, #120]	@ 0x78
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d1e4      	bne.n	8010b6e <_strtod_l+0x7ba>
 8010ba4:	e64a      	b.n	801083c <_strtod_l+0x488>
 8010ba6:	2c00      	cmp	r4, #0
 8010ba8:	dd07      	ble.n	8010bba <_strtod_l+0x806>
 8010baa:	0022      	movs	r2, r4
 8010bac:	9908      	ldr	r1, [sp, #32]
 8010bae:	9805      	ldr	r0, [sp, #20]
 8010bb0:	f002 fe32 	bl	8013818 <__lshift>
 8010bb4:	9008      	str	r0, [sp, #32]
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	d0e4      	beq.n	8010b84 <_strtod_l+0x7d0>
 8010bba:	2d00      	cmp	r5, #0
 8010bbc:	dd08      	ble.n	8010bd0 <_strtod_l+0x81c>
 8010bbe:	002a      	movs	r2, r5
 8010bc0:	9907      	ldr	r1, [sp, #28]
 8010bc2:	9805      	ldr	r0, [sp, #20]
 8010bc4:	f002 fe28 	bl	8013818 <__lshift>
 8010bc8:	9007      	str	r0, [sp, #28]
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d100      	bne.n	8010bd0 <_strtod_l+0x81c>
 8010bce:	e635      	b.n	801083c <_strtod_l+0x488>
 8010bd0:	9a08      	ldr	r2, [sp, #32]
 8010bd2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010bd4:	9805      	ldr	r0, [sp, #20]
 8010bd6:	f002 fea7 	bl	8013928 <__mdiff>
 8010bda:	9006      	str	r0, [sp, #24]
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	d100      	bne.n	8010be2 <_strtod_l+0x82e>
 8010be0:	e62c      	b.n	801083c <_strtod_l+0x488>
 8010be2:	68c3      	ldr	r3, [r0, #12]
 8010be4:	9907      	ldr	r1, [sp, #28]
 8010be6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010be8:	2300      	movs	r3, #0
 8010bea:	60c3      	str	r3, [r0, #12]
 8010bec:	f002 fe80 	bl	80138f0 <__mcmp>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	da3b      	bge.n	8010c6c <_strtod_l+0x8b8>
 8010bf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010bf6:	4333      	orrs	r3, r6
 8010bf8:	d167      	bne.n	8010cca <_strtod_l+0x916>
 8010bfa:	033b      	lsls	r3, r7, #12
 8010bfc:	d165      	bne.n	8010cca <_strtod_l+0x916>
 8010bfe:	22d6      	movs	r2, #214	@ 0xd6
 8010c00:	4b37      	ldr	r3, [pc, #220]	@ (8010ce0 <_strtod_l+0x92c>)
 8010c02:	04d2      	lsls	r2, r2, #19
 8010c04:	403b      	ands	r3, r7
 8010c06:	4293      	cmp	r3, r2
 8010c08:	d95f      	bls.n	8010cca <_strtod_l+0x916>
 8010c0a:	9b06      	ldr	r3, [sp, #24]
 8010c0c:	695b      	ldr	r3, [r3, #20]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d103      	bne.n	8010c1a <_strtod_l+0x866>
 8010c12:	9b06      	ldr	r3, [sp, #24]
 8010c14:	691b      	ldr	r3, [r3, #16]
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	dd57      	ble.n	8010cca <_strtod_l+0x916>
 8010c1a:	9906      	ldr	r1, [sp, #24]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	9805      	ldr	r0, [sp, #20]
 8010c20:	f002 fdfa 	bl	8013818 <__lshift>
 8010c24:	9907      	ldr	r1, [sp, #28]
 8010c26:	9006      	str	r0, [sp, #24]
 8010c28:	f002 fe62 	bl	80138f0 <__mcmp>
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	dd4c      	ble.n	8010cca <_strtod_l+0x916>
 8010c30:	4b2b      	ldr	r3, [pc, #172]	@ (8010ce0 <_strtod_l+0x92c>)
 8010c32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c34:	403b      	ands	r3, r7
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	d074      	beq.n	8010d24 <_strtod_l+0x970>
 8010c3a:	22d6      	movs	r2, #214	@ 0xd6
 8010c3c:	04d2      	lsls	r2, r2, #19
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d870      	bhi.n	8010d24 <_strtod_l+0x970>
 8010c42:	22dc      	movs	r2, #220	@ 0xdc
 8010c44:	0492      	lsls	r2, r2, #18
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d800      	bhi.n	8010c4c <_strtod_l+0x898>
 8010c4a:	e693      	b.n	8010974 <_strtod_l+0x5c0>
 8010c4c:	0030      	movs	r0, r6
 8010c4e:	0039      	movs	r1, r7
 8010c50:	4b24      	ldr	r3, [pc, #144]	@ (8010ce4 <_strtod_l+0x930>)
 8010c52:	2200      	movs	r2, #0
 8010c54:	f7f1 fe26 	bl	80028a4 <__aeabi_dmul>
 8010c58:	4b21      	ldr	r3, [pc, #132]	@ (8010ce0 <_strtod_l+0x92c>)
 8010c5a:	0006      	movs	r6, r0
 8010c5c:	000f      	movs	r7, r1
 8010c5e:	420b      	tst	r3, r1
 8010c60:	d000      	beq.n	8010c64 <_strtod_l+0x8b0>
 8010c62:	e5f4      	b.n	801084e <_strtod_l+0x49a>
 8010c64:	2322      	movs	r3, #34	@ 0x22
 8010c66:	9a05      	ldr	r2, [sp, #20]
 8010c68:	6013      	str	r3, [r2, #0]
 8010c6a:	e5f0      	b.n	801084e <_strtod_l+0x49a>
 8010c6c:	970e      	str	r7, [sp, #56]	@ 0x38
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d175      	bne.n	8010d5e <_strtod_l+0x9aa>
 8010c72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010c74:	033b      	lsls	r3, r7, #12
 8010c76:	0b1b      	lsrs	r3, r3, #12
 8010c78:	2a00      	cmp	r2, #0
 8010c7a:	d039      	beq.n	8010cf0 <_strtod_l+0x93c>
 8010c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8010ce8 <_strtod_l+0x934>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d138      	bne.n	8010cf4 <_strtod_l+0x940>
 8010c82:	2101      	movs	r1, #1
 8010c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c86:	4249      	negs	r1, r1
 8010c88:	0032      	movs	r2, r6
 8010c8a:	0008      	movs	r0, r1
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d00b      	beq.n	8010ca8 <_strtod_l+0x8f4>
 8010c90:	24d4      	movs	r4, #212	@ 0xd4
 8010c92:	4b13      	ldr	r3, [pc, #76]	@ (8010ce0 <_strtod_l+0x92c>)
 8010c94:	0008      	movs	r0, r1
 8010c96:	403b      	ands	r3, r7
 8010c98:	04e4      	lsls	r4, r4, #19
 8010c9a:	42a3      	cmp	r3, r4
 8010c9c:	d804      	bhi.n	8010ca8 <_strtod_l+0x8f4>
 8010c9e:	306c      	adds	r0, #108	@ 0x6c
 8010ca0:	0d1b      	lsrs	r3, r3, #20
 8010ca2:	1ac3      	subs	r3, r0, r3
 8010ca4:	4099      	lsls	r1, r3
 8010ca6:	0008      	movs	r0, r1
 8010ca8:	4282      	cmp	r2, r0
 8010caa:	d123      	bne.n	8010cf4 <_strtod_l+0x940>
 8010cac:	4b0f      	ldr	r3, [pc, #60]	@ (8010cec <_strtod_l+0x938>)
 8010cae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010cb0:	4299      	cmp	r1, r3
 8010cb2:	d102      	bne.n	8010cba <_strtod_l+0x906>
 8010cb4:	3201      	adds	r2, #1
 8010cb6:	d100      	bne.n	8010cba <_strtod_l+0x906>
 8010cb8:	e5c0      	b.n	801083c <_strtod_l+0x488>
 8010cba:	4b09      	ldr	r3, [pc, #36]	@ (8010ce0 <_strtod_l+0x92c>)
 8010cbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010cbe:	2600      	movs	r6, #0
 8010cc0:	401a      	ands	r2, r3
 8010cc2:	0013      	movs	r3, r2
 8010cc4:	2280      	movs	r2, #128	@ 0x80
 8010cc6:	0352      	lsls	r2, r2, #13
 8010cc8:	189f      	adds	r7, r3, r2
 8010cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d1bd      	bne.n	8010c4c <_strtod_l+0x898>
 8010cd0:	e5bd      	b.n	801084e <_strtod_l+0x49a>
 8010cd2:	46c0      	nop			@ (mov r8, r8)
 8010cd4:	08017e38 	.word	0x08017e38
 8010cd8:	fffffc02 	.word	0xfffffc02
 8010cdc:	fffffbe2 	.word	0xfffffbe2
 8010ce0:	7ff00000 	.word	0x7ff00000
 8010ce4:	39500000 	.word	0x39500000
 8010ce8:	000fffff 	.word	0x000fffff
 8010cec:	7fefffff 	.word	0x7fefffff
 8010cf0:	4333      	orrs	r3, r6
 8010cf2:	d09d      	beq.n	8010c30 <_strtod_l+0x87c>
 8010cf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d01c      	beq.n	8010d34 <_strtod_l+0x980>
 8010cfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cfc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010cfe:	4213      	tst	r3, r2
 8010d00:	d0e3      	beq.n	8010cca <_strtod_l+0x916>
 8010d02:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d04:	0030      	movs	r0, r6
 8010d06:	0039      	movs	r1, r7
 8010d08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d016      	beq.n	8010d3c <_strtod_l+0x988>
 8010d0e:	f7ff fb39 	bl	8010384 <sulp>
 8010d12:	0002      	movs	r2, r0
 8010d14:	000b      	movs	r3, r1
 8010d16:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010d18:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010d1a:	f7f0 fdc3 	bl	80018a4 <__aeabi_dadd>
 8010d1e:	0006      	movs	r6, r0
 8010d20:	000f      	movs	r7, r1
 8010d22:	e7d2      	b.n	8010cca <_strtod_l+0x916>
 8010d24:	2601      	movs	r6, #1
 8010d26:	4a92      	ldr	r2, [pc, #584]	@ (8010f70 <_strtod_l+0xbbc>)
 8010d28:	4276      	negs	r6, r6
 8010d2a:	189b      	adds	r3, r3, r2
 8010d2c:	4a91      	ldr	r2, [pc, #580]	@ (8010f74 <_strtod_l+0xbc0>)
 8010d2e:	431a      	orrs	r2, r3
 8010d30:	0017      	movs	r7, r2
 8010d32:	e7ca      	b.n	8010cca <_strtod_l+0x916>
 8010d34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010d36:	4233      	tst	r3, r6
 8010d38:	d0c7      	beq.n	8010cca <_strtod_l+0x916>
 8010d3a:	e7e2      	b.n	8010d02 <_strtod_l+0x94e>
 8010d3c:	f7ff fb22 	bl	8010384 <sulp>
 8010d40:	0002      	movs	r2, r0
 8010d42:	000b      	movs	r3, r1
 8010d44:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010d46:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010d48:	f7f2 f892 	bl	8002e70 <__aeabi_dsub>
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	2300      	movs	r3, #0
 8010d50:	0006      	movs	r6, r0
 8010d52:	000f      	movs	r7, r1
 8010d54:	f7ef fb82 	bl	800045c <__aeabi_dcmpeq>
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	d0b6      	beq.n	8010cca <_strtod_l+0x916>
 8010d5c:	e60a      	b.n	8010974 <_strtod_l+0x5c0>
 8010d5e:	9907      	ldr	r1, [sp, #28]
 8010d60:	9806      	ldr	r0, [sp, #24]
 8010d62:	f002 ff47 	bl	8013bf4 <__ratio>
 8010d66:	2380      	movs	r3, #128	@ 0x80
 8010d68:	2200      	movs	r2, #0
 8010d6a:	05db      	lsls	r3, r3, #23
 8010d6c:	0004      	movs	r4, r0
 8010d6e:	000d      	movs	r5, r1
 8010d70:	f7ef fb84 	bl	800047c <__aeabi_dcmple>
 8010d74:	2800      	cmp	r0, #0
 8010d76:	d06c      	beq.n	8010e52 <_strtod_l+0xa9e>
 8010d78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d177      	bne.n	8010e6e <_strtod_l+0xaba>
 8010d7e:	2e00      	cmp	r6, #0
 8010d80:	d157      	bne.n	8010e32 <_strtod_l+0xa7e>
 8010d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d84:	031b      	lsls	r3, r3, #12
 8010d86:	d15a      	bne.n	8010e3e <_strtod_l+0xa8a>
 8010d88:	2200      	movs	r2, #0
 8010d8a:	0020      	movs	r0, r4
 8010d8c:	0029      	movs	r1, r5
 8010d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8010f78 <_strtod_l+0xbc4>)
 8010d90:	f7ef fb6a 	bl	8000468 <__aeabi_dcmplt>
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d159      	bne.n	8010e4c <_strtod_l+0xa98>
 8010d98:	0020      	movs	r0, r4
 8010d9a:	0029      	movs	r1, r5
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	4b77      	ldr	r3, [pc, #476]	@ (8010f7c <_strtod_l+0xbc8>)
 8010da0:	f7f1 fd80 	bl	80028a4 <__aeabi_dmul>
 8010da4:	0004      	movs	r4, r0
 8010da6:	000d      	movs	r5, r1
 8010da8:	2380      	movs	r3, #128	@ 0x80
 8010daa:	061b      	lsls	r3, r3, #24
 8010dac:	18eb      	adds	r3, r5, r3
 8010dae:	940a      	str	r4, [sp, #40]	@ 0x28
 8010db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010db2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010db4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010db6:	9216      	str	r2, [sp, #88]	@ 0x58
 8010db8:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010dba:	4a71      	ldr	r2, [pc, #452]	@ (8010f80 <_strtod_l+0xbcc>)
 8010dbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dbe:	4013      	ands	r3, r2
 8010dc0:	9315      	str	r3, [sp, #84]	@ 0x54
 8010dc2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8010f84 <_strtod_l+0xbd0>)
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d000      	beq.n	8010dcc <_strtod_l+0xa18>
 8010dca:	e087      	b.n	8010edc <_strtod_l+0xb28>
 8010dcc:	4a6e      	ldr	r2, [pc, #440]	@ (8010f88 <_strtod_l+0xbd4>)
 8010dce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dd0:	4694      	mov	ip, r2
 8010dd2:	4463      	add	r3, ip
 8010dd4:	001f      	movs	r7, r3
 8010dd6:	0030      	movs	r0, r6
 8010dd8:	0019      	movs	r1, r3
 8010dda:	f002 fe3f 	bl	8013a5c <__ulp>
 8010dde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010de0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010de2:	f7f1 fd5f 	bl	80028a4 <__aeabi_dmul>
 8010de6:	0032      	movs	r2, r6
 8010de8:	003b      	movs	r3, r7
 8010dea:	f7f0 fd5b 	bl	80018a4 <__aeabi_dadd>
 8010dee:	4a64      	ldr	r2, [pc, #400]	@ (8010f80 <_strtod_l+0xbcc>)
 8010df0:	4b66      	ldr	r3, [pc, #408]	@ (8010f8c <_strtod_l+0xbd8>)
 8010df2:	0006      	movs	r6, r0
 8010df4:	400a      	ands	r2, r1
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d940      	bls.n	8010e7c <_strtod_l+0xac8>
 8010dfa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010dfc:	4a64      	ldr	r2, [pc, #400]	@ (8010f90 <_strtod_l+0xbdc>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d103      	bne.n	8010e0a <_strtod_l+0xa56>
 8010e02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e04:	3301      	adds	r3, #1
 8010e06:	d100      	bne.n	8010e0a <_strtod_l+0xa56>
 8010e08:	e518      	b.n	801083c <_strtod_l+0x488>
 8010e0a:	2601      	movs	r6, #1
 8010e0c:	4f60      	ldr	r7, [pc, #384]	@ (8010f90 <_strtod_l+0xbdc>)
 8010e0e:	4276      	negs	r6, r6
 8010e10:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010e12:	9805      	ldr	r0, [sp, #20]
 8010e14:	f002 fade 	bl	80133d4 <_Bfree>
 8010e18:	9908      	ldr	r1, [sp, #32]
 8010e1a:	9805      	ldr	r0, [sp, #20]
 8010e1c:	f002 fada 	bl	80133d4 <_Bfree>
 8010e20:	9907      	ldr	r1, [sp, #28]
 8010e22:	9805      	ldr	r0, [sp, #20]
 8010e24:	f002 fad6 	bl	80133d4 <_Bfree>
 8010e28:	9906      	ldr	r1, [sp, #24]
 8010e2a:	9805      	ldr	r0, [sp, #20]
 8010e2c:	f002 fad2 	bl	80133d4 <_Bfree>
 8010e30:	e617      	b.n	8010a62 <_strtod_l+0x6ae>
 8010e32:	2e01      	cmp	r6, #1
 8010e34:	d103      	bne.n	8010e3e <_strtod_l+0xa8a>
 8010e36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d100      	bne.n	8010e3e <_strtod_l+0xa8a>
 8010e3c:	e59a      	b.n	8010974 <_strtod_l+0x5c0>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	4c54      	ldr	r4, [pc, #336]	@ (8010f94 <_strtod_l+0xbe0>)
 8010e42:	4d4d      	ldr	r5, [pc, #308]	@ (8010f78 <_strtod_l+0xbc4>)
 8010e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010e48:	2400      	movs	r4, #0
 8010e4a:	e7b2      	b.n	8010db2 <_strtod_l+0x9fe>
 8010e4c:	2400      	movs	r4, #0
 8010e4e:	4d4b      	ldr	r5, [pc, #300]	@ (8010f7c <_strtod_l+0xbc8>)
 8010e50:	e7aa      	b.n	8010da8 <_strtod_l+0x9f4>
 8010e52:	0020      	movs	r0, r4
 8010e54:	0029      	movs	r1, r5
 8010e56:	4b49      	ldr	r3, [pc, #292]	@ (8010f7c <_strtod_l+0xbc8>)
 8010e58:	2200      	movs	r2, #0
 8010e5a:	f7f1 fd23 	bl	80028a4 <__aeabi_dmul>
 8010e5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010e60:	0004      	movs	r4, r0
 8010e62:	000d      	movs	r5, r1
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d09f      	beq.n	8010da8 <_strtod_l+0x9f4>
 8010e68:	940a      	str	r4, [sp, #40]	@ 0x28
 8010e6a:	950b      	str	r5, [sp, #44]	@ 0x2c
 8010e6c:	e7a1      	b.n	8010db2 <_strtod_l+0x9fe>
 8010e6e:	2300      	movs	r3, #0
 8010e70:	4c41      	ldr	r4, [pc, #260]	@ (8010f78 <_strtod_l+0xbc4>)
 8010e72:	0025      	movs	r5, r4
 8010e74:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010e78:	001c      	movs	r4, r3
 8010e7a:	e79a      	b.n	8010db2 <_strtod_l+0x9fe>
 8010e7c:	23d4      	movs	r3, #212	@ 0xd4
 8010e7e:	049b      	lsls	r3, r3, #18
 8010e80:	18cf      	adds	r7, r1, r3
 8010e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e84:	9710      	str	r7, [sp, #64]	@ 0x40
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d1c2      	bne.n	8010e10 <_strtod_l+0xa5c>
 8010e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8010f80 <_strtod_l+0xbcc>)
 8010e8c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010e8e:	403b      	ands	r3, r7
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d1bd      	bne.n	8010e10 <_strtod_l+0xa5c>
 8010e94:	0020      	movs	r0, r4
 8010e96:	0029      	movs	r1, r5
 8010e98:	f7ef fb9e 	bl	80005d8 <__aeabi_d2lz>
 8010e9c:	f7ef fbd6 	bl	800064c <__aeabi_l2d>
 8010ea0:	0002      	movs	r2, r0
 8010ea2:	000b      	movs	r3, r1
 8010ea4:	0020      	movs	r0, r4
 8010ea6:	0029      	movs	r1, r5
 8010ea8:	f7f1 ffe2 	bl	8002e70 <__aeabi_dsub>
 8010eac:	033c      	lsls	r4, r7, #12
 8010eae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010eb0:	0b24      	lsrs	r4, r4, #12
 8010eb2:	4334      	orrs	r4, r6
 8010eb4:	900e      	str	r0, [sp, #56]	@ 0x38
 8010eb6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010eb8:	4a37      	ldr	r2, [pc, #220]	@ (8010f98 <_strtod_l+0xbe4>)
 8010eba:	431c      	orrs	r4, r3
 8010ebc:	d052      	beq.n	8010f64 <_strtod_l+0xbb0>
 8010ebe:	4b37      	ldr	r3, [pc, #220]	@ (8010f9c <_strtod_l+0xbe8>)
 8010ec0:	f7ef fad2 	bl	8000468 <__aeabi_dcmplt>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	d000      	beq.n	8010eca <_strtod_l+0xb16>
 8010ec8:	e4c1      	b.n	801084e <_strtod_l+0x49a>
 8010eca:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8010ecc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010ece:	4a34      	ldr	r2, [pc, #208]	@ (8010fa0 <_strtod_l+0xbec>)
 8010ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8010f7c <_strtod_l+0xbc8>)
 8010ed2:	f7ef fadd 	bl	8000490 <__aeabi_dcmpgt>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	d09a      	beq.n	8010e10 <_strtod_l+0xa5c>
 8010eda:	e4b8      	b.n	801084e <_strtod_l+0x49a>
 8010edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d02a      	beq.n	8010f38 <_strtod_l+0xb84>
 8010ee2:	23d4      	movs	r3, #212	@ 0xd4
 8010ee4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010ee6:	04db      	lsls	r3, r3, #19
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d825      	bhi.n	8010f38 <_strtod_l+0xb84>
 8010eec:	0020      	movs	r0, r4
 8010eee:	0029      	movs	r1, r5
 8010ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8010fa4 <_strtod_l+0xbf0>)
 8010ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8010fa8 <_strtod_l+0xbf4>)
 8010ef4:	f7ef fac2 	bl	800047c <__aeabi_dcmple>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d016      	beq.n	8010f2a <_strtod_l+0xb76>
 8010efc:	0020      	movs	r0, r4
 8010efe:	0029      	movs	r1, r5
 8010f00:	f7ef fb4c 	bl	800059c <__aeabi_d2uiz>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d100      	bne.n	8010f0a <_strtod_l+0xb56>
 8010f08:	3001      	adds	r0, #1
 8010f0a:	f7f2 fc47 	bl	800379c <__aeabi_ui2d>
 8010f0e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010f10:	0004      	movs	r4, r0
 8010f12:	000d      	movs	r5, r1
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d122      	bne.n	8010f5e <_strtod_l+0xbaa>
 8010f18:	2380      	movs	r3, #128	@ 0x80
 8010f1a:	061b      	lsls	r3, r3, #24
 8010f1c:	18cb      	adds	r3, r1, r3
 8010f1e:	9018      	str	r0, [sp, #96]	@ 0x60
 8010f20:	9319      	str	r3, [sp, #100]	@ 0x64
 8010f22:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010f24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f26:	9216      	str	r2, [sp, #88]	@ 0x58
 8010f28:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010f2a:	22d6      	movs	r2, #214	@ 0xd6
 8010f2c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f2e:	04d2      	lsls	r2, r2, #19
 8010f30:	189b      	adds	r3, r3, r2
 8010f32:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010f34:	1a9b      	subs	r3, r3, r2
 8010f36:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010f38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010f3a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010f3c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8010f3e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8010f40:	f002 fd8c 	bl	8013a5c <__ulp>
 8010f44:	0002      	movs	r2, r0
 8010f46:	000b      	movs	r3, r1
 8010f48:	0030      	movs	r0, r6
 8010f4a:	0039      	movs	r1, r7
 8010f4c:	f7f1 fcaa 	bl	80028a4 <__aeabi_dmul>
 8010f50:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010f52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010f54:	f7f0 fca6 	bl	80018a4 <__aeabi_dadd>
 8010f58:	0006      	movs	r6, r0
 8010f5a:	000f      	movs	r7, r1
 8010f5c:	e791      	b.n	8010e82 <_strtod_l+0xace>
 8010f5e:	9418      	str	r4, [sp, #96]	@ 0x60
 8010f60:	9519      	str	r5, [sp, #100]	@ 0x64
 8010f62:	e7de      	b.n	8010f22 <_strtod_l+0xb6e>
 8010f64:	4b11      	ldr	r3, [pc, #68]	@ (8010fac <_strtod_l+0xbf8>)
 8010f66:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8010f68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010f6a:	f7ef fa7d 	bl	8000468 <__aeabi_dcmplt>
 8010f6e:	e7b2      	b.n	8010ed6 <_strtod_l+0xb22>
 8010f70:	fff00000 	.word	0xfff00000
 8010f74:	000fffff 	.word	0x000fffff
 8010f78:	3ff00000 	.word	0x3ff00000
 8010f7c:	3fe00000 	.word	0x3fe00000
 8010f80:	7ff00000 	.word	0x7ff00000
 8010f84:	7fe00000 	.word	0x7fe00000
 8010f88:	fcb00000 	.word	0xfcb00000
 8010f8c:	7c9fffff 	.word	0x7c9fffff
 8010f90:	7fefffff 	.word	0x7fefffff
 8010f94:	bff00000 	.word	0xbff00000
 8010f98:	94a03595 	.word	0x94a03595
 8010f9c:	3fdfffff 	.word	0x3fdfffff
 8010fa0:	35afe535 	.word	0x35afe535
 8010fa4:	ffc00000 	.word	0xffc00000
 8010fa8:	41dfffff 	.word	0x41dfffff
 8010fac:	3fcfffff 	.word	0x3fcfffff

08010fb0 <strtod>:
 8010fb0:	b510      	push	{r4, lr}
 8010fb2:	4c04      	ldr	r4, [pc, #16]	@ (8010fc4 <strtod+0x14>)
 8010fb4:	000a      	movs	r2, r1
 8010fb6:	0001      	movs	r1, r0
 8010fb8:	4b03      	ldr	r3, [pc, #12]	@ (8010fc8 <strtod+0x18>)
 8010fba:	6820      	ldr	r0, [r4, #0]
 8010fbc:	f7ff f9fa 	bl	80103b4 <_strtod_l>
 8010fc0:	bd10      	pop	{r4, pc}
 8010fc2:	46c0      	nop			@ (mov r8, r8)
 8010fc4:	200001a0 	.word	0x200001a0
 8010fc8:	20000034 	.word	0x20000034

08010fcc <__cvt>:
 8010fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fce:	001f      	movs	r7, r3
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	0016      	movs	r6, r2
 8010fd4:	b08b      	sub	sp, #44	@ 0x2c
 8010fd6:	429f      	cmp	r7, r3
 8010fd8:	da04      	bge.n	8010fe4 <__cvt+0x18>
 8010fda:	2180      	movs	r1, #128	@ 0x80
 8010fdc:	0609      	lsls	r1, r1, #24
 8010fde:	187b      	adds	r3, r7, r1
 8010fe0:	001f      	movs	r7, r3
 8010fe2:	232d      	movs	r3, #45	@ 0x2d
 8010fe4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010fe6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010fe8:	7013      	strb	r3, [r2, #0]
 8010fea:	2320      	movs	r3, #32
 8010fec:	2203      	movs	r2, #3
 8010fee:	439d      	bics	r5, r3
 8010ff0:	2d46      	cmp	r5, #70	@ 0x46
 8010ff2:	d007      	beq.n	8011004 <__cvt+0x38>
 8010ff4:	002b      	movs	r3, r5
 8010ff6:	3b45      	subs	r3, #69	@ 0x45
 8010ff8:	4259      	negs	r1, r3
 8010ffa:	414b      	adcs	r3, r1
 8010ffc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010ffe:	3a01      	subs	r2, #1
 8011000:	18cb      	adds	r3, r1, r3
 8011002:	9310      	str	r3, [sp, #64]	@ 0x40
 8011004:	ab09      	add	r3, sp, #36	@ 0x24
 8011006:	9304      	str	r3, [sp, #16]
 8011008:	ab08      	add	r3, sp, #32
 801100a:	9303      	str	r3, [sp, #12]
 801100c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801100e:	9200      	str	r2, [sp, #0]
 8011010:	9302      	str	r3, [sp, #8]
 8011012:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011014:	0032      	movs	r2, r6
 8011016:	9301      	str	r3, [sp, #4]
 8011018:	003b      	movs	r3, r7
 801101a:	f000 ff35 	bl	8011e88 <_dtoa_r>
 801101e:	0004      	movs	r4, r0
 8011020:	2d47      	cmp	r5, #71	@ 0x47
 8011022:	d11b      	bne.n	801105c <__cvt+0x90>
 8011024:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011026:	07db      	lsls	r3, r3, #31
 8011028:	d511      	bpl.n	801104e <__cvt+0x82>
 801102a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801102c:	18c3      	adds	r3, r0, r3
 801102e:	9307      	str	r3, [sp, #28]
 8011030:	2200      	movs	r2, #0
 8011032:	2300      	movs	r3, #0
 8011034:	0030      	movs	r0, r6
 8011036:	0039      	movs	r1, r7
 8011038:	f7ef fa10 	bl	800045c <__aeabi_dcmpeq>
 801103c:	2800      	cmp	r0, #0
 801103e:	d001      	beq.n	8011044 <__cvt+0x78>
 8011040:	9b07      	ldr	r3, [sp, #28]
 8011042:	9309      	str	r3, [sp, #36]	@ 0x24
 8011044:	2230      	movs	r2, #48	@ 0x30
 8011046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011048:	9907      	ldr	r1, [sp, #28]
 801104a:	428b      	cmp	r3, r1
 801104c:	d320      	bcc.n	8011090 <__cvt+0xc4>
 801104e:	0020      	movs	r0, r4
 8011050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011052:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011054:	1b1b      	subs	r3, r3, r4
 8011056:	6013      	str	r3, [r2, #0]
 8011058:	b00b      	add	sp, #44	@ 0x2c
 801105a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801105c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801105e:	18c3      	adds	r3, r0, r3
 8011060:	9307      	str	r3, [sp, #28]
 8011062:	2d46      	cmp	r5, #70	@ 0x46
 8011064:	d1e4      	bne.n	8011030 <__cvt+0x64>
 8011066:	7803      	ldrb	r3, [r0, #0]
 8011068:	2b30      	cmp	r3, #48	@ 0x30
 801106a:	d10c      	bne.n	8011086 <__cvt+0xba>
 801106c:	2200      	movs	r2, #0
 801106e:	2300      	movs	r3, #0
 8011070:	0030      	movs	r0, r6
 8011072:	0039      	movs	r1, r7
 8011074:	f7ef f9f2 	bl	800045c <__aeabi_dcmpeq>
 8011078:	2800      	cmp	r0, #0
 801107a:	d104      	bne.n	8011086 <__cvt+0xba>
 801107c:	2301      	movs	r3, #1
 801107e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011080:	1a9b      	subs	r3, r3, r2
 8011082:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011084:	6013      	str	r3, [r2, #0]
 8011086:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011088:	9a07      	ldr	r2, [sp, #28]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	18d3      	adds	r3, r2, r3
 801108e:	e7ce      	b.n	801102e <__cvt+0x62>
 8011090:	1c59      	adds	r1, r3, #1
 8011092:	9109      	str	r1, [sp, #36]	@ 0x24
 8011094:	701a      	strb	r2, [r3, #0]
 8011096:	e7d6      	b.n	8011046 <__cvt+0x7a>

08011098 <__exponent>:
 8011098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801109a:	232b      	movs	r3, #43	@ 0x2b
 801109c:	b085      	sub	sp, #20
 801109e:	0005      	movs	r5, r0
 80110a0:	1e0c      	subs	r4, r1, #0
 80110a2:	7002      	strb	r2, [r0, #0]
 80110a4:	da01      	bge.n	80110aa <__exponent+0x12>
 80110a6:	424c      	negs	r4, r1
 80110a8:	3302      	adds	r3, #2
 80110aa:	706b      	strb	r3, [r5, #1]
 80110ac:	2c09      	cmp	r4, #9
 80110ae:	dd2c      	ble.n	801110a <__exponent+0x72>
 80110b0:	ab02      	add	r3, sp, #8
 80110b2:	1dde      	adds	r6, r3, #7
 80110b4:	0020      	movs	r0, r4
 80110b6:	210a      	movs	r1, #10
 80110b8:	f7ef f9ba 	bl	8000430 <__aeabi_idivmod>
 80110bc:	0037      	movs	r7, r6
 80110be:	3130      	adds	r1, #48	@ 0x30
 80110c0:	3e01      	subs	r6, #1
 80110c2:	0020      	movs	r0, r4
 80110c4:	7031      	strb	r1, [r6, #0]
 80110c6:	210a      	movs	r1, #10
 80110c8:	9401      	str	r4, [sp, #4]
 80110ca:	f7ef f8cb 	bl	8000264 <__divsi3>
 80110ce:	9b01      	ldr	r3, [sp, #4]
 80110d0:	0004      	movs	r4, r0
 80110d2:	2b63      	cmp	r3, #99	@ 0x63
 80110d4:	dcee      	bgt.n	80110b4 <__exponent+0x1c>
 80110d6:	1eba      	subs	r2, r7, #2
 80110d8:	1ca8      	adds	r0, r5, #2
 80110da:	0001      	movs	r1, r0
 80110dc:	0013      	movs	r3, r2
 80110de:	3430      	adds	r4, #48	@ 0x30
 80110e0:	7014      	strb	r4, [r2, #0]
 80110e2:	ac02      	add	r4, sp, #8
 80110e4:	3407      	adds	r4, #7
 80110e6:	429c      	cmp	r4, r3
 80110e8:	d80a      	bhi.n	8011100 <__exponent+0x68>
 80110ea:	2300      	movs	r3, #0
 80110ec:	4294      	cmp	r4, r2
 80110ee:	d303      	bcc.n	80110f8 <__exponent+0x60>
 80110f0:	3309      	adds	r3, #9
 80110f2:	aa02      	add	r2, sp, #8
 80110f4:	189b      	adds	r3, r3, r2
 80110f6:	1bdb      	subs	r3, r3, r7
 80110f8:	18c0      	adds	r0, r0, r3
 80110fa:	1b40      	subs	r0, r0, r5
 80110fc:	b005      	add	sp, #20
 80110fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011100:	781c      	ldrb	r4, [r3, #0]
 8011102:	3301      	adds	r3, #1
 8011104:	700c      	strb	r4, [r1, #0]
 8011106:	3101      	adds	r1, #1
 8011108:	e7eb      	b.n	80110e2 <__exponent+0x4a>
 801110a:	2330      	movs	r3, #48	@ 0x30
 801110c:	18e4      	adds	r4, r4, r3
 801110e:	70ab      	strb	r3, [r5, #2]
 8011110:	1d28      	adds	r0, r5, #4
 8011112:	70ec      	strb	r4, [r5, #3]
 8011114:	e7f1      	b.n	80110fa <__exponent+0x62>
	...

08011118 <_printf_float>:
 8011118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801111a:	b097      	sub	sp, #92	@ 0x5c
 801111c:	000d      	movs	r5, r1
 801111e:	920a      	str	r2, [sp, #40]	@ 0x28
 8011120:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8011122:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011124:	9009      	str	r0, [sp, #36]	@ 0x24
 8011126:	f000 fd71 	bl	8011c0c <_localeconv_r>
 801112a:	6803      	ldr	r3, [r0, #0]
 801112c:	0018      	movs	r0, r3
 801112e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011130:	f7ee fff2 	bl	8000118 <strlen>
 8011134:	2300      	movs	r3, #0
 8011136:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011138:	9314      	str	r3, [sp, #80]	@ 0x50
 801113a:	7e2b      	ldrb	r3, [r5, #24]
 801113c:	2207      	movs	r2, #7
 801113e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011140:	682b      	ldr	r3, [r5, #0]
 8011142:	930e      	str	r3, [sp, #56]	@ 0x38
 8011144:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	05c9      	lsls	r1, r1, #23
 801114a:	d545      	bpl.n	80111d8 <_printf_float+0xc0>
 801114c:	189b      	adds	r3, r3, r2
 801114e:	4393      	bics	r3, r2
 8011150:	001a      	movs	r2, r3
 8011152:	3208      	adds	r2, #8
 8011154:	6022      	str	r2, [r4, #0]
 8011156:	2201      	movs	r2, #1
 8011158:	681e      	ldr	r6, [r3, #0]
 801115a:	685f      	ldr	r7, [r3, #4]
 801115c:	007b      	lsls	r3, r7, #1
 801115e:	085b      	lsrs	r3, r3, #1
 8011160:	9311      	str	r3, [sp, #68]	@ 0x44
 8011162:	9610      	str	r6, [sp, #64]	@ 0x40
 8011164:	64ae      	str	r6, [r5, #72]	@ 0x48
 8011166:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8011168:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801116a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801116c:	4ba7      	ldr	r3, [pc, #668]	@ (801140c <_printf_float+0x2f4>)
 801116e:	4252      	negs	r2, r2
 8011170:	f7f2 fa88 	bl	8003684 <__aeabi_dcmpun>
 8011174:	2800      	cmp	r0, #0
 8011176:	d131      	bne.n	80111dc <_printf_float+0xc4>
 8011178:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801117a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801117c:	2201      	movs	r2, #1
 801117e:	4ba3      	ldr	r3, [pc, #652]	@ (801140c <_printf_float+0x2f4>)
 8011180:	4252      	negs	r2, r2
 8011182:	f7ef f97b 	bl	800047c <__aeabi_dcmple>
 8011186:	2800      	cmp	r0, #0
 8011188:	d128      	bne.n	80111dc <_printf_float+0xc4>
 801118a:	2200      	movs	r2, #0
 801118c:	2300      	movs	r3, #0
 801118e:	0030      	movs	r0, r6
 8011190:	0039      	movs	r1, r7
 8011192:	f7ef f969 	bl	8000468 <__aeabi_dcmplt>
 8011196:	2800      	cmp	r0, #0
 8011198:	d003      	beq.n	80111a2 <_printf_float+0x8a>
 801119a:	002b      	movs	r3, r5
 801119c:	222d      	movs	r2, #45	@ 0x2d
 801119e:	3343      	adds	r3, #67	@ 0x43
 80111a0:	701a      	strb	r2, [r3, #0]
 80111a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111a4:	4f9a      	ldr	r7, [pc, #616]	@ (8011410 <_printf_float+0x2f8>)
 80111a6:	2b47      	cmp	r3, #71	@ 0x47
 80111a8:	d800      	bhi.n	80111ac <_printf_float+0x94>
 80111aa:	4f9a      	ldr	r7, [pc, #616]	@ (8011414 <_printf_float+0x2fc>)
 80111ac:	2303      	movs	r3, #3
 80111ae:	2400      	movs	r4, #0
 80111b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111b2:	612b      	str	r3, [r5, #16]
 80111b4:	3301      	adds	r3, #1
 80111b6:	439a      	bics	r2, r3
 80111b8:	602a      	str	r2, [r5, #0]
 80111ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111bc:	0029      	movs	r1, r5
 80111be:	9300      	str	r3, [sp, #0]
 80111c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111c4:	aa15      	add	r2, sp, #84	@ 0x54
 80111c6:	f000 f9e5 	bl	8011594 <_printf_common>
 80111ca:	3001      	adds	r0, #1
 80111cc:	d000      	beq.n	80111d0 <_printf_float+0xb8>
 80111ce:	e09e      	b.n	801130e <_printf_float+0x1f6>
 80111d0:	2001      	movs	r0, #1
 80111d2:	4240      	negs	r0, r0
 80111d4:	b017      	add	sp, #92	@ 0x5c
 80111d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111d8:	3307      	adds	r3, #7
 80111da:	e7b8      	b.n	801114e <_printf_float+0x36>
 80111dc:	0032      	movs	r2, r6
 80111de:	003b      	movs	r3, r7
 80111e0:	0030      	movs	r0, r6
 80111e2:	0039      	movs	r1, r7
 80111e4:	f7f2 fa4e 	bl	8003684 <__aeabi_dcmpun>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d00b      	beq.n	8011204 <_printf_float+0xec>
 80111ec:	2f00      	cmp	r7, #0
 80111ee:	da03      	bge.n	80111f8 <_printf_float+0xe0>
 80111f0:	002b      	movs	r3, r5
 80111f2:	222d      	movs	r2, #45	@ 0x2d
 80111f4:	3343      	adds	r3, #67	@ 0x43
 80111f6:	701a      	strb	r2, [r3, #0]
 80111f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111fa:	4f87      	ldr	r7, [pc, #540]	@ (8011418 <_printf_float+0x300>)
 80111fc:	2b47      	cmp	r3, #71	@ 0x47
 80111fe:	d8d5      	bhi.n	80111ac <_printf_float+0x94>
 8011200:	4f86      	ldr	r7, [pc, #536]	@ (801141c <_printf_float+0x304>)
 8011202:	e7d3      	b.n	80111ac <_printf_float+0x94>
 8011204:	2220      	movs	r2, #32
 8011206:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8011208:	686b      	ldr	r3, [r5, #4]
 801120a:	4394      	bics	r4, r2
 801120c:	1c5a      	adds	r2, r3, #1
 801120e:	d146      	bne.n	801129e <_printf_float+0x186>
 8011210:	3307      	adds	r3, #7
 8011212:	606b      	str	r3, [r5, #4]
 8011214:	2380      	movs	r3, #128	@ 0x80
 8011216:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011218:	00db      	lsls	r3, r3, #3
 801121a:	4313      	orrs	r3, r2
 801121c:	2200      	movs	r2, #0
 801121e:	602b      	str	r3, [r5, #0]
 8011220:	9206      	str	r2, [sp, #24]
 8011222:	aa14      	add	r2, sp, #80	@ 0x50
 8011224:	9205      	str	r2, [sp, #20]
 8011226:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011228:	a90a      	add	r1, sp, #40	@ 0x28
 801122a:	9204      	str	r2, [sp, #16]
 801122c:	aa13      	add	r2, sp, #76	@ 0x4c
 801122e:	9203      	str	r2, [sp, #12]
 8011230:	2223      	movs	r2, #35	@ 0x23
 8011232:	1852      	adds	r2, r2, r1
 8011234:	9202      	str	r2, [sp, #8]
 8011236:	9301      	str	r3, [sp, #4]
 8011238:	686b      	ldr	r3, [r5, #4]
 801123a:	0032      	movs	r2, r6
 801123c:	9300      	str	r3, [sp, #0]
 801123e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011240:	003b      	movs	r3, r7
 8011242:	f7ff fec3 	bl	8010fcc <__cvt>
 8011246:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011248:	0007      	movs	r7, r0
 801124a:	2c47      	cmp	r4, #71	@ 0x47
 801124c:	d12d      	bne.n	80112aa <_printf_float+0x192>
 801124e:	1cd3      	adds	r3, r2, #3
 8011250:	db02      	blt.n	8011258 <_printf_float+0x140>
 8011252:	686b      	ldr	r3, [r5, #4]
 8011254:	429a      	cmp	r2, r3
 8011256:	dd47      	ble.n	80112e8 <_printf_float+0x1d0>
 8011258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801125a:	3b02      	subs	r3, #2
 801125c:	b2db      	uxtb	r3, r3
 801125e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011260:	0028      	movs	r0, r5
 8011262:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011264:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011266:	3901      	subs	r1, #1
 8011268:	3050      	adds	r0, #80	@ 0x50
 801126a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801126c:	f7ff ff14 	bl	8011098 <__exponent>
 8011270:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011272:	0004      	movs	r4, r0
 8011274:	1813      	adds	r3, r2, r0
 8011276:	612b      	str	r3, [r5, #16]
 8011278:	2a01      	cmp	r2, #1
 801127a:	dc02      	bgt.n	8011282 <_printf_float+0x16a>
 801127c:	682a      	ldr	r2, [r5, #0]
 801127e:	07d2      	lsls	r2, r2, #31
 8011280:	d501      	bpl.n	8011286 <_printf_float+0x16e>
 8011282:	3301      	adds	r3, #1
 8011284:	612b      	str	r3, [r5, #16]
 8011286:	2323      	movs	r3, #35	@ 0x23
 8011288:	aa0a      	add	r2, sp, #40	@ 0x28
 801128a:	189b      	adds	r3, r3, r2
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d100      	bne.n	8011294 <_printf_float+0x17c>
 8011292:	e792      	b.n	80111ba <_printf_float+0xa2>
 8011294:	002b      	movs	r3, r5
 8011296:	222d      	movs	r2, #45	@ 0x2d
 8011298:	3343      	adds	r3, #67	@ 0x43
 801129a:	701a      	strb	r2, [r3, #0]
 801129c:	e78d      	b.n	80111ba <_printf_float+0xa2>
 801129e:	2c47      	cmp	r4, #71	@ 0x47
 80112a0:	d1b8      	bne.n	8011214 <_printf_float+0xfc>
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d1b6      	bne.n	8011214 <_printf_float+0xfc>
 80112a6:	3301      	adds	r3, #1
 80112a8:	e7b3      	b.n	8011212 <_printf_float+0xfa>
 80112aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80112ac:	2b65      	cmp	r3, #101	@ 0x65
 80112ae:	d9d7      	bls.n	8011260 <_printf_float+0x148>
 80112b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80112b2:	2b66      	cmp	r3, #102	@ 0x66
 80112b4:	d11a      	bne.n	80112ec <_printf_float+0x1d4>
 80112b6:	686b      	ldr	r3, [r5, #4]
 80112b8:	2a00      	cmp	r2, #0
 80112ba:	dd09      	ble.n	80112d0 <_printf_float+0x1b8>
 80112bc:	612a      	str	r2, [r5, #16]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d102      	bne.n	80112c8 <_printf_float+0x1b0>
 80112c2:	6829      	ldr	r1, [r5, #0]
 80112c4:	07c9      	lsls	r1, r1, #31
 80112c6:	d50b      	bpl.n	80112e0 <_printf_float+0x1c8>
 80112c8:	3301      	adds	r3, #1
 80112ca:	189b      	adds	r3, r3, r2
 80112cc:	612b      	str	r3, [r5, #16]
 80112ce:	e007      	b.n	80112e0 <_printf_float+0x1c8>
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d103      	bne.n	80112dc <_printf_float+0x1c4>
 80112d4:	2201      	movs	r2, #1
 80112d6:	6829      	ldr	r1, [r5, #0]
 80112d8:	4211      	tst	r1, r2
 80112da:	d000      	beq.n	80112de <_printf_float+0x1c6>
 80112dc:	1c9a      	adds	r2, r3, #2
 80112de:	612a      	str	r2, [r5, #16]
 80112e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80112e2:	2400      	movs	r4, #0
 80112e4:	65ab      	str	r3, [r5, #88]	@ 0x58
 80112e6:	e7ce      	b.n	8011286 <_printf_float+0x16e>
 80112e8:	2367      	movs	r3, #103	@ 0x67
 80112ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80112ec:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80112ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80112f0:	4299      	cmp	r1, r3
 80112f2:	db06      	blt.n	8011302 <_printf_float+0x1ea>
 80112f4:	682b      	ldr	r3, [r5, #0]
 80112f6:	6129      	str	r1, [r5, #16]
 80112f8:	07db      	lsls	r3, r3, #31
 80112fa:	d5f1      	bpl.n	80112e0 <_printf_float+0x1c8>
 80112fc:	3101      	adds	r1, #1
 80112fe:	6129      	str	r1, [r5, #16]
 8011300:	e7ee      	b.n	80112e0 <_printf_float+0x1c8>
 8011302:	2201      	movs	r2, #1
 8011304:	2900      	cmp	r1, #0
 8011306:	dce0      	bgt.n	80112ca <_printf_float+0x1b2>
 8011308:	1892      	adds	r2, r2, r2
 801130a:	1a52      	subs	r2, r2, r1
 801130c:	e7dd      	b.n	80112ca <_printf_float+0x1b2>
 801130e:	682a      	ldr	r2, [r5, #0]
 8011310:	0553      	lsls	r3, r2, #21
 8011312:	d408      	bmi.n	8011326 <_printf_float+0x20e>
 8011314:	692b      	ldr	r3, [r5, #16]
 8011316:	003a      	movs	r2, r7
 8011318:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801131a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801131c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801131e:	47a0      	blx	r4
 8011320:	3001      	adds	r0, #1
 8011322:	d129      	bne.n	8011378 <_printf_float+0x260>
 8011324:	e754      	b.n	80111d0 <_printf_float+0xb8>
 8011326:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011328:	2b65      	cmp	r3, #101	@ 0x65
 801132a:	d800      	bhi.n	801132e <_printf_float+0x216>
 801132c:	e0db      	b.n	80114e6 <_printf_float+0x3ce>
 801132e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8011330:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011332:	2200      	movs	r2, #0
 8011334:	2300      	movs	r3, #0
 8011336:	f7ef f891 	bl	800045c <__aeabi_dcmpeq>
 801133a:	2800      	cmp	r0, #0
 801133c:	d033      	beq.n	80113a6 <_printf_float+0x28e>
 801133e:	2301      	movs	r3, #1
 8011340:	4a37      	ldr	r2, [pc, #220]	@ (8011420 <_printf_float+0x308>)
 8011342:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011344:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011346:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8011348:	47a0      	blx	r4
 801134a:	3001      	adds	r0, #1
 801134c:	d100      	bne.n	8011350 <_printf_float+0x238>
 801134e:	e73f      	b.n	80111d0 <_printf_float+0xb8>
 8011350:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8011352:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011354:	42b3      	cmp	r3, r6
 8011356:	db02      	blt.n	801135e <_printf_float+0x246>
 8011358:	682b      	ldr	r3, [r5, #0]
 801135a:	07db      	lsls	r3, r3, #31
 801135c:	d50c      	bpl.n	8011378 <_printf_float+0x260>
 801135e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8011360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011362:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011364:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011368:	47a0      	blx	r4
 801136a:	2400      	movs	r4, #0
 801136c:	3001      	adds	r0, #1
 801136e:	d100      	bne.n	8011372 <_printf_float+0x25a>
 8011370:	e72e      	b.n	80111d0 <_printf_float+0xb8>
 8011372:	1e73      	subs	r3, r6, #1
 8011374:	42a3      	cmp	r3, r4
 8011376:	dc0a      	bgt.n	801138e <_printf_float+0x276>
 8011378:	682b      	ldr	r3, [r5, #0]
 801137a:	079b      	lsls	r3, r3, #30
 801137c:	d500      	bpl.n	8011380 <_printf_float+0x268>
 801137e:	e106      	b.n	801158e <_printf_float+0x476>
 8011380:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011382:	68e8      	ldr	r0, [r5, #12]
 8011384:	4298      	cmp	r0, r3
 8011386:	db00      	blt.n	801138a <_printf_float+0x272>
 8011388:	e724      	b.n	80111d4 <_printf_float+0xbc>
 801138a:	0018      	movs	r0, r3
 801138c:	e722      	b.n	80111d4 <_printf_float+0xbc>
 801138e:	002a      	movs	r2, r5
 8011390:	2301      	movs	r3, #1
 8011392:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011394:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011396:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011398:	321a      	adds	r2, #26
 801139a:	47b8      	blx	r7
 801139c:	3001      	adds	r0, #1
 801139e:	d100      	bne.n	80113a2 <_printf_float+0x28a>
 80113a0:	e716      	b.n	80111d0 <_printf_float+0xb8>
 80113a2:	3401      	adds	r4, #1
 80113a4:	e7e5      	b.n	8011372 <_printf_float+0x25a>
 80113a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	dc3b      	bgt.n	8011424 <_printf_float+0x30c>
 80113ac:	2301      	movs	r3, #1
 80113ae:	4a1c      	ldr	r2, [pc, #112]	@ (8011420 <_printf_float+0x308>)
 80113b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80113b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80113b6:	47a0      	blx	r4
 80113b8:	3001      	adds	r0, #1
 80113ba:	d100      	bne.n	80113be <_printf_float+0x2a6>
 80113bc:	e708      	b.n	80111d0 <_printf_float+0xb8>
 80113be:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80113c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80113c2:	4333      	orrs	r3, r6
 80113c4:	d102      	bne.n	80113cc <_printf_float+0x2b4>
 80113c6:	682b      	ldr	r3, [r5, #0]
 80113c8:	07db      	lsls	r3, r3, #31
 80113ca:	d5d5      	bpl.n	8011378 <_printf_float+0x260>
 80113cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80113d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80113d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80113d6:	47a0      	blx	r4
 80113d8:	2300      	movs	r3, #0
 80113da:	3001      	adds	r0, #1
 80113dc:	d100      	bne.n	80113e0 <_printf_float+0x2c8>
 80113de:	e6f7      	b.n	80111d0 <_printf_float+0xb8>
 80113e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80113e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80113e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80113e6:	425b      	negs	r3, r3
 80113e8:	4293      	cmp	r3, r2
 80113ea:	dc01      	bgt.n	80113f0 <_printf_float+0x2d8>
 80113ec:	0033      	movs	r3, r6
 80113ee:	e792      	b.n	8011316 <_printf_float+0x1fe>
 80113f0:	002a      	movs	r2, r5
 80113f2:	2301      	movs	r3, #1
 80113f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80113f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80113fa:	321a      	adds	r2, #26
 80113fc:	47a0      	blx	r4
 80113fe:	3001      	adds	r0, #1
 8011400:	d100      	bne.n	8011404 <_printf_float+0x2ec>
 8011402:	e6e5      	b.n	80111d0 <_printf_float+0xb8>
 8011404:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011406:	3301      	adds	r3, #1
 8011408:	e7ea      	b.n	80113e0 <_printf_float+0x2c8>
 801140a:	46c0      	nop			@ (mov r8, r8)
 801140c:	7fefffff 	.word	0x7fefffff
 8011410:	08017be6 	.word	0x08017be6
 8011414:	08017be2 	.word	0x08017be2
 8011418:	08017bee 	.word	0x08017bee
 801141c:	08017bea 	.word	0x08017bea
 8011420:	08017bf2 	.word	0x08017bf2
 8011424:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011426:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8011428:	930c      	str	r3, [sp, #48]	@ 0x30
 801142a:	429e      	cmp	r6, r3
 801142c:	dd00      	ble.n	8011430 <_printf_float+0x318>
 801142e:	001e      	movs	r6, r3
 8011430:	2e00      	cmp	r6, #0
 8011432:	dc31      	bgt.n	8011498 <_printf_float+0x380>
 8011434:	43f3      	mvns	r3, r6
 8011436:	2400      	movs	r4, #0
 8011438:	17db      	asrs	r3, r3, #31
 801143a:	4033      	ands	r3, r6
 801143c:	930e      	str	r3, [sp, #56]	@ 0x38
 801143e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8011440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011442:	1af3      	subs	r3, r6, r3
 8011444:	42a3      	cmp	r3, r4
 8011446:	dc30      	bgt.n	80114aa <_printf_float+0x392>
 8011448:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801144a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801144c:	429a      	cmp	r2, r3
 801144e:	dc38      	bgt.n	80114c2 <_printf_float+0x3aa>
 8011450:	682b      	ldr	r3, [r5, #0]
 8011452:	07db      	lsls	r3, r3, #31
 8011454:	d435      	bmi.n	80114c2 <_printf_float+0x3aa>
 8011456:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8011458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801145a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801145c:	1b9b      	subs	r3, r3, r6
 801145e:	1b14      	subs	r4, r2, r4
 8011460:	429c      	cmp	r4, r3
 8011462:	dd00      	ble.n	8011466 <_printf_float+0x34e>
 8011464:	001c      	movs	r4, r3
 8011466:	2c00      	cmp	r4, #0
 8011468:	dc34      	bgt.n	80114d4 <_printf_float+0x3bc>
 801146a:	43e3      	mvns	r3, r4
 801146c:	2600      	movs	r6, #0
 801146e:	17db      	asrs	r3, r3, #31
 8011470:	401c      	ands	r4, r3
 8011472:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011474:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011476:	1ad3      	subs	r3, r2, r3
 8011478:	1b1b      	subs	r3, r3, r4
 801147a:	42b3      	cmp	r3, r6
 801147c:	dc00      	bgt.n	8011480 <_printf_float+0x368>
 801147e:	e77b      	b.n	8011378 <_printf_float+0x260>
 8011480:	002a      	movs	r2, r5
 8011482:	2301      	movs	r3, #1
 8011484:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011488:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801148a:	321a      	adds	r2, #26
 801148c:	47b8      	blx	r7
 801148e:	3001      	adds	r0, #1
 8011490:	d100      	bne.n	8011494 <_printf_float+0x37c>
 8011492:	e69d      	b.n	80111d0 <_printf_float+0xb8>
 8011494:	3601      	adds	r6, #1
 8011496:	e7ec      	b.n	8011472 <_printf_float+0x35a>
 8011498:	0033      	movs	r3, r6
 801149a:	003a      	movs	r2, r7
 801149c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801149e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80114a2:	47a0      	blx	r4
 80114a4:	3001      	adds	r0, #1
 80114a6:	d1c5      	bne.n	8011434 <_printf_float+0x31c>
 80114a8:	e692      	b.n	80111d0 <_printf_float+0xb8>
 80114aa:	002a      	movs	r2, r5
 80114ac:	2301      	movs	r3, #1
 80114ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80114b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114b2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80114b4:	321a      	adds	r2, #26
 80114b6:	47b0      	blx	r6
 80114b8:	3001      	adds	r0, #1
 80114ba:	d100      	bne.n	80114be <_printf_float+0x3a6>
 80114bc:	e688      	b.n	80111d0 <_printf_float+0xb8>
 80114be:	3401      	adds	r4, #1
 80114c0:	e7bd      	b.n	801143e <_printf_float+0x326>
 80114c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80114c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80114c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80114cc:	47a0      	blx	r4
 80114ce:	3001      	adds	r0, #1
 80114d0:	d1c1      	bne.n	8011456 <_printf_float+0x33e>
 80114d2:	e67d      	b.n	80111d0 <_printf_float+0xb8>
 80114d4:	19ba      	adds	r2, r7, r6
 80114d6:	0023      	movs	r3, r4
 80114d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80114da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80114de:	47b0      	blx	r6
 80114e0:	3001      	adds	r0, #1
 80114e2:	d1c2      	bne.n	801146a <_printf_float+0x352>
 80114e4:	e674      	b.n	80111d0 <_printf_float+0xb8>
 80114e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80114e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	dc02      	bgt.n	80114f4 <_printf_float+0x3dc>
 80114ee:	2301      	movs	r3, #1
 80114f0:	421a      	tst	r2, r3
 80114f2:	d039      	beq.n	8011568 <_printf_float+0x450>
 80114f4:	2301      	movs	r3, #1
 80114f6:	003a      	movs	r2, r7
 80114f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80114fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114fc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80114fe:	47b0      	blx	r6
 8011500:	3001      	adds	r0, #1
 8011502:	d100      	bne.n	8011506 <_printf_float+0x3ee>
 8011504:	e664      	b.n	80111d0 <_printf_float+0xb8>
 8011506:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011508:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801150a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801150c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801150e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011510:	47b0      	blx	r6
 8011512:	3001      	adds	r0, #1
 8011514:	d100      	bne.n	8011518 <_printf_float+0x400>
 8011516:	e65b      	b.n	80111d0 <_printf_float+0xb8>
 8011518:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801151a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801151c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801151e:	2200      	movs	r2, #0
 8011520:	3b01      	subs	r3, #1
 8011522:	930c      	str	r3, [sp, #48]	@ 0x30
 8011524:	2300      	movs	r3, #0
 8011526:	f7ee ff99 	bl	800045c <__aeabi_dcmpeq>
 801152a:	2800      	cmp	r0, #0
 801152c:	d11a      	bne.n	8011564 <_printf_float+0x44c>
 801152e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011530:	1c7a      	adds	r2, r7, #1
 8011532:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011534:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011536:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011538:	47b0      	blx	r6
 801153a:	3001      	adds	r0, #1
 801153c:	d10e      	bne.n	801155c <_printf_float+0x444>
 801153e:	e647      	b.n	80111d0 <_printf_float+0xb8>
 8011540:	002a      	movs	r2, r5
 8011542:	2301      	movs	r3, #1
 8011544:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011548:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801154a:	321a      	adds	r2, #26
 801154c:	47b8      	blx	r7
 801154e:	3001      	adds	r0, #1
 8011550:	d100      	bne.n	8011554 <_printf_float+0x43c>
 8011552:	e63d      	b.n	80111d0 <_printf_float+0xb8>
 8011554:	3601      	adds	r6, #1
 8011556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011558:	429e      	cmp	r6, r3
 801155a:	dbf1      	blt.n	8011540 <_printf_float+0x428>
 801155c:	002a      	movs	r2, r5
 801155e:	0023      	movs	r3, r4
 8011560:	3250      	adds	r2, #80	@ 0x50
 8011562:	e6d9      	b.n	8011318 <_printf_float+0x200>
 8011564:	2600      	movs	r6, #0
 8011566:	e7f6      	b.n	8011556 <_printf_float+0x43e>
 8011568:	003a      	movs	r2, r7
 801156a:	e7e2      	b.n	8011532 <_printf_float+0x41a>
 801156c:	002a      	movs	r2, r5
 801156e:	2301      	movs	r3, #1
 8011570:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011574:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011576:	3219      	adds	r2, #25
 8011578:	47b0      	blx	r6
 801157a:	3001      	adds	r0, #1
 801157c:	d100      	bne.n	8011580 <_printf_float+0x468>
 801157e:	e627      	b.n	80111d0 <_printf_float+0xb8>
 8011580:	3401      	adds	r4, #1
 8011582:	68eb      	ldr	r3, [r5, #12]
 8011584:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011586:	1a9b      	subs	r3, r3, r2
 8011588:	42a3      	cmp	r3, r4
 801158a:	dcef      	bgt.n	801156c <_printf_float+0x454>
 801158c:	e6f8      	b.n	8011380 <_printf_float+0x268>
 801158e:	2400      	movs	r4, #0
 8011590:	e7f7      	b.n	8011582 <_printf_float+0x46a>
 8011592:	46c0      	nop			@ (mov r8, r8)

08011594 <_printf_common>:
 8011594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011596:	0016      	movs	r6, r2
 8011598:	9301      	str	r3, [sp, #4]
 801159a:	688a      	ldr	r2, [r1, #8]
 801159c:	690b      	ldr	r3, [r1, #16]
 801159e:	000c      	movs	r4, r1
 80115a0:	9000      	str	r0, [sp, #0]
 80115a2:	4293      	cmp	r3, r2
 80115a4:	da00      	bge.n	80115a8 <_printf_common+0x14>
 80115a6:	0013      	movs	r3, r2
 80115a8:	0022      	movs	r2, r4
 80115aa:	6033      	str	r3, [r6, #0]
 80115ac:	3243      	adds	r2, #67	@ 0x43
 80115ae:	7812      	ldrb	r2, [r2, #0]
 80115b0:	2a00      	cmp	r2, #0
 80115b2:	d001      	beq.n	80115b8 <_printf_common+0x24>
 80115b4:	3301      	adds	r3, #1
 80115b6:	6033      	str	r3, [r6, #0]
 80115b8:	6823      	ldr	r3, [r4, #0]
 80115ba:	069b      	lsls	r3, r3, #26
 80115bc:	d502      	bpl.n	80115c4 <_printf_common+0x30>
 80115be:	6833      	ldr	r3, [r6, #0]
 80115c0:	3302      	adds	r3, #2
 80115c2:	6033      	str	r3, [r6, #0]
 80115c4:	6822      	ldr	r2, [r4, #0]
 80115c6:	2306      	movs	r3, #6
 80115c8:	0015      	movs	r5, r2
 80115ca:	401d      	ands	r5, r3
 80115cc:	421a      	tst	r2, r3
 80115ce:	d027      	beq.n	8011620 <_printf_common+0x8c>
 80115d0:	0023      	movs	r3, r4
 80115d2:	3343      	adds	r3, #67	@ 0x43
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	1e5a      	subs	r2, r3, #1
 80115d8:	4193      	sbcs	r3, r2
 80115da:	6822      	ldr	r2, [r4, #0]
 80115dc:	0692      	lsls	r2, r2, #26
 80115de:	d430      	bmi.n	8011642 <_printf_common+0xae>
 80115e0:	0022      	movs	r2, r4
 80115e2:	9901      	ldr	r1, [sp, #4]
 80115e4:	9800      	ldr	r0, [sp, #0]
 80115e6:	9d08      	ldr	r5, [sp, #32]
 80115e8:	3243      	adds	r2, #67	@ 0x43
 80115ea:	47a8      	blx	r5
 80115ec:	3001      	adds	r0, #1
 80115ee:	d025      	beq.n	801163c <_printf_common+0xa8>
 80115f0:	2206      	movs	r2, #6
 80115f2:	6823      	ldr	r3, [r4, #0]
 80115f4:	2500      	movs	r5, #0
 80115f6:	4013      	ands	r3, r2
 80115f8:	2b04      	cmp	r3, #4
 80115fa:	d105      	bne.n	8011608 <_printf_common+0x74>
 80115fc:	6833      	ldr	r3, [r6, #0]
 80115fe:	68e5      	ldr	r5, [r4, #12]
 8011600:	1aed      	subs	r5, r5, r3
 8011602:	43eb      	mvns	r3, r5
 8011604:	17db      	asrs	r3, r3, #31
 8011606:	401d      	ands	r5, r3
 8011608:	68a3      	ldr	r3, [r4, #8]
 801160a:	6922      	ldr	r2, [r4, #16]
 801160c:	4293      	cmp	r3, r2
 801160e:	dd01      	ble.n	8011614 <_printf_common+0x80>
 8011610:	1a9b      	subs	r3, r3, r2
 8011612:	18ed      	adds	r5, r5, r3
 8011614:	2600      	movs	r6, #0
 8011616:	42b5      	cmp	r5, r6
 8011618:	d120      	bne.n	801165c <_printf_common+0xc8>
 801161a:	2000      	movs	r0, #0
 801161c:	e010      	b.n	8011640 <_printf_common+0xac>
 801161e:	3501      	adds	r5, #1
 8011620:	68e3      	ldr	r3, [r4, #12]
 8011622:	6832      	ldr	r2, [r6, #0]
 8011624:	1a9b      	subs	r3, r3, r2
 8011626:	42ab      	cmp	r3, r5
 8011628:	ddd2      	ble.n	80115d0 <_printf_common+0x3c>
 801162a:	0022      	movs	r2, r4
 801162c:	2301      	movs	r3, #1
 801162e:	9901      	ldr	r1, [sp, #4]
 8011630:	9800      	ldr	r0, [sp, #0]
 8011632:	9f08      	ldr	r7, [sp, #32]
 8011634:	3219      	adds	r2, #25
 8011636:	47b8      	blx	r7
 8011638:	3001      	adds	r0, #1
 801163a:	d1f0      	bne.n	801161e <_printf_common+0x8a>
 801163c:	2001      	movs	r0, #1
 801163e:	4240      	negs	r0, r0
 8011640:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011642:	2030      	movs	r0, #48	@ 0x30
 8011644:	18e1      	adds	r1, r4, r3
 8011646:	3143      	adds	r1, #67	@ 0x43
 8011648:	7008      	strb	r0, [r1, #0]
 801164a:	0021      	movs	r1, r4
 801164c:	1c5a      	adds	r2, r3, #1
 801164e:	3145      	adds	r1, #69	@ 0x45
 8011650:	7809      	ldrb	r1, [r1, #0]
 8011652:	18a2      	adds	r2, r4, r2
 8011654:	3243      	adds	r2, #67	@ 0x43
 8011656:	3302      	adds	r3, #2
 8011658:	7011      	strb	r1, [r2, #0]
 801165a:	e7c1      	b.n	80115e0 <_printf_common+0x4c>
 801165c:	0022      	movs	r2, r4
 801165e:	2301      	movs	r3, #1
 8011660:	9901      	ldr	r1, [sp, #4]
 8011662:	9800      	ldr	r0, [sp, #0]
 8011664:	9f08      	ldr	r7, [sp, #32]
 8011666:	321a      	adds	r2, #26
 8011668:	47b8      	blx	r7
 801166a:	3001      	adds	r0, #1
 801166c:	d0e6      	beq.n	801163c <_printf_common+0xa8>
 801166e:	3601      	adds	r6, #1
 8011670:	e7d1      	b.n	8011616 <_printf_common+0x82>
	...

08011674 <_printf_i>:
 8011674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011676:	b08b      	sub	sp, #44	@ 0x2c
 8011678:	9206      	str	r2, [sp, #24]
 801167a:	000a      	movs	r2, r1
 801167c:	3243      	adds	r2, #67	@ 0x43
 801167e:	9307      	str	r3, [sp, #28]
 8011680:	9005      	str	r0, [sp, #20]
 8011682:	9203      	str	r2, [sp, #12]
 8011684:	7e0a      	ldrb	r2, [r1, #24]
 8011686:	000c      	movs	r4, r1
 8011688:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801168a:	2a78      	cmp	r2, #120	@ 0x78
 801168c:	d809      	bhi.n	80116a2 <_printf_i+0x2e>
 801168e:	2a62      	cmp	r2, #98	@ 0x62
 8011690:	d80b      	bhi.n	80116aa <_printf_i+0x36>
 8011692:	2a00      	cmp	r2, #0
 8011694:	d100      	bne.n	8011698 <_printf_i+0x24>
 8011696:	e0ba      	b.n	801180e <_printf_i+0x19a>
 8011698:	497a      	ldr	r1, [pc, #488]	@ (8011884 <_printf_i+0x210>)
 801169a:	9104      	str	r1, [sp, #16]
 801169c:	2a58      	cmp	r2, #88	@ 0x58
 801169e:	d100      	bne.n	80116a2 <_printf_i+0x2e>
 80116a0:	e08e      	b.n	80117c0 <_printf_i+0x14c>
 80116a2:	0025      	movs	r5, r4
 80116a4:	3542      	adds	r5, #66	@ 0x42
 80116a6:	702a      	strb	r2, [r5, #0]
 80116a8:	e022      	b.n	80116f0 <_printf_i+0x7c>
 80116aa:	0010      	movs	r0, r2
 80116ac:	3863      	subs	r0, #99	@ 0x63
 80116ae:	2815      	cmp	r0, #21
 80116b0:	d8f7      	bhi.n	80116a2 <_printf_i+0x2e>
 80116b2:	f7ee fd43 	bl	800013c <__gnu_thumb1_case_shi>
 80116b6:	0016      	.short	0x0016
 80116b8:	fff6001f 	.word	0xfff6001f
 80116bc:	fff6fff6 	.word	0xfff6fff6
 80116c0:	001ffff6 	.word	0x001ffff6
 80116c4:	fff6fff6 	.word	0xfff6fff6
 80116c8:	fff6fff6 	.word	0xfff6fff6
 80116cc:	0036009f 	.word	0x0036009f
 80116d0:	fff6007e 	.word	0xfff6007e
 80116d4:	00b0fff6 	.word	0x00b0fff6
 80116d8:	0036fff6 	.word	0x0036fff6
 80116dc:	fff6fff6 	.word	0xfff6fff6
 80116e0:	0082      	.short	0x0082
 80116e2:	0025      	movs	r5, r4
 80116e4:	681a      	ldr	r2, [r3, #0]
 80116e6:	3542      	adds	r5, #66	@ 0x42
 80116e8:	1d11      	adds	r1, r2, #4
 80116ea:	6019      	str	r1, [r3, #0]
 80116ec:	6813      	ldr	r3, [r2, #0]
 80116ee:	702b      	strb	r3, [r5, #0]
 80116f0:	2301      	movs	r3, #1
 80116f2:	e09e      	b.n	8011832 <_printf_i+0x1be>
 80116f4:	6818      	ldr	r0, [r3, #0]
 80116f6:	6809      	ldr	r1, [r1, #0]
 80116f8:	1d02      	adds	r2, r0, #4
 80116fa:	060d      	lsls	r5, r1, #24
 80116fc:	d50b      	bpl.n	8011716 <_printf_i+0xa2>
 80116fe:	6806      	ldr	r6, [r0, #0]
 8011700:	601a      	str	r2, [r3, #0]
 8011702:	2e00      	cmp	r6, #0
 8011704:	da03      	bge.n	801170e <_printf_i+0x9a>
 8011706:	232d      	movs	r3, #45	@ 0x2d
 8011708:	9a03      	ldr	r2, [sp, #12]
 801170a:	4276      	negs	r6, r6
 801170c:	7013      	strb	r3, [r2, #0]
 801170e:	4b5d      	ldr	r3, [pc, #372]	@ (8011884 <_printf_i+0x210>)
 8011710:	270a      	movs	r7, #10
 8011712:	9304      	str	r3, [sp, #16]
 8011714:	e018      	b.n	8011748 <_printf_i+0xd4>
 8011716:	6806      	ldr	r6, [r0, #0]
 8011718:	601a      	str	r2, [r3, #0]
 801171a:	0649      	lsls	r1, r1, #25
 801171c:	d5f1      	bpl.n	8011702 <_printf_i+0x8e>
 801171e:	b236      	sxth	r6, r6
 8011720:	e7ef      	b.n	8011702 <_printf_i+0x8e>
 8011722:	6808      	ldr	r0, [r1, #0]
 8011724:	6819      	ldr	r1, [r3, #0]
 8011726:	c940      	ldmia	r1!, {r6}
 8011728:	0605      	lsls	r5, r0, #24
 801172a:	d402      	bmi.n	8011732 <_printf_i+0xbe>
 801172c:	0640      	lsls	r0, r0, #25
 801172e:	d500      	bpl.n	8011732 <_printf_i+0xbe>
 8011730:	b2b6      	uxth	r6, r6
 8011732:	6019      	str	r1, [r3, #0]
 8011734:	4b53      	ldr	r3, [pc, #332]	@ (8011884 <_printf_i+0x210>)
 8011736:	270a      	movs	r7, #10
 8011738:	9304      	str	r3, [sp, #16]
 801173a:	2a6f      	cmp	r2, #111	@ 0x6f
 801173c:	d100      	bne.n	8011740 <_printf_i+0xcc>
 801173e:	3f02      	subs	r7, #2
 8011740:	0023      	movs	r3, r4
 8011742:	2200      	movs	r2, #0
 8011744:	3343      	adds	r3, #67	@ 0x43
 8011746:	701a      	strb	r2, [r3, #0]
 8011748:	6863      	ldr	r3, [r4, #4]
 801174a:	60a3      	str	r3, [r4, #8]
 801174c:	2b00      	cmp	r3, #0
 801174e:	db06      	blt.n	801175e <_printf_i+0xea>
 8011750:	2104      	movs	r1, #4
 8011752:	6822      	ldr	r2, [r4, #0]
 8011754:	9d03      	ldr	r5, [sp, #12]
 8011756:	438a      	bics	r2, r1
 8011758:	6022      	str	r2, [r4, #0]
 801175a:	4333      	orrs	r3, r6
 801175c:	d00c      	beq.n	8011778 <_printf_i+0x104>
 801175e:	9d03      	ldr	r5, [sp, #12]
 8011760:	0030      	movs	r0, r6
 8011762:	0039      	movs	r1, r7
 8011764:	f7ee fd7a 	bl	800025c <__aeabi_uidivmod>
 8011768:	9b04      	ldr	r3, [sp, #16]
 801176a:	3d01      	subs	r5, #1
 801176c:	5c5b      	ldrb	r3, [r3, r1]
 801176e:	702b      	strb	r3, [r5, #0]
 8011770:	0033      	movs	r3, r6
 8011772:	0006      	movs	r6, r0
 8011774:	429f      	cmp	r7, r3
 8011776:	d9f3      	bls.n	8011760 <_printf_i+0xec>
 8011778:	2f08      	cmp	r7, #8
 801177a:	d109      	bne.n	8011790 <_printf_i+0x11c>
 801177c:	6823      	ldr	r3, [r4, #0]
 801177e:	07db      	lsls	r3, r3, #31
 8011780:	d506      	bpl.n	8011790 <_printf_i+0x11c>
 8011782:	6862      	ldr	r2, [r4, #4]
 8011784:	6923      	ldr	r3, [r4, #16]
 8011786:	429a      	cmp	r2, r3
 8011788:	dc02      	bgt.n	8011790 <_printf_i+0x11c>
 801178a:	2330      	movs	r3, #48	@ 0x30
 801178c:	3d01      	subs	r5, #1
 801178e:	702b      	strb	r3, [r5, #0]
 8011790:	9b03      	ldr	r3, [sp, #12]
 8011792:	1b5b      	subs	r3, r3, r5
 8011794:	6123      	str	r3, [r4, #16]
 8011796:	9b07      	ldr	r3, [sp, #28]
 8011798:	0021      	movs	r1, r4
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	9805      	ldr	r0, [sp, #20]
 801179e:	9b06      	ldr	r3, [sp, #24]
 80117a0:	aa09      	add	r2, sp, #36	@ 0x24
 80117a2:	f7ff fef7 	bl	8011594 <_printf_common>
 80117a6:	3001      	adds	r0, #1
 80117a8:	d148      	bne.n	801183c <_printf_i+0x1c8>
 80117aa:	2001      	movs	r0, #1
 80117ac:	4240      	negs	r0, r0
 80117ae:	b00b      	add	sp, #44	@ 0x2c
 80117b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b2:	2220      	movs	r2, #32
 80117b4:	6809      	ldr	r1, [r1, #0]
 80117b6:	430a      	orrs	r2, r1
 80117b8:	6022      	str	r2, [r4, #0]
 80117ba:	2278      	movs	r2, #120	@ 0x78
 80117bc:	4932      	ldr	r1, [pc, #200]	@ (8011888 <_printf_i+0x214>)
 80117be:	9104      	str	r1, [sp, #16]
 80117c0:	0021      	movs	r1, r4
 80117c2:	3145      	adds	r1, #69	@ 0x45
 80117c4:	700a      	strb	r2, [r1, #0]
 80117c6:	6819      	ldr	r1, [r3, #0]
 80117c8:	6822      	ldr	r2, [r4, #0]
 80117ca:	c940      	ldmia	r1!, {r6}
 80117cc:	0610      	lsls	r0, r2, #24
 80117ce:	d402      	bmi.n	80117d6 <_printf_i+0x162>
 80117d0:	0650      	lsls	r0, r2, #25
 80117d2:	d500      	bpl.n	80117d6 <_printf_i+0x162>
 80117d4:	b2b6      	uxth	r6, r6
 80117d6:	6019      	str	r1, [r3, #0]
 80117d8:	07d3      	lsls	r3, r2, #31
 80117da:	d502      	bpl.n	80117e2 <_printf_i+0x16e>
 80117dc:	2320      	movs	r3, #32
 80117de:	4313      	orrs	r3, r2
 80117e0:	6023      	str	r3, [r4, #0]
 80117e2:	2e00      	cmp	r6, #0
 80117e4:	d001      	beq.n	80117ea <_printf_i+0x176>
 80117e6:	2710      	movs	r7, #16
 80117e8:	e7aa      	b.n	8011740 <_printf_i+0xcc>
 80117ea:	2220      	movs	r2, #32
 80117ec:	6823      	ldr	r3, [r4, #0]
 80117ee:	4393      	bics	r3, r2
 80117f0:	6023      	str	r3, [r4, #0]
 80117f2:	e7f8      	b.n	80117e6 <_printf_i+0x172>
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	680d      	ldr	r5, [r1, #0]
 80117f8:	1d10      	adds	r0, r2, #4
 80117fa:	6949      	ldr	r1, [r1, #20]
 80117fc:	6018      	str	r0, [r3, #0]
 80117fe:	6813      	ldr	r3, [r2, #0]
 8011800:	062e      	lsls	r6, r5, #24
 8011802:	d501      	bpl.n	8011808 <_printf_i+0x194>
 8011804:	6019      	str	r1, [r3, #0]
 8011806:	e002      	b.n	801180e <_printf_i+0x19a>
 8011808:	066d      	lsls	r5, r5, #25
 801180a:	d5fb      	bpl.n	8011804 <_printf_i+0x190>
 801180c:	8019      	strh	r1, [r3, #0]
 801180e:	2300      	movs	r3, #0
 8011810:	9d03      	ldr	r5, [sp, #12]
 8011812:	6123      	str	r3, [r4, #16]
 8011814:	e7bf      	b.n	8011796 <_printf_i+0x122>
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	1d11      	adds	r1, r2, #4
 801181a:	6019      	str	r1, [r3, #0]
 801181c:	6815      	ldr	r5, [r2, #0]
 801181e:	2100      	movs	r1, #0
 8011820:	0028      	movs	r0, r5
 8011822:	6862      	ldr	r2, [r4, #4]
 8011824:	f000 fa71 	bl	8011d0a <memchr>
 8011828:	2800      	cmp	r0, #0
 801182a:	d001      	beq.n	8011830 <_printf_i+0x1bc>
 801182c:	1b40      	subs	r0, r0, r5
 801182e:	6060      	str	r0, [r4, #4]
 8011830:	6863      	ldr	r3, [r4, #4]
 8011832:	6123      	str	r3, [r4, #16]
 8011834:	2300      	movs	r3, #0
 8011836:	9a03      	ldr	r2, [sp, #12]
 8011838:	7013      	strb	r3, [r2, #0]
 801183a:	e7ac      	b.n	8011796 <_printf_i+0x122>
 801183c:	002a      	movs	r2, r5
 801183e:	6923      	ldr	r3, [r4, #16]
 8011840:	9906      	ldr	r1, [sp, #24]
 8011842:	9805      	ldr	r0, [sp, #20]
 8011844:	9d07      	ldr	r5, [sp, #28]
 8011846:	47a8      	blx	r5
 8011848:	3001      	adds	r0, #1
 801184a:	d0ae      	beq.n	80117aa <_printf_i+0x136>
 801184c:	6823      	ldr	r3, [r4, #0]
 801184e:	079b      	lsls	r3, r3, #30
 8011850:	d415      	bmi.n	801187e <_printf_i+0x20a>
 8011852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011854:	68e0      	ldr	r0, [r4, #12]
 8011856:	4298      	cmp	r0, r3
 8011858:	daa9      	bge.n	80117ae <_printf_i+0x13a>
 801185a:	0018      	movs	r0, r3
 801185c:	e7a7      	b.n	80117ae <_printf_i+0x13a>
 801185e:	0022      	movs	r2, r4
 8011860:	2301      	movs	r3, #1
 8011862:	9906      	ldr	r1, [sp, #24]
 8011864:	9805      	ldr	r0, [sp, #20]
 8011866:	9e07      	ldr	r6, [sp, #28]
 8011868:	3219      	adds	r2, #25
 801186a:	47b0      	blx	r6
 801186c:	3001      	adds	r0, #1
 801186e:	d09c      	beq.n	80117aa <_printf_i+0x136>
 8011870:	3501      	adds	r5, #1
 8011872:	68e3      	ldr	r3, [r4, #12]
 8011874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011876:	1a9b      	subs	r3, r3, r2
 8011878:	42ab      	cmp	r3, r5
 801187a:	dcf0      	bgt.n	801185e <_printf_i+0x1ea>
 801187c:	e7e9      	b.n	8011852 <_printf_i+0x1de>
 801187e:	2500      	movs	r5, #0
 8011880:	e7f7      	b.n	8011872 <_printf_i+0x1fe>
 8011882:	46c0      	nop			@ (mov r8, r8)
 8011884:	08017bf4 	.word	0x08017bf4
 8011888:	08017c05 	.word	0x08017c05

0801188c <std>:
 801188c:	2300      	movs	r3, #0
 801188e:	b510      	push	{r4, lr}
 8011890:	0004      	movs	r4, r0
 8011892:	6003      	str	r3, [r0, #0]
 8011894:	6043      	str	r3, [r0, #4]
 8011896:	6083      	str	r3, [r0, #8]
 8011898:	8181      	strh	r1, [r0, #12]
 801189a:	6643      	str	r3, [r0, #100]	@ 0x64
 801189c:	81c2      	strh	r2, [r0, #14]
 801189e:	6103      	str	r3, [r0, #16]
 80118a0:	6143      	str	r3, [r0, #20]
 80118a2:	6183      	str	r3, [r0, #24]
 80118a4:	0019      	movs	r1, r3
 80118a6:	2208      	movs	r2, #8
 80118a8:	305c      	adds	r0, #92	@ 0x5c
 80118aa:	f000 f935 	bl	8011b18 <memset>
 80118ae:	4b0b      	ldr	r3, [pc, #44]	@ (80118dc <std+0x50>)
 80118b0:	6224      	str	r4, [r4, #32]
 80118b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80118b4:	4b0a      	ldr	r3, [pc, #40]	@ (80118e0 <std+0x54>)
 80118b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80118b8:	4b0a      	ldr	r3, [pc, #40]	@ (80118e4 <std+0x58>)
 80118ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80118bc:	4b0a      	ldr	r3, [pc, #40]	@ (80118e8 <std+0x5c>)
 80118be:	6323      	str	r3, [r4, #48]	@ 0x30
 80118c0:	4b0a      	ldr	r3, [pc, #40]	@ (80118ec <std+0x60>)
 80118c2:	429c      	cmp	r4, r3
 80118c4:	d005      	beq.n	80118d2 <std+0x46>
 80118c6:	4b0a      	ldr	r3, [pc, #40]	@ (80118f0 <std+0x64>)
 80118c8:	429c      	cmp	r4, r3
 80118ca:	d002      	beq.n	80118d2 <std+0x46>
 80118cc:	4b09      	ldr	r3, [pc, #36]	@ (80118f4 <std+0x68>)
 80118ce:	429c      	cmp	r4, r3
 80118d0:	d103      	bne.n	80118da <std+0x4e>
 80118d2:	0020      	movs	r0, r4
 80118d4:	3058      	adds	r0, #88	@ 0x58
 80118d6:	f000 fa15 	bl	8011d04 <__retarget_lock_init_recursive>
 80118da:	bd10      	pop	{r4, pc}
 80118dc:	08011a81 	.word	0x08011a81
 80118e0:	08011aa9 	.word	0x08011aa9
 80118e4:	08011ae1 	.word	0x08011ae1
 80118e8:	08011b0d 	.word	0x08011b0d
 80118ec:	200004cc 	.word	0x200004cc
 80118f0:	20000534 	.word	0x20000534
 80118f4:	2000059c 	.word	0x2000059c

080118f8 <stdio_exit_handler>:
 80118f8:	b510      	push	{r4, lr}
 80118fa:	4a03      	ldr	r2, [pc, #12]	@ (8011908 <stdio_exit_handler+0x10>)
 80118fc:	4903      	ldr	r1, [pc, #12]	@ (801190c <stdio_exit_handler+0x14>)
 80118fe:	4804      	ldr	r0, [pc, #16]	@ (8011910 <stdio_exit_handler+0x18>)
 8011900:	f000 f86c 	bl	80119dc <_fwalk_sglue>
 8011904:	bd10      	pop	{r4, pc}
 8011906:	46c0      	nop			@ (mov r8, r8)
 8011908:	20000028 	.word	0x20000028
 801190c:	080140b5 	.word	0x080140b5
 8011910:	200001a4 	.word	0x200001a4

08011914 <cleanup_stdio>:
 8011914:	6841      	ldr	r1, [r0, #4]
 8011916:	4b0b      	ldr	r3, [pc, #44]	@ (8011944 <cleanup_stdio+0x30>)
 8011918:	b510      	push	{r4, lr}
 801191a:	0004      	movs	r4, r0
 801191c:	4299      	cmp	r1, r3
 801191e:	d001      	beq.n	8011924 <cleanup_stdio+0x10>
 8011920:	f002 fbc8 	bl	80140b4 <_fflush_r>
 8011924:	68a1      	ldr	r1, [r4, #8]
 8011926:	4b08      	ldr	r3, [pc, #32]	@ (8011948 <cleanup_stdio+0x34>)
 8011928:	4299      	cmp	r1, r3
 801192a:	d002      	beq.n	8011932 <cleanup_stdio+0x1e>
 801192c:	0020      	movs	r0, r4
 801192e:	f002 fbc1 	bl	80140b4 <_fflush_r>
 8011932:	68e1      	ldr	r1, [r4, #12]
 8011934:	4b05      	ldr	r3, [pc, #20]	@ (801194c <cleanup_stdio+0x38>)
 8011936:	4299      	cmp	r1, r3
 8011938:	d002      	beq.n	8011940 <cleanup_stdio+0x2c>
 801193a:	0020      	movs	r0, r4
 801193c:	f002 fbba 	bl	80140b4 <_fflush_r>
 8011940:	bd10      	pop	{r4, pc}
 8011942:	46c0      	nop			@ (mov r8, r8)
 8011944:	200004cc 	.word	0x200004cc
 8011948:	20000534 	.word	0x20000534
 801194c:	2000059c 	.word	0x2000059c

08011950 <global_stdio_init.part.0>:
 8011950:	b510      	push	{r4, lr}
 8011952:	4b09      	ldr	r3, [pc, #36]	@ (8011978 <global_stdio_init.part.0+0x28>)
 8011954:	4a09      	ldr	r2, [pc, #36]	@ (801197c <global_stdio_init.part.0+0x2c>)
 8011956:	2104      	movs	r1, #4
 8011958:	601a      	str	r2, [r3, #0]
 801195a:	4809      	ldr	r0, [pc, #36]	@ (8011980 <global_stdio_init.part.0+0x30>)
 801195c:	2200      	movs	r2, #0
 801195e:	f7ff ff95 	bl	801188c <std>
 8011962:	2201      	movs	r2, #1
 8011964:	2109      	movs	r1, #9
 8011966:	4807      	ldr	r0, [pc, #28]	@ (8011984 <global_stdio_init.part.0+0x34>)
 8011968:	f7ff ff90 	bl	801188c <std>
 801196c:	2202      	movs	r2, #2
 801196e:	2112      	movs	r1, #18
 8011970:	4805      	ldr	r0, [pc, #20]	@ (8011988 <global_stdio_init.part.0+0x38>)
 8011972:	f7ff ff8b 	bl	801188c <std>
 8011976:	bd10      	pop	{r4, pc}
 8011978:	20000604 	.word	0x20000604
 801197c:	080118f9 	.word	0x080118f9
 8011980:	200004cc 	.word	0x200004cc
 8011984:	20000534 	.word	0x20000534
 8011988:	2000059c 	.word	0x2000059c

0801198c <__sfp_lock_acquire>:
 801198c:	b510      	push	{r4, lr}
 801198e:	4802      	ldr	r0, [pc, #8]	@ (8011998 <__sfp_lock_acquire+0xc>)
 8011990:	f000 f9b9 	bl	8011d06 <__retarget_lock_acquire_recursive>
 8011994:	bd10      	pop	{r4, pc}
 8011996:	46c0      	nop			@ (mov r8, r8)
 8011998:	2000060d 	.word	0x2000060d

0801199c <__sfp_lock_release>:
 801199c:	b510      	push	{r4, lr}
 801199e:	4802      	ldr	r0, [pc, #8]	@ (80119a8 <__sfp_lock_release+0xc>)
 80119a0:	f000 f9b2 	bl	8011d08 <__retarget_lock_release_recursive>
 80119a4:	bd10      	pop	{r4, pc}
 80119a6:	46c0      	nop			@ (mov r8, r8)
 80119a8:	2000060d 	.word	0x2000060d

080119ac <__sinit>:
 80119ac:	b510      	push	{r4, lr}
 80119ae:	0004      	movs	r4, r0
 80119b0:	f7ff ffec 	bl	801198c <__sfp_lock_acquire>
 80119b4:	6a23      	ldr	r3, [r4, #32]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d002      	beq.n	80119c0 <__sinit+0x14>
 80119ba:	f7ff ffef 	bl	801199c <__sfp_lock_release>
 80119be:	bd10      	pop	{r4, pc}
 80119c0:	4b04      	ldr	r3, [pc, #16]	@ (80119d4 <__sinit+0x28>)
 80119c2:	6223      	str	r3, [r4, #32]
 80119c4:	4b04      	ldr	r3, [pc, #16]	@ (80119d8 <__sinit+0x2c>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1f6      	bne.n	80119ba <__sinit+0xe>
 80119cc:	f7ff ffc0 	bl	8011950 <global_stdio_init.part.0>
 80119d0:	e7f3      	b.n	80119ba <__sinit+0xe>
 80119d2:	46c0      	nop			@ (mov r8, r8)
 80119d4:	08011915 	.word	0x08011915
 80119d8:	20000604 	.word	0x20000604

080119dc <_fwalk_sglue>:
 80119dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119de:	0014      	movs	r4, r2
 80119e0:	2600      	movs	r6, #0
 80119e2:	9000      	str	r0, [sp, #0]
 80119e4:	9101      	str	r1, [sp, #4]
 80119e6:	68a5      	ldr	r5, [r4, #8]
 80119e8:	6867      	ldr	r7, [r4, #4]
 80119ea:	3f01      	subs	r7, #1
 80119ec:	d504      	bpl.n	80119f8 <_fwalk_sglue+0x1c>
 80119ee:	6824      	ldr	r4, [r4, #0]
 80119f0:	2c00      	cmp	r4, #0
 80119f2:	d1f8      	bne.n	80119e6 <_fwalk_sglue+0xa>
 80119f4:	0030      	movs	r0, r6
 80119f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80119f8:	89ab      	ldrh	r3, [r5, #12]
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d908      	bls.n	8011a10 <_fwalk_sglue+0x34>
 80119fe:	220e      	movs	r2, #14
 8011a00:	5eab      	ldrsh	r3, [r5, r2]
 8011a02:	3301      	adds	r3, #1
 8011a04:	d004      	beq.n	8011a10 <_fwalk_sglue+0x34>
 8011a06:	0029      	movs	r1, r5
 8011a08:	9800      	ldr	r0, [sp, #0]
 8011a0a:	9b01      	ldr	r3, [sp, #4]
 8011a0c:	4798      	blx	r3
 8011a0e:	4306      	orrs	r6, r0
 8011a10:	3568      	adds	r5, #104	@ 0x68
 8011a12:	e7ea      	b.n	80119ea <_fwalk_sglue+0xe>

08011a14 <sniprintf>:
 8011a14:	b40c      	push	{r2, r3}
 8011a16:	b530      	push	{r4, r5, lr}
 8011a18:	4b18      	ldr	r3, [pc, #96]	@ (8011a7c <sniprintf+0x68>)
 8011a1a:	000c      	movs	r4, r1
 8011a1c:	681d      	ldr	r5, [r3, #0]
 8011a1e:	b09d      	sub	sp, #116	@ 0x74
 8011a20:	2900      	cmp	r1, #0
 8011a22:	da08      	bge.n	8011a36 <sniprintf+0x22>
 8011a24:	238b      	movs	r3, #139	@ 0x8b
 8011a26:	2001      	movs	r0, #1
 8011a28:	602b      	str	r3, [r5, #0]
 8011a2a:	4240      	negs	r0, r0
 8011a2c:	b01d      	add	sp, #116	@ 0x74
 8011a2e:	bc30      	pop	{r4, r5}
 8011a30:	bc08      	pop	{r3}
 8011a32:	b002      	add	sp, #8
 8011a34:	4718      	bx	r3
 8011a36:	2382      	movs	r3, #130	@ 0x82
 8011a38:	466a      	mov	r2, sp
 8011a3a:	009b      	lsls	r3, r3, #2
 8011a3c:	8293      	strh	r3, [r2, #20]
 8011a3e:	2300      	movs	r3, #0
 8011a40:	9002      	str	r0, [sp, #8]
 8011a42:	931b      	str	r3, [sp, #108]	@ 0x6c
 8011a44:	9006      	str	r0, [sp, #24]
 8011a46:	4299      	cmp	r1, r3
 8011a48:	d000      	beq.n	8011a4c <sniprintf+0x38>
 8011a4a:	1e4b      	subs	r3, r1, #1
 8011a4c:	9304      	str	r3, [sp, #16]
 8011a4e:	9307      	str	r3, [sp, #28]
 8011a50:	2301      	movs	r3, #1
 8011a52:	466a      	mov	r2, sp
 8011a54:	425b      	negs	r3, r3
 8011a56:	82d3      	strh	r3, [r2, #22]
 8011a58:	0028      	movs	r0, r5
 8011a5a:	ab21      	add	r3, sp, #132	@ 0x84
 8011a5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011a5e:	a902      	add	r1, sp, #8
 8011a60:	9301      	str	r3, [sp, #4]
 8011a62:	f002 f9a3 	bl	8013dac <_svfiprintf_r>
 8011a66:	1c43      	adds	r3, r0, #1
 8011a68:	da01      	bge.n	8011a6e <sniprintf+0x5a>
 8011a6a:	238b      	movs	r3, #139	@ 0x8b
 8011a6c:	602b      	str	r3, [r5, #0]
 8011a6e:	2c00      	cmp	r4, #0
 8011a70:	d0dc      	beq.n	8011a2c <sniprintf+0x18>
 8011a72:	2200      	movs	r2, #0
 8011a74:	9b02      	ldr	r3, [sp, #8]
 8011a76:	701a      	strb	r2, [r3, #0]
 8011a78:	e7d8      	b.n	8011a2c <sniprintf+0x18>
 8011a7a:	46c0      	nop			@ (mov r8, r8)
 8011a7c:	200001a0 	.word	0x200001a0

08011a80 <__sread>:
 8011a80:	b570      	push	{r4, r5, r6, lr}
 8011a82:	000c      	movs	r4, r1
 8011a84:	250e      	movs	r5, #14
 8011a86:	5f49      	ldrsh	r1, [r1, r5]
 8011a88:	f000 f8ea 	bl	8011c60 <_read_r>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	db03      	blt.n	8011a98 <__sread+0x18>
 8011a90:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011a92:	181b      	adds	r3, r3, r0
 8011a94:	6563      	str	r3, [r4, #84]	@ 0x54
 8011a96:	bd70      	pop	{r4, r5, r6, pc}
 8011a98:	89a3      	ldrh	r3, [r4, #12]
 8011a9a:	4a02      	ldr	r2, [pc, #8]	@ (8011aa4 <__sread+0x24>)
 8011a9c:	4013      	ands	r3, r2
 8011a9e:	81a3      	strh	r3, [r4, #12]
 8011aa0:	e7f9      	b.n	8011a96 <__sread+0x16>
 8011aa2:	46c0      	nop			@ (mov r8, r8)
 8011aa4:	ffffefff 	.word	0xffffefff

08011aa8 <__swrite>:
 8011aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aaa:	001f      	movs	r7, r3
 8011aac:	898b      	ldrh	r3, [r1, #12]
 8011aae:	0005      	movs	r5, r0
 8011ab0:	000c      	movs	r4, r1
 8011ab2:	0016      	movs	r6, r2
 8011ab4:	05db      	lsls	r3, r3, #23
 8011ab6:	d505      	bpl.n	8011ac4 <__swrite+0x1c>
 8011ab8:	230e      	movs	r3, #14
 8011aba:	5ec9      	ldrsh	r1, [r1, r3]
 8011abc:	2200      	movs	r2, #0
 8011abe:	2302      	movs	r3, #2
 8011ac0:	f000 f8ba 	bl	8011c38 <_lseek_r>
 8011ac4:	89a3      	ldrh	r3, [r4, #12]
 8011ac6:	4a05      	ldr	r2, [pc, #20]	@ (8011adc <__swrite+0x34>)
 8011ac8:	0028      	movs	r0, r5
 8011aca:	4013      	ands	r3, r2
 8011acc:	81a3      	strh	r3, [r4, #12]
 8011ace:	0032      	movs	r2, r6
 8011ad0:	230e      	movs	r3, #14
 8011ad2:	5ee1      	ldrsh	r1, [r4, r3]
 8011ad4:	003b      	movs	r3, r7
 8011ad6:	f000 f8d7 	bl	8011c88 <_write_r>
 8011ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011adc:	ffffefff 	.word	0xffffefff

08011ae0 <__sseek>:
 8011ae0:	b570      	push	{r4, r5, r6, lr}
 8011ae2:	000c      	movs	r4, r1
 8011ae4:	250e      	movs	r5, #14
 8011ae6:	5f49      	ldrsh	r1, [r1, r5]
 8011ae8:	f000 f8a6 	bl	8011c38 <_lseek_r>
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	1c42      	adds	r2, r0, #1
 8011af0:	d103      	bne.n	8011afa <__sseek+0x1a>
 8011af2:	4a05      	ldr	r2, [pc, #20]	@ (8011b08 <__sseek+0x28>)
 8011af4:	4013      	ands	r3, r2
 8011af6:	81a3      	strh	r3, [r4, #12]
 8011af8:	bd70      	pop	{r4, r5, r6, pc}
 8011afa:	2280      	movs	r2, #128	@ 0x80
 8011afc:	0152      	lsls	r2, r2, #5
 8011afe:	4313      	orrs	r3, r2
 8011b00:	81a3      	strh	r3, [r4, #12]
 8011b02:	6560      	str	r0, [r4, #84]	@ 0x54
 8011b04:	e7f8      	b.n	8011af8 <__sseek+0x18>
 8011b06:	46c0      	nop			@ (mov r8, r8)
 8011b08:	ffffefff 	.word	0xffffefff

08011b0c <__sclose>:
 8011b0c:	b510      	push	{r4, lr}
 8011b0e:	230e      	movs	r3, #14
 8011b10:	5ec9      	ldrsh	r1, [r1, r3]
 8011b12:	f000 f87f 	bl	8011c14 <_close_r>
 8011b16:	bd10      	pop	{r4, pc}

08011b18 <memset>:
 8011b18:	0003      	movs	r3, r0
 8011b1a:	1882      	adds	r2, r0, r2
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d100      	bne.n	8011b22 <memset+0xa>
 8011b20:	4770      	bx	lr
 8011b22:	7019      	strb	r1, [r3, #0]
 8011b24:	3301      	adds	r3, #1
 8011b26:	e7f9      	b.n	8011b1c <memset+0x4>

08011b28 <strncmp>:
 8011b28:	b530      	push	{r4, r5, lr}
 8011b2a:	0005      	movs	r5, r0
 8011b2c:	1e10      	subs	r0, r2, #0
 8011b2e:	d00b      	beq.n	8011b48 <strncmp+0x20>
 8011b30:	2400      	movs	r4, #0
 8011b32:	3a01      	subs	r2, #1
 8011b34:	5d2b      	ldrb	r3, [r5, r4]
 8011b36:	5d08      	ldrb	r0, [r1, r4]
 8011b38:	4283      	cmp	r3, r0
 8011b3a:	d104      	bne.n	8011b46 <strncmp+0x1e>
 8011b3c:	4294      	cmp	r4, r2
 8011b3e:	d002      	beq.n	8011b46 <strncmp+0x1e>
 8011b40:	3401      	adds	r4, #1
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d1f6      	bne.n	8011b34 <strncmp+0xc>
 8011b46:	1a18      	subs	r0, r3, r0
 8011b48:	bd30      	pop	{r4, r5, pc}
	...

08011b4c <strtok>:
 8011b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b4e:	4b16      	ldr	r3, [pc, #88]	@ (8011ba8 <strtok+0x5c>)
 8011b50:	0005      	movs	r5, r0
 8011b52:	681f      	ldr	r7, [r3, #0]
 8011b54:	000e      	movs	r6, r1
 8011b56:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8011b58:	2c00      	cmp	r4, #0
 8011b5a:	d11d      	bne.n	8011b98 <strtok+0x4c>
 8011b5c:	2050      	movs	r0, #80	@ 0x50
 8011b5e:	f001 fb27 	bl	80131b0 <malloc>
 8011b62:	1e02      	subs	r2, r0, #0
 8011b64:	6478      	str	r0, [r7, #68]	@ 0x44
 8011b66:	d104      	bne.n	8011b72 <strtok+0x26>
 8011b68:	215b      	movs	r1, #91	@ 0x5b
 8011b6a:	4b10      	ldr	r3, [pc, #64]	@ (8011bac <strtok+0x60>)
 8011b6c:	4810      	ldr	r0, [pc, #64]	@ (8011bb0 <strtok+0x64>)
 8011b6e:	f000 f8e7 	bl	8011d40 <__assert_func>
 8011b72:	6004      	str	r4, [r0, #0]
 8011b74:	6044      	str	r4, [r0, #4]
 8011b76:	6084      	str	r4, [r0, #8]
 8011b78:	60c4      	str	r4, [r0, #12]
 8011b7a:	6104      	str	r4, [r0, #16]
 8011b7c:	6144      	str	r4, [r0, #20]
 8011b7e:	6184      	str	r4, [r0, #24]
 8011b80:	6284      	str	r4, [r0, #40]	@ 0x28
 8011b82:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8011b84:	6304      	str	r4, [r0, #48]	@ 0x30
 8011b86:	6344      	str	r4, [r0, #52]	@ 0x34
 8011b88:	6384      	str	r4, [r0, #56]	@ 0x38
 8011b8a:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8011b8c:	6404      	str	r4, [r0, #64]	@ 0x40
 8011b8e:	6444      	str	r4, [r0, #68]	@ 0x44
 8011b90:	6484      	str	r4, [r0, #72]	@ 0x48
 8011b92:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8011b94:	7704      	strb	r4, [r0, #28]
 8011b96:	6244      	str	r4, [r0, #36]	@ 0x24
 8011b98:	0031      	movs	r1, r6
 8011b9a:	0028      	movs	r0, r5
 8011b9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	f000 f808 	bl	8011bb4 <__strtok_r>
 8011ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ba6:	46c0      	nop			@ (mov r8, r8)
 8011ba8:	200001a0 	.word	0x200001a0
 8011bac:	08017c16 	.word	0x08017c16
 8011bb0:	08017c2d 	.word	0x08017c2d

08011bb4 <__strtok_r>:
 8011bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bb6:	1e04      	subs	r4, r0, #0
 8011bb8:	d102      	bne.n	8011bc0 <__strtok_r+0xc>
 8011bba:	6814      	ldr	r4, [r2, #0]
 8011bbc:	2c00      	cmp	r4, #0
 8011bbe:	d009      	beq.n	8011bd4 <__strtok_r+0x20>
 8011bc0:	0020      	movs	r0, r4
 8011bc2:	000e      	movs	r6, r1
 8011bc4:	7805      	ldrb	r5, [r0, #0]
 8011bc6:	3401      	adds	r4, #1
 8011bc8:	7837      	ldrb	r7, [r6, #0]
 8011bca:	2f00      	cmp	r7, #0
 8011bcc:	d104      	bne.n	8011bd8 <__strtok_r+0x24>
 8011bce:	2d00      	cmp	r5, #0
 8011bd0:	d10d      	bne.n	8011bee <__strtok_r+0x3a>
 8011bd2:	6015      	str	r5, [r2, #0]
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	e006      	b.n	8011be6 <__strtok_r+0x32>
 8011bd8:	3601      	adds	r6, #1
 8011bda:	42bd      	cmp	r5, r7
 8011bdc:	d1f4      	bne.n	8011bc8 <__strtok_r+0x14>
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1ee      	bne.n	8011bc0 <__strtok_r+0xc>
 8011be2:	6014      	str	r4, [r2, #0]
 8011be4:	7003      	strb	r3, [r0, #0]
 8011be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011be8:	3301      	adds	r3, #1
 8011bea:	2d00      	cmp	r5, #0
 8011bec:	d103      	bne.n	8011bf6 <__strtok_r+0x42>
 8011bee:	0026      	movs	r6, r4
 8011bf0:	000b      	movs	r3, r1
 8011bf2:	7837      	ldrb	r7, [r6, #0]
 8011bf4:	3401      	adds	r4, #1
 8011bf6:	781d      	ldrb	r5, [r3, #0]
 8011bf8:	42af      	cmp	r7, r5
 8011bfa:	d1f5      	bne.n	8011be8 <__strtok_r+0x34>
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	0019      	movs	r1, r3
 8011c00:	429f      	cmp	r7, r3
 8011c02:	d001      	beq.n	8011c08 <__strtok_r+0x54>
 8011c04:	0023      	movs	r3, r4
 8011c06:	7031      	strb	r1, [r6, #0]
 8011c08:	6013      	str	r3, [r2, #0]
 8011c0a:	e7ec      	b.n	8011be6 <__strtok_r+0x32>

08011c0c <_localeconv_r>:
 8011c0c:	4800      	ldr	r0, [pc, #0]	@ (8011c10 <_localeconv_r+0x4>)
 8011c0e:	4770      	bx	lr
 8011c10:	20000124 	.word	0x20000124

08011c14 <_close_r>:
 8011c14:	2300      	movs	r3, #0
 8011c16:	b570      	push	{r4, r5, r6, lr}
 8011c18:	4d06      	ldr	r5, [pc, #24]	@ (8011c34 <_close_r+0x20>)
 8011c1a:	0004      	movs	r4, r0
 8011c1c:	0008      	movs	r0, r1
 8011c1e:	602b      	str	r3, [r5, #0]
 8011c20:	f7fa fa93 	bl	800c14a <_close>
 8011c24:	1c43      	adds	r3, r0, #1
 8011c26:	d103      	bne.n	8011c30 <_close_r+0x1c>
 8011c28:	682b      	ldr	r3, [r5, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d000      	beq.n	8011c30 <_close_r+0x1c>
 8011c2e:	6023      	str	r3, [r4, #0]
 8011c30:	bd70      	pop	{r4, r5, r6, pc}
 8011c32:	46c0      	nop			@ (mov r8, r8)
 8011c34:	20000608 	.word	0x20000608

08011c38 <_lseek_r>:
 8011c38:	b570      	push	{r4, r5, r6, lr}
 8011c3a:	0004      	movs	r4, r0
 8011c3c:	0008      	movs	r0, r1
 8011c3e:	0011      	movs	r1, r2
 8011c40:	001a      	movs	r2, r3
 8011c42:	2300      	movs	r3, #0
 8011c44:	4d05      	ldr	r5, [pc, #20]	@ (8011c5c <_lseek_r+0x24>)
 8011c46:	602b      	str	r3, [r5, #0]
 8011c48:	f7fa faa0 	bl	800c18c <_lseek>
 8011c4c:	1c43      	adds	r3, r0, #1
 8011c4e:	d103      	bne.n	8011c58 <_lseek_r+0x20>
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d000      	beq.n	8011c58 <_lseek_r+0x20>
 8011c56:	6023      	str	r3, [r4, #0]
 8011c58:	bd70      	pop	{r4, r5, r6, pc}
 8011c5a:	46c0      	nop			@ (mov r8, r8)
 8011c5c:	20000608 	.word	0x20000608

08011c60 <_read_r>:
 8011c60:	b570      	push	{r4, r5, r6, lr}
 8011c62:	0004      	movs	r4, r0
 8011c64:	0008      	movs	r0, r1
 8011c66:	0011      	movs	r1, r2
 8011c68:	001a      	movs	r2, r3
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	4d05      	ldr	r5, [pc, #20]	@ (8011c84 <_read_r+0x24>)
 8011c6e:	602b      	str	r3, [r5, #0]
 8011c70:	f7fa fa32 	bl	800c0d8 <_read>
 8011c74:	1c43      	adds	r3, r0, #1
 8011c76:	d103      	bne.n	8011c80 <_read_r+0x20>
 8011c78:	682b      	ldr	r3, [r5, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d000      	beq.n	8011c80 <_read_r+0x20>
 8011c7e:	6023      	str	r3, [r4, #0]
 8011c80:	bd70      	pop	{r4, r5, r6, pc}
 8011c82:	46c0      	nop			@ (mov r8, r8)
 8011c84:	20000608 	.word	0x20000608

08011c88 <_write_r>:
 8011c88:	b570      	push	{r4, r5, r6, lr}
 8011c8a:	0004      	movs	r4, r0
 8011c8c:	0008      	movs	r0, r1
 8011c8e:	0011      	movs	r1, r2
 8011c90:	001a      	movs	r2, r3
 8011c92:	2300      	movs	r3, #0
 8011c94:	4d05      	ldr	r5, [pc, #20]	@ (8011cac <_write_r+0x24>)
 8011c96:	602b      	str	r3, [r5, #0]
 8011c98:	f7fa fa3b 	bl	800c112 <_write>
 8011c9c:	1c43      	adds	r3, r0, #1
 8011c9e:	d103      	bne.n	8011ca8 <_write_r+0x20>
 8011ca0:	682b      	ldr	r3, [r5, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d000      	beq.n	8011ca8 <_write_r+0x20>
 8011ca6:	6023      	str	r3, [r4, #0]
 8011ca8:	bd70      	pop	{r4, r5, r6, pc}
 8011caa:	46c0      	nop			@ (mov r8, r8)
 8011cac:	20000608 	.word	0x20000608

08011cb0 <__errno>:
 8011cb0:	4b01      	ldr	r3, [pc, #4]	@ (8011cb8 <__errno+0x8>)
 8011cb2:	6818      	ldr	r0, [r3, #0]
 8011cb4:	4770      	bx	lr
 8011cb6:	46c0      	nop			@ (mov r8, r8)
 8011cb8:	200001a0 	.word	0x200001a0

08011cbc <__libc_init_array>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	2600      	movs	r6, #0
 8011cc0:	4c0c      	ldr	r4, [pc, #48]	@ (8011cf4 <__libc_init_array+0x38>)
 8011cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8011cf8 <__libc_init_array+0x3c>)
 8011cc4:	1b64      	subs	r4, r4, r5
 8011cc6:	10a4      	asrs	r4, r4, #2
 8011cc8:	42a6      	cmp	r6, r4
 8011cca:	d109      	bne.n	8011ce0 <__libc_init_array+0x24>
 8011ccc:	2600      	movs	r6, #0
 8011cce:	f002 fd7b 	bl	80147c8 <_init>
 8011cd2:	4c0a      	ldr	r4, [pc, #40]	@ (8011cfc <__libc_init_array+0x40>)
 8011cd4:	4d0a      	ldr	r5, [pc, #40]	@ (8011d00 <__libc_init_array+0x44>)
 8011cd6:	1b64      	subs	r4, r4, r5
 8011cd8:	10a4      	asrs	r4, r4, #2
 8011cda:	42a6      	cmp	r6, r4
 8011cdc:	d105      	bne.n	8011cea <__libc_init_array+0x2e>
 8011cde:	bd70      	pop	{r4, r5, r6, pc}
 8011ce0:	00b3      	lsls	r3, r6, #2
 8011ce2:	58eb      	ldr	r3, [r5, r3]
 8011ce4:	4798      	blx	r3
 8011ce6:	3601      	adds	r6, #1
 8011ce8:	e7ee      	b.n	8011cc8 <__libc_init_array+0xc>
 8011cea:	00b3      	lsls	r3, r6, #2
 8011cec:	58eb      	ldr	r3, [r5, r3]
 8011cee:	4798      	blx	r3
 8011cf0:	3601      	adds	r6, #1
 8011cf2:	e7f2      	b.n	8011cda <__libc_init_array+0x1e>
 8011cf4:	0801806c 	.word	0x0801806c
 8011cf8:	0801806c 	.word	0x0801806c
 8011cfc:	08018070 	.word	0x08018070
 8011d00:	0801806c 	.word	0x0801806c

08011d04 <__retarget_lock_init_recursive>:
 8011d04:	4770      	bx	lr

08011d06 <__retarget_lock_acquire_recursive>:
 8011d06:	4770      	bx	lr

08011d08 <__retarget_lock_release_recursive>:
 8011d08:	4770      	bx	lr

08011d0a <memchr>:
 8011d0a:	b2c9      	uxtb	r1, r1
 8011d0c:	1882      	adds	r2, r0, r2
 8011d0e:	4290      	cmp	r0, r2
 8011d10:	d101      	bne.n	8011d16 <memchr+0xc>
 8011d12:	2000      	movs	r0, #0
 8011d14:	4770      	bx	lr
 8011d16:	7803      	ldrb	r3, [r0, #0]
 8011d18:	428b      	cmp	r3, r1
 8011d1a:	d0fb      	beq.n	8011d14 <memchr+0xa>
 8011d1c:	3001      	adds	r0, #1
 8011d1e:	e7f6      	b.n	8011d0e <memchr+0x4>

08011d20 <memcpy>:
 8011d20:	2300      	movs	r3, #0
 8011d22:	b510      	push	{r4, lr}
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d100      	bne.n	8011d2a <memcpy+0xa>
 8011d28:	bd10      	pop	{r4, pc}
 8011d2a:	5ccc      	ldrb	r4, [r1, r3]
 8011d2c:	54c4      	strb	r4, [r0, r3]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	e7f8      	b.n	8011d24 <memcpy+0x4>
	...

08011d34 <nan>:
 8011d34:	2000      	movs	r0, #0
 8011d36:	4901      	ldr	r1, [pc, #4]	@ (8011d3c <nan+0x8>)
 8011d38:	4770      	bx	lr
 8011d3a:	46c0      	nop			@ (mov r8, r8)
 8011d3c:	7ff80000 	.word	0x7ff80000

08011d40 <__assert_func>:
 8011d40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011d42:	0014      	movs	r4, r2
 8011d44:	001a      	movs	r2, r3
 8011d46:	4b09      	ldr	r3, [pc, #36]	@ (8011d6c <__assert_func+0x2c>)
 8011d48:	0005      	movs	r5, r0
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	000e      	movs	r6, r1
 8011d4e:	68d8      	ldr	r0, [r3, #12]
 8011d50:	4b07      	ldr	r3, [pc, #28]	@ (8011d70 <__assert_func+0x30>)
 8011d52:	2c00      	cmp	r4, #0
 8011d54:	d101      	bne.n	8011d5a <__assert_func+0x1a>
 8011d56:	4b07      	ldr	r3, [pc, #28]	@ (8011d74 <__assert_func+0x34>)
 8011d58:	001c      	movs	r4, r3
 8011d5a:	4907      	ldr	r1, [pc, #28]	@ (8011d78 <__assert_func+0x38>)
 8011d5c:	9301      	str	r3, [sp, #4]
 8011d5e:	9402      	str	r4, [sp, #8]
 8011d60:	002b      	movs	r3, r5
 8011d62:	9600      	str	r6, [sp, #0]
 8011d64:	f002 f9d2 	bl	801410c <fiprintf>
 8011d68:	f002 fa04 	bl	8014174 <abort>
 8011d6c:	200001a0 	.word	0x200001a0
 8011d70:	08017c8f 	.word	0x08017c8f
 8011d74:	08017cca 	.word	0x08017cca
 8011d78:	08017c9c 	.word	0x08017c9c

08011d7c <quorem>:
 8011d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d7e:	6903      	ldr	r3, [r0, #16]
 8011d80:	690c      	ldr	r4, [r1, #16]
 8011d82:	b089      	sub	sp, #36	@ 0x24
 8011d84:	9003      	str	r0, [sp, #12]
 8011d86:	9106      	str	r1, [sp, #24]
 8011d88:	2000      	movs	r0, #0
 8011d8a:	42a3      	cmp	r3, r4
 8011d8c:	db63      	blt.n	8011e56 <quorem+0xda>
 8011d8e:	000b      	movs	r3, r1
 8011d90:	3c01      	subs	r4, #1
 8011d92:	3314      	adds	r3, #20
 8011d94:	00a5      	lsls	r5, r4, #2
 8011d96:	9304      	str	r3, [sp, #16]
 8011d98:	195b      	adds	r3, r3, r5
 8011d9a:	9305      	str	r3, [sp, #20]
 8011d9c:	9b03      	ldr	r3, [sp, #12]
 8011d9e:	3314      	adds	r3, #20
 8011da0:	9301      	str	r3, [sp, #4]
 8011da2:	195d      	adds	r5, r3, r5
 8011da4:	9b05      	ldr	r3, [sp, #20]
 8011da6:	682f      	ldr	r7, [r5, #0]
 8011da8:	681e      	ldr	r6, [r3, #0]
 8011daa:	0038      	movs	r0, r7
 8011dac:	3601      	adds	r6, #1
 8011dae:	0031      	movs	r1, r6
 8011db0:	f7ee f9ce 	bl	8000150 <__udivsi3>
 8011db4:	9002      	str	r0, [sp, #8]
 8011db6:	42b7      	cmp	r7, r6
 8011db8:	d327      	bcc.n	8011e0a <quorem+0x8e>
 8011dba:	9b04      	ldr	r3, [sp, #16]
 8011dbc:	2700      	movs	r7, #0
 8011dbe:	469c      	mov	ip, r3
 8011dc0:	9e01      	ldr	r6, [sp, #4]
 8011dc2:	9707      	str	r7, [sp, #28]
 8011dc4:	4662      	mov	r2, ip
 8011dc6:	ca08      	ldmia	r2!, {r3}
 8011dc8:	6830      	ldr	r0, [r6, #0]
 8011dca:	4694      	mov	ip, r2
 8011dcc:	9a02      	ldr	r2, [sp, #8]
 8011dce:	b299      	uxth	r1, r3
 8011dd0:	4351      	muls	r1, r2
 8011dd2:	0c1b      	lsrs	r3, r3, #16
 8011dd4:	4353      	muls	r3, r2
 8011dd6:	19c9      	adds	r1, r1, r7
 8011dd8:	0c0a      	lsrs	r2, r1, #16
 8011dda:	189b      	adds	r3, r3, r2
 8011ddc:	b289      	uxth	r1, r1
 8011dde:	b282      	uxth	r2, r0
 8011de0:	1a52      	subs	r2, r2, r1
 8011de2:	9907      	ldr	r1, [sp, #28]
 8011de4:	0c1f      	lsrs	r7, r3, #16
 8011de6:	1852      	adds	r2, r2, r1
 8011de8:	0c00      	lsrs	r0, r0, #16
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	1411      	asrs	r1, r2, #16
 8011dee:	1ac3      	subs	r3, r0, r3
 8011df0:	185b      	adds	r3, r3, r1
 8011df2:	1419      	asrs	r1, r3, #16
 8011df4:	b292      	uxth	r2, r2
 8011df6:	041b      	lsls	r3, r3, #16
 8011df8:	431a      	orrs	r2, r3
 8011dfa:	9b05      	ldr	r3, [sp, #20]
 8011dfc:	9107      	str	r1, [sp, #28]
 8011dfe:	c604      	stmia	r6!, {r2}
 8011e00:	4563      	cmp	r3, ip
 8011e02:	d2df      	bcs.n	8011dc4 <quorem+0x48>
 8011e04:	682b      	ldr	r3, [r5, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d02b      	beq.n	8011e62 <quorem+0xe6>
 8011e0a:	9906      	ldr	r1, [sp, #24]
 8011e0c:	9803      	ldr	r0, [sp, #12]
 8011e0e:	f001 fd6f 	bl	80138f0 <__mcmp>
 8011e12:	2800      	cmp	r0, #0
 8011e14:	db1e      	blt.n	8011e54 <quorem+0xd8>
 8011e16:	2600      	movs	r6, #0
 8011e18:	9d01      	ldr	r5, [sp, #4]
 8011e1a:	9904      	ldr	r1, [sp, #16]
 8011e1c:	c901      	ldmia	r1!, {r0}
 8011e1e:	682b      	ldr	r3, [r5, #0]
 8011e20:	b287      	uxth	r7, r0
 8011e22:	b29a      	uxth	r2, r3
 8011e24:	1bd2      	subs	r2, r2, r7
 8011e26:	1992      	adds	r2, r2, r6
 8011e28:	0c00      	lsrs	r0, r0, #16
 8011e2a:	0c1b      	lsrs	r3, r3, #16
 8011e2c:	1a1b      	subs	r3, r3, r0
 8011e2e:	1410      	asrs	r0, r2, #16
 8011e30:	181b      	adds	r3, r3, r0
 8011e32:	141e      	asrs	r6, r3, #16
 8011e34:	b292      	uxth	r2, r2
 8011e36:	041b      	lsls	r3, r3, #16
 8011e38:	431a      	orrs	r2, r3
 8011e3a:	9b05      	ldr	r3, [sp, #20]
 8011e3c:	c504      	stmia	r5!, {r2}
 8011e3e:	428b      	cmp	r3, r1
 8011e40:	d2ec      	bcs.n	8011e1c <quorem+0xa0>
 8011e42:	9a01      	ldr	r2, [sp, #4]
 8011e44:	00a3      	lsls	r3, r4, #2
 8011e46:	18d3      	adds	r3, r2, r3
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	2a00      	cmp	r2, #0
 8011e4c:	d014      	beq.n	8011e78 <quorem+0xfc>
 8011e4e:	9b02      	ldr	r3, [sp, #8]
 8011e50:	3301      	adds	r3, #1
 8011e52:	9302      	str	r3, [sp, #8]
 8011e54:	9802      	ldr	r0, [sp, #8]
 8011e56:	b009      	add	sp, #36	@ 0x24
 8011e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e5a:	682b      	ldr	r3, [r5, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d104      	bne.n	8011e6a <quorem+0xee>
 8011e60:	3c01      	subs	r4, #1
 8011e62:	9b01      	ldr	r3, [sp, #4]
 8011e64:	3d04      	subs	r5, #4
 8011e66:	42ab      	cmp	r3, r5
 8011e68:	d3f7      	bcc.n	8011e5a <quorem+0xde>
 8011e6a:	9b03      	ldr	r3, [sp, #12]
 8011e6c:	611c      	str	r4, [r3, #16]
 8011e6e:	e7cc      	b.n	8011e0a <quorem+0x8e>
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	2a00      	cmp	r2, #0
 8011e74:	d104      	bne.n	8011e80 <quorem+0x104>
 8011e76:	3c01      	subs	r4, #1
 8011e78:	9a01      	ldr	r2, [sp, #4]
 8011e7a:	3b04      	subs	r3, #4
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d3f7      	bcc.n	8011e70 <quorem+0xf4>
 8011e80:	9b03      	ldr	r3, [sp, #12]
 8011e82:	611c      	str	r4, [r3, #16]
 8011e84:	e7e3      	b.n	8011e4e <quorem+0xd2>
	...

08011e88 <_dtoa_r>:
 8011e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e8a:	0014      	movs	r4, r2
 8011e8c:	001d      	movs	r5, r3
 8011e8e:	69c6      	ldr	r6, [r0, #28]
 8011e90:	b09d      	sub	sp, #116	@ 0x74
 8011e92:	940a      	str	r4, [sp, #40]	@ 0x28
 8011e94:	950b      	str	r5, [sp, #44]	@ 0x2c
 8011e96:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8011e98:	9003      	str	r0, [sp, #12]
 8011e9a:	2e00      	cmp	r6, #0
 8011e9c:	d10f      	bne.n	8011ebe <_dtoa_r+0x36>
 8011e9e:	2010      	movs	r0, #16
 8011ea0:	f001 f986 	bl	80131b0 <malloc>
 8011ea4:	9b03      	ldr	r3, [sp, #12]
 8011ea6:	1e02      	subs	r2, r0, #0
 8011ea8:	61d8      	str	r0, [r3, #28]
 8011eaa:	d104      	bne.n	8011eb6 <_dtoa_r+0x2e>
 8011eac:	21ef      	movs	r1, #239	@ 0xef
 8011eae:	4bc7      	ldr	r3, [pc, #796]	@ (80121cc <_dtoa_r+0x344>)
 8011eb0:	48c7      	ldr	r0, [pc, #796]	@ (80121d0 <_dtoa_r+0x348>)
 8011eb2:	f7ff ff45 	bl	8011d40 <__assert_func>
 8011eb6:	6046      	str	r6, [r0, #4]
 8011eb8:	6086      	str	r6, [r0, #8]
 8011eba:	6006      	str	r6, [r0, #0]
 8011ebc:	60c6      	str	r6, [r0, #12]
 8011ebe:	9b03      	ldr	r3, [sp, #12]
 8011ec0:	69db      	ldr	r3, [r3, #28]
 8011ec2:	6819      	ldr	r1, [r3, #0]
 8011ec4:	2900      	cmp	r1, #0
 8011ec6:	d00b      	beq.n	8011ee0 <_dtoa_r+0x58>
 8011ec8:	685a      	ldr	r2, [r3, #4]
 8011eca:	2301      	movs	r3, #1
 8011ecc:	4093      	lsls	r3, r2
 8011ece:	604a      	str	r2, [r1, #4]
 8011ed0:	608b      	str	r3, [r1, #8]
 8011ed2:	9803      	ldr	r0, [sp, #12]
 8011ed4:	f001 fa7e 	bl	80133d4 <_Bfree>
 8011ed8:	2200      	movs	r2, #0
 8011eda:	9b03      	ldr	r3, [sp, #12]
 8011edc:	69db      	ldr	r3, [r3, #28]
 8011ede:	601a      	str	r2, [r3, #0]
 8011ee0:	2d00      	cmp	r5, #0
 8011ee2:	da1e      	bge.n	8011f22 <_dtoa_r+0x9a>
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	603b      	str	r3, [r7, #0]
 8011ee8:	006b      	lsls	r3, r5, #1
 8011eea:	085b      	lsrs	r3, r3, #1
 8011eec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011eee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011ef0:	4bb8      	ldr	r3, [pc, #736]	@ (80121d4 <_dtoa_r+0x34c>)
 8011ef2:	4ab8      	ldr	r2, [pc, #736]	@ (80121d4 <_dtoa_r+0x34c>)
 8011ef4:	403b      	ands	r3, r7
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	d116      	bne.n	8011f28 <_dtoa_r+0xa0>
 8011efa:	4bb7      	ldr	r3, [pc, #732]	@ (80121d8 <_dtoa_r+0x350>)
 8011efc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011efe:	6013      	str	r3, [r2, #0]
 8011f00:	033b      	lsls	r3, r7, #12
 8011f02:	0b1b      	lsrs	r3, r3, #12
 8011f04:	4323      	orrs	r3, r4
 8011f06:	d101      	bne.n	8011f0c <_dtoa_r+0x84>
 8011f08:	f000 fd80 	bl	8012a0c <_dtoa_r+0xb84>
 8011f0c:	4bb3      	ldr	r3, [pc, #716]	@ (80121dc <_dtoa_r+0x354>)
 8011f0e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8011f10:	9308      	str	r3, [sp, #32]
 8011f12:	2a00      	cmp	r2, #0
 8011f14:	d002      	beq.n	8011f1c <_dtoa_r+0x94>
 8011f16:	4bb2      	ldr	r3, [pc, #712]	@ (80121e0 <_dtoa_r+0x358>)
 8011f18:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8011f1a:	6013      	str	r3, [r2, #0]
 8011f1c:	9808      	ldr	r0, [sp, #32]
 8011f1e:	b01d      	add	sp, #116	@ 0x74
 8011f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f22:	2300      	movs	r3, #0
 8011f24:	603b      	str	r3, [r7, #0]
 8011f26:	e7e2      	b.n	8011eee <_dtoa_r+0x66>
 8011f28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011f2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f2c:	9212      	str	r2, [sp, #72]	@ 0x48
 8011f2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011f30:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011f32:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011f34:	2200      	movs	r2, #0
 8011f36:	2300      	movs	r3, #0
 8011f38:	f7ee fa90 	bl	800045c <__aeabi_dcmpeq>
 8011f3c:	1e06      	subs	r6, r0, #0
 8011f3e:	d00b      	beq.n	8011f58 <_dtoa_r+0xd0>
 8011f40:	2301      	movs	r3, #1
 8011f42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011f44:	6013      	str	r3, [r2, #0]
 8011f46:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d002      	beq.n	8011f52 <_dtoa_r+0xca>
 8011f4c:	4ba5      	ldr	r3, [pc, #660]	@ (80121e4 <_dtoa_r+0x35c>)
 8011f4e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8011f50:	6013      	str	r3, [r2, #0]
 8011f52:	4ba5      	ldr	r3, [pc, #660]	@ (80121e8 <_dtoa_r+0x360>)
 8011f54:	9308      	str	r3, [sp, #32]
 8011f56:	e7e1      	b.n	8011f1c <_dtoa_r+0x94>
 8011f58:	ab1a      	add	r3, sp, #104	@ 0x68
 8011f5a:	9301      	str	r3, [sp, #4]
 8011f5c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011f5e:	9300      	str	r3, [sp, #0]
 8011f60:	9803      	ldr	r0, [sp, #12]
 8011f62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011f64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011f66:	f001 fde5 	bl	8013b34 <__d2b>
 8011f6a:	007a      	lsls	r2, r7, #1
 8011f6c:	9005      	str	r0, [sp, #20]
 8011f6e:	0d52      	lsrs	r2, r2, #21
 8011f70:	d100      	bne.n	8011f74 <_dtoa_r+0xec>
 8011f72:	e07b      	b.n	801206c <_dtoa_r+0x1e4>
 8011f74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011f76:	9618      	str	r6, [sp, #96]	@ 0x60
 8011f78:	0319      	lsls	r1, r3, #12
 8011f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80121ec <_dtoa_r+0x364>)
 8011f7c:	0b09      	lsrs	r1, r1, #12
 8011f7e:	430b      	orrs	r3, r1
 8011f80:	499b      	ldr	r1, [pc, #620]	@ (80121f0 <_dtoa_r+0x368>)
 8011f82:	1857      	adds	r7, r2, r1
 8011f84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011f86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011f88:	0019      	movs	r1, r3
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	4b99      	ldr	r3, [pc, #612]	@ (80121f4 <_dtoa_r+0x36c>)
 8011f8e:	f7f0 ff6f 	bl	8002e70 <__aeabi_dsub>
 8011f92:	4a99      	ldr	r2, [pc, #612]	@ (80121f8 <_dtoa_r+0x370>)
 8011f94:	4b99      	ldr	r3, [pc, #612]	@ (80121fc <_dtoa_r+0x374>)
 8011f96:	f7f0 fc85 	bl	80028a4 <__aeabi_dmul>
 8011f9a:	4a99      	ldr	r2, [pc, #612]	@ (8012200 <_dtoa_r+0x378>)
 8011f9c:	4b99      	ldr	r3, [pc, #612]	@ (8012204 <_dtoa_r+0x37c>)
 8011f9e:	f7ef fc81 	bl	80018a4 <__aeabi_dadd>
 8011fa2:	0004      	movs	r4, r0
 8011fa4:	0038      	movs	r0, r7
 8011fa6:	000d      	movs	r5, r1
 8011fa8:	f7f1 fbca 	bl	8003740 <__aeabi_i2d>
 8011fac:	4a96      	ldr	r2, [pc, #600]	@ (8012208 <_dtoa_r+0x380>)
 8011fae:	4b97      	ldr	r3, [pc, #604]	@ (801220c <_dtoa_r+0x384>)
 8011fb0:	f7f0 fc78 	bl	80028a4 <__aeabi_dmul>
 8011fb4:	0002      	movs	r2, r0
 8011fb6:	000b      	movs	r3, r1
 8011fb8:	0020      	movs	r0, r4
 8011fba:	0029      	movs	r1, r5
 8011fbc:	f7ef fc72 	bl	80018a4 <__aeabi_dadd>
 8011fc0:	0004      	movs	r4, r0
 8011fc2:	000d      	movs	r5, r1
 8011fc4:	f7f1 fb80 	bl	80036c8 <__aeabi_d2iz>
 8011fc8:	2200      	movs	r2, #0
 8011fca:	9004      	str	r0, [sp, #16]
 8011fcc:	2300      	movs	r3, #0
 8011fce:	0020      	movs	r0, r4
 8011fd0:	0029      	movs	r1, r5
 8011fd2:	f7ee fa49 	bl	8000468 <__aeabi_dcmplt>
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	d00b      	beq.n	8011ff2 <_dtoa_r+0x16a>
 8011fda:	9804      	ldr	r0, [sp, #16]
 8011fdc:	f7f1 fbb0 	bl	8003740 <__aeabi_i2d>
 8011fe0:	002b      	movs	r3, r5
 8011fe2:	0022      	movs	r2, r4
 8011fe4:	f7ee fa3a 	bl	800045c <__aeabi_dcmpeq>
 8011fe8:	4243      	negs	r3, r0
 8011fea:	4158      	adcs	r0, r3
 8011fec:	9b04      	ldr	r3, [sp, #16]
 8011fee:	1a1b      	subs	r3, r3, r0
 8011ff0:	9304      	str	r3, [sp, #16]
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	9315      	str	r3, [sp, #84]	@ 0x54
 8011ff6:	9b04      	ldr	r3, [sp, #16]
 8011ff8:	2b16      	cmp	r3, #22
 8011ffa:	d810      	bhi.n	801201e <_dtoa_r+0x196>
 8011ffc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011ffe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012000:	9a04      	ldr	r2, [sp, #16]
 8012002:	4b83      	ldr	r3, [pc, #524]	@ (8012210 <_dtoa_r+0x388>)
 8012004:	00d2      	lsls	r2, r2, #3
 8012006:	189b      	adds	r3, r3, r2
 8012008:	681a      	ldr	r2, [r3, #0]
 801200a:	685b      	ldr	r3, [r3, #4]
 801200c:	f7ee fa2c 	bl	8000468 <__aeabi_dcmplt>
 8012010:	2800      	cmp	r0, #0
 8012012:	d047      	beq.n	80120a4 <_dtoa_r+0x21c>
 8012014:	9b04      	ldr	r3, [sp, #16]
 8012016:	3b01      	subs	r3, #1
 8012018:	9304      	str	r3, [sp, #16]
 801201a:	2300      	movs	r3, #0
 801201c:	9315      	str	r3, [sp, #84]	@ 0x54
 801201e:	2200      	movs	r2, #0
 8012020:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012022:	9206      	str	r2, [sp, #24]
 8012024:	1bdb      	subs	r3, r3, r7
 8012026:	1e5a      	subs	r2, r3, #1
 8012028:	d53e      	bpl.n	80120a8 <_dtoa_r+0x220>
 801202a:	2201      	movs	r2, #1
 801202c:	1ad3      	subs	r3, r2, r3
 801202e:	9306      	str	r3, [sp, #24]
 8012030:	2300      	movs	r3, #0
 8012032:	930d      	str	r3, [sp, #52]	@ 0x34
 8012034:	9b04      	ldr	r3, [sp, #16]
 8012036:	2b00      	cmp	r3, #0
 8012038:	db38      	blt.n	80120ac <_dtoa_r+0x224>
 801203a:	9a04      	ldr	r2, [sp, #16]
 801203c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801203e:	4694      	mov	ip, r2
 8012040:	4463      	add	r3, ip
 8012042:	930d      	str	r3, [sp, #52]	@ 0x34
 8012044:	2300      	movs	r3, #0
 8012046:	9214      	str	r2, [sp, #80]	@ 0x50
 8012048:	930f      	str	r3, [sp, #60]	@ 0x3c
 801204a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801204c:	2401      	movs	r4, #1
 801204e:	2b09      	cmp	r3, #9
 8012050:	d862      	bhi.n	8012118 <_dtoa_r+0x290>
 8012052:	2b05      	cmp	r3, #5
 8012054:	dd02      	ble.n	801205c <_dtoa_r+0x1d4>
 8012056:	2400      	movs	r4, #0
 8012058:	3b04      	subs	r3, #4
 801205a:	9322      	str	r3, [sp, #136]	@ 0x88
 801205c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801205e:	1e98      	subs	r0, r3, #2
 8012060:	2803      	cmp	r0, #3
 8012062:	d863      	bhi.n	801212c <_dtoa_r+0x2a4>
 8012064:	f7ee f860 	bl	8000128 <__gnu_thumb1_case_uqi>
 8012068:	2b385654 	.word	0x2b385654
 801206c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801206e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8012070:	18f6      	adds	r6, r6, r3
 8012072:	4b68      	ldr	r3, [pc, #416]	@ (8012214 <_dtoa_r+0x38c>)
 8012074:	18f2      	adds	r2, r6, r3
 8012076:	2a20      	cmp	r2, #32
 8012078:	dd0f      	ble.n	801209a <_dtoa_r+0x212>
 801207a:	2340      	movs	r3, #64	@ 0x40
 801207c:	1a9b      	subs	r3, r3, r2
 801207e:	409f      	lsls	r7, r3
 8012080:	4b65      	ldr	r3, [pc, #404]	@ (8012218 <_dtoa_r+0x390>)
 8012082:	0038      	movs	r0, r7
 8012084:	18f3      	adds	r3, r6, r3
 8012086:	40dc      	lsrs	r4, r3
 8012088:	4320      	orrs	r0, r4
 801208a:	f7f1 fb87 	bl	800379c <__aeabi_ui2d>
 801208e:	2201      	movs	r2, #1
 8012090:	4b62      	ldr	r3, [pc, #392]	@ (801221c <_dtoa_r+0x394>)
 8012092:	1e77      	subs	r7, r6, #1
 8012094:	18cb      	adds	r3, r1, r3
 8012096:	9218      	str	r2, [sp, #96]	@ 0x60
 8012098:	e776      	b.n	8011f88 <_dtoa_r+0x100>
 801209a:	2320      	movs	r3, #32
 801209c:	0020      	movs	r0, r4
 801209e:	1a9b      	subs	r3, r3, r2
 80120a0:	4098      	lsls	r0, r3
 80120a2:	e7f2      	b.n	801208a <_dtoa_r+0x202>
 80120a4:	9015      	str	r0, [sp, #84]	@ 0x54
 80120a6:	e7ba      	b.n	801201e <_dtoa_r+0x196>
 80120a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80120aa:	e7c3      	b.n	8012034 <_dtoa_r+0x1ac>
 80120ac:	9b06      	ldr	r3, [sp, #24]
 80120ae:	9a04      	ldr	r2, [sp, #16]
 80120b0:	1a9b      	subs	r3, r3, r2
 80120b2:	9306      	str	r3, [sp, #24]
 80120b4:	4253      	negs	r3, r2
 80120b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80120b8:	2300      	movs	r3, #0
 80120ba:	9314      	str	r3, [sp, #80]	@ 0x50
 80120bc:	e7c5      	b.n	801204a <_dtoa_r+0x1c2>
 80120be:	2301      	movs	r3, #1
 80120c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80120c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80120c4:	4694      	mov	ip, r2
 80120c6:	9b04      	ldr	r3, [sp, #16]
 80120c8:	4463      	add	r3, ip
 80120ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80120cc:	3301      	adds	r3, #1
 80120ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	dc08      	bgt.n	80120e6 <_dtoa_r+0x25e>
 80120d4:	2301      	movs	r3, #1
 80120d6:	e006      	b.n	80120e6 <_dtoa_r+0x25e>
 80120d8:	2301      	movs	r3, #1
 80120da:	9310      	str	r3, [sp, #64]	@ 0x40
 80120dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80120de:	2b00      	cmp	r3, #0
 80120e0:	dd28      	ble.n	8012134 <_dtoa_r+0x2ac>
 80120e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80120e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80120e6:	9a03      	ldr	r2, [sp, #12]
 80120e8:	2100      	movs	r1, #0
 80120ea:	69d0      	ldr	r0, [r2, #28]
 80120ec:	2204      	movs	r2, #4
 80120ee:	0015      	movs	r5, r2
 80120f0:	3514      	adds	r5, #20
 80120f2:	429d      	cmp	r5, r3
 80120f4:	d923      	bls.n	801213e <_dtoa_r+0x2b6>
 80120f6:	6041      	str	r1, [r0, #4]
 80120f8:	9803      	ldr	r0, [sp, #12]
 80120fa:	f001 f927 	bl	801334c <_Balloc>
 80120fe:	9008      	str	r0, [sp, #32]
 8012100:	2800      	cmp	r0, #0
 8012102:	d11f      	bne.n	8012144 <_dtoa_r+0x2bc>
 8012104:	21b0      	movs	r1, #176	@ 0xb0
 8012106:	4b46      	ldr	r3, [pc, #280]	@ (8012220 <_dtoa_r+0x398>)
 8012108:	4831      	ldr	r0, [pc, #196]	@ (80121d0 <_dtoa_r+0x348>)
 801210a:	9a08      	ldr	r2, [sp, #32]
 801210c:	31ff      	adds	r1, #255	@ 0xff
 801210e:	e6d0      	b.n	8011eb2 <_dtoa_r+0x2a>
 8012110:	2300      	movs	r3, #0
 8012112:	e7e2      	b.n	80120da <_dtoa_r+0x252>
 8012114:	2300      	movs	r3, #0
 8012116:	e7d3      	b.n	80120c0 <_dtoa_r+0x238>
 8012118:	2300      	movs	r3, #0
 801211a:	9410      	str	r4, [sp, #64]	@ 0x40
 801211c:	9322      	str	r3, [sp, #136]	@ 0x88
 801211e:	3b01      	subs	r3, #1
 8012120:	2200      	movs	r2, #0
 8012122:	930e      	str	r3, [sp, #56]	@ 0x38
 8012124:	9309      	str	r3, [sp, #36]	@ 0x24
 8012126:	3313      	adds	r3, #19
 8012128:	9223      	str	r2, [sp, #140]	@ 0x8c
 801212a:	e7dc      	b.n	80120e6 <_dtoa_r+0x25e>
 801212c:	2301      	movs	r3, #1
 801212e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012130:	3b02      	subs	r3, #2
 8012132:	e7f5      	b.n	8012120 <_dtoa_r+0x298>
 8012134:	2301      	movs	r3, #1
 8012136:	001a      	movs	r2, r3
 8012138:	930e      	str	r3, [sp, #56]	@ 0x38
 801213a:	9309      	str	r3, [sp, #36]	@ 0x24
 801213c:	e7f4      	b.n	8012128 <_dtoa_r+0x2a0>
 801213e:	3101      	adds	r1, #1
 8012140:	0052      	lsls	r2, r2, #1
 8012142:	e7d4      	b.n	80120ee <_dtoa_r+0x266>
 8012144:	9b03      	ldr	r3, [sp, #12]
 8012146:	9a08      	ldr	r2, [sp, #32]
 8012148:	69db      	ldr	r3, [r3, #28]
 801214a:	601a      	str	r2, [r3, #0]
 801214c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801214e:	2b0e      	cmp	r3, #14
 8012150:	d900      	bls.n	8012154 <_dtoa_r+0x2cc>
 8012152:	e0d6      	b.n	8012302 <_dtoa_r+0x47a>
 8012154:	2c00      	cmp	r4, #0
 8012156:	d100      	bne.n	801215a <_dtoa_r+0x2d2>
 8012158:	e0d3      	b.n	8012302 <_dtoa_r+0x47a>
 801215a:	9b04      	ldr	r3, [sp, #16]
 801215c:	2b00      	cmp	r3, #0
 801215e:	dd63      	ble.n	8012228 <_dtoa_r+0x3a0>
 8012160:	210f      	movs	r1, #15
 8012162:	9a04      	ldr	r2, [sp, #16]
 8012164:	4b2a      	ldr	r3, [pc, #168]	@ (8012210 <_dtoa_r+0x388>)
 8012166:	400a      	ands	r2, r1
 8012168:	00d2      	lsls	r2, r2, #3
 801216a:	189b      	adds	r3, r3, r2
 801216c:	681e      	ldr	r6, [r3, #0]
 801216e:	685f      	ldr	r7, [r3, #4]
 8012170:	9b04      	ldr	r3, [sp, #16]
 8012172:	2402      	movs	r4, #2
 8012174:	111d      	asrs	r5, r3, #4
 8012176:	05db      	lsls	r3, r3, #23
 8012178:	d50a      	bpl.n	8012190 <_dtoa_r+0x308>
 801217a:	4b2a      	ldr	r3, [pc, #168]	@ (8012224 <_dtoa_r+0x39c>)
 801217c:	400d      	ands	r5, r1
 801217e:	6a1a      	ldr	r2, [r3, #32]
 8012180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012182:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8012184:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012186:	f7ef ff53 	bl	8002030 <__aeabi_ddiv>
 801218a:	900a      	str	r0, [sp, #40]	@ 0x28
 801218c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801218e:	3401      	adds	r4, #1
 8012190:	4b24      	ldr	r3, [pc, #144]	@ (8012224 <_dtoa_r+0x39c>)
 8012192:	930c      	str	r3, [sp, #48]	@ 0x30
 8012194:	2d00      	cmp	r5, #0
 8012196:	d108      	bne.n	80121aa <_dtoa_r+0x322>
 8012198:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801219a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801219c:	0032      	movs	r2, r6
 801219e:	003b      	movs	r3, r7
 80121a0:	f7ef ff46 	bl	8002030 <__aeabi_ddiv>
 80121a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80121a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80121a8:	e059      	b.n	801225e <_dtoa_r+0x3d6>
 80121aa:	2301      	movs	r3, #1
 80121ac:	421d      	tst	r5, r3
 80121ae:	d009      	beq.n	80121c4 <_dtoa_r+0x33c>
 80121b0:	18e4      	adds	r4, r4, r3
 80121b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121b4:	0030      	movs	r0, r6
 80121b6:	681a      	ldr	r2, [r3, #0]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	0039      	movs	r1, r7
 80121bc:	f7f0 fb72 	bl	80028a4 <__aeabi_dmul>
 80121c0:	0006      	movs	r6, r0
 80121c2:	000f      	movs	r7, r1
 80121c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121c6:	106d      	asrs	r5, r5, #1
 80121c8:	3308      	adds	r3, #8
 80121ca:	e7e2      	b.n	8012192 <_dtoa_r+0x30a>
 80121cc:	08017c16 	.word	0x08017c16
 80121d0:	08017cd8 	.word	0x08017cd8
 80121d4:	7ff00000 	.word	0x7ff00000
 80121d8:	0000270f 	.word	0x0000270f
 80121dc:	08017cd4 	.word	0x08017cd4
 80121e0:	08017cd7 	.word	0x08017cd7
 80121e4:	08017bf3 	.word	0x08017bf3
 80121e8:	08017bf2 	.word	0x08017bf2
 80121ec:	3ff00000 	.word	0x3ff00000
 80121f0:	fffffc01 	.word	0xfffffc01
 80121f4:	3ff80000 	.word	0x3ff80000
 80121f8:	636f4361 	.word	0x636f4361
 80121fc:	3fd287a7 	.word	0x3fd287a7
 8012200:	8b60c8b3 	.word	0x8b60c8b3
 8012204:	3fc68a28 	.word	0x3fc68a28
 8012208:	509f79fb 	.word	0x509f79fb
 801220c:	3fd34413 	.word	0x3fd34413
 8012210:	08017e98 	.word	0x08017e98
 8012214:	00000432 	.word	0x00000432
 8012218:	00000412 	.word	0x00000412
 801221c:	fe100000 	.word	0xfe100000
 8012220:	08017d30 	.word	0x08017d30
 8012224:	08017e70 	.word	0x08017e70
 8012228:	9b04      	ldr	r3, [sp, #16]
 801222a:	2402      	movs	r4, #2
 801222c:	2b00      	cmp	r3, #0
 801222e:	d016      	beq.n	801225e <_dtoa_r+0x3d6>
 8012230:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8012232:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012234:	220f      	movs	r2, #15
 8012236:	425d      	negs	r5, r3
 8012238:	402a      	ands	r2, r5
 801223a:	4bd5      	ldr	r3, [pc, #852]	@ (8012590 <_dtoa_r+0x708>)
 801223c:	00d2      	lsls	r2, r2, #3
 801223e:	189b      	adds	r3, r3, r2
 8012240:	681a      	ldr	r2, [r3, #0]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	f7f0 fb2e 	bl	80028a4 <__aeabi_dmul>
 8012248:	2701      	movs	r7, #1
 801224a:	2300      	movs	r3, #0
 801224c:	900a      	str	r0, [sp, #40]	@ 0x28
 801224e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012250:	4ed0      	ldr	r6, [pc, #832]	@ (8012594 <_dtoa_r+0x70c>)
 8012252:	112d      	asrs	r5, r5, #4
 8012254:	2d00      	cmp	r5, #0
 8012256:	d000      	beq.n	801225a <_dtoa_r+0x3d2>
 8012258:	e095      	b.n	8012386 <_dtoa_r+0x4fe>
 801225a:	2b00      	cmp	r3, #0
 801225c:	d1a2      	bne.n	80121a4 <_dtoa_r+0x31c>
 801225e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012260:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012262:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012264:	2b00      	cmp	r3, #0
 8012266:	d100      	bne.n	801226a <_dtoa_r+0x3e2>
 8012268:	e098      	b.n	801239c <_dtoa_r+0x514>
 801226a:	2200      	movs	r2, #0
 801226c:	0030      	movs	r0, r6
 801226e:	0039      	movs	r1, r7
 8012270:	4bc9      	ldr	r3, [pc, #804]	@ (8012598 <_dtoa_r+0x710>)
 8012272:	f7ee f8f9 	bl	8000468 <__aeabi_dcmplt>
 8012276:	2800      	cmp	r0, #0
 8012278:	d100      	bne.n	801227c <_dtoa_r+0x3f4>
 801227a:	e08f      	b.n	801239c <_dtoa_r+0x514>
 801227c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801227e:	2b00      	cmp	r3, #0
 8012280:	d100      	bne.n	8012284 <_dtoa_r+0x3fc>
 8012282:	e08b      	b.n	801239c <_dtoa_r+0x514>
 8012284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012286:	2b00      	cmp	r3, #0
 8012288:	dd37      	ble.n	80122fa <_dtoa_r+0x472>
 801228a:	9b04      	ldr	r3, [sp, #16]
 801228c:	2200      	movs	r2, #0
 801228e:	3b01      	subs	r3, #1
 8012290:	930c      	str	r3, [sp, #48]	@ 0x30
 8012292:	0030      	movs	r0, r6
 8012294:	4bc1      	ldr	r3, [pc, #772]	@ (801259c <_dtoa_r+0x714>)
 8012296:	0039      	movs	r1, r7
 8012298:	f7f0 fb04 	bl	80028a4 <__aeabi_dmul>
 801229c:	900a      	str	r0, [sp, #40]	@ 0x28
 801229e:	910b      	str	r1, [sp, #44]	@ 0x2c
 80122a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122a2:	3401      	adds	r4, #1
 80122a4:	0020      	movs	r0, r4
 80122a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80122a8:	f7f1 fa4a 	bl	8003740 <__aeabi_i2d>
 80122ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80122ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122b0:	f7f0 faf8 	bl	80028a4 <__aeabi_dmul>
 80122b4:	4bba      	ldr	r3, [pc, #744]	@ (80125a0 <_dtoa_r+0x718>)
 80122b6:	2200      	movs	r2, #0
 80122b8:	f7ef faf4 	bl	80018a4 <__aeabi_dadd>
 80122bc:	4bb9      	ldr	r3, [pc, #740]	@ (80125a4 <_dtoa_r+0x71c>)
 80122be:	0006      	movs	r6, r0
 80122c0:	18cf      	adds	r7, r1, r3
 80122c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d16d      	bne.n	80123a4 <_dtoa_r+0x51c>
 80122c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80122ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80122cc:	2200      	movs	r2, #0
 80122ce:	4bb6      	ldr	r3, [pc, #728]	@ (80125a8 <_dtoa_r+0x720>)
 80122d0:	f7f0 fdce 	bl	8002e70 <__aeabi_dsub>
 80122d4:	0032      	movs	r2, r6
 80122d6:	003b      	movs	r3, r7
 80122d8:	0004      	movs	r4, r0
 80122da:	000d      	movs	r5, r1
 80122dc:	f7ee f8d8 	bl	8000490 <__aeabi_dcmpgt>
 80122e0:	2800      	cmp	r0, #0
 80122e2:	d000      	beq.n	80122e6 <_dtoa_r+0x45e>
 80122e4:	e2b6      	b.n	8012854 <_dtoa_r+0x9cc>
 80122e6:	2180      	movs	r1, #128	@ 0x80
 80122e8:	0609      	lsls	r1, r1, #24
 80122ea:	187b      	adds	r3, r7, r1
 80122ec:	0032      	movs	r2, r6
 80122ee:	0020      	movs	r0, r4
 80122f0:	0029      	movs	r1, r5
 80122f2:	f7ee f8b9 	bl	8000468 <__aeabi_dcmplt>
 80122f6:	2800      	cmp	r0, #0
 80122f8:	d128      	bne.n	801234c <_dtoa_r+0x4c4>
 80122fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80122fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80122fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8012300:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012302:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012304:	2b00      	cmp	r3, #0
 8012306:	da00      	bge.n	801230a <_dtoa_r+0x482>
 8012308:	e174      	b.n	80125f4 <_dtoa_r+0x76c>
 801230a:	9a04      	ldr	r2, [sp, #16]
 801230c:	2a0e      	cmp	r2, #14
 801230e:	dd00      	ble.n	8012312 <_dtoa_r+0x48a>
 8012310:	e170      	b.n	80125f4 <_dtoa_r+0x76c>
 8012312:	4b9f      	ldr	r3, [pc, #636]	@ (8012590 <_dtoa_r+0x708>)
 8012314:	00d2      	lsls	r2, r2, #3
 8012316:	189b      	adds	r3, r3, r2
 8012318:	685c      	ldr	r4, [r3, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	9306      	str	r3, [sp, #24]
 801231e:	9407      	str	r4, [sp, #28]
 8012320:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012322:	2b00      	cmp	r3, #0
 8012324:	db00      	blt.n	8012328 <_dtoa_r+0x4a0>
 8012326:	e0e7      	b.n	80124f8 <_dtoa_r+0x670>
 8012328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801232a:	2b00      	cmp	r3, #0
 801232c:	dd00      	ble.n	8012330 <_dtoa_r+0x4a8>
 801232e:	e0e3      	b.n	80124f8 <_dtoa_r+0x670>
 8012330:	d10c      	bne.n	801234c <_dtoa_r+0x4c4>
 8012332:	9806      	ldr	r0, [sp, #24]
 8012334:	9907      	ldr	r1, [sp, #28]
 8012336:	2200      	movs	r2, #0
 8012338:	4b9b      	ldr	r3, [pc, #620]	@ (80125a8 <_dtoa_r+0x720>)
 801233a:	f7f0 fab3 	bl	80028a4 <__aeabi_dmul>
 801233e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012340:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012342:	f7ee f8af 	bl	80004a4 <__aeabi_dcmpge>
 8012346:	2800      	cmp	r0, #0
 8012348:	d100      	bne.n	801234c <_dtoa_r+0x4c4>
 801234a:	e286      	b.n	801285a <_dtoa_r+0x9d2>
 801234c:	2600      	movs	r6, #0
 801234e:	0037      	movs	r7, r6
 8012350:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012352:	9c08      	ldr	r4, [sp, #32]
 8012354:	43db      	mvns	r3, r3
 8012356:	930c      	str	r3, [sp, #48]	@ 0x30
 8012358:	9704      	str	r7, [sp, #16]
 801235a:	2700      	movs	r7, #0
 801235c:	0031      	movs	r1, r6
 801235e:	9803      	ldr	r0, [sp, #12]
 8012360:	f001 f838 	bl	80133d4 <_Bfree>
 8012364:	9b04      	ldr	r3, [sp, #16]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d100      	bne.n	801236c <_dtoa_r+0x4e4>
 801236a:	e0bb      	b.n	80124e4 <_dtoa_r+0x65c>
 801236c:	2f00      	cmp	r7, #0
 801236e:	d005      	beq.n	801237c <_dtoa_r+0x4f4>
 8012370:	429f      	cmp	r7, r3
 8012372:	d003      	beq.n	801237c <_dtoa_r+0x4f4>
 8012374:	0039      	movs	r1, r7
 8012376:	9803      	ldr	r0, [sp, #12]
 8012378:	f001 f82c 	bl	80133d4 <_Bfree>
 801237c:	9904      	ldr	r1, [sp, #16]
 801237e:	9803      	ldr	r0, [sp, #12]
 8012380:	f001 f828 	bl	80133d4 <_Bfree>
 8012384:	e0ae      	b.n	80124e4 <_dtoa_r+0x65c>
 8012386:	423d      	tst	r5, r7
 8012388:	d005      	beq.n	8012396 <_dtoa_r+0x50e>
 801238a:	6832      	ldr	r2, [r6, #0]
 801238c:	6873      	ldr	r3, [r6, #4]
 801238e:	f7f0 fa89 	bl	80028a4 <__aeabi_dmul>
 8012392:	003b      	movs	r3, r7
 8012394:	3401      	adds	r4, #1
 8012396:	106d      	asrs	r5, r5, #1
 8012398:	3608      	adds	r6, #8
 801239a:	e75b      	b.n	8012254 <_dtoa_r+0x3cc>
 801239c:	9b04      	ldr	r3, [sp, #16]
 801239e:	930c      	str	r3, [sp, #48]	@ 0x30
 80123a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123a2:	e77f      	b.n	80122a4 <_dtoa_r+0x41c>
 80123a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80123a6:	4b7a      	ldr	r3, [pc, #488]	@ (8012590 <_dtoa_r+0x708>)
 80123a8:	3a01      	subs	r2, #1
 80123aa:	00d2      	lsls	r2, r2, #3
 80123ac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80123ae:	189b      	adds	r3, r3, r2
 80123b0:	681a      	ldr	r2, [r3, #0]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	2900      	cmp	r1, #0
 80123b6:	d04c      	beq.n	8012452 <_dtoa_r+0x5ca>
 80123b8:	2000      	movs	r0, #0
 80123ba:	497c      	ldr	r1, [pc, #496]	@ (80125ac <_dtoa_r+0x724>)
 80123bc:	f7ef fe38 	bl	8002030 <__aeabi_ddiv>
 80123c0:	0032      	movs	r2, r6
 80123c2:	003b      	movs	r3, r7
 80123c4:	f7f0 fd54 	bl	8002e70 <__aeabi_dsub>
 80123c8:	9a08      	ldr	r2, [sp, #32]
 80123ca:	0006      	movs	r6, r0
 80123cc:	4694      	mov	ip, r2
 80123ce:	000f      	movs	r7, r1
 80123d0:	9b08      	ldr	r3, [sp, #32]
 80123d2:	9316      	str	r3, [sp, #88]	@ 0x58
 80123d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80123d6:	4463      	add	r3, ip
 80123d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80123da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80123dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80123de:	f7f1 f973 	bl	80036c8 <__aeabi_d2iz>
 80123e2:	0005      	movs	r5, r0
 80123e4:	f7f1 f9ac 	bl	8003740 <__aeabi_i2d>
 80123e8:	0002      	movs	r2, r0
 80123ea:	000b      	movs	r3, r1
 80123ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80123ee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80123f0:	f7f0 fd3e 	bl	8002e70 <__aeabi_dsub>
 80123f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80123f6:	3530      	adds	r5, #48	@ 0x30
 80123f8:	1c5c      	adds	r4, r3, #1
 80123fa:	701d      	strb	r5, [r3, #0]
 80123fc:	0032      	movs	r2, r6
 80123fe:	003b      	movs	r3, r7
 8012400:	900a      	str	r0, [sp, #40]	@ 0x28
 8012402:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012404:	f7ee f830 	bl	8000468 <__aeabi_dcmplt>
 8012408:	2800      	cmp	r0, #0
 801240a:	d16b      	bne.n	80124e4 <_dtoa_r+0x65c>
 801240c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801240e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012410:	2000      	movs	r0, #0
 8012412:	4961      	ldr	r1, [pc, #388]	@ (8012598 <_dtoa_r+0x710>)
 8012414:	f7f0 fd2c 	bl	8002e70 <__aeabi_dsub>
 8012418:	0032      	movs	r2, r6
 801241a:	003b      	movs	r3, r7
 801241c:	f7ee f824 	bl	8000468 <__aeabi_dcmplt>
 8012420:	2800      	cmp	r0, #0
 8012422:	d000      	beq.n	8012426 <_dtoa_r+0x59e>
 8012424:	e0c6      	b.n	80125b4 <_dtoa_r+0x72c>
 8012426:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012428:	42a3      	cmp	r3, r4
 801242a:	d100      	bne.n	801242e <_dtoa_r+0x5a6>
 801242c:	e765      	b.n	80122fa <_dtoa_r+0x472>
 801242e:	2200      	movs	r2, #0
 8012430:	0030      	movs	r0, r6
 8012432:	0039      	movs	r1, r7
 8012434:	4b59      	ldr	r3, [pc, #356]	@ (801259c <_dtoa_r+0x714>)
 8012436:	f7f0 fa35 	bl	80028a4 <__aeabi_dmul>
 801243a:	2200      	movs	r2, #0
 801243c:	0006      	movs	r6, r0
 801243e:	000f      	movs	r7, r1
 8012440:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012442:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012444:	4b55      	ldr	r3, [pc, #340]	@ (801259c <_dtoa_r+0x714>)
 8012446:	f7f0 fa2d 	bl	80028a4 <__aeabi_dmul>
 801244a:	9416      	str	r4, [sp, #88]	@ 0x58
 801244c:	900a      	str	r0, [sp, #40]	@ 0x28
 801244e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012450:	e7c3      	b.n	80123da <_dtoa_r+0x552>
 8012452:	0030      	movs	r0, r6
 8012454:	0039      	movs	r1, r7
 8012456:	f7f0 fa25 	bl	80028a4 <__aeabi_dmul>
 801245a:	9d08      	ldr	r5, [sp, #32]
 801245c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801245e:	002b      	movs	r3, r5
 8012460:	4694      	mov	ip, r2
 8012462:	9016      	str	r0, [sp, #88]	@ 0x58
 8012464:	9117      	str	r1, [sp, #92]	@ 0x5c
 8012466:	4463      	add	r3, ip
 8012468:	9319      	str	r3, [sp, #100]	@ 0x64
 801246a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801246c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801246e:	f7f1 f92b 	bl	80036c8 <__aeabi_d2iz>
 8012472:	0004      	movs	r4, r0
 8012474:	f7f1 f964 	bl	8003740 <__aeabi_i2d>
 8012478:	000b      	movs	r3, r1
 801247a:	0002      	movs	r2, r0
 801247c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801247e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012480:	f7f0 fcf6 	bl	8002e70 <__aeabi_dsub>
 8012484:	3430      	adds	r4, #48	@ 0x30
 8012486:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012488:	702c      	strb	r4, [r5, #0]
 801248a:	3501      	adds	r5, #1
 801248c:	0006      	movs	r6, r0
 801248e:	000f      	movs	r7, r1
 8012490:	42ab      	cmp	r3, r5
 8012492:	d12a      	bne.n	80124ea <_dtoa_r+0x662>
 8012494:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8012496:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8012498:	9b08      	ldr	r3, [sp, #32]
 801249a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801249c:	469c      	mov	ip, r3
 801249e:	2200      	movs	r2, #0
 80124a0:	4b42      	ldr	r3, [pc, #264]	@ (80125ac <_dtoa_r+0x724>)
 80124a2:	4464      	add	r4, ip
 80124a4:	f7ef f9fe 	bl	80018a4 <__aeabi_dadd>
 80124a8:	0002      	movs	r2, r0
 80124aa:	000b      	movs	r3, r1
 80124ac:	0030      	movs	r0, r6
 80124ae:	0039      	movs	r1, r7
 80124b0:	f7ed ffee 	bl	8000490 <__aeabi_dcmpgt>
 80124b4:	2800      	cmp	r0, #0
 80124b6:	d000      	beq.n	80124ba <_dtoa_r+0x632>
 80124b8:	e07c      	b.n	80125b4 <_dtoa_r+0x72c>
 80124ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80124bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80124be:	2000      	movs	r0, #0
 80124c0:	493a      	ldr	r1, [pc, #232]	@ (80125ac <_dtoa_r+0x724>)
 80124c2:	f7f0 fcd5 	bl	8002e70 <__aeabi_dsub>
 80124c6:	0002      	movs	r2, r0
 80124c8:	000b      	movs	r3, r1
 80124ca:	0030      	movs	r0, r6
 80124cc:	0039      	movs	r1, r7
 80124ce:	f7ed ffcb 	bl	8000468 <__aeabi_dcmplt>
 80124d2:	2800      	cmp	r0, #0
 80124d4:	d100      	bne.n	80124d8 <_dtoa_r+0x650>
 80124d6:	e710      	b.n	80122fa <_dtoa_r+0x472>
 80124d8:	0023      	movs	r3, r4
 80124da:	3c01      	subs	r4, #1
 80124dc:	7822      	ldrb	r2, [r4, #0]
 80124de:	2a30      	cmp	r2, #48	@ 0x30
 80124e0:	d0fa      	beq.n	80124d8 <_dtoa_r+0x650>
 80124e2:	001c      	movs	r4, r3
 80124e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124e6:	9304      	str	r3, [sp, #16]
 80124e8:	e042      	b.n	8012570 <_dtoa_r+0x6e8>
 80124ea:	2200      	movs	r2, #0
 80124ec:	4b2b      	ldr	r3, [pc, #172]	@ (801259c <_dtoa_r+0x714>)
 80124ee:	f7f0 f9d9 	bl	80028a4 <__aeabi_dmul>
 80124f2:	900a      	str	r0, [sp, #40]	@ 0x28
 80124f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80124f6:	e7b8      	b.n	801246a <_dtoa_r+0x5e2>
 80124f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124fa:	9d08      	ldr	r5, [sp, #32]
 80124fc:	3b01      	subs	r3, #1
 80124fe:	195b      	adds	r3, r3, r5
 8012500:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012502:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012504:	930a      	str	r3, [sp, #40]	@ 0x28
 8012506:	9a06      	ldr	r2, [sp, #24]
 8012508:	9b07      	ldr	r3, [sp, #28]
 801250a:	0030      	movs	r0, r6
 801250c:	0039      	movs	r1, r7
 801250e:	f7ef fd8f 	bl	8002030 <__aeabi_ddiv>
 8012512:	f7f1 f8d9 	bl	80036c8 <__aeabi_d2iz>
 8012516:	9009      	str	r0, [sp, #36]	@ 0x24
 8012518:	f7f1 f912 	bl	8003740 <__aeabi_i2d>
 801251c:	9a06      	ldr	r2, [sp, #24]
 801251e:	9b07      	ldr	r3, [sp, #28]
 8012520:	f7f0 f9c0 	bl	80028a4 <__aeabi_dmul>
 8012524:	0002      	movs	r2, r0
 8012526:	000b      	movs	r3, r1
 8012528:	0030      	movs	r0, r6
 801252a:	0039      	movs	r1, r7
 801252c:	f7f0 fca0 	bl	8002e70 <__aeabi_dsub>
 8012530:	002b      	movs	r3, r5
 8012532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012534:	3501      	adds	r5, #1
 8012536:	3230      	adds	r2, #48	@ 0x30
 8012538:	701a      	strb	r2, [r3, #0]
 801253a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801253c:	002c      	movs	r4, r5
 801253e:	429a      	cmp	r2, r3
 8012540:	d14b      	bne.n	80125da <_dtoa_r+0x752>
 8012542:	0002      	movs	r2, r0
 8012544:	000b      	movs	r3, r1
 8012546:	f7ef f9ad 	bl	80018a4 <__aeabi_dadd>
 801254a:	9a06      	ldr	r2, [sp, #24]
 801254c:	9b07      	ldr	r3, [sp, #28]
 801254e:	0006      	movs	r6, r0
 8012550:	000f      	movs	r7, r1
 8012552:	f7ed ff9d 	bl	8000490 <__aeabi_dcmpgt>
 8012556:	2800      	cmp	r0, #0
 8012558:	d12a      	bne.n	80125b0 <_dtoa_r+0x728>
 801255a:	9a06      	ldr	r2, [sp, #24]
 801255c:	9b07      	ldr	r3, [sp, #28]
 801255e:	0030      	movs	r0, r6
 8012560:	0039      	movs	r1, r7
 8012562:	f7ed ff7b 	bl	800045c <__aeabi_dcmpeq>
 8012566:	2800      	cmp	r0, #0
 8012568:	d002      	beq.n	8012570 <_dtoa_r+0x6e8>
 801256a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801256c:	07dd      	lsls	r5, r3, #31
 801256e:	d41f      	bmi.n	80125b0 <_dtoa_r+0x728>
 8012570:	9905      	ldr	r1, [sp, #20]
 8012572:	9803      	ldr	r0, [sp, #12]
 8012574:	f000 ff2e 	bl	80133d4 <_Bfree>
 8012578:	2300      	movs	r3, #0
 801257a:	7023      	strb	r3, [r4, #0]
 801257c:	9b04      	ldr	r3, [sp, #16]
 801257e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8012580:	3301      	adds	r3, #1
 8012582:	6013      	str	r3, [r2, #0]
 8012584:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8012586:	2b00      	cmp	r3, #0
 8012588:	d100      	bne.n	801258c <_dtoa_r+0x704>
 801258a:	e4c7      	b.n	8011f1c <_dtoa_r+0x94>
 801258c:	601c      	str	r4, [r3, #0]
 801258e:	e4c5      	b.n	8011f1c <_dtoa_r+0x94>
 8012590:	08017e98 	.word	0x08017e98
 8012594:	08017e70 	.word	0x08017e70
 8012598:	3ff00000 	.word	0x3ff00000
 801259c:	40240000 	.word	0x40240000
 80125a0:	401c0000 	.word	0x401c0000
 80125a4:	fcc00000 	.word	0xfcc00000
 80125a8:	40140000 	.word	0x40140000
 80125ac:	3fe00000 	.word	0x3fe00000
 80125b0:	9b04      	ldr	r3, [sp, #16]
 80125b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80125b4:	0023      	movs	r3, r4
 80125b6:	001c      	movs	r4, r3
 80125b8:	3b01      	subs	r3, #1
 80125ba:	781a      	ldrb	r2, [r3, #0]
 80125bc:	2a39      	cmp	r2, #57	@ 0x39
 80125be:	d108      	bne.n	80125d2 <_dtoa_r+0x74a>
 80125c0:	9a08      	ldr	r2, [sp, #32]
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d1f7      	bne.n	80125b6 <_dtoa_r+0x72e>
 80125c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80125c8:	9908      	ldr	r1, [sp, #32]
 80125ca:	3201      	adds	r2, #1
 80125cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80125ce:	2230      	movs	r2, #48	@ 0x30
 80125d0:	700a      	strb	r2, [r1, #0]
 80125d2:	781a      	ldrb	r2, [r3, #0]
 80125d4:	3201      	adds	r2, #1
 80125d6:	701a      	strb	r2, [r3, #0]
 80125d8:	e784      	b.n	80124e4 <_dtoa_r+0x65c>
 80125da:	2200      	movs	r2, #0
 80125dc:	4bc6      	ldr	r3, [pc, #792]	@ (80128f8 <_dtoa_r+0xa70>)
 80125de:	f7f0 f961 	bl	80028a4 <__aeabi_dmul>
 80125e2:	2200      	movs	r2, #0
 80125e4:	2300      	movs	r3, #0
 80125e6:	0006      	movs	r6, r0
 80125e8:	000f      	movs	r7, r1
 80125ea:	f7ed ff37 	bl	800045c <__aeabi_dcmpeq>
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d089      	beq.n	8012506 <_dtoa_r+0x67e>
 80125f2:	e7bd      	b.n	8012570 <_dtoa_r+0x6e8>
 80125f4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80125f6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80125f8:	9c06      	ldr	r4, [sp, #24]
 80125fa:	2f00      	cmp	r7, #0
 80125fc:	d014      	beq.n	8012628 <_dtoa_r+0x7a0>
 80125fe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012600:	2a01      	cmp	r2, #1
 8012602:	dd00      	ble.n	8012606 <_dtoa_r+0x77e>
 8012604:	e0e4      	b.n	80127d0 <_dtoa_r+0x948>
 8012606:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012608:	2a00      	cmp	r2, #0
 801260a:	d100      	bne.n	801260e <_dtoa_r+0x786>
 801260c:	e0da      	b.n	80127c4 <_dtoa_r+0x93c>
 801260e:	4abb      	ldr	r2, [pc, #748]	@ (80128fc <_dtoa_r+0xa74>)
 8012610:	189b      	adds	r3, r3, r2
 8012612:	9a06      	ldr	r2, [sp, #24]
 8012614:	2101      	movs	r1, #1
 8012616:	18d2      	adds	r2, r2, r3
 8012618:	9206      	str	r2, [sp, #24]
 801261a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801261c:	9803      	ldr	r0, [sp, #12]
 801261e:	18d3      	adds	r3, r2, r3
 8012620:	930d      	str	r3, [sp, #52]	@ 0x34
 8012622:	f000 ffdb 	bl	80135dc <__i2b>
 8012626:	0007      	movs	r7, r0
 8012628:	2c00      	cmp	r4, #0
 801262a:	d00e      	beq.n	801264a <_dtoa_r+0x7c2>
 801262c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801262e:	2b00      	cmp	r3, #0
 8012630:	dd0b      	ble.n	801264a <_dtoa_r+0x7c2>
 8012632:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012634:	0023      	movs	r3, r4
 8012636:	4294      	cmp	r4, r2
 8012638:	dd00      	ble.n	801263c <_dtoa_r+0x7b4>
 801263a:	0013      	movs	r3, r2
 801263c:	9a06      	ldr	r2, [sp, #24]
 801263e:	1ae4      	subs	r4, r4, r3
 8012640:	1ad2      	subs	r2, r2, r3
 8012642:	9206      	str	r2, [sp, #24]
 8012644:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012646:	1ad3      	subs	r3, r2, r3
 8012648:	930d      	str	r3, [sp, #52]	@ 0x34
 801264a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801264c:	2b00      	cmp	r3, #0
 801264e:	d021      	beq.n	8012694 <_dtoa_r+0x80c>
 8012650:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012652:	2b00      	cmp	r3, #0
 8012654:	d100      	bne.n	8012658 <_dtoa_r+0x7d0>
 8012656:	e0d3      	b.n	8012800 <_dtoa_r+0x978>
 8012658:	9e05      	ldr	r6, [sp, #20]
 801265a:	2d00      	cmp	r5, #0
 801265c:	d014      	beq.n	8012688 <_dtoa_r+0x800>
 801265e:	0039      	movs	r1, r7
 8012660:	002a      	movs	r2, r5
 8012662:	9803      	ldr	r0, [sp, #12]
 8012664:	f001 f87c 	bl	8013760 <__pow5mult>
 8012668:	9a05      	ldr	r2, [sp, #20]
 801266a:	0001      	movs	r1, r0
 801266c:	0007      	movs	r7, r0
 801266e:	9803      	ldr	r0, [sp, #12]
 8012670:	f000 ffcc 	bl	801360c <__multiply>
 8012674:	0006      	movs	r6, r0
 8012676:	9905      	ldr	r1, [sp, #20]
 8012678:	9803      	ldr	r0, [sp, #12]
 801267a:	f000 feab 	bl	80133d4 <_Bfree>
 801267e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012680:	9605      	str	r6, [sp, #20]
 8012682:	1b5b      	subs	r3, r3, r5
 8012684:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012686:	d005      	beq.n	8012694 <_dtoa_r+0x80c>
 8012688:	0031      	movs	r1, r6
 801268a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801268c:	9803      	ldr	r0, [sp, #12]
 801268e:	f001 f867 	bl	8013760 <__pow5mult>
 8012692:	9005      	str	r0, [sp, #20]
 8012694:	2101      	movs	r1, #1
 8012696:	9803      	ldr	r0, [sp, #12]
 8012698:	f000 ffa0 	bl	80135dc <__i2b>
 801269c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801269e:	0006      	movs	r6, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d100      	bne.n	80126a6 <_dtoa_r+0x81e>
 80126a4:	e1bc      	b.n	8012a20 <_dtoa_r+0xb98>
 80126a6:	001a      	movs	r2, r3
 80126a8:	0001      	movs	r1, r0
 80126aa:	9803      	ldr	r0, [sp, #12]
 80126ac:	f001 f858 	bl	8013760 <__pow5mult>
 80126b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80126b2:	0006      	movs	r6, r0
 80126b4:	2500      	movs	r5, #0
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	dc16      	bgt.n	80126e8 <_dtoa_r+0x860>
 80126ba:	2500      	movs	r5, #0
 80126bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126be:	42ab      	cmp	r3, r5
 80126c0:	d10e      	bne.n	80126e0 <_dtoa_r+0x858>
 80126c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126c4:	031b      	lsls	r3, r3, #12
 80126c6:	42ab      	cmp	r3, r5
 80126c8:	d10a      	bne.n	80126e0 <_dtoa_r+0x858>
 80126ca:	4b8d      	ldr	r3, [pc, #564]	@ (8012900 <_dtoa_r+0xa78>)
 80126cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80126ce:	4213      	tst	r3, r2
 80126d0:	d006      	beq.n	80126e0 <_dtoa_r+0x858>
 80126d2:	9b06      	ldr	r3, [sp, #24]
 80126d4:	3501      	adds	r5, #1
 80126d6:	3301      	adds	r3, #1
 80126d8:	9306      	str	r3, [sp, #24]
 80126da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80126dc:	3301      	adds	r3, #1
 80126de:	930d      	str	r3, [sp, #52]	@ 0x34
 80126e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80126e2:	2001      	movs	r0, #1
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d008      	beq.n	80126fa <_dtoa_r+0x872>
 80126e8:	6933      	ldr	r3, [r6, #16]
 80126ea:	3303      	adds	r3, #3
 80126ec:	009b      	lsls	r3, r3, #2
 80126ee:	18f3      	adds	r3, r6, r3
 80126f0:	6858      	ldr	r0, [r3, #4]
 80126f2:	f000 ff23 	bl	801353c <__hi0bits>
 80126f6:	2320      	movs	r3, #32
 80126f8:	1a18      	subs	r0, r3, r0
 80126fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80126fc:	1818      	adds	r0, r3, r0
 80126fe:	0002      	movs	r2, r0
 8012700:	231f      	movs	r3, #31
 8012702:	401a      	ands	r2, r3
 8012704:	4218      	tst	r0, r3
 8012706:	d100      	bne.n	801270a <_dtoa_r+0x882>
 8012708:	e081      	b.n	801280e <_dtoa_r+0x986>
 801270a:	3301      	adds	r3, #1
 801270c:	1a9b      	subs	r3, r3, r2
 801270e:	2b04      	cmp	r3, #4
 8012710:	dd79      	ble.n	8012806 <_dtoa_r+0x97e>
 8012712:	231c      	movs	r3, #28
 8012714:	1a9b      	subs	r3, r3, r2
 8012716:	9a06      	ldr	r2, [sp, #24]
 8012718:	18e4      	adds	r4, r4, r3
 801271a:	18d2      	adds	r2, r2, r3
 801271c:	9206      	str	r2, [sp, #24]
 801271e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012720:	18d3      	adds	r3, r2, r3
 8012722:	930d      	str	r3, [sp, #52]	@ 0x34
 8012724:	9b06      	ldr	r3, [sp, #24]
 8012726:	2b00      	cmp	r3, #0
 8012728:	dd05      	ble.n	8012736 <_dtoa_r+0x8ae>
 801272a:	001a      	movs	r2, r3
 801272c:	9905      	ldr	r1, [sp, #20]
 801272e:	9803      	ldr	r0, [sp, #12]
 8012730:	f001 f872 	bl	8013818 <__lshift>
 8012734:	9005      	str	r0, [sp, #20]
 8012736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012738:	2b00      	cmp	r3, #0
 801273a:	dd05      	ble.n	8012748 <_dtoa_r+0x8c0>
 801273c:	0031      	movs	r1, r6
 801273e:	001a      	movs	r2, r3
 8012740:	9803      	ldr	r0, [sp, #12]
 8012742:	f001 f869 	bl	8013818 <__lshift>
 8012746:	0006      	movs	r6, r0
 8012748:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801274a:	2b00      	cmp	r3, #0
 801274c:	d061      	beq.n	8012812 <_dtoa_r+0x98a>
 801274e:	0031      	movs	r1, r6
 8012750:	9805      	ldr	r0, [sp, #20]
 8012752:	f001 f8cd 	bl	80138f0 <__mcmp>
 8012756:	2800      	cmp	r0, #0
 8012758:	da5b      	bge.n	8012812 <_dtoa_r+0x98a>
 801275a:	9b04      	ldr	r3, [sp, #16]
 801275c:	220a      	movs	r2, #10
 801275e:	3b01      	subs	r3, #1
 8012760:	930c      	str	r3, [sp, #48]	@ 0x30
 8012762:	9905      	ldr	r1, [sp, #20]
 8012764:	2300      	movs	r3, #0
 8012766:	9803      	ldr	r0, [sp, #12]
 8012768:	f000 fe58 	bl	801341c <__multadd>
 801276c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801276e:	9005      	str	r0, [sp, #20]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d100      	bne.n	8012776 <_dtoa_r+0x8ee>
 8012774:	e15b      	b.n	8012a2e <_dtoa_r+0xba6>
 8012776:	2300      	movs	r3, #0
 8012778:	0039      	movs	r1, r7
 801277a:	220a      	movs	r2, #10
 801277c:	9803      	ldr	r0, [sp, #12]
 801277e:	f000 fe4d 	bl	801341c <__multadd>
 8012782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012784:	0007      	movs	r7, r0
 8012786:	2b00      	cmp	r3, #0
 8012788:	dc4d      	bgt.n	8012826 <_dtoa_r+0x99e>
 801278a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801278c:	2b02      	cmp	r3, #2
 801278e:	dd46      	ble.n	801281e <_dtoa_r+0x996>
 8012790:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012792:	2b00      	cmp	r3, #0
 8012794:	d000      	beq.n	8012798 <_dtoa_r+0x910>
 8012796:	e5db      	b.n	8012350 <_dtoa_r+0x4c8>
 8012798:	0031      	movs	r1, r6
 801279a:	2205      	movs	r2, #5
 801279c:	9803      	ldr	r0, [sp, #12]
 801279e:	f000 fe3d 	bl	801341c <__multadd>
 80127a2:	0006      	movs	r6, r0
 80127a4:	0001      	movs	r1, r0
 80127a6:	9805      	ldr	r0, [sp, #20]
 80127a8:	f001 f8a2 	bl	80138f0 <__mcmp>
 80127ac:	2800      	cmp	r0, #0
 80127ae:	dc00      	bgt.n	80127b2 <_dtoa_r+0x92a>
 80127b0:	e5ce      	b.n	8012350 <_dtoa_r+0x4c8>
 80127b2:	9b08      	ldr	r3, [sp, #32]
 80127b4:	9a08      	ldr	r2, [sp, #32]
 80127b6:	1c5c      	adds	r4, r3, #1
 80127b8:	2331      	movs	r3, #49	@ 0x31
 80127ba:	7013      	strb	r3, [r2, #0]
 80127bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127be:	3301      	adds	r3, #1
 80127c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80127c2:	e5c9      	b.n	8012358 <_dtoa_r+0x4d0>
 80127c4:	2336      	movs	r3, #54	@ 0x36
 80127c6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80127c8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80127ca:	1a9b      	subs	r3, r3, r2
 80127cc:	9c06      	ldr	r4, [sp, #24]
 80127ce:	e720      	b.n	8012612 <_dtoa_r+0x78a>
 80127d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127d2:	1e5d      	subs	r5, r3, #1
 80127d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127d6:	42ab      	cmp	r3, r5
 80127d8:	db08      	blt.n	80127ec <_dtoa_r+0x964>
 80127da:	1b5d      	subs	r5, r3, r5
 80127dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127de:	2b00      	cmp	r3, #0
 80127e0:	daf4      	bge.n	80127cc <_dtoa_r+0x944>
 80127e2:	9b06      	ldr	r3, [sp, #24]
 80127e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127e6:	1a9c      	subs	r4, r3, r2
 80127e8:	2300      	movs	r3, #0
 80127ea:	e712      	b.n	8012612 <_dtoa_r+0x78a>
 80127ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80127f0:	1aeb      	subs	r3, r5, r3
 80127f2:	18d3      	adds	r3, r2, r3
 80127f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80127f6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80127f8:	9c06      	ldr	r4, [sp, #24]
 80127fa:	2500      	movs	r5, #0
 80127fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127fe:	e708      	b.n	8012612 <_dtoa_r+0x78a>
 8012800:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012802:	9905      	ldr	r1, [sp, #20]
 8012804:	e742      	b.n	801268c <_dtoa_r+0x804>
 8012806:	2b04      	cmp	r3, #4
 8012808:	d08c      	beq.n	8012724 <_dtoa_r+0x89c>
 801280a:	331c      	adds	r3, #28
 801280c:	e783      	b.n	8012716 <_dtoa_r+0x88e>
 801280e:	0013      	movs	r3, r2
 8012810:	e7fb      	b.n	801280a <_dtoa_r+0x982>
 8012812:	9b04      	ldr	r3, [sp, #16]
 8012814:	930c      	str	r3, [sp, #48]	@ 0x30
 8012816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012818:	930e      	str	r3, [sp, #56]	@ 0x38
 801281a:	2b00      	cmp	r3, #0
 801281c:	ddb5      	ble.n	801278a <_dtoa_r+0x902>
 801281e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012820:	2b00      	cmp	r3, #0
 8012822:	d100      	bne.n	8012826 <_dtoa_r+0x99e>
 8012824:	e107      	b.n	8012a36 <_dtoa_r+0xbae>
 8012826:	2c00      	cmp	r4, #0
 8012828:	dd05      	ble.n	8012836 <_dtoa_r+0x9ae>
 801282a:	0039      	movs	r1, r7
 801282c:	0022      	movs	r2, r4
 801282e:	9803      	ldr	r0, [sp, #12]
 8012830:	f000 fff2 	bl	8013818 <__lshift>
 8012834:	0007      	movs	r7, r0
 8012836:	9704      	str	r7, [sp, #16]
 8012838:	2d00      	cmp	r5, #0
 801283a:	d020      	beq.n	801287e <_dtoa_r+0x9f6>
 801283c:	6879      	ldr	r1, [r7, #4]
 801283e:	9803      	ldr	r0, [sp, #12]
 8012840:	f000 fd84 	bl	801334c <_Balloc>
 8012844:	1e04      	subs	r4, r0, #0
 8012846:	d10c      	bne.n	8012862 <_dtoa_r+0x9da>
 8012848:	0022      	movs	r2, r4
 801284a:	4b2e      	ldr	r3, [pc, #184]	@ (8012904 <_dtoa_r+0xa7c>)
 801284c:	482e      	ldr	r0, [pc, #184]	@ (8012908 <_dtoa_r+0xa80>)
 801284e:	492f      	ldr	r1, [pc, #188]	@ (801290c <_dtoa_r+0xa84>)
 8012850:	f7ff fb2f 	bl	8011eb2 <_dtoa_r+0x2a>
 8012854:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012856:	0037      	movs	r7, r6
 8012858:	e7ab      	b.n	80127b2 <_dtoa_r+0x92a>
 801285a:	9b04      	ldr	r3, [sp, #16]
 801285c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801285e:	930c      	str	r3, [sp, #48]	@ 0x30
 8012860:	e7f9      	b.n	8012856 <_dtoa_r+0x9ce>
 8012862:	0039      	movs	r1, r7
 8012864:	693a      	ldr	r2, [r7, #16]
 8012866:	310c      	adds	r1, #12
 8012868:	3202      	adds	r2, #2
 801286a:	0092      	lsls	r2, r2, #2
 801286c:	300c      	adds	r0, #12
 801286e:	f7ff fa57 	bl	8011d20 <memcpy>
 8012872:	2201      	movs	r2, #1
 8012874:	0021      	movs	r1, r4
 8012876:	9803      	ldr	r0, [sp, #12]
 8012878:	f000 ffce 	bl	8013818 <__lshift>
 801287c:	9004      	str	r0, [sp, #16]
 801287e:	9b08      	ldr	r3, [sp, #32]
 8012880:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012882:	9306      	str	r3, [sp, #24]
 8012884:	3b01      	subs	r3, #1
 8012886:	189b      	adds	r3, r3, r2
 8012888:	2201      	movs	r2, #1
 801288a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801288c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801288e:	4013      	ands	r3, r2
 8012890:	930e      	str	r3, [sp, #56]	@ 0x38
 8012892:	0031      	movs	r1, r6
 8012894:	9805      	ldr	r0, [sp, #20]
 8012896:	f7ff fa71 	bl	8011d7c <quorem>
 801289a:	0039      	movs	r1, r7
 801289c:	0005      	movs	r5, r0
 801289e:	900a      	str	r0, [sp, #40]	@ 0x28
 80128a0:	9805      	ldr	r0, [sp, #20]
 80128a2:	f001 f825 	bl	80138f0 <__mcmp>
 80128a6:	9a04      	ldr	r2, [sp, #16]
 80128a8:	900d      	str	r0, [sp, #52]	@ 0x34
 80128aa:	0031      	movs	r1, r6
 80128ac:	9803      	ldr	r0, [sp, #12]
 80128ae:	f001 f83b 	bl	8013928 <__mdiff>
 80128b2:	2201      	movs	r2, #1
 80128b4:	68c3      	ldr	r3, [r0, #12]
 80128b6:	0004      	movs	r4, r0
 80128b8:	3530      	adds	r5, #48	@ 0x30
 80128ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d104      	bne.n	80128ca <_dtoa_r+0xa42>
 80128c0:	0001      	movs	r1, r0
 80128c2:	9805      	ldr	r0, [sp, #20]
 80128c4:	f001 f814 	bl	80138f0 <__mcmp>
 80128c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80128ca:	0021      	movs	r1, r4
 80128cc:	9803      	ldr	r0, [sp, #12]
 80128ce:	f000 fd81 	bl	80133d4 <_Bfree>
 80128d2:	9b06      	ldr	r3, [sp, #24]
 80128d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80128d6:	1c5c      	adds	r4, r3, #1
 80128d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128da:	4313      	orrs	r3, r2
 80128dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128de:	4313      	orrs	r3, r2
 80128e0:	d116      	bne.n	8012910 <_dtoa_r+0xa88>
 80128e2:	2d39      	cmp	r5, #57	@ 0x39
 80128e4:	d02f      	beq.n	8012946 <_dtoa_r+0xabe>
 80128e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	dd01      	ble.n	80128f0 <_dtoa_r+0xa68>
 80128ec:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80128ee:	3531      	adds	r5, #49	@ 0x31
 80128f0:	9b06      	ldr	r3, [sp, #24]
 80128f2:	701d      	strb	r5, [r3, #0]
 80128f4:	e532      	b.n	801235c <_dtoa_r+0x4d4>
 80128f6:	46c0      	nop			@ (mov r8, r8)
 80128f8:	40240000 	.word	0x40240000
 80128fc:	00000433 	.word	0x00000433
 8012900:	7ff00000 	.word	0x7ff00000
 8012904:	08017d30 	.word	0x08017d30
 8012908:	08017cd8 	.word	0x08017cd8
 801290c:	000002ef 	.word	0x000002ef
 8012910:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012912:	2b00      	cmp	r3, #0
 8012914:	db04      	blt.n	8012920 <_dtoa_r+0xa98>
 8012916:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012918:	4313      	orrs	r3, r2
 801291a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801291c:	4313      	orrs	r3, r2
 801291e:	d11e      	bne.n	801295e <_dtoa_r+0xad6>
 8012920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012922:	2b00      	cmp	r3, #0
 8012924:	dde4      	ble.n	80128f0 <_dtoa_r+0xa68>
 8012926:	9905      	ldr	r1, [sp, #20]
 8012928:	2201      	movs	r2, #1
 801292a:	9803      	ldr	r0, [sp, #12]
 801292c:	f000 ff74 	bl	8013818 <__lshift>
 8012930:	0031      	movs	r1, r6
 8012932:	9005      	str	r0, [sp, #20]
 8012934:	f000 ffdc 	bl	80138f0 <__mcmp>
 8012938:	2800      	cmp	r0, #0
 801293a:	dc02      	bgt.n	8012942 <_dtoa_r+0xaba>
 801293c:	d1d8      	bne.n	80128f0 <_dtoa_r+0xa68>
 801293e:	07eb      	lsls	r3, r5, #31
 8012940:	d5d6      	bpl.n	80128f0 <_dtoa_r+0xa68>
 8012942:	2d39      	cmp	r5, #57	@ 0x39
 8012944:	d1d2      	bne.n	80128ec <_dtoa_r+0xa64>
 8012946:	2339      	movs	r3, #57	@ 0x39
 8012948:	9a06      	ldr	r2, [sp, #24]
 801294a:	7013      	strb	r3, [r2, #0]
 801294c:	0023      	movs	r3, r4
 801294e:	001c      	movs	r4, r3
 8012950:	3b01      	subs	r3, #1
 8012952:	781a      	ldrb	r2, [r3, #0]
 8012954:	2a39      	cmp	r2, #57	@ 0x39
 8012956:	d050      	beq.n	80129fa <_dtoa_r+0xb72>
 8012958:	3201      	adds	r2, #1
 801295a:	701a      	strb	r2, [r3, #0]
 801295c:	e4fe      	b.n	801235c <_dtoa_r+0x4d4>
 801295e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012960:	2b00      	cmp	r3, #0
 8012962:	dd03      	ble.n	801296c <_dtoa_r+0xae4>
 8012964:	2d39      	cmp	r5, #57	@ 0x39
 8012966:	d0ee      	beq.n	8012946 <_dtoa_r+0xabe>
 8012968:	3501      	adds	r5, #1
 801296a:	e7c1      	b.n	80128f0 <_dtoa_r+0xa68>
 801296c:	9b06      	ldr	r3, [sp, #24]
 801296e:	9a06      	ldr	r2, [sp, #24]
 8012970:	701d      	strb	r5, [r3, #0]
 8012972:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012974:	4293      	cmp	r3, r2
 8012976:	d02b      	beq.n	80129d0 <_dtoa_r+0xb48>
 8012978:	2300      	movs	r3, #0
 801297a:	220a      	movs	r2, #10
 801297c:	9905      	ldr	r1, [sp, #20]
 801297e:	9803      	ldr	r0, [sp, #12]
 8012980:	f000 fd4c 	bl	801341c <__multadd>
 8012984:	9b04      	ldr	r3, [sp, #16]
 8012986:	9005      	str	r0, [sp, #20]
 8012988:	429f      	cmp	r7, r3
 801298a:	d109      	bne.n	80129a0 <_dtoa_r+0xb18>
 801298c:	0039      	movs	r1, r7
 801298e:	2300      	movs	r3, #0
 8012990:	220a      	movs	r2, #10
 8012992:	9803      	ldr	r0, [sp, #12]
 8012994:	f000 fd42 	bl	801341c <__multadd>
 8012998:	0007      	movs	r7, r0
 801299a:	9004      	str	r0, [sp, #16]
 801299c:	9406      	str	r4, [sp, #24]
 801299e:	e778      	b.n	8012892 <_dtoa_r+0xa0a>
 80129a0:	0039      	movs	r1, r7
 80129a2:	2300      	movs	r3, #0
 80129a4:	220a      	movs	r2, #10
 80129a6:	9803      	ldr	r0, [sp, #12]
 80129a8:	f000 fd38 	bl	801341c <__multadd>
 80129ac:	2300      	movs	r3, #0
 80129ae:	0007      	movs	r7, r0
 80129b0:	220a      	movs	r2, #10
 80129b2:	9904      	ldr	r1, [sp, #16]
 80129b4:	9803      	ldr	r0, [sp, #12]
 80129b6:	f000 fd31 	bl	801341c <__multadd>
 80129ba:	9004      	str	r0, [sp, #16]
 80129bc:	e7ee      	b.n	801299c <_dtoa_r+0xb14>
 80129be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129c0:	2401      	movs	r4, #1
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	dd00      	ble.n	80129c8 <_dtoa_r+0xb40>
 80129c6:	001c      	movs	r4, r3
 80129c8:	9704      	str	r7, [sp, #16]
 80129ca:	2700      	movs	r7, #0
 80129cc:	9b08      	ldr	r3, [sp, #32]
 80129ce:	191c      	adds	r4, r3, r4
 80129d0:	9905      	ldr	r1, [sp, #20]
 80129d2:	2201      	movs	r2, #1
 80129d4:	9803      	ldr	r0, [sp, #12]
 80129d6:	f000 ff1f 	bl	8013818 <__lshift>
 80129da:	0031      	movs	r1, r6
 80129dc:	9005      	str	r0, [sp, #20]
 80129de:	f000 ff87 	bl	80138f0 <__mcmp>
 80129e2:	2800      	cmp	r0, #0
 80129e4:	dcb2      	bgt.n	801294c <_dtoa_r+0xac4>
 80129e6:	d101      	bne.n	80129ec <_dtoa_r+0xb64>
 80129e8:	07ed      	lsls	r5, r5, #31
 80129ea:	d4af      	bmi.n	801294c <_dtoa_r+0xac4>
 80129ec:	0023      	movs	r3, r4
 80129ee:	001c      	movs	r4, r3
 80129f0:	3b01      	subs	r3, #1
 80129f2:	781a      	ldrb	r2, [r3, #0]
 80129f4:	2a30      	cmp	r2, #48	@ 0x30
 80129f6:	d0fa      	beq.n	80129ee <_dtoa_r+0xb66>
 80129f8:	e4b0      	b.n	801235c <_dtoa_r+0x4d4>
 80129fa:	9a08      	ldr	r2, [sp, #32]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d1a6      	bne.n	801294e <_dtoa_r+0xac6>
 8012a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a02:	3301      	adds	r3, #1
 8012a04:	930c      	str	r3, [sp, #48]	@ 0x30
 8012a06:	2331      	movs	r3, #49	@ 0x31
 8012a08:	7013      	strb	r3, [r2, #0]
 8012a0a:	e4a7      	b.n	801235c <_dtoa_r+0x4d4>
 8012a0c:	4b14      	ldr	r3, [pc, #80]	@ (8012a60 <_dtoa_r+0xbd8>)
 8012a0e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8012a10:	9308      	str	r3, [sp, #32]
 8012a12:	4b14      	ldr	r3, [pc, #80]	@ (8012a64 <_dtoa_r+0xbdc>)
 8012a14:	2a00      	cmp	r2, #0
 8012a16:	d001      	beq.n	8012a1c <_dtoa_r+0xb94>
 8012a18:	f7ff fa7e 	bl	8011f18 <_dtoa_r+0x90>
 8012a1c:	f7ff fa7e 	bl	8011f1c <_dtoa_r+0x94>
 8012a20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	dc00      	bgt.n	8012a28 <_dtoa_r+0xba0>
 8012a26:	e648      	b.n	80126ba <_dtoa_r+0x832>
 8012a28:	2001      	movs	r0, #1
 8012a2a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8012a2c:	e665      	b.n	80126fa <_dtoa_r+0x872>
 8012a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	dc00      	bgt.n	8012a36 <_dtoa_r+0xbae>
 8012a34:	e6a9      	b.n	801278a <_dtoa_r+0x902>
 8012a36:	2400      	movs	r4, #0
 8012a38:	0031      	movs	r1, r6
 8012a3a:	9805      	ldr	r0, [sp, #20]
 8012a3c:	f7ff f99e 	bl	8011d7c <quorem>
 8012a40:	9b08      	ldr	r3, [sp, #32]
 8012a42:	3030      	adds	r0, #48	@ 0x30
 8012a44:	5518      	strb	r0, [r3, r4]
 8012a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a48:	3401      	adds	r4, #1
 8012a4a:	0005      	movs	r5, r0
 8012a4c:	42a3      	cmp	r3, r4
 8012a4e:	ddb6      	ble.n	80129be <_dtoa_r+0xb36>
 8012a50:	2300      	movs	r3, #0
 8012a52:	220a      	movs	r2, #10
 8012a54:	9905      	ldr	r1, [sp, #20]
 8012a56:	9803      	ldr	r0, [sp, #12]
 8012a58:	f000 fce0 	bl	801341c <__multadd>
 8012a5c:	9005      	str	r0, [sp, #20]
 8012a5e:	e7eb      	b.n	8012a38 <_dtoa_r+0xbb0>
 8012a60:	08017ccb 	.word	0x08017ccb
 8012a64:	08017cd3 	.word	0x08017cd3

08012a68 <_free_r>:
 8012a68:	b570      	push	{r4, r5, r6, lr}
 8012a6a:	0005      	movs	r5, r0
 8012a6c:	1e0c      	subs	r4, r1, #0
 8012a6e:	d010      	beq.n	8012a92 <_free_r+0x2a>
 8012a70:	3c04      	subs	r4, #4
 8012a72:	6823      	ldr	r3, [r4, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	da00      	bge.n	8012a7a <_free_r+0x12>
 8012a78:	18e4      	adds	r4, r4, r3
 8012a7a:	0028      	movs	r0, r5
 8012a7c:	f000 fc56 	bl	801332c <__malloc_lock>
 8012a80:	4a1d      	ldr	r2, [pc, #116]	@ (8012af8 <_free_r+0x90>)
 8012a82:	6813      	ldr	r3, [r2, #0]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d105      	bne.n	8012a94 <_free_r+0x2c>
 8012a88:	6063      	str	r3, [r4, #4]
 8012a8a:	6014      	str	r4, [r2, #0]
 8012a8c:	0028      	movs	r0, r5
 8012a8e:	f000 fc55 	bl	801333c <__malloc_unlock>
 8012a92:	bd70      	pop	{r4, r5, r6, pc}
 8012a94:	42a3      	cmp	r3, r4
 8012a96:	d908      	bls.n	8012aaa <_free_r+0x42>
 8012a98:	6820      	ldr	r0, [r4, #0]
 8012a9a:	1821      	adds	r1, r4, r0
 8012a9c:	428b      	cmp	r3, r1
 8012a9e:	d1f3      	bne.n	8012a88 <_free_r+0x20>
 8012aa0:	6819      	ldr	r1, [r3, #0]
 8012aa2:	685b      	ldr	r3, [r3, #4]
 8012aa4:	1809      	adds	r1, r1, r0
 8012aa6:	6021      	str	r1, [r4, #0]
 8012aa8:	e7ee      	b.n	8012a88 <_free_r+0x20>
 8012aaa:	001a      	movs	r2, r3
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d001      	beq.n	8012ab6 <_free_r+0x4e>
 8012ab2:	42a3      	cmp	r3, r4
 8012ab4:	d9f9      	bls.n	8012aaa <_free_r+0x42>
 8012ab6:	6811      	ldr	r1, [r2, #0]
 8012ab8:	1850      	adds	r0, r2, r1
 8012aba:	42a0      	cmp	r0, r4
 8012abc:	d10b      	bne.n	8012ad6 <_free_r+0x6e>
 8012abe:	6820      	ldr	r0, [r4, #0]
 8012ac0:	1809      	adds	r1, r1, r0
 8012ac2:	1850      	adds	r0, r2, r1
 8012ac4:	6011      	str	r1, [r2, #0]
 8012ac6:	4283      	cmp	r3, r0
 8012ac8:	d1e0      	bne.n	8012a8c <_free_r+0x24>
 8012aca:	6818      	ldr	r0, [r3, #0]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	1841      	adds	r1, r0, r1
 8012ad0:	6011      	str	r1, [r2, #0]
 8012ad2:	6053      	str	r3, [r2, #4]
 8012ad4:	e7da      	b.n	8012a8c <_free_r+0x24>
 8012ad6:	42a0      	cmp	r0, r4
 8012ad8:	d902      	bls.n	8012ae0 <_free_r+0x78>
 8012ada:	230c      	movs	r3, #12
 8012adc:	602b      	str	r3, [r5, #0]
 8012ade:	e7d5      	b.n	8012a8c <_free_r+0x24>
 8012ae0:	6820      	ldr	r0, [r4, #0]
 8012ae2:	1821      	adds	r1, r4, r0
 8012ae4:	428b      	cmp	r3, r1
 8012ae6:	d103      	bne.n	8012af0 <_free_r+0x88>
 8012ae8:	6819      	ldr	r1, [r3, #0]
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	1809      	adds	r1, r1, r0
 8012aee:	6021      	str	r1, [r4, #0]
 8012af0:	6063      	str	r3, [r4, #4]
 8012af2:	6054      	str	r4, [r2, #4]
 8012af4:	e7ca      	b.n	8012a8c <_free_r+0x24>
 8012af6:	46c0      	nop			@ (mov r8, r8)
 8012af8:	20000614 	.word	0x20000614

08012afc <rshift>:
 8012afc:	0002      	movs	r2, r0
 8012afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b00:	6904      	ldr	r4, [r0, #16]
 8012b02:	b085      	sub	sp, #20
 8012b04:	3214      	adds	r2, #20
 8012b06:	114b      	asrs	r3, r1, #5
 8012b08:	0016      	movs	r6, r2
 8012b0a:	9302      	str	r3, [sp, #8]
 8012b0c:	429c      	cmp	r4, r3
 8012b0e:	dd31      	ble.n	8012b74 <rshift+0x78>
 8012b10:	261f      	movs	r6, #31
 8012b12:	000f      	movs	r7, r1
 8012b14:	009b      	lsls	r3, r3, #2
 8012b16:	00a5      	lsls	r5, r4, #2
 8012b18:	18d3      	adds	r3, r2, r3
 8012b1a:	4037      	ands	r7, r6
 8012b1c:	1955      	adds	r5, r2, r5
 8012b1e:	9300      	str	r3, [sp, #0]
 8012b20:	9701      	str	r7, [sp, #4]
 8012b22:	4231      	tst	r1, r6
 8012b24:	d10d      	bne.n	8012b42 <rshift+0x46>
 8012b26:	0016      	movs	r6, r2
 8012b28:	0019      	movs	r1, r3
 8012b2a:	428d      	cmp	r5, r1
 8012b2c:	d836      	bhi.n	8012b9c <rshift+0xa0>
 8012b2e:	9b00      	ldr	r3, [sp, #0]
 8012b30:	2600      	movs	r6, #0
 8012b32:	3b03      	subs	r3, #3
 8012b34:	429d      	cmp	r5, r3
 8012b36:	d302      	bcc.n	8012b3e <rshift+0x42>
 8012b38:	9b02      	ldr	r3, [sp, #8]
 8012b3a:	1ae4      	subs	r4, r4, r3
 8012b3c:	00a6      	lsls	r6, r4, #2
 8012b3e:	1996      	adds	r6, r2, r6
 8012b40:	e018      	b.n	8012b74 <rshift+0x78>
 8012b42:	2120      	movs	r1, #32
 8012b44:	9e01      	ldr	r6, [sp, #4]
 8012b46:	9f01      	ldr	r7, [sp, #4]
 8012b48:	1b89      	subs	r1, r1, r6
 8012b4a:	9e00      	ldr	r6, [sp, #0]
 8012b4c:	9103      	str	r1, [sp, #12]
 8012b4e:	ce02      	ldmia	r6!, {r1}
 8012b50:	4694      	mov	ip, r2
 8012b52:	40f9      	lsrs	r1, r7
 8012b54:	42b5      	cmp	r5, r6
 8012b56:	d816      	bhi.n	8012b86 <rshift+0x8a>
 8012b58:	9b00      	ldr	r3, [sp, #0]
 8012b5a:	2600      	movs	r6, #0
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	429d      	cmp	r5, r3
 8012b60:	d303      	bcc.n	8012b6a <rshift+0x6e>
 8012b62:	9b02      	ldr	r3, [sp, #8]
 8012b64:	1ae4      	subs	r4, r4, r3
 8012b66:	00a6      	lsls	r6, r4, #2
 8012b68:	3e04      	subs	r6, #4
 8012b6a:	1996      	adds	r6, r2, r6
 8012b6c:	6031      	str	r1, [r6, #0]
 8012b6e:	2900      	cmp	r1, #0
 8012b70:	d000      	beq.n	8012b74 <rshift+0x78>
 8012b72:	3604      	adds	r6, #4
 8012b74:	1ab1      	subs	r1, r6, r2
 8012b76:	1089      	asrs	r1, r1, #2
 8012b78:	6101      	str	r1, [r0, #16]
 8012b7a:	4296      	cmp	r6, r2
 8012b7c:	d101      	bne.n	8012b82 <rshift+0x86>
 8012b7e:	2300      	movs	r3, #0
 8012b80:	6143      	str	r3, [r0, #20]
 8012b82:	b005      	add	sp, #20
 8012b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b86:	6837      	ldr	r7, [r6, #0]
 8012b88:	9b03      	ldr	r3, [sp, #12]
 8012b8a:	409f      	lsls	r7, r3
 8012b8c:	430f      	orrs	r7, r1
 8012b8e:	4661      	mov	r1, ip
 8012b90:	c180      	stmia	r1!, {r7}
 8012b92:	468c      	mov	ip, r1
 8012b94:	9b01      	ldr	r3, [sp, #4]
 8012b96:	ce02      	ldmia	r6!, {r1}
 8012b98:	40d9      	lsrs	r1, r3
 8012b9a:	e7db      	b.n	8012b54 <rshift+0x58>
 8012b9c:	c980      	ldmia	r1!, {r7}
 8012b9e:	c680      	stmia	r6!, {r7}
 8012ba0:	e7c3      	b.n	8012b2a <rshift+0x2e>

08012ba2 <__hexdig_fun>:
 8012ba2:	0002      	movs	r2, r0
 8012ba4:	3a30      	subs	r2, #48	@ 0x30
 8012ba6:	0003      	movs	r3, r0
 8012ba8:	2a09      	cmp	r2, #9
 8012baa:	d802      	bhi.n	8012bb2 <__hexdig_fun+0x10>
 8012bac:	3b20      	subs	r3, #32
 8012bae:	b2d8      	uxtb	r0, r3
 8012bb0:	4770      	bx	lr
 8012bb2:	0002      	movs	r2, r0
 8012bb4:	3a61      	subs	r2, #97	@ 0x61
 8012bb6:	2a05      	cmp	r2, #5
 8012bb8:	d801      	bhi.n	8012bbe <__hexdig_fun+0x1c>
 8012bba:	3b47      	subs	r3, #71	@ 0x47
 8012bbc:	e7f7      	b.n	8012bae <__hexdig_fun+0xc>
 8012bbe:	001a      	movs	r2, r3
 8012bc0:	3a41      	subs	r2, #65	@ 0x41
 8012bc2:	2000      	movs	r0, #0
 8012bc4:	2a05      	cmp	r2, #5
 8012bc6:	d8f3      	bhi.n	8012bb0 <__hexdig_fun+0xe>
 8012bc8:	3b27      	subs	r3, #39	@ 0x27
 8012bca:	e7f0      	b.n	8012bae <__hexdig_fun+0xc>

08012bcc <__gethex>:
 8012bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bce:	b089      	sub	sp, #36	@ 0x24
 8012bd0:	9307      	str	r3, [sp, #28]
 8012bd2:	680b      	ldr	r3, [r1, #0]
 8012bd4:	9201      	str	r2, [sp, #4]
 8012bd6:	9003      	str	r0, [sp, #12]
 8012bd8:	9106      	str	r1, [sp, #24]
 8012bda:	1c9a      	adds	r2, r3, #2
 8012bdc:	0011      	movs	r1, r2
 8012bde:	3201      	adds	r2, #1
 8012be0:	1e50      	subs	r0, r2, #1
 8012be2:	7800      	ldrb	r0, [r0, #0]
 8012be4:	2830      	cmp	r0, #48	@ 0x30
 8012be6:	d0f9      	beq.n	8012bdc <__gethex+0x10>
 8012be8:	1acb      	subs	r3, r1, r3
 8012bea:	3b02      	subs	r3, #2
 8012bec:	9305      	str	r3, [sp, #20]
 8012bee:	9100      	str	r1, [sp, #0]
 8012bf0:	f7ff ffd7 	bl	8012ba2 <__hexdig_fun>
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	001d      	movs	r5, r3
 8012bf8:	9302      	str	r3, [sp, #8]
 8012bfa:	4298      	cmp	r0, r3
 8012bfc:	d11e      	bne.n	8012c3c <__gethex+0x70>
 8012bfe:	2201      	movs	r2, #1
 8012c00:	49a6      	ldr	r1, [pc, #664]	@ (8012e9c <__gethex+0x2d0>)
 8012c02:	9800      	ldr	r0, [sp, #0]
 8012c04:	f7fe ff90 	bl	8011b28 <strncmp>
 8012c08:	0007      	movs	r7, r0
 8012c0a:	42a8      	cmp	r0, r5
 8012c0c:	d000      	beq.n	8012c10 <__gethex+0x44>
 8012c0e:	e06a      	b.n	8012ce6 <__gethex+0x11a>
 8012c10:	9b00      	ldr	r3, [sp, #0]
 8012c12:	7858      	ldrb	r0, [r3, #1]
 8012c14:	1c5c      	adds	r4, r3, #1
 8012c16:	f7ff ffc4 	bl	8012ba2 <__hexdig_fun>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	9302      	str	r3, [sp, #8]
 8012c1e:	42a8      	cmp	r0, r5
 8012c20:	d02f      	beq.n	8012c82 <__gethex+0xb6>
 8012c22:	9400      	str	r4, [sp, #0]
 8012c24:	9b00      	ldr	r3, [sp, #0]
 8012c26:	7818      	ldrb	r0, [r3, #0]
 8012c28:	2830      	cmp	r0, #48	@ 0x30
 8012c2a:	d009      	beq.n	8012c40 <__gethex+0x74>
 8012c2c:	f7ff ffb9 	bl	8012ba2 <__hexdig_fun>
 8012c30:	4242      	negs	r2, r0
 8012c32:	4142      	adcs	r2, r0
 8012c34:	2301      	movs	r3, #1
 8012c36:	0025      	movs	r5, r4
 8012c38:	9202      	str	r2, [sp, #8]
 8012c3a:	9305      	str	r3, [sp, #20]
 8012c3c:	9c00      	ldr	r4, [sp, #0]
 8012c3e:	e004      	b.n	8012c4a <__gethex+0x7e>
 8012c40:	9b00      	ldr	r3, [sp, #0]
 8012c42:	3301      	adds	r3, #1
 8012c44:	9300      	str	r3, [sp, #0]
 8012c46:	e7ed      	b.n	8012c24 <__gethex+0x58>
 8012c48:	3401      	adds	r4, #1
 8012c4a:	7820      	ldrb	r0, [r4, #0]
 8012c4c:	f7ff ffa9 	bl	8012ba2 <__hexdig_fun>
 8012c50:	1e07      	subs	r7, r0, #0
 8012c52:	d1f9      	bne.n	8012c48 <__gethex+0x7c>
 8012c54:	2201      	movs	r2, #1
 8012c56:	0020      	movs	r0, r4
 8012c58:	4990      	ldr	r1, [pc, #576]	@ (8012e9c <__gethex+0x2d0>)
 8012c5a:	f7fe ff65 	bl	8011b28 <strncmp>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	d10d      	bne.n	8012c7e <__gethex+0xb2>
 8012c62:	2d00      	cmp	r5, #0
 8012c64:	d106      	bne.n	8012c74 <__gethex+0xa8>
 8012c66:	3401      	adds	r4, #1
 8012c68:	0025      	movs	r5, r4
 8012c6a:	7820      	ldrb	r0, [r4, #0]
 8012c6c:	f7ff ff99 	bl	8012ba2 <__hexdig_fun>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d102      	bne.n	8012c7a <__gethex+0xae>
 8012c74:	1b2d      	subs	r5, r5, r4
 8012c76:	00af      	lsls	r7, r5, #2
 8012c78:	e003      	b.n	8012c82 <__gethex+0xb6>
 8012c7a:	3401      	adds	r4, #1
 8012c7c:	e7f5      	b.n	8012c6a <__gethex+0x9e>
 8012c7e:	2d00      	cmp	r5, #0
 8012c80:	d1f8      	bne.n	8012c74 <__gethex+0xa8>
 8012c82:	2220      	movs	r2, #32
 8012c84:	7823      	ldrb	r3, [r4, #0]
 8012c86:	0026      	movs	r6, r4
 8012c88:	4393      	bics	r3, r2
 8012c8a:	2b50      	cmp	r3, #80	@ 0x50
 8012c8c:	d11d      	bne.n	8012cca <__gethex+0xfe>
 8012c8e:	7863      	ldrb	r3, [r4, #1]
 8012c90:	2b2b      	cmp	r3, #43	@ 0x2b
 8012c92:	d02d      	beq.n	8012cf0 <__gethex+0x124>
 8012c94:	2b2d      	cmp	r3, #45	@ 0x2d
 8012c96:	d02f      	beq.n	8012cf8 <__gethex+0x12c>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	1c66      	adds	r6, r4, #1
 8012c9c:	9304      	str	r3, [sp, #16]
 8012c9e:	7830      	ldrb	r0, [r6, #0]
 8012ca0:	f7ff ff7f 	bl	8012ba2 <__hexdig_fun>
 8012ca4:	1e43      	subs	r3, r0, #1
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	0005      	movs	r5, r0
 8012caa:	2b18      	cmp	r3, #24
 8012cac:	d82a      	bhi.n	8012d04 <__gethex+0x138>
 8012cae:	7870      	ldrb	r0, [r6, #1]
 8012cb0:	f7ff ff77 	bl	8012ba2 <__hexdig_fun>
 8012cb4:	1e43      	subs	r3, r0, #1
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	3601      	adds	r6, #1
 8012cba:	3d10      	subs	r5, #16
 8012cbc:	2b18      	cmp	r3, #24
 8012cbe:	d91d      	bls.n	8012cfc <__gethex+0x130>
 8012cc0:	9b04      	ldr	r3, [sp, #16]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d000      	beq.n	8012cc8 <__gethex+0xfc>
 8012cc6:	426d      	negs	r5, r5
 8012cc8:	197f      	adds	r7, r7, r5
 8012cca:	9b06      	ldr	r3, [sp, #24]
 8012ccc:	601e      	str	r6, [r3, #0]
 8012cce:	9b02      	ldr	r3, [sp, #8]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d019      	beq.n	8012d08 <__gethex+0x13c>
 8012cd4:	9b05      	ldr	r3, [sp, #20]
 8012cd6:	2606      	movs	r6, #6
 8012cd8:	425a      	negs	r2, r3
 8012cda:	4153      	adcs	r3, r2
 8012cdc:	425b      	negs	r3, r3
 8012cde:	401e      	ands	r6, r3
 8012ce0:	0030      	movs	r0, r6
 8012ce2:	b009      	add	sp, #36	@ 0x24
 8012ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	2700      	movs	r7, #0
 8012cea:	9c00      	ldr	r4, [sp, #0]
 8012cec:	9302      	str	r3, [sp, #8]
 8012cee:	e7c8      	b.n	8012c82 <__gethex+0xb6>
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	9304      	str	r3, [sp, #16]
 8012cf4:	1ca6      	adds	r6, r4, #2
 8012cf6:	e7d2      	b.n	8012c9e <__gethex+0xd2>
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	e7fa      	b.n	8012cf2 <__gethex+0x126>
 8012cfc:	230a      	movs	r3, #10
 8012cfe:	435d      	muls	r5, r3
 8012d00:	182d      	adds	r5, r5, r0
 8012d02:	e7d4      	b.n	8012cae <__gethex+0xe2>
 8012d04:	0026      	movs	r6, r4
 8012d06:	e7e0      	b.n	8012cca <__gethex+0xfe>
 8012d08:	9b00      	ldr	r3, [sp, #0]
 8012d0a:	9902      	ldr	r1, [sp, #8]
 8012d0c:	1ae3      	subs	r3, r4, r3
 8012d0e:	3b01      	subs	r3, #1
 8012d10:	2b07      	cmp	r3, #7
 8012d12:	dc0a      	bgt.n	8012d2a <__gethex+0x15e>
 8012d14:	9803      	ldr	r0, [sp, #12]
 8012d16:	f000 fb19 	bl	801334c <_Balloc>
 8012d1a:	1e05      	subs	r5, r0, #0
 8012d1c:	d108      	bne.n	8012d30 <__gethex+0x164>
 8012d1e:	002a      	movs	r2, r5
 8012d20:	21e4      	movs	r1, #228	@ 0xe4
 8012d22:	4b5f      	ldr	r3, [pc, #380]	@ (8012ea0 <__gethex+0x2d4>)
 8012d24:	485f      	ldr	r0, [pc, #380]	@ (8012ea4 <__gethex+0x2d8>)
 8012d26:	f7ff f80b 	bl	8011d40 <__assert_func>
 8012d2a:	3101      	adds	r1, #1
 8012d2c:	105b      	asrs	r3, r3, #1
 8012d2e:	e7ef      	b.n	8012d10 <__gethex+0x144>
 8012d30:	0003      	movs	r3, r0
 8012d32:	3314      	adds	r3, #20
 8012d34:	9302      	str	r3, [sp, #8]
 8012d36:	9305      	str	r3, [sp, #20]
 8012d38:	2300      	movs	r3, #0
 8012d3a:	001e      	movs	r6, r3
 8012d3c:	9304      	str	r3, [sp, #16]
 8012d3e:	9b00      	ldr	r3, [sp, #0]
 8012d40:	42a3      	cmp	r3, r4
 8012d42:	d338      	bcc.n	8012db6 <__gethex+0x1ea>
 8012d44:	9c05      	ldr	r4, [sp, #20]
 8012d46:	9b02      	ldr	r3, [sp, #8]
 8012d48:	c440      	stmia	r4!, {r6}
 8012d4a:	1ae4      	subs	r4, r4, r3
 8012d4c:	10a4      	asrs	r4, r4, #2
 8012d4e:	0030      	movs	r0, r6
 8012d50:	612c      	str	r4, [r5, #16]
 8012d52:	f000 fbf3 	bl	801353c <__hi0bits>
 8012d56:	9b01      	ldr	r3, [sp, #4]
 8012d58:	0164      	lsls	r4, r4, #5
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	1a26      	subs	r6, r4, r0
 8012d5e:	9300      	str	r3, [sp, #0]
 8012d60:	429e      	cmp	r6, r3
 8012d62:	dd52      	ble.n	8012e0a <__gethex+0x23e>
 8012d64:	1af6      	subs	r6, r6, r3
 8012d66:	0031      	movs	r1, r6
 8012d68:	0028      	movs	r0, r5
 8012d6a:	f000 ff8e 	bl	8013c8a <__any_on>
 8012d6e:	1e04      	subs	r4, r0, #0
 8012d70:	d00f      	beq.n	8012d92 <__gethex+0x1c6>
 8012d72:	2401      	movs	r4, #1
 8012d74:	211f      	movs	r1, #31
 8012d76:	0020      	movs	r0, r4
 8012d78:	1e73      	subs	r3, r6, #1
 8012d7a:	4019      	ands	r1, r3
 8012d7c:	4088      	lsls	r0, r1
 8012d7e:	0001      	movs	r1, r0
 8012d80:	115a      	asrs	r2, r3, #5
 8012d82:	9802      	ldr	r0, [sp, #8]
 8012d84:	0092      	lsls	r2, r2, #2
 8012d86:	5812      	ldr	r2, [r2, r0]
 8012d88:	420a      	tst	r2, r1
 8012d8a:	d002      	beq.n	8012d92 <__gethex+0x1c6>
 8012d8c:	42a3      	cmp	r3, r4
 8012d8e:	dc34      	bgt.n	8012dfa <__gethex+0x22e>
 8012d90:	2402      	movs	r4, #2
 8012d92:	0031      	movs	r1, r6
 8012d94:	0028      	movs	r0, r5
 8012d96:	f7ff feb1 	bl	8012afc <rshift>
 8012d9a:	19bf      	adds	r7, r7, r6
 8012d9c:	9b01      	ldr	r3, [sp, #4]
 8012d9e:	689b      	ldr	r3, [r3, #8]
 8012da0:	42bb      	cmp	r3, r7
 8012da2:	da42      	bge.n	8012e2a <__gethex+0x25e>
 8012da4:	0029      	movs	r1, r5
 8012da6:	9803      	ldr	r0, [sp, #12]
 8012da8:	f000 fb14 	bl	80133d4 <_Bfree>
 8012dac:	2300      	movs	r3, #0
 8012dae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012db0:	26a3      	movs	r6, #163	@ 0xa3
 8012db2:	6013      	str	r3, [r2, #0]
 8012db4:	e794      	b.n	8012ce0 <__gethex+0x114>
 8012db6:	3c01      	subs	r4, #1
 8012db8:	7823      	ldrb	r3, [r4, #0]
 8012dba:	2b2e      	cmp	r3, #46	@ 0x2e
 8012dbc:	d012      	beq.n	8012de4 <__gethex+0x218>
 8012dbe:	9b04      	ldr	r3, [sp, #16]
 8012dc0:	2b20      	cmp	r3, #32
 8012dc2:	d104      	bne.n	8012dce <__gethex+0x202>
 8012dc4:	9b05      	ldr	r3, [sp, #20]
 8012dc6:	c340      	stmia	r3!, {r6}
 8012dc8:	2600      	movs	r6, #0
 8012dca:	9305      	str	r3, [sp, #20]
 8012dcc:	9604      	str	r6, [sp, #16]
 8012dce:	7820      	ldrb	r0, [r4, #0]
 8012dd0:	f7ff fee7 	bl	8012ba2 <__hexdig_fun>
 8012dd4:	230f      	movs	r3, #15
 8012dd6:	4018      	ands	r0, r3
 8012dd8:	9b04      	ldr	r3, [sp, #16]
 8012dda:	4098      	lsls	r0, r3
 8012ddc:	3304      	adds	r3, #4
 8012dde:	4306      	orrs	r6, r0
 8012de0:	9304      	str	r3, [sp, #16]
 8012de2:	e7ac      	b.n	8012d3e <__gethex+0x172>
 8012de4:	9b00      	ldr	r3, [sp, #0]
 8012de6:	42a3      	cmp	r3, r4
 8012de8:	d8e9      	bhi.n	8012dbe <__gethex+0x1f2>
 8012dea:	2201      	movs	r2, #1
 8012dec:	0020      	movs	r0, r4
 8012dee:	492b      	ldr	r1, [pc, #172]	@ (8012e9c <__gethex+0x2d0>)
 8012df0:	f7fe fe9a 	bl	8011b28 <strncmp>
 8012df4:	2800      	cmp	r0, #0
 8012df6:	d1e2      	bne.n	8012dbe <__gethex+0x1f2>
 8012df8:	e7a1      	b.n	8012d3e <__gethex+0x172>
 8012dfa:	0028      	movs	r0, r5
 8012dfc:	1eb1      	subs	r1, r6, #2
 8012dfe:	f000 ff44 	bl	8013c8a <__any_on>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d0c4      	beq.n	8012d90 <__gethex+0x1c4>
 8012e06:	2403      	movs	r4, #3
 8012e08:	e7c3      	b.n	8012d92 <__gethex+0x1c6>
 8012e0a:	9b00      	ldr	r3, [sp, #0]
 8012e0c:	2400      	movs	r4, #0
 8012e0e:	429e      	cmp	r6, r3
 8012e10:	dac4      	bge.n	8012d9c <__gethex+0x1d0>
 8012e12:	1b9e      	subs	r6, r3, r6
 8012e14:	0029      	movs	r1, r5
 8012e16:	0032      	movs	r2, r6
 8012e18:	9803      	ldr	r0, [sp, #12]
 8012e1a:	f000 fcfd 	bl	8013818 <__lshift>
 8012e1e:	0003      	movs	r3, r0
 8012e20:	3314      	adds	r3, #20
 8012e22:	0005      	movs	r5, r0
 8012e24:	1bbf      	subs	r7, r7, r6
 8012e26:	9302      	str	r3, [sp, #8]
 8012e28:	e7b8      	b.n	8012d9c <__gethex+0x1d0>
 8012e2a:	9b01      	ldr	r3, [sp, #4]
 8012e2c:	685e      	ldr	r6, [r3, #4]
 8012e2e:	42be      	cmp	r6, r7
 8012e30:	dd6f      	ble.n	8012f12 <__gethex+0x346>
 8012e32:	9b00      	ldr	r3, [sp, #0]
 8012e34:	1bf6      	subs	r6, r6, r7
 8012e36:	42b3      	cmp	r3, r6
 8012e38:	dc36      	bgt.n	8012ea8 <__gethex+0x2dc>
 8012e3a:	9b01      	ldr	r3, [sp, #4]
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	2b02      	cmp	r3, #2
 8012e40:	d024      	beq.n	8012e8c <__gethex+0x2c0>
 8012e42:	2b03      	cmp	r3, #3
 8012e44:	d026      	beq.n	8012e94 <__gethex+0x2c8>
 8012e46:	2b01      	cmp	r3, #1
 8012e48:	d117      	bne.n	8012e7a <__gethex+0x2ae>
 8012e4a:	9b00      	ldr	r3, [sp, #0]
 8012e4c:	42b3      	cmp	r3, r6
 8012e4e:	d114      	bne.n	8012e7a <__gethex+0x2ae>
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d10b      	bne.n	8012e6c <__gethex+0x2a0>
 8012e54:	9b01      	ldr	r3, [sp, #4]
 8012e56:	9a07      	ldr	r2, [sp, #28]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	2662      	movs	r6, #98	@ 0x62
 8012e5c:	6013      	str	r3, [r2, #0]
 8012e5e:	2301      	movs	r3, #1
 8012e60:	9a02      	ldr	r2, [sp, #8]
 8012e62:	612b      	str	r3, [r5, #16]
 8012e64:	6013      	str	r3, [r2, #0]
 8012e66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e68:	601d      	str	r5, [r3, #0]
 8012e6a:	e739      	b.n	8012ce0 <__gethex+0x114>
 8012e6c:	9900      	ldr	r1, [sp, #0]
 8012e6e:	0028      	movs	r0, r5
 8012e70:	3901      	subs	r1, #1
 8012e72:	f000 ff0a 	bl	8013c8a <__any_on>
 8012e76:	2800      	cmp	r0, #0
 8012e78:	d1ec      	bne.n	8012e54 <__gethex+0x288>
 8012e7a:	0029      	movs	r1, r5
 8012e7c:	9803      	ldr	r0, [sp, #12]
 8012e7e:	f000 faa9 	bl	80133d4 <_Bfree>
 8012e82:	2300      	movs	r3, #0
 8012e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012e86:	2650      	movs	r6, #80	@ 0x50
 8012e88:	6013      	str	r3, [r2, #0]
 8012e8a:	e729      	b.n	8012ce0 <__gethex+0x114>
 8012e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d1f3      	bne.n	8012e7a <__gethex+0x2ae>
 8012e92:	e7df      	b.n	8012e54 <__gethex+0x288>
 8012e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d1dc      	bne.n	8012e54 <__gethex+0x288>
 8012e9a:	e7ee      	b.n	8012e7a <__gethex+0x2ae>
 8012e9c:	08017be0 	.word	0x08017be0
 8012ea0:	08017d30 	.word	0x08017d30
 8012ea4:	08017d41 	.word	0x08017d41
 8012ea8:	1e77      	subs	r7, r6, #1
 8012eaa:	2c00      	cmp	r4, #0
 8012eac:	d12f      	bne.n	8012f0e <__gethex+0x342>
 8012eae:	2f00      	cmp	r7, #0
 8012eb0:	d004      	beq.n	8012ebc <__gethex+0x2f0>
 8012eb2:	0039      	movs	r1, r7
 8012eb4:	0028      	movs	r0, r5
 8012eb6:	f000 fee8 	bl	8013c8a <__any_on>
 8012eba:	0004      	movs	r4, r0
 8012ebc:	231f      	movs	r3, #31
 8012ebe:	117a      	asrs	r2, r7, #5
 8012ec0:	401f      	ands	r7, r3
 8012ec2:	3b1e      	subs	r3, #30
 8012ec4:	40bb      	lsls	r3, r7
 8012ec6:	9902      	ldr	r1, [sp, #8]
 8012ec8:	0092      	lsls	r2, r2, #2
 8012eca:	5852      	ldr	r2, [r2, r1]
 8012ecc:	421a      	tst	r2, r3
 8012ece:	d001      	beq.n	8012ed4 <__gethex+0x308>
 8012ed0:	2302      	movs	r3, #2
 8012ed2:	431c      	orrs	r4, r3
 8012ed4:	9b00      	ldr	r3, [sp, #0]
 8012ed6:	0031      	movs	r1, r6
 8012ed8:	1b9b      	subs	r3, r3, r6
 8012eda:	2602      	movs	r6, #2
 8012edc:	0028      	movs	r0, r5
 8012ede:	9300      	str	r3, [sp, #0]
 8012ee0:	f7ff fe0c 	bl	8012afc <rshift>
 8012ee4:	9b01      	ldr	r3, [sp, #4]
 8012ee6:	685f      	ldr	r7, [r3, #4]
 8012ee8:	2c00      	cmp	r4, #0
 8012eea:	d03f      	beq.n	8012f6c <__gethex+0x3a0>
 8012eec:	9b01      	ldr	r3, [sp, #4]
 8012eee:	68db      	ldr	r3, [r3, #12]
 8012ef0:	2b02      	cmp	r3, #2
 8012ef2:	d010      	beq.n	8012f16 <__gethex+0x34a>
 8012ef4:	2b03      	cmp	r3, #3
 8012ef6:	d012      	beq.n	8012f1e <__gethex+0x352>
 8012ef8:	2b01      	cmp	r3, #1
 8012efa:	d106      	bne.n	8012f0a <__gethex+0x33e>
 8012efc:	07a2      	lsls	r2, r4, #30
 8012efe:	d504      	bpl.n	8012f0a <__gethex+0x33e>
 8012f00:	9a02      	ldr	r2, [sp, #8]
 8012f02:	6812      	ldr	r2, [r2, #0]
 8012f04:	4314      	orrs	r4, r2
 8012f06:	421c      	tst	r4, r3
 8012f08:	d10c      	bne.n	8012f24 <__gethex+0x358>
 8012f0a:	2310      	movs	r3, #16
 8012f0c:	e02d      	b.n	8012f6a <__gethex+0x39e>
 8012f0e:	2401      	movs	r4, #1
 8012f10:	e7d4      	b.n	8012ebc <__gethex+0x2f0>
 8012f12:	2601      	movs	r6, #1
 8012f14:	e7e8      	b.n	8012ee8 <__gethex+0x31c>
 8012f16:	2301      	movs	r3, #1
 8012f18:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012f1a:	1a9b      	subs	r3, r3, r2
 8012f1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012f1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d0f2      	beq.n	8012f0a <__gethex+0x33e>
 8012f24:	692b      	ldr	r3, [r5, #16]
 8012f26:	2000      	movs	r0, #0
 8012f28:	9302      	str	r3, [sp, #8]
 8012f2a:	009b      	lsls	r3, r3, #2
 8012f2c:	9304      	str	r3, [sp, #16]
 8012f2e:	002b      	movs	r3, r5
 8012f30:	9a04      	ldr	r2, [sp, #16]
 8012f32:	3314      	adds	r3, #20
 8012f34:	1899      	adds	r1, r3, r2
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	1c54      	adds	r4, r2, #1
 8012f3a:	d01c      	beq.n	8012f76 <__gethex+0x3aa>
 8012f3c:	3201      	adds	r2, #1
 8012f3e:	601a      	str	r2, [r3, #0]
 8012f40:	002b      	movs	r3, r5
 8012f42:	3314      	adds	r3, #20
 8012f44:	2e02      	cmp	r6, #2
 8012f46:	d13f      	bne.n	8012fc8 <__gethex+0x3fc>
 8012f48:	9a01      	ldr	r2, [sp, #4]
 8012f4a:	9900      	ldr	r1, [sp, #0]
 8012f4c:	6812      	ldr	r2, [r2, #0]
 8012f4e:	3a01      	subs	r2, #1
 8012f50:	428a      	cmp	r2, r1
 8012f52:	d109      	bne.n	8012f68 <__gethex+0x39c>
 8012f54:	000a      	movs	r2, r1
 8012f56:	201f      	movs	r0, #31
 8012f58:	4010      	ands	r0, r2
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	4082      	lsls	r2, r0
 8012f5e:	1149      	asrs	r1, r1, #5
 8012f60:	0089      	lsls	r1, r1, #2
 8012f62:	58cb      	ldr	r3, [r1, r3]
 8012f64:	4213      	tst	r3, r2
 8012f66:	d13d      	bne.n	8012fe4 <__gethex+0x418>
 8012f68:	2320      	movs	r3, #32
 8012f6a:	431e      	orrs	r6, r3
 8012f6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f6e:	601d      	str	r5, [r3, #0]
 8012f70:	9b07      	ldr	r3, [sp, #28]
 8012f72:	601f      	str	r7, [r3, #0]
 8012f74:	e6b4      	b.n	8012ce0 <__gethex+0x114>
 8012f76:	c301      	stmia	r3!, {r0}
 8012f78:	4299      	cmp	r1, r3
 8012f7a:	d8dc      	bhi.n	8012f36 <__gethex+0x36a>
 8012f7c:	68ab      	ldr	r3, [r5, #8]
 8012f7e:	9a02      	ldr	r2, [sp, #8]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	db18      	blt.n	8012fb6 <__gethex+0x3ea>
 8012f84:	6869      	ldr	r1, [r5, #4]
 8012f86:	9803      	ldr	r0, [sp, #12]
 8012f88:	3101      	adds	r1, #1
 8012f8a:	f000 f9df 	bl	801334c <_Balloc>
 8012f8e:	1e04      	subs	r4, r0, #0
 8012f90:	d104      	bne.n	8012f9c <__gethex+0x3d0>
 8012f92:	0022      	movs	r2, r4
 8012f94:	2184      	movs	r1, #132	@ 0x84
 8012f96:	4b1d      	ldr	r3, [pc, #116]	@ (801300c <__gethex+0x440>)
 8012f98:	481d      	ldr	r0, [pc, #116]	@ (8013010 <__gethex+0x444>)
 8012f9a:	e6c4      	b.n	8012d26 <__gethex+0x15a>
 8012f9c:	0029      	movs	r1, r5
 8012f9e:	692a      	ldr	r2, [r5, #16]
 8012fa0:	310c      	adds	r1, #12
 8012fa2:	3202      	adds	r2, #2
 8012fa4:	0092      	lsls	r2, r2, #2
 8012fa6:	300c      	adds	r0, #12
 8012fa8:	f7fe feba 	bl	8011d20 <memcpy>
 8012fac:	0029      	movs	r1, r5
 8012fae:	9803      	ldr	r0, [sp, #12]
 8012fb0:	f000 fa10 	bl	80133d4 <_Bfree>
 8012fb4:	0025      	movs	r5, r4
 8012fb6:	692b      	ldr	r3, [r5, #16]
 8012fb8:	1c5a      	adds	r2, r3, #1
 8012fba:	612a      	str	r2, [r5, #16]
 8012fbc:	2201      	movs	r2, #1
 8012fbe:	3304      	adds	r3, #4
 8012fc0:	009b      	lsls	r3, r3, #2
 8012fc2:	18eb      	adds	r3, r5, r3
 8012fc4:	605a      	str	r2, [r3, #4]
 8012fc6:	e7bb      	b.n	8012f40 <__gethex+0x374>
 8012fc8:	692a      	ldr	r2, [r5, #16]
 8012fca:	9902      	ldr	r1, [sp, #8]
 8012fcc:	428a      	cmp	r2, r1
 8012fce:	dd0b      	ble.n	8012fe8 <__gethex+0x41c>
 8012fd0:	2101      	movs	r1, #1
 8012fd2:	0028      	movs	r0, r5
 8012fd4:	f7ff fd92 	bl	8012afc <rshift>
 8012fd8:	9b01      	ldr	r3, [sp, #4]
 8012fda:	3701      	adds	r7, #1
 8012fdc:	689b      	ldr	r3, [r3, #8]
 8012fde:	42bb      	cmp	r3, r7
 8012fe0:	da00      	bge.n	8012fe4 <__gethex+0x418>
 8012fe2:	e6df      	b.n	8012da4 <__gethex+0x1d8>
 8012fe4:	2601      	movs	r6, #1
 8012fe6:	e7bf      	b.n	8012f68 <__gethex+0x39c>
 8012fe8:	221f      	movs	r2, #31
 8012fea:	9c00      	ldr	r4, [sp, #0]
 8012fec:	9900      	ldr	r1, [sp, #0]
 8012fee:	4014      	ands	r4, r2
 8012ff0:	4211      	tst	r1, r2
 8012ff2:	d0f7      	beq.n	8012fe4 <__gethex+0x418>
 8012ff4:	9a04      	ldr	r2, [sp, #16]
 8012ff6:	189b      	adds	r3, r3, r2
 8012ff8:	3b04      	subs	r3, #4
 8012ffa:	6818      	ldr	r0, [r3, #0]
 8012ffc:	f000 fa9e 	bl	801353c <__hi0bits>
 8013000:	2320      	movs	r3, #32
 8013002:	1b1b      	subs	r3, r3, r4
 8013004:	4298      	cmp	r0, r3
 8013006:	dbe3      	blt.n	8012fd0 <__gethex+0x404>
 8013008:	e7ec      	b.n	8012fe4 <__gethex+0x418>
 801300a:	46c0      	nop			@ (mov r8, r8)
 801300c:	08017d30 	.word	0x08017d30
 8013010:	08017d41 	.word	0x08017d41

08013014 <L_shift>:
 8013014:	2308      	movs	r3, #8
 8013016:	b570      	push	{r4, r5, r6, lr}
 8013018:	2520      	movs	r5, #32
 801301a:	1a9a      	subs	r2, r3, r2
 801301c:	0092      	lsls	r2, r2, #2
 801301e:	1aad      	subs	r5, r5, r2
 8013020:	6843      	ldr	r3, [r0, #4]
 8013022:	6804      	ldr	r4, [r0, #0]
 8013024:	001e      	movs	r6, r3
 8013026:	40ae      	lsls	r6, r5
 8013028:	40d3      	lsrs	r3, r2
 801302a:	4334      	orrs	r4, r6
 801302c:	6004      	str	r4, [r0, #0]
 801302e:	6043      	str	r3, [r0, #4]
 8013030:	3004      	adds	r0, #4
 8013032:	4288      	cmp	r0, r1
 8013034:	d3f4      	bcc.n	8013020 <L_shift+0xc>
 8013036:	bd70      	pop	{r4, r5, r6, pc}

08013038 <__match>:
 8013038:	b530      	push	{r4, r5, lr}
 801303a:	6803      	ldr	r3, [r0, #0]
 801303c:	780c      	ldrb	r4, [r1, #0]
 801303e:	3301      	adds	r3, #1
 8013040:	2c00      	cmp	r4, #0
 8013042:	d102      	bne.n	801304a <__match+0x12>
 8013044:	6003      	str	r3, [r0, #0]
 8013046:	2001      	movs	r0, #1
 8013048:	bd30      	pop	{r4, r5, pc}
 801304a:	781a      	ldrb	r2, [r3, #0]
 801304c:	0015      	movs	r5, r2
 801304e:	3d41      	subs	r5, #65	@ 0x41
 8013050:	2d19      	cmp	r5, #25
 8013052:	d800      	bhi.n	8013056 <__match+0x1e>
 8013054:	3220      	adds	r2, #32
 8013056:	3101      	adds	r1, #1
 8013058:	42a2      	cmp	r2, r4
 801305a:	d0ef      	beq.n	801303c <__match+0x4>
 801305c:	2000      	movs	r0, #0
 801305e:	e7f3      	b.n	8013048 <__match+0x10>

08013060 <__hexnan>:
 8013060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013062:	680b      	ldr	r3, [r1, #0]
 8013064:	b08b      	sub	sp, #44	@ 0x2c
 8013066:	9201      	str	r2, [sp, #4]
 8013068:	9901      	ldr	r1, [sp, #4]
 801306a:	115a      	asrs	r2, r3, #5
 801306c:	0092      	lsls	r2, r2, #2
 801306e:	188a      	adds	r2, r1, r2
 8013070:	9202      	str	r2, [sp, #8]
 8013072:	0019      	movs	r1, r3
 8013074:	221f      	movs	r2, #31
 8013076:	4011      	ands	r1, r2
 8013078:	9008      	str	r0, [sp, #32]
 801307a:	9106      	str	r1, [sp, #24]
 801307c:	4213      	tst	r3, r2
 801307e:	d002      	beq.n	8013086 <__hexnan+0x26>
 8013080:	9b02      	ldr	r3, [sp, #8]
 8013082:	3304      	adds	r3, #4
 8013084:	9302      	str	r3, [sp, #8]
 8013086:	9b02      	ldr	r3, [sp, #8]
 8013088:	2500      	movs	r5, #0
 801308a:	1f1f      	subs	r7, r3, #4
 801308c:	003e      	movs	r6, r7
 801308e:	003c      	movs	r4, r7
 8013090:	9b08      	ldr	r3, [sp, #32]
 8013092:	603d      	str	r5, [r7, #0]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	9507      	str	r5, [sp, #28]
 8013098:	9305      	str	r3, [sp, #20]
 801309a:	9503      	str	r5, [sp, #12]
 801309c:	9b05      	ldr	r3, [sp, #20]
 801309e:	3301      	adds	r3, #1
 80130a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80130a2:	9b05      	ldr	r3, [sp, #20]
 80130a4:	785b      	ldrb	r3, [r3, #1]
 80130a6:	9304      	str	r3, [sp, #16]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d028      	beq.n	80130fe <__hexnan+0x9e>
 80130ac:	9804      	ldr	r0, [sp, #16]
 80130ae:	f7ff fd78 	bl	8012ba2 <__hexdig_fun>
 80130b2:	2800      	cmp	r0, #0
 80130b4:	d155      	bne.n	8013162 <__hexnan+0x102>
 80130b6:	9b04      	ldr	r3, [sp, #16]
 80130b8:	2b20      	cmp	r3, #32
 80130ba:	d819      	bhi.n	80130f0 <__hexnan+0x90>
 80130bc:	9b03      	ldr	r3, [sp, #12]
 80130be:	9a07      	ldr	r2, [sp, #28]
 80130c0:	4293      	cmp	r3, r2
 80130c2:	dd12      	ble.n	80130ea <__hexnan+0x8a>
 80130c4:	42b4      	cmp	r4, r6
 80130c6:	d206      	bcs.n	80130d6 <__hexnan+0x76>
 80130c8:	2d07      	cmp	r5, #7
 80130ca:	dc04      	bgt.n	80130d6 <__hexnan+0x76>
 80130cc:	002a      	movs	r2, r5
 80130ce:	0031      	movs	r1, r6
 80130d0:	0020      	movs	r0, r4
 80130d2:	f7ff ff9f 	bl	8013014 <L_shift>
 80130d6:	9b01      	ldr	r3, [sp, #4]
 80130d8:	2508      	movs	r5, #8
 80130da:	429c      	cmp	r4, r3
 80130dc:	d905      	bls.n	80130ea <__hexnan+0x8a>
 80130de:	1f26      	subs	r6, r4, #4
 80130e0:	2500      	movs	r5, #0
 80130e2:	0034      	movs	r4, r6
 80130e4:	9b03      	ldr	r3, [sp, #12]
 80130e6:	6035      	str	r5, [r6, #0]
 80130e8:	9307      	str	r3, [sp, #28]
 80130ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130ec:	9305      	str	r3, [sp, #20]
 80130ee:	e7d5      	b.n	801309c <__hexnan+0x3c>
 80130f0:	9b04      	ldr	r3, [sp, #16]
 80130f2:	2b29      	cmp	r3, #41	@ 0x29
 80130f4:	d15a      	bne.n	80131ac <__hexnan+0x14c>
 80130f6:	9b05      	ldr	r3, [sp, #20]
 80130f8:	9a08      	ldr	r2, [sp, #32]
 80130fa:	3302      	adds	r3, #2
 80130fc:	6013      	str	r3, [r2, #0]
 80130fe:	9b03      	ldr	r3, [sp, #12]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d053      	beq.n	80131ac <__hexnan+0x14c>
 8013104:	42b4      	cmp	r4, r6
 8013106:	d206      	bcs.n	8013116 <__hexnan+0xb6>
 8013108:	2d07      	cmp	r5, #7
 801310a:	dc04      	bgt.n	8013116 <__hexnan+0xb6>
 801310c:	002a      	movs	r2, r5
 801310e:	0031      	movs	r1, r6
 8013110:	0020      	movs	r0, r4
 8013112:	f7ff ff7f 	bl	8013014 <L_shift>
 8013116:	9b01      	ldr	r3, [sp, #4]
 8013118:	429c      	cmp	r4, r3
 801311a:	d936      	bls.n	801318a <__hexnan+0x12a>
 801311c:	001a      	movs	r2, r3
 801311e:	0023      	movs	r3, r4
 8013120:	cb02      	ldmia	r3!, {r1}
 8013122:	c202      	stmia	r2!, {r1}
 8013124:	429f      	cmp	r7, r3
 8013126:	d2fb      	bcs.n	8013120 <__hexnan+0xc0>
 8013128:	9b02      	ldr	r3, [sp, #8]
 801312a:	1c62      	adds	r2, r4, #1
 801312c:	1ed9      	subs	r1, r3, #3
 801312e:	2304      	movs	r3, #4
 8013130:	4291      	cmp	r1, r2
 8013132:	d305      	bcc.n	8013140 <__hexnan+0xe0>
 8013134:	9b02      	ldr	r3, [sp, #8]
 8013136:	3b04      	subs	r3, #4
 8013138:	1b1b      	subs	r3, r3, r4
 801313a:	089b      	lsrs	r3, r3, #2
 801313c:	3301      	adds	r3, #1
 801313e:	009b      	lsls	r3, r3, #2
 8013140:	9a01      	ldr	r2, [sp, #4]
 8013142:	18d3      	adds	r3, r2, r3
 8013144:	2200      	movs	r2, #0
 8013146:	c304      	stmia	r3!, {r2}
 8013148:	429f      	cmp	r7, r3
 801314a:	d2fc      	bcs.n	8013146 <__hexnan+0xe6>
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d104      	bne.n	801315c <__hexnan+0xfc>
 8013152:	9b01      	ldr	r3, [sp, #4]
 8013154:	429f      	cmp	r7, r3
 8013156:	d127      	bne.n	80131a8 <__hexnan+0x148>
 8013158:	2301      	movs	r3, #1
 801315a:	603b      	str	r3, [r7, #0]
 801315c:	2005      	movs	r0, #5
 801315e:	b00b      	add	sp, #44	@ 0x2c
 8013160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013162:	9b03      	ldr	r3, [sp, #12]
 8013164:	3501      	adds	r5, #1
 8013166:	3301      	adds	r3, #1
 8013168:	9303      	str	r3, [sp, #12]
 801316a:	2d08      	cmp	r5, #8
 801316c:	dd06      	ble.n	801317c <__hexnan+0x11c>
 801316e:	9b01      	ldr	r3, [sp, #4]
 8013170:	429c      	cmp	r4, r3
 8013172:	d9ba      	bls.n	80130ea <__hexnan+0x8a>
 8013174:	2300      	movs	r3, #0
 8013176:	2501      	movs	r5, #1
 8013178:	3c04      	subs	r4, #4
 801317a:	6023      	str	r3, [r4, #0]
 801317c:	220f      	movs	r2, #15
 801317e:	6823      	ldr	r3, [r4, #0]
 8013180:	4010      	ands	r0, r2
 8013182:	011b      	lsls	r3, r3, #4
 8013184:	4303      	orrs	r3, r0
 8013186:	6023      	str	r3, [r4, #0]
 8013188:	e7af      	b.n	80130ea <__hexnan+0x8a>
 801318a:	9b06      	ldr	r3, [sp, #24]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d0dd      	beq.n	801314c <__hexnan+0xec>
 8013190:	2320      	movs	r3, #32
 8013192:	9a06      	ldr	r2, [sp, #24]
 8013194:	9902      	ldr	r1, [sp, #8]
 8013196:	1a9b      	subs	r3, r3, r2
 8013198:	2201      	movs	r2, #1
 801319a:	4252      	negs	r2, r2
 801319c:	40da      	lsrs	r2, r3
 801319e:	3904      	subs	r1, #4
 80131a0:	680b      	ldr	r3, [r1, #0]
 80131a2:	4013      	ands	r3, r2
 80131a4:	600b      	str	r3, [r1, #0]
 80131a6:	e7d1      	b.n	801314c <__hexnan+0xec>
 80131a8:	3f04      	subs	r7, #4
 80131aa:	e7cf      	b.n	801314c <__hexnan+0xec>
 80131ac:	2004      	movs	r0, #4
 80131ae:	e7d6      	b.n	801315e <__hexnan+0xfe>

080131b0 <malloc>:
 80131b0:	b510      	push	{r4, lr}
 80131b2:	4b03      	ldr	r3, [pc, #12]	@ (80131c0 <malloc+0x10>)
 80131b4:	0001      	movs	r1, r0
 80131b6:	6818      	ldr	r0, [r3, #0]
 80131b8:	f000 f826 	bl	8013208 <_malloc_r>
 80131bc:	bd10      	pop	{r4, pc}
 80131be:	46c0      	nop			@ (mov r8, r8)
 80131c0:	200001a0 	.word	0x200001a0

080131c4 <sbrk_aligned>:
 80131c4:	b570      	push	{r4, r5, r6, lr}
 80131c6:	4e0f      	ldr	r6, [pc, #60]	@ (8013204 <sbrk_aligned+0x40>)
 80131c8:	000d      	movs	r5, r1
 80131ca:	6831      	ldr	r1, [r6, #0]
 80131cc:	0004      	movs	r4, r0
 80131ce:	2900      	cmp	r1, #0
 80131d0:	d102      	bne.n	80131d8 <sbrk_aligned+0x14>
 80131d2:	f000 ffbd 	bl	8014150 <_sbrk_r>
 80131d6:	6030      	str	r0, [r6, #0]
 80131d8:	0029      	movs	r1, r5
 80131da:	0020      	movs	r0, r4
 80131dc:	f000 ffb8 	bl	8014150 <_sbrk_r>
 80131e0:	1c43      	adds	r3, r0, #1
 80131e2:	d103      	bne.n	80131ec <sbrk_aligned+0x28>
 80131e4:	2501      	movs	r5, #1
 80131e6:	426d      	negs	r5, r5
 80131e8:	0028      	movs	r0, r5
 80131ea:	bd70      	pop	{r4, r5, r6, pc}
 80131ec:	2303      	movs	r3, #3
 80131ee:	1cc5      	adds	r5, r0, #3
 80131f0:	439d      	bics	r5, r3
 80131f2:	42a8      	cmp	r0, r5
 80131f4:	d0f8      	beq.n	80131e8 <sbrk_aligned+0x24>
 80131f6:	1a29      	subs	r1, r5, r0
 80131f8:	0020      	movs	r0, r4
 80131fa:	f000 ffa9 	bl	8014150 <_sbrk_r>
 80131fe:	3001      	adds	r0, #1
 8013200:	d1f2      	bne.n	80131e8 <sbrk_aligned+0x24>
 8013202:	e7ef      	b.n	80131e4 <sbrk_aligned+0x20>
 8013204:	20000610 	.word	0x20000610

08013208 <_malloc_r>:
 8013208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801320a:	2203      	movs	r2, #3
 801320c:	1ccb      	adds	r3, r1, #3
 801320e:	4393      	bics	r3, r2
 8013210:	3308      	adds	r3, #8
 8013212:	0005      	movs	r5, r0
 8013214:	001f      	movs	r7, r3
 8013216:	2b0c      	cmp	r3, #12
 8013218:	d234      	bcs.n	8013284 <_malloc_r+0x7c>
 801321a:	270c      	movs	r7, #12
 801321c:	42b9      	cmp	r1, r7
 801321e:	d833      	bhi.n	8013288 <_malloc_r+0x80>
 8013220:	0028      	movs	r0, r5
 8013222:	f000 f883 	bl	801332c <__malloc_lock>
 8013226:	4e37      	ldr	r6, [pc, #220]	@ (8013304 <_malloc_r+0xfc>)
 8013228:	6833      	ldr	r3, [r6, #0]
 801322a:	001c      	movs	r4, r3
 801322c:	2c00      	cmp	r4, #0
 801322e:	d12f      	bne.n	8013290 <_malloc_r+0x88>
 8013230:	0039      	movs	r1, r7
 8013232:	0028      	movs	r0, r5
 8013234:	f7ff ffc6 	bl	80131c4 <sbrk_aligned>
 8013238:	0004      	movs	r4, r0
 801323a:	1c43      	adds	r3, r0, #1
 801323c:	d15f      	bne.n	80132fe <_malloc_r+0xf6>
 801323e:	6834      	ldr	r4, [r6, #0]
 8013240:	9400      	str	r4, [sp, #0]
 8013242:	9b00      	ldr	r3, [sp, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d14a      	bne.n	80132de <_malloc_r+0xd6>
 8013248:	2c00      	cmp	r4, #0
 801324a:	d052      	beq.n	80132f2 <_malloc_r+0xea>
 801324c:	6823      	ldr	r3, [r4, #0]
 801324e:	0028      	movs	r0, r5
 8013250:	18e3      	adds	r3, r4, r3
 8013252:	9900      	ldr	r1, [sp, #0]
 8013254:	9301      	str	r3, [sp, #4]
 8013256:	f000 ff7b 	bl	8014150 <_sbrk_r>
 801325a:	9b01      	ldr	r3, [sp, #4]
 801325c:	4283      	cmp	r3, r0
 801325e:	d148      	bne.n	80132f2 <_malloc_r+0xea>
 8013260:	6823      	ldr	r3, [r4, #0]
 8013262:	0028      	movs	r0, r5
 8013264:	1aff      	subs	r7, r7, r3
 8013266:	0039      	movs	r1, r7
 8013268:	f7ff ffac 	bl	80131c4 <sbrk_aligned>
 801326c:	3001      	adds	r0, #1
 801326e:	d040      	beq.n	80132f2 <_malloc_r+0xea>
 8013270:	6823      	ldr	r3, [r4, #0]
 8013272:	19db      	adds	r3, r3, r7
 8013274:	6023      	str	r3, [r4, #0]
 8013276:	6833      	ldr	r3, [r6, #0]
 8013278:	685a      	ldr	r2, [r3, #4]
 801327a:	2a00      	cmp	r2, #0
 801327c:	d133      	bne.n	80132e6 <_malloc_r+0xde>
 801327e:	9b00      	ldr	r3, [sp, #0]
 8013280:	6033      	str	r3, [r6, #0]
 8013282:	e019      	b.n	80132b8 <_malloc_r+0xb0>
 8013284:	2b00      	cmp	r3, #0
 8013286:	dac9      	bge.n	801321c <_malloc_r+0x14>
 8013288:	230c      	movs	r3, #12
 801328a:	602b      	str	r3, [r5, #0]
 801328c:	2000      	movs	r0, #0
 801328e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013290:	6821      	ldr	r1, [r4, #0]
 8013292:	1bc9      	subs	r1, r1, r7
 8013294:	d420      	bmi.n	80132d8 <_malloc_r+0xd0>
 8013296:	290b      	cmp	r1, #11
 8013298:	d90a      	bls.n	80132b0 <_malloc_r+0xa8>
 801329a:	19e2      	adds	r2, r4, r7
 801329c:	6027      	str	r7, [r4, #0]
 801329e:	42a3      	cmp	r3, r4
 80132a0:	d104      	bne.n	80132ac <_malloc_r+0xa4>
 80132a2:	6032      	str	r2, [r6, #0]
 80132a4:	6863      	ldr	r3, [r4, #4]
 80132a6:	6011      	str	r1, [r2, #0]
 80132a8:	6053      	str	r3, [r2, #4]
 80132aa:	e005      	b.n	80132b8 <_malloc_r+0xb0>
 80132ac:	605a      	str	r2, [r3, #4]
 80132ae:	e7f9      	b.n	80132a4 <_malloc_r+0x9c>
 80132b0:	6862      	ldr	r2, [r4, #4]
 80132b2:	42a3      	cmp	r3, r4
 80132b4:	d10e      	bne.n	80132d4 <_malloc_r+0xcc>
 80132b6:	6032      	str	r2, [r6, #0]
 80132b8:	0028      	movs	r0, r5
 80132ba:	f000 f83f 	bl	801333c <__malloc_unlock>
 80132be:	0020      	movs	r0, r4
 80132c0:	2207      	movs	r2, #7
 80132c2:	300b      	adds	r0, #11
 80132c4:	1d23      	adds	r3, r4, #4
 80132c6:	4390      	bics	r0, r2
 80132c8:	1ac2      	subs	r2, r0, r3
 80132ca:	4298      	cmp	r0, r3
 80132cc:	d0df      	beq.n	801328e <_malloc_r+0x86>
 80132ce:	1a1b      	subs	r3, r3, r0
 80132d0:	50a3      	str	r3, [r4, r2]
 80132d2:	e7dc      	b.n	801328e <_malloc_r+0x86>
 80132d4:	605a      	str	r2, [r3, #4]
 80132d6:	e7ef      	b.n	80132b8 <_malloc_r+0xb0>
 80132d8:	0023      	movs	r3, r4
 80132da:	6864      	ldr	r4, [r4, #4]
 80132dc:	e7a6      	b.n	801322c <_malloc_r+0x24>
 80132de:	9c00      	ldr	r4, [sp, #0]
 80132e0:	6863      	ldr	r3, [r4, #4]
 80132e2:	9300      	str	r3, [sp, #0]
 80132e4:	e7ad      	b.n	8013242 <_malloc_r+0x3a>
 80132e6:	001a      	movs	r2, r3
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	42a3      	cmp	r3, r4
 80132ec:	d1fb      	bne.n	80132e6 <_malloc_r+0xde>
 80132ee:	2300      	movs	r3, #0
 80132f0:	e7da      	b.n	80132a8 <_malloc_r+0xa0>
 80132f2:	230c      	movs	r3, #12
 80132f4:	0028      	movs	r0, r5
 80132f6:	602b      	str	r3, [r5, #0]
 80132f8:	f000 f820 	bl	801333c <__malloc_unlock>
 80132fc:	e7c6      	b.n	801328c <_malloc_r+0x84>
 80132fe:	6007      	str	r7, [r0, #0]
 8013300:	e7da      	b.n	80132b8 <_malloc_r+0xb0>
 8013302:	46c0      	nop			@ (mov r8, r8)
 8013304:	20000614 	.word	0x20000614

08013308 <__ascii_mbtowc>:
 8013308:	b082      	sub	sp, #8
 801330a:	2900      	cmp	r1, #0
 801330c:	d100      	bne.n	8013310 <__ascii_mbtowc+0x8>
 801330e:	a901      	add	r1, sp, #4
 8013310:	1e10      	subs	r0, r2, #0
 8013312:	d006      	beq.n	8013322 <__ascii_mbtowc+0x1a>
 8013314:	2b00      	cmp	r3, #0
 8013316:	d006      	beq.n	8013326 <__ascii_mbtowc+0x1e>
 8013318:	7813      	ldrb	r3, [r2, #0]
 801331a:	600b      	str	r3, [r1, #0]
 801331c:	7810      	ldrb	r0, [r2, #0]
 801331e:	1e43      	subs	r3, r0, #1
 8013320:	4198      	sbcs	r0, r3
 8013322:	b002      	add	sp, #8
 8013324:	4770      	bx	lr
 8013326:	2002      	movs	r0, #2
 8013328:	4240      	negs	r0, r0
 801332a:	e7fa      	b.n	8013322 <__ascii_mbtowc+0x1a>

0801332c <__malloc_lock>:
 801332c:	b510      	push	{r4, lr}
 801332e:	4802      	ldr	r0, [pc, #8]	@ (8013338 <__malloc_lock+0xc>)
 8013330:	f7fe fce9 	bl	8011d06 <__retarget_lock_acquire_recursive>
 8013334:	bd10      	pop	{r4, pc}
 8013336:	46c0      	nop			@ (mov r8, r8)
 8013338:	2000060c 	.word	0x2000060c

0801333c <__malloc_unlock>:
 801333c:	b510      	push	{r4, lr}
 801333e:	4802      	ldr	r0, [pc, #8]	@ (8013348 <__malloc_unlock+0xc>)
 8013340:	f7fe fce2 	bl	8011d08 <__retarget_lock_release_recursive>
 8013344:	bd10      	pop	{r4, pc}
 8013346:	46c0      	nop			@ (mov r8, r8)
 8013348:	2000060c 	.word	0x2000060c

0801334c <_Balloc>:
 801334c:	b570      	push	{r4, r5, r6, lr}
 801334e:	69c5      	ldr	r5, [r0, #28]
 8013350:	0006      	movs	r6, r0
 8013352:	000c      	movs	r4, r1
 8013354:	2d00      	cmp	r5, #0
 8013356:	d10e      	bne.n	8013376 <_Balloc+0x2a>
 8013358:	2010      	movs	r0, #16
 801335a:	f7ff ff29 	bl	80131b0 <malloc>
 801335e:	1e02      	subs	r2, r0, #0
 8013360:	61f0      	str	r0, [r6, #28]
 8013362:	d104      	bne.n	801336e <_Balloc+0x22>
 8013364:	216b      	movs	r1, #107	@ 0x6b
 8013366:	4b19      	ldr	r3, [pc, #100]	@ (80133cc <_Balloc+0x80>)
 8013368:	4819      	ldr	r0, [pc, #100]	@ (80133d0 <_Balloc+0x84>)
 801336a:	f7fe fce9 	bl	8011d40 <__assert_func>
 801336e:	6045      	str	r5, [r0, #4]
 8013370:	6085      	str	r5, [r0, #8]
 8013372:	6005      	str	r5, [r0, #0]
 8013374:	60c5      	str	r5, [r0, #12]
 8013376:	69f5      	ldr	r5, [r6, #28]
 8013378:	68eb      	ldr	r3, [r5, #12]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d013      	beq.n	80133a6 <_Balloc+0x5a>
 801337e:	69f3      	ldr	r3, [r6, #28]
 8013380:	00a2      	lsls	r2, r4, #2
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	189b      	adds	r3, r3, r2
 8013386:	6818      	ldr	r0, [r3, #0]
 8013388:	2800      	cmp	r0, #0
 801338a:	d118      	bne.n	80133be <_Balloc+0x72>
 801338c:	2101      	movs	r1, #1
 801338e:	000d      	movs	r5, r1
 8013390:	40a5      	lsls	r5, r4
 8013392:	1d6a      	adds	r2, r5, #5
 8013394:	0030      	movs	r0, r6
 8013396:	0092      	lsls	r2, r2, #2
 8013398:	f000 fef3 	bl	8014182 <_calloc_r>
 801339c:	2800      	cmp	r0, #0
 801339e:	d00c      	beq.n	80133ba <_Balloc+0x6e>
 80133a0:	6044      	str	r4, [r0, #4]
 80133a2:	6085      	str	r5, [r0, #8]
 80133a4:	e00d      	b.n	80133c2 <_Balloc+0x76>
 80133a6:	2221      	movs	r2, #33	@ 0x21
 80133a8:	2104      	movs	r1, #4
 80133aa:	0030      	movs	r0, r6
 80133ac:	f000 fee9 	bl	8014182 <_calloc_r>
 80133b0:	69f3      	ldr	r3, [r6, #28]
 80133b2:	60e8      	str	r0, [r5, #12]
 80133b4:	68db      	ldr	r3, [r3, #12]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d1e1      	bne.n	801337e <_Balloc+0x32>
 80133ba:	2000      	movs	r0, #0
 80133bc:	bd70      	pop	{r4, r5, r6, pc}
 80133be:	6802      	ldr	r2, [r0, #0]
 80133c0:	601a      	str	r2, [r3, #0]
 80133c2:	2300      	movs	r3, #0
 80133c4:	6103      	str	r3, [r0, #16]
 80133c6:	60c3      	str	r3, [r0, #12]
 80133c8:	e7f8      	b.n	80133bc <_Balloc+0x70>
 80133ca:	46c0      	nop			@ (mov r8, r8)
 80133cc:	08017c16 	.word	0x08017c16
 80133d0:	08017da1 	.word	0x08017da1

080133d4 <_Bfree>:
 80133d4:	b570      	push	{r4, r5, r6, lr}
 80133d6:	69c6      	ldr	r6, [r0, #28]
 80133d8:	0005      	movs	r5, r0
 80133da:	000c      	movs	r4, r1
 80133dc:	2e00      	cmp	r6, #0
 80133de:	d10e      	bne.n	80133fe <_Bfree+0x2a>
 80133e0:	2010      	movs	r0, #16
 80133e2:	f7ff fee5 	bl	80131b0 <malloc>
 80133e6:	1e02      	subs	r2, r0, #0
 80133e8:	61e8      	str	r0, [r5, #28]
 80133ea:	d104      	bne.n	80133f6 <_Bfree+0x22>
 80133ec:	218f      	movs	r1, #143	@ 0x8f
 80133ee:	4b09      	ldr	r3, [pc, #36]	@ (8013414 <_Bfree+0x40>)
 80133f0:	4809      	ldr	r0, [pc, #36]	@ (8013418 <_Bfree+0x44>)
 80133f2:	f7fe fca5 	bl	8011d40 <__assert_func>
 80133f6:	6046      	str	r6, [r0, #4]
 80133f8:	6086      	str	r6, [r0, #8]
 80133fa:	6006      	str	r6, [r0, #0]
 80133fc:	60c6      	str	r6, [r0, #12]
 80133fe:	2c00      	cmp	r4, #0
 8013400:	d007      	beq.n	8013412 <_Bfree+0x3e>
 8013402:	69eb      	ldr	r3, [r5, #28]
 8013404:	6862      	ldr	r2, [r4, #4]
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	0092      	lsls	r2, r2, #2
 801340a:	189b      	adds	r3, r3, r2
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	6022      	str	r2, [r4, #0]
 8013410:	601c      	str	r4, [r3, #0]
 8013412:	bd70      	pop	{r4, r5, r6, pc}
 8013414:	08017c16 	.word	0x08017c16
 8013418:	08017da1 	.word	0x08017da1

0801341c <__multadd>:
 801341c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801341e:	000f      	movs	r7, r1
 8013420:	9001      	str	r0, [sp, #4]
 8013422:	000c      	movs	r4, r1
 8013424:	001e      	movs	r6, r3
 8013426:	2000      	movs	r0, #0
 8013428:	690d      	ldr	r5, [r1, #16]
 801342a:	3714      	adds	r7, #20
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	3001      	adds	r0, #1
 8013430:	b299      	uxth	r1, r3
 8013432:	4351      	muls	r1, r2
 8013434:	0c1b      	lsrs	r3, r3, #16
 8013436:	4353      	muls	r3, r2
 8013438:	1989      	adds	r1, r1, r6
 801343a:	0c0e      	lsrs	r6, r1, #16
 801343c:	199b      	adds	r3, r3, r6
 801343e:	0c1e      	lsrs	r6, r3, #16
 8013440:	b289      	uxth	r1, r1
 8013442:	041b      	lsls	r3, r3, #16
 8013444:	185b      	adds	r3, r3, r1
 8013446:	c708      	stmia	r7!, {r3}
 8013448:	4285      	cmp	r5, r0
 801344a:	dcef      	bgt.n	801342c <__multadd+0x10>
 801344c:	2e00      	cmp	r6, #0
 801344e:	d022      	beq.n	8013496 <__multadd+0x7a>
 8013450:	68a3      	ldr	r3, [r4, #8]
 8013452:	42ab      	cmp	r3, r5
 8013454:	dc19      	bgt.n	801348a <__multadd+0x6e>
 8013456:	6861      	ldr	r1, [r4, #4]
 8013458:	9801      	ldr	r0, [sp, #4]
 801345a:	3101      	adds	r1, #1
 801345c:	f7ff ff76 	bl	801334c <_Balloc>
 8013460:	1e07      	subs	r7, r0, #0
 8013462:	d105      	bne.n	8013470 <__multadd+0x54>
 8013464:	003a      	movs	r2, r7
 8013466:	21ba      	movs	r1, #186	@ 0xba
 8013468:	4b0c      	ldr	r3, [pc, #48]	@ (801349c <__multadd+0x80>)
 801346a:	480d      	ldr	r0, [pc, #52]	@ (80134a0 <__multadd+0x84>)
 801346c:	f7fe fc68 	bl	8011d40 <__assert_func>
 8013470:	0021      	movs	r1, r4
 8013472:	6922      	ldr	r2, [r4, #16]
 8013474:	310c      	adds	r1, #12
 8013476:	3202      	adds	r2, #2
 8013478:	0092      	lsls	r2, r2, #2
 801347a:	300c      	adds	r0, #12
 801347c:	f7fe fc50 	bl	8011d20 <memcpy>
 8013480:	0021      	movs	r1, r4
 8013482:	9801      	ldr	r0, [sp, #4]
 8013484:	f7ff ffa6 	bl	80133d4 <_Bfree>
 8013488:	003c      	movs	r4, r7
 801348a:	1d2b      	adds	r3, r5, #4
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	18e3      	adds	r3, r4, r3
 8013490:	3501      	adds	r5, #1
 8013492:	605e      	str	r6, [r3, #4]
 8013494:	6125      	str	r5, [r4, #16]
 8013496:	0020      	movs	r0, r4
 8013498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801349a:	46c0      	nop			@ (mov r8, r8)
 801349c:	08017d30 	.word	0x08017d30
 80134a0:	08017da1 	.word	0x08017da1

080134a4 <__s2b>:
 80134a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134a6:	0007      	movs	r7, r0
 80134a8:	0018      	movs	r0, r3
 80134aa:	000c      	movs	r4, r1
 80134ac:	3008      	adds	r0, #8
 80134ae:	2109      	movs	r1, #9
 80134b0:	9301      	str	r3, [sp, #4]
 80134b2:	0015      	movs	r5, r2
 80134b4:	f7ec fed6 	bl	8000264 <__divsi3>
 80134b8:	2301      	movs	r3, #1
 80134ba:	2100      	movs	r1, #0
 80134bc:	4283      	cmp	r3, r0
 80134be:	db0a      	blt.n	80134d6 <__s2b+0x32>
 80134c0:	0038      	movs	r0, r7
 80134c2:	f7ff ff43 	bl	801334c <_Balloc>
 80134c6:	1e01      	subs	r1, r0, #0
 80134c8:	d108      	bne.n	80134dc <__s2b+0x38>
 80134ca:	000a      	movs	r2, r1
 80134cc:	4b19      	ldr	r3, [pc, #100]	@ (8013534 <__s2b+0x90>)
 80134ce:	481a      	ldr	r0, [pc, #104]	@ (8013538 <__s2b+0x94>)
 80134d0:	31d3      	adds	r1, #211	@ 0xd3
 80134d2:	f7fe fc35 	bl	8011d40 <__assert_func>
 80134d6:	005b      	lsls	r3, r3, #1
 80134d8:	3101      	adds	r1, #1
 80134da:	e7ef      	b.n	80134bc <__s2b+0x18>
 80134dc:	9b08      	ldr	r3, [sp, #32]
 80134de:	6143      	str	r3, [r0, #20]
 80134e0:	2301      	movs	r3, #1
 80134e2:	6103      	str	r3, [r0, #16]
 80134e4:	2d09      	cmp	r5, #9
 80134e6:	dd18      	ble.n	801351a <__s2b+0x76>
 80134e8:	0023      	movs	r3, r4
 80134ea:	3309      	adds	r3, #9
 80134ec:	001e      	movs	r6, r3
 80134ee:	9300      	str	r3, [sp, #0]
 80134f0:	1964      	adds	r4, r4, r5
 80134f2:	7833      	ldrb	r3, [r6, #0]
 80134f4:	220a      	movs	r2, #10
 80134f6:	0038      	movs	r0, r7
 80134f8:	3b30      	subs	r3, #48	@ 0x30
 80134fa:	f7ff ff8f 	bl	801341c <__multadd>
 80134fe:	3601      	adds	r6, #1
 8013500:	0001      	movs	r1, r0
 8013502:	42a6      	cmp	r6, r4
 8013504:	d1f5      	bne.n	80134f2 <__s2b+0x4e>
 8013506:	002c      	movs	r4, r5
 8013508:	9b00      	ldr	r3, [sp, #0]
 801350a:	3c08      	subs	r4, #8
 801350c:	191c      	adds	r4, r3, r4
 801350e:	002e      	movs	r6, r5
 8013510:	9b01      	ldr	r3, [sp, #4]
 8013512:	429e      	cmp	r6, r3
 8013514:	db04      	blt.n	8013520 <__s2b+0x7c>
 8013516:	0008      	movs	r0, r1
 8013518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801351a:	2509      	movs	r5, #9
 801351c:	340a      	adds	r4, #10
 801351e:	e7f6      	b.n	801350e <__s2b+0x6a>
 8013520:	1b63      	subs	r3, r4, r5
 8013522:	5d9b      	ldrb	r3, [r3, r6]
 8013524:	220a      	movs	r2, #10
 8013526:	0038      	movs	r0, r7
 8013528:	3b30      	subs	r3, #48	@ 0x30
 801352a:	f7ff ff77 	bl	801341c <__multadd>
 801352e:	3601      	adds	r6, #1
 8013530:	0001      	movs	r1, r0
 8013532:	e7ed      	b.n	8013510 <__s2b+0x6c>
 8013534:	08017d30 	.word	0x08017d30
 8013538:	08017da1 	.word	0x08017da1

0801353c <__hi0bits>:
 801353c:	2280      	movs	r2, #128	@ 0x80
 801353e:	0003      	movs	r3, r0
 8013540:	0252      	lsls	r2, r2, #9
 8013542:	2000      	movs	r0, #0
 8013544:	4293      	cmp	r3, r2
 8013546:	d201      	bcs.n	801354c <__hi0bits+0x10>
 8013548:	041b      	lsls	r3, r3, #16
 801354a:	3010      	adds	r0, #16
 801354c:	2280      	movs	r2, #128	@ 0x80
 801354e:	0452      	lsls	r2, r2, #17
 8013550:	4293      	cmp	r3, r2
 8013552:	d201      	bcs.n	8013558 <__hi0bits+0x1c>
 8013554:	3008      	adds	r0, #8
 8013556:	021b      	lsls	r3, r3, #8
 8013558:	2280      	movs	r2, #128	@ 0x80
 801355a:	0552      	lsls	r2, r2, #21
 801355c:	4293      	cmp	r3, r2
 801355e:	d201      	bcs.n	8013564 <__hi0bits+0x28>
 8013560:	3004      	adds	r0, #4
 8013562:	011b      	lsls	r3, r3, #4
 8013564:	2280      	movs	r2, #128	@ 0x80
 8013566:	05d2      	lsls	r2, r2, #23
 8013568:	4293      	cmp	r3, r2
 801356a:	d201      	bcs.n	8013570 <__hi0bits+0x34>
 801356c:	3002      	adds	r0, #2
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	2b00      	cmp	r3, #0
 8013572:	db03      	blt.n	801357c <__hi0bits+0x40>
 8013574:	3001      	adds	r0, #1
 8013576:	4213      	tst	r3, r2
 8013578:	d100      	bne.n	801357c <__hi0bits+0x40>
 801357a:	2020      	movs	r0, #32
 801357c:	4770      	bx	lr

0801357e <__lo0bits>:
 801357e:	6803      	ldr	r3, [r0, #0]
 8013580:	0001      	movs	r1, r0
 8013582:	2207      	movs	r2, #7
 8013584:	0018      	movs	r0, r3
 8013586:	4010      	ands	r0, r2
 8013588:	4213      	tst	r3, r2
 801358a:	d00d      	beq.n	80135a8 <__lo0bits+0x2a>
 801358c:	3a06      	subs	r2, #6
 801358e:	2000      	movs	r0, #0
 8013590:	4213      	tst	r3, r2
 8013592:	d105      	bne.n	80135a0 <__lo0bits+0x22>
 8013594:	3002      	adds	r0, #2
 8013596:	4203      	tst	r3, r0
 8013598:	d003      	beq.n	80135a2 <__lo0bits+0x24>
 801359a:	40d3      	lsrs	r3, r2
 801359c:	0010      	movs	r0, r2
 801359e:	600b      	str	r3, [r1, #0]
 80135a0:	4770      	bx	lr
 80135a2:	089b      	lsrs	r3, r3, #2
 80135a4:	600b      	str	r3, [r1, #0]
 80135a6:	e7fb      	b.n	80135a0 <__lo0bits+0x22>
 80135a8:	b29a      	uxth	r2, r3
 80135aa:	2a00      	cmp	r2, #0
 80135ac:	d101      	bne.n	80135b2 <__lo0bits+0x34>
 80135ae:	2010      	movs	r0, #16
 80135b0:	0c1b      	lsrs	r3, r3, #16
 80135b2:	b2da      	uxtb	r2, r3
 80135b4:	2a00      	cmp	r2, #0
 80135b6:	d101      	bne.n	80135bc <__lo0bits+0x3e>
 80135b8:	3008      	adds	r0, #8
 80135ba:	0a1b      	lsrs	r3, r3, #8
 80135bc:	071a      	lsls	r2, r3, #28
 80135be:	d101      	bne.n	80135c4 <__lo0bits+0x46>
 80135c0:	3004      	adds	r0, #4
 80135c2:	091b      	lsrs	r3, r3, #4
 80135c4:	079a      	lsls	r2, r3, #30
 80135c6:	d101      	bne.n	80135cc <__lo0bits+0x4e>
 80135c8:	3002      	adds	r0, #2
 80135ca:	089b      	lsrs	r3, r3, #2
 80135cc:	07da      	lsls	r2, r3, #31
 80135ce:	d4e9      	bmi.n	80135a4 <__lo0bits+0x26>
 80135d0:	3001      	adds	r0, #1
 80135d2:	085b      	lsrs	r3, r3, #1
 80135d4:	d1e6      	bne.n	80135a4 <__lo0bits+0x26>
 80135d6:	2020      	movs	r0, #32
 80135d8:	e7e2      	b.n	80135a0 <__lo0bits+0x22>
	...

080135dc <__i2b>:
 80135dc:	b510      	push	{r4, lr}
 80135de:	000c      	movs	r4, r1
 80135e0:	2101      	movs	r1, #1
 80135e2:	f7ff feb3 	bl	801334c <_Balloc>
 80135e6:	2800      	cmp	r0, #0
 80135e8:	d107      	bne.n	80135fa <__i2b+0x1e>
 80135ea:	2146      	movs	r1, #70	@ 0x46
 80135ec:	4c05      	ldr	r4, [pc, #20]	@ (8013604 <__i2b+0x28>)
 80135ee:	0002      	movs	r2, r0
 80135f0:	4b05      	ldr	r3, [pc, #20]	@ (8013608 <__i2b+0x2c>)
 80135f2:	0020      	movs	r0, r4
 80135f4:	31ff      	adds	r1, #255	@ 0xff
 80135f6:	f7fe fba3 	bl	8011d40 <__assert_func>
 80135fa:	2301      	movs	r3, #1
 80135fc:	6144      	str	r4, [r0, #20]
 80135fe:	6103      	str	r3, [r0, #16]
 8013600:	bd10      	pop	{r4, pc}
 8013602:	46c0      	nop			@ (mov r8, r8)
 8013604:	08017da1 	.word	0x08017da1
 8013608:	08017d30 	.word	0x08017d30

0801360c <__multiply>:
 801360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801360e:	0014      	movs	r4, r2
 8013610:	690a      	ldr	r2, [r1, #16]
 8013612:	6923      	ldr	r3, [r4, #16]
 8013614:	000d      	movs	r5, r1
 8013616:	b089      	sub	sp, #36	@ 0x24
 8013618:	429a      	cmp	r2, r3
 801361a:	db02      	blt.n	8013622 <__multiply+0x16>
 801361c:	0023      	movs	r3, r4
 801361e:	000c      	movs	r4, r1
 8013620:	001d      	movs	r5, r3
 8013622:	6927      	ldr	r7, [r4, #16]
 8013624:	692e      	ldr	r6, [r5, #16]
 8013626:	6861      	ldr	r1, [r4, #4]
 8013628:	19bb      	adds	r3, r7, r6
 801362a:	9300      	str	r3, [sp, #0]
 801362c:	68a3      	ldr	r3, [r4, #8]
 801362e:	19ba      	adds	r2, r7, r6
 8013630:	4293      	cmp	r3, r2
 8013632:	da00      	bge.n	8013636 <__multiply+0x2a>
 8013634:	3101      	adds	r1, #1
 8013636:	f7ff fe89 	bl	801334c <_Balloc>
 801363a:	4684      	mov	ip, r0
 801363c:	2800      	cmp	r0, #0
 801363e:	d106      	bne.n	801364e <__multiply+0x42>
 8013640:	21b1      	movs	r1, #177	@ 0xb1
 8013642:	4662      	mov	r2, ip
 8013644:	4b44      	ldr	r3, [pc, #272]	@ (8013758 <__multiply+0x14c>)
 8013646:	4845      	ldr	r0, [pc, #276]	@ (801375c <__multiply+0x150>)
 8013648:	0049      	lsls	r1, r1, #1
 801364a:	f7fe fb79 	bl	8011d40 <__assert_func>
 801364e:	0002      	movs	r2, r0
 8013650:	19bb      	adds	r3, r7, r6
 8013652:	3214      	adds	r2, #20
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	18d3      	adds	r3, r2, r3
 8013658:	9301      	str	r3, [sp, #4]
 801365a:	2100      	movs	r1, #0
 801365c:	0013      	movs	r3, r2
 801365e:	9801      	ldr	r0, [sp, #4]
 8013660:	4283      	cmp	r3, r0
 8013662:	d328      	bcc.n	80136b6 <__multiply+0xaa>
 8013664:	0023      	movs	r3, r4
 8013666:	00bf      	lsls	r7, r7, #2
 8013668:	3314      	adds	r3, #20
 801366a:	9304      	str	r3, [sp, #16]
 801366c:	3514      	adds	r5, #20
 801366e:	19db      	adds	r3, r3, r7
 8013670:	00b6      	lsls	r6, r6, #2
 8013672:	9302      	str	r3, [sp, #8]
 8013674:	19ab      	adds	r3, r5, r6
 8013676:	9307      	str	r3, [sp, #28]
 8013678:	2304      	movs	r3, #4
 801367a:	9305      	str	r3, [sp, #20]
 801367c:	0023      	movs	r3, r4
 801367e:	9902      	ldr	r1, [sp, #8]
 8013680:	3315      	adds	r3, #21
 8013682:	4299      	cmp	r1, r3
 8013684:	d305      	bcc.n	8013692 <__multiply+0x86>
 8013686:	1b0c      	subs	r4, r1, r4
 8013688:	3c15      	subs	r4, #21
 801368a:	08a4      	lsrs	r4, r4, #2
 801368c:	3401      	adds	r4, #1
 801368e:	00a3      	lsls	r3, r4, #2
 8013690:	9305      	str	r3, [sp, #20]
 8013692:	9b07      	ldr	r3, [sp, #28]
 8013694:	429d      	cmp	r5, r3
 8013696:	d310      	bcc.n	80136ba <__multiply+0xae>
 8013698:	9b00      	ldr	r3, [sp, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	dd05      	ble.n	80136aa <__multiply+0x9e>
 801369e:	9b01      	ldr	r3, [sp, #4]
 80136a0:	3b04      	subs	r3, #4
 80136a2:	9301      	str	r3, [sp, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d052      	beq.n	8013750 <__multiply+0x144>
 80136aa:	4663      	mov	r3, ip
 80136ac:	4660      	mov	r0, ip
 80136ae:	9a00      	ldr	r2, [sp, #0]
 80136b0:	611a      	str	r2, [r3, #16]
 80136b2:	b009      	add	sp, #36	@ 0x24
 80136b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136b6:	c302      	stmia	r3!, {r1}
 80136b8:	e7d1      	b.n	801365e <__multiply+0x52>
 80136ba:	682c      	ldr	r4, [r5, #0]
 80136bc:	b2a4      	uxth	r4, r4
 80136be:	2c00      	cmp	r4, #0
 80136c0:	d01f      	beq.n	8013702 <__multiply+0xf6>
 80136c2:	2300      	movs	r3, #0
 80136c4:	0017      	movs	r7, r2
 80136c6:	9e04      	ldr	r6, [sp, #16]
 80136c8:	9303      	str	r3, [sp, #12]
 80136ca:	ce08      	ldmia	r6!, {r3}
 80136cc:	6839      	ldr	r1, [r7, #0]
 80136ce:	9306      	str	r3, [sp, #24]
 80136d0:	466b      	mov	r3, sp
 80136d2:	8b1b      	ldrh	r3, [r3, #24]
 80136d4:	b288      	uxth	r0, r1
 80136d6:	4363      	muls	r3, r4
 80136d8:	181b      	adds	r3, r3, r0
 80136da:	9803      	ldr	r0, [sp, #12]
 80136dc:	0c09      	lsrs	r1, r1, #16
 80136de:	181b      	adds	r3, r3, r0
 80136e0:	9806      	ldr	r0, [sp, #24]
 80136e2:	0c00      	lsrs	r0, r0, #16
 80136e4:	4360      	muls	r0, r4
 80136e6:	1840      	adds	r0, r0, r1
 80136e8:	0c19      	lsrs	r1, r3, #16
 80136ea:	1841      	adds	r1, r0, r1
 80136ec:	0c08      	lsrs	r0, r1, #16
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	0409      	lsls	r1, r1, #16
 80136f2:	4319      	orrs	r1, r3
 80136f4:	9b02      	ldr	r3, [sp, #8]
 80136f6:	9003      	str	r0, [sp, #12]
 80136f8:	c702      	stmia	r7!, {r1}
 80136fa:	42b3      	cmp	r3, r6
 80136fc:	d8e5      	bhi.n	80136ca <__multiply+0xbe>
 80136fe:	9b05      	ldr	r3, [sp, #20]
 8013700:	50d0      	str	r0, [r2, r3]
 8013702:	682c      	ldr	r4, [r5, #0]
 8013704:	0c24      	lsrs	r4, r4, #16
 8013706:	d020      	beq.n	801374a <__multiply+0x13e>
 8013708:	2100      	movs	r1, #0
 801370a:	0010      	movs	r0, r2
 801370c:	6813      	ldr	r3, [r2, #0]
 801370e:	9e04      	ldr	r6, [sp, #16]
 8013710:	9103      	str	r1, [sp, #12]
 8013712:	6831      	ldr	r1, [r6, #0]
 8013714:	6807      	ldr	r7, [r0, #0]
 8013716:	b289      	uxth	r1, r1
 8013718:	4361      	muls	r1, r4
 801371a:	0c3f      	lsrs	r7, r7, #16
 801371c:	19c9      	adds	r1, r1, r7
 801371e:	9f03      	ldr	r7, [sp, #12]
 8013720:	b29b      	uxth	r3, r3
 8013722:	19c9      	adds	r1, r1, r7
 8013724:	040f      	lsls	r7, r1, #16
 8013726:	431f      	orrs	r7, r3
 8013728:	6007      	str	r7, [r0, #0]
 801372a:	ce80      	ldmia	r6!, {r7}
 801372c:	6843      	ldr	r3, [r0, #4]
 801372e:	0c3f      	lsrs	r7, r7, #16
 8013730:	4367      	muls	r7, r4
 8013732:	b29b      	uxth	r3, r3
 8013734:	0c09      	lsrs	r1, r1, #16
 8013736:	18fb      	adds	r3, r7, r3
 8013738:	185b      	adds	r3, r3, r1
 801373a:	0c19      	lsrs	r1, r3, #16
 801373c:	9103      	str	r1, [sp, #12]
 801373e:	9902      	ldr	r1, [sp, #8]
 8013740:	3004      	adds	r0, #4
 8013742:	42b1      	cmp	r1, r6
 8013744:	d8e5      	bhi.n	8013712 <__multiply+0x106>
 8013746:	9905      	ldr	r1, [sp, #20]
 8013748:	5053      	str	r3, [r2, r1]
 801374a:	3504      	adds	r5, #4
 801374c:	3204      	adds	r2, #4
 801374e:	e7a0      	b.n	8013692 <__multiply+0x86>
 8013750:	9b00      	ldr	r3, [sp, #0]
 8013752:	3b01      	subs	r3, #1
 8013754:	9300      	str	r3, [sp, #0]
 8013756:	e79f      	b.n	8013698 <__multiply+0x8c>
 8013758:	08017d30 	.word	0x08017d30
 801375c:	08017da1 	.word	0x08017da1

08013760 <__pow5mult>:
 8013760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013762:	2303      	movs	r3, #3
 8013764:	0015      	movs	r5, r2
 8013766:	0007      	movs	r7, r0
 8013768:	000e      	movs	r6, r1
 801376a:	401a      	ands	r2, r3
 801376c:	421d      	tst	r5, r3
 801376e:	d008      	beq.n	8013782 <__pow5mult+0x22>
 8013770:	4925      	ldr	r1, [pc, #148]	@ (8013808 <__pow5mult+0xa8>)
 8013772:	3a01      	subs	r2, #1
 8013774:	0092      	lsls	r2, r2, #2
 8013776:	5852      	ldr	r2, [r2, r1]
 8013778:	2300      	movs	r3, #0
 801377a:	0031      	movs	r1, r6
 801377c:	f7ff fe4e 	bl	801341c <__multadd>
 8013780:	0006      	movs	r6, r0
 8013782:	10ad      	asrs	r5, r5, #2
 8013784:	d03d      	beq.n	8013802 <__pow5mult+0xa2>
 8013786:	69fc      	ldr	r4, [r7, #28]
 8013788:	2c00      	cmp	r4, #0
 801378a:	d10f      	bne.n	80137ac <__pow5mult+0x4c>
 801378c:	2010      	movs	r0, #16
 801378e:	f7ff fd0f 	bl	80131b0 <malloc>
 8013792:	1e02      	subs	r2, r0, #0
 8013794:	61f8      	str	r0, [r7, #28]
 8013796:	d105      	bne.n	80137a4 <__pow5mult+0x44>
 8013798:	21b4      	movs	r1, #180	@ 0xb4
 801379a:	4b1c      	ldr	r3, [pc, #112]	@ (801380c <__pow5mult+0xac>)
 801379c:	481c      	ldr	r0, [pc, #112]	@ (8013810 <__pow5mult+0xb0>)
 801379e:	31ff      	adds	r1, #255	@ 0xff
 80137a0:	f7fe face 	bl	8011d40 <__assert_func>
 80137a4:	6044      	str	r4, [r0, #4]
 80137a6:	6084      	str	r4, [r0, #8]
 80137a8:	6004      	str	r4, [r0, #0]
 80137aa:	60c4      	str	r4, [r0, #12]
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	689c      	ldr	r4, [r3, #8]
 80137b0:	9301      	str	r3, [sp, #4]
 80137b2:	2c00      	cmp	r4, #0
 80137b4:	d108      	bne.n	80137c8 <__pow5mult+0x68>
 80137b6:	0038      	movs	r0, r7
 80137b8:	4916      	ldr	r1, [pc, #88]	@ (8013814 <__pow5mult+0xb4>)
 80137ba:	f7ff ff0f 	bl	80135dc <__i2b>
 80137be:	9b01      	ldr	r3, [sp, #4]
 80137c0:	0004      	movs	r4, r0
 80137c2:	6098      	str	r0, [r3, #8]
 80137c4:	2300      	movs	r3, #0
 80137c6:	6003      	str	r3, [r0, #0]
 80137c8:	2301      	movs	r3, #1
 80137ca:	421d      	tst	r5, r3
 80137cc:	d00a      	beq.n	80137e4 <__pow5mult+0x84>
 80137ce:	0031      	movs	r1, r6
 80137d0:	0022      	movs	r2, r4
 80137d2:	0038      	movs	r0, r7
 80137d4:	f7ff ff1a 	bl	801360c <__multiply>
 80137d8:	0031      	movs	r1, r6
 80137da:	9001      	str	r0, [sp, #4]
 80137dc:	0038      	movs	r0, r7
 80137de:	f7ff fdf9 	bl	80133d4 <_Bfree>
 80137e2:	9e01      	ldr	r6, [sp, #4]
 80137e4:	106d      	asrs	r5, r5, #1
 80137e6:	d00c      	beq.n	8013802 <__pow5mult+0xa2>
 80137e8:	6820      	ldr	r0, [r4, #0]
 80137ea:	2800      	cmp	r0, #0
 80137ec:	d107      	bne.n	80137fe <__pow5mult+0x9e>
 80137ee:	0022      	movs	r2, r4
 80137f0:	0021      	movs	r1, r4
 80137f2:	0038      	movs	r0, r7
 80137f4:	f7ff ff0a 	bl	801360c <__multiply>
 80137f8:	2300      	movs	r3, #0
 80137fa:	6020      	str	r0, [r4, #0]
 80137fc:	6003      	str	r3, [r0, #0]
 80137fe:	0004      	movs	r4, r0
 8013800:	e7e2      	b.n	80137c8 <__pow5mult+0x68>
 8013802:	0030      	movs	r0, r6
 8013804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013806:	46c0      	nop			@ (mov r8, r8)
 8013808:	08017e60 	.word	0x08017e60
 801380c:	08017c16 	.word	0x08017c16
 8013810:	08017da1 	.word	0x08017da1
 8013814:	00000271 	.word	0x00000271

08013818 <__lshift>:
 8013818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801381a:	000c      	movs	r4, r1
 801381c:	0016      	movs	r6, r2
 801381e:	6923      	ldr	r3, [r4, #16]
 8013820:	1157      	asrs	r7, r2, #5
 8013822:	b085      	sub	sp, #20
 8013824:	18fb      	adds	r3, r7, r3
 8013826:	9301      	str	r3, [sp, #4]
 8013828:	3301      	adds	r3, #1
 801382a:	9300      	str	r3, [sp, #0]
 801382c:	6849      	ldr	r1, [r1, #4]
 801382e:	68a3      	ldr	r3, [r4, #8]
 8013830:	9002      	str	r0, [sp, #8]
 8013832:	9a00      	ldr	r2, [sp, #0]
 8013834:	4293      	cmp	r3, r2
 8013836:	db10      	blt.n	801385a <__lshift+0x42>
 8013838:	9802      	ldr	r0, [sp, #8]
 801383a:	f7ff fd87 	bl	801334c <_Balloc>
 801383e:	2300      	movs	r3, #0
 8013840:	0001      	movs	r1, r0
 8013842:	0005      	movs	r5, r0
 8013844:	001a      	movs	r2, r3
 8013846:	3114      	adds	r1, #20
 8013848:	4298      	cmp	r0, r3
 801384a:	d10c      	bne.n	8013866 <__lshift+0x4e>
 801384c:	21ef      	movs	r1, #239	@ 0xef
 801384e:	002a      	movs	r2, r5
 8013850:	4b25      	ldr	r3, [pc, #148]	@ (80138e8 <__lshift+0xd0>)
 8013852:	4826      	ldr	r0, [pc, #152]	@ (80138ec <__lshift+0xd4>)
 8013854:	0049      	lsls	r1, r1, #1
 8013856:	f7fe fa73 	bl	8011d40 <__assert_func>
 801385a:	3101      	adds	r1, #1
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	e7e8      	b.n	8013832 <__lshift+0x1a>
 8013860:	0098      	lsls	r0, r3, #2
 8013862:	500a      	str	r2, [r1, r0]
 8013864:	3301      	adds	r3, #1
 8013866:	42bb      	cmp	r3, r7
 8013868:	dbfa      	blt.n	8013860 <__lshift+0x48>
 801386a:	43fb      	mvns	r3, r7
 801386c:	17db      	asrs	r3, r3, #31
 801386e:	401f      	ands	r7, r3
 8013870:	00bf      	lsls	r7, r7, #2
 8013872:	0023      	movs	r3, r4
 8013874:	201f      	movs	r0, #31
 8013876:	19c9      	adds	r1, r1, r7
 8013878:	0037      	movs	r7, r6
 801387a:	6922      	ldr	r2, [r4, #16]
 801387c:	3314      	adds	r3, #20
 801387e:	0092      	lsls	r2, r2, #2
 8013880:	189a      	adds	r2, r3, r2
 8013882:	4007      	ands	r7, r0
 8013884:	4206      	tst	r6, r0
 8013886:	d029      	beq.n	80138dc <__lshift+0xc4>
 8013888:	3001      	adds	r0, #1
 801388a:	1bc0      	subs	r0, r0, r7
 801388c:	9003      	str	r0, [sp, #12]
 801388e:	468c      	mov	ip, r1
 8013890:	2000      	movs	r0, #0
 8013892:	681e      	ldr	r6, [r3, #0]
 8013894:	40be      	lsls	r6, r7
 8013896:	4306      	orrs	r6, r0
 8013898:	4660      	mov	r0, ip
 801389a:	c040      	stmia	r0!, {r6}
 801389c:	4684      	mov	ip, r0
 801389e:	9e03      	ldr	r6, [sp, #12]
 80138a0:	cb01      	ldmia	r3!, {r0}
 80138a2:	40f0      	lsrs	r0, r6
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d8f4      	bhi.n	8013892 <__lshift+0x7a>
 80138a8:	0026      	movs	r6, r4
 80138aa:	3615      	adds	r6, #21
 80138ac:	2304      	movs	r3, #4
 80138ae:	42b2      	cmp	r2, r6
 80138b0:	d304      	bcc.n	80138bc <__lshift+0xa4>
 80138b2:	1b13      	subs	r3, r2, r4
 80138b4:	3b15      	subs	r3, #21
 80138b6:	089b      	lsrs	r3, r3, #2
 80138b8:	3301      	adds	r3, #1
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	50c8      	str	r0, [r1, r3]
 80138be:	2800      	cmp	r0, #0
 80138c0:	d002      	beq.n	80138c8 <__lshift+0xb0>
 80138c2:	9b01      	ldr	r3, [sp, #4]
 80138c4:	3302      	adds	r3, #2
 80138c6:	9300      	str	r3, [sp, #0]
 80138c8:	9b00      	ldr	r3, [sp, #0]
 80138ca:	9802      	ldr	r0, [sp, #8]
 80138cc:	3b01      	subs	r3, #1
 80138ce:	0021      	movs	r1, r4
 80138d0:	612b      	str	r3, [r5, #16]
 80138d2:	f7ff fd7f 	bl	80133d4 <_Bfree>
 80138d6:	0028      	movs	r0, r5
 80138d8:	b005      	add	sp, #20
 80138da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138dc:	cb01      	ldmia	r3!, {r0}
 80138de:	c101      	stmia	r1!, {r0}
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d8fb      	bhi.n	80138dc <__lshift+0xc4>
 80138e4:	e7f0      	b.n	80138c8 <__lshift+0xb0>
 80138e6:	46c0      	nop			@ (mov r8, r8)
 80138e8:	08017d30 	.word	0x08017d30
 80138ec:	08017da1 	.word	0x08017da1

080138f0 <__mcmp>:
 80138f0:	b530      	push	{r4, r5, lr}
 80138f2:	690b      	ldr	r3, [r1, #16]
 80138f4:	6904      	ldr	r4, [r0, #16]
 80138f6:	0002      	movs	r2, r0
 80138f8:	1ae0      	subs	r0, r4, r3
 80138fa:	429c      	cmp	r4, r3
 80138fc:	d10f      	bne.n	801391e <__mcmp+0x2e>
 80138fe:	3214      	adds	r2, #20
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	3114      	adds	r1, #20
 8013904:	0014      	movs	r4, r2
 8013906:	18c9      	adds	r1, r1, r3
 8013908:	18d2      	adds	r2, r2, r3
 801390a:	3a04      	subs	r2, #4
 801390c:	3904      	subs	r1, #4
 801390e:	6815      	ldr	r5, [r2, #0]
 8013910:	680b      	ldr	r3, [r1, #0]
 8013912:	429d      	cmp	r5, r3
 8013914:	d004      	beq.n	8013920 <__mcmp+0x30>
 8013916:	2001      	movs	r0, #1
 8013918:	429d      	cmp	r5, r3
 801391a:	d200      	bcs.n	801391e <__mcmp+0x2e>
 801391c:	3802      	subs	r0, #2
 801391e:	bd30      	pop	{r4, r5, pc}
 8013920:	4294      	cmp	r4, r2
 8013922:	d3f2      	bcc.n	801390a <__mcmp+0x1a>
 8013924:	e7fb      	b.n	801391e <__mcmp+0x2e>
	...

08013928 <__mdiff>:
 8013928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801392a:	000c      	movs	r4, r1
 801392c:	b087      	sub	sp, #28
 801392e:	9000      	str	r0, [sp, #0]
 8013930:	0011      	movs	r1, r2
 8013932:	0020      	movs	r0, r4
 8013934:	0017      	movs	r7, r2
 8013936:	f7ff ffdb 	bl	80138f0 <__mcmp>
 801393a:	1e05      	subs	r5, r0, #0
 801393c:	d110      	bne.n	8013960 <__mdiff+0x38>
 801393e:	0001      	movs	r1, r0
 8013940:	9800      	ldr	r0, [sp, #0]
 8013942:	f7ff fd03 	bl	801334c <_Balloc>
 8013946:	1e02      	subs	r2, r0, #0
 8013948:	d104      	bne.n	8013954 <__mdiff+0x2c>
 801394a:	4b40      	ldr	r3, [pc, #256]	@ (8013a4c <__mdiff+0x124>)
 801394c:	4840      	ldr	r0, [pc, #256]	@ (8013a50 <__mdiff+0x128>)
 801394e:	4941      	ldr	r1, [pc, #260]	@ (8013a54 <__mdiff+0x12c>)
 8013950:	f7fe f9f6 	bl	8011d40 <__assert_func>
 8013954:	2301      	movs	r3, #1
 8013956:	6145      	str	r5, [r0, #20]
 8013958:	6103      	str	r3, [r0, #16]
 801395a:	0010      	movs	r0, r2
 801395c:	b007      	add	sp, #28
 801395e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013960:	2600      	movs	r6, #0
 8013962:	42b0      	cmp	r0, r6
 8013964:	da03      	bge.n	801396e <__mdiff+0x46>
 8013966:	0023      	movs	r3, r4
 8013968:	003c      	movs	r4, r7
 801396a:	001f      	movs	r7, r3
 801396c:	3601      	adds	r6, #1
 801396e:	6861      	ldr	r1, [r4, #4]
 8013970:	9800      	ldr	r0, [sp, #0]
 8013972:	f7ff fceb 	bl	801334c <_Balloc>
 8013976:	1e02      	subs	r2, r0, #0
 8013978:	d103      	bne.n	8013982 <__mdiff+0x5a>
 801397a:	4b34      	ldr	r3, [pc, #208]	@ (8013a4c <__mdiff+0x124>)
 801397c:	4834      	ldr	r0, [pc, #208]	@ (8013a50 <__mdiff+0x128>)
 801397e:	4936      	ldr	r1, [pc, #216]	@ (8013a58 <__mdiff+0x130>)
 8013980:	e7e6      	b.n	8013950 <__mdiff+0x28>
 8013982:	6923      	ldr	r3, [r4, #16]
 8013984:	3414      	adds	r4, #20
 8013986:	9300      	str	r3, [sp, #0]
 8013988:	009b      	lsls	r3, r3, #2
 801398a:	18e3      	adds	r3, r4, r3
 801398c:	0021      	movs	r1, r4
 801398e:	9401      	str	r4, [sp, #4]
 8013990:	003c      	movs	r4, r7
 8013992:	9302      	str	r3, [sp, #8]
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	3414      	adds	r4, #20
 8013998:	009b      	lsls	r3, r3, #2
 801399a:	18e3      	adds	r3, r4, r3
 801399c:	9303      	str	r3, [sp, #12]
 801399e:	0003      	movs	r3, r0
 80139a0:	60c6      	str	r6, [r0, #12]
 80139a2:	468c      	mov	ip, r1
 80139a4:	2000      	movs	r0, #0
 80139a6:	3314      	adds	r3, #20
 80139a8:	9304      	str	r3, [sp, #16]
 80139aa:	9305      	str	r3, [sp, #20]
 80139ac:	4663      	mov	r3, ip
 80139ae:	cb20      	ldmia	r3!, {r5}
 80139b0:	b2a9      	uxth	r1, r5
 80139b2:	000e      	movs	r6, r1
 80139b4:	469c      	mov	ip, r3
 80139b6:	cc08      	ldmia	r4!, {r3}
 80139b8:	0c2d      	lsrs	r5, r5, #16
 80139ba:	b299      	uxth	r1, r3
 80139bc:	1a71      	subs	r1, r6, r1
 80139be:	1809      	adds	r1, r1, r0
 80139c0:	0c1b      	lsrs	r3, r3, #16
 80139c2:	1408      	asrs	r0, r1, #16
 80139c4:	1aeb      	subs	r3, r5, r3
 80139c6:	181b      	adds	r3, r3, r0
 80139c8:	1418      	asrs	r0, r3, #16
 80139ca:	b289      	uxth	r1, r1
 80139cc:	041b      	lsls	r3, r3, #16
 80139ce:	4319      	orrs	r1, r3
 80139d0:	9b05      	ldr	r3, [sp, #20]
 80139d2:	c302      	stmia	r3!, {r1}
 80139d4:	9305      	str	r3, [sp, #20]
 80139d6:	9b03      	ldr	r3, [sp, #12]
 80139d8:	42a3      	cmp	r3, r4
 80139da:	d8e7      	bhi.n	80139ac <__mdiff+0x84>
 80139dc:	0039      	movs	r1, r7
 80139de:	9c03      	ldr	r4, [sp, #12]
 80139e0:	3115      	adds	r1, #21
 80139e2:	2304      	movs	r3, #4
 80139e4:	428c      	cmp	r4, r1
 80139e6:	d304      	bcc.n	80139f2 <__mdiff+0xca>
 80139e8:	1be3      	subs	r3, r4, r7
 80139ea:	3b15      	subs	r3, #21
 80139ec:	089b      	lsrs	r3, r3, #2
 80139ee:	3301      	adds	r3, #1
 80139f0:	009b      	lsls	r3, r3, #2
 80139f2:	9901      	ldr	r1, [sp, #4]
 80139f4:	18cd      	adds	r5, r1, r3
 80139f6:	9904      	ldr	r1, [sp, #16]
 80139f8:	002e      	movs	r6, r5
 80139fa:	18cb      	adds	r3, r1, r3
 80139fc:	001f      	movs	r7, r3
 80139fe:	9902      	ldr	r1, [sp, #8]
 8013a00:	428e      	cmp	r6, r1
 8013a02:	d311      	bcc.n	8013a28 <__mdiff+0x100>
 8013a04:	9c02      	ldr	r4, [sp, #8]
 8013a06:	1ee9      	subs	r1, r5, #3
 8013a08:	2000      	movs	r0, #0
 8013a0a:	428c      	cmp	r4, r1
 8013a0c:	d304      	bcc.n	8013a18 <__mdiff+0xf0>
 8013a0e:	0021      	movs	r1, r4
 8013a10:	3103      	adds	r1, #3
 8013a12:	1b49      	subs	r1, r1, r5
 8013a14:	0889      	lsrs	r1, r1, #2
 8013a16:	0088      	lsls	r0, r1, #2
 8013a18:	181b      	adds	r3, r3, r0
 8013a1a:	3b04      	subs	r3, #4
 8013a1c:	6819      	ldr	r1, [r3, #0]
 8013a1e:	2900      	cmp	r1, #0
 8013a20:	d010      	beq.n	8013a44 <__mdiff+0x11c>
 8013a22:	9b00      	ldr	r3, [sp, #0]
 8013a24:	6113      	str	r3, [r2, #16]
 8013a26:	e798      	b.n	801395a <__mdiff+0x32>
 8013a28:	4684      	mov	ip, r0
 8013a2a:	ce02      	ldmia	r6!, {r1}
 8013a2c:	b288      	uxth	r0, r1
 8013a2e:	4460      	add	r0, ip
 8013a30:	1400      	asrs	r0, r0, #16
 8013a32:	0c0c      	lsrs	r4, r1, #16
 8013a34:	1904      	adds	r4, r0, r4
 8013a36:	4461      	add	r1, ip
 8013a38:	1420      	asrs	r0, r4, #16
 8013a3a:	b289      	uxth	r1, r1
 8013a3c:	0424      	lsls	r4, r4, #16
 8013a3e:	4321      	orrs	r1, r4
 8013a40:	c702      	stmia	r7!, {r1}
 8013a42:	e7dc      	b.n	80139fe <__mdiff+0xd6>
 8013a44:	9900      	ldr	r1, [sp, #0]
 8013a46:	3901      	subs	r1, #1
 8013a48:	9100      	str	r1, [sp, #0]
 8013a4a:	e7e6      	b.n	8013a1a <__mdiff+0xf2>
 8013a4c:	08017d30 	.word	0x08017d30
 8013a50:	08017da1 	.word	0x08017da1
 8013a54:	00000237 	.word	0x00000237
 8013a58:	00000245 	.word	0x00000245

08013a5c <__ulp>:
 8013a5c:	b510      	push	{r4, lr}
 8013a5e:	2400      	movs	r4, #0
 8013a60:	4b0c      	ldr	r3, [pc, #48]	@ (8013a94 <__ulp+0x38>)
 8013a62:	4a0d      	ldr	r2, [pc, #52]	@ (8013a98 <__ulp+0x3c>)
 8013a64:	400b      	ands	r3, r1
 8013a66:	189b      	adds	r3, r3, r2
 8013a68:	42a3      	cmp	r3, r4
 8013a6a:	dc06      	bgt.n	8013a7a <__ulp+0x1e>
 8013a6c:	425b      	negs	r3, r3
 8013a6e:	151a      	asrs	r2, r3, #20
 8013a70:	2a13      	cmp	r2, #19
 8013a72:	dc05      	bgt.n	8013a80 <__ulp+0x24>
 8013a74:	2380      	movs	r3, #128	@ 0x80
 8013a76:	031b      	lsls	r3, r3, #12
 8013a78:	4113      	asrs	r3, r2
 8013a7a:	0019      	movs	r1, r3
 8013a7c:	0020      	movs	r0, r4
 8013a7e:	bd10      	pop	{r4, pc}
 8013a80:	3a14      	subs	r2, #20
 8013a82:	2401      	movs	r4, #1
 8013a84:	2a1e      	cmp	r2, #30
 8013a86:	dc02      	bgt.n	8013a8e <__ulp+0x32>
 8013a88:	2480      	movs	r4, #128	@ 0x80
 8013a8a:	0624      	lsls	r4, r4, #24
 8013a8c:	40d4      	lsrs	r4, r2
 8013a8e:	2300      	movs	r3, #0
 8013a90:	e7f3      	b.n	8013a7a <__ulp+0x1e>
 8013a92:	46c0      	nop			@ (mov r8, r8)
 8013a94:	7ff00000 	.word	0x7ff00000
 8013a98:	fcc00000 	.word	0xfcc00000

08013a9c <__b2d>:
 8013a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a9e:	0006      	movs	r6, r0
 8013aa0:	6903      	ldr	r3, [r0, #16]
 8013aa2:	3614      	adds	r6, #20
 8013aa4:	009b      	lsls	r3, r3, #2
 8013aa6:	18f3      	adds	r3, r6, r3
 8013aa8:	1f1d      	subs	r5, r3, #4
 8013aaa:	682c      	ldr	r4, [r5, #0]
 8013aac:	000f      	movs	r7, r1
 8013aae:	0020      	movs	r0, r4
 8013ab0:	9301      	str	r3, [sp, #4]
 8013ab2:	f7ff fd43 	bl	801353c <__hi0bits>
 8013ab6:	2220      	movs	r2, #32
 8013ab8:	1a12      	subs	r2, r2, r0
 8013aba:	603a      	str	r2, [r7, #0]
 8013abc:	0003      	movs	r3, r0
 8013abe:	4a1c      	ldr	r2, [pc, #112]	@ (8013b30 <__b2d+0x94>)
 8013ac0:	280a      	cmp	r0, #10
 8013ac2:	dc15      	bgt.n	8013af0 <__b2d+0x54>
 8013ac4:	210b      	movs	r1, #11
 8013ac6:	0027      	movs	r7, r4
 8013ac8:	1a09      	subs	r1, r1, r0
 8013aca:	40cf      	lsrs	r7, r1
 8013acc:	433a      	orrs	r2, r7
 8013ace:	468c      	mov	ip, r1
 8013ad0:	0011      	movs	r1, r2
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	42ae      	cmp	r6, r5
 8013ad6:	d202      	bcs.n	8013ade <__b2d+0x42>
 8013ad8:	9a01      	ldr	r2, [sp, #4]
 8013ada:	3a08      	subs	r2, #8
 8013adc:	6812      	ldr	r2, [r2, #0]
 8013ade:	3315      	adds	r3, #21
 8013ae0:	409c      	lsls	r4, r3
 8013ae2:	4663      	mov	r3, ip
 8013ae4:	0027      	movs	r7, r4
 8013ae6:	40da      	lsrs	r2, r3
 8013ae8:	4317      	orrs	r7, r2
 8013aea:	0038      	movs	r0, r7
 8013aec:	b003      	add	sp, #12
 8013aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013af0:	2700      	movs	r7, #0
 8013af2:	42ae      	cmp	r6, r5
 8013af4:	d202      	bcs.n	8013afc <__b2d+0x60>
 8013af6:	9d01      	ldr	r5, [sp, #4]
 8013af8:	3d08      	subs	r5, #8
 8013afa:	682f      	ldr	r7, [r5, #0]
 8013afc:	210b      	movs	r1, #11
 8013afe:	4249      	negs	r1, r1
 8013b00:	468c      	mov	ip, r1
 8013b02:	449c      	add	ip, r3
 8013b04:	2b0b      	cmp	r3, #11
 8013b06:	d010      	beq.n	8013b2a <__b2d+0x8e>
 8013b08:	4661      	mov	r1, ip
 8013b0a:	2320      	movs	r3, #32
 8013b0c:	408c      	lsls	r4, r1
 8013b0e:	1a5b      	subs	r3, r3, r1
 8013b10:	0039      	movs	r1, r7
 8013b12:	40d9      	lsrs	r1, r3
 8013b14:	430c      	orrs	r4, r1
 8013b16:	4322      	orrs	r2, r4
 8013b18:	0011      	movs	r1, r2
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	42b5      	cmp	r5, r6
 8013b1e:	d901      	bls.n	8013b24 <__b2d+0x88>
 8013b20:	3d04      	subs	r5, #4
 8013b22:	682a      	ldr	r2, [r5, #0]
 8013b24:	4664      	mov	r4, ip
 8013b26:	40a7      	lsls	r7, r4
 8013b28:	e7dd      	b.n	8013ae6 <__b2d+0x4a>
 8013b2a:	4322      	orrs	r2, r4
 8013b2c:	0011      	movs	r1, r2
 8013b2e:	e7dc      	b.n	8013aea <__b2d+0x4e>
 8013b30:	3ff00000 	.word	0x3ff00000

08013b34 <__d2b>:
 8013b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b36:	2101      	movs	r1, #1
 8013b38:	0016      	movs	r6, r2
 8013b3a:	001f      	movs	r7, r3
 8013b3c:	f7ff fc06 	bl	801334c <_Balloc>
 8013b40:	1e04      	subs	r4, r0, #0
 8013b42:	d105      	bne.n	8013b50 <__d2b+0x1c>
 8013b44:	0022      	movs	r2, r4
 8013b46:	4b25      	ldr	r3, [pc, #148]	@ (8013bdc <__d2b+0xa8>)
 8013b48:	4825      	ldr	r0, [pc, #148]	@ (8013be0 <__d2b+0xac>)
 8013b4a:	4926      	ldr	r1, [pc, #152]	@ (8013be4 <__d2b+0xb0>)
 8013b4c:	f7fe f8f8 	bl	8011d40 <__assert_func>
 8013b50:	033b      	lsls	r3, r7, #12
 8013b52:	007d      	lsls	r5, r7, #1
 8013b54:	0b1b      	lsrs	r3, r3, #12
 8013b56:	0d6d      	lsrs	r5, r5, #21
 8013b58:	d002      	beq.n	8013b60 <__d2b+0x2c>
 8013b5a:	2280      	movs	r2, #128	@ 0x80
 8013b5c:	0352      	lsls	r2, r2, #13
 8013b5e:	4313      	orrs	r3, r2
 8013b60:	9301      	str	r3, [sp, #4]
 8013b62:	2e00      	cmp	r6, #0
 8013b64:	d025      	beq.n	8013bb2 <__d2b+0x7e>
 8013b66:	4668      	mov	r0, sp
 8013b68:	9600      	str	r6, [sp, #0]
 8013b6a:	f7ff fd08 	bl	801357e <__lo0bits>
 8013b6e:	9b01      	ldr	r3, [sp, #4]
 8013b70:	9900      	ldr	r1, [sp, #0]
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d01b      	beq.n	8013bae <__d2b+0x7a>
 8013b76:	2220      	movs	r2, #32
 8013b78:	001e      	movs	r6, r3
 8013b7a:	1a12      	subs	r2, r2, r0
 8013b7c:	4096      	lsls	r6, r2
 8013b7e:	0032      	movs	r2, r6
 8013b80:	40c3      	lsrs	r3, r0
 8013b82:	430a      	orrs	r2, r1
 8013b84:	6162      	str	r2, [r4, #20]
 8013b86:	9301      	str	r3, [sp, #4]
 8013b88:	9e01      	ldr	r6, [sp, #4]
 8013b8a:	61a6      	str	r6, [r4, #24]
 8013b8c:	1e73      	subs	r3, r6, #1
 8013b8e:	419e      	sbcs	r6, r3
 8013b90:	3601      	adds	r6, #1
 8013b92:	6126      	str	r6, [r4, #16]
 8013b94:	2d00      	cmp	r5, #0
 8013b96:	d014      	beq.n	8013bc2 <__d2b+0x8e>
 8013b98:	2635      	movs	r6, #53	@ 0x35
 8013b9a:	4b13      	ldr	r3, [pc, #76]	@ (8013be8 <__d2b+0xb4>)
 8013b9c:	18ed      	adds	r5, r5, r3
 8013b9e:	9b08      	ldr	r3, [sp, #32]
 8013ba0:	182d      	adds	r5, r5, r0
 8013ba2:	601d      	str	r5, [r3, #0]
 8013ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ba6:	1a36      	subs	r6, r6, r0
 8013ba8:	601e      	str	r6, [r3, #0]
 8013baa:	0020      	movs	r0, r4
 8013bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013bae:	6161      	str	r1, [r4, #20]
 8013bb0:	e7ea      	b.n	8013b88 <__d2b+0x54>
 8013bb2:	a801      	add	r0, sp, #4
 8013bb4:	f7ff fce3 	bl	801357e <__lo0bits>
 8013bb8:	9b01      	ldr	r3, [sp, #4]
 8013bba:	2601      	movs	r6, #1
 8013bbc:	6163      	str	r3, [r4, #20]
 8013bbe:	3020      	adds	r0, #32
 8013bc0:	e7e7      	b.n	8013b92 <__d2b+0x5e>
 8013bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8013bec <__d2b+0xb8>)
 8013bc4:	18c0      	adds	r0, r0, r3
 8013bc6:	9b08      	ldr	r3, [sp, #32]
 8013bc8:	6018      	str	r0, [r3, #0]
 8013bca:	4b09      	ldr	r3, [pc, #36]	@ (8013bf0 <__d2b+0xbc>)
 8013bcc:	18f3      	adds	r3, r6, r3
 8013bce:	009b      	lsls	r3, r3, #2
 8013bd0:	18e3      	adds	r3, r4, r3
 8013bd2:	6958      	ldr	r0, [r3, #20]
 8013bd4:	f7ff fcb2 	bl	801353c <__hi0bits>
 8013bd8:	0176      	lsls	r6, r6, #5
 8013bda:	e7e3      	b.n	8013ba4 <__d2b+0x70>
 8013bdc:	08017d30 	.word	0x08017d30
 8013be0:	08017da1 	.word	0x08017da1
 8013be4:	0000030f 	.word	0x0000030f
 8013be8:	fffffbcd 	.word	0xfffffbcd
 8013bec:	fffffbce 	.word	0xfffffbce
 8013bf0:	3fffffff 	.word	0x3fffffff

08013bf4 <__ratio>:
 8013bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bf6:	b087      	sub	sp, #28
 8013bf8:	000f      	movs	r7, r1
 8013bfa:	a904      	add	r1, sp, #16
 8013bfc:	0006      	movs	r6, r0
 8013bfe:	f7ff ff4d 	bl	8013a9c <__b2d>
 8013c02:	9000      	str	r0, [sp, #0]
 8013c04:	9101      	str	r1, [sp, #4]
 8013c06:	9b00      	ldr	r3, [sp, #0]
 8013c08:	9c01      	ldr	r4, [sp, #4]
 8013c0a:	0038      	movs	r0, r7
 8013c0c:	a905      	add	r1, sp, #20
 8013c0e:	9302      	str	r3, [sp, #8]
 8013c10:	9403      	str	r4, [sp, #12]
 8013c12:	f7ff ff43 	bl	8013a9c <__b2d>
 8013c16:	000d      	movs	r5, r1
 8013c18:	0002      	movs	r2, r0
 8013c1a:	000b      	movs	r3, r1
 8013c1c:	6930      	ldr	r0, [r6, #16]
 8013c1e:	6939      	ldr	r1, [r7, #16]
 8013c20:	9e04      	ldr	r6, [sp, #16]
 8013c22:	1a40      	subs	r0, r0, r1
 8013c24:	9905      	ldr	r1, [sp, #20]
 8013c26:	0140      	lsls	r0, r0, #5
 8013c28:	1a71      	subs	r1, r6, r1
 8013c2a:	1841      	adds	r1, r0, r1
 8013c2c:	0508      	lsls	r0, r1, #20
 8013c2e:	2900      	cmp	r1, #0
 8013c30:	dd08      	ble.n	8013c44 <__ratio+0x50>
 8013c32:	9901      	ldr	r1, [sp, #4]
 8013c34:	1841      	adds	r1, r0, r1
 8013c36:	9103      	str	r1, [sp, #12]
 8013c38:	9802      	ldr	r0, [sp, #8]
 8013c3a:	9903      	ldr	r1, [sp, #12]
 8013c3c:	f7ee f9f8 	bl	8002030 <__aeabi_ddiv>
 8013c40:	b007      	add	sp, #28
 8013c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c44:	1a2b      	subs	r3, r5, r0
 8013c46:	e7f7      	b.n	8013c38 <__ratio+0x44>

08013c48 <__copybits>:
 8013c48:	b570      	push	{r4, r5, r6, lr}
 8013c4a:	0014      	movs	r4, r2
 8013c4c:	0005      	movs	r5, r0
 8013c4e:	3901      	subs	r1, #1
 8013c50:	6913      	ldr	r3, [r2, #16]
 8013c52:	1149      	asrs	r1, r1, #5
 8013c54:	3101      	adds	r1, #1
 8013c56:	0089      	lsls	r1, r1, #2
 8013c58:	3414      	adds	r4, #20
 8013c5a:	009b      	lsls	r3, r3, #2
 8013c5c:	1841      	adds	r1, r0, r1
 8013c5e:	18e3      	adds	r3, r4, r3
 8013c60:	42a3      	cmp	r3, r4
 8013c62:	d80d      	bhi.n	8013c80 <__copybits+0x38>
 8013c64:	0014      	movs	r4, r2
 8013c66:	3411      	adds	r4, #17
 8013c68:	2500      	movs	r5, #0
 8013c6a:	42a3      	cmp	r3, r4
 8013c6c:	d303      	bcc.n	8013c76 <__copybits+0x2e>
 8013c6e:	1a9b      	subs	r3, r3, r2
 8013c70:	3b11      	subs	r3, #17
 8013c72:	089b      	lsrs	r3, r3, #2
 8013c74:	009d      	lsls	r5, r3, #2
 8013c76:	2300      	movs	r3, #0
 8013c78:	1940      	adds	r0, r0, r5
 8013c7a:	4281      	cmp	r1, r0
 8013c7c:	d803      	bhi.n	8013c86 <__copybits+0x3e>
 8013c7e:	bd70      	pop	{r4, r5, r6, pc}
 8013c80:	cc40      	ldmia	r4!, {r6}
 8013c82:	c540      	stmia	r5!, {r6}
 8013c84:	e7ec      	b.n	8013c60 <__copybits+0x18>
 8013c86:	c008      	stmia	r0!, {r3}
 8013c88:	e7f7      	b.n	8013c7a <__copybits+0x32>

08013c8a <__any_on>:
 8013c8a:	0002      	movs	r2, r0
 8013c8c:	6900      	ldr	r0, [r0, #16]
 8013c8e:	b510      	push	{r4, lr}
 8013c90:	3214      	adds	r2, #20
 8013c92:	114b      	asrs	r3, r1, #5
 8013c94:	4298      	cmp	r0, r3
 8013c96:	db13      	blt.n	8013cc0 <__any_on+0x36>
 8013c98:	dd0c      	ble.n	8013cb4 <__any_on+0x2a>
 8013c9a:	241f      	movs	r4, #31
 8013c9c:	0008      	movs	r0, r1
 8013c9e:	4020      	ands	r0, r4
 8013ca0:	4221      	tst	r1, r4
 8013ca2:	d007      	beq.n	8013cb4 <__any_on+0x2a>
 8013ca4:	0099      	lsls	r1, r3, #2
 8013ca6:	588c      	ldr	r4, [r1, r2]
 8013ca8:	0021      	movs	r1, r4
 8013caa:	40c1      	lsrs	r1, r0
 8013cac:	4081      	lsls	r1, r0
 8013cae:	2001      	movs	r0, #1
 8013cb0:	428c      	cmp	r4, r1
 8013cb2:	d104      	bne.n	8013cbe <__any_on+0x34>
 8013cb4:	009b      	lsls	r3, r3, #2
 8013cb6:	18d3      	adds	r3, r2, r3
 8013cb8:	4293      	cmp	r3, r2
 8013cba:	d803      	bhi.n	8013cc4 <__any_on+0x3a>
 8013cbc:	2000      	movs	r0, #0
 8013cbe:	bd10      	pop	{r4, pc}
 8013cc0:	0003      	movs	r3, r0
 8013cc2:	e7f7      	b.n	8013cb4 <__any_on+0x2a>
 8013cc4:	3b04      	subs	r3, #4
 8013cc6:	6819      	ldr	r1, [r3, #0]
 8013cc8:	2900      	cmp	r1, #0
 8013cca:	d0f5      	beq.n	8013cb8 <__any_on+0x2e>
 8013ccc:	2001      	movs	r0, #1
 8013cce:	e7f6      	b.n	8013cbe <__any_on+0x34>

08013cd0 <__ascii_wctomb>:
 8013cd0:	0003      	movs	r3, r0
 8013cd2:	1e08      	subs	r0, r1, #0
 8013cd4:	d005      	beq.n	8013ce2 <__ascii_wctomb+0x12>
 8013cd6:	2aff      	cmp	r2, #255	@ 0xff
 8013cd8:	d904      	bls.n	8013ce4 <__ascii_wctomb+0x14>
 8013cda:	228a      	movs	r2, #138	@ 0x8a
 8013cdc:	2001      	movs	r0, #1
 8013cde:	601a      	str	r2, [r3, #0]
 8013ce0:	4240      	negs	r0, r0
 8013ce2:	4770      	bx	lr
 8013ce4:	2001      	movs	r0, #1
 8013ce6:	700a      	strb	r2, [r1, #0]
 8013ce8:	e7fb      	b.n	8013ce2 <__ascii_wctomb+0x12>
	...

08013cec <__ssputs_r>:
 8013cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cee:	688e      	ldr	r6, [r1, #8]
 8013cf0:	b085      	sub	sp, #20
 8013cf2:	001f      	movs	r7, r3
 8013cf4:	000c      	movs	r4, r1
 8013cf6:	680b      	ldr	r3, [r1, #0]
 8013cf8:	9002      	str	r0, [sp, #8]
 8013cfa:	9203      	str	r2, [sp, #12]
 8013cfc:	42be      	cmp	r6, r7
 8013cfe:	d830      	bhi.n	8013d62 <__ssputs_r+0x76>
 8013d00:	210c      	movs	r1, #12
 8013d02:	5e62      	ldrsh	r2, [r4, r1]
 8013d04:	2190      	movs	r1, #144	@ 0x90
 8013d06:	00c9      	lsls	r1, r1, #3
 8013d08:	420a      	tst	r2, r1
 8013d0a:	d028      	beq.n	8013d5e <__ssputs_r+0x72>
 8013d0c:	2003      	movs	r0, #3
 8013d0e:	6921      	ldr	r1, [r4, #16]
 8013d10:	1a5b      	subs	r3, r3, r1
 8013d12:	9301      	str	r3, [sp, #4]
 8013d14:	6963      	ldr	r3, [r4, #20]
 8013d16:	4343      	muls	r3, r0
 8013d18:	9801      	ldr	r0, [sp, #4]
 8013d1a:	0fdd      	lsrs	r5, r3, #31
 8013d1c:	18ed      	adds	r5, r5, r3
 8013d1e:	1c7b      	adds	r3, r7, #1
 8013d20:	181b      	adds	r3, r3, r0
 8013d22:	106d      	asrs	r5, r5, #1
 8013d24:	42ab      	cmp	r3, r5
 8013d26:	d900      	bls.n	8013d2a <__ssputs_r+0x3e>
 8013d28:	001d      	movs	r5, r3
 8013d2a:	0552      	lsls	r2, r2, #21
 8013d2c:	d528      	bpl.n	8013d80 <__ssputs_r+0x94>
 8013d2e:	0029      	movs	r1, r5
 8013d30:	9802      	ldr	r0, [sp, #8]
 8013d32:	f7ff fa69 	bl	8013208 <_malloc_r>
 8013d36:	1e06      	subs	r6, r0, #0
 8013d38:	d02c      	beq.n	8013d94 <__ssputs_r+0xa8>
 8013d3a:	9a01      	ldr	r2, [sp, #4]
 8013d3c:	6921      	ldr	r1, [r4, #16]
 8013d3e:	f7fd ffef 	bl	8011d20 <memcpy>
 8013d42:	89a2      	ldrh	r2, [r4, #12]
 8013d44:	4b18      	ldr	r3, [pc, #96]	@ (8013da8 <__ssputs_r+0xbc>)
 8013d46:	401a      	ands	r2, r3
 8013d48:	2380      	movs	r3, #128	@ 0x80
 8013d4a:	4313      	orrs	r3, r2
 8013d4c:	81a3      	strh	r3, [r4, #12]
 8013d4e:	9b01      	ldr	r3, [sp, #4]
 8013d50:	6126      	str	r6, [r4, #16]
 8013d52:	18f6      	adds	r6, r6, r3
 8013d54:	6026      	str	r6, [r4, #0]
 8013d56:	003e      	movs	r6, r7
 8013d58:	6165      	str	r5, [r4, #20]
 8013d5a:	1aed      	subs	r5, r5, r3
 8013d5c:	60a5      	str	r5, [r4, #8]
 8013d5e:	42be      	cmp	r6, r7
 8013d60:	d900      	bls.n	8013d64 <__ssputs_r+0x78>
 8013d62:	003e      	movs	r6, r7
 8013d64:	0032      	movs	r2, r6
 8013d66:	9903      	ldr	r1, [sp, #12]
 8013d68:	6820      	ldr	r0, [r4, #0]
 8013d6a:	f000 f9df 	bl	801412c <memmove>
 8013d6e:	2000      	movs	r0, #0
 8013d70:	68a3      	ldr	r3, [r4, #8]
 8013d72:	1b9b      	subs	r3, r3, r6
 8013d74:	60a3      	str	r3, [r4, #8]
 8013d76:	6823      	ldr	r3, [r4, #0]
 8013d78:	199b      	adds	r3, r3, r6
 8013d7a:	6023      	str	r3, [r4, #0]
 8013d7c:	b005      	add	sp, #20
 8013d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d80:	002a      	movs	r2, r5
 8013d82:	9802      	ldr	r0, [sp, #8]
 8013d84:	f000 fa2a 	bl	80141dc <_realloc_r>
 8013d88:	1e06      	subs	r6, r0, #0
 8013d8a:	d1e0      	bne.n	8013d4e <__ssputs_r+0x62>
 8013d8c:	6921      	ldr	r1, [r4, #16]
 8013d8e:	9802      	ldr	r0, [sp, #8]
 8013d90:	f7fe fe6a 	bl	8012a68 <_free_r>
 8013d94:	230c      	movs	r3, #12
 8013d96:	2001      	movs	r0, #1
 8013d98:	9a02      	ldr	r2, [sp, #8]
 8013d9a:	4240      	negs	r0, r0
 8013d9c:	6013      	str	r3, [r2, #0]
 8013d9e:	89a2      	ldrh	r2, [r4, #12]
 8013da0:	3334      	adds	r3, #52	@ 0x34
 8013da2:	4313      	orrs	r3, r2
 8013da4:	81a3      	strh	r3, [r4, #12]
 8013da6:	e7e9      	b.n	8013d7c <__ssputs_r+0x90>
 8013da8:	fffffb7f 	.word	0xfffffb7f

08013dac <_svfiprintf_r>:
 8013dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dae:	b0a1      	sub	sp, #132	@ 0x84
 8013db0:	9003      	str	r0, [sp, #12]
 8013db2:	001d      	movs	r5, r3
 8013db4:	898b      	ldrh	r3, [r1, #12]
 8013db6:	000f      	movs	r7, r1
 8013db8:	0016      	movs	r6, r2
 8013dba:	061b      	lsls	r3, r3, #24
 8013dbc:	d511      	bpl.n	8013de2 <_svfiprintf_r+0x36>
 8013dbe:	690b      	ldr	r3, [r1, #16]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d10e      	bne.n	8013de2 <_svfiprintf_r+0x36>
 8013dc4:	2140      	movs	r1, #64	@ 0x40
 8013dc6:	f7ff fa1f 	bl	8013208 <_malloc_r>
 8013dca:	6038      	str	r0, [r7, #0]
 8013dcc:	6138      	str	r0, [r7, #16]
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	d105      	bne.n	8013dde <_svfiprintf_r+0x32>
 8013dd2:	230c      	movs	r3, #12
 8013dd4:	9a03      	ldr	r2, [sp, #12]
 8013dd6:	6013      	str	r3, [r2, #0]
 8013dd8:	2001      	movs	r0, #1
 8013dda:	4240      	negs	r0, r0
 8013ddc:	e0cf      	b.n	8013f7e <_svfiprintf_r+0x1d2>
 8013dde:	2340      	movs	r3, #64	@ 0x40
 8013de0:	617b      	str	r3, [r7, #20]
 8013de2:	2300      	movs	r3, #0
 8013de4:	ac08      	add	r4, sp, #32
 8013de6:	6163      	str	r3, [r4, #20]
 8013de8:	3320      	adds	r3, #32
 8013dea:	7663      	strb	r3, [r4, #25]
 8013dec:	3310      	adds	r3, #16
 8013dee:	76a3      	strb	r3, [r4, #26]
 8013df0:	9507      	str	r5, [sp, #28]
 8013df2:	0035      	movs	r5, r6
 8013df4:	782b      	ldrb	r3, [r5, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d001      	beq.n	8013dfe <_svfiprintf_r+0x52>
 8013dfa:	2b25      	cmp	r3, #37	@ 0x25
 8013dfc:	d148      	bne.n	8013e90 <_svfiprintf_r+0xe4>
 8013dfe:	1bab      	subs	r3, r5, r6
 8013e00:	9305      	str	r3, [sp, #20]
 8013e02:	42b5      	cmp	r5, r6
 8013e04:	d00b      	beq.n	8013e1e <_svfiprintf_r+0x72>
 8013e06:	0032      	movs	r2, r6
 8013e08:	0039      	movs	r1, r7
 8013e0a:	9803      	ldr	r0, [sp, #12]
 8013e0c:	f7ff ff6e 	bl	8013cec <__ssputs_r>
 8013e10:	3001      	adds	r0, #1
 8013e12:	d100      	bne.n	8013e16 <_svfiprintf_r+0x6a>
 8013e14:	e0ae      	b.n	8013f74 <_svfiprintf_r+0x1c8>
 8013e16:	6963      	ldr	r3, [r4, #20]
 8013e18:	9a05      	ldr	r2, [sp, #20]
 8013e1a:	189b      	adds	r3, r3, r2
 8013e1c:	6163      	str	r3, [r4, #20]
 8013e1e:	782b      	ldrb	r3, [r5, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d100      	bne.n	8013e26 <_svfiprintf_r+0x7a>
 8013e24:	e0a6      	b.n	8013f74 <_svfiprintf_r+0x1c8>
 8013e26:	2201      	movs	r2, #1
 8013e28:	2300      	movs	r3, #0
 8013e2a:	4252      	negs	r2, r2
 8013e2c:	6062      	str	r2, [r4, #4]
 8013e2e:	a904      	add	r1, sp, #16
 8013e30:	3254      	adds	r2, #84	@ 0x54
 8013e32:	1852      	adds	r2, r2, r1
 8013e34:	1c6e      	adds	r6, r5, #1
 8013e36:	6023      	str	r3, [r4, #0]
 8013e38:	60e3      	str	r3, [r4, #12]
 8013e3a:	60a3      	str	r3, [r4, #8]
 8013e3c:	7013      	strb	r3, [r2, #0]
 8013e3e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8013e40:	4b54      	ldr	r3, [pc, #336]	@ (8013f94 <_svfiprintf_r+0x1e8>)
 8013e42:	2205      	movs	r2, #5
 8013e44:	0018      	movs	r0, r3
 8013e46:	7831      	ldrb	r1, [r6, #0]
 8013e48:	9305      	str	r3, [sp, #20]
 8013e4a:	f7fd ff5e 	bl	8011d0a <memchr>
 8013e4e:	1c75      	adds	r5, r6, #1
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d11f      	bne.n	8013e94 <_svfiprintf_r+0xe8>
 8013e54:	6822      	ldr	r2, [r4, #0]
 8013e56:	06d3      	lsls	r3, r2, #27
 8013e58:	d504      	bpl.n	8013e64 <_svfiprintf_r+0xb8>
 8013e5a:	2353      	movs	r3, #83	@ 0x53
 8013e5c:	a904      	add	r1, sp, #16
 8013e5e:	185b      	adds	r3, r3, r1
 8013e60:	2120      	movs	r1, #32
 8013e62:	7019      	strb	r1, [r3, #0]
 8013e64:	0713      	lsls	r3, r2, #28
 8013e66:	d504      	bpl.n	8013e72 <_svfiprintf_r+0xc6>
 8013e68:	2353      	movs	r3, #83	@ 0x53
 8013e6a:	a904      	add	r1, sp, #16
 8013e6c:	185b      	adds	r3, r3, r1
 8013e6e:	212b      	movs	r1, #43	@ 0x2b
 8013e70:	7019      	strb	r1, [r3, #0]
 8013e72:	7833      	ldrb	r3, [r6, #0]
 8013e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e76:	d016      	beq.n	8013ea6 <_svfiprintf_r+0xfa>
 8013e78:	0035      	movs	r5, r6
 8013e7a:	2100      	movs	r1, #0
 8013e7c:	200a      	movs	r0, #10
 8013e7e:	68e3      	ldr	r3, [r4, #12]
 8013e80:	782a      	ldrb	r2, [r5, #0]
 8013e82:	1c6e      	adds	r6, r5, #1
 8013e84:	3a30      	subs	r2, #48	@ 0x30
 8013e86:	2a09      	cmp	r2, #9
 8013e88:	d950      	bls.n	8013f2c <_svfiprintf_r+0x180>
 8013e8a:	2900      	cmp	r1, #0
 8013e8c:	d111      	bne.n	8013eb2 <_svfiprintf_r+0x106>
 8013e8e:	e017      	b.n	8013ec0 <_svfiprintf_r+0x114>
 8013e90:	3501      	adds	r5, #1
 8013e92:	e7af      	b.n	8013df4 <_svfiprintf_r+0x48>
 8013e94:	9b05      	ldr	r3, [sp, #20]
 8013e96:	6822      	ldr	r2, [r4, #0]
 8013e98:	1ac0      	subs	r0, r0, r3
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	4083      	lsls	r3, r0
 8013e9e:	4313      	orrs	r3, r2
 8013ea0:	002e      	movs	r6, r5
 8013ea2:	6023      	str	r3, [r4, #0]
 8013ea4:	e7cc      	b.n	8013e40 <_svfiprintf_r+0x94>
 8013ea6:	9b07      	ldr	r3, [sp, #28]
 8013ea8:	1d19      	adds	r1, r3, #4
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	9107      	str	r1, [sp, #28]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	db01      	blt.n	8013eb6 <_svfiprintf_r+0x10a>
 8013eb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013eb4:	e004      	b.n	8013ec0 <_svfiprintf_r+0x114>
 8013eb6:	425b      	negs	r3, r3
 8013eb8:	60e3      	str	r3, [r4, #12]
 8013eba:	2302      	movs	r3, #2
 8013ebc:	4313      	orrs	r3, r2
 8013ebe:	6023      	str	r3, [r4, #0]
 8013ec0:	782b      	ldrb	r3, [r5, #0]
 8013ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ec4:	d10c      	bne.n	8013ee0 <_svfiprintf_r+0x134>
 8013ec6:	786b      	ldrb	r3, [r5, #1]
 8013ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013eca:	d134      	bne.n	8013f36 <_svfiprintf_r+0x18a>
 8013ecc:	9b07      	ldr	r3, [sp, #28]
 8013ece:	3502      	adds	r5, #2
 8013ed0:	1d1a      	adds	r2, r3, #4
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	9207      	str	r2, [sp, #28]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	da01      	bge.n	8013ede <_svfiprintf_r+0x132>
 8013eda:	2301      	movs	r3, #1
 8013edc:	425b      	negs	r3, r3
 8013ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ee0:	4e2d      	ldr	r6, [pc, #180]	@ (8013f98 <_svfiprintf_r+0x1ec>)
 8013ee2:	2203      	movs	r2, #3
 8013ee4:	0030      	movs	r0, r6
 8013ee6:	7829      	ldrb	r1, [r5, #0]
 8013ee8:	f7fd ff0f 	bl	8011d0a <memchr>
 8013eec:	2800      	cmp	r0, #0
 8013eee:	d006      	beq.n	8013efe <_svfiprintf_r+0x152>
 8013ef0:	2340      	movs	r3, #64	@ 0x40
 8013ef2:	1b80      	subs	r0, r0, r6
 8013ef4:	4083      	lsls	r3, r0
 8013ef6:	6822      	ldr	r2, [r4, #0]
 8013ef8:	3501      	adds	r5, #1
 8013efa:	4313      	orrs	r3, r2
 8013efc:	6023      	str	r3, [r4, #0]
 8013efe:	7829      	ldrb	r1, [r5, #0]
 8013f00:	2206      	movs	r2, #6
 8013f02:	4826      	ldr	r0, [pc, #152]	@ (8013f9c <_svfiprintf_r+0x1f0>)
 8013f04:	1c6e      	adds	r6, r5, #1
 8013f06:	7621      	strb	r1, [r4, #24]
 8013f08:	f7fd feff 	bl	8011d0a <memchr>
 8013f0c:	2800      	cmp	r0, #0
 8013f0e:	d038      	beq.n	8013f82 <_svfiprintf_r+0x1d6>
 8013f10:	4b23      	ldr	r3, [pc, #140]	@ (8013fa0 <_svfiprintf_r+0x1f4>)
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d122      	bne.n	8013f5c <_svfiprintf_r+0x1b0>
 8013f16:	2207      	movs	r2, #7
 8013f18:	9b07      	ldr	r3, [sp, #28]
 8013f1a:	3307      	adds	r3, #7
 8013f1c:	4393      	bics	r3, r2
 8013f1e:	3308      	adds	r3, #8
 8013f20:	9307      	str	r3, [sp, #28]
 8013f22:	6963      	ldr	r3, [r4, #20]
 8013f24:	9a04      	ldr	r2, [sp, #16]
 8013f26:	189b      	adds	r3, r3, r2
 8013f28:	6163      	str	r3, [r4, #20]
 8013f2a:	e762      	b.n	8013df2 <_svfiprintf_r+0x46>
 8013f2c:	4343      	muls	r3, r0
 8013f2e:	0035      	movs	r5, r6
 8013f30:	2101      	movs	r1, #1
 8013f32:	189b      	adds	r3, r3, r2
 8013f34:	e7a4      	b.n	8013e80 <_svfiprintf_r+0xd4>
 8013f36:	2300      	movs	r3, #0
 8013f38:	200a      	movs	r0, #10
 8013f3a:	0019      	movs	r1, r3
 8013f3c:	3501      	adds	r5, #1
 8013f3e:	6063      	str	r3, [r4, #4]
 8013f40:	782a      	ldrb	r2, [r5, #0]
 8013f42:	1c6e      	adds	r6, r5, #1
 8013f44:	3a30      	subs	r2, #48	@ 0x30
 8013f46:	2a09      	cmp	r2, #9
 8013f48:	d903      	bls.n	8013f52 <_svfiprintf_r+0x1a6>
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d0c8      	beq.n	8013ee0 <_svfiprintf_r+0x134>
 8013f4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8013f50:	e7c6      	b.n	8013ee0 <_svfiprintf_r+0x134>
 8013f52:	4341      	muls	r1, r0
 8013f54:	0035      	movs	r5, r6
 8013f56:	2301      	movs	r3, #1
 8013f58:	1889      	adds	r1, r1, r2
 8013f5a:	e7f1      	b.n	8013f40 <_svfiprintf_r+0x194>
 8013f5c:	aa07      	add	r2, sp, #28
 8013f5e:	9200      	str	r2, [sp, #0]
 8013f60:	0021      	movs	r1, r4
 8013f62:	003a      	movs	r2, r7
 8013f64:	4b0f      	ldr	r3, [pc, #60]	@ (8013fa4 <_svfiprintf_r+0x1f8>)
 8013f66:	9803      	ldr	r0, [sp, #12]
 8013f68:	f7fd f8d6 	bl	8011118 <_printf_float>
 8013f6c:	9004      	str	r0, [sp, #16]
 8013f6e:	9b04      	ldr	r3, [sp, #16]
 8013f70:	3301      	adds	r3, #1
 8013f72:	d1d6      	bne.n	8013f22 <_svfiprintf_r+0x176>
 8013f74:	89bb      	ldrh	r3, [r7, #12]
 8013f76:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8013f78:	065b      	lsls	r3, r3, #25
 8013f7a:	d500      	bpl.n	8013f7e <_svfiprintf_r+0x1d2>
 8013f7c:	e72c      	b.n	8013dd8 <_svfiprintf_r+0x2c>
 8013f7e:	b021      	add	sp, #132	@ 0x84
 8013f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f82:	aa07      	add	r2, sp, #28
 8013f84:	9200      	str	r2, [sp, #0]
 8013f86:	0021      	movs	r1, r4
 8013f88:	003a      	movs	r2, r7
 8013f8a:	4b06      	ldr	r3, [pc, #24]	@ (8013fa4 <_svfiprintf_r+0x1f8>)
 8013f8c:	9803      	ldr	r0, [sp, #12]
 8013f8e:	f7fd fb71 	bl	8011674 <_printf_i>
 8013f92:	e7eb      	b.n	8013f6c <_svfiprintf_r+0x1c0>
 8013f94:	08017dfa 	.word	0x08017dfa
 8013f98:	08017e00 	.word	0x08017e00
 8013f9c:	08017e04 	.word	0x08017e04
 8013fa0:	08011119 	.word	0x08011119
 8013fa4:	08013ced 	.word	0x08013ced

08013fa8 <__sflush_r>:
 8013fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013faa:	220c      	movs	r2, #12
 8013fac:	5e8b      	ldrsh	r3, [r1, r2]
 8013fae:	0005      	movs	r5, r0
 8013fb0:	000c      	movs	r4, r1
 8013fb2:	071a      	lsls	r2, r3, #28
 8013fb4:	d456      	bmi.n	8014064 <__sflush_r+0xbc>
 8013fb6:	684a      	ldr	r2, [r1, #4]
 8013fb8:	2a00      	cmp	r2, #0
 8013fba:	dc02      	bgt.n	8013fc2 <__sflush_r+0x1a>
 8013fbc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8013fbe:	2a00      	cmp	r2, #0
 8013fc0:	dd4e      	ble.n	8014060 <__sflush_r+0xb8>
 8013fc2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013fc4:	2f00      	cmp	r7, #0
 8013fc6:	d04b      	beq.n	8014060 <__sflush_r+0xb8>
 8013fc8:	2200      	movs	r2, #0
 8013fca:	2080      	movs	r0, #128	@ 0x80
 8013fcc:	682e      	ldr	r6, [r5, #0]
 8013fce:	602a      	str	r2, [r5, #0]
 8013fd0:	001a      	movs	r2, r3
 8013fd2:	0140      	lsls	r0, r0, #5
 8013fd4:	6a21      	ldr	r1, [r4, #32]
 8013fd6:	4002      	ands	r2, r0
 8013fd8:	4203      	tst	r3, r0
 8013fda:	d033      	beq.n	8014044 <__sflush_r+0x9c>
 8013fdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013fde:	89a3      	ldrh	r3, [r4, #12]
 8013fe0:	075b      	lsls	r3, r3, #29
 8013fe2:	d506      	bpl.n	8013ff2 <__sflush_r+0x4a>
 8013fe4:	6863      	ldr	r3, [r4, #4]
 8013fe6:	1ad2      	subs	r2, r2, r3
 8013fe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d001      	beq.n	8013ff2 <__sflush_r+0x4a>
 8013fee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013ff0:	1ad2      	subs	r2, r2, r3
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	0028      	movs	r0, r5
 8013ff6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013ff8:	6a21      	ldr	r1, [r4, #32]
 8013ffa:	47b8      	blx	r7
 8013ffc:	89a2      	ldrh	r2, [r4, #12]
 8013ffe:	1c43      	adds	r3, r0, #1
 8014000:	d106      	bne.n	8014010 <__sflush_r+0x68>
 8014002:	6829      	ldr	r1, [r5, #0]
 8014004:	291d      	cmp	r1, #29
 8014006:	d846      	bhi.n	8014096 <__sflush_r+0xee>
 8014008:	4b29      	ldr	r3, [pc, #164]	@ (80140b0 <__sflush_r+0x108>)
 801400a:	40cb      	lsrs	r3, r1
 801400c:	07db      	lsls	r3, r3, #31
 801400e:	d542      	bpl.n	8014096 <__sflush_r+0xee>
 8014010:	2300      	movs	r3, #0
 8014012:	6063      	str	r3, [r4, #4]
 8014014:	6923      	ldr	r3, [r4, #16]
 8014016:	6023      	str	r3, [r4, #0]
 8014018:	04d2      	lsls	r2, r2, #19
 801401a:	d505      	bpl.n	8014028 <__sflush_r+0x80>
 801401c:	1c43      	adds	r3, r0, #1
 801401e:	d102      	bne.n	8014026 <__sflush_r+0x7e>
 8014020:	682b      	ldr	r3, [r5, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d100      	bne.n	8014028 <__sflush_r+0x80>
 8014026:	6560      	str	r0, [r4, #84]	@ 0x54
 8014028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801402a:	602e      	str	r6, [r5, #0]
 801402c:	2900      	cmp	r1, #0
 801402e:	d017      	beq.n	8014060 <__sflush_r+0xb8>
 8014030:	0023      	movs	r3, r4
 8014032:	3344      	adds	r3, #68	@ 0x44
 8014034:	4299      	cmp	r1, r3
 8014036:	d002      	beq.n	801403e <__sflush_r+0x96>
 8014038:	0028      	movs	r0, r5
 801403a:	f7fe fd15 	bl	8012a68 <_free_r>
 801403e:	2300      	movs	r3, #0
 8014040:	6363      	str	r3, [r4, #52]	@ 0x34
 8014042:	e00d      	b.n	8014060 <__sflush_r+0xb8>
 8014044:	2301      	movs	r3, #1
 8014046:	0028      	movs	r0, r5
 8014048:	47b8      	blx	r7
 801404a:	0002      	movs	r2, r0
 801404c:	1c43      	adds	r3, r0, #1
 801404e:	d1c6      	bne.n	8013fde <__sflush_r+0x36>
 8014050:	682b      	ldr	r3, [r5, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d0c3      	beq.n	8013fde <__sflush_r+0x36>
 8014056:	2b1d      	cmp	r3, #29
 8014058:	d001      	beq.n	801405e <__sflush_r+0xb6>
 801405a:	2b16      	cmp	r3, #22
 801405c:	d11a      	bne.n	8014094 <__sflush_r+0xec>
 801405e:	602e      	str	r6, [r5, #0]
 8014060:	2000      	movs	r0, #0
 8014062:	e01e      	b.n	80140a2 <__sflush_r+0xfa>
 8014064:	690e      	ldr	r6, [r1, #16]
 8014066:	2e00      	cmp	r6, #0
 8014068:	d0fa      	beq.n	8014060 <__sflush_r+0xb8>
 801406a:	680f      	ldr	r7, [r1, #0]
 801406c:	600e      	str	r6, [r1, #0]
 801406e:	1bba      	subs	r2, r7, r6
 8014070:	9201      	str	r2, [sp, #4]
 8014072:	2200      	movs	r2, #0
 8014074:	079b      	lsls	r3, r3, #30
 8014076:	d100      	bne.n	801407a <__sflush_r+0xd2>
 8014078:	694a      	ldr	r2, [r1, #20]
 801407a:	60a2      	str	r2, [r4, #8]
 801407c:	9b01      	ldr	r3, [sp, #4]
 801407e:	2b00      	cmp	r3, #0
 8014080:	ddee      	ble.n	8014060 <__sflush_r+0xb8>
 8014082:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8014084:	0032      	movs	r2, r6
 8014086:	001f      	movs	r7, r3
 8014088:	0028      	movs	r0, r5
 801408a:	9b01      	ldr	r3, [sp, #4]
 801408c:	6a21      	ldr	r1, [r4, #32]
 801408e:	47b8      	blx	r7
 8014090:	2800      	cmp	r0, #0
 8014092:	dc07      	bgt.n	80140a4 <__sflush_r+0xfc>
 8014094:	89a2      	ldrh	r2, [r4, #12]
 8014096:	2340      	movs	r3, #64	@ 0x40
 8014098:	2001      	movs	r0, #1
 801409a:	4313      	orrs	r3, r2
 801409c:	b21b      	sxth	r3, r3
 801409e:	81a3      	strh	r3, [r4, #12]
 80140a0:	4240      	negs	r0, r0
 80140a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80140a4:	9b01      	ldr	r3, [sp, #4]
 80140a6:	1836      	adds	r6, r6, r0
 80140a8:	1a1b      	subs	r3, r3, r0
 80140aa:	9301      	str	r3, [sp, #4]
 80140ac:	e7e6      	b.n	801407c <__sflush_r+0xd4>
 80140ae:	46c0      	nop			@ (mov r8, r8)
 80140b0:	20400001 	.word	0x20400001

080140b4 <_fflush_r>:
 80140b4:	690b      	ldr	r3, [r1, #16]
 80140b6:	b570      	push	{r4, r5, r6, lr}
 80140b8:	0005      	movs	r5, r0
 80140ba:	000c      	movs	r4, r1
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d102      	bne.n	80140c6 <_fflush_r+0x12>
 80140c0:	2500      	movs	r5, #0
 80140c2:	0028      	movs	r0, r5
 80140c4:	bd70      	pop	{r4, r5, r6, pc}
 80140c6:	2800      	cmp	r0, #0
 80140c8:	d004      	beq.n	80140d4 <_fflush_r+0x20>
 80140ca:	6a03      	ldr	r3, [r0, #32]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d101      	bne.n	80140d4 <_fflush_r+0x20>
 80140d0:	f7fd fc6c 	bl	80119ac <__sinit>
 80140d4:	220c      	movs	r2, #12
 80140d6:	5ea3      	ldrsh	r3, [r4, r2]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d0f1      	beq.n	80140c0 <_fflush_r+0xc>
 80140dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80140de:	07d2      	lsls	r2, r2, #31
 80140e0:	d404      	bmi.n	80140ec <_fflush_r+0x38>
 80140e2:	059b      	lsls	r3, r3, #22
 80140e4:	d402      	bmi.n	80140ec <_fflush_r+0x38>
 80140e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80140e8:	f7fd fe0d 	bl	8011d06 <__retarget_lock_acquire_recursive>
 80140ec:	0028      	movs	r0, r5
 80140ee:	0021      	movs	r1, r4
 80140f0:	f7ff ff5a 	bl	8013fa8 <__sflush_r>
 80140f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80140f6:	0005      	movs	r5, r0
 80140f8:	07db      	lsls	r3, r3, #31
 80140fa:	d4e2      	bmi.n	80140c2 <_fflush_r+0xe>
 80140fc:	89a3      	ldrh	r3, [r4, #12]
 80140fe:	059b      	lsls	r3, r3, #22
 8014100:	d4df      	bmi.n	80140c2 <_fflush_r+0xe>
 8014102:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014104:	f7fd fe00 	bl	8011d08 <__retarget_lock_release_recursive>
 8014108:	e7db      	b.n	80140c2 <_fflush_r+0xe>
	...

0801410c <fiprintf>:
 801410c:	b40e      	push	{r1, r2, r3}
 801410e:	b517      	push	{r0, r1, r2, r4, lr}
 8014110:	4c05      	ldr	r4, [pc, #20]	@ (8014128 <fiprintf+0x1c>)
 8014112:	ab05      	add	r3, sp, #20
 8014114:	cb04      	ldmia	r3!, {r2}
 8014116:	0001      	movs	r1, r0
 8014118:	6820      	ldr	r0, [r4, #0]
 801411a:	9301      	str	r3, [sp, #4]
 801411c:	f000 f8b6 	bl	801428c <_vfiprintf_r>
 8014120:	bc1e      	pop	{r1, r2, r3, r4}
 8014122:	bc08      	pop	{r3}
 8014124:	b003      	add	sp, #12
 8014126:	4718      	bx	r3
 8014128:	200001a0 	.word	0x200001a0

0801412c <memmove>:
 801412c:	b510      	push	{r4, lr}
 801412e:	4288      	cmp	r0, r1
 8014130:	d902      	bls.n	8014138 <memmove+0xc>
 8014132:	188b      	adds	r3, r1, r2
 8014134:	4298      	cmp	r0, r3
 8014136:	d308      	bcc.n	801414a <memmove+0x1e>
 8014138:	2300      	movs	r3, #0
 801413a:	429a      	cmp	r2, r3
 801413c:	d007      	beq.n	801414e <memmove+0x22>
 801413e:	5ccc      	ldrb	r4, [r1, r3]
 8014140:	54c4      	strb	r4, [r0, r3]
 8014142:	3301      	adds	r3, #1
 8014144:	e7f9      	b.n	801413a <memmove+0xe>
 8014146:	5c8b      	ldrb	r3, [r1, r2]
 8014148:	5483      	strb	r3, [r0, r2]
 801414a:	3a01      	subs	r2, #1
 801414c:	d2fb      	bcs.n	8014146 <memmove+0x1a>
 801414e:	bd10      	pop	{r4, pc}

08014150 <_sbrk_r>:
 8014150:	2300      	movs	r3, #0
 8014152:	b570      	push	{r4, r5, r6, lr}
 8014154:	4d06      	ldr	r5, [pc, #24]	@ (8014170 <_sbrk_r+0x20>)
 8014156:	0004      	movs	r4, r0
 8014158:	0008      	movs	r0, r1
 801415a:	602b      	str	r3, [r5, #0]
 801415c:	f7f8 f822 	bl	800c1a4 <_sbrk>
 8014160:	1c43      	adds	r3, r0, #1
 8014162:	d103      	bne.n	801416c <_sbrk_r+0x1c>
 8014164:	682b      	ldr	r3, [r5, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d000      	beq.n	801416c <_sbrk_r+0x1c>
 801416a:	6023      	str	r3, [r4, #0]
 801416c:	bd70      	pop	{r4, r5, r6, pc}
 801416e:	46c0      	nop			@ (mov r8, r8)
 8014170:	20000608 	.word	0x20000608

08014174 <abort>:
 8014174:	2006      	movs	r0, #6
 8014176:	b510      	push	{r4, lr}
 8014178:	f000 fa6e 	bl	8014658 <raise>
 801417c:	2001      	movs	r0, #1
 801417e:	f7f7 ff9e 	bl	800c0be <_exit>

08014182 <_calloc_r>:
 8014182:	b570      	push	{r4, r5, r6, lr}
 8014184:	0c0b      	lsrs	r3, r1, #16
 8014186:	0c15      	lsrs	r5, r2, #16
 8014188:	2b00      	cmp	r3, #0
 801418a:	d11e      	bne.n	80141ca <_calloc_r+0x48>
 801418c:	2d00      	cmp	r5, #0
 801418e:	d10c      	bne.n	80141aa <_calloc_r+0x28>
 8014190:	b289      	uxth	r1, r1
 8014192:	b294      	uxth	r4, r2
 8014194:	434c      	muls	r4, r1
 8014196:	0021      	movs	r1, r4
 8014198:	f7ff f836 	bl	8013208 <_malloc_r>
 801419c:	1e05      	subs	r5, r0, #0
 801419e:	d01b      	beq.n	80141d8 <_calloc_r+0x56>
 80141a0:	0022      	movs	r2, r4
 80141a2:	2100      	movs	r1, #0
 80141a4:	f7fd fcb8 	bl	8011b18 <memset>
 80141a8:	e016      	b.n	80141d8 <_calloc_r+0x56>
 80141aa:	1c2b      	adds	r3, r5, #0
 80141ac:	1c0c      	adds	r4, r1, #0
 80141ae:	b289      	uxth	r1, r1
 80141b0:	b292      	uxth	r2, r2
 80141b2:	434a      	muls	r2, r1
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	b2a1      	uxth	r1, r4
 80141b8:	4359      	muls	r1, r3
 80141ba:	0c14      	lsrs	r4, r2, #16
 80141bc:	190c      	adds	r4, r1, r4
 80141be:	0c23      	lsrs	r3, r4, #16
 80141c0:	d107      	bne.n	80141d2 <_calloc_r+0x50>
 80141c2:	0424      	lsls	r4, r4, #16
 80141c4:	b292      	uxth	r2, r2
 80141c6:	4314      	orrs	r4, r2
 80141c8:	e7e5      	b.n	8014196 <_calloc_r+0x14>
 80141ca:	2d00      	cmp	r5, #0
 80141cc:	d101      	bne.n	80141d2 <_calloc_r+0x50>
 80141ce:	1c14      	adds	r4, r2, #0
 80141d0:	e7ed      	b.n	80141ae <_calloc_r+0x2c>
 80141d2:	230c      	movs	r3, #12
 80141d4:	2500      	movs	r5, #0
 80141d6:	6003      	str	r3, [r0, #0]
 80141d8:	0028      	movs	r0, r5
 80141da:	bd70      	pop	{r4, r5, r6, pc}

080141dc <_realloc_r>:
 80141dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141de:	0006      	movs	r6, r0
 80141e0:	000c      	movs	r4, r1
 80141e2:	0015      	movs	r5, r2
 80141e4:	2900      	cmp	r1, #0
 80141e6:	d105      	bne.n	80141f4 <_realloc_r+0x18>
 80141e8:	0011      	movs	r1, r2
 80141ea:	f7ff f80d 	bl	8013208 <_malloc_r>
 80141ee:	0004      	movs	r4, r0
 80141f0:	0020      	movs	r0, r4
 80141f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80141f4:	2a00      	cmp	r2, #0
 80141f6:	d103      	bne.n	8014200 <_realloc_r+0x24>
 80141f8:	f7fe fc36 	bl	8012a68 <_free_r>
 80141fc:	002c      	movs	r4, r5
 80141fe:	e7f7      	b.n	80141f0 <_realloc_r+0x14>
 8014200:	f000 fa4a 	bl	8014698 <_malloc_usable_size_r>
 8014204:	0007      	movs	r7, r0
 8014206:	4285      	cmp	r5, r0
 8014208:	d802      	bhi.n	8014210 <_realloc_r+0x34>
 801420a:	0843      	lsrs	r3, r0, #1
 801420c:	42ab      	cmp	r3, r5
 801420e:	d3ef      	bcc.n	80141f0 <_realloc_r+0x14>
 8014210:	0029      	movs	r1, r5
 8014212:	0030      	movs	r0, r6
 8014214:	f7fe fff8 	bl	8013208 <_malloc_r>
 8014218:	9001      	str	r0, [sp, #4]
 801421a:	2800      	cmp	r0, #0
 801421c:	d101      	bne.n	8014222 <_realloc_r+0x46>
 801421e:	9c01      	ldr	r4, [sp, #4]
 8014220:	e7e6      	b.n	80141f0 <_realloc_r+0x14>
 8014222:	002a      	movs	r2, r5
 8014224:	42bd      	cmp	r5, r7
 8014226:	d900      	bls.n	801422a <_realloc_r+0x4e>
 8014228:	003a      	movs	r2, r7
 801422a:	0021      	movs	r1, r4
 801422c:	9801      	ldr	r0, [sp, #4]
 801422e:	f7fd fd77 	bl	8011d20 <memcpy>
 8014232:	0021      	movs	r1, r4
 8014234:	0030      	movs	r0, r6
 8014236:	f7fe fc17 	bl	8012a68 <_free_r>
 801423a:	e7f0      	b.n	801421e <_realloc_r+0x42>

0801423c <__sfputc_r>:
 801423c:	6893      	ldr	r3, [r2, #8]
 801423e:	b510      	push	{r4, lr}
 8014240:	3b01      	subs	r3, #1
 8014242:	6093      	str	r3, [r2, #8]
 8014244:	2b00      	cmp	r3, #0
 8014246:	da04      	bge.n	8014252 <__sfputc_r+0x16>
 8014248:	6994      	ldr	r4, [r2, #24]
 801424a:	42a3      	cmp	r3, r4
 801424c:	db07      	blt.n	801425e <__sfputc_r+0x22>
 801424e:	290a      	cmp	r1, #10
 8014250:	d005      	beq.n	801425e <__sfputc_r+0x22>
 8014252:	6813      	ldr	r3, [r2, #0]
 8014254:	1c58      	adds	r0, r3, #1
 8014256:	6010      	str	r0, [r2, #0]
 8014258:	7019      	strb	r1, [r3, #0]
 801425a:	0008      	movs	r0, r1
 801425c:	bd10      	pop	{r4, pc}
 801425e:	f000 f931 	bl	80144c4 <__swbuf_r>
 8014262:	0001      	movs	r1, r0
 8014264:	e7f9      	b.n	801425a <__sfputc_r+0x1e>

08014266 <__sfputs_r>:
 8014266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014268:	0006      	movs	r6, r0
 801426a:	000f      	movs	r7, r1
 801426c:	0014      	movs	r4, r2
 801426e:	18d5      	adds	r5, r2, r3
 8014270:	42ac      	cmp	r4, r5
 8014272:	d101      	bne.n	8014278 <__sfputs_r+0x12>
 8014274:	2000      	movs	r0, #0
 8014276:	e007      	b.n	8014288 <__sfputs_r+0x22>
 8014278:	7821      	ldrb	r1, [r4, #0]
 801427a:	003a      	movs	r2, r7
 801427c:	0030      	movs	r0, r6
 801427e:	f7ff ffdd 	bl	801423c <__sfputc_r>
 8014282:	3401      	adds	r4, #1
 8014284:	1c43      	adds	r3, r0, #1
 8014286:	d1f3      	bne.n	8014270 <__sfputs_r+0xa>
 8014288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801428c <_vfiprintf_r>:
 801428c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801428e:	b0a1      	sub	sp, #132	@ 0x84
 8014290:	000f      	movs	r7, r1
 8014292:	0015      	movs	r5, r2
 8014294:	001e      	movs	r6, r3
 8014296:	9003      	str	r0, [sp, #12]
 8014298:	2800      	cmp	r0, #0
 801429a:	d004      	beq.n	80142a6 <_vfiprintf_r+0x1a>
 801429c:	6a03      	ldr	r3, [r0, #32]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d101      	bne.n	80142a6 <_vfiprintf_r+0x1a>
 80142a2:	f7fd fb83 	bl	80119ac <__sinit>
 80142a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80142a8:	07db      	lsls	r3, r3, #31
 80142aa:	d405      	bmi.n	80142b8 <_vfiprintf_r+0x2c>
 80142ac:	89bb      	ldrh	r3, [r7, #12]
 80142ae:	059b      	lsls	r3, r3, #22
 80142b0:	d402      	bmi.n	80142b8 <_vfiprintf_r+0x2c>
 80142b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80142b4:	f7fd fd27 	bl	8011d06 <__retarget_lock_acquire_recursive>
 80142b8:	89bb      	ldrh	r3, [r7, #12]
 80142ba:	071b      	lsls	r3, r3, #28
 80142bc:	d502      	bpl.n	80142c4 <_vfiprintf_r+0x38>
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d113      	bne.n	80142ec <_vfiprintf_r+0x60>
 80142c4:	0039      	movs	r1, r7
 80142c6:	9803      	ldr	r0, [sp, #12]
 80142c8:	f000 f93e 	bl	8014548 <__swsetup_r>
 80142cc:	2800      	cmp	r0, #0
 80142ce:	d00d      	beq.n	80142ec <_vfiprintf_r+0x60>
 80142d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80142d2:	07db      	lsls	r3, r3, #31
 80142d4:	d503      	bpl.n	80142de <_vfiprintf_r+0x52>
 80142d6:	2001      	movs	r0, #1
 80142d8:	4240      	negs	r0, r0
 80142da:	b021      	add	sp, #132	@ 0x84
 80142dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142de:	89bb      	ldrh	r3, [r7, #12]
 80142e0:	059b      	lsls	r3, r3, #22
 80142e2:	d4f8      	bmi.n	80142d6 <_vfiprintf_r+0x4a>
 80142e4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80142e6:	f7fd fd0f 	bl	8011d08 <__retarget_lock_release_recursive>
 80142ea:	e7f4      	b.n	80142d6 <_vfiprintf_r+0x4a>
 80142ec:	2300      	movs	r3, #0
 80142ee:	ac08      	add	r4, sp, #32
 80142f0:	6163      	str	r3, [r4, #20]
 80142f2:	3320      	adds	r3, #32
 80142f4:	7663      	strb	r3, [r4, #25]
 80142f6:	3310      	adds	r3, #16
 80142f8:	76a3      	strb	r3, [r4, #26]
 80142fa:	9607      	str	r6, [sp, #28]
 80142fc:	002e      	movs	r6, r5
 80142fe:	7833      	ldrb	r3, [r6, #0]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d001      	beq.n	8014308 <_vfiprintf_r+0x7c>
 8014304:	2b25      	cmp	r3, #37	@ 0x25
 8014306:	d148      	bne.n	801439a <_vfiprintf_r+0x10e>
 8014308:	1b73      	subs	r3, r6, r5
 801430a:	9305      	str	r3, [sp, #20]
 801430c:	42ae      	cmp	r6, r5
 801430e:	d00b      	beq.n	8014328 <_vfiprintf_r+0x9c>
 8014310:	002a      	movs	r2, r5
 8014312:	0039      	movs	r1, r7
 8014314:	9803      	ldr	r0, [sp, #12]
 8014316:	f7ff ffa6 	bl	8014266 <__sfputs_r>
 801431a:	3001      	adds	r0, #1
 801431c:	d100      	bne.n	8014320 <_vfiprintf_r+0x94>
 801431e:	e0ae      	b.n	801447e <_vfiprintf_r+0x1f2>
 8014320:	6963      	ldr	r3, [r4, #20]
 8014322:	9a05      	ldr	r2, [sp, #20]
 8014324:	189b      	adds	r3, r3, r2
 8014326:	6163      	str	r3, [r4, #20]
 8014328:	7833      	ldrb	r3, [r6, #0]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d100      	bne.n	8014330 <_vfiprintf_r+0xa4>
 801432e:	e0a6      	b.n	801447e <_vfiprintf_r+0x1f2>
 8014330:	2201      	movs	r2, #1
 8014332:	2300      	movs	r3, #0
 8014334:	4252      	negs	r2, r2
 8014336:	6062      	str	r2, [r4, #4]
 8014338:	a904      	add	r1, sp, #16
 801433a:	3254      	adds	r2, #84	@ 0x54
 801433c:	1852      	adds	r2, r2, r1
 801433e:	1c75      	adds	r5, r6, #1
 8014340:	6023      	str	r3, [r4, #0]
 8014342:	60e3      	str	r3, [r4, #12]
 8014344:	60a3      	str	r3, [r4, #8]
 8014346:	7013      	strb	r3, [r2, #0]
 8014348:	65a3      	str	r3, [r4, #88]	@ 0x58
 801434a:	4b59      	ldr	r3, [pc, #356]	@ (80144b0 <_vfiprintf_r+0x224>)
 801434c:	2205      	movs	r2, #5
 801434e:	0018      	movs	r0, r3
 8014350:	7829      	ldrb	r1, [r5, #0]
 8014352:	9305      	str	r3, [sp, #20]
 8014354:	f7fd fcd9 	bl	8011d0a <memchr>
 8014358:	1c6e      	adds	r6, r5, #1
 801435a:	2800      	cmp	r0, #0
 801435c:	d11f      	bne.n	801439e <_vfiprintf_r+0x112>
 801435e:	6822      	ldr	r2, [r4, #0]
 8014360:	06d3      	lsls	r3, r2, #27
 8014362:	d504      	bpl.n	801436e <_vfiprintf_r+0xe2>
 8014364:	2353      	movs	r3, #83	@ 0x53
 8014366:	a904      	add	r1, sp, #16
 8014368:	185b      	adds	r3, r3, r1
 801436a:	2120      	movs	r1, #32
 801436c:	7019      	strb	r1, [r3, #0]
 801436e:	0713      	lsls	r3, r2, #28
 8014370:	d504      	bpl.n	801437c <_vfiprintf_r+0xf0>
 8014372:	2353      	movs	r3, #83	@ 0x53
 8014374:	a904      	add	r1, sp, #16
 8014376:	185b      	adds	r3, r3, r1
 8014378:	212b      	movs	r1, #43	@ 0x2b
 801437a:	7019      	strb	r1, [r3, #0]
 801437c:	782b      	ldrb	r3, [r5, #0]
 801437e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014380:	d016      	beq.n	80143b0 <_vfiprintf_r+0x124>
 8014382:	002e      	movs	r6, r5
 8014384:	2100      	movs	r1, #0
 8014386:	200a      	movs	r0, #10
 8014388:	68e3      	ldr	r3, [r4, #12]
 801438a:	7832      	ldrb	r2, [r6, #0]
 801438c:	1c75      	adds	r5, r6, #1
 801438e:	3a30      	subs	r2, #48	@ 0x30
 8014390:	2a09      	cmp	r2, #9
 8014392:	d950      	bls.n	8014436 <_vfiprintf_r+0x1aa>
 8014394:	2900      	cmp	r1, #0
 8014396:	d111      	bne.n	80143bc <_vfiprintf_r+0x130>
 8014398:	e017      	b.n	80143ca <_vfiprintf_r+0x13e>
 801439a:	3601      	adds	r6, #1
 801439c:	e7af      	b.n	80142fe <_vfiprintf_r+0x72>
 801439e:	9b05      	ldr	r3, [sp, #20]
 80143a0:	6822      	ldr	r2, [r4, #0]
 80143a2:	1ac0      	subs	r0, r0, r3
 80143a4:	2301      	movs	r3, #1
 80143a6:	4083      	lsls	r3, r0
 80143a8:	4313      	orrs	r3, r2
 80143aa:	0035      	movs	r5, r6
 80143ac:	6023      	str	r3, [r4, #0]
 80143ae:	e7cc      	b.n	801434a <_vfiprintf_r+0xbe>
 80143b0:	9b07      	ldr	r3, [sp, #28]
 80143b2:	1d19      	adds	r1, r3, #4
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	9107      	str	r1, [sp, #28]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	db01      	blt.n	80143c0 <_vfiprintf_r+0x134>
 80143bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80143be:	e004      	b.n	80143ca <_vfiprintf_r+0x13e>
 80143c0:	425b      	negs	r3, r3
 80143c2:	60e3      	str	r3, [r4, #12]
 80143c4:	2302      	movs	r3, #2
 80143c6:	4313      	orrs	r3, r2
 80143c8:	6023      	str	r3, [r4, #0]
 80143ca:	7833      	ldrb	r3, [r6, #0]
 80143cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80143ce:	d10c      	bne.n	80143ea <_vfiprintf_r+0x15e>
 80143d0:	7873      	ldrb	r3, [r6, #1]
 80143d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80143d4:	d134      	bne.n	8014440 <_vfiprintf_r+0x1b4>
 80143d6:	9b07      	ldr	r3, [sp, #28]
 80143d8:	3602      	adds	r6, #2
 80143da:	1d1a      	adds	r2, r3, #4
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	9207      	str	r2, [sp, #28]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	da01      	bge.n	80143e8 <_vfiprintf_r+0x15c>
 80143e4:	2301      	movs	r3, #1
 80143e6:	425b      	negs	r3, r3
 80143e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80143ea:	4d32      	ldr	r5, [pc, #200]	@ (80144b4 <_vfiprintf_r+0x228>)
 80143ec:	2203      	movs	r2, #3
 80143ee:	0028      	movs	r0, r5
 80143f0:	7831      	ldrb	r1, [r6, #0]
 80143f2:	f7fd fc8a 	bl	8011d0a <memchr>
 80143f6:	2800      	cmp	r0, #0
 80143f8:	d006      	beq.n	8014408 <_vfiprintf_r+0x17c>
 80143fa:	2340      	movs	r3, #64	@ 0x40
 80143fc:	1b40      	subs	r0, r0, r5
 80143fe:	4083      	lsls	r3, r0
 8014400:	6822      	ldr	r2, [r4, #0]
 8014402:	3601      	adds	r6, #1
 8014404:	4313      	orrs	r3, r2
 8014406:	6023      	str	r3, [r4, #0]
 8014408:	7831      	ldrb	r1, [r6, #0]
 801440a:	2206      	movs	r2, #6
 801440c:	482a      	ldr	r0, [pc, #168]	@ (80144b8 <_vfiprintf_r+0x22c>)
 801440e:	1c75      	adds	r5, r6, #1
 8014410:	7621      	strb	r1, [r4, #24]
 8014412:	f7fd fc7a 	bl	8011d0a <memchr>
 8014416:	2800      	cmp	r0, #0
 8014418:	d040      	beq.n	801449c <_vfiprintf_r+0x210>
 801441a:	4b28      	ldr	r3, [pc, #160]	@ (80144bc <_vfiprintf_r+0x230>)
 801441c:	2b00      	cmp	r3, #0
 801441e:	d122      	bne.n	8014466 <_vfiprintf_r+0x1da>
 8014420:	2207      	movs	r2, #7
 8014422:	9b07      	ldr	r3, [sp, #28]
 8014424:	3307      	adds	r3, #7
 8014426:	4393      	bics	r3, r2
 8014428:	3308      	adds	r3, #8
 801442a:	9307      	str	r3, [sp, #28]
 801442c:	6963      	ldr	r3, [r4, #20]
 801442e:	9a04      	ldr	r2, [sp, #16]
 8014430:	189b      	adds	r3, r3, r2
 8014432:	6163      	str	r3, [r4, #20]
 8014434:	e762      	b.n	80142fc <_vfiprintf_r+0x70>
 8014436:	4343      	muls	r3, r0
 8014438:	002e      	movs	r6, r5
 801443a:	2101      	movs	r1, #1
 801443c:	189b      	adds	r3, r3, r2
 801443e:	e7a4      	b.n	801438a <_vfiprintf_r+0xfe>
 8014440:	2300      	movs	r3, #0
 8014442:	200a      	movs	r0, #10
 8014444:	0019      	movs	r1, r3
 8014446:	3601      	adds	r6, #1
 8014448:	6063      	str	r3, [r4, #4]
 801444a:	7832      	ldrb	r2, [r6, #0]
 801444c:	1c75      	adds	r5, r6, #1
 801444e:	3a30      	subs	r2, #48	@ 0x30
 8014450:	2a09      	cmp	r2, #9
 8014452:	d903      	bls.n	801445c <_vfiprintf_r+0x1d0>
 8014454:	2b00      	cmp	r3, #0
 8014456:	d0c8      	beq.n	80143ea <_vfiprintf_r+0x15e>
 8014458:	9109      	str	r1, [sp, #36]	@ 0x24
 801445a:	e7c6      	b.n	80143ea <_vfiprintf_r+0x15e>
 801445c:	4341      	muls	r1, r0
 801445e:	002e      	movs	r6, r5
 8014460:	2301      	movs	r3, #1
 8014462:	1889      	adds	r1, r1, r2
 8014464:	e7f1      	b.n	801444a <_vfiprintf_r+0x1be>
 8014466:	aa07      	add	r2, sp, #28
 8014468:	9200      	str	r2, [sp, #0]
 801446a:	0021      	movs	r1, r4
 801446c:	003a      	movs	r2, r7
 801446e:	4b14      	ldr	r3, [pc, #80]	@ (80144c0 <_vfiprintf_r+0x234>)
 8014470:	9803      	ldr	r0, [sp, #12]
 8014472:	f7fc fe51 	bl	8011118 <_printf_float>
 8014476:	9004      	str	r0, [sp, #16]
 8014478:	9b04      	ldr	r3, [sp, #16]
 801447a:	3301      	adds	r3, #1
 801447c:	d1d6      	bne.n	801442c <_vfiprintf_r+0x1a0>
 801447e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014480:	07db      	lsls	r3, r3, #31
 8014482:	d405      	bmi.n	8014490 <_vfiprintf_r+0x204>
 8014484:	89bb      	ldrh	r3, [r7, #12]
 8014486:	059b      	lsls	r3, r3, #22
 8014488:	d402      	bmi.n	8014490 <_vfiprintf_r+0x204>
 801448a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801448c:	f7fd fc3c 	bl	8011d08 <__retarget_lock_release_recursive>
 8014490:	89bb      	ldrh	r3, [r7, #12]
 8014492:	065b      	lsls	r3, r3, #25
 8014494:	d500      	bpl.n	8014498 <_vfiprintf_r+0x20c>
 8014496:	e71e      	b.n	80142d6 <_vfiprintf_r+0x4a>
 8014498:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801449a:	e71e      	b.n	80142da <_vfiprintf_r+0x4e>
 801449c:	aa07      	add	r2, sp, #28
 801449e:	9200      	str	r2, [sp, #0]
 80144a0:	0021      	movs	r1, r4
 80144a2:	003a      	movs	r2, r7
 80144a4:	4b06      	ldr	r3, [pc, #24]	@ (80144c0 <_vfiprintf_r+0x234>)
 80144a6:	9803      	ldr	r0, [sp, #12]
 80144a8:	f7fd f8e4 	bl	8011674 <_printf_i>
 80144ac:	e7e3      	b.n	8014476 <_vfiprintf_r+0x1ea>
 80144ae:	46c0      	nop			@ (mov r8, r8)
 80144b0:	08017dfa 	.word	0x08017dfa
 80144b4:	08017e00 	.word	0x08017e00
 80144b8:	08017e04 	.word	0x08017e04
 80144bc:	08011119 	.word	0x08011119
 80144c0:	08014267 	.word	0x08014267

080144c4 <__swbuf_r>:
 80144c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144c6:	0006      	movs	r6, r0
 80144c8:	000d      	movs	r5, r1
 80144ca:	0014      	movs	r4, r2
 80144cc:	2800      	cmp	r0, #0
 80144ce:	d004      	beq.n	80144da <__swbuf_r+0x16>
 80144d0:	6a03      	ldr	r3, [r0, #32]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d101      	bne.n	80144da <__swbuf_r+0x16>
 80144d6:	f7fd fa69 	bl	80119ac <__sinit>
 80144da:	69a3      	ldr	r3, [r4, #24]
 80144dc:	60a3      	str	r3, [r4, #8]
 80144de:	89a3      	ldrh	r3, [r4, #12]
 80144e0:	071b      	lsls	r3, r3, #28
 80144e2:	d502      	bpl.n	80144ea <__swbuf_r+0x26>
 80144e4:	6923      	ldr	r3, [r4, #16]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d109      	bne.n	80144fe <__swbuf_r+0x3a>
 80144ea:	0021      	movs	r1, r4
 80144ec:	0030      	movs	r0, r6
 80144ee:	f000 f82b 	bl	8014548 <__swsetup_r>
 80144f2:	2800      	cmp	r0, #0
 80144f4:	d003      	beq.n	80144fe <__swbuf_r+0x3a>
 80144f6:	2501      	movs	r5, #1
 80144f8:	426d      	negs	r5, r5
 80144fa:	0028      	movs	r0, r5
 80144fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144fe:	6923      	ldr	r3, [r4, #16]
 8014500:	6820      	ldr	r0, [r4, #0]
 8014502:	b2ef      	uxtb	r7, r5
 8014504:	1ac0      	subs	r0, r0, r3
 8014506:	6963      	ldr	r3, [r4, #20]
 8014508:	b2ed      	uxtb	r5, r5
 801450a:	4283      	cmp	r3, r0
 801450c:	dc05      	bgt.n	801451a <__swbuf_r+0x56>
 801450e:	0021      	movs	r1, r4
 8014510:	0030      	movs	r0, r6
 8014512:	f7ff fdcf 	bl	80140b4 <_fflush_r>
 8014516:	2800      	cmp	r0, #0
 8014518:	d1ed      	bne.n	80144f6 <__swbuf_r+0x32>
 801451a:	68a3      	ldr	r3, [r4, #8]
 801451c:	3001      	adds	r0, #1
 801451e:	3b01      	subs	r3, #1
 8014520:	60a3      	str	r3, [r4, #8]
 8014522:	6823      	ldr	r3, [r4, #0]
 8014524:	1c5a      	adds	r2, r3, #1
 8014526:	6022      	str	r2, [r4, #0]
 8014528:	701f      	strb	r7, [r3, #0]
 801452a:	6963      	ldr	r3, [r4, #20]
 801452c:	4283      	cmp	r3, r0
 801452e:	d004      	beq.n	801453a <__swbuf_r+0x76>
 8014530:	89a3      	ldrh	r3, [r4, #12]
 8014532:	07db      	lsls	r3, r3, #31
 8014534:	d5e1      	bpl.n	80144fa <__swbuf_r+0x36>
 8014536:	2d0a      	cmp	r5, #10
 8014538:	d1df      	bne.n	80144fa <__swbuf_r+0x36>
 801453a:	0021      	movs	r1, r4
 801453c:	0030      	movs	r0, r6
 801453e:	f7ff fdb9 	bl	80140b4 <_fflush_r>
 8014542:	2800      	cmp	r0, #0
 8014544:	d0d9      	beq.n	80144fa <__swbuf_r+0x36>
 8014546:	e7d6      	b.n	80144f6 <__swbuf_r+0x32>

08014548 <__swsetup_r>:
 8014548:	4b2d      	ldr	r3, [pc, #180]	@ (8014600 <__swsetup_r+0xb8>)
 801454a:	b570      	push	{r4, r5, r6, lr}
 801454c:	0005      	movs	r5, r0
 801454e:	6818      	ldr	r0, [r3, #0]
 8014550:	000c      	movs	r4, r1
 8014552:	2800      	cmp	r0, #0
 8014554:	d004      	beq.n	8014560 <__swsetup_r+0x18>
 8014556:	6a03      	ldr	r3, [r0, #32]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d101      	bne.n	8014560 <__swsetup_r+0x18>
 801455c:	f7fd fa26 	bl	80119ac <__sinit>
 8014560:	220c      	movs	r2, #12
 8014562:	5ea3      	ldrsh	r3, [r4, r2]
 8014564:	071a      	lsls	r2, r3, #28
 8014566:	d423      	bmi.n	80145b0 <__swsetup_r+0x68>
 8014568:	06da      	lsls	r2, r3, #27
 801456a:	d407      	bmi.n	801457c <__swsetup_r+0x34>
 801456c:	2209      	movs	r2, #9
 801456e:	602a      	str	r2, [r5, #0]
 8014570:	2240      	movs	r2, #64	@ 0x40
 8014572:	2001      	movs	r0, #1
 8014574:	4313      	orrs	r3, r2
 8014576:	81a3      	strh	r3, [r4, #12]
 8014578:	4240      	negs	r0, r0
 801457a:	e03a      	b.n	80145f2 <__swsetup_r+0xaa>
 801457c:	075b      	lsls	r3, r3, #29
 801457e:	d513      	bpl.n	80145a8 <__swsetup_r+0x60>
 8014580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014582:	2900      	cmp	r1, #0
 8014584:	d008      	beq.n	8014598 <__swsetup_r+0x50>
 8014586:	0023      	movs	r3, r4
 8014588:	3344      	adds	r3, #68	@ 0x44
 801458a:	4299      	cmp	r1, r3
 801458c:	d002      	beq.n	8014594 <__swsetup_r+0x4c>
 801458e:	0028      	movs	r0, r5
 8014590:	f7fe fa6a 	bl	8012a68 <_free_r>
 8014594:	2300      	movs	r3, #0
 8014596:	6363      	str	r3, [r4, #52]	@ 0x34
 8014598:	2224      	movs	r2, #36	@ 0x24
 801459a:	89a3      	ldrh	r3, [r4, #12]
 801459c:	4393      	bics	r3, r2
 801459e:	81a3      	strh	r3, [r4, #12]
 80145a0:	2300      	movs	r3, #0
 80145a2:	6063      	str	r3, [r4, #4]
 80145a4:	6923      	ldr	r3, [r4, #16]
 80145a6:	6023      	str	r3, [r4, #0]
 80145a8:	2308      	movs	r3, #8
 80145aa:	89a2      	ldrh	r2, [r4, #12]
 80145ac:	4313      	orrs	r3, r2
 80145ae:	81a3      	strh	r3, [r4, #12]
 80145b0:	6923      	ldr	r3, [r4, #16]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d10b      	bne.n	80145ce <__swsetup_r+0x86>
 80145b6:	21a0      	movs	r1, #160	@ 0xa0
 80145b8:	2280      	movs	r2, #128	@ 0x80
 80145ba:	89a3      	ldrh	r3, [r4, #12]
 80145bc:	0089      	lsls	r1, r1, #2
 80145be:	0092      	lsls	r2, r2, #2
 80145c0:	400b      	ands	r3, r1
 80145c2:	4293      	cmp	r3, r2
 80145c4:	d003      	beq.n	80145ce <__swsetup_r+0x86>
 80145c6:	0021      	movs	r1, r4
 80145c8:	0028      	movs	r0, r5
 80145ca:	f000 f897 	bl	80146fc <__smakebuf_r>
 80145ce:	220c      	movs	r2, #12
 80145d0:	5ea3      	ldrsh	r3, [r4, r2]
 80145d2:	2101      	movs	r1, #1
 80145d4:	001a      	movs	r2, r3
 80145d6:	400a      	ands	r2, r1
 80145d8:	420b      	tst	r3, r1
 80145da:	d00b      	beq.n	80145f4 <__swsetup_r+0xac>
 80145dc:	2200      	movs	r2, #0
 80145de:	60a2      	str	r2, [r4, #8]
 80145e0:	6962      	ldr	r2, [r4, #20]
 80145e2:	4252      	negs	r2, r2
 80145e4:	61a2      	str	r2, [r4, #24]
 80145e6:	2000      	movs	r0, #0
 80145e8:	6922      	ldr	r2, [r4, #16]
 80145ea:	4282      	cmp	r2, r0
 80145ec:	d101      	bne.n	80145f2 <__swsetup_r+0xaa>
 80145ee:	061a      	lsls	r2, r3, #24
 80145f0:	d4be      	bmi.n	8014570 <__swsetup_r+0x28>
 80145f2:	bd70      	pop	{r4, r5, r6, pc}
 80145f4:	0799      	lsls	r1, r3, #30
 80145f6:	d400      	bmi.n	80145fa <__swsetup_r+0xb2>
 80145f8:	6962      	ldr	r2, [r4, #20]
 80145fa:	60a2      	str	r2, [r4, #8]
 80145fc:	e7f3      	b.n	80145e6 <__swsetup_r+0x9e>
 80145fe:	46c0      	nop			@ (mov r8, r8)
 8014600:	200001a0 	.word	0x200001a0

08014604 <_raise_r>:
 8014604:	b570      	push	{r4, r5, r6, lr}
 8014606:	0004      	movs	r4, r0
 8014608:	000d      	movs	r5, r1
 801460a:	291f      	cmp	r1, #31
 801460c:	d904      	bls.n	8014618 <_raise_r+0x14>
 801460e:	2316      	movs	r3, #22
 8014610:	6003      	str	r3, [r0, #0]
 8014612:	2001      	movs	r0, #1
 8014614:	4240      	negs	r0, r0
 8014616:	bd70      	pop	{r4, r5, r6, pc}
 8014618:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801461a:	2b00      	cmp	r3, #0
 801461c:	d004      	beq.n	8014628 <_raise_r+0x24>
 801461e:	008a      	lsls	r2, r1, #2
 8014620:	189b      	adds	r3, r3, r2
 8014622:	681a      	ldr	r2, [r3, #0]
 8014624:	2a00      	cmp	r2, #0
 8014626:	d108      	bne.n	801463a <_raise_r+0x36>
 8014628:	0020      	movs	r0, r4
 801462a:	f000 f831 	bl	8014690 <_getpid_r>
 801462e:	002a      	movs	r2, r5
 8014630:	0001      	movs	r1, r0
 8014632:	0020      	movs	r0, r4
 8014634:	f000 f81a 	bl	801466c <_kill_r>
 8014638:	e7ed      	b.n	8014616 <_raise_r+0x12>
 801463a:	2a01      	cmp	r2, #1
 801463c:	d009      	beq.n	8014652 <_raise_r+0x4e>
 801463e:	1c51      	adds	r1, r2, #1
 8014640:	d103      	bne.n	801464a <_raise_r+0x46>
 8014642:	2316      	movs	r3, #22
 8014644:	6003      	str	r3, [r0, #0]
 8014646:	2001      	movs	r0, #1
 8014648:	e7e5      	b.n	8014616 <_raise_r+0x12>
 801464a:	2100      	movs	r1, #0
 801464c:	0028      	movs	r0, r5
 801464e:	6019      	str	r1, [r3, #0]
 8014650:	4790      	blx	r2
 8014652:	2000      	movs	r0, #0
 8014654:	e7df      	b.n	8014616 <_raise_r+0x12>
	...

08014658 <raise>:
 8014658:	b510      	push	{r4, lr}
 801465a:	4b03      	ldr	r3, [pc, #12]	@ (8014668 <raise+0x10>)
 801465c:	0001      	movs	r1, r0
 801465e:	6818      	ldr	r0, [r3, #0]
 8014660:	f7ff ffd0 	bl	8014604 <_raise_r>
 8014664:	bd10      	pop	{r4, pc}
 8014666:	46c0      	nop			@ (mov r8, r8)
 8014668:	200001a0 	.word	0x200001a0

0801466c <_kill_r>:
 801466c:	2300      	movs	r3, #0
 801466e:	b570      	push	{r4, r5, r6, lr}
 8014670:	4d06      	ldr	r5, [pc, #24]	@ (801468c <_kill_r+0x20>)
 8014672:	0004      	movs	r4, r0
 8014674:	0008      	movs	r0, r1
 8014676:	0011      	movs	r1, r2
 8014678:	602b      	str	r3, [r5, #0]
 801467a:	f7f7 fd10 	bl	800c09e <_kill>
 801467e:	1c43      	adds	r3, r0, #1
 8014680:	d103      	bne.n	801468a <_kill_r+0x1e>
 8014682:	682b      	ldr	r3, [r5, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d000      	beq.n	801468a <_kill_r+0x1e>
 8014688:	6023      	str	r3, [r4, #0]
 801468a:	bd70      	pop	{r4, r5, r6, pc}
 801468c:	20000608 	.word	0x20000608

08014690 <_getpid_r>:
 8014690:	b510      	push	{r4, lr}
 8014692:	f7f7 fcfe 	bl	800c092 <_getpid>
 8014696:	bd10      	pop	{r4, pc}

08014698 <_malloc_usable_size_r>:
 8014698:	1f0b      	subs	r3, r1, #4
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	1f18      	subs	r0, r3, #4
 801469e:	2b00      	cmp	r3, #0
 80146a0:	da01      	bge.n	80146a6 <_malloc_usable_size_r+0xe>
 80146a2:	580b      	ldr	r3, [r1, r0]
 80146a4:	18c0      	adds	r0, r0, r3
 80146a6:	4770      	bx	lr

080146a8 <__swhatbuf_r>:
 80146a8:	b570      	push	{r4, r5, r6, lr}
 80146aa:	000e      	movs	r6, r1
 80146ac:	001d      	movs	r5, r3
 80146ae:	230e      	movs	r3, #14
 80146b0:	5ec9      	ldrsh	r1, [r1, r3]
 80146b2:	0014      	movs	r4, r2
 80146b4:	b096      	sub	sp, #88	@ 0x58
 80146b6:	2900      	cmp	r1, #0
 80146b8:	da0c      	bge.n	80146d4 <__swhatbuf_r+0x2c>
 80146ba:	89b2      	ldrh	r2, [r6, #12]
 80146bc:	2380      	movs	r3, #128	@ 0x80
 80146be:	0011      	movs	r1, r2
 80146c0:	4019      	ands	r1, r3
 80146c2:	421a      	tst	r2, r3
 80146c4:	d114      	bne.n	80146f0 <__swhatbuf_r+0x48>
 80146c6:	2380      	movs	r3, #128	@ 0x80
 80146c8:	00db      	lsls	r3, r3, #3
 80146ca:	2000      	movs	r0, #0
 80146cc:	6029      	str	r1, [r5, #0]
 80146ce:	6023      	str	r3, [r4, #0]
 80146d0:	b016      	add	sp, #88	@ 0x58
 80146d2:	bd70      	pop	{r4, r5, r6, pc}
 80146d4:	466a      	mov	r2, sp
 80146d6:	f000 f853 	bl	8014780 <_fstat_r>
 80146da:	2800      	cmp	r0, #0
 80146dc:	dbed      	blt.n	80146ba <__swhatbuf_r+0x12>
 80146de:	23f0      	movs	r3, #240	@ 0xf0
 80146e0:	9901      	ldr	r1, [sp, #4]
 80146e2:	021b      	lsls	r3, r3, #8
 80146e4:	4019      	ands	r1, r3
 80146e6:	4b04      	ldr	r3, [pc, #16]	@ (80146f8 <__swhatbuf_r+0x50>)
 80146e8:	18c9      	adds	r1, r1, r3
 80146ea:	424b      	negs	r3, r1
 80146ec:	4159      	adcs	r1, r3
 80146ee:	e7ea      	b.n	80146c6 <__swhatbuf_r+0x1e>
 80146f0:	2100      	movs	r1, #0
 80146f2:	2340      	movs	r3, #64	@ 0x40
 80146f4:	e7e9      	b.n	80146ca <__swhatbuf_r+0x22>
 80146f6:	46c0      	nop			@ (mov r8, r8)
 80146f8:	ffffe000 	.word	0xffffe000

080146fc <__smakebuf_r>:
 80146fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146fe:	2602      	movs	r6, #2
 8014700:	898b      	ldrh	r3, [r1, #12]
 8014702:	0005      	movs	r5, r0
 8014704:	000c      	movs	r4, r1
 8014706:	b085      	sub	sp, #20
 8014708:	4233      	tst	r3, r6
 801470a:	d007      	beq.n	801471c <__smakebuf_r+0x20>
 801470c:	0023      	movs	r3, r4
 801470e:	3347      	adds	r3, #71	@ 0x47
 8014710:	6023      	str	r3, [r4, #0]
 8014712:	6123      	str	r3, [r4, #16]
 8014714:	2301      	movs	r3, #1
 8014716:	6163      	str	r3, [r4, #20]
 8014718:	b005      	add	sp, #20
 801471a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801471c:	ab03      	add	r3, sp, #12
 801471e:	aa02      	add	r2, sp, #8
 8014720:	f7ff ffc2 	bl	80146a8 <__swhatbuf_r>
 8014724:	9f02      	ldr	r7, [sp, #8]
 8014726:	9001      	str	r0, [sp, #4]
 8014728:	0039      	movs	r1, r7
 801472a:	0028      	movs	r0, r5
 801472c:	f7fe fd6c 	bl	8013208 <_malloc_r>
 8014730:	2800      	cmp	r0, #0
 8014732:	d108      	bne.n	8014746 <__smakebuf_r+0x4a>
 8014734:	220c      	movs	r2, #12
 8014736:	5ea3      	ldrsh	r3, [r4, r2]
 8014738:	059a      	lsls	r2, r3, #22
 801473a:	d4ed      	bmi.n	8014718 <__smakebuf_r+0x1c>
 801473c:	2203      	movs	r2, #3
 801473e:	4393      	bics	r3, r2
 8014740:	431e      	orrs	r6, r3
 8014742:	81a6      	strh	r6, [r4, #12]
 8014744:	e7e2      	b.n	801470c <__smakebuf_r+0x10>
 8014746:	2380      	movs	r3, #128	@ 0x80
 8014748:	89a2      	ldrh	r2, [r4, #12]
 801474a:	6020      	str	r0, [r4, #0]
 801474c:	4313      	orrs	r3, r2
 801474e:	81a3      	strh	r3, [r4, #12]
 8014750:	9b03      	ldr	r3, [sp, #12]
 8014752:	6120      	str	r0, [r4, #16]
 8014754:	6167      	str	r7, [r4, #20]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d00c      	beq.n	8014774 <__smakebuf_r+0x78>
 801475a:	0028      	movs	r0, r5
 801475c:	230e      	movs	r3, #14
 801475e:	5ee1      	ldrsh	r1, [r4, r3]
 8014760:	f000 f820 	bl	80147a4 <_isatty_r>
 8014764:	2800      	cmp	r0, #0
 8014766:	d005      	beq.n	8014774 <__smakebuf_r+0x78>
 8014768:	2303      	movs	r3, #3
 801476a:	89a2      	ldrh	r2, [r4, #12]
 801476c:	439a      	bics	r2, r3
 801476e:	3b02      	subs	r3, #2
 8014770:	4313      	orrs	r3, r2
 8014772:	81a3      	strh	r3, [r4, #12]
 8014774:	89a3      	ldrh	r3, [r4, #12]
 8014776:	9a01      	ldr	r2, [sp, #4]
 8014778:	4313      	orrs	r3, r2
 801477a:	81a3      	strh	r3, [r4, #12]
 801477c:	e7cc      	b.n	8014718 <__smakebuf_r+0x1c>
	...

08014780 <_fstat_r>:
 8014780:	2300      	movs	r3, #0
 8014782:	b570      	push	{r4, r5, r6, lr}
 8014784:	4d06      	ldr	r5, [pc, #24]	@ (80147a0 <_fstat_r+0x20>)
 8014786:	0004      	movs	r4, r0
 8014788:	0008      	movs	r0, r1
 801478a:	0011      	movs	r1, r2
 801478c:	602b      	str	r3, [r5, #0]
 801478e:	f7f7 fce6 	bl	800c15e <_fstat>
 8014792:	1c43      	adds	r3, r0, #1
 8014794:	d103      	bne.n	801479e <_fstat_r+0x1e>
 8014796:	682b      	ldr	r3, [r5, #0]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d000      	beq.n	801479e <_fstat_r+0x1e>
 801479c:	6023      	str	r3, [r4, #0]
 801479e:	bd70      	pop	{r4, r5, r6, pc}
 80147a0:	20000608 	.word	0x20000608

080147a4 <_isatty_r>:
 80147a4:	2300      	movs	r3, #0
 80147a6:	b570      	push	{r4, r5, r6, lr}
 80147a8:	4d06      	ldr	r5, [pc, #24]	@ (80147c4 <_isatty_r+0x20>)
 80147aa:	0004      	movs	r4, r0
 80147ac:	0008      	movs	r0, r1
 80147ae:	602b      	str	r3, [r5, #0]
 80147b0:	f7f7 fce3 	bl	800c17a <_isatty>
 80147b4:	1c43      	adds	r3, r0, #1
 80147b6:	d103      	bne.n	80147c0 <_isatty_r+0x1c>
 80147b8:	682b      	ldr	r3, [r5, #0]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d000      	beq.n	80147c0 <_isatty_r+0x1c>
 80147be:	6023      	str	r3, [r4, #0]
 80147c0:	bd70      	pop	{r4, r5, r6, pc}
 80147c2:	46c0      	nop			@ (mov r8, r8)
 80147c4:	20000608 	.word	0x20000608

080147c8 <_init>:
 80147c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ca:	46c0      	nop			@ (mov r8, r8)
 80147cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147ce:	bc08      	pop	{r3}
 80147d0:	469e      	mov	lr, r3
 80147d2:	4770      	bx	lr

080147d4 <_fini>:
 80147d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d6:	46c0      	nop			@ (mov r8, r8)
 80147d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147da:	bc08      	pop	{r3}
 80147dc:	469e      	mov	lr, r3
 80147de:	4770      	bx	lr
