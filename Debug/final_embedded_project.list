
final_embedded_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800818c  0800818c  0000918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084fc  080084fc  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080084fc  080084fc  000094fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008504  08008504  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008504  08008504  00009504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008508  08008508  00009508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800850c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000060  0800856c  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  0800856c  0000a380  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011891  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002551  00000000  00000000  0001b919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b61  00000000  00000000  0001ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001910d  00000000  00000000  0001f849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135ea  00000000  00000000  00038956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d81c  00000000  00000000  0004bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e975c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb0  00000000  00000000  000e97a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000ed350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008174 	.word	0x08008174

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08008174 	.word	0x08008174

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cfrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0008      	movs	r0, r1
 8000418:	4661      	mov	r1, ip
 800041a:	e7ff      	b.n	800041c <__aeabi_cfcmpeq>

0800041c <__aeabi_cfcmpeq>:
 800041c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041e:	f000 fcaf 	bl	8000d80 <__lesf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	d401      	bmi.n	800042a <__aeabi_cfcmpeq+0xe>
 8000426:	2100      	movs	r1, #0
 8000428:	42c8      	cmn	r0, r1
 800042a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800042c <__aeabi_fcmpeq>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fc37 	bl	8000ca0 <__eqsf2>
 8000432:	4240      	negs	r0, r0
 8000434:	3001      	adds	r0, #1
 8000436:	bd10      	pop	{r4, pc}

08000438 <__aeabi_fcmplt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fca1 	bl	8000d80 <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	db01      	blt.n	8000446 <__aeabi_fcmplt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_fcmple>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fc97 	bl	8000d80 <__lesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dd01      	ble.n	800045a <__aeabi_fcmple+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)

08000460 <__aeabi_fcmpgt>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fc45 	bl	8000cf0 <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dc01      	bgt.n	800046e <__aeabi_fcmpgt+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)

08000474 <__aeabi_fcmpge>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 fc3b 	bl	8000cf0 <__gesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	da01      	bge.n	8000482 <__aeabi_fcmpge+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)

08000488 <__aeabi_uldivmod>:
 8000488:	2b00      	cmp	r3, #0
 800048a:	d111      	bne.n	80004b0 <__aeabi_uldivmod+0x28>
 800048c:	2a00      	cmp	r2, #0
 800048e:	d10f      	bne.n	80004b0 <__aeabi_uldivmod+0x28>
 8000490:	2900      	cmp	r1, #0
 8000492:	d100      	bne.n	8000496 <__aeabi_uldivmod+0xe>
 8000494:	2800      	cmp	r0, #0
 8000496:	d002      	beq.n	800049e <__aeabi_uldivmod+0x16>
 8000498:	2100      	movs	r1, #0
 800049a:	43c9      	mvns	r1, r1
 800049c:	0008      	movs	r0, r1
 800049e:	b407      	push	{r0, r1, r2}
 80004a0:	4802      	ldr	r0, [pc, #8]	@ (80004ac <__aeabi_uldivmod+0x24>)
 80004a2:	a102      	add	r1, pc, #8	@ (adr r1, 80004ac <__aeabi_uldivmod+0x24>)
 80004a4:	1840      	adds	r0, r0, r1
 80004a6:	9002      	str	r0, [sp, #8]
 80004a8:	bd03      	pop	{r0, r1, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	ffffff65 	.word	0xffffff65
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f81e 	bl	80004f8 <__udivmoddi4>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			@ (mov r8, r8)

080004c8 <__aeabi_f2uiz>:
 80004c8:	219e      	movs	r1, #158	@ 0x9e
 80004ca:	b510      	push	{r4, lr}
 80004cc:	05c9      	lsls	r1, r1, #23
 80004ce:	1c04      	adds	r4, r0, #0
 80004d0:	f7ff ffd0 	bl	8000474 <__aeabi_fcmpge>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d103      	bne.n	80004e0 <__aeabi_f2uiz+0x18>
 80004d8:	1c20      	adds	r0, r4, #0
 80004da:	f001 f857 	bl	800158c <__aeabi_f2iz>
 80004de:	bd10      	pop	{r4, pc}
 80004e0:	219e      	movs	r1, #158	@ 0x9e
 80004e2:	1c20      	adds	r0, r4, #0
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	f000 fded 	bl	80010c4 <__aeabi_fsub>
 80004ea:	f001 f84f 	bl	800158c <__aeabi_f2iz>
 80004ee:	2380      	movs	r3, #128	@ 0x80
 80004f0:	061b      	lsls	r3, r3, #24
 80004f2:	469c      	mov	ip, r3
 80004f4:	4460      	add	r0, ip
 80004f6:	e7f2      	b.n	80004de <__aeabi_f2uiz+0x16>

080004f8 <__udivmoddi4>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	4657      	mov	r7, sl
 80004fc:	464e      	mov	r6, r9
 80004fe:	4645      	mov	r5, r8
 8000500:	46de      	mov	lr, fp
 8000502:	b5e0      	push	{r5, r6, r7, lr}
 8000504:	0004      	movs	r4, r0
 8000506:	000d      	movs	r5, r1
 8000508:	4692      	mov	sl, r2
 800050a:	4699      	mov	r9, r3
 800050c:	b083      	sub	sp, #12
 800050e:	428b      	cmp	r3, r1
 8000510:	d830      	bhi.n	8000574 <__udivmoddi4+0x7c>
 8000512:	d02d      	beq.n	8000570 <__udivmoddi4+0x78>
 8000514:	4649      	mov	r1, r9
 8000516:	4650      	mov	r0, sl
 8000518:	f001 f954 	bl	80017c4 <__clzdi2>
 800051c:	0029      	movs	r1, r5
 800051e:	0006      	movs	r6, r0
 8000520:	0020      	movs	r0, r4
 8000522:	f001 f94f 	bl	80017c4 <__clzdi2>
 8000526:	1a33      	subs	r3, r6, r0
 8000528:	4698      	mov	r8, r3
 800052a:	3b20      	subs	r3, #32
 800052c:	d434      	bmi.n	8000598 <__udivmoddi4+0xa0>
 800052e:	469b      	mov	fp, r3
 8000530:	4653      	mov	r3, sl
 8000532:	465a      	mov	r2, fp
 8000534:	4093      	lsls	r3, r2
 8000536:	4642      	mov	r2, r8
 8000538:	001f      	movs	r7, r3
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	001e      	movs	r6, r3
 8000540:	42af      	cmp	r7, r5
 8000542:	d83b      	bhi.n	80005bc <__udivmoddi4+0xc4>
 8000544:	42af      	cmp	r7, r5
 8000546:	d100      	bne.n	800054a <__udivmoddi4+0x52>
 8000548:	e079      	b.n	800063e <__udivmoddi4+0x146>
 800054a:	465b      	mov	r3, fp
 800054c:	1ba4      	subs	r4, r4, r6
 800054e:	41bd      	sbcs	r5, r7
 8000550:	2b00      	cmp	r3, #0
 8000552:	da00      	bge.n	8000556 <__udivmoddi4+0x5e>
 8000554:	e076      	b.n	8000644 <__udivmoddi4+0x14c>
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2301      	movs	r3, #1
 8000560:	465a      	mov	r2, fp
 8000562:	4093      	lsls	r3, r2
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	4642      	mov	r2, r8
 800056a:	4093      	lsls	r3, r2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	e029      	b.n	80005c4 <__udivmoddi4+0xcc>
 8000570:	4282      	cmp	r2, r0
 8000572:	d9cf      	bls.n	8000514 <__udivmoddi4+0x1c>
 8000574:	2200      	movs	r2, #0
 8000576:	2300      	movs	r3, #0
 8000578:	9200      	str	r2, [sp, #0]
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <__udivmoddi4+0x8e>
 8000582:	601c      	str	r4, [r3, #0]
 8000584:	605d      	str	r5, [r3, #4]
 8000586:	9800      	ldr	r0, [sp, #0]
 8000588:	9901      	ldr	r1, [sp, #4]
 800058a:	b003      	add	sp, #12
 800058c:	bcf0      	pop	{r4, r5, r6, r7}
 800058e:	46bb      	mov	fp, r7
 8000590:	46b2      	mov	sl, r6
 8000592:	46a9      	mov	r9, r5
 8000594:	46a0      	mov	r8, r4
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000598:	4642      	mov	r2, r8
 800059a:	469b      	mov	fp, r3
 800059c:	2320      	movs	r3, #32
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	4652      	mov	r2, sl
 80005a2:	40da      	lsrs	r2, r3
 80005a4:	4641      	mov	r1, r8
 80005a6:	0013      	movs	r3, r2
 80005a8:	464a      	mov	r2, r9
 80005aa:	408a      	lsls	r2, r1
 80005ac:	0017      	movs	r7, r2
 80005ae:	4642      	mov	r2, r8
 80005b0:	431f      	orrs	r7, r3
 80005b2:	4653      	mov	r3, sl
 80005b4:	4093      	lsls	r3, r2
 80005b6:	001e      	movs	r6, r3
 80005b8:	42af      	cmp	r7, r5
 80005ba:	d9c3      	bls.n	8000544 <__udivmoddi4+0x4c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2300      	movs	r3, #0
 80005c0:	9200      	str	r2, [sp, #0]
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	4643      	mov	r3, r8
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0d8      	beq.n	800057c <__udivmoddi4+0x84>
 80005ca:	07fb      	lsls	r3, r7, #31
 80005cc:	0872      	lsrs	r2, r6, #1
 80005ce:	431a      	orrs	r2, r3
 80005d0:	4646      	mov	r6, r8
 80005d2:	087b      	lsrs	r3, r7, #1
 80005d4:	e00e      	b.n	80005f4 <__udivmoddi4+0xfc>
 80005d6:	42ab      	cmp	r3, r5
 80005d8:	d101      	bne.n	80005de <__udivmoddi4+0xe6>
 80005da:	42a2      	cmp	r2, r4
 80005dc:	d80c      	bhi.n	80005f8 <__udivmoddi4+0x100>
 80005de:	1aa4      	subs	r4, r4, r2
 80005e0:	419d      	sbcs	r5, r3
 80005e2:	2001      	movs	r0, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2100      	movs	r1, #0
 80005ea:	3e01      	subs	r6, #1
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	414d      	adcs	r5, r1
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d006      	beq.n	8000602 <__udivmoddi4+0x10a>
 80005f4:	42ab      	cmp	r3, r5
 80005f6:	d9ee      	bls.n	80005d6 <__udivmoddi4+0xde>
 80005f8:	3e01      	subs	r6, #1
 80005fa:	1924      	adds	r4, r4, r4
 80005fc:	416d      	adcs	r5, r5
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d1f8      	bne.n	80005f4 <__udivmoddi4+0xfc>
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	465b      	mov	r3, fp
 8000608:	1900      	adds	r0, r0, r4
 800060a:	4169      	adcs	r1, r5
 800060c:	2b00      	cmp	r3, #0
 800060e:	db24      	blt.n	800065a <__udivmoddi4+0x162>
 8000610:	002b      	movs	r3, r5
 8000612:	465a      	mov	r2, fp
 8000614:	4644      	mov	r4, r8
 8000616:	40d3      	lsrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	db2a      	blt.n	800067c <__udivmoddi4+0x184>
 8000626:	0026      	movs	r6, r4
 8000628:	409e      	lsls	r6, r3
 800062a:	0033      	movs	r3, r6
 800062c:	0026      	movs	r6, r4
 800062e:	4647      	mov	r7, r8
 8000630:	40be      	lsls	r6, r7
 8000632:	0032      	movs	r2, r6
 8000634:	1a80      	subs	r0, r0, r2
 8000636:	4199      	sbcs	r1, r3
 8000638:	9000      	str	r0, [sp, #0]
 800063a:	9101      	str	r1, [sp, #4]
 800063c:	e79e      	b.n	800057c <__udivmoddi4+0x84>
 800063e:	42a3      	cmp	r3, r4
 8000640:	d8bc      	bhi.n	80005bc <__udivmoddi4+0xc4>
 8000642:	e782      	b.n	800054a <__udivmoddi4+0x52>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	2100      	movs	r1, #0
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	2200      	movs	r2, #0
 800064e:	9100      	str	r1, [sp, #0]
 8000650:	9201      	str	r2, [sp, #4]
 8000652:	2201      	movs	r2, #1
 8000654:	40da      	lsrs	r2, r3
 8000656:	9201      	str	r2, [sp, #4]
 8000658:	e785      	b.n	8000566 <__udivmoddi4+0x6e>
 800065a:	4642      	mov	r2, r8
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	002a      	movs	r2, r5
 8000662:	4646      	mov	r6, r8
 8000664:	409a      	lsls	r2, r3
 8000666:	0023      	movs	r3, r4
 8000668:	40f3      	lsrs	r3, r6
 800066a:	4644      	mov	r4, r8
 800066c:	4313      	orrs	r3, r2
 800066e:	002a      	movs	r2, r5
 8000670:	40e2      	lsrs	r2, r4
 8000672:	001c      	movs	r4, r3
 8000674:	465b      	mov	r3, fp
 8000676:	0015      	movs	r5, r2
 8000678:	2b00      	cmp	r3, #0
 800067a:	dad4      	bge.n	8000626 <__udivmoddi4+0x12e>
 800067c:	4642      	mov	r2, r8
 800067e:	002f      	movs	r7, r5
 8000680:	2320      	movs	r3, #32
 8000682:	0026      	movs	r6, r4
 8000684:	4097      	lsls	r7, r2
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	40de      	lsrs	r6, r3
 800068a:	003b      	movs	r3, r7
 800068c:	4333      	orrs	r3, r6
 800068e:	e7cd      	b.n	800062c <__udivmoddi4+0x134>

08000690 <__aeabi_fadd>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	024b      	lsls	r3, r1, #9
 8000694:	0a5a      	lsrs	r2, r3, #9
 8000696:	4694      	mov	ip, r2
 8000698:	004a      	lsls	r2, r1, #1
 800069a:	0fc9      	lsrs	r1, r1, #31
 800069c:	46ce      	mov	lr, r9
 800069e:	4647      	mov	r7, r8
 80006a0:	4689      	mov	r9, r1
 80006a2:	0045      	lsls	r5, r0, #1
 80006a4:	0246      	lsls	r6, r0, #9
 80006a6:	0e2d      	lsrs	r5, r5, #24
 80006a8:	0e12      	lsrs	r2, r2, #24
 80006aa:	b580      	push	{r7, lr}
 80006ac:	0999      	lsrs	r1, r3, #6
 80006ae:	0a77      	lsrs	r7, r6, #9
 80006b0:	0fc4      	lsrs	r4, r0, #31
 80006b2:	09b6      	lsrs	r6, r6, #6
 80006b4:	1aab      	subs	r3, r5, r2
 80006b6:	454c      	cmp	r4, r9
 80006b8:	d020      	beq.n	80006fc <__aeabi_fadd+0x6c>
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dd0c      	ble.n	80006d8 <__aeabi_fadd+0x48>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d134      	bne.n	800072c <__aeabi_fadd+0x9c>
 80006c2:	2900      	cmp	r1, #0
 80006c4:	d02a      	beq.n	800071c <__aeabi_fadd+0x8c>
 80006c6:	1e5a      	subs	r2, r3, #1
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x3e>
 80006cc:	e08f      	b.n	80007ee <__aeabi_fadd+0x15e>
 80006ce:	2bff      	cmp	r3, #255	@ 0xff
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fadd+0x44>
 80006d2:	e0cd      	b.n	8000870 <__aeabi_fadd+0x1e0>
 80006d4:	0013      	movs	r3, r2
 80006d6:	e02f      	b.n	8000738 <__aeabi_fadd+0xa8>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d060      	beq.n	800079e <__aeabi_fadd+0x10e>
 80006dc:	1b53      	subs	r3, r2, r5
 80006de:	2d00      	cmp	r5, #0
 80006e0:	d000      	beq.n	80006e4 <__aeabi_fadd+0x54>
 80006e2:	e0ee      	b.n	80008c2 <__aeabi_fadd+0x232>
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d100      	bne.n	80006ea <__aeabi_fadd+0x5a>
 80006e8:	e13e      	b.n	8000968 <__aeabi_fadd+0x2d8>
 80006ea:	1e5c      	subs	r4, r3, #1
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fadd+0x62>
 80006f0:	e16b      	b.n	80009ca <__aeabi_fadd+0x33a>
 80006f2:	2bff      	cmp	r3, #255	@ 0xff
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x68>
 80006f6:	e0b9      	b.n	800086c <__aeabi_fadd+0x1dc>
 80006f8:	0023      	movs	r3, r4
 80006fa:	e0e7      	b.n	80008cc <__aeabi_fadd+0x23c>
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	dc00      	bgt.n	8000702 <__aeabi_fadd+0x72>
 8000700:	e0a4      	b.n	800084c <__aeabi_fadd+0x1bc>
 8000702:	2a00      	cmp	r2, #0
 8000704:	d069      	beq.n	80007da <__aeabi_fadd+0x14a>
 8000706:	2dff      	cmp	r5, #255	@ 0xff
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x7c>
 800070a:	e0b1      	b.n	8000870 <__aeabi_fadd+0x1e0>
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	04d2      	lsls	r2, r2, #19
 8000710:	4311      	orrs	r1, r2
 8000712:	2b1b      	cmp	r3, #27
 8000714:	dc00      	bgt.n	8000718 <__aeabi_fadd+0x88>
 8000716:	e0e9      	b.n	80008ec <__aeabi_fadd+0x25c>
 8000718:	002b      	movs	r3, r5
 800071a:	3605      	adds	r6, #5
 800071c:	08f7      	lsrs	r7, r6, #3
 800071e:	2bff      	cmp	r3, #255	@ 0xff
 8000720:	d100      	bne.n	8000724 <__aeabi_fadd+0x94>
 8000722:	e0a5      	b.n	8000870 <__aeabi_fadd+0x1e0>
 8000724:	027a      	lsls	r2, r7, #9
 8000726:	0a52      	lsrs	r2, r2, #9
 8000728:	b2d8      	uxtb	r0, r3
 800072a:	e030      	b.n	800078e <__aeabi_fadd+0xfe>
 800072c:	2dff      	cmp	r5, #255	@ 0xff
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0xa2>
 8000730:	e09e      	b.n	8000870 <__aeabi_fadd+0x1e0>
 8000732:	2280      	movs	r2, #128	@ 0x80
 8000734:	04d2      	lsls	r2, r2, #19
 8000736:	4311      	orrs	r1, r2
 8000738:	2001      	movs	r0, #1
 800073a:	2b1b      	cmp	r3, #27
 800073c:	dc08      	bgt.n	8000750 <__aeabi_fadd+0xc0>
 800073e:	0008      	movs	r0, r1
 8000740:	2220      	movs	r2, #32
 8000742:	40d8      	lsrs	r0, r3
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	4099      	lsls	r1, r3
 8000748:	000b      	movs	r3, r1
 800074a:	1e5a      	subs	r2, r3, #1
 800074c:	4193      	sbcs	r3, r2
 800074e:	4318      	orrs	r0, r3
 8000750:	1a36      	subs	r6, r6, r0
 8000752:	0173      	lsls	r3, r6, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fadd+0xc8>
 8000756:	e071      	b.n	800083c <__aeabi_fadd+0x1ac>
 8000758:	01b6      	lsls	r6, r6, #6
 800075a:	09b7      	lsrs	r7, r6, #6
 800075c:	0038      	movs	r0, r7
 800075e:	f001 f813 	bl	8001788 <__clzsi2>
 8000762:	003b      	movs	r3, r7
 8000764:	3805      	subs	r0, #5
 8000766:	4083      	lsls	r3, r0
 8000768:	4285      	cmp	r5, r0
 800076a:	dd4d      	ble.n	8000808 <__aeabi_fadd+0x178>
 800076c:	4eb4      	ldr	r6, [pc, #720]	@ (8000a40 <__aeabi_fadd+0x3b0>)
 800076e:	1a2d      	subs	r5, r5, r0
 8000770:	401e      	ands	r6, r3
 8000772:	075a      	lsls	r2, r3, #29
 8000774:	d068      	beq.n	8000848 <__aeabi_fadd+0x1b8>
 8000776:	220f      	movs	r2, #15
 8000778:	4013      	ands	r3, r2
 800077a:	2b04      	cmp	r3, #4
 800077c:	d064      	beq.n	8000848 <__aeabi_fadd+0x1b8>
 800077e:	3604      	adds	r6, #4
 8000780:	0173      	lsls	r3, r6, #5
 8000782:	d561      	bpl.n	8000848 <__aeabi_fadd+0x1b8>
 8000784:	1c68      	adds	r0, r5, #1
 8000786:	2dfe      	cmp	r5, #254	@ 0xfe
 8000788:	d154      	bne.n	8000834 <__aeabi_fadd+0x1a4>
 800078a:	20ff      	movs	r0, #255	@ 0xff
 800078c:	2200      	movs	r2, #0
 800078e:	05c0      	lsls	r0, r0, #23
 8000790:	4310      	orrs	r0, r2
 8000792:	07e4      	lsls	r4, r4, #31
 8000794:	4320      	orrs	r0, r4
 8000796:	bcc0      	pop	{r6, r7}
 8000798:	46b9      	mov	r9, r7
 800079a:	46b0      	mov	r8, r6
 800079c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800079e:	22fe      	movs	r2, #254	@ 0xfe
 80007a0:	4690      	mov	r8, r2
 80007a2:	1c68      	adds	r0, r5, #1
 80007a4:	0002      	movs	r2, r0
 80007a6:	4640      	mov	r0, r8
 80007a8:	4210      	tst	r0, r2
 80007aa:	d16b      	bne.n	8000884 <__aeabi_fadd+0x1f4>
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fadd+0x122>
 80007b0:	e0dd      	b.n	800096e <__aeabi_fadd+0x2de>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fadd+0x128>
 80007b6:	e102      	b.n	80009be <__aeabi_fadd+0x32e>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d0b3      	beq.n	8000724 <__aeabi_fadd+0x94>
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	1a77      	subs	r7, r6, r1
 80007c0:	04d2      	lsls	r2, r2, #19
 80007c2:	4217      	tst	r7, r2
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x138>
 80007c6:	e136      	b.n	8000a36 <__aeabi_fadd+0x3a6>
 80007c8:	464c      	mov	r4, r9
 80007ca:	1b8e      	subs	r6, r1, r6
 80007cc:	d061      	beq.n	8000892 <__aeabi_fadd+0x202>
 80007ce:	2001      	movs	r0, #1
 80007d0:	4216      	tst	r6, r2
 80007d2:	d130      	bne.n	8000836 <__aeabi_fadd+0x1a6>
 80007d4:	2300      	movs	r3, #0
 80007d6:	08f7      	lsrs	r7, r6, #3
 80007d8:	e7a4      	b.n	8000724 <__aeabi_fadd+0x94>
 80007da:	2900      	cmp	r1, #0
 80007dc:	d09e      	beq.n	800071c <__aeabi_fadd+0x8c>
 80007de:	1e5a      	subs	r2, r3, #1
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fadd+0x156>
 80007e4:	e0ca      	b.n	800097c <__aeabi_fadd+0x2ec>
 80007e6:	2bff      	cmp	r3, #255	@ 0xff
 80007e8:	d042      	beq.n	8000870 <__aeabi_fadd+0x1e0>
 80007ea:	0013      	movs	r3, r2
 80007ec:	e791      	b.n	8000712 <__aeabi_fadd+0x82>
 80007ee:	1a71      	subs	r1, r6, r1
 80007f0:	014b      	lsls	r3, r1, #5
 80007f2:	d400      	bmi.n	80007f6 <__aeabi_fadd+0x166>
 80007f4:	e0d1      	b.n	800099a <__aeabi_fadd+0x30a>
 80007f6:	018f      	lsls	r7, r1, #6
 80007f8:	09bf      	lsrs	r7, r7, #6
 80007fa:	0038      	movs	r0, r7
 80007fc:	f000 ffc4 	bl	8001788 <__clzsi2>
 8000800:	003b      	movs	r3, r7
 8000802:	3805      	subs	r0, #5
 8000804:	4083      	lsls	r3, r0
 8000806:	2501      	movs	r5, #1
 8000808:	2220      	movs	r2, #32
 800080a:	1b40      	subs	r0, r0, r5
 800080c:	3001      	adds	r0, #1
 800080e:	1a12      	subs	r2, r2, r0
 8000810:	001e      	movs	r6, r3
 8000812:	4093      	lsls	r3, r2
 8000814:	40c6      	lsrs	r6, r0
 8000816:	1e5a      	subs	r2, r3, #1
 8000818:	4193      	sbcs	r3, r2
 800081a:	431e      	orrs	r6, r3
 800081c:	d039      	beq.n	8000892 <__aeabi_fadd+0x202>
 800081e:	0773      	lsls	r3, r6, #29
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x194>
 8000822:	e11b      	b.n	8000a5c <__aeabi_fadd+0x3cc>
 8000824:	230f      	movs	r3, #15
 8000826:	2500      	movs	r5, #0
 8000828:	4033      	ands	r3, r6
 800082a:	2b04      	cmp	r3, #4
 800082c:	d1a7      	bne.n	800077e <__aeabi_fadd+0xee>
 800082e:	2001      	movs	r0, #1
 8000830:	0172      	lsls	r2, r6, #5
 8000832:	d57c      	bpl.n	800092e <__aeabi_fadd+0x29e>
 8000834:	b2c0      	uxtb	r0, r0
 8000836:	01b2      	lsls	r2, r6, #6
 8000838:	0a52      	lsrs	r2, r2, #9
 800083a:	e7a8      	b.n	800078e <__aeabi_fadd+0xfe>
 800083c:	0773      	lsls	r3, r6, #29
 800083e:	d003      	beq.n	8000848 <__aeabi_fadd+0x1b8>
 8000840:	230f      	movs	r3, #15
 8000842:	4033      	ands	r3, r6
 8000844:	2b04      	cmp	r3, #4
 8000846:	d19a      	bne.n	800077e <__aeabi_fadd+0xee>
 8000848:	002b      	movs	r3, r5
 800084a:	e767      	b.n	800071c <__aeabi_fadd+0x8c>
 800084c:	2b00      	cmp	r3, #0
 800084e:	d023      	beq.n	8000898 <__aeabi_fadd+0x208>
 8000850:	1b53      	subs	r3, r2, r5
 8000852:	2d00      	cmp	r5, #0
 8000854:	d17b      	bne.n	800094e <__aeabi_fadd+0x2be>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x1cc>
 800085a:	e086      	b.n	800096a <__aeabi_fadd+0x2da>
 800085c:	1e5d      	subs	r5, r3, #1
 800085e:	2b01      	cmp	r3, #1
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x1d4>
 8000862:	e08b      	b.n	800097c <__aeabi_fadd+0x2ec>
 8000864:	2bff      	cmp	r3, #255	@ 0xff
 8000866:	d002      	beq.n	800086e <__aeabi_fadd+0x1de>
 8000868:	002b      	movs	r3, r5
 800086a:	e075      	b.n	8000958 <__aeabi_fadd+0x2c8>
 800086c:	464c      	mov	r4, r9
 800086e:	4667      	mov	r7, ip
 8000870:	2f00      	cmp	r7, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x1e6>
 8000874:	e789      	b.n	800078a <__aeabi_fadd+0xfa>
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	03d2      	lsls	r2, r2, #15
 800087a:	433a      	orrs	r2, r7
 800087c:	0252      	lsls	r2, r2, #9
 800087e:	20ff      	movs	r0, #255	@ 0xff
 8000880:	0a52      	lsrs	r2, r2, #9
 8000882:	e784      	b.n	800078e <__aeabi_fadd+0xfe>
 8000884:	1a77      	subs	r7, r6, r1
 8000886:	017b      	lsls	r3, r7, #5
 8000888:	d46b      	bmi.n	8000962 <__aeabi_fadd+0x2d2>
 800088a:	2f00      	cmp	r7, #0
 800088c:	d000      	beq.n	8000890 <__aeabi_fadd+0x200>
 800088e:	e765      	b.n	800075c <__aeabi_fadd+0xcc>
 8000890:	2400      	movs	r4, #0
 8000892:	2000      	movs	r0, #0
 8000894:	2200      	movs	r2, #0
 8000896:	e77a      	b.n	800078e <__aeabi_fadd+0xfe>
 8000898:	22fe      	movs	r2, #254	@ 0xfe
 800089a:	1c6b      	adds	r3, r5, #1
 800089c:	421a      	tst	r2, r3
 800089e:	d149      	bne.n	8000934 <__aeabi_fadd+0x2a4>
 80008a0:	2d00      	cmp	r5, #0
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fadd+0x216>
 80008a4:	e09f      	b.n	80009e6 <__aeabi_fadd+0x356>
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x21c>
 80008aa:	e0ba      	b.n	8000a22 <__aeabi_fadd+0x392>
 80008ac:	2900      	cmp	r1, #0
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0x222>
 80008b0:	e0cf      	b.n	8000a52 <__aeabi_fadd+0x3c2>
 80008b2:	1872      	adds	r2, r6, r1
 80008b4:	0153      	lsls	r3, r2, #5
 80008b6:	d400      	bmi.n	80008ba <__aeabi_fadd+0x22a>
 80008b8:	e0cd      	b.n	8000a56 <__aeabi_fadd+0x3c6>
 80008ba:	0192      	lsls	r2, r2, #6
 80008bc:	2001      	movs	r0, #1
 80008be:	0a52      	lsrs	r2, r2, #9
 80008c0:	e765      	b.n	800078e <__aeabi_fadd+0xfe>
 80008c2:	2aff      	cmp	r2, #255	@ 0xff
 80008c4:	d0d2      	beq.n	800086c <__aeabi_fadd+0x1dc>
 80008c6:	2080      	movs	r0, #128	@ 0x80
 80008c8:	04c0      	lsls	r0, r0, #19
 80008ca:	4306      	orrs	r6, r0
 80008cc:	2001      	movs	r0, #1
 80008ce:	2b1b      	cmp	r3, #27
 80008d0:	dc08      	bgt.n	80008e4 <__aeabi_fadd+0x254>
 80008d2:	0030      	movs	r0, r6
 80008d4:	2420      	movs	r4, #32
 80008d6:	40d8      	lsrs	r0, r3
 80008d8:	1ae3      	subs	r3, r4, r3
 80008da:	409e      	lsls	r6, r3
 80008dc:	0033      	movs	r3, r6
 80008de:	1e5c      	subs	r4, r3, #1
 80008e0:	41a3      	sbcs	r3, r4
 80008e2:	4318      	orrs	r0, r3
 80008e4:	464c      	mov	r4, r9
 80008e6:	0015      	movs	r5, r2
 80008e8:	1a0e      	subs	r6, r1, r0
 80008ea:	e732      	b.n	8000752 <__aeabi_fadd+0xc2>
 80008ec:	0008      	movs	r0, r1
 80008ee:	2220      	movs	r2, #32
 80008f0:	40d8      	lsrs	r0, r3
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	4099      	lsls	r1, r3
 80008f6:	000b      	movs	r3, r1
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	4193      	sbcs	r3, r2
 80008fc:	4303      	orrs	r3, r0
 80008fe:	18f6      	adds	r6, r6, r3
 8000900:	0173      	lsls	r3, r6, #5
 8000902:	d59b      	bpl.n	800083c <__aeabi_fadd+0x1ac>
 8000904:	3501      	adds	r5, #1
 8000906:	2dff      	cmp	r5, #255	@ 0xff
 8000908:	d100      	bne.n	800090c <__aeabi_fadd+0x27c>
 800090a:	e73e      	b.n	800078a <__aeabi_fadd+0xfa>
 800090c:	2301      	movs	r3, #1
 800090e:	494d      	ldr	r1, [pc, #308]	@ (8000a44 <__aeabi_fadd+0x3b4>)
 8000910:	0872      	lsrs	r2, r6, #1
 8000912:	4033      	ands	r3, r6
 8000914:	400a      	ands	r2, r1
 8000916:	431a      	orrs	r2, r3
 8000918:	0016      	movs	r6, r2
 800091a:	0753      	lsls	r3, r2, #29
 800091c:	d004      	beq.n	8000928 <__aeabi_fadd+0x298>
 800091e:	230f      	movs	r3, #15
 8000920:	4013      	ands	r3, r2
 8000922:	2b04      	cmp	r3, #4
 8000924:	d000      	beq.n	8000928 <__aeabi_fadd+0x298>
 8000926:	e72a      	b.n	800077e <__aeabi_fadd+0xee>
 8000928:	0173      	lsls	r3, r6, #5
 800092a:	d500      	bpl.n	800092e <__aeabi_fadd+0x29e>
 800092c:	e72a      	b.n	8000784 <__aeabi_fadd+0xf4>
 800092e:	002b      	movs	r3, r5
 8000930:	08f7      	lsrs	r7, r6, #3
 8000932:	e6f7      	b.n	8000724 <__aeabi_fadd+0x94>
 8000934:	2bff      	cmp	r3, #255	@ 0xff
 8000936:	d100      	bne.n	800093a <__aeabi_fadd+0x2aa>
 8000938:	e727      	b.n	800078a <__aeabi_fadd+0xfa>
 800093a:	1871      	adds	r1, r6, r1
 800093c:	0849      	lsrs	r1, r1, #1
 800093e:	074a      	lsls	r2, r1, #29
 8000940:	d02f      	beq.n	80009a2 <__aeabi_fadd+0x312>
 8000942:	220f      	movs	r2, #15
 8000944:	400a      	ands	r2, r1
 8000946:	2a04      	cmp	r2, #4
 8000948:	d02b      	beq.n	80009a2 <__aeabi_fadd+0x312>
 800094a:	1d0e      	adds	r6, r1, #4
 800094c:	e6e6      	b.n	800071c <__aeabi_fadd+0x8c>
 800094e:	2aff      	cmp	r2, #255	@ 0xff
 8000950:	d08d      	beq.n	800086e <__aeabi_fadd+0x1de>
 8000952:	2080      	movs	r0, #128	@ 0x80
 8000954:	04c0      	lsls	r0, r0, #19
 8000956:	4306      	orrs	r6, r0
 8000958:	2b1b      	cmp	r3, #27
 800095a:	dd24      	ble.n	80009a6 <__aeabi_fadd+0x316>
 800095c:	0013      	movs	r3, r2
 800095e:	1d4e      	adds	r6, r1, #5
 8000960:	e6dc      	b.n	800071c <__aeabi_fadd+0x8c>
 8000962:	464c      	mov	r4, r9
 8000964:	1b8f      	subs	r7, r1, r6
 8000966:	e6f9      	b.n	800075c <__aeabi_fadd+0xcc>
 8000968:	464c      	mov	r4, r9
 800096a:	000e      	movs	r6, r1
 800096c:	e6d6      	b.n	800071c <__aeabi_fadd+0x8c>
 800096e:	2e00      	cmp	r6, #0
 8000970:	d149      	bne.n	8000a06 <__aeabi_fadd+0x376>
 8000972:	2900      	cmp	r1, #0
 8000974:	d068      	beq.n	8000a48 <__aeabi_fadd+0x3b8>
 8000976:	4667      	mov	r7, ip
 8000978:	464c      	mov	r4, r9
 800097a:	e77c      	b.n	8000876 <__aeabi_fadd+0x1e6>
 800097c:	1870      	adds	r0, r6, r1
 800097e:	0143      	lsls	r3, r0, #5
 8000980:	d574      	bpl.n	8000a6c <__aeabi_fadd+0x3dc>
 8000982:	4930      	ldr	r1, [pc, #192]	@ (8000a44 <__aeabi_fadd+0x3b4>)
 8000984:	0840      	lsrs	r0, r0, #1
 8000986:	4001      	ands	r1, r0
 8000988:	0743      	lsls	r3, r0, #29
 800098a:	d009      	beq.n	80009a0 <__aeabi_fadd+0x310>
 800098c:	230f      	movs	r3, #15
 800098e:	4003      	ands	r3, r0
 8000990:	2b04      	cmp	r3, #4
 8000992:	d005      	beq.n	80009a0 <__aeabi_fadd+0x310>
 8000994:	2302      	movs	r3, #2
 8000996:	1d0e      	adds	r6, r1, #4
 8000998:	e6c0      	b.n	800071c <__aeabi_fadd+0x8c>
 800099a:	2301      	movs	r3, #1
 800099c:	08cf      	lsrs	r7, r1, #3
 800099e:	e6c1      	b.n	8000724 <__aeabi_fadd+0x94>
 80009a0:	2302      	movs	r3, #2
 80009a2:	08cf      	lsrs	r7, r1, #3
 80009a4:	e6be      	b.n	8000724 <__aeabi_fadd+0x94>
 80009a6:	2520      	movs	r5, #32
 80009a8:	0030      	movs	r0, r6
 80009aa:	40d8      	lsrs	r0, r3
 80009ac:	1aeb      	subs	r3, r5, r3
 80009ae:	409e      	lsls	r6, r3
 80009b0:	0033      	movs	r3, r6
 80009b2:	1e5d      	subs	r5, r3, #1
 80009b4:	41ab      	sbcs	r3, r5
 80009b6:	4303      	orrs	r3, r0
 80009b8:	0015      	movs	r5, r2
 80009ba:	185e      	adds	r6, r3, r1
 80009bc:	e7a0      	b.n	8000900 <__aeabi_fadd+0x270>
 80009be:	2900      	cmp	r1, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_fadd+0x334>
 80009c2:	e765      	b.n	8000890 <__aeabi_fadd+0x200>
 80009c4:	464c      	mov	r4, r9
 80009c6:	4667      	mov	r7, ip
 80009c8:	e6ac      	b.n	8000724 <__aeabi_fadd+0x94>
 80009ca:	1b8f      	subs	r7, r1, r6
 80009cc:	017b      	lsls	r3, r7, #5
 80009ce:	d52e      	bpl.n	8000a2e <__aeabi_fadd+0x39e>
 80009d0:	01bf      	lsls	r7, r7, #6
 80009d2:	09bf      	lsrs	r7, r7, #6
 80009d4:	0038      	movs	r0, r7
 80009d6:	f000 fed7 	bl	8001788 <__clzsi2>
 80009da:	003b      	movs	r3, r7
 80009dc:	3805      	subs	r0, #5
 80009de:	4083      	lsls	r3, r0
 80009e0:	464c      	mov	r4, r9
 80009e2:	3501      	adds	r5, #1
 80009e4:	e710      	b.n	8000808 <__aeabi_fadd+0x178>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fadd+0x35c>
 80009ea:	e740      	b.n	800086e <__aeabi_fadd+0x1de>
 80009ec:	2900      	cmp	r1, #0
 80009ee:	d100      	bne.n	80009f2 <__aeabi_fadd+0x362>
 80009f0:	e741      	b.n	8000876 <__aeabi_fadd+0x1e6>
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	03db      	lsls	r3, r3, #15
 80009f6:	429f      	cmp	r7, r3
 80009f8:	d200      	bcs.n	80009fc <__aeabi_fadd+0x36c>
 80009fa:	e73c      	b.n	8000876 <__aeabi_fadd+0x1e6>
 80009fc:	459c      	cmp	ip, r3
 80009fe:	d300      	bcc.n	8000a02 <__aeabi_fadd+0x372>
 8000a00:	e739      	b.n	8000876 <__aeabi_fadd+0x1e6>
 8000a02:	4667      	mov	r7, ip
 8000a04:	e737      	b.n	8000876 <__aeabi_fadd+0x1e6>
 8000a06:	2900      	cmp	r1, #0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fadd+0x37c>
 8000a0a:	e734      	b.n	8000876 <__aeabi_fadd+0x1e6>
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	03db      	lsls	r3, r3, #15
 8000a10:	429f      	cmp	r7, r3
 8000a12:	d200      	bcs.n	8000a16 <__aeabi_fadd+0x386>
 8000a14:	e72f      	b.n	8000876 <__aeabi_fadd+0x1e6>
 8000a16:	459c      	cmp	ip, r3
 8000a18:	d300      	bcc.n	8000a1c <__aeabi_fadd+0x38c>
 8000a1a:	e72c      	b.n	8000876 <__aeabi_fadd+0x1e6>
 8000a1c:	464c      	mov	r4, r9
 8000a1e:	4667      	mov	r7, ip
 8000a20:	e729      	b.n	8000876 <__aeabi_fadd+0x1e6>
 8000a22:	2900      	cmp	r1, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fadd+0x398>
 8000a26:	e734      	b.n	8000892 <__aeabi_fadd+0x202>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	08cf      	lsrs	r7, r1, #3
 8000a2c:	e67a      	b.n	8000724 <__aeabi_fadd+0x94>
 8000a2e:	464c      	mov	r4, r9
 8000a30:	2301      	movs	r3, #1
 8000a32:	08ff      	lsrs	r7, r7, #3
 8000a34:	e676      	b.n	8000724 <__aeabi_fadd+0x94>
 8000a36:	2f00      	cmp	r7, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fadd+0x3ac>
 8000a3a:	e729      	b.n	8000890 <__aeabi_fadd+0x200>
 8000a3c:	08ff      	lsrs	r7, r7, #3
 8000a3e:	e671      	b.n	8000724 <__aeabi_fadd+0x94>
 8000a40:	fbffffff 	.word	0xfbffffff
 8000a44:	7dffffff 	.word	0x7dffffff
 8000a48:	2280      	movs	r2, #128	@ 0x80
 8000a4a:	2400      	movs	r4, #0
 8000a4c:	20ff      	movs	r0, #255	@ 0xff
 8000a4e:	03d2      	lsls	r2, r2, #15
 8000a50:	e69d      	b.n	800078e <__aeabi_fadd+0xfe>
 8000a52:	2300      	movs	r3, #0
 8000a54:	e666      	b.n	8000724 <__aeabi_fadd+0x94>
 8000a56:	2300      	movs	r3, #0
 8000a58:	08d7      	lsrs	r7, r2, #3
 8000a5a:	e663      	b.n	8000724 <__aeabi_fadd+0x94>
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	0172      	lsls	r2, r6, #5
 8000a60:	d500      	bpl.n	8000a64 <__aeabi_fadd+0x3d4>
 8000a62:	e6e7      	b.n	8000834 <__aeabi_fadd+0x1a4>
 8000a64:	0031      	movs	r1, r6
 8000a66:	2300      	movs	r3, #0
 8000a68:	08cf      	lsrs	r7, r1, #3
 8000a6a:	e65b      	b.n	8000724 <__aeabi_fadd+0x94>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	08c7      	lsrs	r7, r0, #3
 8000a70:	e658      	b.n	8000724 <__aeabi_fadd+0x94>
 8000a72:	46c0      	nop			@ (mov r8, r8)

08000a74 <__aeabi_fdiv>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	4646      	mov	r6, r8
 8000a78:	464f      	mov	r7, r9
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	0245      	lsls	r5, r0, #9
 8000a7e:	b5c0      	push	{r6, r7, lr}
 8000a80:	0fc3      	lsrs	r3, r0, #31
 8000a82:	0047      	lsls	r7, r0, #1
 8000a84:	4698      	mov	r8, r3
 8000a86:	1c0e      	adds	r6, r1, #0
 8000a88:	0a6d      	lsrs	r5, r5, #9
 8000a8a:	0e3f      	lsrs	r7, r7, #24
 8000a8c:	d05b      	beq.n	8000b46 <__aeabi_fdiv+0xd2>
 8000a8e:	2fff      	cmp	r7, #255	@ 0xff
 8000a90:	d021      	beq.n	8000ad6 <__aeabi_fdiv+0x62>
 8000a92:	2380      	movs	r3, #128	@ 0x80
 8000a94:	00ed      	lsls	r5, r5, #3
 8000a96:	04db      	lsls	r3, r3, #19
 8000a98:	431d      	orrs	r5, r3
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	4699      	mov	r9, r3
 8000a9e:	469a      	mov	sl, r3
 8000aa0:	3f7f      	subs	r7, #127	@ 0x7f
 8000aa2:	0274      	lsls	r4, r6, #9
 8000aa4:	0073      	lsls	r3, r6, #1
 8000aa6:	0a64      	lsrs	r4, r4, #9
 8000aa8:	0e1b      	lsrs	r3, r3, #24
 8000aaa:	0ff6      	lsrs	r6, r6, #31
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d020      	beq.n	8000af2 <__aeabi_fdiv+0x7e>
 8000ab0:	2bff      	cmp	r3, #255	@ 0xff
 8000ab2:	d043      	beq.n	8000b3c <__aeabi_fdiv+0xc8>
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	00e4      	lsls	r4, r4, #3
 8000aba:	04d2      	lsls	r2, r2, #19
 8000abc:	4314      	orrs	r4, r2
 8000abe:	3b7f      	subs	r3, #127	@ 0x7f
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	1aff      	subs	r7, r7, r3
 8000ac4:	464b      	mov	r3, r9
 8000ac6:	4072      	eors	r2, r6
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d900      	bls.n	8000ace <__aeabi_fdiv+0x5a>
 8000acc:	e09d      	b.n	8000c0a <__aeabi_fdiv+0x196>
 8000ace:	4971      	ldr	r1, [pc, #452]	@ (8000c94 <__aeabi_fdiv+0x220>)
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	58cb      	ldr	r3, [r1, r3]
 8000ad4:	469f      	mov	pc, r3
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d15a      	bne.n	8000b90 <__aeabi_fdiv+0x11c>
 8000ada:	2308      	movs	r3, #8
 8000adc:	4699      	mov	r9, r3
 8000ade:	3b06      	subs	r3, #6
 8000ae0:	0274      	lsls	r4, r6, #9
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	0073      	lsls	r3, r6, #1
 8000ae6:	27ff      	movs	r7, #255	@ 0xff
 8000ae8:	0a64      	lsrs	r4, r4, #9
 8000aea:	0e1b      	lsrs	r3, r3, #24
 8000aec:	0ff6      	lsrs	r6, r6, #31
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1de      	bne.n	8000ab0 <__aeabi_fdiv+0x3c>
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	d13b      	bne.n	8000b6e <__aeabi_fdiv+0xfa>
 8000af6:	2301      	movs	r3, #1
 8000af8:	4642      	mov	r2, r8
 8000afa:	4649      	mov	r1, r9
 8000afc:	4072      	eors	r2, r6
 8000afe:	4319      	orrs	r1, r3
 8000b00:	290e      	cmp	r1, #14
 8000b02:	d818      	bhi.n	8000b36 <__aeabi_fdiv+0xc2>
 8000b04:	4864      	ldr	r0, [pc, #400]	@ (8000c98 <__aeabi_fdiv+0x224>)
 8000b06:	0089      	lsls	r1, r1, #2
 8000b08:	5841      	ldr	r1, [r0, r1]
 8000b0a:	468f      	mov	pc, r1
 8000b0c:	4653      	mov	r3, sl
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fdiv+0xa0>
 8000b12:	e0b8      	b.n	8000c86 <__aeabi_fdiv+0x212>
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d06e      	beq.n	8000bf6 <__aeabi_fdiv+0x182>
 8000b18:	4642      	mov	r2, r8
 8000b1a:	002c      	movs	r4, r5
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d140      	bne.n	8000ba2 <__aeabi_fdiv+0x12e>
 8000b20:	2000      	movs	r0, #0
 8000b22:	2400      	movs	r4, #0
 8000b24:	05c0      	lsls	r0, r0, #23
 8000b26:	4320      	orrs	r0, r4
 8000b28:	07d2      	lsls	r2, r2, #31
 8000b2a:	4310      	orrs	r0, r2
 8000b2c:	bce0      	pop	{r5, r6, r7}
 8000b2e:	46ba      	mov	sl, r7
 8000b30:	46b1      	mov	r9, r6
 8000b32:	46a8      	mov	r8, r5
 8000b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	2400      	movs	r4, #0
 8000b3a:	e7f3      	b.n	8000b24 <__aeabi_fdiv+0xb0>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d120      	bne.n	8000b82 <__aeabi_fdiv+0x10e>
 8000b40:	2302      	movs	r3, #2
 8000b42:	3fff      	subs	r7, #255	@ 0xff
 8000b44:	e7d8      	b.n	8000af8 <__aeabi_fdiv+0x84>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d105      	bne.n	8000b56 <__aeabi_fdiv+0xe2>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	3b03      	subs	r3, #3
 8000b50:	2700      	movs	r7, #0
 8000b52:	469a      	mov	sl, r3
 8000b54:	e7a5      	b.n	8000aa2 <__aeabi_fdiv+0x2e>
 8000b56:	0028      	movs	r0, r5
 8000b58:	f000 fe16 	bl	8001788 <__clzsi2>
 8000b5c:	2776      	movs	r7, #118	@ 0x76
 8000b5e:	1f43      	subs	r3, r0, #5
 8000b60:	409d      	lsls	r5, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	427f      	negs	r7, r7
 8000b66:	4699      	mov	r9, r3
 8000b68:	469a      	mov	sl, r3
 8000b6a:	1a3f      	subs	r7, r7, r0
 8000b6c:	e799      	b.n	8000aa2 <__aeabi_fdiv+0x2e>
 8000b6e:	0020      	movs	r0, r4
 8000b70:	f000 fe0a 	bl	8001788 <__clzsi2>
 8000b74:	1f43      	subs	r3, r0, #5
 8000b76:	409c      	lsls	r4, r3
 8000b78:	2376      	movs	r3, #118	@ 0x76
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	1a1b      	subs	r3, r3, r0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	e79e      	b.n	8000ac0 <__aeabi_fdiv+0x4c>
 8000b82:	2303      	movs	r3, #3
 8000b84:	464a      	mov	r2, r9
 8000b86:	431a      	orrs	r2, r3
 8000b88:	4691      	mov	r9, r2
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	33fc      	adds	r3, #252	@ 0xfc
 8000b8e:	e797      	b.n	8000ac0 <__aeabi_fdiv+0x4c>
 8000b90:	230c      	movs	r3, #12
 8000b92:	4699      	mov	r9, r3
 8000b94:	3b09      	subs	r3, #9
 8000b96:	27ff      	movs	r7, #255	@ 0xff
 8000b98:	469a      	mov	sl, r3
 8000b9a:	e782      	b.n	8000aa2 <__aeabi_fdiv+0x2e>
 8000b9c:	2803      	cmp	r0, #3
 8000b9e:	d02c      	beq.n	8000bfa <__aeabi_fdiv+0x186>
 8000ba0:	0032      	movs	r2, r6
 8000ba2:	0038      	movs	r0, r7
 8000ba4:	307f      	adds	r0, #127	@ 0x7f
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	dd47      	ble.n	8000c3a <__aeabi_fdiv+0x1c6>
 8000baa:	0763      	lsls	r3, r4, #29
 8000bac:	d004      	beq.n	8000bb8 <__aeabi_fdiv+0x144>
 8000bae:	230f      	movs	r3, #15
 8000bb0:	4023      	ands	r3, r4
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_fdiv+0x144>
 8000bb6:	3404      	adds	r4, #4
 8000bb8:	0123      	lsls	r3, r4, #4
 8000bba:	d503      	bpl.n	8000bc4 <__aeabi_fdiv+0x150>
 8000bbc:	0038      	movs	r0, r7
 8000bbe:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <__aeabi_fdiv+0x228>)
 8000bc0:	3080      	adds	r0, #128	@ 0x80
 8000bc2:	401c      	ands	r4, r3
 8000bc4:	28fe      	cmp	r0, #254	@ 0xfe
 8000bc6:	dcb6      	bgt.n	8000b36 <__aeabi_fdiv+0xc2>
 8000bc8:	01a4      	lsls	r4, r4, #6
 8000bca:	0a64      	lsrs	r4, r4, #9
 8000bcc:	b2c0      	uxtb	r0, r0
 8000bce:	e7a9      	b.n	8000b24 <__aeabi_fdiv+0xb0>
 8000bd0:	2480      	movs	r4, #128	@ 0x80
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	20ff      	movs	r0, #255	@ 0xff
 8000bd6:	03e4      	lsls	r4, r4, #15
 8000bd8:	e7a4      	b.n	8000b24 <__aeabi_fdiv+0xb0>
 8000bda:	2380      	movs	r3, #128	@ 0x80
 8000bdc:	03db      	lsls	r3, r3, #15
 8000bde:	421d      	tst	r5, r3
 8000be0:	d001      	beq.n	8000be6 <__aeabi_fdiv+0x172>
 8000be2:	421c      	tst	r4, r3
 8000be4:	d00b      	beq.n	8000bfe <__aeabi_fdiv+0x18a>
 8000be6:	2480      	movs	r4, #128	@ 0x80
 8000be8:	03e4      	lsls	r4, r4, #15
 8000bea:	432c      	orrs	r4, r5
 8000bec:	0264      	lsls	r4, r4, #9
 8000bee:	4642      	mov	r2, r8
 8000bf0:	20ff      	movs	r0, #255	@ 0xff
 8000bf2:	0a64      	lsrs	r4, r4, #9
 8000bf4:	e796      	b.n	8000b24 <__aeabi_fdiv+0xb0>
 8000bf6:	4646      	mov	r6, r8
 8000bf8:	002c      	movs	r4, r5
 8000bfa:	2380      	movs	r3, #128	@ 0x80
 8000bfc:	03db      	lsls	r3, r3, #15
 8000bfe:	431c      	orrs	r4, r3
 8000c00:	0264      	lsls	r4, r4, #9
 8000c02:	0032      	movs	r2, r6
 8000c04:	20ff      	movs	r0, #255	@ 0xff
 8000c06:	0a64      	lsrs	r4, r4, #9
 8000c08:	e78c      	b.n	8000b24 <__aeabi_fdiv+0xb0>
 8000c0a:	016d      	lsls	r5, r5, #5
 8000c0c:	0160      	lsls	r0, r4, #5
 8000c0e:	4285      	cmp	r5, r0
 8000c10:	d22d      	bcs.n	8000c6e <__aeabi_fdiv+0x1fa>
 8000c12:	231b      	movs	r3, #27
 8000c14:	2400      	movs	r4, #0
 8000c16:	3f01      	subs	r7, #1
 8000c18:	2601      	movs	r6, #1
 8000c1a:	0029      	movs	r1, r5
 8000c1c:	0064      	lsls	r4, r4, #1
 8000c1e:	006d      	lsls	r5, r5, #1
 8000c20:	2900      	cmp	r1, #0
 8000c22:	db01      	blt.n	8000c28 <__aeabi_fdiv+0x1b4>
 8000c24:	4285      	cmp	r5, r0
 8000c26:	d301      	bcc.n	8000c2c <__aeabi_fdiv+0x1b8>
 8000c28:	1a2d      	subs	r5, r5, r0
 8000c2a:	4334      	orrs	r4, r6
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f3      	bne.n	8000c1a <__aeabi_fdiv+0x1a6>
 8000c32:	1e6b      	subs	r3, r5, #1
 8000c34:	419d      	sbcs	r5, r3
 8000c36:	432c      	orrs	r4, r5
 8000c38:	e7b3      	b.n	8000ba2 <__aeabi_fdiv+0x12e>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	1a1b      	subs	r3, r3, r0
 8000c3e:	2b1b      	cmp	r3, #27
 8000c40:	dd00      	ble.n	8000c44 <__aeabi_fdiv+0x1d0>
 8000c42:	e76d      	b.n	8000b20 <__aeabi_fdiv+0xac>
 8000c44:	0021      	movs	r1, r4
 8000c46:	379e      	adds	r7, #158	@ 0x9e
 8000c48:	40d9      	lsrs	r1, r3
 8000c4a:	40bc      	lsls	r4, r7
 8000c4c:	000b      	movs	r3, r1
 8000c4e:	1e61      	subs	r1, r4, #1
 8000c50:	418c      	sbcs	r4, r1
 8000c52:	4323      	orrs	r3, r4
 8000c54:	0759      	lsls	r1, r3, #29
 8000c56:	d004      	beq.n	8000c62 <__aeabi_fdiv+0x1ee>
 8000c58:	210f      	movs	r1, #15
 8000c5a:	4019      	ands	r1, r3
 8000c5c:	2904      	cmp	r1, #4
 8000c5e:	d000      	beq.n	8000c62 <__aeabi_fdiv+0x1ee>
 8000c60:	3304      	adds	r3, #4
 8000c62:	0159      	lsls	r1, r3, #5
 8000c64:	d413      	bmi.n	8000c8e <__aeabi_fdiv+0x21a>
 8000c66:	019b      	lsls	r3, r3, #6
 8000c68:	2000      	movs	r0, #0
 8000c6a:	0a5c      	lsrs	r4, r3, #9
 8000c6c:	e75a      	b.n	8000b24 <__aeabi_fdiv+0xb0>
 8000c6e:	231a      	movs	r3, #26
 8000c70:	2401      	movs	r4, #1
 8000c72:	1a2d      	subs	r5, r5, r0
 8000c74:	e7d0      	b.n	8000c18 <__aeabi_fdiv+0x1a4>
 8000c76:	1e98      	subs	r0, r3, #2
 8000c78:	4243      	negs	r3, r0
 8000c7a:	4158      	adcs	r0, r3
 8000c7c:	4240      	negs	r0, r0
 8000c7e:	0032      	movs	r2, r6
 8000c80:	2400      	movs	r4, #0
 8000c82:	b2c0      	uxtb	r0, r0
 8000c84:	e74e      	b.n	8000b24 <__aeabi_fdiv+0xb0>
 8000c86:	4642      	mov	r2, r8
 8000c88:	20ff      	movs	r0, #255	@ 0xff
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	e74a      	b.n	8000b24 <__aeabi_fdiv+0xb0>
 8000c8e:	2001      	movs	r0, #1
 8000c90:	2400      	movs	r4, #0
 8000c92:	e747      	b.n	8000b24 <__aeabi_fdiv+0xb0>
 8000c94:	080083c4 	.word	0x080083c4
 8000c98:	08008404 	.word	0x08008404
 8000c9c:	f7ffffff 	.word	0xf7ffffff

08000ca0 <__eqsf2>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	0042      	lsls	r2, r0, #1
 8000ca4:	024e      	lsls	r6, r1, #9
 8000ca6:	004c      	lsls	r4, r1, #1
 8000ca8:	0245      	lsls	r5, r0, #9
 8000caa:	0a6d      	lsrs	r5, r5, #9
 8000cac:	0e12      	lsrs	r2, r2, #24
 8000cae:	0fc3      	lsrs	r3, r0, #31
 8000cb0:	0a76      	lsrs	r6, r6, #9
 8000cb2:	0e24      	lsrs	r4, r4, #24
 8000cb4:	0fc9      	lsrs	r1, r1, #31
 8000cb6:	2aff      	cmp	r2, #255	@ 0xff
 8000cb8:	d010      	beq.n	8000cdc <__eqsf2+0x3c>
 8000cba:	2cff      	cmp	r4, #255	@ 0xff
 8000cbc:	d00c      	beq.n	8000cd8 <__eqsf2+0x38>
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	42a2      	cmp	r2, r4
 8000cc2:	d10a      	bne.n	8000cda <__eqsf2+0x3a>
 8000cc4:	42b5      	cmp	r5, r6
 8000cc6:	d108      	bne.n	8000cda <__eqsf2+0x3a>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d00f      	beq.n	8000cec <__eqsf2+0x4c>
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	d104      	bne.n	8000cda <__eqsf2+0x3a>
 8000cd0:	0028      	movs	r0, r5
 8000cd2:	1e43      	subs	r3, r0, #1
 8000cd4:	4198      	sbcs	r0, r3
 8000cd6:	e000      	b.n	8000cda <__eqsf2+0x3a>
 8000cd8:	2001      	movs	r0, #1
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	2001      	movs	r0, #1
 8000cde:	2cff      	cmp	r4, #255	@ 0xff
 8000ce0:	d1fb      	bne.n	8000cda <__eqsf2+0x3a>
 8000ce2:	4335      	orrs	r5, r6
 8000ce4:	d1f9      	bne.n	8000cda <__eqsf2+0x3a>
 8000ce6:	404b      	eors	r3, r1
 8000ce8:	0018      	movs	r0, r3
 8000cea:	e7f6      	b.n	8000cda <__eqsf2+0x3a>
 8000cec:	2000      	movs	r0, #0
 8000cee:	e7f4      	b.n	8000cda <__eqsf2+0x3a>

08000cf0 <__gesf2>:
 8000cf0:	b530      	push	{r4, r5, lr}
 8000cf2:	0042      	lsls	r2, r0, #1
 8000cf4:	0244      	lsls	r4, r0, #9
 8000cf6:	024d      	lsls	r5, r1, #9
 8000cf8:	0fc3      	lsrs	r3, r0, #31
 8000cfa:	0048      	lsls	r0, r1, #1
 8000cfc:	0a64      	lsrs	r4, r4, #9
 8000cfe:	0e12      	lsrs	r2, r2, #24
 8000d00:	0a6d      	lsrs	r5, r5, #9
 8000d02:	0e00      	lsrs	r0, r0, #24
 8000d04:	0fc9      	lsrs	r1, r1, #31
 8000d06:	2aff      	cmp	r2, #255	@ 0xff
 8000d08:	d018      	beq.n	8000d3c <__gesf2+0x4c>
 8000d0a:	28ff      	cmp	r0, #255	@ 0xff
 8000d0c:	d00a      	beq.n	8000d24 <__gesf2+0x34>
 8000d0e:	2a00      	cmp	r2, #0
 8000d10:	d11e      	bne.n	8000d50 <__gesf2+0x60>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d10a      	bne.n	8000d2c <__gesf2+0x3c>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d029      	beq.n	8000d6e <__gesf2+0x7e>
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d12d      	bne.n	8000d7a <__gesf2+0x8a>
 8000d1e:	0048      	lsls	r0, r1, #1
 8000d20:	3801      	subs	r0, #1
 8000d22:	bd30      	pop	{r4, r5, pc}
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d125      	bne.n	8000d74 <__gesf2+0x84>
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	d101      	bne.n	8000d30 <__gesf2+0x40>
 8000d2c:	2c00      	cmp	r4, #0
 8000d2e:	d0f6      	beq.n	8000d1e <__gesf2+0x2e>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d019      	beq.n	8000d68 <__gesf2+0x78>
 8000d34:	2001      	movs	r0, #1
 8000d36:	425b      	negs	r3, r3
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	e7f2      	b.n	8000d22 <__gesf2+0x32>
 8000d3c:	2c00      	cmp	r4, #0
 8000d3e:	d119      	bne.n	8000d74 <__gesf2+0x84>
 8000d40:	28ff      	cmp	r0, #255	@ 0xff
 8000d42:	d1f7      	bne.n	8000d34 <__gesf2+0x44>
 8000d44:	2d00      	cmp	r5, #0
 8000d46:	d115      	bne.n	8000d74 <__gesf2+0x84>
 8000d48:	2000      	movs	r0, #0
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d1f2      	bne.n	8000d34 <__gesf2+0x44>
 8000d4e:	e7e8      	b.n	8000d22 <__gesf2+0x32>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d0ef      	beq.n	8000d34 <__gesf2+0x44>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d1ed      	bne.n	8000d34 <__gesf2+0x44>
 8000d58:	4282      	cmp	r2, r0
 8000d5a:	dceb      	bgt.n	8000d34 <__gesf2+0x44>
 8000d5c:	db04      	blt.n	8000d68 <__gesf2+0x78>
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	d8e8      	bhi.n	8000d34 <__gesf2+0x44>
 8000d62:	2000      	movs	r0, #0
 8000d64:	42ac      	cmp	r4, r5
 8000d66:	d2dc      	bcs.n	8000d22 <__gesf2+0x32>
 8000d68:	0058      	lsls	r0, r3, #1
 8000d6a:	3801      	subs	r0, #1
 8000d6c:	e7d9      	b.n	8000d22 <__gesf2+0x32>
 8000d6e:	2c00      	cmp	r4, #0
 8000d70:	d0d7      	beq.n	8000d22 <__gesf2+0x32>
 8000d72:	e7df      	b.n	8000d34 <__gesf2+0x44>
 8000d74:	2002      	movs	r0, #2
 8000d76:	4240      	negs	r0, r0
 8000d78:	e7d3      	b.n	8000d22 <__gesf2+0x32>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d1da      	bne.n	8000d34 <__gesf2+0x44>
 8000d7e:	e7ee      	b.n	8000d5e <__gesf2+0x6e>

08000d80 <__lesf2>:
 8000d80:	b530      	push	{r4, r5, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	0244      	lsls	r4, r0, #9
 8000d86:	024d      	lsls	r5, r1, #9
 8000d88:	0fc3      	lsrs	r3, r0, #31
 8000d8a:	0048      	lsls	r0, r1, #1
 8000d8c:	0a64      	lsrs	r4, r4, #9
 8000d8e:	0e12      	lsrs	r2, r2, #24
 8000d90:	0a6d      	lsrs	r5, r5, #9
 8000d92:	0e00      	lsrs	r0, r0, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d017      	beq.n	8000dca <__lesf2+0x4a>
 8000d9a:	28ff      	cmp	r0, #255	@ 0xff
 8000d9c:	d00a      	beq.n	8000db4 <__lesf2+0x34>
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	d11b      	bne.n	8000dda <__lesf2+0x5a>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d10a      	bne.n	8000dbc <__lesf2+0x3c>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d01d      	beq.n	8000de6 <__lesf2+0x66>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d12d      	bne.n	8000e0a <__lesf2+0x8a>
 8000dae:	0048      	lsls	r0, r1, #1
 8000db0:	3801      	subs	r0, #1
 8000db2:	e011      	b.n	8000dd8 <__lesf2+0x58>
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d10e      	bne.n	8000dd6 <__lesf2+0x56>
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d101      	bne.n	8000dc0 <__lesf2+0x40>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d0f6      	beq.n	8000dae <__lesf2+0x2e>
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d10c      	bne.n	8000dde <__lesf2+0x5e>
 8000dc4:	0058      	lsls	r0, r3, #1
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e006      	b.n	8000dd8 <__lesf2+0x58>
 8000dca:	2c00      	cmp	r4, #0
 8000dcc:	d103      	bne.n	8000dd6 <__lesf2+0x56>
 8000dce:	28ff      	cmp	r0, #255	@ 0xff
 8000dd0:	d105      	bne.n	8000dde <__lesf2+0x5e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d015      	beq.n	8000e02 <__lesf2+0x82>
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	bd30      	pop	{r4, r5, pc}
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d106      	bne.n	8000dec <__lesf2+0x6c>
 8000dde:	2001      	movs	r0, #1
 8000de0:	425b      	negs	r3, r3
 8000de2:	4318      	orrs	r0, r3
 8000de4:	e7f8      	b.n	8000dd8 <__lesf2+0x58>
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d0f6      	beq.n	8000dd8 <__lesf2+0x58>
 8000dea:	e7f8      	b.n	8000dde <__lesf2+0x5e>
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d1f6      	bne.n	8000dde <__lesf2+0x5e>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	dcf4      	bgt.n	8000dde <__lesf2+0x5e>
 8000df4:	dbe6      	blt.n	8000dc4 <__lesf2+0x44>
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	d8f1      	bhi.n	8000dde <__lesf2+0x5e>
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	42ac      	cmp	r4, r5
 8000dfe:	d2eb      	bcs.n	8000dd8 <__lesf2+0x58>
 8000e00:	e7e0      	b.n	8000dc4 <__lesf2+0x44>
 8000e02:	2000      	movs	r0, #0
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d1ea      	bne.n	8000dde <__lesf2+0x5e>
 8000e08:	e7e6      	b.n	8000dd8 <__lesf2+0x58>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d1e7      	bne.n	8000dde <__lesf2+0x5e>
 8000e0e:	e7f2      	b.n	8000df6 <__lesf2+0x76>

08000e10 <__aeabi_fmul>:
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	464f      	mov	r7, r9
 8000e14:	4646      	mov	r6, r8
 8000e16:	46d6      	mov	lr, sl
 8000e18:	0044      	lsls	r4, r0, #1
 8000e1a:	b5c0      	push	{r6, r7, lr}
 8000e1c:	0246      	lsls	r6, r0, #9
 8000e1e:	1c0f      	adds	r7, r1, #0
 8000e20:	0a76      	lsrs	r6, r6, #9
 8000e22:	0e24      	lsrs	r4, r4, #24
 8000e24:	0fc5      	lsrs	r5, r0, #31
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_fmul+0x1c>
 8000e2a:	e0da      	b.n	8000fe2 <__aeabi_fmul+0x1d2>
 8000e2c:	2cff      	cmp	r4, #255	@ 0xff
 8000e2e:	d074      	beq.n	8000f1a <__aeabi_fmul+0x10a>
 8000e30:	2380      	movs	r3, #128	@ 0x80
 8000e32:	00f6      	lsls	r6, r6, #3
 8000e34:	04db      	lsls	r3, r3, #19
 8000e36:	431e      	orrs	r6, r3
 8000e38:	2300      	movs	r3, #0
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	469a      	mov	sl, r3
 8000e3e:	3c7f      	subs	r4, #127	@ 0x7f
 8000e40:	027b      	lsls	r3, r7, #9
 8000e42:	0a5b      	lsrs	r3, r3, #9
 8000e44:	4698      	mov	r8, r3
 8000e46:	007b      	lsls	r3, r7, #1
 8000e48:	0e1b      	lsrs	r3, r3, #24
 8000e4a:	0fff      	lsrs	r7, r7, #31
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d074      	beq.n	8000f3a <__aeabi_fmul+0x12a>
 8000e50:	2bff      	cmp	r3, #255	@ 0xff
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fmul+0x46>
 8000e54:	e08e      	b.n	8000f74 <__aeabi_fmul+0x164>
 8000e56:	4642      	mov	r2, r8
 8000e58:	2180      	movs	r1, #128	@ 0x80
 8000e5a:	00d2      	lsls	r2, r2, #3
 8000e5c:	04c9      	lsls	r1, r1, #19
 8000e5e:	4311      	orrs	r1, r2
 8000e60:	3b7f      	subs	r3, #127	@ 0x7f
 8000e62:	002a      	movs	r2, r5
 8000e64:	18e4      	adds	r4, r4, r3
 8000e66:	464b      	mov	r3, r9
 8000e68:	407a      	eors	r2, r7
 8000e6a:	4688      	mov	r8, r1
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	2b0a      	cmp	r3, #10
 8000e70:	dc75      	bgt.n	8000f5e <__aeabi_fmul+0x14e>
 8000e72:	464b      	mov	r3, r9
 8000e74:	2000      	movs	r0, #0
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	dd0f      	ble.n	8000e9a <__aeabi_fmul+0x8a>
 8000e7a:	4649      	mov	r1, r9
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	408b      	lsls	r3, r1
 8000e80:	21a6      	movs	r1, #166	@ 0xa6
 8000e82:	00c9      	lsls	r1, r1, #3
 8000e84:	420b      	tst	r3, r1
 8000e86:	d169      	bne.n	8000f5c <__aeabi_fmul+0x14c>
 8000e88:	2190      	movs	r1, #144	@ 0x90
 8000e8a:	0089      	lsls	r1, r1, #2
 8000e8c:	420b      	tst	r3, r1
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fmul+0x82>
 8000e90:	e100      	b.n	8001094 <__aeabi_fmul+0x284>
 8000e92:	2188      	movs	r1, #136	@ 0x88
 8000e94:	4219      	tst	r1, r3
 8000e96:	d000      	beq.n	8000e9a <__aeabi_fmul+0x8a>
 8000e98:	e0f5      	b.n	8001086 <__aeabi_fmul+0x276>
 8000e9a:	4641      	mov	r1, r8
 8000e9c:	0409      	lsls	r1, r1, #16
 8000e9e:	0c09      	lsrs	r1, r1, #16
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	0008      	movs	r0, r1
 8000ea4:	0c35      	lsrs	r5, r6, #16
 8000ea6:	0436      	lsls	r6, r6, #16
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	0c36      	lsrs	r6, r6, #16
 8000eac:	4370      	muls	r0, r6
 8000eae:	4369      	muls	r1, r5
 8000eb0:	435e      	muls	r6, r3
 8000eb2:	435d      	muls	r5, r3
 8000eb4:	1876      	adds	r6, r6, r1
 8000eb6:	0c03      	lsrs	r3, r0, #16
 8000eb8:	199b      	adds	r3, r3, r6
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d903      	bls.n	8000ec6 <__aeabi_fmul+0xb6>
 8000ebe:	2180      	movs	r1, #128	@ 0x80
 8000ec0:	0249      	lsls	r1, r1, #9
 8000ec2:	468c      	mov	ip, r1
 8000ec4:	4465      	add	r5, ip
 8000ec6:	0400      	lsls	r0, r0, #16
 8000ec8:	0419      	lsls	r1, r3, #16
 8000eca:	0c00      	lsrs	r0, r0, #16
 8000ecc:	1809      	adds	r1, r1, r0
 8000ece:	018e      	lsls	r6, r1, #6
 8000ed0:	1e70      	subs	r0, r6, #1
 8000ed2:	4186      	sbcs	r6, r0
 8000ed4:	0c1b      	lsrs	r3, r3, #16
 8000ed6:	0e89      	lsrs	r1, r1, #26
 8000ed8:	195b      	adds	r3, r3, r5
 8000eda:	430e      	orrs	r6, r1
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	431e      	orrs	r6, r3
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	d46c      	bmi.n	8000fbe <__aeabi_fmul+0x1ae>
 8000ee4:	0023      	movs	r3, r4
 8000ee6:	337f      	adds	r3, #127	@ 0x7f
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	dc00      	bgt.n	8000eee <__aeabi_fmul+0xde>
 8000eec:	e0b1      	b.n	8001052 <__aeabi_fmul+0x242>
 8000eee:	0015      	movs	r5, r2
 8000ef0:	0771      	lsls	r1, r6, #29
 8000ef2:	d00b      	beq.n	8000f0c <__aeabi_fmul+0xfc>
 8000ef4:	200f      	movs	r0, #15
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	4030      	ands	r0, r6
 8000efa:	2804      	cmp	r0, #4
 8000efc:	d006      	beq.n	8000f0c <__aeabi_fmul+0xfc>
 8000efe:	3604      	adds	r6, #4
 8000f00:	0132      	lsls	r2, r6, #4
 8000f02:	d503      	bpl.n	8000f0c <__aeabi_fmul+0xfc>
 8000f04:	4b6e      	ldr	r3, [pc, #440]	@ (80010c0 <__aeabi_fmul+0x2b0>)
 8000f06:	401e      	ands	r6, r3
 8000f08:	000b      	movs	r3, r1
 8000f0a:	3380      	adds	r3, #128	@ 0x80
 8000f0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f0e:	dd00      	ble.n	8000f12 <__aeabi_fmul+0x102>
 8000f10:	e0bd      	b.n	800108e <__aeabi_fmul+0x27e>
 8000f12:	01b2      	lsls	r2, r6, #6
 8000f14:	0a52      	lsrs	r2, r2, #9
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	e048      	b.n	8000fac <__aeabi_fmul+0x19c>
 8000f1a:	2e00      	cmp	r6, #0
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_fmul+0x110>
 8000f1e:	e092      	b.n	8001046 <__aeabi_fmul+0x236>
 8000f20:	2308      	movs	r3, #8
 8000f22:	4699      	mov	r9, r3
 8000f24:	3b06      	subs	r3, #6
 8000f26:	469a      	mov	sl, r3
 8000f28:	027b      	lsls	r3, r7, #9
 8000f2a:	0a5b      	lsrs	r3, r3, #9
 8000f2c:	4698      	mov	r8, r3
 8000f2e:	007b      	lsls	r3, r7, #1
 8000f30:	24ff      	movs	r4, #255	@ 0xff
 8000f32:	0e1b      	lsrs	r3, r3, #24
 8000f34:	0fff      	lsrs	r7, r7, #31
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d18a      	bne.n	8000e50 <__aeabi_fmul+0x40>
 8000f3a:	4642      	mov	r2, r8
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d164      	bne.n	800100a <__aeabi_fmul+0x1fa>
 8000f40:	4649      	mov	r1, r9
 8000f42:	3201      	adds	r2, #1
 8000f44:	4311      	orrs	r1, r2
 8000f46:	4689      	mov	r9, r1
 8000f48:	290a      	cmp	r1, #10
 8000f4a:	dc08      	bgt.n	8000f5e <__aeabi_fmul+0x14e>
 8000f4c:	407d      	eors	r5, r7
 8000f4e:	2001      	movs	r0, #1
 8000f50:	b2ea      	uxtb	r2, r5
 8000f52:	2902      	cmp	r1, #2
 8000f54:	dc91      	bgt.n	8000e7a <__aeabi_fmul+0x6a>
 8000f56:	0015      	movs	r5, r2
 8000f58:	2200      	movs	r2, #0
 8000f5a:	e027      	b.n	8000fac <__aeabi_fmul+0x19c>
 8000f5c:	0015      	movs	r5, r2
 8000f5e:	4653      	mov	r3, sl
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fmul+0x156>
 8000f64:	e093      	b.n	800108e <__aeabi_fmul+0x27e>
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d01a      	beq.n	8000fa0 <__aeabi_fmul+0x190>
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d12c      	bne.n	8000fc8 <__aeabi_fmul+0x1b8>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	2200      	movs	r2, #0
 8000f72:	e01b      	b.n	8000fac <__aeabi_fmul+0x19c>
 8000f74:	4643      	mov	r3, r8
 8000f76:	34ff      	adds	r4, #255	@ 0xff
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d055      	beq.n	8001028 <__aeabi_fmul+0x218>
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	464b      	mov	r3, r9
 8000f80:	430b      	orrs	r3, r1
 8000f82:	0019      	movs	r1, r3
 8000f84:	2b0a      	cmp	r3, #10
 8000f86:	dc00      	bgt.n	8000f8a <__aeabi_fmul+0x17a>
 8000f88:	e092      	b.n	80010b0 <__aeabi_fmul+0x2a0>
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_fmul+0x180>
 8000f8e:	e08c      	b.n	80010aa <__aeabi_fmul+0x29a>
 8000f90:	2280      	movs	r2, #128	@ 0x80
 8000f92:	03d2      	lsls	r2, r2, #15
 8000f94:	4216      	tst	r6, r2
 8000f96:	d003      	beq.n	8000fa0 <__aeabi_fmul+0x190>
 8000f98:	4643      	mov	r3, r8
 8000f9a:	4213      	tst	r3, r2
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fmul+0x190>
 8000f9e:	e07d      	b.n	800109c <__aeabi_fmul+0x28c>
 8000fa0:	2280      	movs	r2, #128	@ 0x80
 8000fa2:	03d2      	lsls	r2, r2, #15
 8000fa4:	4332      	orrs	r2, r6
 8000fa6:	0252      	lsls	r2, r2, #9
 8000fa8:	0a52      	lsrs	r2, r2, #9
 8000faa:	23ff      	movs	r3, #255	@ 0xff
 8000fac:	05d8      	lsls	r0, r3, #23
 8000fae:	07ed      	lsls	r5, r5, #31
 8000fb0:	4310      	orrs	r0, r2
 8000fb2:	4328      	orrs	r0, r5
 8000fb4:	bce0      	pop	{r5, r6, r7}
 8000fb6:	46ba      	mov	sl, r7
 8000fb8:	46b1      	mov	r9, r6
 8000fba:	46a8      	mov	r8, r5
 8000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	0015      	movs	r5, r2
 8000fc2:	0871      	lsrs	r1, r6, #1
 8000fc4:	401e      	ands	r6, r3
 8000fc6:	430e      	orrs	r6, r1
 8000fc8:	0023      	movs	r3, r4
 8000fca:	3380      	adds	r3, #128	@ 0x80
 8000fcc:	1c61      	adds	r1, r4, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dd41      	ble.n	8001056 <__aeabi_fmul+0x246>
 8000fd2:	0772      	lsls	r2, r6, #29
 8000fd4:	d094      	beq.n	8000f00 <__aeabi_fmul+0xf0>
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	4032      	ands	r2, r6
 8000fda:	2a04      	cmp	r2, #4
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fmul+0x1d0>
 8000fde:	e78e      	b.n	8000efe <__aeabi_fmul+0xee>
 8000fe0:	e78e      	b.n	8000f00 <__aeabi_fmul+0xf0>
 8000fe2:	2e00      	cmp	r6, #0
 8000fe4:	d105      	bne.n	8000ff2 <__aeabi_fmul+0x1e2>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	4699      	mov	r9, r3
 8000fea:	3b03      	subs	r3, #3
 8000fec:	2400      	movs	r4, #0
 8000fee:	469a      	mov	sl, r3
 8000ff0:	e726      	b.n	8000e40 <__aeabi_fmul+0x30>
 8000ff2:	0030      	movs	r0, r6
 8000ff4:	f000 fbc8 	bl	8001788 <__clzsi2>
 8000ff8:	2476      	movs	r4, #118	@ 0x76
 8000ffa:	1f43      	subs	r3, r0, #5
 8000ffc:	409e      	lsls	r6, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	4264      	negs	r4, r4
 8001002:	4699      	mov	r9, r3
 8001004:	469a      	mov	sl, r3
 8001006:	1a24      	subs	r4, r4, r0
 8001008:	e71a      	b.n	8000e40 <__aeabi_fmul+0x30>
 800100a:	4640      	mov	r0, r8
 800100c:	f000 fbbc 	bl	8001788 <__clzsi2>
 8001010:	464b      	mov	r3, r9
 8001012:	1a24      	subs	r4, r4, r0
 8001014:	3c76      	subs	r4, #118	@ 0x76
 8001016:	2b0a      	cmp	r3, #10
 8001018:	dca1      	bgt.n	8000f5e <__aeabi_fmul+0x14e>
 800101a:	4643      	mov	r3, r8
 800101c:	3805      	subs	r0, #5
 800101e:	4083      	lsls	r3, r0
 8001020:	407d      	eors	r5, r7
 8001022:	4698      	mov	r8, r3
 8001024:	b2ea      	uxtb	r2, r5
 8001026:	e724      	b.n	8000e72 <__aeabi_fmul+0x62>
 8001028:	464a      	mov	r2, r9
 800102a:	3302      	adds	r3, #2
 800102c:	4313      	orrs	r3, r2
 800102e:	002a      	movs	r2, r5
 8001030:	407a      	eors	r2, r7
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	2b0a      	cmp	r3, #10
 8001036:	dc92      	bgt.n	8000f5e <__aeabi_fmul+0x14e>
 8001038:	4649      	mov	r1, r9
 800103a:	0015      	movs	r5, r2
 800103c:	2900      	cmp	r1, #0
 800103e:	d026      	beq.n	800108e <__aeabi_fmul+0x27e>
 8001040:	4699      	mov	r9, r3
 8001042:	2002      	movs	r0, #2
 8001044:	e719      	b.n	8000e7a <__aeabi_fmul+0x6a>
 8001046:	230c      	movs	r3, #12
 8001048:	4699      	mov	r9, r3
 800104a:	3b09      	subs	r3, #9
 800104c:	24ff      	movs	r4, #255	@ 0xff
 800104e:	469a      	mov	sl, r3
 8001050:	e6f6      	b.n	8000e40 <__aeabi_fmul+0x30>
 8001052:	0015      	movs	r5, r2
 8001054:	0021      	movs	r1, r4
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x250>
 800105e:	e786      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001060:	319e      	adds	r1, #158	@ 0x9e
 8001062:	0032      	movs	r2, r6
 8001064:	408e      	lsls	r6, r1
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e73      	subs	r3, r6, #1
 800106a:	419e      	sbcs	r6, r3
 800106c:	4332      	orrs	r2, r6
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x26c>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x26c>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d510      	bpl.n	80010a2 <__aeabi_fmul+0x292>
 8001080:	2301      	movs	r3, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e792      	b.n	8000fac <__aeabi_fmul+0x19c>
 8001086:	003d      	movs	r5, r7
 8001088:	4646      	mov	r6, r8
 800108a:	4682      	mov	sl, r0
 800108c:	e767      	b.n	8000f5e <__aeabi_fmul+0x14e>
 800108e:	23ff      	movs	r3, #255	@ 0xff
 8001090:	2200      	movs	r2, #0
 8001092:	e78b      	b.n	8000fac <__aeabi_fmul+0x19c>
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	2500      	movs	r5, #0
 8001098:	03d2      	lsls	r2, r2, #15
 800109a:	e786      	b.n	8000faa <__aeabi_fmul+0x19a>
 800109c:	003d      	movs	r5, r7
 800109e:	431a      	orrs	r2, r3
 80010a0:	e783      	b.n	8000faa <__aeabi_fmul+0x19a>
 80010a2:	0192      	lsls	r2, r2, #6
 80010a4:	2300      	movs	r3, #0
 80010a6:	0a52      	lsrs	r2, r2, #9
 80010a8:	e780      	b.n	8000fac <__aeabi_fmul+0x19c>
 80010aa:	003d      	movs	r5, r7
 80010ac:	4646      	mov	r6, r8
 80010ae:	e777      	b.n	8000fa0 <__aeabi_fmul+0x190>
 80010b0:	002a      	movs	r2, r5
 80010b2:	2301      	movs	r3, #1
 80010b4:	407a      	eors	r2, r7
 80010b6:	408b      	lsls	r3, r1
 80010b8:	2003      	movs	r0, #3
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	e6e9      	b.n	8000e92 <__aeabi_fmul+0x82>
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	f7ffffff 	.word	0xf7ffffff

080010c4 <__aeabi_fsub>:
 80010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c6:	4647      	mov	r7, r8
 80010c8:	46ce      	mov	lr, r9
 80010ca:	0243      	lsls	r3, r0, #9
 80010cc:	b580      	push	{r7, lr}
 80010ce:	0a5f      	lsrs	r7, r3, #9
 80010d0:	099b      	lsrs	r3, r3, #6
 80010d2:	0045      	lsls	r5, r0, #1
 80010d4:	004a      	lsls	r2, r1, #1
 80010d6:	469c      	mov	ip, r3
 80010d8:	024b      	lsls	r3, r1, #9
 80010da:	0fc4      	lsrs	r4, r0, #31
 80010dc:	0fce      	lsrs	r6, r1, #31
 80010de:	0e2d      	lsrs	r5, r5, #24
 80010e0:	0a58      	lsrs	r0, r3, #9
 80010e2:	0e12      	lsrs	r2, r2, #24
 80010e4:	0999      	lsrs	r1, r3, #6
 80010e6:	2aff      	cmp	r2, #255	@ 0xff
 80010e8:	d06b      	beq.n	80011c2 <__aeabi_fsub+0xfe>
 80010ea:	2301      	movs	r3, #1
 80010ec:	405e      	eors	r6, r3
 80010ee:	1aab      	subs	r3, r5, r2
 80010f0:	42b4      	cmp	r4, r6
 80010f2:	d04b      	beq.n	800118c <__aeabi_fsub+0xc8>
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	dc00      	bgt.n	80010fa <__aeabi_fsub+0x36>
 80010f8:	e0ff      	b.n	80012fa <__aeabi_fsub+0x236>
 80010fa:	2a00      	cmp	r2, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_fsub+0x3c>
 80010fe:	e088      	b.n	8001212 <__aeabi_fsub+0x14e>
 8001100:	2dff      	cmp	r5, #255	@ 0xff
 8001102:	d100      	bne.n	8001106 <__aeabi_fsub+0x42>
 8001104:	e0ef      	b.n	80012e6 <__aeabi_fsub+0x222>
 8001106:	2280      	movs	r2, #128	@ 0x80
 8001108:	04d2      	lsls	r2, r2, #19
 800110a:	4311      	orrs	r1, r2
 800110c:	2001      	movs	r0, #1
 800110e:	2b1b      	cmp	r3, #27
 8001110:	dc08      	bgt.n	8001124 <__aeabi_fsub+0x60>
 8001112:	0008      	movs	r0, r1
 8001114:	2220      	movs	r2, #32
 8001116:	40d8      	lsrs	r0, r3
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4099      	lsls	r1, r3
 800111c:	000b      	movs	r3, r1
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	4193      	sbcs	r3, r2
 8001122:	4318      	orrs	r0, r3
 8001124:	4663      	mov	r3, ip
 8001126:	1a1b      	subs	r3, r3, r0
 8001128:	469c      	mov	ip, r3
 800112a:	4663      	mov	r3, ip
 800112c:	015b      	lsls	r3, r3, #5
 800112e:	d400      	bmi.n	8001132 <__aeabi_fsub+0x6e>
 8001130:	e0cd      	b.n	80012ce <__aeabi_fsub+0x20a>
 8001132:	4663      	mov	r3, ip
 8001134:	019f      	lsls	r7, r3, #6
 8001136:	09bf      	lsrs	r7, r7, #6
 8001138:	0038      	movs	r0, r7
 800113a:	f000 fb25 	bl	8001788 <__clzsi2>
 800113e:	003b      	movs	r3, r7
 8001140:	3805      	subs	r0, #5
 8001142:	4083      	lsls	r3, r0
 8001144:	4285      	cmp	r5, r0
 8001146:	dc00      	bgt.n	800114a <__aeabi_fsub+0x86>
 8001148:	e0a2      	b.n	8001290 <__aeabi_fsub+0x1cc>
 800114a:	4ab7      	ldr	r2, [pc, #732]	@ (8001428 <__aeabi_fsub+0x364>)
 800114c:	1a2d      	subs	r5, r5, r0
 800114e:	401a      	ands	r2, r3
 8001150:	4694      	mov	ip, r2
 8001152:	075a      	lsls	r2, r3, #29
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x94>
 8001156:	e0c3      	b.n	80012e0 <__aeabi_fsub+0x21c>
 8001158:	220f      	movs	r2, #15
 800115a:	4013      	ands	r3, r2
 800115c:	2b04      	cmp	r3, #4
 800115e:	d100      	bne.n	8001162 <__aeabi_fsub+0x9e>
 8001160:	e0be      	b.n	80012e0 <__aeabi_fsub+0x21c>
 8001162:	2304      	movs	r3, #4
 8001164:	4698      	mov	r8, r3
 8001166:	44c4      	add	ip, r8
 8001168:	4663      	mov	r3, ip
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	d400      	bmi.n	8001170 <__aeabi_fsub+0xac>
 800116e:	e0b7      	b.n	80012e0 <__aeabi_fsub+0x21c>
 8001170:	1c68      	adds	r0, r5, #1
 8001172:	2dfe      	cmp	r5, #254	@ 0xfe
 8001174:	d000      	beq.n	8001178 <__aeabi_fsub+0xb4>
 8001176:	e0a5      	b.n	80012c4 <__aeabi_fsub+0x200>
 8001178:	20ff      	movs	r0, #255	@ 0xff
 800117a:	2200      	movs	r2, #0
 800117c:	05c0      	lsls	r0, r0, #23
 800117e:	4310      	orrs	r0, r2
 8001180:	07e4      	lsls	r4, r4, #31
 8001182:	4320      	orrs	r0, r4
 8001184:	bcc0      	pop	{r6, r7}
 8001186:	46b9      	mov	r9, r7
 8001188:	46b0      	mov	r8, r6
 800118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800118c:	2b00      	cmp	r3, #0
 800118e:	dc00      	bgt.n	8001192 <__aeabi_fsub+0xce>
 8001190:	e1eb      	b.n	800156a <__aeabi_fsub+0x4a6>
 8001192:	2a00      	cmp	r2, #0
 8001194:	d046      	beq.n	8001224 <__aeabi_fsub+0x160>
 8001196:	2dff      	cmp	r5, #255	@ 0xff
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0xd8>
 800119a:	e0a4      	b.n	80012e6 <__aeabi_fsub+0x222>
 800119c:	2280      	movs	r2, #128	@ 0x80
 800119e:	04d2      	lsls	r2, r2, #19
 80011a0:	4311      	orrs	r1, r2
 80011a2:	2b1b      	cmp	r3, #27
 80011a4:	dc00      	bgt.n	80011a8 <__aeabi_fsub+0xe4>
 80011a6:	e0fb      	b.n	80013a0 <__aeabi_fsub+0x2dc>
 80011a8:	2305      	movs	r3, #5
 80011aa:	4698      	mov	r8, r3
 80011ac:	002b      	movs	r3, r5
 80011ae:	44c4      	add	ip, r8
 80011b0:	4662      	mov	r2, ip
 80011b2:	08d7      	lsrs	r7, r2, #3
 80011b4:	2bff      	cmp	r3, #255	@ 0xff
 80011b6:	d100      	bne.n	80011ba <__aeabi_fsub+0xf6>
 80011b8:	e095      	b.n	80012e6 <__aeabi_fsub+0x222>
 80011ba:	027a      	lsls	r2, r7, #9
 80011bc:	0a52      	lsrs	r2, r2, #9
 80011be:	b2d8      	uxtb	r0, r3
 80011c0:	e7dc      	b.n	800117c <__aeabi_fsub+0xb8>
 80011c2:	002b      	movs	r3, r5
 80011c4:	3bff      	subs	r3, #255	@ 0xff
 80011c6:	4699      	mov	r9, r3
 80011c8:	2900      	cmp	r1, #0
 80011ca:	d118      	bne.n	80011fe <__aeabi_fsub+0x13a>
 80011cc:	2301      	movs	r3, #1
 80011ce:	405e      	eors	r6, r3
 80011d0:	42b4      	cmp	r4, r6
 80011d2:	d100      	bne.n	80011d6 <__aeabi_fsub+0x112>
 80011d4:	e0ca      	b.n	800136c <__aeabi_fsub+0x2a8>
 80011d6:	464b      	mov	r3, r9
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d02d      	beq.n	8001238 <__aeabi_fsub+0x174>
 80011dc:	2d00      	cmp	r5, #0
 80011de:	d000      	beq.n	80011e2 <__aeabi_fsub+0x11e>
 80011e0:	e13c      	b.n	800145c <__aeabi_fsub+0x398>
 80011e2:	23ff      	movs	r3, #255	@ 0xff
 80011e4:	4664      	mov	r4, ip
 80011e6:	2c00      	cmp	r4, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x128>
 80011ea:	e15f      	b.n	80014ac <__aeabi_fsub+0x3e8>
 80011ec:	1e5d      	subs	r5, r3, #1
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d100      	bne.n	80011f4 <__aeabi_fsub+0x130>
 80011f2:	e174      	b.n	80014de <__aeabi_fsub+0x41a>
 80011f4:	0034      	movs	r4, r6
 80011f6:	2bff      	cmp	r3, #255	@ 0xff
 80011f8:	d074      	beq.n	80012e4 <__aeabi_fsub+0x220>
 80011fa:	002b      	movs	r3, r5
 80011fc:	e103      	b.n	8001406 <__aeabi_fsub+0x342>
 80011fe:	42b4      	cmp	r4, r6
 8001200:	d100      	bne.n	8001204 <__aeabi_fsub+0x140>
 8001202:	e09c      	b.n	800133e <__aeabi_fsub+0x27a>
 8001204:	2b00      	cmp	r3, #0
 8001206:	d017      	beq.n	8001238 <__aeabi_fsub+0x174>
 8001208:	2d00      	cmp	r5, #0
 800120a:	d0ea      	beq.n	80011e2 <__aeabi_fsub+0x11e>
 800120c:	0007      	movs	r7, r0
 800120e:	0034      	movs	r4, r6
 8001210:	e06c      	b.n	80012ec <__aeabi_fsub+0x228>
 8001212:	2900      	cmp	r1, #0
 8001214:	d0cc      	beq.n	80011b0 <__aeabi_fsub+0xec>
 8001216:	1e5a      	subs	r2, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	d02b      	beq.n	8001274 <__aeabi_fsub+0x1b0>
 800121c:	2bff      	cmp	r3, #255	@ 0xff
 800121e:	d062      	beq.n	80012e6 <__aeabi_fsub+0x222>
 8001220:	0013      	movs	r3, r2
 8001222:	e773      	b.n	800110c <__aeabi_fsub+0x48>
 8001224:	2900      	cmp	r1, #0
 8001226:	d0c3      	beq.n	80011b0 <__aeabi_fsub+0xec>
 8001228:	1e5a      	subs	r2, r3, #1
 800122a:	2b01      	cmp	r3, #1
 800122c:	d100      	bne.n	8001230 <__aeabi_fsub+0x16c>
 800122e:	e11e      	b.n	800146e <__aeabi_fsub+0x3aa>
 8001230:	2bff      	cmp	r3, #255	@ 0xff
 8001232:	d058      	beq.n	80012e6 <__aeabi_fsub+0x222>
 8001234:	0013      	movs	r3, r2
 8001236:	e7b4      	b.n	80011a2 <__aeabi_fsub+0xde>
 8001238:	22fe      	movs	r2, #254	@ 0xfe
 800123a:	1c6b      	adds	r3, r5, #1
 800123c:	421a      	tst	r2, r3
 800123e:	d10d      	bne.n	800125c <__aeabi_fsub+0x198>
 8001240:	2d00      	cmp	r5, #0
 8001242:	d060      	beq.n	8001306 <__aeabi_fsub+0x242>
 8001244:	4663      	mov	r3, ip
 8001246:	2b00      	cmp	r3, #0
 8001248:	d000      	beq.n	800124c <__aeabi_fsub+0x188>
 800124a:	e120      	b.n	800148e <__aeabi_fsub+0x3ca>
 800124c:	2900      	cmp	r1, #0
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x18e>
 8001250:	e128      	b.n	80014a4 <__aeabi_fsub+0x3e0>
 8001252:	2280      	movs	r2, #128	@ 0x80
 8001254:	2400      	movs	r4, #0
 8001256:	20ff      	movs	r0, #255	@ 0xff
 8001258:	03d2      	lsls	r2, r2, #15
 800125a:	e78f      	b.n	800117c <__aeabi_fsub+0xb8>
 800125c:	4663      	mov	r3, ip
 800125e:	1a5f      	subs	r7, r3, r1
 8001260:	017b      	lsls	r3, r7, #5
 8001262:	d500      	bpl.n	8001266 <__aeabi_fsub+0x1a2>
 8001264:	e0fe      	b.n	8001464 <__aeabi_fsub+0x3a0>
 8001266:	2f00      	cmp	r7, #0
 8001268:	d000      	beq.n	800126c <__aeabi_fsub+0x1a8>
 800126a:	e765      	b.n	8001138 <__aeabi_fsub+0x74>
 800126c:	2400      	movs	r4, #0
 800126e:	2000      	movs	r0, #0
 8001270:	2200      	movs	r2, #0
 8001272:	e783      	b.n	800117c <__aeabi_fsub+0xb8>
 8001274:	4663      	mov	r3, ip
 8001276:	1a59      	subs	r1, r3, r1
 8001278:	014b      	lsls	r3, r1, #5
 800127a:	d400      	bmi.n	800127e <__aeabi_fsub+0x1ba>
 800127c:	e119      	b.n	80014b2 <__aeabi_fsub+0x3ee>
 800127e:	018f      	lsls	r7, r1, #6
 8001280:	09bf      	lsrs	r7, r7, #6
 8001282:	0038      	movs	r0, r7
 8001284:	f000 fa80 	bl	8001788 <__clzsi2>
 8001288:	003b      	movs	r3, r7
 800128a:	3805      	subs	r0, #5
 800128c:	4083      	lsls	r3, r0
 800128e:	2501      	movs	r5, #1
 8001290:	2220      	movs	r2, #32
 8001292:	1b40      	subs	r0, r0, r5
 8001294:	3001      	adds	r0, #1
 8001296:	1a12      	subs	r2, r2, r0
 8001298:	0019      	movs	r1, r3
 800129a:	4093      	lsls	r3, r2
 800129c:	40c1      	lsrs	r1, r0
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	4193      	sbcs	r3, r2
 80012a2:	4319      	orrs	r1, r3
 80012a4:	468c      	mov	ip, r1
 80012a6:	1e0b      	subs	r3, r1, #0
 80012a8:	d0e1      	beq.n	800126e <__aeabi_fsub+0x1aa>
 80012aa:	075b      	lsls	r3, r3, #29
 80012ac:	d100      	bne.n	80012b0 <__aeabi_fsub+0x1ec>
 80012ae:	e152      	b.n	8001556 <__aeabi_fsub+0x492>
 80012b0:	230f      	movs	r3, #15
 80012b2:	2500      	movs	r5, #0
 80012b4:	400b      	ands	r3, r1
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d000      	beq.n	80012bc <__aeabi_fsub+0x1f8>
 80012ba:	e752      	b.n	8001162 <__aeabi_fsub+0x9e>
 80012bc:	2001      	movs	r0, #1
 80012be:	014a      	lsls	r2, r1, #5
 80012c0:	d400      	bmi.n	80012c4 <__aeabi_fsub+0x200>
 80012c2:	e092      	b.n	80013ea <__aeabi_fsub+0x326>
 80012c4:	b2c0      	uxtb	r0, r0
 80012c6:	4663      	mov	r3, ip
 80012c8:	019a      	lsls	r2, r3, #6
 80012ca:	0a52      	lsrs	r2, r2, #9
 80012cc:	e756      	b.n	800117c <__aeabi_fsub+0xb8>
 80012ce:	4663      	mov	r3, ip
 80012d0:	075b      	lsls	r3, r3, #29
 80012d2:	d005      	beq.n	80012e0 <__aeabi_fsub+0x21c>
 80012d4:	230f      	movs	r3, #15
 80012d6:	4662      	mov	r2, ip
 80012d8:	4013      	ands	r3, r2
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d000      	beq.n	80012e0 <__aeabi_fsub+0x21c>
 80012de:	e740      	b.n	8001162 <__aeabi_fsub+0x9e>
 80012e0:	002b      	movs	r3, r5
 80012e2:	e765      	b.n	80011b0 <__aeabi_fsub+0xec>
 80012e4:	0007      	movs	r7, r0
 80012e6:	2f00      	cmp	r7, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_fsub+0x228>
 80012ea:	e745      	b.n	8001178 <__aeabi_fsub+0xb4>
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	03d2      	lsls	r2, r2, #15
 80012f0:	433a      	orrs	r2, r7
 80012f2:	0252      	lsls	r2, r2, #9
 80012f4:	20ff      	movs	r0, #255	@ 0xff
 80012f6:	0a52      	lsrs	r2, r2, #9
 80012f8:	e740      	b.n	800117c <__aeabi_fsub+0xb8>
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d179      	bne.n	80013f2 <__aeabi_fsub+0x32e>
 80012fe:	22fe      	movs	r2, #254	@ 0xfe
 8001300:	1c6b      	adds	r3, r5, #1
 8001302:	421a      	tst	r2, r3
 8001304:	d1aa      	bne.n	800125c <__aeabi_fsub+0x198>
 8001306:	4663      	mov	r3, ip
 8001308:	2b00      	cmp	r3, #0
 800130a:	d100      	bne.n	800130e <__aeabi_fsub+0x24a>
 800130c:	e0f5      	b.n	80014fa <__aeabi_fsub+0x436>
 800130e:	2900      	cmp	r1, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_fsub+0x250>
 8001312:	e0d1      	b.n	80014b8 <__aeabi_fsub+0x3f4>
 8001314:	1a5f      	subs	r7, r3, r1
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	04db      	lsls	r3, r3, #19
 800131a:	421f      	tst	r7, r3
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x25c>
 800131e:	e10e      	b.n	800153e <__aeabi_fsub+0x47a>
 8001320:	4662      	mov	r2, ip
 8001322:	2401      	movs	r4, #1
 8001324:	1a8a      	subs	r2, r1, r2
 8001326:	4694      	mov	ip, r2
 8001328:	2000      	movs	r0, #0
 800132a:	4034      	ands	r4, r6
 800132c:	2a00      	cmp	r2, #0
 800132e:	d100      	bne.n	8001332 <__aeabi_fsub+0x26e>
 8001330:	e724      	b.n	800117c <__aeabi_fsub+0xb8>
 8001332:	2001      	movs	r0, #1
 8001334:	421a      	tst	r2, r3
 8001336:	d1c6      	bne.n	80012c6 <__aeabi_fsub+0x202>
 8001338:	2300      	movs	r3, #0
 800133a:	08d7      	lsrs	r7, r2, #3
 800133c:	e73d      	b.n	80011ba <__aeabi_fsub+0xf6>
 800133e:	2b00      	cmp	r3, #0
 8001340:	d017      	beq.n	8001372 <__aeabi_fsub+0x2ae>
 8001342:	2d00      	cmp	r5, #0
 8001344:	d000      	beq.n	8001348 <__aeabi_fsub+0x284>
 8001346:	e0af      	b.n	80014a8 <__aeabi_fsub+0x3e4>
 8001348:	23ff      	movs	r3, #255	@ 0xff
 800134a:	4665      	mov	r5, ip
 800134c:	2d00      	cmp	r5, #0
 800134e:	d100      	bne.n	8001352 <__aeabi_fsub+0x28e>
 8001350:	e0ad      	b.n	80014ae <__aeabi_fsub+0x3ea>
 8001352:	1e5e      	subs	r6, r3, #1
 8001354:	2b01      	cmp	r3, #1
 8001356:	d100      	bne.n	800135a <__aeabi_fsub+0x296>
 8001358:	e089      	b.n	800146e <__aeabi_fsub+0x3aa>
 800135a:	2bff      	cmp	r3, #255	@ 0xff
 800135c:	d0c2      	beq.n	80012e4 <__aeabi_fsub+0x220>
 800135e:	2e1b      	cmp	r6, #27
 8001360:	dc00      	bgt.n	8001364 <__aeabi_fsub+0x2a0>
 8001362:	e0ab      	b.n	80014bc <__aeabi_fsub+0x3f8>
 8001364:	1d4b      	adds	r3, r1, #5
 8001366:	469c      	mov	ip, r3
 8001368:	0013      	movs	r3, r2
 800136a:	e721      	b.n	80011b0 <__aeabi_fsub+0xec>
 800136c:	464b      	mov	r3, r9
 800136e:	2b00      	cmp	r3, #0
 8001370:	d170      	bne.n	8001454 <__aeabi_fsub+0x390>
 8001372:	22fe      	movs	r2, #254	@ 0xfe
 8001374:	1c6b      	adds	r3, r5, #1
 8001376:	421a      	tst	r2, r3
 8001378:	d15e      	bne.n	8001438 <__aeabi_fsub+0x374>
 800137a:	2d00      	cmp	r5, #0
 800137c:	d000      	beq.n	8001380 <__aeabi_fsub+0x2bc>
 800137e:	e0c3      	b.n	8001508 <__aeabi_fsub+0x444>
 8001380:	4663      	mov	r3, ip
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x2c4>
 8001386:	e0d0      	b.n	800152a <__aeabi_fsub+0x466>
 8001388:	2900      	cmp	r1, #0
 800138a:	d100      	bne.n	800138e <__aeabi_fsub+0x2ca>
 800138c:	e094      	b.n	80014b8 <__aeabi_fsub+0x3f4>
 800138e:	000a      	movs	r2, r1
 8001390:	4462      	add	r2, ip
 8001392:	0153      	lsls	r3, r2, #5
 8001394:	d400      	bmi.n	8001398 <__aeabi_fsub+0x2d4>
 8001396:	e0d8      	b.n	800154a <__aeabi_fsub+0x486>
 8001398:	0192      	lsls	r2, r2, #6
 800139a:	2001      	movs	r0, #1
 800139c:	0a52      	lsrs	r2, r2, #9
 800139e:	e6ed      	b.n	800117c <__aeabi_fsub+0xb8>
 80013a0:	0008      	movs	r0, r1
 80013a2:	2220      	movs	r2, #32
 80013a4:	40d8      	lsrs	r0, r3
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	4099      	lsls	r1, r3
 80013aa:	000b      	movs	r3, r1
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	4193      	sbcs	r3, r2
 80013b0:	4303      	orrs	r3, r0
 80013b2:	449c      	add	ip, r3
 80013b4:	4663      	mov	r3, ip
 80013b6:	015b      	lsls	r3, r3, #5
 80013b8:	d589      	bpl.n	80012ce <__aeabi_fsub+0x20a>
 80013ba:	3501      	adds	r5, #1
 80013bc:	2dff      	cmp	r5, #255	@ 0xff
 80013be:	d100      	bne.n	80013c2 <__aeabi_fsub+0x2fe>
 80013c0:	e6da      	b.n	8001178 <__aeabi_fsub+0xb4>
 80013c2:	4662      	mov	r2, ip
 80013c4:	2301      	movs	r3, #1
 80013c6:	4919      	ldr	r1, [pc, #100]	@ (800142c <__aeabi_fsub+0x368>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	0852      	lsrs	r2, r2, #1
 80013cc:	400a      	ands	r2, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	4694      	mov	ip, r2
 80013d4:	075b      	lsls	r3, r3, #29
 80013d6:	d004      	beq.n	80013e2 <__aeabi_fsub+0x31e>
 80013d8:	230f      	movs	r3, #15
 80013da:	4013      	ands	r3, r2
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_fsub+0x31e>
 80013e0:	e6bf      	b.n	8001162 <__aeabi_fsub+0x9e>
 80013e2:	4663      	mov	r3, ip
 80013e4:	015b      	lsls	r3, r3, #5
 80013e6:	d500      	bpl.n	80013ea <__aeabi_fsub+0x326>
 80013e8:	e6c2      	b.n	8001170 <__aeabi_fsub+0xac>
 80013ea:	4663      	mov	r3, ip
 80013ec:	08df      	lsrs	r7, r3, #3
 80013ee:	002b      	movs	r3, r5
 80013f0:	e6e3      	b.n	80011ba <__aeabi_fsub+0xf6>
 80013f2:	1b53      	subs	r3, r2, r5
 80013f4:	2d00      	cmp	r5, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_fsub+0x336>
 80013f8:	e6f4      	b.n	80011e4 <__aeabi_fsub+0x120>
 80013fa:	2080      	movs	r0, #128	@ 0x80
 80013fc:	4664      	mov	r4, ip
 80013fe:	04c0      	lsls	r0, r0, #19
 8001400:	4304      	orrs	r4, r0
 8001402:	46a4      	mov	ip, r4
 8001404:	0034      	movs	r4, r6
 8001406:	2001      	movs	r0, #1
 8001408:	2b1b      	cmp	r3, #27
 800140a:	dc09      	bgt.n	8001420 <__aeabi_fsub+0x35c>
 800140c:	2520      	movs	r5, #32
 800140e:	4660      	mov	r0, ip
 8001410:	40d8      	lsrs	r0, r3
 8001412:	1aeb      	subs	r3, r5, r3
 8001414:	4665      	mov	r5, ip
 8001416:	409d      	lsls	r5, r3
 8001418:	002b      	movs	r3, r5
 800141a:	1e5d      	subs	r5, r3, #1
 800141c:	41ab      	sbcs	r3, r5
 800141e:	4318      	orrs	r0, r3
 8001420:	1a0b      	subs	r3, r1, r0
 8001422:	469c      	mov	ip, r3
 8001424:	0015      	movs	r5, r2
 8001426:	e680      	b.n	800112a <__aeabi_fsub+0x66>
 8001428:	fbffffff 	.word	0xfbffffff
 800142c:	7dffffff 	.word	0x7dffffff
 8001430:	22fe      	movs	r2, #254	@ 0xfe
 8001432:	1c6b      	adds	r3, r5, #1
 8001434:	4213      	tst	r3, r2
 8001436:	d0a3      	beq.n	8001380 <__aeabi_fsub+0x2bc>
 8001438:	2bff      	cmp	r3, #255	@ 0xff
 800143a:	d100      	bne.n	800143e <__aeabi_fsub+0x37a>
 800143c:	e69c      	b.n	8001178 <__aeabi_fsub+0xb4>
 800143e:	4461      	add	r1, ip
 8001440:	0849      	lsrs	r1, r1, #1
 8001442:	074a      	lsls	r2, r1, #29
 8001444:	d049      	beq.n	80014da <__aeabi_fsub+0x416>
 8001446:	220f      	movs	r2, #15
 8001448:	400a      	ands	r2, r1
 800144a:	2a04      	cmp	r2, #4
 800144c:	d045      	beq.n	80014da <__aeabi_fsub+0x416>
 800144e:	1d0a      	adds	r2, r1, #4
 8001450:	4694      	mov	ip, r2
 8001452:	e6ad      	b.n	80011b0 <__aeabi_fsub+0xec>
 8001454:	2d00      	cmp	r5, #0
 8001456:	d100      	bne.n	800145a <__aeabi_fsub+0x396>
 8001458:	e776      	b.n	8001348 <__aeabi_fsub+0x284>
 800145a:	e68d      	b.n	8001178 <__aeabi_fsub+0xb4>
 800145c:	0034      	movs	r4, r6
 800145e:	20ff      	movs	r0, #255	@ 0xff
 8001460:	2200      	movs	r2, #0
 8001462:	e68b      	b.n	800117c <__aeabi_fsub+0xb8>
 8001464:	4663      	mov	r3, ip
 8001466:	2401      	movs	r4, #1
 8001468:	1acf      	subs	r7, r1, r3
 800146a:	4034      	ands	r4, r6
 800146c:	e664      	b.n	8001138 <__aeabi_fsub+0x74>
 800146e:	4461      	add	r1, ip
 8001470:	014b      	lsls	r3, r1, #5
 8001472:	d56d      	bpl.n	8001550 <__aeabi_fsub+0x48c>
 8001474:	0848      	lsrs	r0, r1, #1
 8001476:	4944      	ldr	r1, [pc, #272]	@ (8001588 <__aeabi_fsub+0x4c4>)
 8001478:	4001      	ands	r1, r0
 800147a:	0743      	lsls	r3, r0, #29
 800147c:	d02c      	beq.n	80014d8 <__aeabi_fsub+0x414>
 800147e:	230f      	movs	r3, #15
 8001480:	4003      	ands	r3, r0
 8001482:	2b04      	cmp	r3, #4
 8001484:	d028      	beq.n	80014d8 <__aeabi_fsub+0x414>
 8001486:	1d0b      	adds	r3, r1, #4
 8001488:	469c      	mov	ip, r3
 800148a:	2302      	movs	r3, #2
 800148c:	e690      	b.n	80011b0 <__aeabi_fsub+0xec>
 800148e:	2900      	cmp	r1, #0
 8001490:	d100      	bne.n	8001494 <__aeabi_fsub+0x3d0>
 8001492:	e72b      	b.n	80012ec <__aeabi_fsub+0x228>
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	03db      	lsls	r3, r3, #15
 8001498:	429f      	cmp	r7, r3
 800149a:	d200      	bcs.n	800149e <__aeabi_fsub+0x3da>
 800149c:	e726      	b.n	80012ec <__aeabi_fsub+0x228>
 800149e:	4298      	cmp	r0, r3
 80014a0:	d300      	bcc.n	80014a4 <__aeabi_fsub+0x3e0>
 80014a2:	e723      	b.n	80012ec <__aeabi_fsub+0x228>
 80014a4:	2401      	movs	r4, #1
 80014a6:	4034      	ands	r4, r6
 80014a8:	0007      	movs	r7, r0
 80014aa:	e71f      	b.n	80012ec <__aeabi_fsub+0x228>
 80014ac:	0034      	movs	r4, r6
 80014ae:	468c      	mov	ip, r1
 80014b0:	e67e      	b.n	80011b0 <__aeabi_fsub+0xec>
 80014b2:	2301      	movs	r3, #1
 80014b4:	08cf      	lsrs	r7, r1, #3
 80014b6:	e680      	b.n	80011ba <__aeabi_fsub+0xf6>
 80014b8:	2300      	movs	r3, #0
 80014ba:	e67e      	b.n	80011ba <__aeabi_fsub+0xf6>
 80014bc:	2020      	movs	r0, #32
 80014be:	4665      	mov	r5, ip
 80014c0:	1b80      	subs	r0, r0, r6
 80014c2:	4085      	lsls	r5, r0
 80014c4:	4663      	mov	r3, ip
 80014c6:	0028      	movs	r0, r5
 80014c8:	40f3      	lsrs	r3, r6
 80014ca:	1e45      	subs	r5, r0, #1
 80014cc:	41a8      	sbcs	r0, r5
 80014ce:	4303      	orrs	r3, r0
 80014d0:	469c      	mov	ip, r3
 80014d2:	0015      	movs	r5, r2
 80014d4:	448c      	add	ip, r1
 80014d6:	e76d      	b.n	80013b4 <__aeabi_fsub+0x2f0>
 80014d8:	2302      	movs	r3, #2
 80014da:	08cf      	lsrs	r7, r1, #3
 80014dc:	e66d      	b.n	80011ba <__aeabi_fsub+0xf6>
 80014de:	1b0f      	subs	r7, r1, r4
 80014e0:	017b      	lsls	r3, r7, #5
 80014e2:	d528      	bpl.n	8001536 <__aeabi_fsub+0x472>
 80014e4:	01bf      	lsls	r7, r7, #6
 80014e6:	09bf      	lsrs	r7, r7, #6
 80014e8:	0038      	movs	r0, r7
 80014ea:	f000 f94d 	bl	8001788 <__clzsi2>
 80014ee:	003b      	movs	r3, r7
 80014f0:	3805      	subs	r0, #5
 80014f2:	4083      	lsls	r3, r0
 80014f4:	0034      	movs	r4, r6
 80014f6:	2501      	movs	r5, #1
 80014f8:	e6ca      	b.n	8001290 <__aeabi_fsub+0x1cc>
 80014fa:	2900      	cmp	r1, #0
 80014fc:	d100      	bne.n	8001500 <__aeabi_fsub+0x43c>
 80014fe:	e6b5      	b.n	800126c <__aeabi_fsub+0x1a8>
 8001500:	2401      	movs	r4, #1
 8001502:	0007      	movs	r7, r0
 8001504:	4034      	ands	r4, r6
 8001506:	e658      	b.n	80011ba <__aeabi_fsub+0xf6>
 8001508:	4663      	mov	r3, ip
 800150a:	2b00      	cmp	r3, #0
 800150c:	d100      	bne.n	8001510 <__aeabi_fsub+0x44c>
 800150e:	e6e9      	b.n	80012e4 <__aeabi_fsub+0x220>
 8001510:	2900      	cmp	r1, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x452>
 8001514:	e6ea      	b.n	80012ec <__aeabi_fsub+0x228>
 8001516:	2380      	movs	r3, #128	@ 0x80
 8001518:	03db      	lsls	r3, r3, #15
 800151a:	429f      	cmp	r7, r3
 800151c:	d200      	bcs.n	8001520 <__aeabi_fsub+0x45c>
 800151e:	e6e5      	b.n	80012ec <__aeabi_fsub+0x228>
 8001520:	4298      	cmp	r0, r3
 8001522:	d300      	bcc.n	8001526 <__aeabi_fsub+0x462>
 8001524:	e6e2      	b.n	80012ec <__aeabi_fsub+0x228>
 8001526:	0007      	movs	r7, r0
 8001528:	e6e0      	b.n	80012ec <__aeabi_fsub+0x228>
 800152a:	2900      	cmp	r1, #0
 800152c:	d100      	bne.n	8001530 <__aeabi_fsub+0x46c>
 800152e:	e69e      	b.n	800126e <__aeabi_fsub+0x1aa>
 8001530:	2300      	movs	r3, #0
 8001532:	08cf      	lsrs	r7, r1, #3
 8001534:	e641      	b.n	80011ba <__aeabi_fsub+0xf6>
 8001536:	0034      	movs	r4, r6
 8001538:	2301      	movs	r3, #1
 800153a:	08ff      	lsrs	r7, r7, #3
 800153c:	e63d      	b.n	80011ba <__aeabi_fsub+0xf6>
 800153e:	2f00      	cmp	r7, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x480>
 8001542:	e693      	b.n	800126c <__aeabi_fsub+0x1a8>
 8001544:	2300      	movs	r3, #0
 8001546:	08ff      	lsrs	r7, r7, #3
 8001548:	e637      	b.n	80011ba <__aeabi_fsub+0xf6>
 800154a:	2300      	movs	r3, #0
 800154c:	08d7      	lsrs	r7, r2, #3
 800154e:	e634      	b.n	80011ba <__aeabi_fsub+0xf6>
 8001550:	2301      	movs	r3, #1
 8001552:	08cf      	lsrs	r7, r1, #3
 8001554:	e631      	b.n	80011ba <__aeabi_fsub+0xf6>
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	000b      	movs	r3, r1
 800155a:	04d2      	lsls	r2, r2, #19
 800155c:	2001      	movs	r0, #1
 800155e:	4013      	ands	r3, r2
 8001560:	4211      	tst	r1, r2
 8001562:	d000      	beq.n	8001566 <__aeabi_fsub+0x4a2>
 8001564:	e6ae      	b.n	80012c4 <__aeabi_fsub+0x200>
 8001566:	08cf      	lsrs	r7, r1, #3
 8001568:	e627      	b.n	80011ba <__aeabi_fsub+0xf6>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d100      	bne.n	8001570 <__aeabi_fsub+0x4ac>
 800156e:	e75f      	b.n	8001430 <__aeabi_fsub+0x36c>
 8001570:	1b56      	subs	r6, r2, r5
 8001572:	2d00      	cmp	r5, #0
 8001574:	d101      	bne.n	800157a <__aeabi_fsub+0x4b6>
 8001576:	0033      	movs	r3, r6
 8001578:	e6e7      	b.n	800134a <__aeabi_fsub+0x286>
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	4660      	mov	r0, ip
 800157e:	04db      	lsls	r3, r3, #19
 8001580:	4318      	orrs	r0, r3
 8001582:	4684      	mov	ip, r0
 8001584:	e6eb      	b.n	800135e <__aeabi_fsub+0x29a>
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	7dffffff 	.word	0x7dffffff

0800158c <__aeabi_f2iz>:
 800158c:	0241      	lsls	r1, r0, #9
 800158e:	0042      	lsls	r2, r0, #1
 8001590:	0fc3      	lsrs	r3, r0, #31
 8001592:	0a49      	lsrs	r1, r1, #9
 8001594:	2000      	movs	r0, #0
 8001596:	0e12      	lsrs	r2, r2, #24
 8001598:	2a7e      	cmp	r2, #126	@ 0x7e
 800159a:	dd03      	ble.n	80015a4 <__aeabi_f2iz+0x18>
 800159c:	2a9d      	cmp	r2, #157	@ 0x9d
 800159e:	dd02      	ble.n	80015a6 <__aeabi_f2iz+0x1a>
 80015a0:	4a09      	ldr	r2, [pc, #36]	@ (80015c8 <__aeabi_f2iz+0x3c>)
 80015a2:	1898      	adds	r0, r3, r2
 80015a4:	4770      	bx	lr
 80015a6:	2080      	movs	r0, #128	@ 0x80
 80015a8:	0400      	lsls	r0, r0, #16
 80015aa:	4301      	orrs	r1, r0
 80015ac:	2a95      	cmp	r2, #149	@ 0x95
 80015ae:	dc07      	bgt.n	80015c0 <__aeabi_f2iz+0x34>
 80015b0:	2096      	movs	r0, #150	@ 0x96
 80015b2:	1a82      	subs	r2, r0, r2
 80015b4:	40d1      	lsrs	r1, r2
 80015b6:	4248      	negs	r0, r1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f3      	bne.n	80015a4 <__aeabi_f2iz+0x18>
 80015bc:	0008      	movs	r0, r1
 80015be:	e7f1      	b.n	80015a4 <__aeabi_f2iz+0x18>
 80015c0:	3a96      	subs	r2, #150	@ 0x96
 80015c2:	4091      	lsls	r1, r2
 80015c4:	e7f7      	b.n	80015b6 <__aeabi_f2iz+0x2a>
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	7fffffff 	.word	0x7fffffff

080015cc <__aeabi_i2f>:
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d012      	beq.n	80015f8 <__aeabi_i2f+0x2c>
 80015d2:	17c3      	asrs	r3, r0, #31
 80015d4:	18c5      	adds	r5, r0, r3
 80015d6:	405d      	eors	r5, r3
 80015d8:	0fc4      	lsrs	r4, r0, #31
 80015da:	0028      	movs	r0, r5
 80015dc:	f000 f8d4 	bl	8001788 <__clzsi2>
 80015e0:	239e      	movs	r3, #158	@ 0x9e
 80015e2:	1a1b      	subs	r3, r3, r0
 80015e4:	2b96      	cmp	r3, #150	@ 0x96
 80015e6:	dc0f      	bgt.n	8001608 <__aeabi_i2f+0x3c>
 80015e8:	2808      	cmp	r0, #8
 80015ea:	d038      	beq.n	800165e <__aeabi_i2f+0x92>
 80015ec:	3808      	subs	r0, #8
 80015ee:	4085      	lsls	r5, r0
 80015f0:	026d      	lsls	r5, r5, #9
 80015f2:	0a6d      	lsrs	r5, r5, #9
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	e002      	b.n	80015fe <__aeabi_i2f+0x32>
 80015f8:	2400      	movs	r4, #0
 80015fa:	2000      	movs	r0, #0
 80015fc:	2500      	movs	r5, #0
 80015fe:	05c0      	lsls	r0, r0, #23
 8001600:	4328      	orrs	r0, r5
 8001602:	07e4      	lsls	r4, r4, #31
 8001604:	4320      	orrs	r0, r4
 8001606:	bd70      	pop	{r4, r5, r6, pc}
 8001608:	2b99      	cmp	r3, #153	@ 0x99
 800160a:	dc14      	bgt.n	8001636 <__aeabi_i2f+0x6a>
 800160c:	1f42      	subs	r2, r0, #5
 800160e:	4095      	lsls	r5, r2
 8001610:	002a      	movs	r2, r5
 8001612:	4915      	ldr	r1, [pc, #84]	@ (8001668 <__aeabi_i2f+0x9c>)
 8001614:	4011      	ands	r1, r2
 8001616:	0755      	lsls	r5, r2, #29
 8001618:	d01c      	beq.n	8001654 <__aeabi_i2f+0x88>
 800161a:	250f      	movs	r5, #15
 800161c:	402a      	ands	r2, r5
 800161e:	2a04      	cmp	r2, #4
 8001620:	d018      	beq.n	8001654 <__aeabi_i2f+0x88>
 8001622:	3104      	adds	r1, #4
 8001624:	08ca      	lsrs	r2, r1, #3
 8001626:	0149      	lsls	r1, r1, #5
 8001628:	d515      	bpl.n	8001656 <__aeabi_i2f+0x8a>
 800162a:	239f      	movs	r3, #159	@ 0x9f
 800162c:	0252      	lsls	r2, r2, #9
 800162e:	1a18      	subs	r0, r3, r0
 8001630:	0a55      	lsrs	r5, r2, #9
 8001632:	b2c0      	uxtb	r0, r0
 8001634:	e7e3      	b.n	80015fe <__aeabi_i2f+0x32>
 8001636:	2205      	movs	r2, #5
 8001638:	0029      	movs	r1, r5
 800163a:	1a12      	subs	r2, r2, r0
 800163c:	40d1      	lsrs	r1, r2
 800163e:	0002      	movs	r2, r0
 8001640:	321b      	adds	r2, #27
 8001642:	4095      	lsls	r5, r2
 8001644:	002a      	movs	r2, r5
 8001646:	1e55      	subs	r5, r2, #1
 8001648:	41aa      	sbcs	r2, r5
 800164a:	430a      	orrs	r2, r1
 800164c:	4906      	ldr	r1, [pc, #24]	@ (8001668 <__aeabi_i2f+0x9c>)
 800164e:	4011      	ands	r1, r2
 8001650:	0755      	lsls	r5, r2, #29
 8001652:	d1e2      	bne.n	800161a <__aeabi_i2f+0x4e>
 8001654:	08ca      	lsrs	r2, r1, #3
 8001656:	0252      	lsls	r2, r2, #9
 8001658:	0a55      	lsrs	r5, r2, #9
 800165a:	b2d8      	uxtb	r0, r3
 800165c:	e7cf      	b.n	80015fe <__aeabi_i2f+0x32>
 800165e:	026d      	lsls	r5, r5, #9
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	308e      	adds	r0, #142	@ 0x8e
 8001664:	e7cb      	b.n	80015fe <__aeabi_i2f+0x32>
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	fbffffff 	.word	0xfbffffff

0800166c <__aeabi_ui2f>:
 800166c:	b510      	push	{r4, lr}
 800166e:	1e04      	subs	r4, r0, #0
 8001670:	d00d      	beq.n	800168e <__aeabi_ui2f+0x22>
 8001672:	f000 f889 	bl	8001788 <__clzsi2>
 8001676:	239e      	movs	r3, #158	@ 0x9e
 8001678:	1a1b      	subs	r3, r3, r0
 800167a:	2b96      	cmp	r3, #150	@ 0x96
 800167c:	dc0c      	bgt.n	8001698 <__aeabi_ui2f+0x2c>
 800167e:	2808      	cmp	r0, #8
 8001680:	d034      	beq.n	80016ec <__aeabi_ui2f+0x80>
 8001682:	3808      	subs	r0, #8
 8001684:	4084      	lsls	r4, r0
 8001686:	0264      	lsls	r4, r4, #9
 8001688:	0a64      	lsrs	r4, r4, #9
 800168a:	b2d8      	uxtb	r0, r3
 800168c:	e001      	b.n	8001692 <__aeabi_ui2f+0x26>
 800168e:	2000      	movs	r0, #0
 8001690:	2400      	movs	r4, #0
 8001692:	05c0      	lsls	r0, r0, #23
 8001694:	4320      	orrs	r0, r4
 8001696:	bd10      	pop	{r4, pc}
 8001698:	2b99      	cmp	r3, #153	@ 0x99
 800169a:	dc13      	bgt.n	80016c4 <__aeabi_ui2f+0x58>
 800169c:	1f42      	subs	r2, r0, #5
 800169e:	4094      	lsls	r4, r2
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <__aeabi_ui2f+0x88>)
 80016a2:	4022      	ands	r2, r4
 80016a4:	0761      	lsls	r1, r4, #29
 80016a6:	d01c      	beq.n	80016e2 <__aeabi_ui2f+0x76>
 80016a8:	210f      	movs	r1, #15
 80016aa:	4021      	ands	r1, r4
 80016ac:	2904      	cmp	r1, #4
 80016ae:	d018      	beq.n	80016e2 <__aeabi_ui2f+0x76>
 80016b0:	3204      	adds	r2, #4
 80016b2:	08d4      	lsrs	r4, r2, #3
 80016b4:	0152      	lsls	r2, r2, #5
 80016b6:	d515      	bpl.n	80016e4 <__aeabi_ui2f+0x78>
 80016b8:	239f      	movs	r3, #159	@ 0x9f
 80016ba:	0264      	lsls	r4, r4, #9
 80016bc:	1a18      	subs	r0, r3, r0
 80016be:	0a64      	lsrs	r4, r4, #9
 80016c0:	b2c0      	uxtb	r0, r0
 80016c2:	e7e6      	b.n	8001692 <__aeabi_ui2f+0x26>
 80016c4:	0002      	movs	r2, r0
 80016c6:	0021      	movs	r1, r4
 80016c8:	321b      	adds	r2, #27
 80016ca:	4091      	lsls	r1, r2
 80016cc:	000a      	movs	r2, r1
 80016ce:	1e51      	subs	r1, r2, #1
 80016d0:	418a      	sbcs	r2, r1
 80016d2:	2105      	movs	r1, #5
 80016d4:	1a09      	subs	r1, r1, r0
 80016d6:	40cc      	lsrs	r4, r1
 80016d8:	4314      	orrs	r4, r2
 80016da:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <__aeabi_ui2f+0x88>)
 80016dc:	4022      	ands	r2, r4
 80016de:	0761      	lsls	r1, r4, #29
 80016e0:	d1e2      	bne.n	80016a8 <__aeabi_ui2f+0x3c>
 80016e2:	08d4      	lsrs	r4, r2, #3
 80016e4:	0264      	lsls	r4, r4, #9
 80016e6:	0a64      	lsrs	r4, r4, #9
 80016e8:	b2d8      	uxtb	r0, r3
 80016ea:	e7d2      	b.n	8001692 <__aeabi_ui2f+0x26>
 80016ec:	0264      	lsls	r4, r4, #9
 80016ee:	0a64      	lsrs	r4, r4, #9
 80016f0:	308e      	adds	r0, #142	@ 0x8e
 80016f2:	e7ce      	b.n	8001692 <__aeabi_ui2f+0x26>
 80016f4:	fbffffff 	.word	0xfbffffff

080016f8 <__aeabi_f2d>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	0242      	lsls	r2, r0, #9
 80016fc:	0043      	lsls	r3, r0, #1
 80016fe:	0fc4      	lsrs	r4, r0, #31
 8001700:	20fe      	movs	r0, #254	@ 0xfe
 8001702:	0e1b      	lsrs	r3, r3, #24
 8001704:	1c59      	adds	r1, r3, #1
 8001706:	0a55      	lsrs	r5, r2, #9
 8001708:	4208      	tst	r0, r1
 800170a:	d00c      	beq.n	8001726 <__aeabi_f2d+0x2e>
 800170c:	21e0      	movs	r1, #224	@ 0xe0
 800170e:	0089      	lsls	r1, r1, #2
 8001710:	468c      	mov	ip, r1
 8001712:	076d      	lsls	r5, r5, #29
 8001714:	0b12      	lsrs	r2, r2, #12
 8001716:	4463      	add	r3, ip
 8001718:	051b      	lsls	r3, r3, #20
 800171a:	4313      	orrs	r3, r2
 800171c:	07e4      	lsls	r4, r4, #31
 800171e:	4323      	orrs	r3, r4
 8001720:	0028      	movs	r0, r5
 8001722:	0019      	movs	r1, r3
 8001724:	bd70      	pop	{r4, r5, r6, pc}
 8001726:	2b00      	cmp	r3, #0
 8001728:	d114      	bne.n	8001754 <__aeabi_f2d+0x5c>
 800172a:	2d00      	cmp	r5, #0
 800172c:	d01b      	beq.n	8001766 <__aeabi_f2d+0x6e>
 800172e:	0028      	movs	r0, r5
 8001730:	f000 f82a 	bl	8001788 <__clzsi2>
 8001734:	280a      	cmp	r0, #10
 8001736:	dc1c      	bgt.n	8001772 <__aeabi_f2d+0x7a>
 8001738:	230b      	movs	r3, #11
 800173a:	002a      	movs	r2, r5
 800173c:	1a1b      	subs	r3, r3, r0
 800173e:	40da      	lsrs	r2, r3
 8001740:	0003      	movs	r3, r0
 8001742:	3315      	adds	r3, #21
 8001744:	409d      	lsls	r5, r3
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <__aeabi_f2d+0x88>)
 8001748:	0312      	lsls	r2, r2, #12
 800174a:	1a1b      	subs	r3, r3, r0
 800174c:	055b      	lsls	r3, r3, #21
 800174e:	0b12      	lsrs	r2, r2, #12
 8001750:	0d5b      	lsrs	r3, r3, #21
 8001752:	e7e1      	b.n	8001718 <__aeabi_f2d+0x20>
 8001754:	2d00      	cmp	r5, #0
 8001756:	d009      	beq.n	800176c <__aeabi_f2d+0x74>
 8001758:	0b13      	lsrs	r3, r2, #12
 800175a:	2280      	movs	r2, #128	@ 0x80
 800175c:	0312      	lsls	r2, r2, #12
 800175e:	431a      	orrs	r2, r3
 8001760:	076d      	lsls	r5, r5, #29
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <__aeabi_f2d+0x8c>)
 8001764:	e7d8      	b.n	8001718 <__aeabi_f2d+0x20>
 8001766:	2300      	movs	r3, #0
 8001768:	2200      	movs	r2, #0
 800176a:	e7d5      	b.n	8001718 <__aeabi_f2d+0x20>
 800176c:	2200      	movs	r2, #0
 800176e:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <__aeabi_f2d+0x8c>)
 8001770:	e7d2      	b.n	8001718 <__aeabi_f2d+0x20>
 8001772:	0003      	movs	r3, r0
 8001774:	002a      	movs	r2, r5
 8001776:	3b0b      	subs	r3, #11
 8001778:	409a      	lsls	r2, r3
 800177a:	2500      	movs	r5, #0
 800177c:	e7e3      	b.n	8001746 <__aeabi_f2d+0x4e>
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	00000389 	.word	0x00000389
 8001784:	000007ff 	.word	0x000007ff

08001788 <__clzsi2>:
 8001788:	211c      	movs	r1, #28
 800178a:	2301      	movs	r3, #1
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	4298      	cmp	r0, r3
 8001790:	d301      	bcc.n	8001796 <__clzsi2+0xe>
 8001792:	0c00      	lsrs	r0, r0, #16
 8001794:	3910      	subs	r1, #16
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	4298      	cmp	r0, r3
 800179a:	d301      	bcc.n	80017a0 <__clzsi2+0x18>
 800179c:	0a00      	lsrs	r0, r0, #8
 800179e:	3908      	subs	r1, #8
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	4298      	cmp	r0, r3
 80017a4:	d301      	bcc.n	80017aa <__clzsi2+0x22>
 80017a6:	0900      	lsrs	r0, r0, #4
 80017a8:	3904      	subs	r1, #4
 80017aa:	a202      	add	r2, pc, #8	@ (adr r2, 80017b4 <__clzsi2+0x2c>)
 80017ac:	5c10      	ldrb	r0, [r2, r0]
 80017ae:	1840      	adds	r0, r0, r1
 80017b0:	4770      	bx	lr
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	02020304 	.word	0x02020304
 80017b8:	01010101 	.word	0x01010101
	...

080017c4 <__clzdi2>:
 80017c4:	b510      	push	{r4, lr}
 80017c6:	2900      	cmp	r1, #0
 80017c8:	d103      	bne.n	80017d2 <__clzdi2+0xe>
 80017ca:	f7ff ffdd 	bl	8001788 <__clzsi2>
 80017ce:	3020      	adds	r0, #32
 80017d0:	e002      	b.n	80017d8 <__clzdi2+0x14>
 80017d2:	0008      	movs	r0, r1
 80017d4:	f7ff ffd8 	bl	8001788 <__clzsi2>
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)

080017dc <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 f93a 	bl	8001a60 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	250f      	movs	r5, #15
 80017f0:	197c      	adds	r4, r7, r5
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	20d0      	movs	r0, #208	@ 0xd0
 80017f8:	f000 f8d8 	bl	80019ac <bme68x_get_regs>
 80017fc:	0003      	movs	r3, r0
 80017fe:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8001800:	197b      	adds	r3, r7, r5
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d11b      	bne.n	8001842 <bme68x_init+0x66>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b61      	cmp	r3, #97	@ 0x61
 8001810:	d113      	bne.n	800183a <bme68x_init+0x5e>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8001812:	197c      	adds	r4, r7, r5
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	0018      	movs	r0, r3
 8001818:	f002 fa62 	bl	8003ce0 <read_variant_id>
 800181c:	0003      	movs	r3, r0
 800181e:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8001820:	197b      	adds	r3, r7, r5
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b25b      	sxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10b      	bne.n	8001842 <bme68x_init+0x66>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 800182a:	197c      	adds	r4, r7, r5
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	0018      	movs	r0, r3
 8001830:	f002 f91f 	bl	8003a72 <get_calib_data>
 8001834:	0003      	movs	r3, r0
 8001836:	7023      	strb	r3, [r4, #0]
 8001838:	e003      	b.n	8001842 <bme68x_init+0x66>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 800183a:	230f      	movs	r3, #15
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	22fd      	movs	r2, #253	@ 0xfd
 8001840:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8001842:	230f      	movs	r3, #15
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b25b      	sxtb	r3, r3
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bdb0      	pop	{r4, r5, r7, pc}

08001852 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001854:	b08b      	sub	sp, #44	@ 0x2c
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001860:	2310      	movs	r3, #16
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	0018      	movs	r0, r3
 8001866:	2314      	movs	r3, #20
 8001868:	001a      	movs	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	f006 f806 	bl	800787c <memset>
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001870:	2527      	movs	r5, #39	@ 0x27
 8001872:	197c      	adds	r4, r7, r5
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	0018      	movs	r0, r3
 8001878:	f001 fe79 	bl	800356e <null_ptr_check>
 800187c:	0003      	movs	r3, r0
 800187e:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8001880:	197b      	adds	r3, r7, r5
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d000      	beq.n	800188c <bme68x_set_regs+0x3a>
 800188a:	e083      	b.n	8001994 <bme68x_set_regs+0x142>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <bme68x_set_regs+0x42>
 8001892:	e07f      	b.n	8001994 <bme68x_set_regs+0x142>
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d100      	bne.n	800189c <bme68x_set_regs+0x4a>
 800189a:	e07b      	b.n	8001994 <bme68x_set_regs+0x142>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d100      	bne.n	80018a4 <bme68x_set_regs+0x52>
 80018a2:	e070      	b.n	8001986 <bme68x_set_regs+0x134>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b0a      	cmp	r3, #10
 80018a8:	d900      	bls.n	80018ac <bme68x_set_regs+0x5a>
 80018aa:	e06c      	b.n	8001986 <bme68x_set_regs+0x134>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 80018ac:	2324      	movs	r3, #36	@ 0x24
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
 80018b4:	e03f      	b.n	8001936 <bme68x_set_regs+0xe4>
            {
                if (dev->intf == BME68X_SPI_INTF)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	7b1b      	ldrb	r3, [r3, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d11d      	bne.n	80018fa <bme68x_set_regs+0xa8>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 80018be:	2524      	movs	r5, #36	@ 0x24
 80018c0:	197b      	adds	r3, r7, r5
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	18d3      	adds	r3, r2, r3
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2227      	movs	r2, #39	@ 0x27
 80018cc:	18bc      	adds	r4, r7, r2
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	0011      	movs	r1, r2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f001 fd5d 	bl	8003392 <set_mem_page>
 80018d8:	0003      	movs	r3, r0
 80018da:	7023      	strb	r3, [r4, #0]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80018dc:	197b      	adds	r3, r7, r5
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	18d3      	adds	r3, r2, r3
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	197b      	adds	r3, r7, r5
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	217f      	movs	r1, #127	@ 0x7f
 80018ee:	400a      	ands	r2, r1
 80018f0:	b2d1      	uxtb	r1, r2
 80018f2:	2210      	movs	r2, #16
 80018f4:	18ba      	adds	r2, r7, r2
 80018f6:	54d1      	strb	r1, [r2, r3]
 80018f8:	e00b      	b.n	8001912 <bme68x_set_regs+0xc0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 80018fa:	2124      	movs	r1, #36	@ 0x24
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	18d2      	adds	r2, r2, r3
 8001904:	187b      	adds	r3, r7, r1
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	7811      	ldrb	r1, [r2, #0]
 800190c:	2210      	movs	r2, #16
 800190e:	18ba      	adds	r2, r7, r2
 8001910:	54d1      	strb	r1, [r2, r3]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8001912:	2024      	movs	r0, #36	@ 0x24
 8001914:	183b      	adds	r3, r7, r0
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	18d2      	adds	r2, r2, r3
 800191c:	183b      	adds	r3, r7, r0
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	3301      	adds	r3, #1
 8001924:	7811      	ldrb	r1, [r2, #0]
 8001926:	2210      	movs	r2, #16
 8001928:	18ba      	adds	r2, r7, r2
 800192a:	54d1      	strb	r1, [r2, r3]
            for (index = 0; index < len; index++)
 800192c:	183b      	adds	r3, r7, r0
 800192e:	881a      	ldrh	r2, [r3, #0]
 8001930:	183b      	adds	r3, r7, r0
 8001932:	3201      	adds	r2, #1
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	2324      	movs	r3, #36	@ 0x24
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d8b9      	bhi.n	80018b6 <bme68x_set_regs+0x64>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8001942:	2627      	movs	r6, #39	@ 0x27
 8001944:	19bb      	adds	r3, r7, r6
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b25b      	sxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d120      	bne.n	8001990 <bme68x_set_regs+0x13e>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8001952:	2110      	movs	r1, #16
 8001954:	187b      	adds	r3, r7, r1
 8001956:	7818      	ldrb	r0, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	1e5a      	subs	r2, r3, #1
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685d      	ldr	r5, [r3, #4]
 8001962:	187b      	adds	r3, r7, r1
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	002b      	movs	r3, r5
 8001968:	47a0      	blx	r4
 800196a:	0003      	movs	r3, r0
 800196c:	0019      	movs	r1, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	224c      	movs	r2, #76	@ 0x4c
 8001972:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	224c      	movs	r2, #76	@ 0x4c
 8001978:	569b      	ldrsb	r3, [r3, r2]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d008      	beq.n	8001990 <bme68x_set_regs+0x13e>
                {
                    rslt = BME68X_E_COM_FAIL;
 800197e:	19bb      	adds	r3, r7, r6
 8001980:	22fe      	movs	r2, #254	@ 0xfe
 8001982:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8001984:	e004      	b.n	8001990 <bme68x_set_regs+0x13e>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8001986:	2327      	movs	r3, #39	@ 0x27
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	22fc      	movs	r2, #252	@ 0xfc
 800198c:	701a      	strb	r2, [r3, #0]
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800198e:	e005      	b.n	800199c <bme68x_set_regs+0x14a>
            if (rslt == BME68X_OK)
 8001990:	46c0      	nop			@ (mov r8, r8)
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001992:	e003      	b.n	800199c <bme68x_set_regs+0x14a>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001994:	2327      	movs	r3, #39	@ 0x27
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	22ff      	movs	r2, #255	@ 0xff
 800199a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800199c:	2327      	movs	r3, #39	@ 0x27
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b25b      	sxtb	r3, r3
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b00b      	add	sp, #44	@ 0x2c
 80019aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ac <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	250f      	movs	r5, #15
 80019ba:	197b      	adds	r3, r7, r5
 80019bc:	1c02      	adds	r2, r0, #0
 80019be:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80019c0:	2617      	movs	r6, #23
 80019c2:	19bc      	adds	r4, r7, r6
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	0018      	movs	r0, r3
 80019c8:	f001 fdd1 	bl	800356e <null_ptr_check>
 80019cc:	0003      	movs	r3, r0
 80019ce:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_data)
 80019d0:	19bb      	adds	r3, r7, r6
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d136      	bne.n	8001a48 <bme68x_get_regs+0x9c>
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d033      	beq.n	8001a48 <bme68x_get_regs+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	7b1b      	ldrb	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d115      	bne.n	8001a14 <bme68x_get_regs+0x68>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 80019e8:	19bc      	adds	r4, r7, r6
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	197b      	adds	r3, r7, r5
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	0011      	movs	r1, r2
 80019f2:	0018      	movs	r0, r3
 80019f4:	f001 fccd 	bl	8003392 <set_mem_page>
 80019f8:	0003      	movs	r3, r0
 80019fa:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 80019fc:	19bb      	adds	r3, r7, r6
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <bme68x_get_regs+0x68>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001a06:	197b      	adds	r3, r7, r5
 8001a08:	197a      	adds	r2, r7, r5
 8001a0a:	7812      	ldrb	r2, [r2, #0]
 8001a0c:	2180      	movs	r1, #128	@ 0x80
 8001a0e:	4249      	negs	r1, r1
 8001a10:	430a      	orrs	r2, r1
 8001a12:	701a      	strb	r2, [r3, #0]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685d      	ldr	r5, [r3, #4]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	68b9      	ldr	r1, [r7, #8]
 8001a20:	230f      	movs	r3, #15
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	7818      	ldrb	r0, [r3, #0]
 8001a26:	002b      	movs	r3, r5
 8001a28:	47a0      	blx	r4
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	224c      	movs	r2, #76	@ 0x4c
 8001a32:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	224c      	movs	r2, #76	@ 0x4c
 8001a38:	569b      	ldrsb	r3, [r3, r2]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <bme68x_get_regs+0xa4>
        {
            rslt = BME68X_E_COM_FAIL;
 8001a3e:	2317      	movs	r3, #23
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	22fe      	movs	r2, #254	@ 0xfe
 8001a44:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != 0)
 8001a46:	e003      	b.n	8001a50 <bme68x_get_regs+0xa4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001a48:	2317      	movs	r3, #23
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	22ff      	movs	r2, #255	@ 0xff
 8001a4e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001a50:	2317      	movs	r3, #23
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b25b      	sxtb	r3, r3
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b007      	add	sp, #28
 8001a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a60 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001a68:	230e      	movs	r3, #14
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	22e0      	movs	r2, #224	@ 0xe0
 8001a6e:	701a      	strb	r2, [r3, #0]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001a70:	230d      	movs	r3, #13
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	22b6      	movs	r2, #182	@ 0xb6
 8001a76:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001a78:	250f      	movs	r5, #15
 8001a7a:	197c      	adds	r4, r7, r5
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f001 fd75 	bl	800356e <null_ptr_check>
 8001a84:	0003      	movs	r3, r0
 8001a86:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8001a88:	002a      	movs	r2, r5
 8001a8a:	18bb      	adds	r3, r7, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d133      	bne.n	8001afc <bme68x_soft_reset+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7b1b      	ldrb	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d106      	bne.n	8001aaa <bme68x_soft_reset+0x4a>
        {
            rslt = get_mem_page(dev);
 8001a9c:	18bc      	adds	r4, r7, r2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f001 fcf3 	bl	800348c <get_mem_page>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	7023      	strb	r3, [r4, #0]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8001aaa:	250f      	movs	r5, #15
 8001aac:	197b      	adds	r3, r7, r5
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d122      	bne.n	8001afc <bme68x_soft_reset+0x9c>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001ab6:	197c      	adds	r4, r7, r5
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	220d      	movs	r2, #13
 8001abc:	18b9      	adds	r1, r7, r2
 8001abe:	220e      	movs	r2, #14
 8001ac0:	18b8      	adds	r0, r7, r2
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f7ff fec5 	bl	8001852 <bme68x_set_regs>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8001acc:	002c      	movs	r4, r5
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d111      	bne.n	8001afc <bme68x_soft_reset+0x9c>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	480a      	ldr	r0, [pc, #40]	@ (8001b0c <bme68x_soft_reset+0xac>)
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4790      	blx	r2

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7b1b      	ldrb	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <bme68x_soft_reset+0x9c>
                {
                    rslt = get_mem_page(dev);
 8001aee:	193c      	adds	r4, r7, r4
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f001 fcca 	bl	800348c <get_mem_page>
 8001af8:	0003      	movs	r3, r0
 8001afa:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 8001afc:	230f      	movs	r3, #15
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b25b      	sxtb	r3, r3
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0c:	00002710 	.word	0x00002710

08001b10 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8001b1a:	231e      	movs	r3, #30
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	231d      	movs	r3, #29
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001b2a:	2314      	movs	r3, #20
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	4a9f      	ldr	r2, [pc, #636]	@ (8001dac <bme68x_set_conf+0x29c>)
 8001b30:	6811      	ldr	r1, [r2, #0]
 8001b32:	6019      	str	r1, [r3, #0]
 8001b34:	7912      	ldrb	r2, [r2, #4]
 8001b36:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001b38:	230c      	movs	r3, #12
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	2305      	movs	r3, #5
 8001b40:	001a      	movs	r2, r3
 8001b42:	2100      	movs	r1, #0
 8001b44:	f005 fe9a 	bl	800787c <memset>

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001b48:	251f      	movs	r5, #31
 8001b4a:	197c      	adds	r4, r7, r5
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	231c      	movs	r3, #28
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	0011      	movs	r1, r2
 8001b54:	0018      	movs	r0, r3
 8001b56:	f000 f9ab 	bl	8001eb0 <bme68x_get_op_mode>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8001b5e:	197b      	adds	r3, r7, r5
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <bme68x_set_conf+0x68>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001b68:	197c      	adds	r4, r7, r5
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f91e 	bl	8001db0 <bme68x_set_op_mode>
 8001b74:	0003      	movs	r3, r0
 8001b76:	7023      	strb	r3, [r4, #0]
    }

    if (conf == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d104      	bne.n	8001b88 <bme68x_set_conf+0x78>
    {
        rslt = BME68X_E_NULL_PTR;
 8001b7e:	231f      	movs	r3, #31
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	22ff      	movs	r2, #255	@ 0xff
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e0e2      	b.n	8001d4e <bme68x_set_conf+0x23e>
    }
    else if (rslt == BME68X_OK)
 8001b88:	251f      	movs	r5, #31
 8001b8a:	197b      	adds	r3, r7, r5
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d000      	beq.n	8001b96 <bme68x_set_conf+0x86>
 8001b94:	e0db      	b.n	8001d4e <bme68x_set_conf+0x23e>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001b96:	2314      	movs	r3, #20
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	7818      	ldrb	r0, [r3, #0]
 8001b9c:	197c      	adds	r4, r7, r5
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	18b9      	adds	r1, r7, r2
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	f7ff ff01 	bl	80019ac <bme68x_get_regs>
 8001baa:	0003      	movs	r3, r0
 8001bac:	7023      	strb	r3, [r4, #0]
        dev->info_msg = BME68X_OK;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	224d      	movs	r2, #77	@ 0x4d
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]
        if (rslt == BME68X_OK)
 8001bb6:	197b      	adds	r3, r7, r5
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <bme68x_set_conf+0xc4>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3303      	adds	r3, #3
 8001bc4:	197c      	adds	r4, r7, r5
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	2107      	movs	r1, #7
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f001 fc96 	bl	80034fc <boundary_check>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001bd4:	221f      	movs	r2, #31
 8001bd6:	18bb      	adds	r3, r7, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3301      	adds	r3, #1
 8001be4:	18bc      	adds	r4, r7, r2
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	2105      	movs	r1, #5
 8001bea:	0018      	movs	r0, r3
 8001bec:	f001 fc86 	bl	80034fc <boundary_check>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001bf4:	221f      	movs	r2, #31
 8001bf6:	18bb      	adds	r3, r7, r2
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b25b      	sxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <bme68x_set_conf+0x104>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3302      	adds	r3, #2
 8001c04:	18bc      	adds	r4, r7, r2
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	2105      	movs	r1, #5
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f001 fc76 	bl	80034fc <boundary_check>
 8001c10:	0003      	movs	r3, r0
 8001c12:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001c14:	221f      	movs	r2, #31
 8001c16:	18bb      	adds	r3, r7, r2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b25b      	sxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d108      	bne.n	8001c32 <bme68x_set_conf+0x122>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	18bc      	adds	r4, r7, r2
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	2105      	movs	r1, #5
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f001 fc67 	bl	80034fc <boundary_check>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001c32:	221f      	movs	r2, #31
 8001c34:	18bb      	adds	r3, r7, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <bme68x_set_conf+0x142>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3304      	adds	r3, #4
 8001c42:	18bc      	adds	r4, r7, r2
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	2108      	movs	r1, #8
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f001 fc57 	bl	80034fc <boundary_check>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001c52:	231f      	movs	r3, #31
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d177      	bne.n	8001d4e <bme68x_set_conf+0x23e>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8001c5e:	200c      	movs	r0, #12
 8001c60:	183b      	adds	r3, r7, r0
 8001c62:	791b      	ldrb	r3, [r3, #4]
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	221c      	movs	r2, #28
 8001c68:	4393      	bics	r3, r2
 8001c6a:	b25a      	sxtb	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	78db      	ldrb	r3, [r3, #3]
 8001c70:	b25b      	sxtb	r3, r3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	211c      	movs	r1, #28
 8001c78:	400b      	ands	r3, r1
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b25b      	sxtb	r3, r3
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	183b      	adds	r3, r7, r0
 8001c84:	711a      	strb	r2, [r3, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	221f      	movs	r2, #31
 8001c8e:	4013      	ands	r3, r2
 8001c90:	b25a      	sxtb	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	785b      	ldrb	r3, [r3, #1]
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	015b      	lsls	r3, r3, #5
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	183b      	adds	r3, r7, r0
 8001ca4:	70da      	strb	r2, [r3, #3]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	78db      	ldrb	r3, [r3, #3]
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	221c      	movs	r2, #28
 8001cae:	4393      	bics	r3, r2
 8001cb0:	b25a      	sxtb	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	789b      	ldrb	r3, [r3, #2]
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	211c      	movs	r1, #28
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	183b      	adds	r3, r7, r0
 8001cca:	70da      	strb	r2, [r3, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001ccc:	183b      	adds	r3, r7, r0
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	b25a      	sxtb	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	2107      	movs	r1, #7
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	183b      	adds	r3, r7, r0
 8001cec:	705a      	strb	r2, [r3, #1]
            if (conf->odr != BME68X_ODR_NONE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	791b      	ldrb	r3, [r3, #4]
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d008      	beq.n	8001d08 <bme68x_set_conf+0x1f8>
            {
                odr20 = conf->odr;
 8001cf6:	231e      	movs	r3, #30
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	7912      	ldrb	r2, [r2, #4]
 8001cfe:	701a      	strb	r2, [r3, #0]
                odr3 = 0;
 8001d00:	231d      	movs	r3, #29
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001d08:	210c      	movs	r1, #12
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	791b      	ldrb	r3, [r3, #4]
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	221f      	movs	r2, #31
 8001d12:	4013      	ands	r3, r2
 8001d14:	b25a      	sxtb	r2, r3
 8001d16:	231e      	movs	r3, #30
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	015b      	lsls	r3, r3, #5
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b25b      	sxtb	r3, r3
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	227f      	movs	r2, #127	@ 0x7f
 8001d34:	4013      	ands	r3, r2
 8001d36:	b25a      	sxtb	r2, r3
 8001d38:	231d      	movs	r3, #29
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	01db      	lsls	r3, r3, #7
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b25b      	sxtb	r3, r3
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	701a      	strb	r2, [r3, #0]
        }
    }

    if (rslt == BME68X_OK)
 8001d4e:	221f      	movs	r2, #31
 8001d50:	18bb      	adds	r3, r7, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10a      	bne.n	8001d70 <bme68x_set_conf+0x260>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001d5a:	18bc      	adds	r4, r7, r2
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	220c      	movs	r2, #12
 8001d60:	18b9      	adds	r1, r7, r2
 8001d62:	2214      	movs	r2, #20
 8001d64:	18b8      	adds	r0, r7, r2
 8001d66:	2205      	movs	r2, #5
 8001d68:	f7ff fd73 	bl	8001852 <bme68x_set_regs>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	7023      	strb	r3, [r4, #0]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001d70:	221c      	movs	r2, #28
 8001d72:	18bb      	adds	r3, r7, r2
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00f      	beq.n	8001d9a <bme68x_set_conf+0x28a>
 8001d7a:	211f      	movs	r1, #31
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <bme68x_set_conf+0x28a>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001d86:	18bb      	adds	r3, r7, r2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	187c      	adds	r4, r7, r1
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	0011      	movs	r1, r2
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 f80d 	bl	8001db0 <bme68x_set_op_mode>
 8001d96:	0003      	movs	r3, r0
 8001d98:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b25b      	sxtb	r3, r3
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b008      	add	sp, #32
 8001da8:	bdb0      	pop	{r4, r5, r7, pc}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	0800818c 	.word	0x0800818c

08001db0 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8001db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	0002      	movs	r2, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8001dbe:	230e      	movs	r3, #14
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001dc6:	230c      	movs	r3, #12
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2274      	movs	r2, #116	@ 0x74
 8001dcc:	701a      	strb	r2, [r3, #0]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001dce:	260f      	movs	r6, #15
 8001dd0:	19bc      	adds	r4, r7, r6
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	250d      	movs	r5, #13
 8001dd6:	1979      	adds	r1, r7, r5
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2074      	movs	r0, #116	@ 0x74
 8001ddc:	f7ff fde6 	bl	80019ac <bme68x_get_regs>
 8001de0:	0003      	movs	r3, r0
 8001de2:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8001de4:	0034      	movs	r4, r6
 8001de6:	193b      	adds	r3, r7, r4
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d123      	bne.n	8001e38 <bme68x_set_op_mode+0x88>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8001df0:	0028      	movs	r0, r5
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	250e      	movs	r5, #14
 8001df8:	197b      	adds	r3, r7, r5
 8001dfa:	2103      	movs	r1, #3
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
 8001e00:	197b      	adds	r3, r7, r5
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d017      	beq.n	8001e38 <bme68x_set_op_mode+0x88>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8001e08:	183b      	adds	r3, r7, r0
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	4393      	bics	r3, r2
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	183b      	adds	r3, r7, r0
 8001e14:	701a      	strb	r2, [r3, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001e16:	193c      	adds	r4, r7, r4
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	1839      	adds	r1, r7, r0
 8001e1c:	220c      	movs	r2, #12
 8001e1e:	18b8      	adds	r0, r7, r2
 8001e20:	2201      	movs	r2, #1
 8001e22:	f7ff fd16 	bl	8001852 <bme68x_set_regs>
 8001e26:	0003      	movs	r3, r0
 8001e28:	7023      	strb	r3, [r4, #0]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	481e      	ldr	r0, [pc, #120]	@ (8001eac <bme68x_set_op_mode+0xfc>)
 8001e34:	0019      	movs	r1, r3
 8001e36:	4790      	blx	r2
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001e38:	230e      	movs	r3, #14
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <bme68x_set_op_mode+0x9e>
 8001e42:	230f      	movs	r3, #15
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0bf      	beq.n	8001dce <bme68x_set_op_mode+0x1e>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001e4e:	1dfb      	adds	r3, r7, #7
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d021      	beq.n	8001e9a <bme68x_set_op_mode+0xea>
 8001e56:	240f      	movs	r4, #15
 8001e58:	193b      	adds	r3, r7, r4
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d11b      	bne.n	8001e9a <bme68x_set_op_mode+0xea>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8001e62:	200d      	movs	r0, #13
 8001e64:	183b      	adds	r3, r7, r0
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4393      	bics	r3, r2
 8001e6e:	b25a      	sxtb	r2, r3
 8001e70:	1dfb      	adds	r3, r7, #7
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	2103      	movs	r1, #3
 8001e78:	400b      	ands	r3, r1
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001e86:	193c      	adds	r4, r7, r4
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	1839      	adds	r1, r7, r0
 8001e8c:	220c      	movs	r2, #12
 8001e8e:	18b8      	adds	r0, r7, r2
 8001e90:	2201      	movs	r2, #1
 8001e92:	f7ff fcde 	bl	8001852 <bme68x_set_regs>
 8001e96:	0003      	movs	r3, r0
 8001e98:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b25b      	sxtb	r3, r3
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b005      	add	sp, #20
 8001ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	00002710 	.word	0x00002710

08001eb0 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d012      	beq.n	8001ee6 <bme68x_get_op_mode+0x36>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	18fc      	adds	r4, r7, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	250e      	movs	r5, #14
 8001ec8:	1979      	adds	r1, r7, r5
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2074      	movs	r0, #116	@ 0x74
 8001ece:	f7ff fd6d 	bl	80019ac <bme68x_get_regs>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	7023      	strb	r3, [r4, #0]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8001ed6:	197b      	adds	r3, r7, r5
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2203      	movs	r2, #3
 8001edc:	4013      	ands	r3, r2
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	e003      	b.n	8001eee <bme68x_get_op_mode+0x3e>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001ee6:	230f      	movs	r3, #15
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	22ff      	movs	r2, #255	@ 0xff
 8001eec:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001eee:	230f      	movs	r3, #15
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b25b      	sxtb	r3, r3
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b004      	add	sp, #16
 8001efc:	bdb0      	pop	{r4, r5, r7, pc}

08001efe <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8001efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f00:	b09b      	sub	sp, #108	@ 0x6c
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	260f      	movs	r6, #15
 8001f0c:	19bb      	adds	r3, r7, r6
 8001f0e:	1c02      	adds	r2, r0, #0
 8001f10:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8001f12:	2366      	movs	r3, #102	@ 0x66
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	2365      	movs	r3, #101	@ 0x65
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	2364      	movs	r3, #100	@ 0x64
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *field_ptr[3] = { 0 };
 8001f2a:	2458      	movs	r4, #88	@ 0x58
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	0018      	movs	r0, r3
 8001f30:	230c      	movs	r3, #12
 8001f32:	001a      	movs	r2, r3
 8001f34:	2100      	movs	r1, #0
 8001f36:	f005 fca1 	bl	800787c <memset>
    struct bme68x_data field_data[3] = { { 0 } };
 8001f3a:	2510      	movs	r5, #16
 8001f3c:	197b      	adds	r3, r7, r5
 8001f3e:	0018      	movs	r0, r3
 8001f40:	2348      	movs	r3, #72	@ 0x48
 8001f42:	001a      	movs	r2, r3
 8001f44:	2100      	movs	r1, #0
 8001f46:	f005 fc99 	bl	800787c <memset>

    field_ptr[0] = &field_data[0];
 8001f4a:	193b      	adds	r3, r7, r4
 8001f4c:	0029      	movs	r1, r5
 8001f4e:	187a      	adds	r2, r7, r1
 8001f50:	601a      	str	r2, [r3, #0]
    field_ptr[1] = &field_data[1];
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	187a      	adds	r2, r7, r1
 8001f56:	3218      	adds	r2, #24
 8001f58:	605a      	str	r2, [r3, #4]
    field_ptr[2] = &field_data[2];
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	187a      	adds	r2, r7, r1
 8001f5e:	3230      	adds	r2, #48	@ 0x30
 8001f60:	609a      	str	r2, [r3, #8]

    rslt = null_ptr_check(dev);
 8001f62:	2567      	movs	r5, #103	@ 0x67
 8001f64:	197c      	adds	r4, r7, r5
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f001 fb00 	bl	800356e <null_ptr_check>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && (data != NULL))
 8001f72:	002a      	movs	r2, r5
 8001f74:	18bb      	adds	r3, r7, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d000      	beq.n	8001f80 <bme68x_get_data+0x82>
 8001f7e:	e0e3      	b.n	8002148 <bme68x_get_data+0x24a>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d100      	bne.n	8001f88 <bme68x_get_data+0x8a>
 8001f86:	e0df      	b.n	8002148 <bme68x_get_data+0x24a>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8001f88:	19bb      	adds	r3, r7, r6
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d122      	bne.n	8001fd6 <bme68x_get_data+0xd8>
        {
            rslt = read_field_data(0, data, dev);
 8001f90:	0015      	movs	r5, r2
 8001f92:	18bc      	adds	r4, r7, r2
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	0019      	movs	r1, r3
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 fe66 	bl	8002c6c <read_field_data>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8001fa4:	197b      	adds	r3, r7, r5
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d000      	beq.n	8001fb0 <bme68x_get_data+0xb2>
 8001fae:	e0bd      	b.n	800212c <bme68x_get_data+0x22e>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da04      	bge.n	8001fc4 <bme68x_get_data+0xc6>
                {
                    new_fields = 1;
 8001fba:	2364      	movs	r3, #100	@ 0x64
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	e0b3      	b.n	800212c <bme68x_get_data+0x22e>
                }
                else
                {
                    new_fields = 0;
 8001fc4:	2364      	movs	r3, #100	@ 0x64
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
                    rslt = BME68X_W_NO_NEW_DATA;
 8001fcc:	2367      	movs	r3, #103	@ 0x67
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	e0aa      	b.n	800212c <bme68x_get_data+0x22e>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	18bb      	adds	r3, r7, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d004      	beq.n	8001fea <bme68x_get_data+0xec>
 8001fe0:	18bb      	adds	r3, r7, r2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d000      	beq.n	8001fea <bme68x_get_data+0xec>
 8001fe8:	e09c      	b.n	8002124 <bme68x_get_data+0x226>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001fea:	2367      	movs	r3, #103	@ 0x67
 8001fec:	18fc      	adds	r4, r7, r3
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	2358      	movs	r3, #88	@ 0x58
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	0011      	movs	r1, r2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 ffb8 	bl	8002f6c <read_all_field_data>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	7023      	strb	r3, [r4, #0]

            new_fields = 0;
 8002000:	2364      	movs	r3, #100	@ 0x64
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8002008:	2366      	movs	r3, #102	@ 0x66
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	e016      	b.n	8002040 <bme68x_get_data+0x142>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8002012:	2366      	movs	r3, #102	@ 0x66
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	2358      	movs	r3, #88	@ 0x58
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	0092      	lsls	r2, r2, #2
 800201e:	58d3      	ldr	r3, [r2, r3]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b25b      	sxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	da05      	bge.n	8002034 <bme68x_get_data+0x136>
                {
                    new_fields++;
 8002028:	2164      	movs	r1, #100	@ 0x64
 800202a:	187b      	adds	r3, r7, r1
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	187b      	adds	r3, r7, r1
 8002030:	3201      	adds	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8002034:	2166      	movs	r1, #102	@ 0x66
 8002036:	187b      	adds	r3, r7, r1
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	187b      	adds	r3, r7, r1
 800203c:	3201      	adds	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	2366      	movs	r3, #102	@ 0x66
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d805      	bhi.n	8002056 <bme68x_get_data+0x158>
 800204a:	2367      	movs	r3, #103	@ 0x67
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b25b      	sxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0dd      	beq.n	8002012 <bme68x_get_data+0x114>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8002056:	2366      	movs	r3, #102	@ 0x66
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e022      	b.n	80020a6 <bme68x_get_data+0x1a8>
            {
                for (j = i + 1; j < 3; j++)
 8002060:	2365      	movs	r3, #101	@ 0x65
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2266      	movs	r2, #102	@ 0x66
 8002066:	18ba      	adds	r2, r7, r2
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	3201      	adds	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e00f      	b.n	8002090 <bme68x_get_data+0x192>
                {
                    sort_sensor_data(i, j, field_ptr);
 8002070:	2358      	movs	r3, #88	@ 0x58
 8002072:	18fa      	adds	r2, r7, r3
 8002074:	2465      	movs	r4, #101	@ 0x65
 8002076:	193b      	adds	r3, r7, r4
 8002078:	7819      	ldrb	r1, [r3, #0]
 800207a:	2366      	movs	r3, #102	@ 0x66
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f001 fc61 	bl	8003948 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8002086:	193b      	adds	r3, r7, r4
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	193b      	adds	r3, r7, r4
 800208c:	3201      	adds	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	2365      	movs	r3, #101	@ 0x65
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d9ea      	bls.n	8002070 <bme68x_get_data+0x172>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 800209a:	2166      	movs	r1, #102	@ 0x66
 800209c:	187b      	adds	r3, r7, r1
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	3201      	adds	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	2366      	movs	r3, #102	@ 0x66
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d805      	bhi.n	80020bc <bme68x_get_data+0x1be>
 80020b0:	2367      	movs	r3, #103	@ 0x67
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0d1      	beq.n	8002060 <bme68x_get_data+0x162>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80020bc:	2366      	movs	r3, #102	@ 0x66
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e019      	b.n	80020fa <bme68x_get_data+0x1fc>
            {
                data[i] = *field_ptr[i];
 80020c6:	2566      	movs	r5, #102	@ 0x66
 80020c8:	197b      	adds	r3, r7, r5
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	2358      	movs	r3, #88	@ 0x58
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	58d1      	ldr	r1, [r2, r3]
 80020d4:	197b      	adds	r3, r7, r5
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	0013      	movs	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	189b      	adds	r3, r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	001a      	movs	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	189b      	adds	r3, r3, r2
 80020e6:	000a      	movs	r2, r1
 80020e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020ea:	c313      	stmia	r3!, {r0, r1, r4}
 80020ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020ee:	c313      	stmia	r3!, {r0, r1, r4}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80020f0:	197b      	adds	r3, r7, r5
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	197b      	adds	r3, r7, r5
 80020f6:	3201      	adds	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	2366      	movs	r3, #102	@ 0x66
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d805      	bhi.n	8002110 <bme68x_get_data+0x212>
 8002104:	2367      	movs	r3, #103	@ 0x67
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b25b      	sxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0da      	beq.n	80020c6 <bme68x_get_data+0x1c8>
            }

            if (new_fields == 0)
 8002110:	2364      	movs	r3, #100	@ 0x64
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <bme68x_get_data+0x22e>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 800211a:	2367      	movs	r3, #103	@ 0x67
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	2202      	movs	r2, #2
 8002120:	701a      	strb	r2, [r3, #0]
            if (new_fields == 0)
 8002122:	e003      	b.n	800212c <bme68x_get_data+0x22e>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002124:	2367      	movs	r3, #103	@ 0x67
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
        }

        if (n_data == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d104      	bne.n	800213c <bme68x_get_data+0x23e>
        {
            rslt = BME68X_E_NULL_PTR;
 8002132:	2367      	movs	r3, #103	@ 0x67
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	22ff      	movs	r2, #255	@ 0xff
 8002138:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 800213a:	e009      	b.n	8002150 <bme68x_get_data+0x252>
        }
        else
        {
            *n_data = new_fields;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2264      	movs	r2, #100	@ 0x64
 8002140:	18ba      	adds	r2, r7, r2
 8002142:	7812      	ldrb	r2, [r2, #0]
 8002144:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8002146:	e003      	b.n	8002150 <bme68x_get_data+0x252>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002148:	2367      	movs	r3, #103	@ 0x67
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	22ff      	movs	r2, #255	@ 0xff
 800214e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002150:	2367      	movs	r3, #103	@ 0x67
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b25b      	sxtb	r3, r3
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b01b      	add	sp, #108	@ 0x6c
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002160 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	260f      	movs	r6, #15
 800216c:	19bb      	adds	r3, r7, r6
 800216e:	1c02      	adds	r2, r0, #0
 8002170:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t nb_conv = 0;
 8002172:	231c      	movs	r3, #28
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
    uint8_t hctrl, run_gas = 0;
 800217a:	221d      	movs	r2, #29
 800217c:	18bb      	adds	r3, r7, r2
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8002182:	2214      	movs	r2, #20
 8002184:	18bb      	adds	r3, r7, r2
 8002186:	4a53      	ldr	r2, [pc, #332]	@ (80022d4 <bme68x_set_heatr_conf+0x174>)
 8002188:	801a      	strh	r2, [r3, #0]

    if (conf != NULL)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d100      	bne.n	8002192 <bme68x_set_heatr_conf+0x32>
 8002190:	e094      	b.n	80022bc <bme68x_set_heatr_conf+0x15c>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8002192:	251f      	movs	r5, #31
 8002194:	197c      	adds	r4, r7, r5
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0019      	movs	r1, r3
 800219a:	2000      	movs	r0, #0
 800219c:	f7ff fe08 	bl	8001db0 <bme68x_set_op_mode>
 80021a0:	0003      	movs	r3, r0
 80021a2:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 80021a4:	197b      	adds	r3, r7, r5
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10b      	bne.n	80021c6 <bme68x_set_heatr_conf+0x66>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80021ae:	197c      	adds	r4, r7, r5
 80021b0:	687d      	ldr	r5, [r7, #4]
 80021b2:	231c      	movs	r3, #28
 80021b4:	18fa      	adds	r2, r7, r3
 80021b6:	19bb      	adds	r3, r7, r6
 80021b8:	7819      	ldrb	r1, [r3, #0]
 80021ba:	68b8      	ldr	r0, [r7, #8]
 80021bc:	002b      	movs	r3, r5
 80021be:	f001 f9f9 	bl	80035b4 <set_conf>
 80021c2:	0003      	movs	r3, r0
 80021c4:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80021c6:	251f      	movs	r5, #31
 80021c8:	197b      	adds	r3, r7, r5
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d000      	beq.n	80021d4 <bme68x_set_heatr_conf+0x74>
 80021d2:	e077      	b.n	80022c4 <bme68x_set_heatr_conf+0x164>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80021d4:	197c      	adds	r4, r7, r5
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2218      	movs	r2, #24
 80021da:	18b9      	adds	r1, r7, r2
 80021dc:	2202      	movs	r2, #2
 80021de:	2070      	movs	r0, #112	@ 0x70
 80021e0:	f7ff fbe4 	bl	80019ac <bme68x_get_regs>
 80021e4:	0003      	movs	r3, r0
 80021e6:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 80021e8:	197b      	adds	r3, r7, r5
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d168      	bne.n	80022c4 <bme68x_set_heatr_conf+0x164>
            {
                if (conf->enable == BME68X_ENABLE)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d111      	bne.n	800221e <bme68x_set_heatr_conf+0xbe>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 80021fa:	231e      	movs	r3, #30
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d104      	bne.n	8002214 <bme68x_set_heatr_conf+0xb4>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 800220a:	231d      	movs	r3, #29
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e00c      	b.n	800222e <bme68x_set_heatr_conf+0xce>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8002214:	231d      	movs	r3, #29
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e007      	b.n	800222e <bme68x_set_heatr_conf+0xce>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 800221e:	231e      	movs	r3, #30
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8002226:	231d      	movs	r3, #29
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 800222e:	2018      	movs	r0, #24
 8002230:	183b      	adds	r3, r7, r0
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b25b      	sxtb	r3, r3
 8002236:	2208      	movs	r2, #8
 8002238:	4393      	bics	r3, r2
 800223a:	b25a      	sxtb	r2, r3
 800223c:	231e      	movs	r3, #30
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	b25b      	sxtb	r3, r3
 8002248:	2108      	movs	r1, #8
 800224a:	400b      	ands	r3, r1
 800224c:	b25b      	sxtb	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b25b      	sxtb	r3, r3
 8002252:	b2da      	uxtb	r2, r3
 8002254:	183b      	adds	r3, r7, r0
 8002256:	701a      	strb	r2, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8002258:	183b      	adds	r3, r7, r0
 800225a:	785b      	ldrb	r3, [r3, #1]
 800225c:	b25b      	sxtb	r3, r3
 800225e:	220f      	movs	r2, #15
 8002260:	4393      	bics	r3, r2
 8002262:	b25a      	sxtb	r2, r3
 8002264:	231c      	movs	r3, #28
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b25b      	sxtb	r3, r3
 800226c:	210f      	movs	r1, #15
 800226e:	400b      	ands	r3, r1
 8002270:	b25b      	sxtb	r3, r3
 8002272:	4313      	orrs	r3, r2
 8002274:	b25b      	sxtb	r3, r3
 8002276:	b2da      	uxtb	r2, r3
 8002278:	183b      	adds	r3, r7, r0
 800227a:	705a      	strb	r2, [r3, #1]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800227c:	183b      	adds	r3, r7, r0
 800227e:	785b      	ldrb	r3, [r3, #1]
 8002280:	b25b      	sxtb	r3, r3
 8002282:	2230      	movs	r2, #48	@ 0x30
 8002284:	4393      	bics	r3, r2
 8002286:	b25a      	sxtb	r2, r3
 8002288:	231d      	movs	r3, #29
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b25b      	sxtb	r3, r3
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	b25b      	sxtb	r3, r3
 8002294:	2130      	movs	r1, #48	@ 0x30
 8002296:	400b      	ands	r3, r1
 8002298:	b25b      	sxtb	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b25b      	sxtb	r3, r3
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	183b      	adds	r3, r7, r0
 80022a2:	705a      	strb	r2, [r3, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 80022a4:	231f      	movs	r3, #31
 80022a6:	18fc      	adds	r4, r7, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1839      	adds	r1, r7, r0
 80022ac:	2214      	movs	r2, #20
 80022ae:	18b8      	adds	r0, r7, r2
 80022b0:	2202      	movs	r2, #2
 80022b2:	f7ff face 	bl	8001852 <bme68x_set_regs>
 80022b6:	0003      	movs	r3, r0
 80022b8:	7023      	strb	r3, [r4, #0]
 80022ba:	e003      	b.n	80022c4 <bme68x_set_heatr_conf+0x164>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80022bc:	231f      	movs	r3, #31
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	22ff      	movs	r2, #255	@ 0xff
 80022c2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80022c4:	231f      	movs	r3, #31
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b25b      	sxtb	r3, r3
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b009      	add	sp, #36	@ 0x24
 80022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d4:	00007170 	.word	0x00007170

080022d8 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff f9c2 	bl	800166c <__aeabi_ui2f>
 80022e8:	1c03      	adds	r3, r0, #0
 80022ea:	218d      	movs	r1, #141	@ 0x8d
 80022ec:	05c9      	lsls	r1, r1, #23
 80022ee:	1c18      	adds	r0, r3, #0
 80022f0:	f7fe fbc0 	bl	8000a74 <__aeabi_fdiv>
 80022f4:	1c03      	adds	r3, r0, #0
 80022f6:	1c1c      	adds	r4, r3, #0
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	8bdb      	ldrh	r3, [r3, #30]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff f9b5 	bl	800166c <__aeabi_ui2f>
 8002302:	1c03      	adds	r3, r0, #0
 8002304:	2189      	movs	r1, #137	@ 0x89
 8002306:	05c9      	lsls	r1, r1, #23
 8002308:	1c18      	adds	r0, r3, #0
 800230a:	f7fe fbb3 	bl	8000a74 <__aeabi_fdiv>
 800230e:	1c03      	adds	r3, r0, #0
 8002310:	1c19      	adds	r1, r3, #0
 8002312:	1c20      	adds	r0, r4, #0
 8002314:	f7fe fed6 	bl	80010c4 <__aeabi_fsub>
 8002318:	1c03      	adds	r3, r0, #0
 800231a:	1c1c      	adds	r4, r3, #0
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2220      	movs	r2, #32
 8002320:	5e9b      	ldrsh	r3, [r3, r2]
 8002322:	0018      	movs	r0, r3
 8002324:	f7ff f952 	bl	80015cc <__aeabi_i2f>
 8002328:	1c03      	adds	r3, r0, #0
 800232a:	1c19      	adds	r1, r3, #0
 800232c:	1c20      	adds	r0, r4, #0
 800232e:	f7fe fd6f 	bl	8000e10 <__aeabi_fmul>
 8002332:	1c03      	adds	r3, r0, #0
 8002334:	617b      	str	r3, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff f998 	bl	800166c <__aeabi_ui2f>
 800233c:	1c03      	adds	r3, r0, #0
 800233e:	2190      	movs	r1, #144	@ 0x90
 8002340:	05c9      	lsls	r1, r1, #23
 8002342:	1c18      	adds	r0, r3, #0
 8002344:	f7fe fb96 	bl	8000a74 <__aeabi_fdiv>
 8002348:	1c03      	adds	r3, r0, #0
 800234a:	1c1c      	adds	r4, r3, #0
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	8bdb      	ldrh	r3, [r3, #30]
 8002350:	0018      	movs	r0, r3
 8002352:	f7ff f98b 	bl	800166c <__aeabi_ui2f>
 8002356:	1c03      	adds	r3, r0, #0
 8002358:	218c      	movs	r1, #140	@ 0x8c
 800235a:	05c9      	lsls	r1, r1, #23
 800235c:	1c18      	adds	r0, r3, #0
 800235e:	f7fe fb89 	bl	8000a74 <__aeabi_fdiv>
 8002362:	1c03      	adds	r3, r0, #0
 8002364:	1c19      	adds	r1, r3, #0
 8002366:	1c20      	adds	r0, r4, #0
 8002368:	f7fe feac 	bl	80010c4 <__aeabi_fsub>
 800236c:	1c03      	adds	r3, r0, #0
 800236e:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff f97b 	bl	800166c <__aeabi_ui2f>
 8002376:	1c03      	adds	r3, r0, #0
 8002378:	2190      	movs	r1, #144	@ 0x90
 800237a:	05c9      	lsls	r1, r1, #23
 800237c:	1c18      	adds	r0, r3, #0
 800237e:	f7fe fb79 	bl	8000a74 <__aeabi_fdiv>
 8002382:	1c03      	adds	r3, r0, #0
 8002384:	1c1d      	adds	r5, r3, #0
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	8bdb      	ldrh	r3, [r3, #30]
 800238a:	0018      	movs	r0, r3
 800238c:	f7ff f96e 	bl	800166c <__aeabi_ui2f>
 8002390:	1c03      	adds	r3, r0, #0
 8002392:	218c      	movs	r1, #140	@ 0x8c
 8002394:	05c9      	lsls	r1, r1, #23
 8002396:	1c18      	adds	r0, r3, #0
 8002398:	f7fe fb6c 	bl	8000a74 <__aeabi_fdiv>
 800239c:	1c03      	adds	r3, r0, #0
 800239e:	1c19      	adds	r1, r3, #0
 80023a0:	1c28      	adds	r0, r5, #0
 80023a2:	f7fe fe8f 	bl	80010c4 <__aeabi_fsub>
 80023a6:	1c03      	adds	r3, r0, #0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80023a8:	1c19      	adds	r1, r3, #0
 80023aa:	1c20      	adds	r0, r4, #0
 80023ac:	f7fe fd30 	bl	8000e10 <__aeabi_fmul>
 80023b0:	1c03      	adds	r3, r0, #0
 80023b2:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2222      	movs	r2, #34	@ 0x22
 80023b8:	569b      	ldrsb	r3, [r3, r2]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff f906 	bl	80015cc <__aeabi_i2f>
 80023c0:	1c03      	adds	r3, r0, #0
 80023c2:	2183      	movs	r1, #131	@ 0x83
 80023c4:	05c9      	lsls	r1, r1, #23
 80023c6:	1c18      	adds	r0, r3, #0
 80023c8:	f7fe fd22 	bl	8000e10 <__aeabi_fmul>
 80023cc:	1c03      	adds	r3, r0, #0
    var2 =
 80023ce:	1c19      	adds	r1, r3, #0
 80023d0:	1c20      	adds	r0, r4, #0
 80023d2:	f7fe fd1d 	bl	8000e10 <__aeabi_fmul>
 80023d6:	1c03      	adds	r3, r0, #0
 80023d8:	613b      	str	r3, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80023da:	6939      	ldr	r1, [r7, #16]
 80023dc:	6978      	ldr	r0, [r7, #20]
 80023de:	f7fe f957 	bl	8000690 <__aeabi_fadd>
 80023e2:	1c03      	adds	r3, r0, #0
 80023e4:	1c1a      	adds	r2, r3, #0
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	4905      	ldr	r1, [pc, #20]	@ (8002404 <calc_temperature+0x12c>)
 80023f0:	1c18      	adds	r0, r3, #0
 80023f2:	f7fe fb3f 	bl	8000a74 <__aeabi_fdiv>
 80023f6:	1c03      	adds	r3, r0, #0
 80023f8:	60fb      	str	r3, [r7, #12]

    return calc_temp;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	1c18      	adds	r0, r3, #0
 80023fe:	46bd      	mov	sp, r7
 8002400:	b006      	add	sp, #24
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	45a00000 	.word	0x45a00000

08002408 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002416:	2180      	movs	r1, #128	@ 0x80
 8002418:	05c9      	lsls	r1, r1, #23
 800241a:	1c18      	adds	r0, r3, #0
 800241c:	f7fe fb2a 	bl	8000a74 <__aeabi_fdiv>
 8002420:	1c03      	adds	r3, r0, #0
 8002422:	49a7      	ldr	r1, [pc, #668]	@ (80026c0 <calc_pressure+0x2b8>)
 8002424:	1c18      	adds	r0, r3, #0
 8002426:	f7fe fe4d 	bl	80010c4 <__aeabi_fsub>
 800242a:	1c03      	adds	r3, r0, #0
 800242c:	613b      	str	r3, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 800242e:	6939      	ldr	r1, [r7, #16]
 8002430:	6938      	ldr	r0, [r7, #16]
 8002432:	f7fe fced 	bl	8000e10 <__aeabi_fmul>
 8002436:	1c03      	adds	r3, r0, #0
 8002438:	1c1c      	adds	r4, r3, #0
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	222e      	movs	r2, #46	@ 0x2e
 800243e:	569b      	ldrsb	r3, [r3, r2]
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff f8c3 	bl	80015cc <__aeabi_i2f>
 8002446:	1c03      	adds	r3, r0, #0
 8002448:	2190      	movs	r1, #144	@ 0x90
 800244a:	05c9      	lsls	r1, r1, #23
 800244c:	1c18      	adds	r0, r3, #0
 800244e:	f7fe fb11 	bl	8000a74 <__aeabi_fdiv>
 8002452:	1c03      	adds	r3, r0, #0
 8002454:	1c19      	adds	r1, r3, #0
 8002456:	1c20      	adds	r0, r4, #0
 8002458:	f7fe fcda 	bl	8000e10 <__aeabi_fmul>
 800245c:	1c03      	adds	r3, r0, #0
 800245e:	60fb      	str	r3, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	222c      	movs	r2, #44	@ 0x2c
 8002464:	5e9b      	ldrsh	r3, [r3, r2]
 8002466:	0018      	movs	r0, r3
 8002468:	f7ff f8b0 	bl	80015cc <__aeabi_i2f>
 800246c:	1c03      	adds	r3, r0, #0
 800246e:	6939      	ldr	r1, [r7, #16]
 8002470:	1c18      	adds	r0, r3, #0
 8002472:	f7fe fccd 	bl	8000e10 <__aeabi_fmul>
 8002476:	1c03      	adds	r3, r0, #0
 8002478:	1c19      	adds	r1, r3, #0
 800247a:	1c18      	adds	r0, r3, #0
 800247c:	f7fe f908 	bl	8000690 <__aeabi_fadd>
 8002480:	1c03      	adds	r3, r0, #0
 8002482:	1c19      	adds	r1, r3, #0
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7fe f903 	bl	8000690 <__aeabi_fadd>
 800248a:	1c03      	adds	r3, r0, #0
 800248c:	60fb      	str	r3, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 800248e:	2181      	movs	r1, #129	@ 0x81
 8002490:	05c9      	lsls	r1, r1, #23
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7fe faee 	bl	8000a74 <__aeabi_fdiv>
 8002498:	1c03      	adds	r3, r0, #0
 800249a:	1c1c      	adds	r4, r3, #0
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	222a      	movs	r2, #42	@ 0x2a
 80024a0:	5e9b      	ldrsh	r3, [r3, r2]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7ff f892 	bl	80015cc <__aeabi_i2f>
 80024a8:	1c03      	adds	r3, r0, #0
 80024aa:	218f      	movs	r1, #143	@ 0x8f
 80024ac:	05c9      	lsls	r1, r1, #23
 80024ae:	1c18      	adds	r0, r3, #0
 80024b0:	f7fe fcae 	bl	8000e10 <__aeabi_fmul>
 80024b4:	1c03      	adds	r3, r0, #0
 80024b6:	1c19      	adds	r1, r3, #0
 80024b8:	1c20      	adds	r0, r4, #0
 80024ba:	f7fe f8e9 	bl	8000690 <__aeabi_fadd>
 80024be:	1c03      	adds	r3, r0, #0
 80024c0:	60fb      	str	r3, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2228      	movs	r2, #40	@ 0x28
 80024c6:	569b      	ldrsb	r3, [r3, r2]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff f87f 	bl	80015cc <__aeabi_i2f>
 80024ce:	1c03      	adds	r3, r0, #0
 80024d0:	6939      	ldr	r1, [r7, #16]
 80024d2:	1c18      	adds	r0, r3, #0
 80024d4:	f7fe fc9c 	bl	8000e10 <__aeabi_fmul>
 80024d8:	1c03      	adds	r3, r0, #0
 80024da:	6939      	ldr	r1, [r7, #16]
 80024dc:	1c18      	adds	r0, r3, #0
 80024de:	f7fe fc97 	bl	8000e10 <__aeabi_fmul>
 80024e2:	1c03      	adds	r3, r0, #0
 80024e4:	218d      	movs	r1, #141	@ 0x8d
 80024e6:	05c9      	lsls	r1, r1, #23
 80024e8:	1c18      	adds	r0, r3, #0
 80024ea:	f7fe fac3 	bl	8000a74 <__aeabi_fdiv>
 80024ee:	1c03      	adds	r3, r0, #0
 80024f0:	1c1c      	adds	r4, r3, #0
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2226      	movs	r2, #38	@ 0x26
 80024f6:	5e9b      	ldrsh	r3, [r3, r2]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7ff f867 	bl	80015cc <__aeabi_i2f>
 80024fe:	1c03      	adds	r3, r0, #0
 8002500:	6939      	ldr	r1, [r7, #16]
 8002502:	1c18      	adds	r0, r3, #0
 8002504:	f7fe fc84 	bl	8000e10 <__aeabi_fmul>
 8002508:	1c03      	adds	r3, r0, #0
 800250a:	1c19      	adds	r1, r3, #0
 800250c:	1c20      	adds	r0, r4, #0
 800250e:	f7fe f8bf 	bl	8000690 <__aeabi_fadd>
 8002512:	1c03      	adds	r3, r0, #0
 8002514:	2192      	movs	r1, #146	@ 0x92
 8002516:	05c9      	lsls	r1, r1, #23
 8002518:	1c18      	adds	r0, r3, #0
 800251a:	f7fe faab 	bl	8000a74 <__aeabi_fdiv>
 800251e:	1c03      	adds	r3, r0, #0
 8002520:	613b      	str	r3, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8002522:	218e      	movs	r1, #142	@ 0x8e
 8002524:	05c9      	lsls	r1, r1, #23
 8002526:	6938      	ldr	r0, [r7, #16]
 8002528:	f7fe faa4 	bl	8000a74 <__aeabi_fdiv>
 800252c:	1c03      	adds	r3, r0, #0
 800252e:	21fe      	movs	r1, #254	@ 0xfe
 8002530:	0589      	lsls	r1, r1, #22
 8002532:	1c18      	adds	r0, r3, #0
 8002534:	f7fe f8ac 	bl	8000690 <__aeabi_fadd>
 8002538:	1c03      	adds	r3, r0, #0
 800253a:	1c1c      	adds	r4, r3, #0
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff f893 	bl	800166c <__aeabi_ui2f>
 8002546:	1c03      	adds	r3, r0, #0
 8002548:	1c19      	adds	r1, r3, #0
 800254a:	1c20      	adds	r0, r4, #0
 800254c:	f7fe fc60 	bl	8000e10 <__aeabi_fmul>
 8002550:	1c03      	adds	r3, r0, #0
 8002552:	613b      	str	r3, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff f889 	bl	800166c <__aeabi_ui2f>
 800255a:	1c03      	adds	r3, r0, #0
 800255c:	1c19      	adds	r1, r3, #0
 800255e:	2093      	movs	r0, #147	@ 0x93
 8002560:	05c0      	lsls	r0, r0, #23
 8002562:	f7fe fdaf 	bl	80010c4 <__aeabi_fsub>
 8002566:	1c03      	adds	r3, r0, #0
 8002568:	617b      	str	r3, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 800256a:	6938      	ldr	r0, [r7, #16]
 800256c:	f7ff f80e 	bl	800158c <__aeabi_f2iz>
 8002570:	1e03      	subs	r3, r0, #0
 8002572:	d100      	bne.n	8002576 <calc_pressure+0x16e>
 8002574:	e09c      	b.n	80026b0 <calc_pressure+0x2a8>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8002576:	218b      	movs	r1, #139	@ 0x8b
 8002578:	05c9      	lsls	r1, r1, #23
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7fe fa7a 	bl	8000a74 <__aeabi_fdiv>
 8002580:	1c03      	adds	r3, r0, #0
 8002582:	1c19      	adds	r1, r3, #0
 8002584:	6978      	ldr	r0, [r7, #20]
 8002586:	f7fe fd9d 	bl	80010c4 <__aeabi_fsub>
 800258a:	1c03      	adds	r3, r0, #0
 800258c:	494d      	ldr	r1, [pc, #308]	@ (80026c4 <calc_pressure+0x2bc>)
 800258e:	1c18      	adds	r0, r3, #0
 8002590:	f7fe fc3e 	bl	8000e10 <__aeabi_fmul>
 8002594:	1c03      	adds	r3, r0, #0
 8002596:	6939      	ldr	r1, [r7, #16]
 8002598:	1c18      	adds	r0, r3, #0
 800259a:	f7fe fa6b 	bl	8000a74 <__aeabi_fdiv>
 800259e:	1c03      	adds	r3, r0, #0
 80025a0:	617b      	str	r3, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2232      	movs	r2, #50	@ 0x32
 80025a6:	5e9b      	ldrsh	r3, [r3, r2]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7ff f80f 	bl	80015cc <__aeabi_i2f>
 80025ae:	1c03      	adds	r3, r0, #0
 80025b0:	6979      	ldr	r1, [r7, #20]
 80025b2:	1c18      	adds	r0, r3, #0
 80025b4:	f7fe fc2c 	bl	8000e10 <__aeabi_fmul>
 80025b8:	1c03      	adds	r3, r0, #0
 80025ba:	6979      	ldr	r1, [r7, #20]
 80025bc:	1c18      	adds	r0, r3, #0
 80025be:	f7fe fc27 	bl	8000e10 <__aeabi_fmul>
 80025c2:	1c03      	adds	r3, r0, #0
 80025c4:	219e      	movs	r1, #158	@ 0x9e
 80025c6:	05c9      	lsls	r1, r1, #23
 80025c8:	1c18      	adds	r0, r3, #0
 80025ca:	f7fe fa53 	bl	8000a74 <__aeabi_fdiv>
 80025ce:	1c03      	adds	r3, r0, #0
 80025d0:	613b      	str	r3, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2230      	movs	r2, #48	@ 0x30
 80025d6:	5e9b      	ldrsh	r3, [r3, r2]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7fe fff7 	bl	80015cc <__aeabi_i2f>
 80025de:	1c03      	adds	r3, r0, #0
 80025e0:	218e      	movs	r1, #142	@ 0x8e
 80025e2:	05c9      	lsls	r1, r1, #23
 80025e4:	1c18      	adds	r0, r3, #0
 80025e6:	f7fe fa45 	bl	8000a74 <__aeabi_fdiv>
 80025ea:	1c03      	adds	r3, r0, #0
 80025ec:	1c19      	adds	r1, r3, #0
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7fe fc0e 	bl	8000e10 <__aeabi_fmul>
 80025f4:	1c03      	adds	r3, r0, #0
 80025f6:	60fb      	str	r3, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80025f8:	2187      	movs	r1, #135	@ 0x87
 80025fa:	05c9      	lsls	r1, r1, #23
 80025fc:	6978      	ldr	r0, [r7, #20]
 80025fe:	f7fe fa39 	bl	8000a74 <__aeabi_fdiv>
 8002602:	1c03      	adds	r3, r0, #0
 8002604:	1c1c      	adds	r4, r3, #0
 8002606:	2187      	movs	r1, #135	@ 0x87
 8002608:	05c9      	lsls	r1, r1, #23
 800260a:	6978      	ldr	r0, [r7, #20]
 800260c:	f7fe fa32 	bl	8000a74 <__aeabi_fdiv>
 8002610:	1c03      	adds	r3, r0, #0
 8002612:	1c19      	adds	r1, r3, #0
 8002614:	1c20      	adds	r0, r4, #0
 8002616:	f7fe fbfb 	bl	8000e10 <__aeabi_fmul>
 800261a:	1c03      	adds	r3, r0, #0
 800261c:	1c1c      	adds	r4, r3, #0
 800261e:	2187      	movs	r1, #135	@ 0x87
 8002620:	05c9      	lsls	r1, r1, #23
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7fe fa26 	bl	8000a74 <__aeabi_fdiv>
 8002628:	1c03      	adds	r3, r0, #0
 800262a:	1c19      	adds	r1, r3, #0
 800262c:	1c20      	adds	r0, r4, #0
 800262e:	f7fe fbef 	bl	8000e10 <__aeabi_fmul>
 8002632:	1c03      	adds	r3, r0, #0
 8002634:	1c1c      	adds	r4, r3, #0
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2234      	movs	r2, #52	@ 0x34
 800263a:	5c9b      	ldrb	r3, [r3, r2]
 800263c:	0018      	movs	r0, r3
 800263e:	f7fe ffc5 	bl	80015cc <__aeabi_i2f>
 8002642:	1c03      	adds	r3, r0, #0
 8002644:	2190      	movs	r1, #144	@ 0x90
 8002646:	05c9      	lsls	r1, r1, #23
 8002648:	1c18      	adds	r0, r3, #0
 800264a:	f7fe fa13 	bl	8000a74 <__aeabi_fdiv>
 800264e:	1c03      	adds	r3, r0, #0
 8002650:	1c19      	adds	r1, r3, #0
 8002652:	1c20      	adds	r0, r4, #0
 8002654:	f7fe fbdc 	bl	8000e10 <__aeabi_fmul>
 8002658:	1c03      	adds	r3, r0, #0
 800265a:	60bb      	str	r3, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 800265c:	68f9      	ldr	r1, [r7, #12]
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f7fe f816 	bl	8000690 <__aeabi_fadd>
 8002664:	1c03      	adds	r3, r0, #0
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	1c18      	adds	r0, r3, #0
 800266a:	f7fe f811 	bl	8000690 <__aeabi_fadd>
 800266e:	1c03      	adds	r3, r0, #0
 8002670:	1c1c      	adds	r4, r3, #0
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	222f      	movs	r2, #47	@ 0x2f
 8002676:	569b      	ldrsb	r3, [r3, r2]
 8002678:	0018      	movs	r0, r3
 800267a:	f7fe ffa7 	bl	80015cc <__aeabi_i2f>
 800267e:	1c03      	adds	r3, r0, #0
 8002680:	2186      	movs	r1, #134	@ 0x86
 8002682:	05c9      	lsls	r1, r1, #23
 8002684:	1c18      	adds	r0, r3, #0
 8002686:	f7fe fbc3 	bl	8000e10 <__aeabi_fmul>
 800268a:	1c03      	adds	r3, r0, #0
 800268c:	1c19      	adds	r1, r3, #0
 800268e:	1c20      	adds	r0, r4, #0
 8002690:	f7fd fffe 	bl	8000690 <__aeabi_fadd>
 8002694:	1c03      	adds	r3, r0, #0
 8002696:	2183      	movs	r1, #131	@ 0x83
 8002698:	05c9      	lsls	r1, r1, #23
 800269a:	1c18      	adds	r0, r3, #0
 800269c:	f7fe f9ea 	bl	8000a74 <__aeabi_fdiv>
 80026a0:	1c03      	adds	r3, r0, #0
 80026a2:	1c19      	adds	r1, r3, #0
 80026a4:	6978      	ldr	r0, [r7, #20]
 80026a6:	f7fd fff3 	bl	8000690 <__aeabi_fadd>
 80026aa:	1c03      	adds	r3, r0, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e001      	b.n	80026b4 <calc_pressure+0x2ac>
    }
    else
    {
        calc_pres = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 80026b4:	697b      	ldr	r3, [r7, #20]
}
 80026b6:	1c18      	adds	r0, r3, #0
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b007      	add	sp, #28
 80026bc:	bd90      	pop	{r4, r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	477a0000 	.word	0x477a0000
 80026c4:	45c35000 	.word	0x45c35000

080026c8 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 80026c8:	b5b0      	push	{r4, r5, r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	0002      	movs	r2, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	1dbb      	adds	r3, r7, #6
 80026d4:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	4967      	ldr	r1, [pc, #412]	@ (8002878 <calc_humidity+0x1b0>)
 80026dc:	1c18      	adds	r0, r3, #0
 80026de:	f7fe f9c9 	bl	8000a74 <__aeabi_fdiv>
 80026e2:	1c03      	adds	r3, r0, #0
 80026e4:	61bb      	str	r3, [r7, #24]
    var1 = (float)((float)hum_adc) -
 80026e6:	1dbb      	adds	r3, r7, #6
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7fe ffbe 	bl	800166c <__aeabi_ui2f>
 80026f0:	1c04      	adds	r4, r0, #0
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	8a1b      	ldrh	r3, [r3, #16]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7fe ffb8 	bl	800166c <__aeabi_ui2f>
 80026fc:	1c03      	adds	r3, r0, #0
 80026fe:	2183      	movs	r1, #131	@ 0x83
 8002700:	05c9      	lsls	r1, r1, #23
 8002702:	1c18      	adds	r0, r3, #0
 8002704:	f7fe fb84 	bl	8000e10 <__aeabi_fmul>
 8002708:	1c03      	adds	r3, r0, #0
 800270a:	1c1d      	adds	r5, r3, #0
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	7d1b      	ldrb	r3, [r3, #20]
 8002710:	b25b      	sxtb	r3, r3
 8002712:	0018      	movs	r0, r3
 8002714:	f7fe ff5a 	bl	80015cc <__aeabi_i2f>
 8002718:	1c03      	adds	r3, r0, #0
 800271a:	2180      	movs	r1, #128	@ 0x80
 800271c:	05c9      	lsls	r1, r1, #23
 800271e:	1c18      	adds	r0, r3, #0
 8002720:	f7fe f9a8 	bl	8000a74 <__aeabi_fdiv>
 8002724:	1c03      	adds	r3, r0, #0
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	1c18      	adds	r0, r3, #0
 800272a:	f7fe fb71 	bl	8000e10 <__aeabi_fmul>
 800272e:	1c03      	adds	r3, r0, #0
 8002730:	1c19      	adds	r1, r3, #0
 8002732:	1c28      	adds	r0, r5, #0
 8002734:	f7fd ffac 	bl	8000690 <__aeabi_fadd>
 8002738:	1c03      	adds	r3, r0, #0
    var1 = (float)((float)hum_adc) -
 800273a:	1c19      	adds	r1, r3, #0
 800273c:	1c20      	adds	r0, r4, #0
 800273e:	f7fe fcc1 	bl	80010c4 <__aeabi_fsub>
 8002742:	1c03      	adds	r3, r0, #0
 8002744:	617b      	str	r3, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	8a5b      	ldrh	r3, [r3, #18]
 800274a:	0018      	movs	r0, r3
 800274c:	f7fe ff8e 	bl	800166c <__aeabi_ui2f>
 8002750:	1c03      	adds	r3, r0, #0
 8002752:	2191      	movs	r1, #145	@ 0x91
 8002754:	05c9      	lsls	r1, r1, #23
 8002756:	1c18      	adds	r0, r3, #0
 8002758:	f7fe f98c 	bl	8000a74 <__aeabi_fdiv>
 800275c:	1c03      	adds	r3, r0, #0
 800275e:	1c1c      	adds	r4, r3, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	7d5b      	ldrb	r3, [r3, #21]
 8002764:	b25b      	sxtb	r3, r3
 8002766:	0018      	movs	r0, r3
 8002768:	f7fe ff30 	bl	80015cc <__aeabi_i2f>
 800276c:	1c03      	adds	r3, r0, #0
 800276e:	218d      	movs	r1, #141	@ 0x8d
 8002770:	05c9      	lsls	r1, r1, #23
 8002772:	1c18      	adds	r0, r3, #0
 8002774:	f7fe f97e 	bl	8000a74 <__aeabi_fdiv>
 8002778:	1c03      	adds	r3, r0, #0
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	1c18      	adds	r0, r3, #0
 800277e:	f7fe fb47 	bl	8000e10 <__aeabi_fmul>
 8002782:	1c03      	adds	r3, r0, #0
 8002784:	21fe      	movs	r1, #254	@ 0xfe
 8002786:	0589      	lsls	r1, r1, #22
 8002788:	1c18      	adds	r0, r3, #0
 800278a:	f7fd ff81 	bl	8000690 <__aeabi_fadd>
 800278e:	1c03      	adds	r3, r0, #0
 8002790:	1c1d      	adds	r5, r3, #0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7d9b      	ldrb	r3, [r3, #22]
 8002796:	b25b      	sxtb	r3, r3
 8002798:	0018      	movs	r0, r3
 800279a:	f7fe ff17 	bl	80015cc <__aeabi_i2f>
 800279e:	1c03      	adds	r3, r0, #0
 80027a0:	2193      	movs	r1, #147	@ 0x93
 80027a2:	05c9      	lsls	r1, r1, #23
 80027a4:	1c18      	adds	r0, r3, #0
 80027a6:	f7fe f965 	bl	8000a74 <__aeabi_fdiv>
 80027aa:	1c03      	adds	r3, r0, #0
 80027ac:	69b9      	ldr	r1, [r7, #24]
 80027ae:	1c18      	adds	r0, r3, #0
 80027b0:	f7fe fb2e 	bl	8000e10 <__aeabi_fmul>
 80027b4:	1c03      	adds	r3, r0, #0
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	1c18      	adds	r0, r3, #0
 80027ba:	f7fe fb29 	bl	8000e10 <__aeabi_fmul>
 80027be:	1c03      	adds	r3, r0, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 80027c0:	1c19      	adds	r1, r3, #0
 80027c2:	1c28      	adds	r0, r5, #0
 80027c4:	f7fd ff64 	bl	8000690 <__aeabi_fadd>
 80027c8:	1c03      	adds	r3, r0, #0
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 80027ca:	1c19      	adds	r1, r3, #0
 80027cc:	1c20      	adds	r0, r4, #0
 80027ce:	f7fe fb1f 	bl	8000e10 <__aeabi_fmul>
 80027d2:	1c03      	adds	r3, r0, #0
    var2 = var1 *
 80027d4:	1c19      	adds	r1, r3, #0
 80027d6:	6978      	ldr	r0, [r7, #20]
 80027d8:	f7fe fb1a 	bl	8000e10 <__aeabi_fmul>
 80027dc:	1c03      	adds	r3, r0, #0
 80027de:	613b      	str	r3, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	7ddb      	ldrb	r3, [r3, #23]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fe ff41 	bl	800166c <__aeabi_ui2f>
 80027ea:	1c03      	adds	r3, r0, #0
 80027ec:	218d      	movs	r1, #141	@ 0x8d
 80027ee:	05c9      	lsls	r1, r1, #23
 80027f0:	1c18      	adds	r0, r3, #0
 80027f2:	f7fe f93f 	bl	8000a74 <__aeabi_fdiv>
 80027f6:	1c03      	adds	r3, r0, #0
 80027f8:	60fb      	str	r3, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7e1b      	ldrb	r3, [r3, #24]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	0018      	movs	r0, r3
 8002802:	f7fe fee3 	bl	80015cc <__aeabi_i2f>
 8002806:	1c03      	adds	r3, r0, #0
 8002808:	2194      	movs	r1, #148	@ 0x94
 800280a:	05c9      	lsls	r1, r1, #23
 800280c:	1c18      	adds	r0, r3, #0
 800280e:	f7fe f931 	bl	8000a74 <__aeabi_fdiv>
 8002812:	1c03      	adds	r3, r0, #0
 8002814:	60bb      	str	r3, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8002816:	69b9      	ldr	r1, [r7, #24]
 8002818:	68b8      	ldr	r0, [r7, #8]
 800281a:	f7fe faf9 	bl	8000e10 <__aeabi_fmul>
 800281e:	1c03      	adds	r3, r0, #0
 8002820:	68f9      	ldr	r1, [r7, #12]
 8002822:	1c18      	adds	r0, r3, #0
 8002824:	f7fd ff34 	bl	8000690 <__aeabi_fadd>
 8002828:	1c03      	adds	r3, r0, #0
 800282a:	6939      	ldr	r1, [r7, #16]
 800282c:	1c18      	adds	r0, r3, #0
 800282e:	f7fe faef 	bl	8000e10 <__aeabi_fmul>
 8002832:	1c03      	adds	r3, r0, #0
 8002834:	6939      	ldr	r1, [r7, #16]
 8002836:	1c18      	adds	r0, r3, #0
 8002838:	f7fe faea 	bl	8000e10 <__aeabi_fmul>
 800283c:	1c03      	adds	r3, r0, #0
 800283e:	1c19      	adds	r1, r3, #0
 8002840:	6938      	ldr	r0, [r7, #16]
 8002842:	f7fd ff25 	bl	8000690 <__aeabi_fadd>
 8002846:	1c03      	adds	r3, r0, #0
 8002848:	61fb      	str	r3, [r7, #28]
    if (calc_hum > 100.0f)
 800284a:	490c      	ldr	r1, [pc, #48]	@ (800287c <calc_humidity+0x1b4>)
 800284c:	69f8      	ldr	r0, [r7, #28]
 800284e:	f7fd fe07 	bl	8000460 <__aeabi_fcmpgt>
 8002852:	1e03      	subs	r3, r0, #0
 8002854:	d002      	beq.n	800285c <calc_humidity+0x194>
    {
        calc_hum = 100.0f;
 8002856:	4b09      	ldr	r3, [pc, #36]	@ (800287c <calc_humidity+0x1b4>)
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e007      	b.n	800286c <calc_humidity+0x1a4>
    }
    else if (calc_hum < 0.0f)
 800285c:	2100      	movs	r1, #0
 800285e:	69f8      	ldr	r0, [r7, #28]
 8002860:	f7fd fdea 	bl	8000438 <__aeabi_fcmplt>
 8002864:	1e03      	subs	r3, r0, #0
 8002866:	d001      	beq.n	800286c <calc_humidity+0x1a4>
    {
        calc_hum = 0.0f;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 800286c:	69fb      	ldr	r3, [r7, #28]
}
 800286e:	1c18      	adds	r0, r3, #0
 8002870:	46bd      	mov	sp, r7
 8002872:	b008      	add	sp, #32
 8002874:	bdb0      	pop	{r4, r5, r7, pc}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	45a00000 	.word	0x45a00000
 800287c:	42c80000 	.word	0x42c80000

08002880 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8002880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002882:	b0a9      	sub	sp, #164	@ 0xa4
 8002884:	af00      	add	r7, sp, #0
 8002886:	603a      	str	r2, [r7, #0]
 8002888:	1dbb      	adds	r3, r7, #6
 800288a:	1c02      	adds	r2, r0, #0
 800288c:	801a      	strh	r2, [r3, #0]
 800288e:	1d7b      	adds	r3, r7, #5
 8002890:	1c0a      	adds	r2, r1, #0
 8002892:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8002894:	1dbb      	adds	r3, r7, #6
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	0018      	movs	r0, r3
 800289a:	f7fe fee7 	bl	800166c <__aeabi_ui2f>
 800289e:	1c03      	adds	r3, r0, #0
 80028a0:	259c      	movs	r5, #156	@ 0x9c
 80028a2:	197a      	adds	r2, r7, r5
 80028a4:	6013      	str	r3, [r2, #0]
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 80028a6:	1d7b      	adds	r3, r7, #5
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	409a      	lsls	r2, r3
 80028ae:	0013      	movs	r3, r2
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fe fedb 	bl	800166c <__aeabi_ui2f>
 80028b6:	1c03      	adds	r3, r0, #0
 80028b8:	2498      	movs	r4, #152	@ 0x98
 80028ba:	193a      	adds	r2, r7, r4
 80028bc:	6013      	str	r3, [r2, #0]
    const float lookup_k1_range[16] = {
 80028be:	2648      	movs	r6, #72	@ 0x48
 80028c0:	19ba      	adds	r2, r7, r6
 80028c2:	4b43      	ldr	r3, [pc, #268]	@ (80029d0 <calc_gas_resistance_low+0x150>)
 80028c4:	0010      	movs	r0, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	2340      	movs	r3, #64	@ 0x40
 80028ca:	001a      	movs	r2, r3
 80028cc:	f005 f80a 	bl	80078e4 <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 80028d0:	2308      	movs	r3, #8
 80028d2:	18fa      	adds	r2, r7, r3
 80028d4:	4b3f      	ldr	r3, [pc, #252]	@ (80029d4 <calc_gas_resistance_low+0x154>)
 80028d6:	0010      	movs	r0, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	2340      	movs	r3, #64	@ 0x40
 80028dc:	001a      	movs	r2, r3
 80028de:	f005 f801 	bl	80078e4 <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	223e      	movs	r2, #62	@ 0x3e
 80028e6:	569b      	ldrsb	r3, [r3, r2]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7fe fe6f 	bl	80015cc <__aeabi_i2f>
 80028ee:	1c03      	adds	r3, r0, #0
 80028f0:	4939      	ldr	r1, [pc, #228]	@ (80029d8 <calc_gas_resistance_low+0x158>)
 80028f2:	1c18      	adds	r0, r3, #0
 80028f4:	f7fe fa8c 	bl	8000e10 <__aeabi_fmul>
 80028f8:	1c03      	adds	r3, r0, #0
 80028fa:	4938      	ldr	r1, [pc, #224]	@ (80029dc <calc_gas_resistance_low+0x15c>)
 80028fc:	1c18      	adds	r0, r3, #0
 80028fe:	f7fd fec7 	bl	8000690 <__aeabi_fadd>
 8002902:	1c03      	adds	r3, r0, #0
 8002904:	2294      	movs	r2, #148	@ 0x94
 8002906:	18b9      	adds	r1, r7, r2
 8002908:	600b      	str	r3, [r1, #0]
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 800290a:	1d7b      	adds	r3, r7, #5
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	19bb      	adds	r3, r7, r6
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	58d3      	ldr	r3, [r2, r3]
 8002914:	4932      	ldr	r1, [pc, #200]	@ (80029e0 <calc_gas_resistance_low+0x160>)
 8002916:	1c18      	adds	r0, r3, #0
 8002918:	f7fe f8ac 	bl	8000a74 <__aeabi_fdiv>
 800291c:	1c03      	adds	r3, r0, #0
 800291e:	21fe      	movs	r1, #254	@ 0xfe
 8002920:	0589      	lsls	r1, r1, #22
 8002922:	1c18      	adds	r0, r3, #0
 8002924:	f7fd feb4 	bl	8000690 <__aeabi_fadd>
 8002928:	1c03      	adds	r3, r0, #0
 800292a:	1c19      	adds	r1, r3, #0
 800292c:	2294      	movs	r2, #148	@ 0x94
 800292e:	18ba      	adds	r2, r7, r2
 8002930:	6810      	ldr	r0, [r2, #0]
 8002932:	f7fe fa6d 	bl	8000e10 <__aeabi_fmul>
 8002936:	1c03      	adds	r3, r0, #0
 8002938:	2690      	movs	r6, #144	@ 0x90
 800293a:	19ba      	adds	r2, r7, r6
 800293c:	6013      	str	r3, [r2, #0]
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 800293e:	1d7b      	adds	r3, r7, #5
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	2308      	movs	r3, #8
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	58d3      	ldr	r3, [r2, r3]
 800294a:	4925      	ldr	r1, [pc, #148]	@ (80029e0 <calc_gas_resistance_low+0x160>)
 800294c:	1c18      	adds	r0, r3, #0
 800294e:	f7fe f891 	bl	8000a74 <__aeabi_fdiv>
 8002952:	1c03      	adds	r3, r0, #0
 8002954:	21fe      	movs	r1, #254	@ 0xfe
 8002956:	0589      	lsls	r1, r1, #22
 8002958:	1c18      	adds	r0, r3, #0
 800295a:	f7fd fe99 	bl	8000690 <__aeabi_fadd>
 800295e:	1c03      	adds	r3, r0, #0
 8002960:	228c      	movs	r2, #140	@ 0x8c
 8002962:	18b9      	adds	r1, r7, r2
 8002964:	600b      	str	r3, [r1, #0]
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8002966:	491f      	ldr	r1, [pc, #124]	@ (80029e4 <calc_gas_resistance_low+0x164>)
 8002968:	18bb      	adds	r3, r7, r2
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	f7fe fa50 	bl	8000e10 <__aeabi_fmul>
 8002970:	1c03      	adds	r3, r0, #0
 8002972:	193a      	adds	r2, r7, r4
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	1c18      	adds	r0, r3, #0
 8002978:	f7fe fa4a 	bl	8000e10 <__aeabi_fmul>
 800297c:	1c03      	adds	r3, r0, #0
 800297e:	1c1c      	adds	r4, r3, #0
 8002980:	2188      	movs	r1, #136	@ 0x88
 8002982:	05c9      	lsls	r1, r1, #23
 8002984:	197b      	adds	r3, r7, r5
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	f7fe fb9c 	bl	80010c4 <__aeabi_fsub>
 800298c:	1c03      	adds	r3, r0, #0
 800298e:	19ba      	adds	r2, r7, r6
 8002990:	6811      	ldr	r1, [r2, #0]
 8002992:	1c18      	adds	r0, r3, #0
 8002994:	f7fe f86e 	bl	8000a74 <__aeabi_fdiv>
 8002998:	1c03      	adds	r3, r0, #0
 800299a:	21fe      	movs	r1, #254	@ 0xfe
 800299c:	0589      	lsls	r1, r1, #22
 800299e:	1c18      	adds	r0, r3, #0
 80029a0:	f7fd fe76 	bl	8000690 <__aeabi_fadd>
 80029a4:	1c03      	adds	r3, r0, #0
 80029a6:	1c19      	adds	r1, r3, #0
 80029a8:	1c20      	adds	r0, r4, #0
 80029aa:	f7fe fa31 	bl	8000e10 <__aeabi_fmul>
 80029ae:	1c03      	adds	r3, r0, #0
 80029b0:	1c19      	adds	r1, r3, #0
 80029b2:	20fe      	movs	r0, #254	@ 0xfe
 80029b4:	0580      	lsls	r0, r0, #22
 80029b6:	f7fe f85d 	bl	8000a74 <__aeabi_fdiv>
 80029ba:	1c03      	adds	r3, r0, #0
 80029bc:	2288      	movs	r2, #136	@ 0x88
 80029be:	18b9      	adds	r1, r7, r2
 80029c0:	600b      	str	r3, [r1, #0]

    return calc_gas_res;
 80029c2:	18bb      	adds	r3, r7, r2
 80029c4:	681b      	ldr	r3, [r3, #0]
}
 80029c6:	1c18      	adds	r0, r3, #0
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b029      	add	sp, #164	@ 0xa4
 80029cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	0800819c 	.word	0x0800819c
 80029d4:	080081dc 	.word	0x080081dc
 80029d8:	40a00000 	.word	0x40a00000
 80029dc:	44a78000 	.word	0x44a78000
 80029e0:	42c80000 	.word	0x42c80000
 80029e4:	340637bd 	.word	0x340637bd

080029e8 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	0002      	movs	r2, r0
 80029f0:	1dbb      	adds	r3, r7, #6
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	1d7b      	adds	r3, r7, #5
 80029f6:	1c0a      	adds	r2, r1, #0
 80029f8:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 80029fa:	1d7b      	adds	r3, r7, #5
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2280      	movs	r2, #128	@ 0x80
 8002a00:	02d2      	lsls	r2, r2, #11
 8002a02:	40da      	lsrs	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8002a08:	1dbb      	adds	r3, r7, #6
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	4a13      	ldr	r2, [pc, #76]	@ (8002a5c <calc_gas_resistance_high+0x74>)
 8002a0e:	4694      	mov	ip, r2
 8002a10:	4463      	add	r3, ip
 8002a12:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	0013      	movs	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	189b      	adds	r3, r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2280      	movs	r2, #128	@ 0x80
 8002a22:	0152      	lsls	r2, r2, #5
 8002a24:	4694      	mov	ip, r2
 8002a26:	4463      	add	r3, ip
 8002a28:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7fe fe1e 	bl	800166c <__aeabi_ui2f>
 8002a30:	1c03      	adds	r3, r0, #0
 8002a32:	490b      	ldr	r1, [pc, #44]	@ (8002a60 <calc_gas_resistance_high+0x78>)
 8002a34:	1c18      	adds	r0, r3, #0
 8002a36:	f7fe f9eb 	bl	8000e10 <__aeabi_fmul>
 8002a3a:	1c03      	adds	r3, r0, #0
 8002a3c:	1c1c      	adds	r4, r3, #0
 8002a3e:	6938      	ldr	r0, [r7, #16]
 8002a40:	f7fe fdc4 	bl	80015cc <__aeabi_i2f>
 8002a44:	1c03      	adds	r3, r0, #0
 8002a46:	1c19      	adds	r1, r3, #0
 8002a48:	1c20      	adds	r0, r4, #0
 8002a4a:	f7fe f813 	bl	8000a74 <__aeabi_fdiv>
 8002a4e:	1c03      	adds	r3, r0, #0
 8002a50:	60fb      	str	r3, [r7, #12]

    return calc_gas_res;
 8002a52:	68fb      	ldr	r3, [r7, #12]
}
 8002a54:	1c18      	adds	r0, r3, #0
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b007      	add	sp, #28
 8002a5a:	bd90      	pop	{r4, r7, pc}
 8002a5c:	fffffe00 	.word	0xfffffe00
 8002a60:	49742400 	.word	0x49742400

08002a64 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	1dbb      	adds	r3, r7, #6
 8002a70:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8002a72:	1dbb      	adds	r3, r7, #6
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	23c8      	movs	r3, #200	@ 0xc8
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d903      	bls.n	8002a86 <calc_res_heat+0x22>
    {
        temp = 400;
 8002a7e:	1dbb      	adds	r3, r7, #6
 8002a80:	22c8      	movs	r2, #200	@ 0xc8
 8002a82:	0052      	lsls	r2, r2, #1
 8002a84:	801a      	strh	r2, [r3, #0]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	7e5b      	ldrb	r3, [r3, #25]
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7fe fd9d 	bl	80015cc <__aeabi_i2f>
 8002a92:	1c03      	adds	r3, r0, #0
 8002a94:	2183      	movs	r1, #131	@ 0x83
 8002a96:	05c9      	lsls	r1, r1, #23
 8002a98:	1c18      	adds	r0, r3, #0
 8002a9a:	f7fd ffeb 	bl	8000a74 <__aeabi_fdiv>
 8002a9e:	1c03      	adds	r3, r0, #0
 8002aa0:	4950      	ldr	r1, [pc, #320]	@ (8002be4 <calc_res_heat+0x180>)
 8002aa2:	1c18      	adds	r0, r3, #0
 8002aa4:	f7fd fdf4 	bl	8000690 <__aeabi_fadd>
 8002aa8:	1c03      	adds	r3, r0, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	221a      	movs	r2, #26
 8002ab0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f7fe fd8a 	bl	80015cc <__aeabi_i2f>
 8002ab8:	1c03      	adds	r3, r0, #0
 8002aba:	218e      	movs	r1, #142	@ 0x8e
 8002abc:	05c9      	lsls	r1, r1, #23
 8002abe:	1c18      	adds	r0, r3, #0
 8002ac0:	f7fd ffd8 	bl	8000a74 <__aeabi_fdiv>
 8002ac4:	1c03      	adds	r3, r0, #0
 8002ac6:	4948      	ldr	r1, [pc, #288]	@ (8002be8 <calc_res_heat+0x184>)
 8002ac8:	1c18      	adds	r0, r3, #0
 8002aca:	f7fe f9a1 	bl	8000e10 <__aeabi_fmul>
 8002ace:	1c03      	adds	r3, r0, #0
 8002ad0:	4946      	ldr	r1, [pc, #280]	@ (8002bec <calc_res_heat+0x188>)
 8002ad2:	1c18      	adds	r0, r3, #0
 8002ad4:	f7fd fddc 	bl	8000690 <__aeabi_fadd>
 8002ad8:	1c03      	adds	r3, r0, #0
 8002ada:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	7f1b      	ldrb	r3, [r3, #28]
 8002ae0:	b25b      	sxtb	r3, r3
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f7fe fd72 	bl	80015cc <__aeabi_i2f>
 8002ae8:	1c03      	adds	r3, r0, #0
 8002aea:	2189      	movs	r1, #137	@ 0x89
 8002aec:	05c9      	lsls	r1, r1, #23
 8002aee:	1c18      	adds	r0, r3, #0
 8002af0:	f7fd ffc0 	bl	8000a74 <__aeabi_fdiv>
 8002af4:	1c03      	adds	r3, r0, #0
 8002af6:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8002af8:	1dbb      	adds	r3, r7, #6
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7fe fdb5 	bl	800166c <__aeabi_ui2f>
 8002b02:	1c03      	adds	r3, r0, #0
 8002b04:	69b9      	ldr	r1, [r7, #24]
 8002b06:	1c18      	adds	r0, r3, #0
 8002b08:	f7fe f982 	bl	8000e10 <__aeabi_fmul>
 8002b0c:	1c03      	adds	r3, r0, #0
 8002b0e:	21fe      	movs	r1, #254	@ 0xfe
 8002b10:	0589      	lsls	r1, r1, #22
 8002b12:	1c18      	adds	r0, r3, #0
 8002b14:	f7fd fdbc 	bl	8000690 <__aeabi_fadd>
 8002b18:	1c03      	adds	r3, r0, #0
 8002b1a:	1c19      	adds	r1, r3, #0
 8002b1c:	69f8      	ldr	r0, [r7, #28]
 8002b1e:	f7fe f977 	bl	8000e10 <__aeabi_fmul>
 8002b22:	1c03      	adds	r3, r0, #0
 8002b24:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	7b9b      	ldrb	r3, [r3, #14]
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fe fd4d 	bl	80015cc <__aeabi_i2f>
 8002b32:	1c03      	adds	r3, r0, #0
 8002b34:	6979      	ldr	r1, [r7, #20]
 8002b36:	1c18      	adds	r0, r3, #0
 8002b38:	f7fe f96a 	bl	8000e10 <__aeabi_fmul>
 8002b3c:	1c03      	adds	r3, r0, #0
 8002b3e:	1c19      	adds	r1, r3, #0
 8002b40:	6938      	ldr	r0, [r7, #16]
 8002b42:	f7fd fda5 	bl	8000690 <__aeabi_fadd>
 8002b46:	1c03      	adds	r3, r0, #0
 8002b48:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	223c      	movs	r2, #60	@ 0x3c
 8002b4e:	5c9b      	ldrb	r3, [r3, r2]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7fe fd8b 	bl	800166c <__aeabi_ui2f>
 8002b56:	1c03      	adds	r3, r0, #0
 8002b58:	2181      	movs	r1, #129	@ 0x81
 8002b5a:	05c9      	lsls	r1, r1, #23
 8002b5c:	1c18      	adds	r0, r3, #0
 8002b5e:	f7fd fd97 	bl	8000690 <__aeabi_fadd>
 8002b62:	1c03      	adds	r3, r0, #0
 8002b64:	1c19      	adds	r1, r3, #0
 8002b66:	2081      	movs	r0, #129	@ 0x81
 8002b68:	05c0      	lsls	r0, r0, #23
 8002b6a:	f7fd ff83 	bl	8000a74 <__aeabi_fdiv>
 8002b6e:	1c03      	adds	r3, r0, #0
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	1c18      	adds	r0, r3, #0
 8002b74:	f7fe f94c 	bl	8000e10 <__aeabi_fmul>
 8002b78:	1c03      	adds	r3, r0, #0
 8002b7a:	1c1c      	adds	r4, r3, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	223d      	movs	r2, #61	@ 0x3d
 8002b80:	569b      	ldrsb	r3, [r3, r2]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f7fe fd22 	bl	80015cc <__aeabi_i2f>
 8002b88:	1c03      	adds	r3, r0, #0
 8002b8a:	4919      	ldr	r1, [pc, #100]	@ (8002bf0 <calc_res_heat+0x18c>)
 8002b8c:	1c18      	adds	r0, r3, #0
 8002b8e:	f7fe f93f 	bl	8000e10 <__aeabi_fmul>
 8002b92:	1c03      	adds	r3, r0, #0
 8002b94:	21fe      	movs	r1, #254	@ 0xfe
 8002b96:	0589      	lsls	r1, r1, #22
 8002b98:	1c18      	adds	r0, r3, #0
 8002b9a:	f7fd fd79 	bl	8000690 <__aeabi_fadd>
 8002b9e:	1c03      	adds	r3, r0, #0
 8002ba0:	1c19      	adds	r1, r3, #0
 8002ba2:	20fe      	movs	r0, #254	@ 0xfe
 8002ba4:	0580      	lsls	r0, r0, #22
 8002ba6:	f7fd ff65 	bl	8000a74 <__aeabi_fdiv>
 8002baa:	1c03      	adds	r3, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002bac:	1c19      	adds	r1, r3, #0
 8002bae:	1c20      	adds	r0, r4, #0
 8002bb0:	f7fe f92e 	bl	8000e10 <__aeabi_fmul>
 8002bb4:	1c03      	adds	r3, r0, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8002bb6:	490f      	ldr	r1, [pc, #60]	@ (8002bf4 <calc_res_heat+0x190>)
 8002bb8:	1c18      	adds	r0, r3, #0
 8002bba:	f7fe fa83 	bl	80010c4 <__aeabi_fsub>
 8002bbe:	1c03      	adds	r3, r0, #0
        (uint8_t)(3.4f *
 8002bc0:	490d      	ldr	r1, [pc, #52]	@ (8002bf8 <calc_res_heat+0x194>)
 8002bc2:	1c18      	adds	r0, r3, #0
 8002bc4:	f7fe f924 	bl	8000e10 <__aeabi_fmul>
 8002bc8:	1c03      	adds	r3, r0, #0
    res_heat =
 8002bca:	250b      	movs	r5, #11
 8002bcc:	197c      	adds	r4, r7, r5
 8002bce:	1c18      	adds	r0, r3, #0
 8002bd0:	f7fd fc7a 	bl	80004c8 <__aeabi_f2uiz>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	7023      	strb	r3, [r4, #0]
                   25));

    return res_heat;
 8002bd8:	197b      	adds	r3, r7, r5
 8002bda:	781b      	ldrb	r3, [r3, #0]
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b008      	add	sp, #32
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}
 8002be4:	42440000 	.word	0x42440000
 8002be8:	3a03126f 	.word	0x3a03126f
 8002bec:	3b1a0275 	.word	0x3b1a0275
 8002bf0:	3b03126f 	.word	0x3b03126f
 8002bf4:	41c80000 	.word	0x41c80000
 8002bf8:	4059999a 	.word	0x4059999a

08002bfc <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	0002      	movs	r2, r0
 8002c04:	1dbb      	adds	r3, r7, #6
 8002c06:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
    uint8_t durval;

    if (dur >= 0xfc0)
 8002c10:	1dbb      	adds	r3, r7, #6
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	23fc      	movs	r3, #252	@ 0xfc
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d30f      	bcc.n	8002c3c <calc_gas_wait+0x40>
    {
        durval = 0xff; /* Max duration*/
 8002c1c:	230e      	movs	r3, #14
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	22ff      	movs	r2, #255	@ 0xff
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e01a      	b.n	8002c5c <calc_gas_wait+0x60>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8002c26:	1dbb      	adds	r3, r7, #6
 8002c28:	1dba      	adds	r2, r7, #6
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	0892      	lsrs	r2, r2, #2
 8002c2e:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8002c30:	220f      	movs	r2, #15
 8002c32:	18bb      	adds	r3, r7, r2
 8002c34:	18ba      	adds	r2, r7, r2
 8002c36:	7812      	ldrb	r2, [r2, #0]
 8002c38:	3201      	adds	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8002c3c:	1dbb      	adds	r3, r7, #6
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c42:	d8f0      	bhi.n	8002c26 <calc_gas_wait+0x2a>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8002c44:	1dbb      	adds	r3, r7, #6
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b2d9      	uxtb	r1, r3
 8002c4a:	230f      	movs	r3, #15
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	230e      	movs	r3, #14
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	188a      	adds	r2, r1, r2
 8002c5a:	701a      	strb	r2, [r3, #0]
    }

    return durval;
 8002c5c:	230e      	movs	r3, #14
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b004      	add	sp, #16
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b08e      	sub	sp, #56	@ 0x38
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	230f      	movs	r3, #15
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	1c02      	adds	r2, r0, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8002c7e:	2337      	movs	r3, #55	@ 0x37
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002c86:	2310      	movs	r3, #16
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	2311      	movs	r3, #17
 8002c8e:	001a      	movs	r2, r3
 8002c90:	2100      	movs	r1, #0
 8002c92:	f004 fdf3 	bl	800787c <memset>
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8002c96:	2336      	movs	r3, #54	@ 0x36
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	701a      	strb	r2, [r3, #0]

    while ((tries) && (rslt == BME68X_OK))
 8002c9e:	e14e      	b.n	8002f3e <read_field_data+0x2d2>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	1c1a      	adds	r2, r3, #0
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	18d3      	adds	r3, r2, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	331d      	adds	r3, #29
 8002cb0:	b2d8      	uxtb	r0, r3
 8002cb2:	2537      	movs	r5, #55	@ 0x37
 8002cb4:	197c      	adds	r4, r7, r5
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2210      	movs	r2, #16
 8002cba:	18b9      	adds	r1, r7, r2
 8002cbc:	2211      	movs	r2, #17
 8002cbe:	f7fe fe75 	bl	80019ac <bme68x_get_regs>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	7023      	strb	r3, [r4, #0]
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <read_field_data+0x68>
        {
            rslt = BME68X_E_NULL_PTR;
 8002ccc:	197b      	adds	r3, r7, r5
 8002cce:	22ff      	movs	r2, #255	@ 0xff
 8002cd0:	701a      	strb	r2, [r3, #0]
            break;
 8002cd2:	e140      	b.n	8002f56 <read_field_data+0x2ea>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002cd4:	2010      	movs	r0, #16
 8002cd6:	183b      	adds	r3, r7, r0
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	227f      	movs	r2, #127	@ 0x7f
 8002cdc:	4393      	bics	r3, r2
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002ce4:	183b      	adds	r3, r7, r0
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	220f      	movs	r2, #15
 8002cea:	4013      	ands	r3, r2
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8002cf2:	183b      	adds	r3, r7, r0
 8002cf4:	785a      	ldrb	r2, [r3, #1]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8002cfa:	183b      	adds	r3, r7, r0
 8002cfc:	789b      	ldrb	r3, [r3, #2]
 8002cfe:	031a      	lsls	r2, r3, #12
 8002d00:	183b      	adds	r3, r7, r0
 8002d02:	78db      	ldrb	r3, [r3, #3]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	4313      	orrs	r3, r2
 8002d08:	183a      	adds	r2, r7, r0
 8002d0a:	7912      	ldrb	r2, [r2, #4]
 8002d0c:	0912      	lsrs	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	4313      	orrs	r3, r2
 8002d12:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8002d14:	183b      	adds	r3, r7, r0
 8002d16:	795b      	ldrb	r3, [r3, #5]
 8002d18:	031a      	lsls	r2, r3, #12
 8002d1a:	183b      	adds	r3, r7, r0
 8002d1c:	799b      	ldrb	r3, [r3, #6]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4313      	orrs	r3, r2
 8002d22:	183a      	adds	r2, r7, r0
 8002d24:	79d2      	ldrb	r2, [r2, #7]
 8002d26:	0912      	lsrs	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8002d2e:	183b      	adds	r3, r7, r0
 8002d30:	7a1b      	ldrb	r3, [r3, #8]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	7a5b      	ldrb	r3, [r3, #9]
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	232a      	movs	r3, #42	@ 0x2a
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	430a      	orrs	r2, r1
 8002d42:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8002d44:	183b      	adds	r3, r7, r0
 8002d46:	7b5b      	ldrb	r3, [r3, #13]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	183b      	adds	r3, r7, r0
 8002d4e:	7b9b      	ldrb	r3, [r3, #14]
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	0019      	movs	r1, r3
 8002d56:	2328      	movs	r3, #40	@ 0x28
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8002d5e:	183b      	adds	r3, r7, r0
 8002d60:	7bdb      	ldrb	r3, [r3, #15]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	183b      	adds	r3, r7, r0
 8002d68:	7c1b      	ldrb	r3, [r3, #16]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	0019      	movs	r1, r3
 8002d70:	2326      	movs	r3, #38	@ 0x26
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	430a      	orrs	r2, r1
 8002d76:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002d78:	183b      	adds	r3, r7, r0
 8002d7a:	7b9a      	ldrb	r2, [r3, #14]
 8002d7c:	2325      	movs	r3, #37	@ 0x25
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	210f      	movs	r1, #15
 8002d82:	400a      	ands	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002d86:	183b      	adds	r3, r7, r0
 8002d88:	7c1a      	ldrb	r2, [r3, #16]
 8002d8a:	2324      	movs	r3, #36	@ 0x24
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	210f      	movs	r1, #15
 8002d90:	400a      	ands	r2, r1
 8002d92:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d11c      	bne.n	8002dd6 <read_field_data+0x16a>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b25a      	sxtb	r2, r3
 8002da2:	183b      	adds	r3, r7, r0
 8002da4:	7c1b      	ldrb	r3, [r3, #16]
 8002da6:	b25b      	sxtb	r3, r3
 8002da8:	2120      	movs	r1, #32
 8002daa:	400b      	ands	r3, r1
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	4313      	orrs	r3, r2
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b25a      	sxtb	r2, r3
 8002dbe:	183b      	adds	r3, r7, r0
 8002dc0:	7c1b      	ldrb	r3, [r3, #16]
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	2110      	movs	r1, #16
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e01c      	b.n	8002e10 <read_field_data+0x1a4>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b25a      	sxtb	r2, r3
 8002ddc:	2010      	movs	r0, #16
 8002dde:	183b      	adds	r3, r7, r0
 8002de0:	7b9b      	ldrb	r3, [r3, #14]
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	2120      	movs	r1, #32
 8002de6:	400b      	ands	r3, r1
 8002de8:	b25b      	sxtb	r3, r3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b25b      	sxtb	r3, r3
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b25a      	sxtb	r2, r3
 8002dfa:	183b      	adds	r3, r7, r0
 8002dfc:	7b9b      	ldrb	r3, [r3, #14]
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	2110      	movs	r1, #16
 8002e02:	400b      	ands	r3, r1
 8002e04:	b25b      	sxtb	r3, r3
 8002e06:	4313      	orrs	r3, r2
 8002e08:	b25b      	sxtb	r3, r3
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db00      	blt.n	8002e1c <read_field_data+0x1b0>
 8002e1a:	e07d      	b.n	8002f18 <read_field_data+0x2ac>
 8002e1c:	2237      	movs	r2, #55	@ 0x37
 8002e1e:	18bb      	adds	r3, r7, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d000      	beq.n	8002e2a <read_field_data+0x1be>
 8002e28:	e076      	b.n	8002f18 <read_field_data+0x2ac>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	785b      	ldrb	r3, [r3, #1]
 8002e2e:	335a      	adds	r3, #90	@ 0x5a
 8002e30:	b2d8      	uxtb	r0, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1cd9      	adds	r1, r3, #3
 8002e36:	0015      	movs	r5, r2
 8002e38:	18bc      	adds	r4, r7, r2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f7fe fdb5 	bl	80019ac <bme68x_get_regs>
 8002e42:	0003      	movs	r3, r0
 8002e44:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8002e46:	002a      	movs	r2, r5
 8002e48:	18bb      	adds	r3, r7, r2
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <read_field_data+0x200>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	3350      	adds	r3, #80	@ 0x50
 8002e58:	b2d8      	uxtb	r0, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1d19      	adds	r1, r3, #4
 8002e5e:	18bc      	adds	r4, r7, r2
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f7fe fda2 	bl	80019ac <bme68x_get_regs>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8002e6c:	2237      	movs	r2, #55	@ 0x37
 8002e6e:	18bb      	adds	r3, r7, r2
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b25b      	sxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10c      	bne.n	8002e92 <read_field_data+0x226>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	3364      	adds	r3, #100	@ 0x64
 8002e7e:	b2d8      	uxtb	r0, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1d59      	adds	r1, r3, #5
 8002e84:	18bc      	adds	r4, r7, r2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f7fe fd8f 	bl	80019ac <bme68x_get_regs>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8002e92:	2337      	movs	r3, #55	@ 0x37
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d13c      	bne.n	8002f18 <read_field_data+0x2ac>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea2:	0011      	movs	r1, r2
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7ff fa17 	bl	80022d8 <calc_temperature>
 8002eaa:	1c02      	adds	r2, r0, #0
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	0011      	movs	r1, r2
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7ff faa6 	bl	8002408 <calc_pressure>
 8002ebc:	1c02      	adds	r2, r0, #0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	232a      	movs	r3, #42	@ 0x2a
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	0011      	movs	r1, r2
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff fbfb 	bl	80026c8 <calc_humidity>
 8002ed2:	1c02      	adds	r2, r0, #0
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	611a      	str	r2, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d10d      	bne.n	8002efc <read_field_data+0x290>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002ee0:	2324      	movs	r3, #36	@ 0x24
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	2326      	movs	r3, #38	@ 0x26
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	0011      	movs	r1, r2
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7ff fd7a 	bl	80029e8 <calc_gas_resistance_high>
 8002ef4:	1c02      	adds	r2, r0, #0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	615a      	str	r2, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8002efa:	e02c      	b.n	8002f56 <read_field_data+0x2ea>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	2325      	movs	r3, #37	@ 0x25
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	7819      	ldrb	r1, [r3, #0]
 8002f04:	2328      	movs	r3, #40	@ 0x28
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff fcb8 	bl	8002880 <calc_gas_resistance_low>
 8002f10:	1c02      	adds	r2, r0, #0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	615a      	str	r2, [r3, #20]
                break;
 8002f16:	e01e      	b.n	8002f56 <read_field_data+0x2ea>
            }
        }

        if (rslt == BME68X_OK)
 8002f18:	2337      	movs	r3, #55	@ 0x37
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <read_field_data+0x2c6>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	480e      	ldr	r0, [pc, #56]	@ (8002f68 <read_field_data+0x2fc>)
 8002f2e:	0019      	movs	r1, r3
 8002f30:	4790      	blx	r2
        }

        tries--;
 8002f32:	2136      	movs	r1, #54	@ 0x36
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	3a01      	subs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
    while ((tries) && (rslt == BME68X_OK))
 8002f3e:	2336      	movs	r3, #54	@ 0x36
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <read_field_data+0x2ea>
 8002f48:	2337      	movs	r3, #55	@ 0x37
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d100      	bne.n	8002f56 <read_field_data+0x2ea>
 8002f54:	e6a4      	b.n	8002ca0 <read_field_data+0x34>
    }

    return rslt;
 8002f56:	2337      	movs	r3, #55	@ 0x37
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b25b      	sxtb	r3, r3
}
 8002f5e:	0018      	movs	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b00e      	add	sp, #56	@ 0x38
 8002f64:	bdb0      	pop	{r4, r5, r7, pc}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	00002710 	.word	0x00002710

08002f6c <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8002f6c:	b5b0      	push	{r4, r5, r7, lr}
 8002f6e:	b09c      	sub	sp, #112	@ 0x70
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8002f76:	246f      	movs	r4, #111	@ 0x6f
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8002f7e:	2328      	movs	r3, #40	@ 0x28
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	0018      	movs	r0, r3
 8002f84:	2333      	movs	r3, #51	@ 0x33
 8002f86:	001a      	movs	r2, r3
 8002f88:	2100      	movs	r1, #0
 8002f8a:	f004 fc77 	bl	800787c <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002f8e:	2308      	movs	r3, #8
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	0018      	movs	r0, r3
 8002f94:	231e      	movs	r3, #30
 8002f96:	001a      	movs	r2, r3
 8002f98:	2100      	movs	r1, #0
 8002f9a:	f004 fc6f 	bl	800787c <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10c      	bne.n	8002fc0 <read_all_field_data+0x54>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d107      	bne.n	8002fc0 <read_all_field_data+0x54>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <read_all_field_data+0x54>
    {
        rslt = BME68X_E_NULL_PTR;
 8002fba:	193b      	adds	r3, r7, r4
 8002fbc:	22ff      	movs	r2, #255	@ 0xff
 8002fbe:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BME68X_OK)
 8002fc0:	226f      	movs	r2, #111	@ 0x6f
 8002fc2:	18bb      	adds	r3, r7, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <read_all_field_data+0x74>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8002fcc:	18bc      	adds	r4, r7, r2
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2228      	movs	r2, #40	@ 0x28
 8002fd2:	18b9      	adds	r1, r7, r2
 8002fd4:	2233      	movs	r2, #51	@ 0x33
 8002fd6:	201d      	movs	r0, #29
 8002fd8:	f7fe fce8 	bl	80019ac <bme68x_get_regs>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8002fe0:	226f      	movs	r2, #111	@ 0x6f
 8002fe2:	18bb      	adds	r3, r7, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	b25b      	sxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8002fec:	18bc      	adds	r4, r7, r2
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	18b9      	adds	r1, r7, r2
 8002ff4:	221e      	movs	r2, #30
 8002ff6:	2050      	movs	r0, #80	@ 0x50
 8002ff8:	f7fe fcd8 	bl	80019ac <bme68x_get_regs>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	7023      	strb	r3, [r4, #0]
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8003000:	236e      	movs	r3, #110	@ 0x6e
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e1af      	b.n	800336a <read_all_field_data+0x3fe>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 800300a:	206d      	movs	r0, #109	@ 0x6d
 800300c:	183a      	adds	r2, r7, r0
 800300e:	256e      	movs	r5, #110	@ 0x6e
 8003010:	197b      	adds	r3, r7, r5
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	1c19      	adds	r1, r3, #0
 8003016:	0109      	lsls	r1, r1, #4
 8003018:	18cb      	adds	r3, r1, r3
 800301a:	7013      	strb	r3, [r2, #0]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 800301c:	183b      	adds	r3, r7, r0
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2428      	movs	r4, #40	@ 0x28
 8003022:	193a      	adds	r2, r7, r4
 8003024:	5cd2      	ldrb	r2, [r2, r3]
 8003026:	197b      	adds	r3, r7, r5
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	18cb      	adds	r3, r1, r3
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	217f      	movs	r1, #127	@ 0x7f
 8003034:	438a      	bics	r2, r1
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 800303a:	183b      	adds	r3, r7, r0
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	193a      	adds	r2, r7, r4
 8003040:	5cd2      	ldrb	r2, [r2, r3]
 8003042:	197b      	adds	r3, r7, r5
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	18cb      	adds	r3, r1, r3
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	210f      	movs	r1, #15
 8003050:	400a      	ands	r2, r1
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8003056:	183b      	adds	r3, r7, r0
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	197b      	adds	r3, r7, r5
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	18cb      	adds	r3, r1, r3
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1939      	adds	r1, r7, r4
 800306a:	5c8a      	ldrb	r2, [r1, r2]
 800306c:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 800306e:	183b      	adds	r3, r7, r0
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	3302      	adds	r3, #2
 8003074:	193a      	adds	r2, r7, r4
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	031a      	lsls	r2, r3, #12
 800307a:	183b      	adds	r3, r7, r0
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	3303      	adds	r3, #3
 8003080:	1939      	adds	r1, r7, r4
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8003088:	183a      	adds	r2, r7, r0
 800308a:	7812      	ldrb	r2, [r2, #0]
 800308c:	3204      	adds	r2, #4
 800308e:	1939      	adds	r1, r7, r4
 8003090:	5c8a      	ldrb	r2, [r1, r2]
 8003092:	0912      	lsrs	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
        adc_pres =
 8003096:	4313      	orrs	r3, r2
 8003098:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 800309a:	183b      	adds	r3, r7, r0
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	3305      	adds	r3, #5
 80030a0:	193a      	adds	r2, r7, r4
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	031a      	lsls	r2, r3, #12
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	3306      	adds	r3, #6
 80030ac:	1939      	adds	r1, r7, r4
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 80030b4:	183a      	adds	r2, r7, r0
 80030b6:	7812      	ldrb	r2, [r2, #0]
 80030b8:	3207      	adds	r2, #7
 80030ba:	1939      	adds	r1, r7, r4
 80030bc:	5c8a      	ldrb	r2, [r1, r2]
 80030be:	0912      	lsrs	r2, r2, #4
 80030c0:	b2d2      	uxtb	r2, r2
        adc_temp =
 80030c2:	4313      	orrs	r3, r2
 80030c4:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80030c6:	183b      	adds	r3, r7, r0
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	3308      	adds	r3, #8
 80030cc:	193a      	adds	r2, r7, r4
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	183b      	adds	r3, r7, r0
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	3309      	adds	r3, #9
 80030da:	1939      	adds	r1, r7, r4
 80030dc:	5ccb      	ldrb	r3, [r1, r3]
 80030de:	0019      	movs	r1, r3
 80030e0:	2362      	movs	r3, #98	@ 0x62
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	430a      	orrs	r2, r1
 80030e6:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 80030e8:	183b      	adds	r3, r7, r0
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	330d      	adds	r3, #13
 80030ee:	193a      	adds	r2, r7, r4
 80030f0:	5cd3      	ldrb	r3, [r2, r3]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	183b      	adds	r3, r7, r0
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	330e      	adds	r3, #14
 80030fc:	1939      	adds	r1, r7, r4
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	b2db      	uxtb	r3, r3
 8003104:	0019      	movs	r1, r3
 8003106:	2360      	movs	r3, #96	@ 0x60
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	430a      	orrs	r2, r1
 800310c:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 800310e:	183b      	adds	r3, r7, r0
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	330f      	adds	r3, #15
 8003114:	193a      	adds	r2, r7, r4
 8003116:	5cd3      	ldrb	r3, [r2, r3]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	b29a      	uxth	r2, r3
 800311c:	183b      	adds	r3, r7, r0
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	3310      	adds	r3, #16
 8003122:	1939      	adds	r1, r7, r4
 8003124:	5ccb      	ldrb	r3, [r1, r3]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	b2db      	uxtb	r3, r3
 800312a:	0019      	movs	r1, r3
 800312c:	235e      	movs	r3, #94	@ 0x5e
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	430a      	orrs	r2, r1
 8003132:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8003134:	183b      	adds	r3, r7, r0
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	330e      	adds	r3, #14
 800313a:	193a      	adds	r2, r7, r4
 800313c:	5cd2      	ldrb	r2, [r2, r3]
 800313e:	235d      	movs	r3, #93	@ 0x5d
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	210f      	movs	r1, #15
 8003144:	400a      	ands	r2, r1
 8003146:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8003148:	183b      	adds	r3, r7, r0
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3310      	adds	r3, #16
 800314e:	193a      	adds	r2, r7, r4
 8003150:	5cd2      	ldrb	r2, [r2, r3]
 8003152:	235c      	movs	r3, #92	@ 0x5c
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	210f      	movs	r1, #15
 8003158:	400a      	ands	r2, r1
 800315a:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d136      	bne.n	80031d2 <read_all_field_data+0x266>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8003164:	197b      	adds	r3, r7, r5
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b25a      	sxtb	r2, r3
 8003174:	183b      	adds	r3, r7, r0
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	3310      	adds	r3, #16
 800317a:	1939      	adds	r1, r7, r4
 800317c:	5ccb      	ldrb	r3, [r1, r3]
 800317e:	b25b      	sxtb	r3, r3
 8003180:	2120      	movs	r1, #32
 8003182:	400b      	ands	r3, r1
 8003184:	b25b      	sxtb	r3, r3
 8003186:	4313      	orrs	r3, r2
 8003188:	b259      	sxtb	r1, r3
 800318a:	197b      	adds	r3, r7, r5
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	18d3      	adds	r3, r2, r3
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b2ca      	uxtb	r2, r1
 8003198:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 800319a:	197b      	adds	r3, r7, r5
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	18d3      	adds	r3, r2, r3
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b25a      	sxtb	r2, r3
 80031aa:	183b      	adds	r3, r7, r0
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3310      	adds	r3, #16
 80031b0:	1939      	adds	r1, r7, r4
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	2110      	movs	r1, #16
 80031b8:	400b      	ands	r3, r1
 80031ba:	b25b      	sxtb	r3, r3
 80031bc:	4313      	orrs	r3, r2
 80031be:	b259      	sxtb	r1, r3
 80031c0:	197b      	adds	r3, r7, r5
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	18d3      	adds	r3, r2, r3
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	b2ca      	uxtb	r2, r1
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e038      	b.n	8003244 <read_all_field_data+0x2d8>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 80031d2:	206e      	movs	r0, #110	@ 0x6e
 80031d4:	183b      	adds	r3, r7, r0
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b25a      	sxtb	r2, r3
 80031e4:	246d      	movs	r4, #109	@ 0x6d
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	330e      	adds	r3, #14
 80031ec:	2528      	movs	r5, #40	@ 0x28
 80031ee:	1979      	adds	r1, r7, r5
 80031f0:	5ccb      	ldrb	r3, [r1, r3]
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	2120      	movs	r1, #32
 80031f6:	400b      	ands	r3, r1
 80031f8:	b25b      	sxtb	r3, r3
 80031fa:	4313      	orrs	r3, r2
 80031fc:	b259      	sxtb	r1, r3
 80031fe:	183b      	adds	r3, r7, r0
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	18d3      	adds	r3, r2, r3
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b2ca      	uxtb	r2, r1
 800320c:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 800320e:	183b      	adds	r3, r7, r0
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	18d3      	adds	r3, r2, r3
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b25a      	sxtb	r2, r3
 800321e:	193b      	adds	r3, r7, r4
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	330e      	adds	r3, #14
 8003224:	1979      	adds	r1, r7, r5
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	b25b      	sxtb	r3, r3
 800322a:	2110      	movs	r1, #16
 800322c:	400b      	ands	r3, r1
 800322e:	b25b      	sxtb	r3, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	b259      	sxtb	r1, r3
 8003234:	183b      	adds	r3, r7, r0
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	18d3      	adds	r3, r2, r3
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	b2ca      	uxtb	r2, r1
 8003242:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8003244:	256e      	movs	r5, #110	@ 0x6e
 8003246:	197b      	adds	r3, r7, r5
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	18d3      	adds	r3, r2, r3
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	0019      	movs	r1, r3
 8003256:	197b      	adds	r3, r7, r5
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	18d3      	adds	r3, r2, r3
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2008      	movs	r0, #8
 8003264:	183a      	adds	r2, r7, r0
 8003266:	5c52      	ldrb	r2, [r2, r1]
 8003268:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 800326a:	197b      	adds	r3, r7, r5
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	18d3      	adds	r3, r2, r3
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	330a      	adds	r3, #10
 800327a:	001a      	movs	r2, r3
 800327c:	197b      	adds	r3, r7, r5
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	18cb      	adds	r3, r1, r3
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	1839      	adds	r1, r7, r0
 800328a:	5c8a      	ldrb	r2, [r1, r2]
 800328c:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 800328e:	197b      	adds	r3, r7, r5
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	18d3      	adds	r3, r2, r3
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	3314      	adds	r3, #20
 800329e:	001a      	movs	r2, r3
 80032a0:	197b      	adds	r3, r7, r5
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	18cb      	adds	r3, r1, r3
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	1839      	adds	r1, r7, r0
 80032ae:	5c8a      	ldrb	r2, [r1, r2]
 80032b0:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 80032b2:	197b      	adds	r3, r7, r5
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	18d3      	adds	r3, r2, r3
 80032bc:	681c      	ldr	r4, [r3, #0]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032c2:	0011      	movs	r1, r2
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff f807 	bl	80022d8 <calc_temperature>
 80032ca:	1c03      	adds	r3, r0, #0
 80032cc:	60a3      	str	r3, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80032ce:	197b      	adds	r3, r7, r5
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	681c      	ldr	r4, [r3, #0]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032de:	0011      	movs	r1, r2
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7ff f891 	bl	8002408 <calc_pressure>
 80032e6:	1c03      	adds	r3, r0, #0
 80032e8:	60e3      	str	r3, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80032ea:	197b      	adds	r3, r7, r5
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	18d3      	adds	r3, r2, r3
 80032f4:	681c      	ldr	r4, [r3, #0]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	2362      	movs	r3, #98	@ 0x62
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	0011      	movs	r1, r2
 8003300:	0018      	movs	r0, r3
 8003302:	f7ff f9e1 	bl	80026c8 <calc_humidity>
 8003306:	1c03      	adds	r3, r0, #0
 8003308:	6123      	str	r3, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d112      	bne.n	8003338 <read_all_field_data+0x3cc>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8003312:	197b      	adds	r3, r7, r5
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	18d3      	adds	r3, r2, r3
 800331c:	681c      	ldr	r4, [r3, #0]
 800331e:	235c      	movs	r3, #92	@ 0x5c
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	235e      	movs	r3, #94	@ 0x5e
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	0011      	movs	r1, r2
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff fb5b 	bl	80029e8 <calc_gas_resistance_high>
 8003332:	1c03      	adds	r3, r0, #0
 8003334:	6163      	str	r3, [r4, #20]
 8003336:	e012      	b.n	800335e <read_all_field_data+0x3f2>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8003338:	236e      	movs	r3, #110	@ 0x6e
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	18d3      	adds	r3, r2, r3
 8003344:	681c      	ldr	r4, [r3, #0]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	235d      	movs	r3, #93	@ 0x5d
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	7819      	ldrb	r1, [r3, #0]
 800334e:	2360      	movs	r3, #96	@ 0x60
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	0018      	movs	r0, r3
 8003356:	f7ff fa93 	bl	8002880 <calc_gas_resistance_low>
 800335a:	1c03      	adds	r3, r0, #0
 800335c:	6163      	str	r3, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800335e:	216e      	movs	r1, #110	@ 0x6e
 8003360:	187b      	adds	r3, r7, r1
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	187b      	adds	r3, r7, r1
 8003366:	3201      	adds	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	236e      	movs	r3, #110	@ 0x6e
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d806      	bhi.n	8003382 <read_all_field_data+0x416>
 8003374:	236f      	movs	r3, #111	@ 0x6f
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	b25b      	sxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d100      	bne.n	8003382 <read_all_field_data+0x416>
 8003380:	e643      	b.n	800300a <read_all_field_data+0x9e>
        }
    }

    return rslt;
 8003382:	236f      	movs	r3, #111	@ 0x6f
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b25b      	sxtb	r3, r3
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b01c      	add	sp, #112	@ 0x70
 8003390:	bdb0      	pop	{r4, r5, r7, pc}

08003392 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8003392:	b5b0      	push	{r4, r5, r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	0002      	movs	r2, r0
 800339a:	6039      	str	r1, [r7, #0]
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80033a0:	250f      	movs	r5, #15
 80033a2:	197c      	adds	r4, r7, r5
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 f8e1 	bl	800356e <null_ptr_check>
 80033ac:	0003      	movs	r3, r0
 80033ae:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80033b0:	197b      	adds	r3, r7, r5
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d160      	bne.n	800347c <set_mem_page+0xea>
    {
        if (reg_addr > 0x7f)
 80033ba:	1dfb      	adds	r3, r7, #7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da04      	bge.n	80033ce <set_mem_page+0x3c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80033c4:	230e      	movs	r3, #14
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e003      	b.n	80033d6 <set_mem_page+0x44>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80033ce:	230e      	movs	r3, #14
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	2210      	movs	r2, #16
 80033d4:	701a      	strb	r2, [r3, #0]
        }

        if (mem_page != dev->mem_page)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	7b5b      	ldrb	r3, [r3, #13]
 80033da:	210e      	movs	r1, #14
 80033dc:	187a      	adds	r2, r7, r1
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d04b      	beq.n	800347c <set_mem_page+0xea>
        {
            dev->mem_page = mem_page;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	187a      	adds	r2, r7, r1
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	220d      	movs	r2, #13
 80033f6:	18b9      	adds	r1, r7, r2
 80033f8:	2201      	movs	r2, #1
 80033fa:	20f3      	movs	r0, #243	@ 0xf3
 80033fc:	47a0      	blx	r4
 80033fe:	0003      	movs	r3, r0
 8003400:	0019      	movs	r1, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	224c      	movs	r2, #76	@ 0x4c
 8003406:	5499      	strb	r1, [r3, r2]
            if (dev->intf_rslt != 0)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	224c      	movs	r2, #76	@ 0x4c
 800340c:	569b      	ldrsb	r3, [r3, r2]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <set_mem_page+0x88>
            {
                rslt = BME68X_E_COM_FAIL;
 8003412:	230f      	movs	r3, #15
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	22fe      	movs	r2, #254	@ 0xfe
 8003418:	701a      	strb	r2, [r3, #0]
            }

            if (rslt == BME68X_OK)
 800341a:	250f      	movs	r5, #15
 800341c:	197b      	adds	r3, r7, r5
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b25b      	sxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d12a      	bne.n	800347c <set_mem_page+0xea>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8003426:	210d      	movs	r1, #13
 8003428:	187b      	adds	r3, r7, r1
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2210      	movs	r2, #16
 800342e:	4393      	bics	r3, r2
 8003430:	b2da      	uxtb	r2, r3
 8003432:	187b      	adds	r3, r7, r1
 8003434:	701a      	strb	r2, [r3, #0]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	7b5b      	ldrb	r3, [r3, #13]
 800343a:	b25b      	sxtb	r3, r3
 800343c:	2210      	movs	r2, #16
 800343e:	4013      	ands	r3, r2
 8003440:	b25a      	sxtb	r2, r3
 8003442:	187b      	adds	r3, r7, r1
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	b25b      	sxtb	r3, r3
 8003448:	4313      	orrs	r3, r2
 800344a:	b25b      	sxtb	r3, r3
 800344c:	b2da      	uxtb	r2, r3
 800344e:	187b      	adds	r3, r7, r1
 8003450:	701a      	strb	r2, [r3, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	1879      	adds	r1, r7, r1
 800345c:	2201      	movs	r2, #1
 800345e:	2073      	movs	r0, #115	@ 0x73
 8003460:	47a0      	blx	r4
 8003462:	0003      	movs	r3, r0
 8003464:	0019      	movs	r1, r3
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	224c      	movs	r2, #76	@ 0x4c
 800346a:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	224c      	movs	r2, #76	@ 0x4c
 8003470:	569b      	ldrsb	r3, [r3, r2]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <set_mem_page+0xea>
                {
                    rslt = BME68X_E_COM_FAIL;
 8003476:	197b      	adds	r3, r7, r5
 8003478:	22fe      	movs	r2, #254	@ 0xfe
 800347a:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 800347c:	230f      	movs	r3, #15
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b25b      	sxtb	r3, r3
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b004      	add	sp, #16
 800348a:	bdb0      	pop	{r4, r5, r7, pc}

0800348c <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003494:	250f      	movs	r5, #15
 8003496:	197c      	adds	r4, r7, r5
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	0018      	movs	r0, r3
 800349c:	f000 f867 	bl	800356e <null_ptr_check>
 80034a0:	0003      	movs	r3, r0
 80034a2:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80034a4:	197b      	adds	r3, r7, r5
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11e      	bne.n	80034ec <get_mem_page+0x60>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	220e      	movs	r2, #14
 80034b8:	18b9      	adds	r1, r7, r2
 80034ba:	2201      	movs	r2, #1
 80034bc:	20f3      	movs	r0, #243	@ 0xf3
 80034be:	47a0      	blx	r4
 80034c0:	0003      	movs	r3, r0
 80034c2:	0019      	movs	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	224c      	movs	r2, #76	@ 0x4c
 80034c8:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	224c      	movs	r2, #76	@ 0x4c
 80034ce:	569b      	ldrsb	r3, [r3, r2]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <get_mem_page+0x50>
        {
            rslt = BME68X_E_COM_FAIL;
 80034d4:	197b      	adds	r3, r7, r5
 80034d6:	22fe      	movs	r2, #254	@ 0xfe
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	e007      	b.n	80034ec <get_mem_page+0x60>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80034dc:	230e      	movs	r3, #14
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2210      	movs	r2, #16
 80034e4:	4013      	ands	r3, r2
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80034ec:	230f      	movs	r3, #15
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b25b      	sxtb	r3, r3
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b004      	add	sp, #16
 80034fa:	bdb0      	pop	{r4, r5, r7, pc}

080034fc <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80034fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	250b      	movs	r5, #11
 8003508:	197b      	adds	r3, r7, r5
 800350a:	1c0a      	adds	r2, r1, #0
 800350c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800350e:	2617      	movs	r6, #23
 8003510:	19bc      	adds	r4, r7, r6
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 f82a 	bl	800356e <null_ptr_check>
 800351a:	0003      	movs	r3, r0
 800351c:	7023      	strb	r3, [r4, #0]
    if ((value != NULL) && (rslt == BME68X_OK))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d018      	beq.n	8003556 <boundary_check+0x5a>
 8003524:	19bb      	adds	r3, r7, r6
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b25b      	sxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d113      	bne.n	8003556 <boundary_check+0x5a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	197a      	adds	r2, r7, r5
 8003534:	7812      	ldrb	r2, [r2, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d211      	bcs.n	800355e <boundary_check+0x62>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	197a      	adds	r2, r7, r5
 800353e:	7812      	ldrb	r2, [r2, #0]
 8003540:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	224d      	movs	r2, #77	@ 0x4d
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	2201      	movs	r2, #1
 800354a:	4313      	orrs	r3, r2
 800354c:	b2d9      	uxtb	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	224d      	movs	r2, #77	@ 0x4d
 8003552:	5499      	strb	r1, [r3, r2]
        if (*value > max)
 8003554:	e003      	b.n	800355e <boundary_check+0x62>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003556:	2317      	movs	r3, #23
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	22ff      	movs	r2, #255	@ 0xff
 800355c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800355e:	2317      	movs	r3, #23
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	b25b      	sxtb	r3, r3
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b007      	add	sp, #28
 800356c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800356e <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8003576:	230f      	movs	r3, #15
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <null_ptr_check+0x2e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <null_ptr_check+0x2e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <null_ptr_check+0x2e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <null_ptr_check+0x36>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800359c:	230f      	movs	r3, #15
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	22ff      	movs	r2, #255	@ 0xff
 80035a2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80035a4:	230f      	movs	r3, #15
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	b25b      	sxtb	r3, r3
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b004      	add	sp, #16
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80035b4:	b5b0      	push	{r4, r5, r7, lr}
 80035b6:	b092      	sub	sp, #72	@ 0x48
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	240b      	movs	r4, #11
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	1c0a      	adds	r2, r1, #0
 80035c6:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 80035c8:	2347      	movs	r3, #71	@ 0x47
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80035d0:	2345      	movs	r3, #69	@ 0x45
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80035d8:	2343      	movs	r3, #67	@ 0x43
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	226e      	movs	r2, #110	@ 0x6e
 80035de:	701a      	strb	r2, [r3, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80035e0:	2338      	movs	r3, #56	@ 0x38
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	0018      	movs	r0, r3
 80035e6:	230a      	movs	r3, #10
 80035e8:	001a      	movs	r2, r3
 80035ea:	2100      	movs	r1, #0
 80035ec:	f004 f946 	bl	800787c <memset>
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80035f0:	232c      	movs	r3, #44	@ 0x2c
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	0018      	movs	r0, r3
 80035f6:	230a      	movs	r3, #10
 80035f8:	001a      	movs	r2, r3
 80035fa:	2100      	movs	r1, #0
 80035fc:	f004 f93e 	bl	800787c <memset>
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003600:	2320      	movs	r3, #32
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	0018      	movs	r0, r3
 8003606:	230a      	movs	r3, #10
 8003608:	001a      	movs	r2, r3
 800360a:	2100      	movs	r1, #0
 800360c:	f004 f936 	bl	800787c <memset>
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003610:	2314      	movs	r3, #20
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	0018      	movs	r0, r3
 8003616:	230a      	movs	r3, #10
 8003618:	001a      	movs	r2, r3
 800361a:	2100      	movs	r1, #0
 800361c:	f004 f92e 	bl	800787c <memset>

    switch (op_mode)
 8003620:	193b      	adds	r3, r7, r4
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d02d      	beq.n	8003684 <set_conf+0xd0>
 8003628:	dd00      	ble.n	800362c <set_conf+0x78>
 800362a:	e10c      	b.n	8003846 <set_conf+0x292>
 800362c:	2b01      	cmp	r3, #1
 800362e:	d003      	beq.n	8003638 <set_conf+0x84>
 8003630:	2b02      	cmp	r3, #2
 8003632:	d100      	bne.n	8003636 <set_conf+0x82>
 8003634:	e088      	b.n	8003748 <set_conf+0x194>
 8003636:	e106      	b.n	8003846 <set_conf+0x292>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8003638:	2338      	movs	r3, #56	@ 0x38
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	225a      	movs	r2, #90	@ 0x5a
 800363e:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	885b      	ldrh	r3, [r3, #2]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	0011      	movs	r1, r2
 8003648:	0018      	movs	r0, r3
 800364a:	f7ff fa0b 	bl	8002a64 <calc_res_heat>
 800364e:	0003      	movs	r3, r0
 8003650:	001a      	movs	r2, r3
 8003652:	232c      	movs	r3, #44	@ 0x2c
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	701a      	strb	r2, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8003658:	2320      	movs	r3, #32
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2264      	movs	r2, #100	@ 0x64
 800365e:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	889b      	ldrh	r3, [r3, #4]
 8003664:	0018      	movs	r0, r3
 8003666:	f7ff fac9 	bl	8002bfc <calc_gas_wait>
 800366a:	0003      	movs	r3, r0
 800366c:	001a      	movs	r2, r3
 800366e:	2314      	movs	r3, #20
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 800367a:	2345      	movs	r3, #69	@ 0x45
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
            break;
 8003682:	e0e6      	b.n	8003852 <set_conf+0x29e>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <set_conf+0xe0>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <set_conf+0xea>
            {
                rslt = BME68X_E_NULL_PTR;
 8003694:	2347      	movs	r3, #71	@ 0x47
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	22ff      	movs	r2, #255	@ 0xff
 800369a:	701a      	strb	r2, [r3, #0]
                break;
 800369c:	e0d9      	b.n	8003852 <set_conf+0x29e>
            }

            for (i = 0; i < conf->profile_len; i++)
 800369e:	2346      	movs	r3, #70	@ 0x46
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e03e      	b.n	8003726 <set_conf+0x172>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80036a8:	2046      	movs	r0, #70	@ 0x46
 80036aa:	183b      	adds	r3, r7, r0
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	183a      	adds	r2, r7, r0
 80036b0:	7812      	ldrb	r2, [r2, #0]
 80036b2:	325a      	adds	r2, #90	@ 0x5a
 80036b4:	b2d1      	uxtb	r1, r2
 80036b6:	2238      	movs	r2, #56	@ 0x38
 80036b8:	18ba      	adds	r2, r7, r2
 80036ba:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	183b      	adds	r3, r7, r0
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	18d3      	adds	r3, r2, r3
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	0005      	movs	r5, r0
 80036cc:	183b      	adds	r3, r7, r0
 80036ce:	781c      	ldrb	r4, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	0019      	movs	r1, r3
 80036d4:	0010      	movs	r0, r2
 80036d6:	f7ff f9c5 	bl	8002a64 <calc_res_heat>
 80036da:	0003      	movs	r3, r0
 80036dc:	001a      	movs	r2, r3
 80036de:	232c      	movs	r3, #44	@ 0x2c
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80036e4:	0028      	movs	r0, r5
 80036e6:	183b      	adds	r3, r7, r0
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	183a      	adds	r2, r7, r0
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	3264      	adds	r2, #100	@ 0x64
 80036f0:	b2d1      	uxtb	r1, r2
 80036f2:	2220      	movs	r2, #32
 80036f4:	18ba      	adds	r2, r7, r2
 80036f6:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	183b      	adds	r3, r7, r0
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	18d3      	adds	r3, r2, r3
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	0005      	movs	r5, r0
 8003708:	183b      	adds	r3, r7, r0
 800370a:	781c      	ldrb	r4, [r3, #0]
 800370c:	0010      	movs	r0, r2
 800370e:	f7ff fa75 	bl	8002bfc <calc_gas_wait>
 8003712:	0003      	movs	r3, r0
 8003714:	001a      	movs	r2, r3
 8003716:	2314      	movs	r3, #20
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	551a      	strb	r2, [r3, r4]
            for (i = 0; i < conf->profile_len; i++)
 800371c:	197b      	adds	r3, r7, r5
 800371e:	781a      	ldrb	r2, [r3, #0]
 8003720:	197b      	adds	r3, r7, r5
 8003722:	3201      	adds	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	7c1b      	ldrb	r3, [r3, #16]
 800372a:	2246      	movs	r2, #70	@ 0x46
 800372c:	18ba      	adds	r2, r7, r2
 800372e:	7812      	ldrb	r2, [r2, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d3b9      	bcc.n	80036a8 <set_conf+0xf4>
            }

            (*nb_conv) = conf->profile_len;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	7c1a      	ldrb	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 800373c:	2345      	movs	r3, #69	@ 0x45
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	7c12      	ldrb	r2, [r2, #16]
 8003744:	701a      	strb	r2, [r3, #0]
            break;
 8003746:	e084      	b.n	8003852 <set_conf+0x29e>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <set_conf+0x1a4>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <set_conf+0x1ae>
            {
                rslt = BME68X_E_NULL_PTR;
 8003758:	2347      	movs	r3, #71	@ 0x47
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	22ff      	movs	r2, #255	@ 0xff
 800375e:	701a      	strb	r2, [r3, #0]
                break;
 8003760:	e077      	b.n	8003852 <set_conf+0x29e>
            }

            if (conf->shared_heatr_dur == 0)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8a5b      	ldrh	r3, [r3, #18]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <set_conf+0x1be>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 800376a:	2347      	movs	r3, #71	@ 0x47
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	2203      	movs	r2, #3
 8003770:	701a      	strb	r2, [r3, #0]
            }

            for (i = 0; i < conf->profile_len; i++)
 8003772:	2346      	movs	r3, #70	@ 0x46
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e039      	b.n	80037f0 <set_conf+0x23c>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 800377c:	2046      	movs	r0, #70	@ 0x46
 800377e:	183b      	adds	r3, r7, r0
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	183a      	adds	r2, r7, r0
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	325a      	adds	r2, #90	@ 0x5a
 8003788:	b2d1      	uxtb	r1, r2
 800378a:	2238      	movs	r2, #56	@ 0x38
 800378c:	18ba      	adds	r2, r7, r2
 800378e:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	183b      	adds	r3, r7, r0
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	18d3      	adds	r3, r2, r3
 800379c:	881a      	ldrh	r2, [r3, #0]
 800379e:	0005      	movs	r5, r0
 80037a0:	183b      	adds	r3, r7, r0
 80037a2:	781c      	ldrb	r4, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	0019      	movs	r1, r3
 80037a8:	0010      	movs	r0, r2
 80037aa:	f7ff f95b 	bl	8002a64 <calc_res_heat>
 80037ae:	0003      	movs	r3, r0
 80037b0:	001a      	movs	r2, r3
 80037b2:	232c      	movs	r3, #44	@ 0x2c
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80037b8:	0028      	movs	r0, r5
 80037ba:	183b      	adds	r3, r7, r0
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	183a      	adds	r2, r7, r0
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	3264      	adds	r2, #100	@ 0x64
 80037c4:	b2d1      	uxtb	r1, r2
 80037c6:	2220      	movs	r2, #32
 80037c8:	18ba      	adds	r2, r7, r2
 80037ca:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	183b      	adds	r3, r7, r0
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	18d3      	adds	r3, r2, r3
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	183b      	adds	r3, r7, r0
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b2d1      	uxtb	r1, r2
 80037e0:	2214      	movs	r2, #20
 80037e2:	18ba      	adds	r2, r7, r2
 80037e4:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < conf->profile_len; i++)
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	183b      	adds	r3, r7, r0
 80037ec:	3201      	adds	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	7c1b      	ldrb	r3, [r3, #16]
 80037f4:	2246      	movs	r2, #70	@ 0x46
 80037f6:	18ba      	adds	r2, r7, r2
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d3be      	bcc.n	800377c <set_conf+0x1c8>
            }

            (*nb_conv) = conf->profile_len;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	7c1a      	ldrb	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8003806:	2345      	movs	r3, #69	@ 0x45
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	7c12      	ldrb	r2, [r2, #16]
 800380e:	701a      	strb	r2, [r3, #0]
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8a5b      	ldrh	r3, [r3, #18]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 f84b 	bl	80038b0 <calc_heatr_dur_shared>
 800381a:	0003      	movs	r3, r0
 800381c:	001a      	movs	r2, r3
 800381e:	2144      	movs	r1, #68	@ 0x44
 8003820:	187b      	adds	r3, r7, r1
 8003822:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8003824:	2247      	movs	r2, #71	@ 0x47
 8003826:	18bb      	adds	r3, r7, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	b25b      	sxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10f      	bne.n	8003850 <set_conf+0x29c>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8003830:	18bc      	adds	r4, r7, r2
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	1879      	adds	r1, r7, r1
 8003836:	2243      	movs	r2, #67	@ 0x43
 8003838:	18b8      	adds	r0, r7, r2
 800383a:	2201      	movs	r2, #1
 800383c:	f7fe f809 	bl	8001852 <bme68x_set_regs>
 8003840:	0003      	movs	r3, r0
 8003842:	7023      	strb	r3, [r4, #0]
            }

            break;
 8003844:	e004      	b.n	8003850 <set_conf+0x29c>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8003846:	2347      	movs	r3, #71	@ 0x47
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e000      	b.n	8003852 <set_conf+0x29e>
            break;
 8003850:	46c0      	nop			@ (mov r8, r8)
    }

    if (rslt == BME68X_OK)
 8003852:	2147      	movs	r1, #71	@ 0x47
 8003854:	187b      	adds	r3, r7, r1
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b25b      	sxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10c      	bne.n	8003878 <set_conf+0x2c4>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 800385e:	2345      	movs	r3, #69	@ 0x45
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	781a      	ldrb	r2, [r3, #0]
 8003864:	187c      	adds	r4, r7, r1
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	212c      	movs	r1, #44	@ 0x2c
 800386a:	1879      	adds	r1, r7, r1
 800386c:	2038      	movs	r0, #56	@ 0x38
 800386e:	1838      	adds	r0, r7, r0
 8003870:	f7fd ffef 	bl	8001852 <bme68x_set_regs>
 8003874:	0003      	movs	r3, r0
 8003876:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8003878:	2147      	movs	r1, #71	@ 0x47
 800387a:	187b      	adds	r3, r7, r1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b25b      	sxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10c      	bne.n	800389e <set_conf+0x2ea>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8003884:	2345      	movs	r3, #69	@ 0x45
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	187c      	adds	r4, r7, r1
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2114      	movs	r1, #20
 8003890:	1879      	adds	r1, r7, r1
 8003892:	2020      	movs	r0, #32
 8003894:	1838      	adds	r0, r7, r0
 8003896:	f7fd ffdc 	bl	8001852 <bme68x_set_regs>
 800389a:	0003      	movs	r3, r0
 800389c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800389e:	2347      	movs	r3, #71	@ 0x47
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b25b      	sxtb	r3, r3
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b012      	add	sp, #72	@ 0x48
 80038ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080038b0 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	0002      	movs	r2, r0
 80038b8:	1dbb      	adds	r3, r7, #6
 80038ba:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 80038bc:	230f      	movs	r3, #15
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003944 <calc_heatr_dur_shared+0x94>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d904      	bls.n	80038d8 <calc_heatr_dur_shared+0x28>
    {
        heatdurval = 0xff; /* Max duration */
 80038ce:	230e      	movs	r3, #14
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	22ff      	movs	r2, #255	@ 0xff
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e02e      	b.n	8003936 <calc_heatr_dur_shared+0x86>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 80038d8:	1dbb      	adds	r3, r7, #6
 80038da:	881a      	ldrh	r2, [r3, #0]
 80038dc:	0013      	movs	r3, r2
 80038de:	015b      	lsls	r3, r3, #5
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	189b      	adds	r3, r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	001a      	movs	r2, r3
 80038ea:	23de      	movs	r3, #222	@ 0xde
 80038ec:	33ff      	adds	r3, #255	@ 0xff
 80038ee:	0019      	movs	r1, r3
 80038f0:	0010      	movs	r0, r2
 80038f2:	f7fc fc19 	bl	8000128 <__udivsi3>
 80038f6:	0003      	movs	r3, r0
 80038f8:	001a      	movs	r2, r3
 80038fa:	1dbb      	adds	r3, r7, #6
 80038fc:	801a      	strh	r2, [r3, #0]
        while (dur > 0x3F)
 80038fe:	e00a      	b.n	8003916 <calc_heatr_dur_shared+0x66>
        {
            dur = dur >> 2;
 8003900:	1dbb      	adds	r3, r7, #6
 8003902:	1dba      	adds	r2, r7, #6
 8003904:	8812      	ldrh	r2, [r2, #0]
 8003906:	0892      	lsrs	r2, r2, #2
 8003908:	801a      	strh	r2, [r3, #0]
            factor += 1;
 800390a:	220f      	movs	r2, #15
 800390c:	18bb      	adds	r3, r7, r2
 800390e:	18ba      	adds	r2, r7, r2
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	3201      	adds	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8003916:	1dbb      	adds	r3, r7, #6
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	2b3f      	cmp	r3, #63	@ 0x3f
 800391c:	d8f0      	bhi.n	8003900 <calc_heatr_dur_shared+0x50>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 800391e:	1dbb      	adds	r3, r7, #6
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b2d9      	uxtb	r1, r3
 8003924:	230f      	movs	r3, #15
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	019b      	lsls	r3, r3, #6
 800392c:	b2da      	uxtb	r2, r3
 800392e:	230e      	movs	r3, #14
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	188a      	adds	r2, r1, r2
 8003934:	701a      	strb	r2, [r3, #0]
    }

    return heatdurval;
 8003936:	230e      	movs	r3, #14
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}
 8003944:	00000782 	.word	0x00000782

08003948 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	603a      	str	r2, [r7, #0]
 8003950:	1dfb      	adds	r3, r7, #7
 8003952:	1c02      	adds	r2, r0, #0
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	1dbb      	adds	r3, r7, #6
 8003958:	1c0a      	adds	r2, r1, #0
 800395a:	701a      	strb	r2, [r3, #0]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 800395c:	1dfb      	adds	r3, r7, #7
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	18d3      	adds	r3, r2, r3
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	789a      	ldrb	r2, [r3, #2]
 800396a:	210e      	movs	r1, #14
 800396c:	187b      	adds	r3, r7, r1
 800396e:	801a      	strh	r2, [r3, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8003970:	1dbb      	adds	r3, r7, #6
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	789a      	ldrb	r2, [r3, #2]
 800397e:	200c      	movs	r0, #12
 8003980:	183b      	adds	r3, r7, r0
 8003982:	801a      	strh	r2, [r3, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8003984:	1dfb      	adds	r3, r7, #7
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	18d3      	adds	r3, r2, r3
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	b25b      	sxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	da2c      	bge.n	80039f2 <sort_sensor_data+0xaa>
 8003998:	1dbb      	adds	r3, r7, #6
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da22      	bge.n	80039f2 <sort_sensor_data+0xaa>
    {
        int16_t diff = meas_index2 - meas_index1;
 80039ac:	183b      	adds	r3, r7, r0
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	210a      	movs	r1, #10
 80039ba:	187b      	adds	r3, r7, r1
 80039bc:	801a      	strh	r2, [r3, #0]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 80039be:	000a      	movs	r2, r1
 80039c0:	18bb      	adds	r3, r7, r2
 80039c2:	2100      	movs	r1, #0
 80039c4:	5e5b      	ldrsh	r3, [r3, r1]
 80039c6:	3302      	adds	r3, #2
 80039c8:	db04      	blt.n	80039d4 <sort_sensor_data+0x8c>
 80039ca:	18bb      	adds	r3, r7, r2
 80039cc:	2200      	movs	r2, #0
 80039ce:	5e9b      	ldrsh	r3, [r3, r2]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	db05      	blt.n	80039e0 <sort_sensor_data+0x98>
 80039d4:	230a      	movs	r3, #10
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	5e9b      	ldrsh	r3, [r3, r2]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	dd1b      	ble.n	8003a18 <sort_sensor_data+0xd0>
        {
            swap_fields(low_index, high_index, field);
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	1dbb      	adds	r3, r7, #6
 80039e4:	7819      	ldrb	r1, [r3, #0]
 80039e6:	1dfb      	adds	r3, r7, #7
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 f819 	bl	8003a22 <swap_fields>
    {
 80039f0:	e012      	b.n	8003a18 <sort_sensor_data+0xd0>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 80039f2:	1dbb      	adds	r3, r7, #6
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	18d3      	adds	r3, r2, r3
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	da09      	bge.n	8003a1a <sort_sensor_data+0xd2>
    {
        swap_fields(low_index, high_index, field);
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	7819      	ldrb	r1, [r3, #0]
 8003a0c:	1dfb      	adds	r3, r7, #7
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 f806 	bl	8003a22 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8003a16:	e000      	b.n	8003a1a <sort_sensor_data+0xd2>
    {
 8003a18:	46c0      	nop			@ (mov r8, r8)
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b004      	add	sp, #16
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	603a      	str	r2, [r7, #0]
 8003a2a:	1dfb      	adds	r3, r7, #7
 8003a2c:	1c02      	adds	r2, r0, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	1dbb      	adds	r3, r7, #6
 8003a32:	1c0a      	adds	r2, r1, #0
 8003a34:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *temp;

    temp = field[index1];
 8003a36:	1dfb      	adds	r3, r7, #7
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	18d3      	adds	r3, r2, r3
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8003a44:	1dbb      	adds	r3, r7, #6
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	18d2      	adds	r2, r2, r3
 8003a4e:	1dfb      	adds	r3, r7, #7
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	18cb      	adds	r3, r1, r3
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8003a5c:	1dbb      	adds	r3, r7, #6
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	18d3      	adds	r3, r2, r3
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]
}
 8003a6a:	46c0      	nop			@ (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b004      	add	sp, #16
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8003a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a74:	b08f      	sub	sp, #60	@ 0x3c
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8003a7a:	2537      	movs	r5, #55	@ 0x37
 8003a7c:	197c      	adds	r4, r7, r5
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	260c      	movs	r6, #12
 8003a82:	19b9      	adds	r1, r7, r6
 8003a84:	2217      	movs	r2, #23
 8003a86:	208a      	movs	r0, #138	@ 0x8a
 8003a88:	f7fd ff90 	bl	80019ac <bme68x_get_regs>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8003a90:	197b      	adds	r3, r7, r5
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10b      	bne.n	8003ab2 <get_calib_data+0x40>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8003a9a:	197c      	adds	r4, r7, r5
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	19bb      	adds	r3, r7, r6
 8003aa0:	3317      	adds	r3, #23
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	0013      	movs	r3, r2
 8003aa6:	220e      	movs	r2, #14
 8003aa8:	20e1      	movs	r0, #225	@ 0xe1
 8003aaa:	f7fd ff7f 	bl	80019ac <bme68x_get_regs>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8003ab2:	2237      	movs	r2, #55	@ 0x37
 8003ab4:	18bb      	adds	r3, r7, r2
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b25b      	sxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <get_calib_data+0x66>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8003abe:	18bc      	adds	r4, r7, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	3325      	adds	r3, #37	@ 0x25
 8003ac8:	0019      	movs	r1, r3
 8003aca:	0013      	movs	r3, r2
 8003acc:	2205      	movs	r2, #5
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7fd ff6c 	bl	80019ac <bme68x_get_regs>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	7023      	strb	r3, [r4, #0]
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8003ad8:	2337      	movs	r3, #55	@ 0x37
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	b25b      	sxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d000      	beq.n	8003ae6 <get_calib_data+0x74>
 8003ae4:	e0f4      	b.n	8003cd0 <get_calib_data+0x25e>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8003ae6:	210c      	movs	r1, #12
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	2220      	movs	r2, #32
 8003aec:	5c9b      	ldrb	r3, [r3, r2]
 8003aee:	b21b      	sxth	r3, r3
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	b21a      	sxth	r2, r3
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	7fdb      	ldrb	r3, [r3, #31]
 8003af8:	b21b      	sxth	r3, r3
 8003afa:	4313      	orrs	r3, r2
 8003afc:	b21b      	sxth	r3, r3
 8003afe:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	785b      	ldrb	r3, [r3, #1]
 8003b08:	b21b      	sxth	r3, r3
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	b21a      	sxth	r2, r3
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b21b      	sxth	r3, r3
 8003b14:	4313      	orrs	r3, r2
 8003b16:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8003b1c:	0008      	movs	r0, r1
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	789b      	ldrb	r3, [r3, #2]
 8003b22:	b259      	sxtb	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2222      	movs	r2, #34	@ 0x22
 8003b28:	5499      	strb	r1, [r3, r2]

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8003b2a:	0001      	movs	r1, r0
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	795b      	ldrb	r3, [r3, #5]
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	b21a      	sxth	r2, r3
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	791b      	ldrb	r3, [r3, #4]
 8003b3a:	b21b      	sxth	r3, r3
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	b21b      	sxth	r3, r3
 8003b40:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	79db      	ldrb	r3, [r3, #7]
 8003b4a:	b21b      	sxth	r3, r3
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	b21a      	sxth	r2, r3
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	799b      	ldrb	r3, [r3, #6]
 8003b54:	b21b      	sxth	r3, r3
 8003b56:	4313      	orrs	r3, r2
 8003b58:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8003b5e:	0008      	movs	r0, r1
 8003b60:	187b      	adds	r3, r7, r1
 8003b62:	7a1b      	ldrb	r3, [r3, #8]
 8003b64:	b259      	sxtb	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2228      	movs	r2, #40	@ 0x28
 8003b6a:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8003b6c:	0001      	movs	r1, r0
 8003b6e:	187b      	adds	r3, r7, r1
 8003b70:	7adb      	ldrb	r3, [r3, #11]
 8003b72:	b21b      	sxth	r3, r3
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	b21a      	sxth	r2, r3
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	7a9b      	ldrb	r3, [r3, #10]
 8003b7c:	b21b      	sxth	r3, r3
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8003b86:	187b      	adds	r3, r7, r1
 8003b88:	7b5b      	ldrb	r3, [r3, #13]
 8003b8a:	b21b      	sxth	r3, r3
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	b21a      	sxth	r2, r3
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	7b1b      	ldrb	r3, [r3, #12]
 8003b94:	b21b      	sxth	r3, r3
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8003b9e:	0008      	movs	r0, r1
 8003ba0:	183b      	adds	r3, r7, r0
 8003ba2:	7bdb      	ldrb	r3, [r3, #15]
 8003ba4:	b259      	sxtb	r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	222e      	movs	r2, #46	@ 0x2e
 8003baa:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8003bac:	183b      	adds	r3, r7, r0
 8003bae:	7b9b      	ldrb	r3, [r3, #14]
 8003bb0:	b259      	sxtb	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	222f      	movs	r2, #47	@ 0x2f
 8003bb6:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	7cdb      	ldrb	r3, [r3, #19]
 8003bbc:	b21b      	sxth	r3, r3
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	b21a      	sxth	r2, r3
 8003bc2:	183b      	adds	r3, r7, r0
 8003bc4:	7c9b      	ldrb	r3, [r3, #18]
 8003bc6:	b21b      	sxth	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8003bd0:	183b      	adds	r3, r7, r0
 8003bd2:	7d5b      	ldrb	r3, [r3, #21]
 8003bd4:	b21b      	sxth	r3, r3
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	b21a      	sxth	r2, r3
 8003bda:	183b      	adds	r3, r7, r0
 8003bdc:	7d1b      	ldrb	r3, [r3, #20]
 8003bde:	b21b      	sxth	r3, r3
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8003be8:	183b      	adds	r3, r7, r0
 8003bea:	7d99      	ldrb	r1, [r3, #22]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2234      	movs	r2, #52	@ 0x34
 8003bf0:	5499      	strb	r1, [r3, r2]

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8003bf2:	183b      	adds	r3, r7, r0
 8003bf4:	7e5b      	ldrb	r3, [r3, #25]
 8003bf6:	b21b      	sxth	r3, r3
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8003bfc:	183b      	adds	r3, r7, r0
 8003bfe:	7e1b      	ldrb	r3, [r3, #24]
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	210f      	movs	r1, #15
 8003c04:	400b      	ands	r3, r1
 8003c06:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b21b      	sxth	r3, r3
 8003c0c:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	7ddb      	ldrb	r3, [r3, #23]
 8003c16:	b21b      	sxth	r3, r3
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	b21a      	sxth	r2, r3
 8003c1c:	183b      	adds	r3, r7, r0
 8003c1e:	7e1b      	ldrb	r3, [r3, #24]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	b21b      	sxth	r3, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8003c30:	183b      	adds	r3, r7, r0
 8003c32:	7e9b      	ldrb	r3, [r3, #26]
 8003c34:	b25a      	sxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8003c3a:	183b      	adds	r3, r7, r0
 8003c3c:	7edb      	ldrb	r3, [r3, #27]
 8003c3e:	b25a      	sxtb	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8003c44:	183b      	adds	r3, r7, r0
 8003c46:	7f1b      	ldrb	r3, [r3, #28]
 8003c48:	b25a      	sxtb	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	7f5a      	ldrb	r2, [r3, #29]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8003c56:	183b      	adds	r3, r7, r0
 8003c58:	7f9b      	ldrb	r3, [r3, #30]
 8003c5a:	b25a      	sxtb	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8003c60:	183b      	adds	r3, r7, r0
 8003c62:	2223      	movs	r2, #35	@ 0x23
 8003c64:	5c9b      	ldrb	r3, [r3, r2]
 8003c66:	b25a      	sxtb	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8003c6c:	183b      	adds	r3, r7, r0
 8003c6e:	2222      	movs	r2, #34	@ 0x22
 8003c70:	5c9b      	ldrb	r3, [r3, r2]
 8003c72:	b21b      	sxth	r3, r3
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	b21a      	sxth	r2, r3
 8003c78:	183b      	adds	r3, r7, r0
 8003c7a:	2121      	movs	r1, #33	@ 0x21
 8003c7c:	5c5b      	ldrb	r3, [r3, r1]
 8003c7e:	b21b      	sxth	r3, r3
 8003c80:	4313      	orrs	r3, r2
 8003c82:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8003c88:	183b      	adds	r3, r7, r0
 8003c8a:	2224      	movs	r2, #36	@ 0x24
 8003c8c:	5c9b      	ldrb	r3, [r3, r2]
 8003c8e:	b25a      	sxtb	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8003c94:	183b      	adds	r3, r7, r0
 8003c96:	2227      	movs	r2, #39	@ 0x27
 8003c98:	5c9b      	ldrb	r3, [r3, r2]
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	2330      	movs	r3, #48	@ 0x30
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d500      	bpl.n	8003ca4 <get_calib_data+0x232>
 8003ca2:	330f      	adds	r3, #15
 8003ca4:	111b      	asrs	r3, r3, #4
 8003ca6:	b2d9      	uxtb	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	223c      	movs	r2, #60	@ 0x3c
 8003cac:	5499      	strb	r1, [r3, r2]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8003cae:	200c      	movs	r0, #12
 8003cb0:	183b      	adds	r3, r7, r0
 8003cb2:	2225      	movs	r2, #37	@ 0x25
 8003cb4:	5c9b      	ldrb	r3, [r3, r2]
 8003cb6:	b259      	sxtb	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	223d      	movs	r2, #61	@ 0x3d
 8003cbc:	5499      	strb	r1, [r3, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8003cbe:	183b      	adds	r3, r7, r0
 8003cc0:	2229      	movs	r2, #41	@ 0x29
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	b25b      	sxtb	r3, r3
 8003cc6:	111b      	asrs	r3, r3, #4
 8003cc8:	b259      	sxtb	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	223e      	movs	r2, #62	@ 0x3e
 8003cce:	5499      	strb	r1, [r3, r2]
    }

    return rslt;
 8003cd0:	2337      	movs	r3, #55	@ 0x37
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b25b      	sxtb	r3, r3
}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b00f      	add	sp, #60	@ 0x3c
 8003cde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ce0 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8003ce8:	250e      	movs	r5, #14
 8003cea:	197b      	adds	r3, r7, r5
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8003cf0:	260f      	movs	r6, #15
 8003cf2:	19bc      	adds	r4, r7, r6
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	1979      	adds	r1, r7, r5
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	20f0      	movs	r0, #240	@ 0xf0
 8003cfc:	f7fd fe56 	bl	80019ac <bme68x_get_regs>
 8003d00:	0003      	movs	r3, r0
 8003d02:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8003d04:	19bb      	adds	r3, r7, r6
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d104      	bne.n	8003d18 <read_variant_id+0x38>
    {
        dev->variant_id = reg_data;
 8003d0e:	197b      	adds	r3, r7, r5
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	001a      	movs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8003d18:	230f      	movs	r3, #15
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	b25b      	sxtb	r3, r3
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b005      	add	sp, #20
 8003d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d2e:	f000 fd53 	bl	80047d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d32:	f000 f8e9 	bl	8003f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d36:	f000 f9fb 	bl	8004130 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d3a:	f000 f9ab 	bl	8004094 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003d3e:	f000 f96b 	bl	8004018 <MX_SPI1_Init>
  MX_I2C1_Init();
 8003d42:	f000 f929 	bl	8003f98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Small delay to ensure stability
  HAL_Delay(100);
 8003d46:	2064      	movs	r0, #100	@ 0x64
 8003d48:	f000 fdcc 	bl	80048e4 <HAL_Delay>

  // Send startup message and start with LED blinking (indicating initialization)
  HAL_UART_Transmit(&huart2, (uint8_t*)"Starting BME680 initialization...\r\n", 35, HAL_MAX_DELAY);
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	425b      	negs	r3, r3
 8003d50:	495c      	ldr	r1, [pc, #368]	@ (8003ec4 <main+0x19c>)
 8003d52:	485d      	ldr	r0, [pc, #372]	@ (8003ec8 <main+0x1a0>)
 8003d54:	2223      	movs	r2, #35	@ 0x23
 8003d56:	f002 feab 	bl	8006ab0 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Start with LED OFF
 8003d5a:	23a0      	movs	r3, #160	@ 0xa0
 8003d5c:	05db      	lsls	r3, r3, #23
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2101      	movs	r1, #1
 8003d62:	0018      	movs	r0, r3
 8003d64:	f000 fffa 	bl	8004d5c <HAL_GPIO_WritePin>

  struct bme68x_conf conf;
  struct bme68x_heatr_conf heatr_conf;
  uint8_t dev_addr = BME68X_I2C_ADDR_LOW;
 8003d68:	1cfb      	adds	r3, r7, #3
 8003d6a:	2276      	movs	r2, #118	@ 0x76
 8003d6c:	701a      	strb	r2, [r3, #0]

  gas_sensor.intf_ptr = &dev_addr;
 8003d6e:	4b57      	ldr	r3, [pc, #348]	@ (8003ecc <main+0x1a4>)
 8003d70:	1cfa      	adds	r2, r7, #3
 8003d72:	605a      	str	r2, [r3, #4]
  gas_sensor.intf = BME68X_I2C_INTF;
 8003d74:	4b55      	ldr	r3, [pc, #340]	@ (8003ecc <main+0x1a4>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	731a      	strb	r2, [r3, #12]
  gas_sensor.read = user_i2c_read;
 8003d7a:	4b54      	ldr	r3, [pc, #336]	@ (8003ecc <main+0x1a4>)
 8003d7c:	4a54      	ldr	r2, [pc, #336]	@ (8003ed0 <main+0x1a8>)
 8003d7e:	641a      	str	r2, [r3, #64]	@ 0x40
  gas_sensor.write = user_i2c_write;
 8003d80:	4b52      	ldr	r3, [pc, #328]	@ (8003ecc <main+0x1a4>)
 8003d82:	4a54      	ldr	r2, [pc, #336]	@ (8003ed4 <main+0x1ac>)
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
  gas_sensor.delay_us = user_delay_us;
 8003d86:	4b51      	ldr	r3, [pc, #324]	@ (8003ecc <main+0x1a4>)
 8003d88:	4a53      	ldr	r2, [pc, #332]	@ (8003ed8 <main+0x1b0>)
 8003d8a:	649a      	str	r2, [r3, #72]	@ 0x48

  // Try to initialize BME680
  bme680_init_success = bme68x_init(&gas_sensor);
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8003ecc <main+0x1a4>)
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7fd fd24 	bl	80017dc <bme68x_init>
 8003d94:	0003      	movs	r3, r0
 8003d96:	001a      	movs	r2, r3
 8003d98:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <main+0x1b4>)
 8003d9a:	701a      	strb	r2, [r3, #0]
  if (bme680_init_success != BME68X_OK) {
 8003d9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003edc <main+0x1b4>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <main+0x8e>
    HAL_UART_Transmit(&huart2, (uint8_t*)"BME680 init failed!\r\n", 21, HAL_MAX_DELAY);
 8003da6:	2301      	movs	r3, #1
 8003da8:	425b      	negs	r3, r3
 8003daa:	494d      	ldr	r1, [pc, #308]	@ (8003ee0 <main+0x1b8>)
 8003dac:	4846      	ldr	r0, [pc, #280]	@ (8003ec8 <main+0x1a0>)
 8003dae:	2215      	movs	r2, #21
 8003db0:	f002 fe7e 	bl	8006ab0 <HAL_UART_Transmit>
 8003db4:	e04b      	b.n	8003e4e <main+0x126>
    // Don't call Error_Handler, just continue with LED blinking
  } else {
    HAL_UART_Transmit(&huart2, (uint8_t*)"BME680 init OK\r\n", 17, HAL_MAX_DELAY);
 8003db6:	2301      	movs	r3, #1
 8003db8:	425b      	negs	r3, r3
 8003dba:	494a      	ldr	r1, [pc, #296]	@ (8003ee4 <main+0x1bc>)
 8003dbc:	4842      	ldr	r0, [pc, #264]	@ (8003ec8 <main+0x1a0>)
 8003dbe:	2211      	movs	r2, #17
 8003dc0:	f002 fe76 	bl	8006ab0 <HAL_UART_Transmit>
    
    // Set oversampling and filter
    conf.os_hum = BME68X_OS_2X;
 8003dc4:	2118      	movs	r1, #24
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	2202      	movs	r2, #2
 8003dca:	701a      	strb	r2, [r3, #0]
    conf.os_pres = BME68X_OS_4X;
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	2203      	movs	r2, #3
 8003dd0:	709a      	strb	r2, [r3, #2]
    conf.os_temp = BME68X_OS_8X;
 8003dd2:	187b      	adds	r3, r7, r1
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	705a      	strb	r2, [r3, #1]
    conf.filter = BME68X_FILTER_OFF;
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	2200      	movs	r2, #0
 8003ddc:	70da      	strb	r2, [r3, #3]

    if (bme68x_set_conf(&conf, &gas_sensor) != BME68X_OK) {
 8003dde:	4a3b      	ldr	r2, [pc, #236]	@ (8003ecc <main+0x1a4>)
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7fd fe93 	bl	8001b10 <bme68x_set_conf>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d007      	beq.n	8003dfe <main+0xd6>
      HAL_UART_Transmit(&huart2, (uint8_t*)"BME680 config failed!\r\n", 23, HAL_MAX_DELAY);
 8003dee:	2301      	movs	r3, #1
 8003df0:	425b      	negs	r3, r3
 8003df2:	493d      	ldr	r1, [pc, #244]	@ (8003ee8 <main+0x1c0>)
 8003df4:	4834      	ldr	r0, [pc, #208]	@ (8003ec8 <main+0x1a0>)
 8003df6:	2217      	movs	r2, #23
 8003df8:	f002 fe5a 	bl	8006ab0 <HAL_UART_Transmit>
 8003dfc:	e027      	b.n	8003e4e <main+0x126>
    } else {
      HAL_UART_Transmit(&huart2, (uint8_t*)"BME680 config OK\r\n", 19, HAL_MAX_DELAY);
 8003dfe:	2301      	movs	r3, #1
 8003e00:	425b      	negs	r3, r3
 8003e02:	493a      	ldr	r1, [pc, #232]	@ (8003eec <main+0x1c4>)
 8003e04:	4830      	ldr	r0, [pc, #192]	@ (8003ec8 <main+0x1a0>)
 8003e06:	2213      	movs	r2, #19
 8003e08:	f002 fe52 	bl	8006ab0 <HAL_UART_Transmit>
      
      // Set heater profile
      heatr_conf.enable = BME68X_ENABLE;
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
      heatr_conf.heatr_temp = 320;  // Temperature in °C
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	22a0      	movs	r2, #160	@ 0xa0
 8003e16:	0052      	lsls	r2, r2, #1
 8003e18:	805a      	strh	r2, [r3, #2]
      heatr_conf.heatr_dur = 150;   // Duration in ms
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	2296      	movs	r2, #150	@ 0x96
 8003e1e:	809a      	strh	r2, [r3, #4]

      if (bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &gas_sensor) != BME68X_OK) {
 8003e20:	4a2a      	ldr	r2, [pc, #168]	@ (8003ecc <main+0x1a4>)
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	0019      	movs	r1, r3
 8003e26:	2001      	movs	r0, #1
 8003e28:	f7fe f99a 	bl	8002160 <bme68x_set_heatr_conf>
 8003e2c:	1e03      	subs	r3, r0, #0
 8003e2e:	d007      	beq.n	8003e40 <main+0x118>
        HAL_UART_Transmit(&huart2, (uint8_t*)"BME680 heater config failed!\r\n", 30, HAL_MAX_DELAY);
 8003e30:	2301      	movs	r3, #1
 8003e32:	425b      	negs	r3, r3
 8003e34:	492e      	ldr	r1, [pc, #184]	@ (8003ef0 <main+0x1c8>)
 8003e36:	4824      	ldr	r0, [pc, #144]	@ (8003ec8 <main+0x1a0>)
 8003e38:	221e      	movs	r2, #30
 8003e3a:	f002 fe39 	bl	8006ab0 <HAL_UART_Transmit>
 8003e3e:	e006      	b.n	8003e4e <main+0x126>
      } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"BME680 heater config OK\r\n", 26, HAL_MAX_DELAY);
 8003e40:	2301      	movs	r3, #1
 8003e42:	425b      	negs	r3, r3
 8003e44:	492b      	ldr	r1, [pc, #172]	@ (8003ef4 <main+0x1cc>)
 8003e46:	4820      	ldr	r0, [pc, #128]	@ (8003ec8 <main+0x1a0>)
 8003e48:	221a      	movs	r2, #26
 8003e4a:	f002 fe31 	bl	8006ab0 <HAL_UART_Transmit>
      }
    }
  }
   
  // Final status message
  if (bme680_init_success == BME68X_OK) {
 8003e4e:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <main+0x1b4>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <main+0x140>
    HAL_UART_Transmit(&huart2, (uint8_t*)"BME680 ready - LED will stay ON\r\n", 32, HAL_MAX_DELAY);
 8003e58:	2301      	movs	r3, #1
 8003e5a:	425b      	negs	r3, r3
 8003e5c:	4926      	ldr	r1, [pc, #152]	@ (8003ef8 <main+0x1d0>)
 8003e5e:	481a      	ldr	r0, [pc, #104]	@ (8003ec8 <main+0x1a0>)
 8003e60:	2220      	movs	r2, #32
 8003e62:	f002 fe25 	bl	8006ab0 <HAL_UART_Transmit>
 8003e66:	e006      	b.n	8003e76 <main+0x14e>
  } else {
    HAL_UART_Transmit(&huart2, (uint8_t*)"BME680 failed - LED will blink\r\n", 31, HAL_MAX_DELAY);
 8003e68:	2301      	movs	r3, #1
 8003e6a:	425b      	negs	r3, r3
 8003e6c:	4923      	ldr	r1, [pc, #140]	@ (8003efc <main+0x1d4>)
 8003e6e:	4816      	ldr	r0, [pc, #88]	@ (8003ec8 <main+0x1a0>)
 8003e70:	221f      	movs	r2, #31
 8003e72:	f002 fe1d 	bl	8006ab0 <HAL_UART_Transmit>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)"Entering main loop...\r\n", 23, HAL_MAX_DELAY);
 8003e76:	2301      	movs	r3, #1
 8003e78:	425b      	negs	r3, r3
 8003e7a:	4921      	ldr	r1, [pc, #132]	@ (8003f00 <main+0x1d8>)
 8003e7c:	4812      	ldr	r0, [pc, #72]	@ (8003ec8 <main+0x1a0>)
 8003e7e:	2217      	movs	r2, #23
 8003e80:	f002 fe16 	bl	8006ab0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    // Only try to read BME680 if initialization was successful
    if (bme680_init_success == BME68X_OK) {
 8003e84:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <main+0x1b4>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <main+0x17a>
      // Everything working - LED stays ON
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8003e8e:	23a0      	movs	r3, #160	@ 0xa0
 8003e90:	05db      	lsls	r3, r3, #23
 8003e92:	2201      	movs	r2, #1
 8003e94:	2101      	movs	r1, #1
 8003e96:	0018      	movs	r0, r3
 8003e98:	f000 ff60 	bl	8004d5c <HAL_GPIO_WritePin>
      ReadAndPrintBME680Data();
 8003e9c:	f000 fa7e 	bl	800439c <ReadAndPrintBME680Data>
 8003ea0:	e00c      	b.n	8003ebc <main+0x194>
    } else {
      // Error condition - LED blinks
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8003ea2:	23a0      	movs	r3, #160	@ 0xa0
 8003ea4:	05db      	lsls	r3, r3, #23
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 ff74 	bl	8004d96 <HAL_GPIO_TogglePin>
      HAL_UART_Transmit(&huart2, (uint8_t*)"LED blinking - BME680 not available\r\n", 37, HAL_MAX_DELAY);
 8003eae:	2301      	movs	r3, #1
 8003eb0:	425b      	negs	r3, r3
 8003eb2:	4914      	ldr	r1, [pc, #80]	@ (8003f04 <main+0x1dc>)
 8003eb4:	4804      	ldr	r0, [pc, #16]	@ (8003ec8 <main+0x1a0>)
 8003eb6:	2225      	movs	r2, #37	@ 0x25
 8003eb8:	f002 fdfa 	bl	8006ab0 <HAL_UART_Transmit>
    }
    
    HAL_Delay(100); // 2 seconds between readings
 8003ebc:	2064      	movs	r0, #100	@ 0x64
 8003ebe:	f000 fd11 	bl	80048e4 <HAL_Delay>
    if (bme680_init_success == BME68X_OK) {
 8003ec2:	e7df      	b.n	8003e84 <main+0x15c>
 8003ec4:	0800821c 	.word	0x0800821c
 8003ec8:	20000134 	.word	0x20000134
 8003ecc:	200001c8 	.word	0x200001c8
 8003ed0:	0800421d 	.word	0x0800421d
 8003ed4:	080042c5 	.word	0x080042c5
 8003ed8:	0800436d 	.word	0x0800436d
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	08008240 	.word	0x08008240
 8003ee4:	08008258 	.word	0x08008258
 8003ee8:	0800826c 	.word	0x0800826c
 8003eec:	08008284 	.word	0x08008284
 8003ef0:	08008298 	.word	0x08008298
 8003ef4:	080082b8 	.word	0x080082b8
 8003ef8:	080082d4 	.word	0x080082d4
 8003efc:	080082f8 	.word	0x080082f8
 8003f00:	0800831c 	.word	0x0800831c
 8003f04:	08008334 	.word	0x08008334

08003f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b093      	sub	sp, #76	@ 0x4c
 8003f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f0e:	2410      	movs	r4, #16
 8003f10:	193b      	adds	r3, r7, r4
 8003f12:	0018      	movs	r0, r3
 8003f14:	2338      	movs	r3, #56	@ 0x38
 8003f16:	001a      	movs	r2, r3
 8003f18:	2100      	movs	r1, #0
 8003f1a:	f003 fcaf 	bl	800787c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f1e:	003b      	movs	r3, r7
 8003f20:	0018      	movs	r0, r3
 8003f22:	2310      	movs	r3, #16
 8003f24:	001a      	movs	r2, r3
 8003f26:	2100      	movs	r1, #0
 8003f28:	f003 fca8 	bl	800787c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f2c:	2380      	movs	r3, #128	@ 0x80
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f001 fde7 	bl	8005b04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f36:	193b      	adds	r3, r7, r4
 8003f38:	2202      	movs	r2, #2
 8003f3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	2280      	movs	r2, #128	@ 0x80
 8003f40:	0052      	lsls	r2, r2, #1
 8003f42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003f44:	193b      	adds	r3, r7, r4
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f4a:	193b      	adds	r3, r7, r4
 8003f4c:	2240      	movs	r2, #64	@ 0x40
 8003f4e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f50:	193b      	adds	r3, r7, r4
 8003f52:	2200      	movs	r2, #0
 8003f54:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f56:	193b      	adds	r3, r7, r4
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f001 fe1f 	bl	8005b9c <HAL_RCC_OscConfig>
 8003f5e:	1e03      	subs	r3, r0, #0
 8003f60:	d001      	beq.n	8003f66 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003f62:	f000 fa83 	bl	800446c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f66:	003b      	movs	r3, r7
 8003f68:	2207      	movs	r2, #7
 8003f6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003f6c:	003b      	movs	r3, r7
 8003f6e:	2200      	movs	r2, #0
 8003f70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f72:	003b      	movs	r3, r7
 8003f74:	2200      	movs	r2, #0
 8003f76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f78:	003b      	movs	r3, r7
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f7e:	003b      	movs	r3, r7
 8003f80:	2100      	movs	r1, #0
 8003f82:	0018      	movs	r0, r3
 8003f84:	f002 f924 	bl	80061d0 <HAL_RCC_ClockConfig>
 8003f88:	1e03      	subs	r3, r0, #0
 8003f8a:	d001      	beq.n	8003f90 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003f8c:	f000 fa6e 	bl	800446c <Error_Handler>
  }
}
 8003f90:	46c0      	nop			@ (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b013      	add	sp, #76	@ 0x4c
 8003f96:	bd90      	pop	{r4, r7, pc}

08003f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <MX_I2C1_Init+0x74>)
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004010 <MX_I2C1_Init+0x78>)
 8003fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8003fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <MX_I2C1_Init+0x74>)
 8003fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8004014 <MX_I2C1_Init+0x7c>)
 8003fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003fa8:	4b18      	ldr	r3, [pc, #96]	@ (800400c <MX_I2C1_Init+0x74>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fae:	4b17      	ldr	r3, [pc, #92]	@ (800400c <MX_I2C1_Init+0x74>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fb4:	4b15      	ldr	r3, [pc, #84]	@ (800400c <MX_I2C1_Init+0x74>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003fba:	4b14      	ldr	r3, [pc, #80]	@ (800400c <MX_I2C1_Init+0x74>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003fc0:	4b12      	ldr	r3, [pc, #72]	@ (800400c <MX_I2C1_Init+0x74>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fc6:	4b11      	ldr	r3, [pc, #68]	@ (800400c <MX_I2C1_Init+0x74>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800400c <MX_I2C1_Init+0x74>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <MX_I2C1_Init+0x74>)
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f000 fef9 	bl	8004dcc <HAL_I2C_Init>
 8003fda:	1e03      	subs	r3, r0, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003fde:	f000 fa45 	bl	800446c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <MX_I2C1_Init+0x74>)
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f001 fcf4 	bl	80059d4 <HAL_I2CEx_ConfigAnalogFilter>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ff0:	f000 fa3c 	bl	800446c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <MX_I2C1_Init+0x74>)
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f001 fd37 	bl	8005a6c <HAL_I2CEx_ConfigDigitalFilter>
 8003ffe:	1e03      	subs	r3, r0, #0
 8004000:	d001      	beq.n	8004006 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004002:	f000 fa33 	bl	800446c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	2000007c 	.word	0x2000007c
 8004010:	40005400 	.word	0x40005400
 8004014:	00503d58 	.word	0x00503d58

08004018 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800401c:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <MX_SPI1_Init+0x74>)
 800401e:	4a1c      	ldr	r2, [pc, #112]	@ (8004090 <MX_SPI1_Init+0x78>)
 8004020:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004022:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <MX_SPI1_Init+0x74>)
 8004024:	2282      	movs	r2, #130	@ 0x82
 8004026:	0052      	lsls	r2, r2, #1
 8004028:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800402a:	4b18      	ldr	r3, [pc, #96]	@ (800408c <MX_SPI1_Init+0x74>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004030:	4b16      	ldr	r3, [pc, #88]	@ (800408c <MX_SPI1_Init+0x74>)
 8004032:	22c0      	movs	r2, #192	@ 0xc0
 8004034:	0092      	lsls	r2, r2, #2
 8004036:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004038:	4b14      	ldr	r3, [pc, #80]	@ (800408c <MX_SPI1_Init+0x74>)
 800403a:	2200      	movs	r2, #0
 800403c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800403e:	4b13      	ldr	r3, [pc, #76]	@ (800408c <MX_SPI1_Init+0x74>)
 8004040:	2200      	movs	r2, #0
 8004042:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8004044:	4b11      	ldr	r3, [pc, #68]	@ (800408c <MX_SPI1_Init+0x74>)
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800404a:	4b10      	ldr	r3, [pc, #64]	@ (800408c <MX_SPI1_Init+0x74>)
 800404c:	2200      	movs	r2, #0
 800404e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004050:	4b0e      	ldr	r3, [pc, #56]	@ (800408c <MX_SPI1_Init+0x74>)
 8004052:	2200      	movs	r2, #0
 8004054:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004056:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <MX_SPI1_Init+0x74>)
 8004058:	2200      	movs	r2, #0
 800405a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <MX_SPI1_Init+0x74>)
 800405e:	2200      	movs	r2, #0
 8004060:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004062:	4b0a      	ldr	r3, [pc, #40]	@ (800408c <MX_SPI1_Init+0x74>)
 8004064:	2207      	movs	r2, #7
 8004066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004068:	4b08      	ldr	r3, [pc, #32]	@ (800408c <MX_SPI1_Init+0x74>)
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800406e:	4b07      	ldr	r3, [pc, #28]	@ (800408c <MX_SPI1_Init+0x74>)
 8004070:	2208      	movs	r2, #8
 8004072:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <MX_SPI1_Init+0x74>)
 8004076:	0018      	movs	r0, r3
 8004078:	f002 fc0c 	bl	8006894 <HAL_SPI_Init>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d001      	beq.n	8004084 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8004080:	f000 f9f4 	bl	800446c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004084:	46c0      	nop			@ (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	200000d0 	.word	0x200000d0
 8004090:	40013000 	.word	0x40013000

08004094 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004098:	4b23      	ldr	r3, [pc, #140]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 800409a:	4a24      	ldr	r2, [pc, #144]	@ (800412c <MX_USART2_UART_Init+0x98>)
 800409c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800409e:	4b22      	ldr	r3, [pc, #136]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040a0:	22e1      	movs	r2, #225	@ 0xe1
 80040a2:	0252      	lsls	r2, r2, #9
 80040a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040a6:	4b20      	ldr	r3, [pc, #128]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040ba:	220c      	movs	r2, #12
 80040bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040be:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c4:	4b18      	ldr	r3, [pc, #96]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040ca:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80040d0:	4b15      	ldr	r3, [pc, #84]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040d6:	4b14      	ldr	r3, [pc, #80]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040d8:	2200      	movs	r2, #0
 80040da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040dc:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f002 fc90 	bl	8006a04 <HAL_UART_Init>
 80040e4:	1e03      	subs	r3, r0, #0
 80040e6:	d001      	beq.n	80040ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80040e8:	f000 f9c0 	bl	800446c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 80040ee:	2100      	movs	r1, #0
 80040f0:	0018      	movs	r0, r3
 80040f2:	f003 faad 	bl	8007650 <HAL_UARTEx_SetTxFifoThreshold>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d001      	beq.n	80040fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80040fa:	f000 f9b7 	bl	800446c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 8004100:	2100      	movs	r1, #0
 8004102:	0018      	movs	r0, r3
 8004104:	f003 fae4 	bl	80076d0 <HAL_UARTEx_SetRxFifoThreshold>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d001      	beq.n	8004110 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800410c:	f000 f9ae 	bl	800446c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004110:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <MX_USART2_UART_Init+0x94>)
 8004112:	0018      	movs	r0, r3
 8004114:	f003 fa62 	bl	80075dc <HAL_UARTEx_DisableFifoMode>
 8004118:	1e03      	subs	r3, r0, #0
 800411a:	d001      	beq.n	8004120 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800411c:	f000 f9a6 	bl	800446c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004120:	46c0      	nop			@ (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	20000134 	.word	0x20000134
 800412c:	40004400 	.word	0x40004400

08004130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b08b      	sub	sp, #44	@ 0x2c
 8004134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004136:	2414      	movs	r4, #20
 8004138:	193b      	adds	r3, r7, r4
 800413a:	0018      	movs	r0, r3
 800413c:	2314      	movs	r3, #20
 800413e:	001a      	movs	r2, r3
 8004140:	2100      	movs	r1, #0
 8004142:	f003 fb9b 	bl	800787c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004146:	4b33      	ldr	r3, [pc, #204]	@ (8004214 <MX_GPIO_Init+0xe4>)
 8004148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800414a:	4b32      	ldr	r3, [pc, #200]	@ (8004214 <MX_GPIO_Init+0xe4>)
 800414c:	2104      	movs	r1, #4
 800414e:	430a      	orrs	r2, r1
 8004150:	635a      	str	r2, [r3, #52]	@ 0x34
 8004152:	4b30      	ldr	r3, [pc, #192]	@ (8004214 <MX_GPIO_Init+0xe4>)
 8004154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004156:	2204      	movs	r2, #4
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800415e:	4b2d      	ldr	r3, [pc, #180]	@ (8004214 <MX_GPIO_Init+0xe4>)
 8004160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004162:	4b2c      	ldr	r3, [pc, #176]	@ (8004214 <MX_GPIO_Init+0xe4>)
 8004164:	2120      	movs	r1, #32
 8004166:	430a      	orrs	r2, r1
 8004168:	635a      	str	r2, [r3, #52]	@ 0x34
 800416a:	4b2a      	ldr	r3, [pc, #168]	@ (8004214 <MX_GPIO_Init+0xe4>)
 800416c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416e:	2220      	movs	r2, #32
 8004170:	4013      	ands	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004176:	4b27      	ldr	r3, [pc, #156]	@ (8004214 <MX_GPIO_Init+0xe4>)
 8004178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800417a:	4b26      	ldr	r3, [pc, #152]	@ (8004214 <MX_GPIO_Init+0xe4>)
 800417c:	2101      	movs	r1, #1
 800417e:	430a      	orrs	r2, r1
 8004180:	635a      	str	r2, [r3, #52]	@ 0x34
 8004182:	4b24      	ldr	r3, [pc, #144]	@ (8004214 <MX_GPIO_Init+0xe4>)
 8004184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004186:	2201      	movs	r2, #1
 8004188:	4013      	ands	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800418e:	4b21      	ldr	r3, [pc, #132]	@ (8004214 <MX_GPIO_Init+0xe4>)
 8004190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004192:	4b20      	ldr	r3, [pc, #128]	@ (8004214 <MX_GPIO_Init+0xe4>)
 8004194:	2102      	movs	r1, #2
 8004196:	430a      	orrs	r2, r1
 8004198:	635a      	str	r2, [r3, #52]	@ 0x34
 800419a:	4b1e      	ldr	r3, [pc, #120]	@ (8004214 <MX_GPIO_Init+0xe4>)
 800419c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419e:	2202      	movs	r2, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	607b      	str	r3, [r7, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80041a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004218 <MX_GPIO_Init+0xe8>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	2101      	movs	r1, #1
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 fdd5 	bl	8004d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80041b2:	23a0      	movs	r3, #160	@ 0xa0
 80041b4:	05db      	lsls	r3, r3, #23
 80041b6:	2200      	movs	r2, #0
 80041b8:	2101      	movs	r1, #1
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 fdce 	bl	8004d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c6:	193b      	adds	r3, r7, r4
 80041c8:	2201      	movs	r2, #1
 80041ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	193b      	adds	r3, r7, r4
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d2:	193b      	adds	r3, r7, r4
 80041d4:	2200      	movs	r2, #0
 80041d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041d8:	193b      	adds	r3, r7, r4
 80041da:	4a0f      	ldr	r2, [pc, #60]	@ (8004218 <MX_GPIO_Init+0xe8>)
 80041dc:	0019      	movs	r1, r3
 80041de:	0010      	movs	r0, r2
 80041e0:	f000 fc58 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041e4:	0021      	movs	r1, r4
 80041e6:	187b      	adds	r3, r7, r1
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	2201      	movs	r2, #1
 80041f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	2200      	movs	r2, #0
 80041f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	2200      	movs	r2, #0
 80041fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fe:	187a      	adds	r2, r7, r1
 8004200:	23a0      	movs	r3, #160	@ 0xa0
 8004202:	05db      	lsls	r3, r3, #23
 8004204:	0011      	movs	r1, r2
 8004206:	0018      	movs	r0, r3
 8004208:	f000 fc44 	bl	8004a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b00b      	add	sp, #44	@ 0x2c
 8004212:	bd90      	pop	{r4, r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	50000800 	.word	0x50000800

0800421c <user_i2c_read>:

/* USER CODE BEGIN 4 */
int8_t user_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 800421c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800421e:	b09b      	sub	sp, #108	@ 0x6c
 8004220:	af04      	add	r7, sp, #16
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	240f      	movs	r4, #15
 800422a:	193b      	adds	r3, r7, r4
 800422c:	1c02      	adds	r2, r0, #0
 800422e:	701a      	strb	r2, [r3, #0]
    uint8_t dev_id = *(uint8_t*)intf_ptr;
 8004230:	2157      	movs	r1, #87	@ 0x57
 8004232:	187b      	adds	r3, r7, r1
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	7812      	ldrb	r2, [r2, #0]
 8004238:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, dev_id << 1, reg_addr,
 800423a:	187b      	adds	r3, r7, r1
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	18db      	adds	r3, r3, r3
 8004242:	b299      	uxth	r1, r3
 8004244:	193b      	adds	r3, r7, r4
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b29d      	uxth	r5, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	b29b      	uxth	r3, r3
 800424e:	2656      	movs	r6, #86	@ 0x56
 8004250:	19bc      	adds	r4, r7, r6
 8004252:	4819      	ldr	r0, [pc, #100]	@ (80042b8 <user_i2c_read+0x9c>)
 8004254:	2201      	movs	r2, #1
 8004256:	4252      	negs	r2, r2
 8004258:	9202      	str	r2, [sp, #8]
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	2301      	movs	r3, #1
 8004262:	002a      	movs	r2, r5
 8004264:	f000 ff86 	bl	8005174 <HAL_I2C_Mem_Read>
 8004268:	0003      	movs	r3, r0
 800426a:	7023      	strb	r3, [r4, #0]
                                                I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY);
    if (status != HAL_OK) {
 800426c:	19bb      	adds	r3, r7, r6
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <user_i2c_read+0x80>
        char debug_msg[64];
        snprintf(debug_msg, sizeof(debug_msg), "I2C Read failed: %d\r\n", status);
 8004274:	19bb      	adds	r3, r7, r6
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	4a10      	ldr	r2, [pc, #64]	@ (80042bc <user_i2c_read+0xa0>)
 800427a:	2414      	movs	r4, #20
 800427c:	1938      	adds	r0, r7, r4
 800427e:	2140      	movs	r1, #64	@ 0x40
 8004280:	f003 fac6 	bl	8007810 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8004284:	193b      	adds	r3, r7, r4
 8004286:	0018      	movs	r0, r3
 8004288:	f7fb ff3c 	bl	8000104 <strlen>
 800428c:	0003      	movs	r3, r0
 800428e:	b29a      	uxth	r2, r3
 8004290:	2301      	movs	r3, #1
 8004292:	425b      	negs	r3, r3
 8004294:	1939      	adds	r1, r7, r4
 8004296:	480a      	ldr	r0, [pc, #40]	@ (80042c0 <user_i2c_read+0xa4>)
 8004298:	f002 fc0a 	bl	8006ab0 <HAL_UART_Transmit>
    }
    return (status == HAL_OK) ? 0 : -1;
 800429c:	2356      	movs	r3, #86	@ 0x56
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <user_i2c_read+0x8e>
 80042a6:	2300      	movs	r3, #0
 80042a8:	e001      	b.n	80042ae <user_i2c_read+0x92>
 80042aa:	2301      	movs	r3, #1
 80042ac:	425b      	negs	r3, r3
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b017      	add	sp, #92	@ 0x5c
 80042b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	2000007c 	.word	0x2000007c
 80042bc:	0800835c 	.word	0x0800835c
 80042c0:	20000134 	.word	0x20000134

080042c4 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b09b      	sub	sp, #108	@ 0x6c
 80042c8:	af04      	add	r7, sp, #16
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	240f      	movs	r4, #15
 80042d2:	193b      	adds	r3, r7, r4
 80042d4:	1c02      	adds	r2, r0, #0
 80042d6:	701a      	strb	r2, [r3, #0]
    uint8_t dev_id = *(uint8_t*)intf_ptr;
 80042d8:	2157      	movs	r1, #87	@ 0x57
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, dev_id << 1, reg_addr,
 80042e2:	187b      	adds	r3, r7, r1
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	18db      	adds	r3, r3, r3
 80042ea:	b299      	uxth	r1, r3
 80042ec:	193b      	adds	r3, r7, r4
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b29d      	uxth	r5, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2656      	movs	r6, #86	@ 0x56
 80042f8:	19bc      	adds	r4, r7, r6
 80042fa:	4819      	ldr	r0, [pc, #100]	@ (8004360 <user_i2c_write+0x9c>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	4252      	negs	r2, r2
 8004300:	9202      	str	r2, [sp, #8]
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2301      	movs	r3, #1
 800430a:	002a      	movs	r2, r5
 800430c:	f000 fe04 	bl	8004f18 <HAL_I2C_Mem_Write>
 8004310:	0003      	movs	r3, r0
 8004312:	7023      	strb	r3, [r4, #0]
                                                 I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY);
    if (status != HAL_OK) {
 8004314:	19bb      	adds	r3, r7, r6
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <user_i2c_write+0x80>
        char debug_msg[64];
        snprintf(debug_msg, sizeof(debug_msg), "I2C Write failed: %d\r\n", status);
 800431c:	19bb      	adds	r3, r7, r6
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	4a10      	ldr	r2, [pc, #64]	@ (8004364 <user_i2c_write+0xa0>)
 8004322:	2414      	movs	r4, #20
 8004324:	1938      	adds	r0, r7, r4
 8004326:	2140      	movs	r1, #64	@ 0x40
 8004328:	f003 fa72 	bl	8007810 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 800432c:	193b      	adds	r3, r7, r4
 800432e:	0018      	movs	r0, r3
 8004330:	f7fb fee8 	bl	8000104 <strlen>
 8004334:	0003      	movs	r3, r0
 8004336:	b29a      	uxth	r2, r3
 8004338:	2301      	movs	r3, #1
 800433a:	425b      	negs	r3, r3
 800433c:	1939      	adds	r1, r7, r4
 800433e:	480a      	ldr	r0, [pc, #40]	@ (8004368 <user_i2c_write+0xa4>)
 8004340:	f002 fbb6 	bl	8006ab0 <HAL_UART_Transmit>
    }
    return (status == HAL_OK) ? 0 : -1;
 8004344:	2356      	movs	r3, #86	@ 0x56
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <user_i2c_write+0x8e>
 800434e:	2300      	movs	r3, #0
 8004350:	e001      	b.n	8004356 <user_i2c_write+0x92>
 8004352:	2301      	movs	r3, #1
 8004354:	425b      	negs	r3, r3
}
 8004356:	0018      	movs	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	b017      	add	sp, #92	@ 0x5c
 800435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	2000007c 	.word	0x2000007c
 8004364:	08008374 	.word	0x08008374
 8004368:	20000134 	.word	0x20000134

0800436c <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr) {
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
    HAL_Delay((period + 999) / 1000); // convert µs to ms
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a07      	ldr	r2, [pc, #28]	@ (8004398 <user_delay_us+0x2c>)
 800437a:	4694      	mov	ip, r2
 800437c:	4463      	add	r3, ip
 800437e:	22fa      	movs	r2, #250	@ 0xfa
 8004380:	0091      	lsls	r1, r2, #2
 8004382:	0018      	movs	r0, r3
 8004384:	f7fb fed0 	bl	8000128 <__udivsi3>
 8004388:	0003      	movs	r3, r0
 800438a:	0018      	movs	r0, r3
 800438c:	f000 faaa 	bl	80048e4 <HAL_Delay>
}
 8004390:	46c0      	nop			@ (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}
 8004398:	000003e7 	.word	0x000003e7

0800439c <ReadAndPrintBME680Data>:

void ReadAndPrintBME680Data(void) {
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	b0ab      	sub	sp, #172	@ 0xac
 80043a0:	af06      	add	r7, sp, #24
    if (bme68x_set_op_mode(BME68X_FORCED_MODE, &gas_sensor) != BME68X_OK)
 80043a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004454 <ReadAndPrintBME680Data+0xb8>)
 80043a4:	0019      	movs	r1, r3
 80043a6:	2001      	movs	r0, #1
 80043a8:	f7fd fd02 	bl	8001db0 <bme68x_set_op_mode>
 80043ac:	1e03      	subs	r3, r0, #0
 80043ae:	d14d      	bne.n	800444c <ReadAndPrintBME680Data+0xb0>
        return;

    gas_sensor.delay_us(100000, gas_sensor.intf_ptr);
 80043b0:	4b28      	ldr	r3, [pc, #160]	@ (8004454 <ReadAndPrintBME680Data+0xb8>)
 80043b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043b4:	4b27      	ldr	r3, [pc, #156]	@ (8004454 <ReadAndPrintBME680Data+0xb8>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4827      	ldr	r0, [pc, #156]	@ (8004458 <ReadAndPrintBME680Data+0xbc>)
 80043ba:	0019      	movs	r1, r3
 80043bc:	4790      	blx	r2

    uint8_t n_fields;
    if (bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &gas_sensor) == BME68X_OK && n_fields)
 80043be:	4b25      	ldr	r3, [pc, #148]	@ (8004454 <ReadAndPrintBME680Data+0xb8>)
 80043c0:	2487      	movs	r4, #135	@ 0x87
 80043c2:	2508      	movs	r5, #8
 80043c4:	1962      	adds	r2, r4, r5
 80043c6:	19d2      	adds	r2, r2, r7
 80043c8:	4924      	ldr	r1, [pc, #144]	@ (800445c <ReadAndPrintBME680Data+0xc0>)
 80043ca:	2001      	movs	r0, #1
 80043cc:	f7fd fd97 	bl	8001efe <bme68x_get_data>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d13c      	bne.n	800444e <ReadAndPrintBME680Data+0xb2>
 80043d4:	1963      	adds	r3, r4, r5
 80043d6:	19db      	adds	r3, r3, r7
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d037      	beq.n	800444e <ReadAndPrintBME680Data+0xb2>
    {
        char msg[128];
        snprintf(msg, sizeof(msg),
                 "Temp: %.2f °C, Pressure: %.2f hPa, Humidity: %.2f %%\r\n",
                 data.temperature, data.pressure / 100.0f, data.humidity);
 80043de:	4b1f      	ldr	r3, [pc, #124]	@ (800445c <ReadAndPrintBME680Data+0xc0>)
 80043e0:	689b      	ldr	r3, [r3, #8]
        snprintf(msg, sizeof(msg),
 80043e2:	1c18      	adds	r0, r3, #0
 80043e4:	f7fd f988 	bl	80016f8 <__aeabi_f2d>
 80043e8:	0004      	movs	r4, r0
 80043ea:	000d      	movs	r5, r1
                 data.temperature, data.pressure / 100.0f, data.humidity);
 80043ec:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <ReadAndPrintBME680Data+0xc0>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	491b      	ldr	r1, [pc, #108]	@ (8004460 <ReadAndPrintBME680Data+0xc4>)
 80043f2:	1c18      	adds	r0, r3, #0
 80043f4:	f7fc fb3e 	bl	8000a74 <__aeabi_fdiv>
 80043f8:	1c03      	adds	r3, r0, #0
        snprintf(msg, sizeof(msg),
 80043fa:	1c18      	adds	r0, r3, #0
 80043fc:	f7fd f97c 	bl	80016f8 <__aeabi_f2d>
 8004400:	6038      	str	r0, [r7, #0]
 8004402:	6079      	str	r1, [r7, #4]
                 data.temperature, data.pressure / 100.0f, data.humidity);
 8004404:	4b15      	ldr	r3, [pc, #84]	@ (800445c <ReadAndPrintBME680Data+0xc0>)
 8004406:	691b      	ldr	r3, [r3, #16]
        snprintf(msg, sizeof(msg),
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fd f975 	bl	80016f8 <__aeabi_f2d>
 800440e:	0002      	movs	r2, r0
 8004410:	000b      	movs	r3, r1
 8004412:	4914      	ldr	r1, [pc, #80]	@ (8004464 <ReadAndPrintBME680Data+0xc8>)
 8004414:	260c      	movs	r6, #12
 8004416:	19b8      	adds	r0, r7, r6
 8004418:	9204      	str	r2, [sp, #16]
 800441a:	9305      	str	r3, [sp, #20]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	9202      	str	r2, [sp, #8]
 8004422:	9303      	str	r3, [sp, #12]
 8004424:	9400      	str	r4, [sp, #0]
 8004426:	9501      	str	r5, [sp, #4]
 8004428:	000a      	movs	r2, r1
 800442a:	2180      	movs	r1, #128	@ 0x80
 800442c:	f003 f9f0 	bl	8007810 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004430:	0034      	movs	r4, r6
 8004432:	193b      	adds	r3, r7, r4
 8004434:	0018      	movs	r0, r3
 8004436:	f7fb fe65 	bl	8000104 <strlen>
 800443a:	0003      	movs	r3, r0
 800443c:	b29a      	uxth	r2, r3
 800443e:	2301      	movs	r3, #1
 8004440:	425b      	negs	r3, r3
 8004442:	1939      	adds	r1, r7, r4
 8004444:	4808      	ldr	r0, [pc, #32]	@ (8004468 <ReadAndPrintBME680Data+0xcc>)
 8004446:	f002 fb33 	bl	8006ab0 <HAL_UART_Transmit>
 800444a:	e000      	b.n	800444e <ReadAndPrintBME680Data+0xb2>
        return;
 800444c:	46c0      	nop			@ (mov r8, r8)
    }
}
 800444e:	46bd      	mov	sp, r7
 8004450:	b025      	add	sp, #148	@ 0x94
 8004452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004454:	200001c8 	.word	0x200001c8
 8004458:	000186a0 	.word	0x000186a0
 800445c:	20000218 	.word	0x20000218
 8004460:	42c80000 	.word	0x42c80000
 8004464:	0800838c 	.word	0x0800838c
 8004468:	20000134 	.word	0x20000134

0800446c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004470:	b672      	cpsid	i
}
 8004472:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	e7fd      	b.n	8004474 <Error_Handler+0x8>

08004478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	4b0f      	ldr	r3, [pc, #60]	@ (80044bc <HAL_MspInit+0x44>)
 8004480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004482:	4b0e      	ldr	r3, [pc, #56]	@ (80044bc <HAL_MspInit+0x44>)
 8004484:	2101      	movs	r1, #1
 8004486:	430a      	orrs	r2, r1
 8004488:	641a      	str	r2, [r3, #64]	@ 0x40
 800448a:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <HAL_MspInit+0x44>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	2201      	movs	r2, #1
 8004490:	4013      	ands	r3, r2
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004496:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <HAL_MspInit+0x44>)
 8004498:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800449a:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <HAL_MspInit+0x44>)
 800449c:	2180      	movs	r1, #128	@ 0x80
 800449e:	0549      	lsls	r1, r1, #21
 80044a0:	430a      	orrs	r2, r1
 80044a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044a4:	4b05      	ldr	r3, [pc, #20]	@ (80044bc <HAL_MspInit+0x44>)
 80044a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044a8:	2380      	movs	r3, #128	@ 0x80
 80044aa:	055b      	lsls	r3, r3, #21
 80044ac:	4013      	ands	r3, r2
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b002      	add	sp, #8
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	40021000 	.word	0x40021000

080044c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b097      	sub	sp, #92	@ 0x5c
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c8:	2344      	movs	r3, #68	@ 0x44
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	0018      	movs	r0, r3
 80044ce:	2314      	movs	r3, #20
 80044d0:	001a      	movs	r2, r3
 80044d2:	2100      	movs	r1, #0
 80044d4:	f003 f9d2 	bl	800787c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044d8:	2410      	movs	r4, #16
 80044da:	193b      	adds	r3, r7, r4
 80044dc:	0018      	movs	r0, r3
 80044de:	2334      	movs	r3, #52	@ 0x34
 80044e0:	001a      	movs	r2, r3
 80044e2:	2100      	movs	r1, #0
 80044e4:	f003 f9ca 	bl	800787c <memset>
  if(hi2c->Instance==I2C1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <HAL_I2C_MspInit+0xb8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d13e      	bne.n	8004570 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80044f2:	193b      	adds	r3, r7, r4
 80044f4:	2220      	movs	r2, #32
 80044f6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80044f8:	193b      	adds	r3, r7, r4
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044fe:	193b      	adds	r3, r7, r4
 8004500:	0018      	movs	r0, r3
 8004502:	f002 f80f 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8004506:	1e03      	subs	r3, r0, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800450a:	f7ff ffaf 	bl	800446c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800450e:	4b1b      	ldr	r3, [pc, #108]	@ (800457c <HAL_I2C_MspInit+0xbc>)
 8004510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004512:	4b1a      	ldr	r3, [pc, #104]	@ (800457c <HAL_I2C_MspInit+0xbc>)
 8004514:	2102      	movs	r1, #2
 8004516:	430a      	orrs	r2, r1
 8004518:	635a      	str	r2, [r3, #52]	@ 0x34
 800451a:	4b18      	ldr	r3, [pc, #96]	@ (800457c <HAL_I2C_MspInit+0xbc>)
 800451c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451e:	2202      	movs	r2, #2
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004526:	2144      	movs	r1, #68	@ 0x44
 8004528:	187b      	adds	r3, r7, r1
 800452a:	22c0      	movs	r2, #192	@ 0xc0
 800452c:	0092      	lsls	r2, r2, #2
 800452e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004530:	187b      	adds	r3, r7, r1
 8004532:	2212      	movs	r2, #18
 8004534:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004536:	187b      	adds	r3, r7, r1
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453c:	187b      	adds	r3, r7, r1
 800453e:	2200      	movs	r2, #0
 8004540:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004542:	187b      	adds	r3, r7, r1
 8004544:	2206      	movs	r2, #6
 8004546:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004548:	187b      	adds	r3, r7, r1
 800454a:	4a0d      	ldr	r2, [pc, #52]	@ (8004580 <HAL_I2C_MspInit+0xc0>)
 800454c:	0019      	movs	r1, r3
 800454e:	0010      	movs	r0, r2
 8004550:	f000 faa0 	bl	8004a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004554:	4b09      	ldr	r3, [pc, #36]	@ (800457c <HAL_I2C_MspInit+0xbc>)
 8004556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004558:	4b08      	ldr	r3, [pc, #32]	@ (800457c <HAL_I2C_MspInit+0xbc>)
 800455a:	2180      	movs	r1, #128	@ 0x80
 800455c:	0389      	lsls	r1, r1, #14
 800455e:	430a      	orrs	r2, r1
 8004560:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <HAL_I2C_MspInit+0xbc>)
 8004564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	039b      	lsls	r3, r3, #14
 800456a:	4013      	ands	r3, r2
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b017      	add	sp, #92	@ 0x5c
 8004576:	bd90      	pop	{r4, r7, pc}
 8004578:	40005400 	.word	0x40005400
 800457c:	40021000 	.word	0x40021000
 8004580:	50000400 	.word	0x50000400

08004584 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b08b      	sub	sp, #44	@ 0x2c
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800458c:	2414      	movs	r4, #20
 800458e:	193b      	adds	r3, r7, r4
 8004590:	0018      	movs	r0, r3
 8004592:	2314      	movs	r3, #20
 8004594:	001a      	movs	r2, r3
 8004596:	2100      	movs	r1, #0
 8004598:	f003 f970 	bl	800787c <memset>
  if(hspi->Instance==SPI1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <HAL_SPI_MspInit+0x8c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d130      	bne.n	8004608 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004614 <HAL_SPI_MspInit+0x90>)
 80045a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004614 <HAL_SPI_MspInit+0x90>)
 80045ac:	2180      	movs	r1, #128	@ 0x80
 80045ae:	0149      	lsls	r1, r1, #5
 80045b0:	430a      	orrs	r2, r1
 80045b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80045b4:	4b17      	ldr	r3, [pc, #92]	@ (8004614 <HAL_SPI_MspInit+0x90>)
 80045b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045b8:	2380      	movs	r3, #128	@ 0x80
 80045ba:	015b      	lsls	r3, r3, #5
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c2:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <HAL_SPI_MspInit+0x90>)
 80045c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045c6:	4b13      	ldr	r3, [pc, #76]	@ (8004614 <HAL_SPI_MspInit+0x90>)
 80045c8:	2101      	movs	r1, #1
 80045ca:	430a      	orrs	r2, r1
 80045cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80045ce:	4b11      	ldr	r3, [pc, #68]	@ (8004614 <HAL_SPI_MspInit+0x90>)
 80045d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d2:	2201      	movs	r2, #1
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = lora_nss_Pin|GPIO_PIN_5|miso_pa6_Pin|mosi_pa7_Pin;
 80045da:	0021      	movs	r1, r4
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	22f0      	movs	r2, #240	@ 0xf0
 80045e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	187b      	adds	r3, r7, r1
 80045e4:	2202      	movs	r2, #2
 80045e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	2200      	movs	r2, #0
 80045f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fa:	187a      	adds	r2, r7, r1
 80045fc:	23a0      	movs	r3, #160	@ 0xa0
 80045fe:	05db      	lsls	r3, r3, #23
 8004600:	0011      	movs	r1, r2
 8004602:	0018      	movs	r0, r3
 8004604:	f000 fa46 	bl	8004a94 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004608:	46c0      	nop			@ (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	b00b      	add	sp, #44	@ 0x2c
 800460e:	bd90      	pop	{r4, r7, pc}
 8004610:	40013000 	.word	0x40013000
 8004614:	40021000 	.word	0x40021000

08004618 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004618:	b590      	push	{r4, r7, lr}
 800461a:	b097      	sub	sp, #92	@ 0x5c
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	2344      	movs	r3, #68	@ 0x44
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	0018      	movs	r0, r3
 8004626:	2314      	movs	r3, #20
 8004628:	001a      	movs	r2, r3
 800462a:	2100      	movs	r1, #0
 800462c:	f003 f926 	bl	800787c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004630:	2410      	movs	r4, #16
 8004632:	193b      	adds	r3, r7, r4
 8004634:	0018      	movs	r0, r3
 8004636:	2334      	movs	r3, #52	@ 0x34
 8004638:	001a      	movs	r2, r3
 800463a:	2100      	movs	r1, #0
 800463c:	f003 f91e 	bl	800787c <memset>
  if(huart->Instance==USART2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a22      	ldr	r2, [pc, #136]	@ (80046d0 <HAL_UART_MspInit+0xb8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d13e      	bne.n	80046c8 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800464a:	193b      	adds	r3, r7, r4
 800464c:	2202      	movs	r2, #2
 800464e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004650:	193b      	adds	r3, r7, r4
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004656:	193b      	adds	r3, r7, r4
 8004658:	0018      	movs	r0, r3
 800465a:	f001 ff63 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 800465e:	1e03      	subs	r3, r0, #0
 8004660:	d001      	beq.n	8004666 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004662:	f7ff ff03 	bl	800446c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004666:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <HAL_UART_MspInit+0xbc>)
 8004668:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800466a:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <HAL_UART_MspInit+0xbc>)
 800466c:	2180      	movs	r1, #128	@ 0x80
 800466e:	0289      	lsls	r1, r1, #10
 8004670:	430a      	orrs	r2, r1
 8004672:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004674:	4b17      	ldr	r3, [pc, #92]	@ (80046d4 <HAL_UART_MspInit+0xbc>)
 8004676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	029b      	lsls	r3, r3, #10
 800467c:	4013      	ands	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004682:	4b14      	ldr	r3, [pc, #80]	@ (80046d4 <HAL_UART_MspInit+0xbc>)
 8004684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004686:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <HAL_UART_MspInit+0xbc>)
 8004688:	2101      	movs	r1, #1
 800468a:	430a      	orrs	r2, r1
 800468c:	635a      	str	r2, [r3, #52]	@ 0x34
 800468e:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <HAL_UART_MspInit+0xbc>)
 8004690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004692:	2201      	movs	r2, #1
 8004694:	4013      	ands	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800469a:	2144      	movs	r1, #68	@ 0x44
 800469c:	187b      	adds	r3, r7, r1
 800469e:	220c      	movs	r2, #12
 80046a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a2:	187b      	adds	r3, r7, r1
 80046a4:	2202      	movs	r2, #2
 80046a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	2201      	movs	r2, #1
 80046ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ae:	187b      	adds	r3, r7, r1
 80046b0:	2200      	movs	r2, #0
 80046b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	2201      	movs	r2, #1
 80046b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ba:	187a      	adds	r2, r7, r1
 80046bc:	23a0      	movs	r3, #160	@ 0xa0
 80046be:	05db      	lsls	r3, r3, #23
 80046c0:	0011      	movs	r1, r2
 80046c2:	0018      	movs	r0, r3
 80046c4:	f000 f9e6 	bl	8004a94 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80046c8:	46c0      	nop			@ (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b017      	add	sp, #92	@ 0x5c
 80046ce:	bd90      	pop	{r4, r7, pc}
 80046d0:	40004400 	.word	0x40004400
 80046d4:	40021000 	.word	0x40021000

080046d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	e7fd      	b.n	80046dc <NMI_Handler+0x4>

080046e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046e4:	46c0      	nop			@ (mov r8, r8)
 80046e6:	e7fd      	b.n	80046e4 <HardFault_Handler+0x4>

080046e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80046ec:	46c0      	nop			@ (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004700:	f000 f8d4 	bl	80048ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004704:	46c0      	nop			@ (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004714:	4a14      	ldr	r2, [pc, #80]	@ (8004768 <_sbrk+0x5c>)
 8004716:	4b15      	ldr	r3, [pc, #84]	@ (800476c <_sbrk+0x60>)
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004720:	4b13      	ldr	r3, [pc, #76]	@ (8004770 <_sbrk+0x64>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004728:	4b11      	ldr	r3, [pc, #68]	@ (8004770 <_sbrk+0x64>)
 800472a:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <_sbrk+0x68>)
 800472c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800472e:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <_sbrk+0x64>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	18d3      	adds	r3, r2, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	429a      	cmp	r2, r3
 800473a:	d207      	bcs.n	800474c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800473c:	f003 f8a6 	bl	800788c <__errno>
 8004740:	0003      	movs	r3, r0
 8004742:	220c      	movs	r2, #12
 8004744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004746:	2301      	movs	r3, #1
 8004748:	425b      	negs	r3, r3
 800474a:	e009      	b.n	8004760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800474c:	4b08      	ldr	r3, [pc, #32]	@ (8004770 <_sbrk+0x64>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004752:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <_sbrk+0x64>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	18d2      	adds	r2, r2, r3
 800475a:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <_sbrk+0x64>)
 800475c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800475e:	68fb      	ldr	r3, [r7, #12]
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	b006      	add	sp, #24
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20009000 	.word	0x20009000
 800476c:	00000400 	.word	0x00000400
 8004770:	20000230 	.word	0x20000230
 8004774:	20000380 	.word	0x20000380

08004778 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004784:	480d      	ldr	r0, [pc, #52]	@ (80047bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004786:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004788:	f7ff fff6 	bl	8004778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800478c:	480c      	ldr	r0, [pc, #48]	@ (80047c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800478e:	490d      	ldr	r1, [pc, #52]	@ (80047c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004790:	4a0d      	ldr	r2, [pc, #52]	@ (80047c8 <LoopForever+0xe>)
  movs r3, #0
 8004792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004794:	e002      	b.n	800479c <LoopCopyDataInit>

08004796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800479a:	3304      	adds	r3, #4

0800479c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800479c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800479e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047a0:	d3f9      	bcc.n	8004796 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047a2:	4a0a      	ldr	r2, [pc, #40]	@ (80047cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80047a4:	4c0a      	ldr	r4, [pc, #40]	@ (80047d0 <LoopForever+0x16>)
  movs r3, #0
 80047a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047a8:	e001      	b.n	80047ae <LoopFillZerobss>

080047aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047ac:	3204      	adds	r2, #4

080047ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047b0:	d3fb      	bcc.n	80047aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80047b2:	f003 f871 	bl	8007898 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80047b6:	f7ff fab7 	bl	8003d28 <main>

080047ba <LoopForever>:

LoopForever:
  b LoopForever
 80047ba:	e7fe      	b.n	80047ba <LoopForever>
  ldr   r0, =_estack
 80047bc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80047c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047c4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80047c8:	0800850c 	.word	0x0800850c
  ldr r2, =_sbss
 80047cc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80047d0:	20000380 	.word	0x20000380

080047d4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047d4:	e7fe      	b.n	80047d4 <ADC1_COMP_IRQHandler>
	...

080047d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047de:	1dfb      	adds	r3, r7, #7
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <HAL_Init+0x3c>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004814 <HAL_Init+0x3c>)
 80047ea:	2180      	movs	r1, #128	@ 0x80
 80047ec:	0049      	lsls	r1, r1, #1
 80047ee:	430a      	orrs	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047f2:	2000      	movs	r0, #0
 80047f4:	f000 f810 	bl	8004818 <HAL_InitTick>
 80047f8:	1e03      	subs	r3, r0, #0
 80047fa:	d003      	beq.n	8004804 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80047fc:	1dfb      	adds	r3, r7, #7
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e001      	b.n	8004808 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004804:	f7ff fe38 	bl	8004478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004808:	1dfb      	adds	r3, r7, #7
 800480a:	781b      	ldrb	r3, [r3, #0]
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40022000 	.word	0x40022000

08004818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004820:	230f      	movs	r3, #15
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004828:	4b1d      	ldr	r3, [pc, #116]	@ (80048a0 <HAL_InitTick+0x88>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02b      	beq.n	8004888 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004830:	4b1c      	ldr	r3, [pc, #112]	@ (80048a4 <HAL_InitTick+0x8c>)
 8004832:	681c      	ldr	r4, [r3, #0]
 8004834:	4b1a      	ldr	r3, [pc, #104]	@ (80048a0 <HAL_InitTick+0x88>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	0019      	movs	r1, r3
 800483a:	23fa      	movs	r3, #250	@ 0xfa
 800483c:	0098      	lsls	r0, r3, #2
 800483e:	f7fb fc73 	bl	8000128 <__udivsi3>
 8004842:	0003      	movs	r3, r0
 8004844:	0019      	movs	r1, r3
 8004846:	0020      	movs	r0, r4
 8004848:	f7fb fc6e 	bl	8000128 <__udivsi3>
 800484c:	0003      	movs	r3, r0
 800484e:	0018      	movs	r0, r3
 8004850:	f000 f913 	bl	8004a7a <HAL_SYSTICK_Config>
 8004854:	1e03      	subs	r3, r0, #0
 8004856:	d112      	bne.n	800487e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b03      	cmp	r3, #3
 800485c:	d80a      	bhi.n	8004874 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	2301      	movs	r3, #1
 8004862:	425b      	negs	r3, r3
 8004864:	2200      	movs	r2, #0
 8004866:	0018      	movs	r0, r3
 8004868:	f000 f8f2 	bl	8004a50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800486c:	4b0e      	ldr	r3, [pc, #56]	@ (80048a8 <HAL_InitTick+0x90>)
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e00d      	b.n	8004890 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004874:	230f      	movs	r3, #15
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e008      	b.n	8004890 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800487e:	230f      	movs	r3, #15
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	e003      	b.n	8004890 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004888:	230f      	movs	r3, #15
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004890:	230f      	movs	r3, #15
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	781b      	ldrb	r3, [r3, #0]
}
 8004896:	0018      	movs	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	b005      	add	sp, #20
 800489c:	bd90      	pop	{r4, r7, pc}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	2000000c 	.word	0x2000000c
 80048a4:	20000004 	.word	0x20000004
 80048a8:	20000008 	.word	0x20000008

080048ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <HAL_IncTick+0x1c>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	001a      	movs	r2, r3
 80048b6:	4b05      	ldr	r3, [pc, #20]	@ (80048cc <HAL_IncTick+0x20>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	18d2      	adds	r2, r2, r3
 80048bc:	4b03      	ldr	r3, [pc, #12]	@ (80048cc <HAL_IncTick+0x20>)
 80048be:	601a      	str	r2, [r3, #0]
}
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	2000000c 	.word	0x2000000c
 80048cc:	20000234 	.word	0x20000234

080048d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  return uwTick;
 80048d4:	4b02      	ldr	r3, [pc, #8]	@ (80048e0 <HAL_GetTick+0x10>)
 80048d6:	681b      	ldr	r3, [r3, #0]
}
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	20000234 	.word	0x20000234

080048e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048ec:	f7ff fff0 	bl	80048d0 <HAL_GetTick>
 80048f0:	0003      	movs	r3, r0
 80048f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3301      	adds	r3, #1
 80048fc:	d005      	beq.n	800490a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <HAL_Delay+0x44>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	001a      	movs	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	189b      	adds	r3, r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	f7ff ffe0 	bl	80048d0 <HAL_GetTick>
 8004910:	0002      	movs	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d8f7      	bhi.n	800490c <HAL_Delay+0x28>
  {
  }
}
 800491c:	46c0      	nop			@ (mov r8, r8)
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	46bd      	mov	sp, r7
 8004922:	b004      	add	sp, #16
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	2000000c 	.word	0x2000000c

0800492c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	0002      	movs	r2, r0
 8004934:	6039      	str	r1, [r7, #0]
 8004936:	1dfb      	adds	r3, r7, #7
 8004938:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800493a:	1dfb      	adds	r3, r7, #7
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004940:	d828      	bhi.n	8004994 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004942:	4a2f      	ldr	r2, [pc, #188]	@ (8004a00 <__NVIC_SetPriority+0xd4>)
 8004944:	1dfb      	adds	r3, r7, #7
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	b25b      	sxtb	r3, r3
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	33c0      	adds	r3, #192	@ 0xc0
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	589b      	ldr	r3, [r3, r2]
 8004952:	1dfa      	adds	r2, r7, #7
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	0011      	movs	r1, r2
 8004958:	2203      	movs	r2, #3
 800495a:	400a      	ands	r2, r1
 800495c:	00d2      	lsls	r2, r2, #3
 800495e:	21ff      	movs	r1, #255	@ 0xff
 8004960:	4091      	lsls	r1, r2
 8004962:	000a      	movs	r2, r1
 8004964:	43d2      	mvns	r2, r2
 8004966:	401a      	ands	r2, r3
 8004968:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	22ff      	movs	r2, #255	@ 0xff
 8004970:	401a      	ands	r2, r3
 8004972:	1dfb      	adds	r3, r7, #7
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	0018      	movs	r0, r3
 8004978:	2303      	movs	r3, #3
 800497a:	4003      	ands	r3, r0
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004980:	481f      	ldr	r0, [pc, #124]	@ (8004a00 <__NVIC_SetPriority+0xd4>)
 8004982:	1dfb      	adds	r3, r7, #7
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b25b      	sxtb	r3, r3
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	430a      	orrs	r2, r1
 800498c:	33c0      	adds	r3, #192	@ 0xc0
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004992:	e031      	b.n	80049f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004994:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <__NVIC_SetPriority+0xd8>)
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	0019      	movs	r1, r3
 800499c:	230f      	movs	r3, #15
 800499e:	400b      	ands	r3, r1
 80049a0:	3b08      	subs	r3, #8
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3306      	adds	r3, #6
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	18d3      	adds	r3, r2, r3
 80049aa:	3304      	adds	r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1dfa      	adds	r2, r7, #7
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	0011      	movs	r1, r2
 80049b4:	2203      	movs	r2, #3
 80049b6:	400a      	ands	r2, r1
 80049b8:	00d2      	lsls	r2, r2, #3
 80049ba:	21ff      	movs	r1, #255	@ 0xff
 80049bc:	4091      	lsls	r1, r2
 80049be:	000a      	movs	r2, r1
 80049c0:	43d2      	mvns	r2, r2
 80049c2:	401a      	ands	r2, r3
 80049c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	019b      	lsls	r3, r3, #6
 80049ca:	22ff      	movs	r2, #255	@ 0xff
 80049cc:	401a      	ands	r2, r3
 80049ce:	1dfb      	adds	r3, r7, #7
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	0018      	movs	r0, r3
 80049d4:	2303      	movs	r3, #3
 80049d6:	4003      	ands	r3, r0
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049dc:	4809      	ldr	r0, [pc, #36]	@ (8004a04 <__NVIC_SetPriority+0xd8>)
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	001c      	movs	r4, r3
 80049e4:	230f      	movs	r3, #15
 80049e6:	4023      	ands	r3, r4
 80049e8:	3b08      	subs	r3, #8
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	430a      	orrs	r2, r1
 80049ee:	3306      	adds	r3, #6
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	18c3      	adds	r3, r0, r3
 80049f4:	3304      	adds	r3, #4
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b003      	add	sp, #12
 80049fe:	bd90      	pop	{r4, r7, pc}
 8004a00:	e000e100 	.word	0xe000e100
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	1e5a      	subs	r2, r3, #1
 8004a14:	2380      	movs	r3, #128	@ 0x80
 8004a16:	045b      	lsls	r3, r3, #17
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d301      	bcc.n	8004a20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e010      	b.n	8004a42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a20:	4b0a      	ldr	r3, [pc, #40]	@ (8004a4c <SysTick_Config+0x44>)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	3a01      	subs	r2, #1
 8004a26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a28:	2301      	movs	r3, #1
 8004a2a:	425b      	negs	r3, r3
 8004a2c:	2103      	movs	r1, #3
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f7ff ff7c 	bl	800492c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a34:	4b05      	ldr	r3, [pc, #20]	@ (8004a4c <SysTick_Config+0x44>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a3a:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <SysTick_Config+0x44>)
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b002      	add	sp, #8
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	e000e010 	.word	0xe000e010

08004a50 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	210f      	movs	r1, #15
 8004a5c:	187b      	adds	r3, r7, r1
 8004a5e:	1c02      	adds	r2, r0, #0
 8004a60:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	187b      	adds	r3, r7, r1
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b25b      	sxtb	r3, r3
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7ff ff5d 	bl	800492c <__NVIC_SetPriority>
}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7ff ffbf 	bl	8004a08 <SysTick_Config>
 8004a8a:	0003      	movs	r3, r0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aa2:	e147      	b.n	8004d34 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4091      	lsls	r1, r2
 8004aae:	000a      	movs	r2, r1
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d100      	bne.n	8004abc <HAL_GPIO_Init+0x28>
 8004aba:	e138      	b.n	8004d2e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d005      	beq.n	8004ad4 <HAL_GPIO_Init+0x40>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2203      	movs	r2, #3
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d130      	bne.n	8004b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	2203      	movs	r2, #3
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	0013      	movs	r3, r2
 8004ae4:	43da      	mvns	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	409a      	lsls	r2, r3
 8004af6:	0013      	movs	r3, r2
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	0013      	movs	r3, r2
 8004b12:	43da      	mvns	r2, r3
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	091b      	lsrs	r3, r3, #4
 8004b20:	2201      	movs	r2, #1
 8004b22:	401a      	ands	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	409a      	lsls	r2, r3
 8004b28:	0013      	movs	r3, r2
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d017      	beq.n	8004b72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	0013      	movs	r3, r2
 8004b52:	43da      	mvns	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4013      	ands	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	409a      	lsls	r2, r3
 8004b64:	0013      	movs	r3, r2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2203      	movs	r2, #3
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d123      	bne.n	8004bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	08da      	lsrs	r2, r3, #3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3208      	adds	r2, #8
 8004b86:	0092      	lsls	r2, r2, #2
 8004b88:	58d3      	ldr	r3, [r2, r3]
 8004b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2207      	movs	r2, #7
 8004b90:	4013      	ands	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	220f      	movs	r2, #15
 8004b96:	409a      	lsls	r2, r3
 8004b98:	0013      	movs	r3, r2
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2107      	movs	r1, #7
 8004baa:	400b      	ands	r3, r1
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	0013      	movs	r3, r2
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	08da      	lsrs	r2, r3, #3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3208      	adds	r2, #8
 8004bc0:	0092      	lsls	r2, r2, #2
 8004bc2:	6939      	ldr	r1, [r7, #16]
 8004bc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	0013      	movs	r3, r2
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2203      	movs	r2, #3
 8004be4:	401a      	ands	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	409a      	lsls	r2, r3
 8004bec:	0013      	movs	r3, r2
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	23c0      	movs	r3, #192	@ 0xc0
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	4013      	ands	r3, r2
 8004c04:	d100      	bne.n	8004c08 <HAL_GPIO_Init+0x174>
 8004c06:	e092      	b.n	8004d2e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004c08:	4a50      	ldr	r2, [pc, #320]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	3318      	adds	r3, #24
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	589b      	ldr	r3, [r3, r2]
 8004c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	220f      	movs	r2, #15
 8004c20:	409a      	lsls	r2, r3
 8004c22:	0013      	movs	r3, r2
 8004c24:	43da      	mvns	r2, r3
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	23a0      	movs	r3, #160	@ 0xa0
 8004c30:	05db      	lsls	r3, r3, #23
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d013      	beq.n	8004c5e <HAL_GPIO_Init+0x1ca>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a45      	ldr	r2, [pc, #276]	@ (8004d50 <HAL_GPIO_Init+0x2bc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00d      	beq.n	8004c5a <HAL_GPIO_Init+0x1c6>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a44      	ldr	r2, [pc, #272]	@ (8004d54 <HAL_GPIO_Init+0x2c0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <HAL_GPIO_Init+0x1c2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a43      	ldr	r2, [pc, #268]	@ (8004d58 <HAL_GPIO_Init+0x2c4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_GPIO_Init+0x1be>
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e006      	b.n	8004c60 <HAL_GPIO_Init+0x1cc>
 8004c52:	2305      	movs	r3, #5
 8004c54:	e004      	b.n	8004c60 <HAL_GPIO_Init+0x1cc>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e002      	b.n	8004c60 <HAL_GPIO_Init+0x1cc>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_GPIO_Init+0x1cc>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	2103      	movs	r1, #3
 8004c64:	400a      	ands	r2, r1
 8004c66:	00d2      	lsls	r2, r2, #3
 8004c68:	4093      	lsls	r3, r2
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004c70:	4936      	ldr	r1, [pc, #216]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	3318      	adds	r3, #24
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c7e:	4b33      	ldr	r3, [pc, #204]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	43da      	mvns	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	2380      	movs	r3, #128	@ 0x80
 8004c94:	035b      	lsls	r3, r3, #13
 8004c96:	4013      	ands	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004ca8:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	43da      	mvns	r2, r3
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	039b      	lsls	r3, r3, #14
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004cd4:	2384      	movs	r3, #132	@ 0x84
 8004cd6:	58d3      	ldr	r3, [r2, r3]
 8004cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	43da      	mvns	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	2380      	movs	r3, #128	@ 0x80
 8004cea:	029b      	lsls	r3, r3, #10
 8004cec:	4013      	ands	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cf8:	4914      	ldr	r1, [pc, #80]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004cfa:	2284      	movs	r2, #132	@ 0x84
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004d00:	4a12      	ldr	r2, [pc, #72]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004d02:	2380      	movs	r3, #128	@ 0x80
 8004d04:	58d3      	ldr	r3, [r2, r3]
 8004d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	2380      	movs	r3, #128	@ 0x80
 8004d18:	025b      	lsls	r3, r3, #9
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d26:	4909      	ldr	r1, [pc, #36]	@ (8004d4c <HAL_GPIO_Init+0x2b8>)
 8004d28:	2280      	movs	r2, #128	@ 0x80
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3301      	adds	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	40da      	lsrs	r2, r3
 8004d3c:	1e13      	subs	r3, r2, #0
 8004d3e:	d000      	beq.n	8004d42 <HAL_GPIO_Init+0x2ae>
 8004d40:	e6b0      	b.n	8004aa4 <HAL_GPIO_Init+0x10>
  }
}
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b006      	add	sp, #24
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021800 	.word	0x40021800
 8004d50:	50000400 	.word	0x50000400
 8004d54:	50000800 	.word	0x50000800
 8004d58:	50000c00 	.word	0x50000c00

08004d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	0008      	movs	r0, r1
 8004d66:	0011      	movs	r1, r2
 8004d68:	1cbb      	adds	r3, r7, #2
 8004d6a:	1c02      	adds	r2, r0, #0
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	1c7b      	adds	r3, r7, #1
 8004d70:	1c0a      	adds	r2, r1, #0
 8004d72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d74:	1c7b      	adds	r3, r7, #1
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d7c:	1cbb      	adds	r3, r7, #2
 8004d7e:	881a      	ldrh	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d84:	e003      	b.n	8004d8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d86:	1cbb      	adds	r3, r7, #2
 8004d88:	881a      	ldrh	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b002      	add	sp, #8
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	000a      	movs	r2, r1
 8004da0:	1cbb      	adds	r3, r7, #2
 8004da2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004daa:	1cbb      	adds	r3, r7, #2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4013      	ands	r3, r2
 8004db2:	041a      	lsls	r2, r3, #16
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	43db      	mvns	r3, r3
 8004db8:	1cb9      	adds	r1, r7, #2
 8004dba:	8809      	ldrh	r1, [r1, #0]
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	619a      	str	r2, [r3, #24]
}
 8004dc4:	46c0      	nop			@ (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b004      	add	sp, #16
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e08f      	b.n	8004efe <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2241      	movs	r2, #65	@ 0x41
 8004de2:	5c9b      	ldrb	r3, [r3, r2]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2240      	movs	r2, #64	@ 0x40
 8004dee:	2100      	movs	r1, #0
 8004df0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff fb63 	bl	80044c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2241      	movs	r2, #65	@ 0x41
 8004dfe:	2124      	movs	r1, #36	@ 0x24
 8004e00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	438a      	bics	r2, r1
 8004e10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	493b      	ldr	r1, [pc, #236]	@ (8004f08 <HAL_I2C_Init+0x13c>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4938      	ldr	r1, [pc, #224]	@ (8004f0c <HAL_I2C_Init+0x140>)
 8004e2c:	400a      	ands	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d108      	bne.n	8004e4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2180      	movs	r1, #128	@ 0x80
 8004e42:	0209      	lsls	r1, r1, #8
 8004e44:	430a      	orrs	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	e007      	b.n	8004e5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2184      	movs	r1, #132	@ 0x84
 8004e54:	0209      	lsls	r1, r1, #8
 8004e56:	430a      	orrs	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d109      	bne.n	8004e76 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2180      	movs	r1, #128	@ 0x80
 8004e6e:	0109      	lsls	r1, r1, #4
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	e007      	b.n	8004e86 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4923      	ldr	r1, [pc, #140]	@ (8004f10 <HAL_I2C_Init+0x144>)
 8004e82:	400a      	ands	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4920      	ldr	r1, [pc, #128]	@ (8004f14 <HAL_I2C_Init+0x148>)
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	491a      	ldr	r1, [pc, #104]	@ (8004f0c <HAL_I2C_Init+0x140>)
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69d9      	ldr	r1, [r3, #28]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1a      	ldr	r2, [r3, #32]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2101      	movs	r1, #1
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2241      	movs	r2, #65	@ 0x41
 8004eea:	2120      	movs	r1, #32
 8004eec:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2242      	movs	r2, #66	@ 0x42
 8004ef8:	2100      	movs	r1, #0
 8004efa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b002      	add	sp, #8
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	f0ffffff 	.word	0xf0ffffff
 8004f0c:	ffff7fff 	.word	0xffff7fff
 8004f10:	fffff7ff 	.word	0xfffff7ff
 8004f14:	02008000 	.word	0x02008000

08004f18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b089      	sub	sp, #36	@ 0x24
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	000c      	movs	r4, r1
 8004f22:	0010      	movs	r0, r2
 8004f24:	0019      	movs	r1, r3
 8004f26:	230a      	movs	r3, #10
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	1c22      	adds	r2, r4, #0
 8004f2c:	801a      	strh	r2, [r3, #0]
 8004f2e:	2308      	movs	r3, #8
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	1c02      	adds	r2, r0, #0
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	1dbb      	adds	r3, r7, #6
 8004f38:	1c0a      	adds	r2, r1, #0
 8004f3a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2241      	movs	r2, #65	@ 0x41
 8004f40:	5c9b      	ldrb	r3, [r3, r2]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d000      	beq.n	8004f4a <HAL_I2C_Mem_Write+0x32>
 8004f48:	e10c      	b.n	8005164 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <HAL_I2C_Mem_Write+0x42>
 8004f50:	232c      	movs	r3, #44	@ 0x2c
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d105      	bne.n	8004f66 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2280      	movs	r2, #128	@ 0x80
 8004f5e:	0092      	lsls	r2, r2, #2
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0ff      	b.n	8005166 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2240      	movs	r2, #64	@ 0x40
 8004f6a:	5c9b      	ldrb	r3, [r3, r2]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_I2C_Mem_Write+0x5c>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e0f8      	b.n	8005166 <HAL_I2C_Mem_Write+0x24e>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2240      	movs	r2, #64	@ 0x40
 8004f78:	2101      	movs	r1, #1
 8004f7a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f7c:	f7ff fca8 	bl	80048d0 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f84:	2380      	movs	r3, #128	@ 0x80
 8004f86:	0219      	lsls	r1, r3, #8
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2319      	movs	r3, #25
 8004f90:	2201      	movs	r2, #1
 8004f92:	f000 fb0b 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 8004f96:	1e03      	subs	r3, r0, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0e3      	b.n	8005166 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2241      	movs	r2, #65	@ 0x41
 8004fa2:	2121      	movs	r1, #33	@ 0x21
 8004fa4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2242      	movs	r2, #66	@ 0x42
 8004faa:	2140      	movs	r1, #64	@ 0x40
 8004fac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	222c      	movs	r2, #44	@ 0x2c
 8004fbe:	18ba      	adds	r2, r7, r2
 8004fc0:	8812      	ldrh	r2, [r2, #0]
 8004fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fca:	1dbb      	adds	r3, r7, #6
 8004fcc:	881c      	ldrh	r4, [r3, #0]
 8004fce:	2308      	movs	r3, #8
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	881a      	ldrh	r2, [r3, #0]
 8004fd4:	230a      	movs	r3, #10
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	8819      	ldrh	r1, [r3, #0]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	0023      	movs	r3, r4
 8004fe6:	f000 f9f9 	bl	80053dc <I2C_RequestMemoryWrite>
 8004fea:	1e03      	subs	r3, r0, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2240      	movs	r2, #64	@ 0x40
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e0b5      	b.n	8005166 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2bff      	cmp	r3, #255	@ 0xff
 8005002:	d911      	bls.n	8005028 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	22ff      	movs	r2, #255	@ 0xff
 8005008:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500e:	b2da      	uxtb	r2, r3
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	045c      	lsls	r4, r3, #17
 8005014:	230a      	movs	r3, #10
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	8819      	ldrh	r1, [r3, #0]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	2300      	movs	r3, #0
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	0023      	movs	r3, r4
 8005022:	f000 fc9d 	bl	8005960 <I2C_TransferConfig>
 8005026:	e012      	b.n	800504e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005036:	b2da      	uxtb	r2, r3
 8005038:	2380      	movs	r3, #128	@ 0x80
 800503a:	049c      	lsls	r4, r3, #18
 800503c:	230a      	movs	r3, #10
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	8819      	ldrh	r1, [r3, #0]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	2300      	movs	r3, #0
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	0023      	movs	r3, r4
 800504a:	f000 fc89 	bl	8005960 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	0018      	movs	r0, r3
 8005056:	f000 fb01 	bl	800565c <I2C_WaitOnTXISFlagUntilTimeout>
 800505a:	1e03      	subs	r3, r0, #0
 800505c:	d001      	beq.n	8005062 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e081      	b.n	8005166 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	781a      	ldrb	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d03a      	beq.n	8005112 <HAL_I2C_Mem_Write+0x1fa>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d136      	bne.n	8005112 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	0013      	movs	r3, r2
 80050ae:	2200      	movs	r2, #0
 80050b0:	2180      	movs	r1, #128	@ 0x80
 80050b2:	f000 fa7b 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d001      	beq.n	80050be <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e053      	b.n	8005166 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2bff      	cmp	r3, #255	@ 0xff
 80050c6:	d911      	bls.n	80050ec <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	22ff      	movs	r2, #255	@ 0xff
 80050cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	2380      	movs	r3, #128	@ 0x80
 80050d6:	045c      	lsls	r4, r3, #17
 80050d8:	230a      	movs	r3, #10
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	8819      	ldrh	r1, [r3, #0]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	2300      	movs	r3, #0
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	0023      	movs	r3, r4
 80050e6:	f000 fc3b 	bl	8005960 <I2C_TransferConfig>
 80050ea:	e012      	b.n	8005112 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	2380      	movs	r3, #128	@ 0x80
 80050fe:	049c      	lsls	r4, r3, #18
 8005100:	230a      	movs	r3, #10
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	8819      	ldrh	r1, [r3, #0]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	2300      	movs	r3, #0
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	0023      	movs	r3, r4
 800510e:	f000 fc27 	bl	8005960 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d198      	bne.n	800504e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	0018      	movs	r0, r3
 8005124:	f000 fae0 	bl	80056e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005128:	1e03      	subs	r3, r0, #0
 800512a:	d001      	beq.n	8005130 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e01a      	b.n	8005166 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2220      	movs	r2, #32
 8005136:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	490b      	ldr	r1, [pc, #44]	@ (8005170 <HAL_I2C_Mem_Write+0x258>)
 8005144:	400a      	ands	r2, r1
 8005146:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2241      	movs	r2, #65	@ 0x41
 800514c:	2120      	movs	r1, #32
 800514e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2242      	movs	r2, #66	@ 0x42
 8005154:	2100      	movs	r1, #0
 8005156:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2240      	movs	r2, #64	@ 0x40
 800515c:	2100      	movs	r1, #0
 800515e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	e000      	b.n	8005166 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
  }
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b007      	add	sp, #28
 800516c:	bd90      	pop	{r4, r7, pc}
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	fe00e800 	.word	0xfe00e800

08005174 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b089      	sub	sp, #36	@ 0x24
 8005178:	af02      	add	r7, sp, #8
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	000c      	movs	r4, r1
 800517e:	0010      	movs	r0, r2
 8005180:	0019      	movs	r1, r3
 8005182:	230a      	movs	r3, #10
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	1c22      	adds	r2, r4, #0
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	2308      	movs	r3, #8
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	1c02      	adds	r2, r0, #0
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	1dbb      	adds	r3, r7, #6
 8005194:	1c0a      	adds	r2, r1, #0
 8005196:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2241      	movs	r2, #65	@ 0x41
 800519c:	5c9b      	ldrb	r3, [r3, r2]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d000      	beq.n	80051a6 <HAL_I2C_Mem_Read+0x32>
 80051a4:	e110      	b.n	80053c8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <HAL_I2C_Mem_Read+0x42>
 80051ac:	232c      	movs	r3, #44	@ 0x2c
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d105      	bne.n	80051c2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2280      	movs	r2, #128	@ 0x80
 80051ba:	0092      	lsls	r2, r2, #2
 80051bc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e103      	b.n	80053ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2240      	movs	r2, #64	@ 0x40
 80051c6:	5c9b      	ldrb	r3, [r3, r2]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_I2C_Mem_Read+0x5c>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e0fc      	b.n	80053ca <HAL_I2C_Mem_Read+0x256>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2240      	movs	r2, #64	@ 0x40
 80051d4:	2101      	movs	r1, #1
 80051d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051d8:	f7ff fb7a 	bl	80048d0 <HAL_GetTick>
 80051dc:	0003      	movs	r3, r0
 80051de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051e0:	2380      	movs	r3, #128	@ 0x80
 80051e2:	0219      	lsls	r1, r3, #8
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	2319      	movs	r3, #25
 80051ec:	2201      	movs	r2, #1
 80051ee:	f000 f9dd 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 80051f2:	1e03      	subs	r3, r0, #0
 80051f4:	d001      	beq.n	80051fa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e0e7      	b.n	80053ca <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2241      	movs	r2, #65	@ 0x41
 80051fe:	2122      	movs	r1, #34	@ 0x22
 8005200:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2242      	movs	r2, #66	@ 0x42
 8005206:	2140      	movs	r1, #64	@ 0x40
 8005208:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005214:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	222c      	movs	r2, #44	@ 0x2c
 800521a:	18ba      	adds	r2, r7, r2
 800521c:	8812      	ldrh	r2, [r2, #0]
 800521e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005226:	1dbb      	adds	r3, r7, #6
 8005228:	881c      	ldrh	r4, [r3, #0]
 800522a:	2308      	movs	r3, #8
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	881a      	ldrh	r2, [r3, #0]
 8005230:	230a      	movs	r3, #10
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	8819      	ldrh	r1, [r3, #0]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	0023      	movs	r3, r4
 8005242:	f000 f92f 	bl	80054a4 <I2C_RequestMemoryRead>
 8005246:	1e03      	subs	r3, r0, #0
 8005248:	d005      	beq.n	8005256 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2240      	movs	r2, #64	@ 0x40
 800524e:	2100      	movs	r1, #0
 8005250:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e0b9      	b.n	80053ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	2bff      	cmp	r3, #255	@ 0xff
 800525e:	d911      	bls.n	8005284 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	22ff      	movs	r2, #255	@ 0xff
 8005264:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526a:	b2da      	uxtb	r2, r3
 800526c:	2380      	movs	r3, #128	@ 0x80
 800526e:	045c      	lsls	r4, r3, #17
 8005270:	230a      	movs	r3, #10
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	8819      	ldrh	r1, [r3, #0]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	4b56      	ldr	r3, [pc, #344]	@ (80053d4 <HAL_I2C_Mem_Read+0x260>)
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	0023      	movs	r3, r4
 800527e:	f000 fb6f 	bl	8005960 <I2C_TransferConfig>
 8005282:	e012      	b.n	80052aa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005292:	b2da      	uxtb	r2, r3
 8005294:	2380      	movs	r3, #128	@ 0x80
 8005296:	049c      	lsls	r4, r3, #18
 8005298:	230a      	movs	r3, #10
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	8819      	ldrh	r1, [r3, #0]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	4b4c      	ldr	r3, [pc, #304]	@ (80053d4 <HAL_I2C_Mem_Read+0x260>)
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	0023      	movs	r3, r4
 80052a6:	f000 fb5b 	bl	8005960 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80052aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	0013      	movs	r3, r2
 80052b4:	2200      	movs	r2, #0
 80052b6:	2104      	movs	r1, #4
 80052b8:	f000 f978 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 80052bc:	1e03      	subs	r3, r0, #0
 80052be:	d001      	beq.n	80052c4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e082      	b.n	80053ca <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d03a      	beq.n	8005376 <HAL_I2C_Mem_Read+0x202>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d136      	bne.n	8005376 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	0013      	movs	r3, r2
 8005312:	2200      	movs	r2, #0
 8005314:	2180      	movs	r1, #128	@ 0x80
 8005316:	f000 f949 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 800531a:	1e03      	subs	r3, r0, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e053      	b.n	80053ca <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2bff      	cmp	r3, #255	@ 0xff
 800532a:	d911      	bls.n	8005350 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	22ff      	movs	r2, #255	@ 0xff
 8005330:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005336:	b2da      	uxtb	r2, r3
 8005338:	2380      	movs	r3, #128	@ 0x80
 800533a:	045c      	lsls	r4, r3, #17
 800533c:	230a      	movs	r3, #10
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	8819      	ldrh	r1, [r3, #0]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	2300      	movs	r3, #0
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	0023      	movs	r3, r4
 800534a:	f000 fb09 	bl	8005960 <I2C_TransferConfig>
 800534e:	e012      	b.n	8005376 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535e:	b2da      	uxtb	r2, r3
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	049c      	lsls	r4, r3, #18
 8005364:	230a      	movs	r3, #10
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	8819      	ldrh	r1, [r3, #0]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	2300      	movs	r3, #0
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	0023      	movs	r3, r4
 8005372:	f000 faf5 	bl	8005960 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d194      	bne.n	80052aa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	0018      	movs	r0, r3
 8005388:	f000 f9ae 	bl	80056e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800538c:	1e03      	subs	r3, r0, #0
 800538e:	d001      	beq.n	8005394 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e01a      	b.n	80053ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2220      	movs	r2, #32
 800539a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	490c      	ldr	r1, [pc, #48]	@ (80053d8 <HAL_I2C_Mem_Read+0x264>)
 80053a8:	400a      	ands	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2241      	movs	r2, #65	@ 0x41
 80053b0:	2120      	movs	r1, #32
 80053b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2242      	movs	r2, #66	@ 0x42
 80053b8:	2100      	movs	r1, #0
 80053ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2240      	movs	r2, #64	@ 0x40
 80053c0:	2100      	movs	r1, #0
 80053c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
  }
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b007      	add	sp, #28
 80053d0:	bd90      	pop	{r4, r7, pc}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	80002400 	.word	0x80002400
 80053d8:	fe00e800 	.word	0xfe00e800

080053dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80053dc:	b5b0      	push	{r4, r5, r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	000c      	movs	r4, r1
 80053e6:	0010      	movs	r0, r2
 80053e8:	0019      	movs	r1, r3
 80053ea:	250a      	movs	r5, #10
 80053ec:	197b      	adds	r3, r7, r5
 80053ee:	1c22      	adds	r2, r4, #0
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	2308      	movs	r3, #8
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	1c02      	adds	r2, r0, #0
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	1dbb      	adds	r3, r7, #6
 80053fc:	1c0a      	adds	r2, r1, #0
 80053fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005400:	1dbb      	adds	r3, r7, #6
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	045c      	lsls	r4, r3, #17
 800540a:	197b      	adds	r3, r7, r5
 800540c:	8819      	ldrh	r1, [r3, #0]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	4b23      	ldr	r3, [pc, #140]	@ (80054a0 <I2C_RequestMemoryWrite+0xc4>)
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	0023      	movs	r3, r4
 8005416:	f000 faa3 	bl	8005960 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800541a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541c:	6a39      	ldr	r1, [r7, #32]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	0018      	movs	r0, r3
 8005422:	f000 f91b 	bl	800565c <I2C_WaitOnTXISFlagUntilTimeout>
 8005426:	1e03      	subs	r3, r0, #0
 8005428:	d001      	beq.n	800542e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e033      	b.n	8005496 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800542e:	1dbb      	adds	r3, r7, #6
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005436:	2308      	movs	r3, #8
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	629a      	str	r2, [r3, #40]	@ 0x28
 8005444:	e019      	b.n	800547a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005446:	2308      	movs	r3, #8
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	0a1b      	lsrs	r3, r3, #8
 800544e:	b29b      	uxth	r3, r3
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800545a:	6a39      	ldr	r1, [r7, #32]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	0018      	movs	r0, r3
 8005460:	f000 f8fc 	bl	800565c <I2C_WaitOnTXISFlagUntilTimeout>
 8005464:	1e03      	subs	r3, r0, #0
 8005466:	d001      	beq.n	800546c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e014      	b.n	8005496 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800546c:	2308      	movs	r3, #8
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	0013      	movs	r3, r2
 8005484:	2200      	movs	r2, #0
 8005486:	2180      	movs	r1, #128	@ 0x80
 8005488:	f000 f890 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 800548c:	1e03      	subs	r3, r0, #0
 800548e:	d001      	beq.n	8005494 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b004      	add	sp, #16
 800549c:	bdb0      	pop	{r4, r5, r7, pc}
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	80002000 	.word	0x80002000

080054a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80054a4:	b5b0      	push	{r4, r5, r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	000c      	movs	r4, r1
 80054ae:	0010      	movs	r0, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	250a      	movs	r5, #10
 80054b4:	197b      	adds	r3, r7, r5
 80054b6:	1c22      	adds	r2, r4, #0
 80054b8:	801a      	strh	r2, [r3, #0]
 80054ba:	2308      	movs	r3, #8
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	1c02      	adds	r2, r0, #0
 80054c0:	801a      	strh	r2, [r3, #0]
 80054c2:	1dbb      	adds	r3, r7, #6
 80054c4:	1c0a      	adds	r2, r1, #0
 80054c6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80054c8:	1dbb      	adds	r3, r7, #6
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	197b      	adds	r3, r7, r5
 80054d0:	8819      	ldrh	r1, [r3, #0]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	4b23      	ldr	r3, [pc, #140]	@ (8005564 <I2C_RequestMemoryRead+0xc0>)
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2300      	movs	r3, #0
 80054da:	f000 fa41 	bl	8005960 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e0:	6a39      	ldr	r1, [r7, #32]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f000 f8b9 	bl	800565c <I2C_WaitOnTXISFlagUntilTimeout>
 80054ea:	1e03      	subs	r3, r0, #0
 80054ec:	d001      	beq.n	80054f2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e033      	b.n	800555a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054f2:	1dbb      	adds	r3, r7, #6
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d107      	bne.n	800550a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054fa:	2308      	movs	r3, #8
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	629a      	str	r2, [r3, #40]	@ 0x28
 8005508:	e019      	b.n	800553e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800550a:	2308      	movs	r3, #8
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	0a1b      	lsrs	r3, r3, #8
 8005512:	b29b      	uxth	r3, r3
 8005514:	b2da      	uxtb	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800551c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551e:	6a39      	ldr	r1, [r7, #32]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	0018      	movs	r0, r3
 8005524:	f000 f89a 	bl	800565c <I2C_WaitOnTXISFlagUntilTimeout>
 8005528:	1e03      	subs	r3, r0, #0
 800552a:	d001      	beq.n	8005530 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e014      	b.n	800555a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005530:	2308      	movs	r3, #8
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b2da      	uxtb	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800553e:	6a3a      	ldr	r2, [r7, #32]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	0013      	movs	r3, r2
 8005548:	2200      	movs	r2, #0
 800554a:	2140      	movs	r1, #64	@ 0x40
 800554c:	f000 f82e 	bl	80055ac <I2C_WaitOnFlagUntilTimeout>
 8005550:	1e03      	subs	r3, r0, #0
 8005552:	d001      	beq.n	8005558 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	0018      	movs	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	b004      	add	sp, #16
 8005560:	bdb0      	pop	{r4, r5, r7, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	80002000 	.word	0x80002000

08005568 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	2202      	movs	r2, #2
 8005578:	4013      	ands	r3, r2
 800557a:	2b02      	cmp	r3, #2
 800557c:	d103      	bne.n	8005586 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	2201      	movs	r2, #1
 800558e:	4013      	ands	r3, r2
 8005590:	2b01      	cmp	r3, #1
 8005592:	d007      	beq.n	80055a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2101      	movs	r1, #1
 80055a0:	430a      	orrs	r2, r1
 80055a2:	619a      	str	r2, [r3, #24]
  }
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b002      	add	sp, #8
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	1dfb      	adds	r3, r7, #7
 80055ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055bc:	e03a      	b.n	8005634 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f000 f8d3 	bl	8005770 <I2C_IsErrorOccurred>
 80055ca:	1e03      	subs	r3, r0, #0
 80055cc:	d001      	beq.n	80055d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e040      	b.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	d02d      	beq.n	8005634 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d8:	f7ff f97a 	bl	80048d0 <HAL_GetTick>
 80055dc:	0002      	movs	r2, r0
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d302      	bcc.n	80055ee <I2C_WaitOnFlagUntilTimeout+0x42>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d122      	bne.n	8005634 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	4013      	ands	r3, r2
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	425a      	negs	r2, r3
 80055fe:	4153      	adcs	r3, r2
 8005600:	b2db      	uxtb	r3, r3
 8005602:	001a      	movs	r2, r3
 8005604:	1dfb      	adds	r3, r7, #7
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d113      	bne.n	8005634 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005610:	2220      	movs	r2, #32
 8005612:	431a      	orrs	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2241      	movs	r2, #65	@ 0x41
 800561c:	2120      	movs	r1, #32
 800561e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2242      	movs	r2, #66	@ 0x42
 8005624:	2100      	movs	r1, #0
 8005626:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2240      	movs	r2, #64	@ 0x40
 800562c:	2100      	movs	r1, #0
 800562e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e00f      	b.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	425a      	negs	r2, r3
 8005644:	4153      	adcs	r3, r2
 8005646:	b2db      	uxtb	r3, r3
 8005648:	001a      	movs	r2, r3
 800564a:	1dfb      	adds	r3, r7, #7
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d0b5      	beq.n	80055be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	0018      	movs	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	b004      	add	sp, #16
 800565a:	bd80      	pop	{r7, pc}

0800565c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005668:	e032      	b.n	80056d0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	0018      	movs	r0, r3
 8005672:	f000 f87d 	bl	8005770 <I2C_IsErrorOccurred>
 8005676:	1e03      	subs	r3, r0, #0
 8005678:	d001      	beq.n	800567e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e030      	b.n	80056e0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3301      	adds	r3, #1
 8005682:	d025      	beq.n	80056d0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005684:	f7ff f924 	bl	80048d0 <HAL_GetTick>
 8005688:	0002      	movs	r2, r0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	429a      	cmp	r2, r3
 8005692:	d302      	bcc.n	800569a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d11a      	bne.n	80056d0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	2202      	movs	r2, #2
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d013      	beq.n	80056d0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ac:	2220      	movs	r2, #32
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2241      	movs	r2, #65	@ 0x41
 80056b8:	2120      	movs	r1, #32
 80056ba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2242      	movs	r2, #66	@ 0x42
 80056c0:	2100      	movs	r1, #0
 80056c2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2240      	movs	r2, #64	@ 0x40
 80056c8:	2100      	movs	r1, #0
 80056ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e007      	b.n	80056e0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	2202      	movs	r2, #2
 80056d8:	4013      	ands	r3, r2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d1c5      	bne.n	800566a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b004      	add	sp, #16
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056f4:	e02f      	b.n	8005756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 f837 	bl	8005770 <I2C_IsErrorOccurred>
 8005702:	1e03      	subs	r3, r0, #0
 8005704:	d001      	beq.n	800570a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e02d      	b.n	8005766 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7ff f8e1 	bl	80048d0 <HAL_GetTick>
 800570e:	0002      	movs	r2, r0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11a      	bne.n	8005756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2220      	movs	r2, #32
 8005728:	4013      	ands	r3, r2
 800572a:	2b20      	cmp	r3, #32
 800572c:	d013      	beq.n	8005756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005732:	2220      	movs	r2, #32
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2241      	movs	r2, #65	@ 0x41
 800573e:	2120      	movs	r1, #32
 8005740:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2242      	movs	r2, #66	@ 0x42
 8005746:	2100      	movs	r1, #0
 8005748:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2240      	movs	r2, #64	@ 0x40
 800574e:	2100      	movs	r1, #0
 8005750:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e007      	b.n	8005766 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2220      	movs	r2, #32
 800575e:	4013      	ands	r3, r2
 8005760:	2b20      	cmp	r3, #32
 8005762:	d1c8      	bne.n	80056f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	0018      	movs	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	b004      	add	sp, #16
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08a      	sub	sp, #40	@ 0x28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800577c:	2327      	movs	r3, #39	@ 0x27
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2210      	movs	r2, #16
 8005798:	4013      	ands	r3, r2
 800579a:	d100      	bne.n	800579e <I2C_IsErrorOccurred+0x2e>
 800579c:	e079      	b.n	8005892 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2210      	movs	r2, #16
 80057a4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057a6:	e057      	b.n	8005858 <I2C_IsErrorOccurred+0xe8>
 80057a8:	2227      	movs	r2, #39	@ 0x27
 80057aa:	18bb      	adds	r3, r7, r2
 80057ac:	18ba      	adds	r2, r7, r2
 80057ae:	7812      	ldrb	r2, [r2, #0]
 80057b0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	3301      	adds	r3, #1
 80057b6:	d04f      	beq.n	8005858 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057b8:	f7ff f88a 	bl	80048d0 <HAL_GetTick>
 80057bc:	0002      	movs	r2, r0
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d302      	bcc.n	80057ce <I2C_IsErrorOccurred+0x5e>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d144      	bne.n	8005858 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	2380      	movs	r3, #128	@ 0x80
 80057d6:	01db      	lsls	r3, r3, #7
 80057d8:	4013      	ands	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80057dc:	2013      	movs	r0, #19
 80057de:	183b      	adds	r3, r7, r0
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	2142      	movs	r1, #66	@ 0x42
 80057e4:	5c52      	ldrb	r2, [r2, r1]
 80057e6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	2380      	movs	r3, #128	@ 0x80
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	401a      	ands	r2, r3
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d126      	bne.n	800584a <I2C_IsErrorOccurred+0xda>
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	2380      	movs	r3, #128	@ 0x80
 8005800:	01db      	lsls	r3, r3, #7
 8005802:	429a      	cmp	r2, r3
 8005804:	d021      	beq.n	800584a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005806:	183b      	adds	r3, r7, r0
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b20      	cmp	r3, #32
 800580c:	d01d      	beq.n	800584a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2180      	movs	r1, #128	@ 0x80
 800581a:	01c9      	lsls	r1, r1, #7
 800581c:	430a      	orrs	r2, r1
 800581e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005820:	f7ff f856 	bl	80048d0 <HAL_GetTick>
 8005824:	0003      	movs	r3, r0
 8005826:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005828:	e00f      	b.n	800584a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800582a:	f7ff f851 	bl	80048d0 <HAL_GetTick>
 800582e:	0002      	movs	r2, r0
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b19      	cmp	r3, #25
 8005836:	d908      	bls.n	800584a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	2220      	movs	r2, #32
 800583c:	4313      	orrs	r3, r2
 800583e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005840:	2327      	movs	r3, #39	@ 0x27
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]

              break;
 8005848:	e006      	b.n	8005858 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2220      	movs	r2, #32
 8005852:	4013      	ands	r3, r2
 8005854:	2b20      	cmp	r3, #32
 8005856:	d1e8      	bne.n	800582a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2220      	movs	r2, #32
 8005860:	4013      	ands	r3, r2
 8005862:	2b20      	cmp	r3, #32
 8005864:	d004      	beq.n	8005870 <I2C_IsErrorOccurred+0x100>
 8005866:	2327      	movs	r3, #39	@ 0x27
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d09b      	beq.n	80057a8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005870:	2327      	movs	r3, #39	@ 0x27
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2220      	movs	r2, #32
 8005880:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	2204      	movs	r2, #4
 8005886:	4313      	orrs	r3, r2
 8005888:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800588a:	2327      	movs	r3, #39	@ 0x27
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	2201      	movs	r2, #1
 8005890:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	2380      	movs	r3, #128	@ 0x80
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	4013      	ands	r3, r2
 80058a2:	d00c      	beq.n	80058be <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2201      	movs	r2, #1
 80058a8:	4313      	orrs	r3, r2
 80058aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2280      	movs	r2, #128	@ 0x80
 80058b2:	0052      	lsls	r2, r2, #1
 80058b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058b6:	2327      	movs	r3, #39	@ 0x27
 80058b8:	18fb      	adds	r3, r7, r3
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	2380      	movs	r3, #128	@ 0x80
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4013      	ands	r3, r2
 80058c6:	d00c      	beq.n	80058e2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	2208      	movs	r2, #8
 80058cc:	4313      	orrs	r3, r2
 80058ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2280      	movs	r2, #128	@ 0x80
 80058d6:	00d2      	lsls	r2, r2, #3
 80058d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058da:	2327      	movs	r3, #39	@ 0x27
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	2380      	movs	r3, #128	@ 0x80
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4013      	ands	r3, r2
 80058ea:	d00c      	beq.n	8005906 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	2202      	movs	r2, #2
 80058f0:	4313      	orrs	r3, r2
 80058f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2280      	movs	r2, #128	@ 0x80
 80058fa:	0092      	lsls	r2, r2, #2
 80058fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058fe:	2327      	movs	r3, #39	@ 0x27
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005906:	2327      	movs	r3, #39	@ 0x27
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01d      	beq.n	800594c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	0018      	movs	r0, r3
 8005914:	f7ff fe28 	bl	8005568 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	490e      	ldr	r1, [pc, #56]	@ (800595c <I2C_IsErrorOccurred+0x1ec>)
 8005924:	400a      	ands	r2, r1
 8005926:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	431a      	orrs	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2241      	movs	r2, #65	@ 0x41
 8005938:	2120      	movs	r1, #32
 800593a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2242      	movs	r2, #66	@ 0x42
 8005940:	2100      	movs	r1, #0
 8005942:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2240      	movs	r2, #64	@ 0x40
 8005948:	2100      	movs	r1, #0
 800594a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800594c:	2327      	movs	r3, #39	@ 0x27
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	781b      	ldrb	r3, [r3, #0]
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b00a      	add	sp, #40	@ 0x28
 8005958:	bd80      	pop	{r7, pc}
 800595a:	46c0      	nop			@ (mov r8, r8)
 800595c:	fe00e800 	.word	0xfe00e800

08005960 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	0008      	movs	r0, r1
 800596a:	0011      	movs	r1, r2
 800596c:	607b      	str	r3, [r7, #4]
 800596e:	240a      	movs	r4, #10
 8005970:	193b      	adds	r3, r7, r4
 8005972:	1c02      	adds	r2, r0, #0
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	2009      	movs	r0, #9
 8005978:	183b      	adds	r3, r7, r0
 800597a:	1c0a      	adds	r2, r1, #0
 800597c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800597e:	193b      	adds	r3, r7, r4
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	059b      	lsls	r3, r3, #22
 8005984:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005986:	183b      	adds	r3, r7, r0
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	0419      	lsls	r1, r3, #16
 800598c:	23ff      	movs	r3, #255	@ 0xff
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005992:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599a:	4313      	orrs	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059aa:	0d51      	lsrs	r1, r2, #21
 80059ac:	2280      	movs	r2, #128	@ 0x80
 80059ae:	00d2      	lsls	r2, r2, #3
 80059b0:	400a      	ands	r2, r1
 80059b2:	4907      	ldr	r1, [pc, #28]	@ (80059d0 <I2C_TransferConfig+0x70>)
 80059b4:	430a      	orrs	r2, r1
 80059b6:	43d2      	mvns	r2, r2
 80059b8:	401a      	ands	r2, r3
 80059ba:	0011      	movs	r1, r2
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b007      	add	sp, #28
 80059cc:	bd90      	pop	{r4, r7, pc}
 80059ce:	46c0      	nop			@ (mov r8, r8)
 80059d0:	03ff63ff 	.word	0x03ff63ff

080059d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2241      	movs	r2, #65	@ 0x41
 80059e2:	5c9b      	ldrb	r3, [r3, r2]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d138      	bne.n	8005a5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2240      	movs	r2, #64	@ 0x40
 80059ee:	5c9b      	ldrb	r3, [r3, r2]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e032      	b.n	8005a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2240      	movs	r2, #64	@ 0x40
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2241      	movs	r2, #65	@ 0x41
 8005a04:	2124      	movs	r1, #36	@ 0x24
 8005a06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2101      	movs	r1, #1
 8005a14:	438a      	bics	r2, r1
 8005a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4911      	ldr	r1, [pc, #68]	@ (8005a68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a24:	400a      	ands	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6819      	ldr	r1, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2101      	movs	r1, #1
 8005a44:	430a      	orrs	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2241      	movs	r2, #65	@ 0x41
 8005a4c:	2120      	movs	r1, #32
 8005a4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2240      	movs	r2, #64	@ 0x40
 8005a54:	2100      	movs	r1, #0
 8005a56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e000      	b.n	8005a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
  }
}
 8005a5e:	0018      	movs	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b002      	add	sp, #8
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	ffffefff 	.word	0xffffefff

08005a6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2241      	movs	r2, #65	@ 0x41
 8005a7a:	5c9b      	ldrb	r3, [r3, r2]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d139      	bne.n	8005af6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2240      	movs	r2, #64	@ 0x40
 8005a86:	5c9b      	ldrb	r3, [r3, r2]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e033      	b.n	8005af8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2240      	movs	r2, #64	@ 0x40
 8005a94:	2101      	movs	r1, #1
 8005a96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2241      	movs	r2, #65	@ 0x41
 8005a9c:	2124      	movs	r1, #36	@ 0x24
 8005a9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2101      	movs	r1, #1
 8005aac:	438a      	bics	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a11      	ldr	r2, [pc, #68]	@ (8005b00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2101      	movs	r1, #1
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2241      	movs	r2, #65	@ 0x41
 8005ae6:	2120      	movs	r1, #32
 8005ae8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2240      	movs	r2, #64	@ 0x40
 8005aee:	2100      	movs	r1, #0
 8005af0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	e000      	b.n	8005af8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
  }
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b004      	add	sp, #16
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	fffff0ff 	.word	0xfffff0ff

08005b04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005b0c:	4b19      	ldr	r3, [pc, #100]	@ (8005b74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a19      	ldr	r2, [pc, #100]	@ (8005b78 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	0019      	movs	r1, r3
 8005b16:	4b17      	ldr	r3, [pc, #92]	@ (8005b74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d11f      	bne.n	8005b68 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005b28:	4b14      	ldr	r3, [pc, #80]	@ (8005b7c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	0013      	movs	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	189b      	adds	r3, r3, r2
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4912      	ldr	r1, [pc, #72]	@ (8005b80 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7fa faf6 	bl	8000128 <__udivsi3>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	3301      	adds	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b42:	e008      	b.n	8005b56 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	e001      	b.n	8005b56 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e009      	b.n	8005b6a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b56:	4b07      	ldr	r3, [pc, #28]	@ (8005b74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	2380      	movs	r3, #128	@ 0x80
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	401a      	ands	r2, r3
 8005b60:	2380      	movs	r3, #128	@ 0x80
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d0ed      	beq.n	8005b44 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b004      	add	sp, #16
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	40007000 	.word	0x40007000
 8005b78:	fffff9ff 	.word	0xfffff9ff
 8005b7c:	20000004 	.word	0x20000004
 8005b80:	000f4240 	.word	0x000f4240

08005b84 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005b88:	4b03      	ldr	r3, [pc, #12]	@ (8005b98 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	23e0      	movs	r3, #224	@ 0xe0
 8005b8e:	01db      	lsls	r3, r3, #7
 8005b90:	4013      	ands	r3, r2
}
 8005b92:	0018      	movs	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40021000 	.word	0x40021000

08005b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e2fe      	b.n	80061ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d100      	bne.n	8005bba <HAL_RCC_OscConfig+0x1e>
 8005bb8:	e07c      	b.n	8005cb4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bba:	4bc3      	ldr	r3, [pc, #780]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2238      	movs	r2, #56	@ 0x38
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bc4:	4bc0      	ldr	r3, [pc, #768]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	4013      	ands	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d102      	bne.n	8005bda <HAL_RCC_OscConfig+0x3e>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d002      	beq.n	8005be0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be0:	4bb9      	ldr	r3, [pc, #740]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	029b      	lsls	r3, r3, #10
 8005be8:	4013      	ands	r3, r2
 8005bea:	d062      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x116>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d15e      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e2d9      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	2380      	movs	r3, #128	@ 0x80
 8005bfe:	025b      	lsls	r3, r3, #9
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d107      	bne.n	8005c14 <HAL_RCC_OscConfig+0x78>
 8005c04:	4bb0      	ldr	r3, [pc, #704]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4baf      	ldr	r3, [pc, #700]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c0a:	2180      	movs	r1, #128	@ 0x80
 8005c0c:	0249      	lsls	r1, r1, #9
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e020      	b.n	8005c56 <HAL_RCC_OscConfig+0xba>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	23a0      	movs	r3, #160	@ 0xa0
 8005c1a:	02db      	lsls	r3, r3, #11
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d10e      	bne.n	8005c3e <HAL_RCC_OscConfig+0xa2>
 8005c20:	4ba9      	ldr	r3, [pc, #676]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4ba8      	ldr	r3, [pc, #672]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c26:	2180      	movs	r1, #128	@ 0x80
 8005c28:	02c9      	lsls	r1, r1, #11
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	4ba6      	ldr	r3, [pc, #664]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4ba5      	ldr	r3, [pc, #660]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c34:	2180      	movs	r1, #128	@ 0x80
 8005c36:	0249      	lsls	r1, r1, #9
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	e00b      	b.n	8005c56 <HAL_RCC_OscConfig+0xba>
 8005c3e:	4ba2      	ldr	r3, [pc, #648]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4ba1      	ldr	r3, [pc, #644]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c44:	49a1      	ldr	r1, [pc, #644]	@ (8005ecc <HAL_RCC_OscConfig+0x330>)
 8005c46:	400a      	ands	r2, r1
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	4b9f      	ldr	r3, [pc, #636]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4b9e      	ldr	r3, [pc, #632]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c50:	499f      	ldr	r1, [pc, #636]	@ (8005ed0 <HAL_RCC_OscConfig+0x334>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d014      	beq.n	8005c88 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5e:	f7fe fe37 	bl	80048d0 <HAL_GetTick>
 8005c62:	0003      	movs	r3, r0
 8005c64:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c68:	f7fe fe32 	bl	80048d0 <HAL_GetTick>
 8005c6c:	0002      	movs	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b64      	cmp	r3, #100	@ 0x64
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e298      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c7a:	4b93      	ldr	r3, [pc, #588]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	2380      	movs	r3, #128	@ 0x80
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	4013      	ands	r3, r2
 8005c84:	d0f0      	beq.n	8005c68 <HAL_RCC_OscConfig+0xcc>
 8005c86:	e015      	b.n	8005cb4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c88:	f7fe fe22 	bl	80048d0 <HAL_GetTick>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c92:	f7fe fe1d 	bl	80048d0 <HAL_GetTick>
 8005c96:	0002      	movs	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b64      	cmp	r3, #100	@ 0x64
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e283      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ca4:	4b88      	ldr	r3, [pc, #544]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	@ 0x80
 8005caa:	029b      	lsls	r3, r3, #10
 8005cac:	4013      	ands	r3, r2
 8005cae:	d1f0      	bne.n	8005c92 <HAL_RCC_OscConfig+0xf6>
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d100      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x124>
 8005cbe:	e099      	b.n	8005df4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc0:	4b81      	ldr	r3, [pc, #516]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2238      	movs	r2, #56	@ 0x38
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cca:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	2203      	movs	r2, #3
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b10      	cmp	r3, #16
 8005cd8:	d102      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x144>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d002      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d135      	bne.n	8005d52 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ce6:	4b78      	ldr	r3, [pc, #480]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	2380      	movs	r3, #128	@ 0x80
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4013      	ands	r3, r2
 8005cf0:	d005      	beq.n	8005cfe <HAL_RCC_OscConfig+0x162>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e256      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfe:	4b72      	ldr	r3, [pc, #456]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4a74      	ldr	r2, [pc, #464]	@ (8005ed4 <HAL_RCC_OscConfig+0x338>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	0019      	movs	r1, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	021a      	lsls	r2, r3, #8
 8005d0e:	4b6e      	ldr	r3, [pc, #440]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d10:	430a      	orrs	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d112      	bne.n	8005d40 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005d1a:	4b6b      	ldr	r3, [pc, #428]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ed8 <HAL_RCC_OscConfig+0x33c>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	0019      	movs	r1, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	4b67      	ldr	r3, [pc, #412]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005d2e:	4b66      	ldr	r3, [pc, #408]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	0adb      	lsrs	r3, r3, #11
 8005d34:	2207      	movs	r2, #7
 8005d36:	4013      	ands	r3, r2
 8005d38:	4a68      	ldr	r2, [pc, #416]	@ (8005edc <HAL_RCC_OscConfig+0x340>)
 8005d3a:	40da      	lsrs	r2, r3
 8005d3c:	4b68      	ldr	r3, [pc, #416]	@ (8005ee0 <HAL_RCC_OscConfig+0x344>)
 8005d3e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d40:	4b68      	ldr	r3, [pc, #416]	@ (8005ee4 <HAL_RCC_OscConfig+0x348>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7fe fd67 	bl	8004818 <HAL_InitTick>
 8005d4a:	1e03      	subs	r3, r0, #0
 8005d4c:	d051      	beq.n	8005df2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e22c      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d030      	beq.n	8005dbc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8005ed8 <HAL_RCC_OscConfig+0x33c>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	0019      	movs	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	4b57      	ldr	r3, [pc, #348]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005d6e:	4b56      	ldr	r3, [pc, #344]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b55      	ldr	r3, [pc, #340]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d74:	2180      	movs	r1, #128	@ 0x80
 8005d76:	0049      	lsls	r1, r1, #1
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fe fda8 	bl	80048d0 <HAL_GetTick>
 8005d80:	0003      	movs	r3, r0
 8005d82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d84:	e008      	b.n	8005d98 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d86:	f7fe fda3 	bl	80048d0 <HAL_GetTick>
 8005d8a:	0002      	movs	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e209      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d98:	4b4b      	ldr	r3, [pc, #300]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	2380      	movs	r3, #128	@ 0x80
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4013      	ands	r3, r2
 8005da2:	d0f0      	beq.n	8005d86 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da4:	4b48      	ldr	r3, [pc, #288]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4a4a      	ldr	r2, [pc, #296]	@ (8005ed4 <HAL_RCC_OscConfig+0x338>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	0019      	movs	r1, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	4b44      	ldr	r3, [pc, #272]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	e01b      	b.n	8005df4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005dbc:	4b42      	ldr	r3, [pc, #264]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4b41      	ldr	r3, [pc, #260]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005dc2:	4949      	ldr	r1, [pc, #292]	@ (8005ee8 <HAL_RCC_OscConfig+0x34c>)
 8005dc4:	400a      	ands	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fe fd82 	bl	80048d0 <HAL_GetTick>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dd2:	f7fe fd7d 	bl	80048d0 <HAL_GetTick>
 8005dd6:	0002      	movs	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e1e3      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005de4:	4b38      	ldr	r3, [pc, #224]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	2380      	movs	r3, #128	@ 0x80
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	4013      	ands	r3, r2
 8005dee:	d1f0      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x236>
 8005df0:	e000      	b.n	8005df4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005df2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d047      	beq.n	8005e8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005dfe:	4b32      	ldr	r3, [pc, #200]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2238      	movs	r2, #56	@ 0x38
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b18      	cmp	r3, #24
 8005e08:	d10a      	bne.n	8005e20 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0e:	2202      	movs	r2, #2
 8005e10:	4013      	ands	r3, r2
 8005e12:	d03c      	beq.n	8005e8e <HAL_RCC_OscConfig+0x2f2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d138      	bne.n	8005e8e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e1c5      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d019      	beq.n	8005e5c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005e28:	4b27      	ldr	r3, [pc, #156]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005e2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e2c:	4b26      	ldr	r3, [pc, #152]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005e2e:	2101      	movs	r1, #1
 8005e30:	430a      	orrs	r2, r1
 8005e32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fe fd4c 	bl	80048d0 <HAL_GetTick>
 8005e38:	0003      	movs	r3, r0
 8005e3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e3e:	f7fe fd47 	bl	80048d0 <HAL_GetTick>
 8005e42:	0002      	movs	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e1ad      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e50:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e54:	2202      	movs	r2, #2
 8005e56:	4013      	ands	r3, r2
 8005e58:	d0f1      	beq.n	8005e3e <HAL_RCC_OscConfig+0x2a2>
 8005e5a:	e018      	b.n	8005e8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005e5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e60:	4b19      	ldr	r3, [pc, #100]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005e62:	2101      	movs	r1, #1
 8005e64:	438a      	bics	r2, r1
 8005e66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fe fd32 	bl	80048d0 <HAL_GetTick>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e72:	f7fe fd2d 	bl	80048d0 <HAL_GetTick>
 8005e76:	0002      	movs	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e193      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e84:	4b10      	ldr	r3, [pc, #64]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e88:	2202      	movs	r2, #2
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d1f1      	bne.n	8005e72 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2204      	movs	r2, #4
 8005e94:	4013      	ands	r3, r2
 8005e96:	d100      	bne.n	8005e9a <HAL_RCC_OscConfig+0x2fe>
 8005e98:	e0c6      	b.n	8006028 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e9a:	231f      	movs	r3, #31
 8005e9c:	18fb      	adds	r3, r7, r3
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005ea2:	4b09      	ldr	r3, [pc, #36]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2238      	movs	r2, #56	@ 0x38
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	d11e      	bne.n	8005eec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005eae:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <HAL_RCC_OscConfig+0x32c>)
 8005eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d100      	bne.n	8005eba <HAL_RCC_OscConfig+0x31e>
 8005eb8:	e0b6      	b.n	8006028 <HAL_RCC_OscConfig+0x48c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d000      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x328>
 8005ec2:	e0b1      	b.n	8006028 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e171      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	fffeffff 	.word	0xfffeffff
 8005ed0:	fffbffff 	.word	0xfffbffff
 8005ed4:	ffff80ff 	.word	0xffff80ff
 8005ed8:	ffffc7ff 	.word	0xffffc7ff
 8005edc:	00f42400 	.word	0x00f42400
 8005ee0:	20000004 	.word	0x20000004
 8005ee4:	20000008 	.word	0x20000008
 8005ee8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005eec:	4bb1      	ldr	r3, [pc, #708]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005eee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ef0:	2380      	movs	r3, #128	@ 0x80
 8005ef2:	055b      	lsls	r3, r3, #21
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d101      	bne.n	8005efc <HAL_RCC_OscConfig+0x360>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <HAL_RCC_OscConfig+0x362>
 8005efc:	2300      	movs	r3, #0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d011      	beq.n	8005f26 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005f02:	4bac      	ldr	r3, [pc, #688]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005f04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f06:	4bab      	ldr	r3, [pc, #684]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005f08:	2180      	movs	r1, #128	@ 0x80
 8005f0a:	0549      	lsls	r1, r1, #21
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005f10:	4ba8      	ldr	r3, [pc, #672]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f14:	2380      	movs	r3, #128	@ 0x80
 8005f16:	055b      	lsls	r3, r3, #21
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005f1e:	231f      	movs	r3, #31
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f26:	4ba4      	ldr	r3, [pc, #656]	@ (80061b8 <HAL_RCC_OscConfig+0x61c>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	2380      	movs	r3, #128	@ 0x80
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d11a      	bne.n	8005f68 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f32:	4ba1      	ldr	r3, [pc, #644]	@ (80061b8 <HAL_RCC_OscConfig+0x61c>)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4ba0      	ldr	r3, [pc, #640]	@ (80061b8 <HAL_RCC_OscConfig+0x61c>)
 8005f38:	2180      	movs	r1, #128	@ 0x80
 8005f3a:	0049      	lsls	r1, r1, #1
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005f40:	f7fe fcc6 	bl	80048d0 <HAL_GetTick>
 8005f44:	0003      	movs	r3, r0
 8005f46:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4a:	f7fe fcc1 	bl	80048d0 <HAL_GetTick>
 8005f4e:	0002      	movs	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e127      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f5c:	4b96      	ldr	r3, [pc, #600]	@ (80061b8 <HAL_RCC_OscConfig+0x61c>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	2380      	movs	r3, #128	@ 0x80
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4013      	ands	r3, r2
 8005f66:	d0f0      	beq.n	8005f4a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d106      	bne.n	8005f7e <HAL_RCC_OscConfig+0x3e2>
 8005f70:	4b90      	ldr	r3, [pc, #576]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005f72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f74:	4b8f      	ldr	r3, [pc, #572]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005f76:	2101      	movs	r1, #1
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f7c:	e01c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x41c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d10c      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x404>
 8005f86:	4b8b      	ldr	r3, [pc, #556]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005f88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005f8c:	2104      	movs	r1, #4
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f92:	4b88      	ldr	r3, [pc, #544]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005f94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f96:	4b87      	ldr	r3, [pc, #540]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005f98:	2101      	movs	r1, #1
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f9e:	e00b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x41c>
 8005fa0:	4b84      	ldr	r3, [pc, #528]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005fa2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fa4:	4b83      	ldr	r3, [pc, #524]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	438a      	bics	r2, r1
 8005faa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fac:	4b81      	ldr	r3, [pc, #516]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005fae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fb0:	4b80      	ldr	r3, [pc, #512]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005fb2:	2104      	movs	r1, #4
 8005fb4:	438a      	bics	r2, r1
 8005fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d014      	beq.n	8005fea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fe fc86 	bl	80048d0 <HAL_GetTick>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc8:	e009      	b.n	8005fde <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fca:	f7fe fc81 	bl	80048d0 <HAL_GetTick>
 8005fce:	0002      	movs	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	4a79      	ldr	r2, [pc, #484]	@ (80061bc <HAL_RCC_OscConfig+0x620>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e0e6      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fde:	4b75      	ldr	r3, [pc, #468]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	d0f0      	beq.n	8005fca <HAL_RCC_OscConfig+0x42e>
 8005fe8:	e013      	b.n	8006012 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fea:	f7fe fc71 	bl	80048d0 <HAL_GetTick>
 8005fee:	0003      	movs	r3, r0
 8005ff0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ff2:	e009      	b.n	8006008 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff4:	f7fe fc6c 	bl	80048d0 <HAL_GetTick>
 8005ff8:	0002      	movs	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	4a6f      	ldr	r2, [pc, #444]	@ (80061bc <HAL_RCC_OscConfig+0x620>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e0d1      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006008:	4b6a      	ldr	r3, [pc, #424]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 800600a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600c:	2202      	movs	r2, #2
 800600e:	4013      	ands	r3, r2
 8006010:	d1f0      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006012:	231f      	movs	r3, #31
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d105      	bne.n	8006028 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800601c:	4b65      	ldr	r3, [pc, #404]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 800601e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006020:	4b64      	ldr	r3, [pc, #400]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8006022:	4967      	ldr	r1, [pc, #412]	@ (80061c0 <HAL_RCC_OscConfig+0x624>)
 8006024:	400a      	ands	r2, r1
 8006026:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d100      	bne.n	8006032 <HAL_RCC_OscConfig+0x496>
 8006030:	e0bb      	b.n	80061aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006032:	4b60      	ldr	r3, [pc, #384]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2238      	movs	r2, #56	@ 0x38
 8006038:	4013      	ands	r3, r2
 800603a:	2b10      	cmp	r3, #16
 800603c:	d100      	bne.n	8006040 <HAL_RCC_OscConfig+0x4a4>
 800603e:	e07b      	b.n	8006138 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d156      	bne.n	80060f6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006048:	4b5a      	ldr	r3, [pc, #360]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4b59      	ldr	r3, [pc, #356]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 800604e:	495d      	ldr	r1, [pc, #372]	@ (80061c4 <HAL_RCC_OscConfig+0x628>)
 8006050:	400a      	ands	r2, r1
 8006052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fe fc3c 	bl	80048d0 <HAL_GetTick>
 8006058:	0003      	movs	r3, r0
 800605a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605e:	f7fe fc37 	bl	80048d0 <HAL_GetTick>
 8006062:	0002      	movs	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e09d      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006070:	4b50      	ldr	r3, [pc, #320]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	2380      	movs	r3, #128	@ 0x80
 8006076:	049b      	lsls	r3, r3, #18
 8006078:	4013      	ands	r3, r2
 800607a:	d1f0      	bne.n	800605e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800607c:	4b4d      	ldr	r3, [pc, #308]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a51      	ldr	r2, [pc, #324]	@ (80061c8 <HAL_RCC_OscConfig+0x62c>)
 8006082:	4013      	ands	r3, r2
 8006084:	0019      	movs	r1, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a8:	431a      	orrs	r2, r3
 80060aa:	4b42      	ldr	r3, [pc, #264]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 80060ac:	430a      	orrs	r2, r1
 80060ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b0:	4b40      	ldr	r3, [pc, #256]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b3f      	ldr	r3, [pc, #252]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 80060b6:	2180      	movs	r1, #128	@ 0x80
 80060b8:	0449      	lsls	r1, r1, #17
 80060ba:	430a      	orrs	r2, r1
 80060bc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80060be:	4b3d      	ldr	r3, [pc, #244]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	4b3c      	ldr	r3, [pc, #240]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 80060c4:	2180      	movs	r1, #128	@ 0x80
 80060c6:	0549      	lsls	r1, r1, #21
 80060c8:	430a      	orrs	r2, r1
 80060ca:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060cc:	f7fe fc00 	bl	80048d0 <HAL_GetTick>
 80060d0:	0003      	movs	r3, r0
 80060d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d6:	f7fe fbfb 	bl	80048d0 <HAL_GetTick>
 80060da:	0002      	movs	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e061      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e8:	4b32      	ldr	r3, [pc, #200]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	2380      	movs	r3, #128	@ 0x80
 80060ee:	049b      	lsls	r3, r3, #18
 80060f0:	4013      	ands	r3, r2
 80060f2:	d0f0      	beq.n	80060d6 <HAL_RCC_OscConfig+0x53a>
 80060f4:	e059      	b.n	80061aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f6:	4b2f      	ldr	r3, [pc, #188]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b2e      	ldr	r3, [pc, #184]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 80060fc:	4931      	ldr	r1, [pc, #196]	@ (80061c4 <HAL_RCC_OscConfig+0x628>)
 80060fe:	400a      	ands	r2, r1
 8006100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006102:	f7fe fbe5 	bl	80048d0 <HAL_GetTick>
 8006106:	0003      	movs	r3, r0
 8006108:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800610c:	f7fe fbe0 	bl	80048d0 <HAL_GetTick>
 8006110:	0002      	movs	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e046      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800611e:	4b25      	ldr	r3, [pc, #148]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	2380      	movs	r3, #128	@ 0x80
 8006124:	049b      	lsls	r3, r3, #18
 8006126:	4013      	ands	r3, r2
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800612a:	4b22      	ldr	r3, [pc, #136]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	4b21      	ldr	r3, [pc, #132]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8006130:	4926      	ldr	r1, [pc, #152]	@ (80061cc <HAL_RCC_OscConfig+0x630>)
 8006132:	400a      	ands	r2, r1
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	e038      	b.n	80061aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e033      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006144:	4b1b      	ldr	r3, [pc, #108]	@ (80061b4 <HAL_RCC_OscConfig+0x618>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2203      	movs	r2, #3
 800614e:	401a      	ands	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	429a      	cmp	r2, r3
 8006156:	d126      	bne.n	80061a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2270      	movs	r2, #112	@ 0x70
 800615c:	401a      	ands	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006162:	429a      	cmp	r2, r3
 8006164:	d11f      	bne.n	80061a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	23fe      	movs	r3, #254	@ 0xfe
 800616a:	01db      	lsls	r3, r3, #7
 800616c:	401a      	ands	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006172:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d116      	bne.n	80061a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	23f8      	movs	r3, #248	@ 0xf8
 800617c:	039b      	lsls	r3, r3, #14
 800617e:	401a      	ands	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d10e      	bne.n	80061a6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	23e0      	movs	r3, #224	@ 0xe0
 800618c:	051b      	lsls	r3, r3, #20
 800618e:	401a      	ands	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d106      	bne.n	80061a6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	0f5b      	lsrs	r3, r3, #29
 800619c:	075a      	lsls	r2, r3, #29
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d001      	beq.n	80061aa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	0018      	movs	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b008      	add	sp, #32
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40021000 	.word	0x40021000
 80061b8:	40007000 	.word	0x40007000
 80061bc:	00001388 	.word	0x00001388
 80061c0:	efffffff 	.word	0xefffffff
 80061c4:	feffffff 	.word	0xfeffffff
 80061c8:	11c1808c 	.word	0x11c1808c
 80061cc:	eefefffc 	.word	0xeefefffc

080061d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0e9      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061e4:	4b76      	ldr	r3, [pc, #472]	@ (80063c0 <HAL_RCC_ClockConfig+0x1f0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2207      	movs	r2, #7
 80061ea:	4013      	ands	r3, r2
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d91e      	bls.n	8006230 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b73      	ldr	r3, [pc, #460]	@ (80063c0 <HAL_RCC_ClockConfig+0x1f0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2207      	movs	r2, #7
 80061f8:	4393      	bics	r3, r2
 80061fa:	0019      	movs	r1, r3
 80061fc:	4b70      	ldr	r3, [pc, #448]	@ (80063c0 <HAL_RCC_ClockConfig+0x1f0>)
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006204:	f7fe fb64 	bl	80048d0 <HAL_GetTick>
 8006208:	0003      	movs	r3, r0
 800620a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800620c:	e009      	b.n	8006222 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800620e:	f7fe fb5f 	bl	80048d0 <HAL_GetTick>
 8006212:	0002      	movs	r2, r0
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	4a6a      	ldr	r2, [pc, #424]	@ (80063c4 <HAL_RCC_ClockConfig+0x1f4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e0ca      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006222:	4b67      	ldr	r3, [pc, #412]	@ (80063c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2207      	movs	r2, #7
 8006228:	4013      	ands	r3, r2
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d1ee      	bne.n	800620e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2202      	movs	r2, #2
 8006236:	4013      	ands	r3, r2
 8006238:	d015      	beq.n	8006266 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2204      	movs	r2, #4
 8006240:	4013      	ands	r3, r2
 8006242:	d006      	beq.n	8006252 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006244:	4b60      	ldr	r3, [pc, #384]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	4b5f      	ldr	r3, [pc, #380]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 800624a:	21e0      	movs	r1, #224	@ 0xe0
 800624c:	01c9      	lsls	r1, r1, #7
 800624e:	430a      	orrs	r2, r1
 8006250:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006252:	4b5d      	ldr	r3, [pc, #372]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	4a5d      	ldr	r2, [pc, #372]	@ (80063cc <HAL_RCC_ClockConfig+0x1fc>)
 8006258:	4013      	ands	r3, r2
 800625a:	0019      	movs	r1, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	4b59      	ldr	r3, [pc, #356]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006262:	430a      	orrs	r2, r1
 8006264:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2201      	movs	r2, #1
 800626c:	4013      	ands	r3, r2
 800626e:	d057      	beq.n	8006320 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006278:	4b53      	ldr	r3, [pc, #332]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	2380      	movs	r3, #128	@ 0x80
 800627e:	029b      	lsls	r3, r3, #10
 8006280:	4013      	ands	r3, r2
 8006282:	d12b      	bne.n	80062dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e097      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d107      	bne.n	80062a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006290:	4b4d      	ldr	r3, [pc, #308]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	2380      	movs	r3, #128	@ 0x80
 8006296:	049b      	lsls	r3, r3, #18
 8006298:	4013      	ands	r3, r2
 800629a:	d11f      	bne.n	80062dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e08b      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d107      	bne.n	80062b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062a8:	4b47      	ldr	r3, [pc, #284]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	2380      	movs	r3, #128	@ 0x80
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4013      	ands	r3, r2
 80062b2:	d113      	bne.n	80062dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e07f      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d106      	bne.n	80062ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062c0:	4b41      	ldr	r3, [pc, #260]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 80062c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c4:	2202      	movs	r2, #2
 80062c6:	4013      	ands	r3, r2
 80062c8:	d108      	bne.n	80062dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e074      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ce:	4b3e      	ldr	r3, [pc, #248]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 80062d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d2:	2202      	movs	r2, #2
 80062d4:	4013      	ands	r3, r2
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e06d      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062dc:	4b3a      	ldr	r3, [pc, #232]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2207      	movs	r2, #7
 80062e2:	4393      	bics	r3, r2
 80062e4:	0019      	movs	r1, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	4b37      	ldr	r3, [pc, #220]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 80062ec:	430a      	orrs	r2, r1
 80062ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f0:	f7fe faee 	bl	80048d0 <HAL_GetTick>
 80062f4:	0003      	movs	r3, r0
 80062f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f8:	e009      	b.n	800630e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062fa:	f7fe fae9 	bl	80048d0 <HAL_GetTick>
 80062fe:	0002      	movs	r2, r0
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	4a2f      	ldr	r2, [pc, #188]	@ (80063c4 <HAL_RCC_ClockConfig+0x1f4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e054      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630e:	4b2e      	ldr	r3, [pc, #184]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2238      	movs	r2, #56	@ 0x38
 8006314:	401a      	ands	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	429a      	cmp	r2, r3
 800631e:	d1ec      	bne.n	80062fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006320:	4b27      	ldr	r3, [pc, #156]	@ (80063c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2207      	movs	r2, #7
 8006326:	4013      	ands	r3, r2
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d21e      	bcs.n	800636c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632e:	4b24      	ldr	r3, [pc, #144]	@ (80063c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2207      	movs	r2, #7
 8006334:	4393      	bics	r3, r2
 8006336:	0019      	movs	r1, r3
 8006338:	4b21      	ldr	r3, [pc, #132]	@ (80063c0 <HAL_RCC_ClockConfig+0x1f0>)
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006340:	f7fe fac6 	bl	80048d0 <HAL_GetTick>
 8006344:	0003      	movs	r3, r0
 8006346:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006348:	e009      	b.n	800635e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800634a:	f7fe fac1 	bl	80048d0 <HAL_GetTick>
 800634e:	0002      	movs	r2, r0
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	4a1b      	ldr	r2, [pc, #108]	@ (80063c4 <HAL_RCC_ClockConfig+0x1f4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e02c      	b.n	80063b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800635e:	4b18      	ldr	r3, [pc, #96]	@ (80063c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2207      	movs	r2, #7
 8006364:	4013      	ands	r3, r2
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d1ee      	bne.n	800634a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2204      	movs	r2, #4
 8006372:	4013      	ands	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006376:	4b14      	ldr	r3, [pc, #80]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	4a15      	ldr	r2, [pc, #84]	@ (80063d0 <HAL_RCC_ClockConfig+0x200>)
 800637c:	4013      	ands	r3, r2
 800637e:	0019      	movs	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	4b10      	ldr	r3, [pc, #64]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006386:	430a      	orrs	r2, r1
 8006388:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800638a:	f000 f829 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 800638e:	0001      	movs	r1, r0
 8006390:	4b0d      	ldr	r3, [pc, #52]	@ (80063c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	220f      	movs	r2, #15
 8006398:	401a      	ands	r2, r3
 800639a:	4b0e      	ldr	r3, [pc, #56]	@ (80063d4 <HAL_RCC_ClockConfig+0x204>)
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	58d3      	ldr	r3, [r2, r3]
 80063a0:	221f      	movs	r2, #31
 80063a2:	4013      	ands	r3, r2
 80063a4:	000a      	movs	r2, r1
 80063a6:	40da      	lsrs	r2, r3
 80063a8:	4b0b      	ldr	r3, [pc, #44]	@ (80063d8 <HAL_RCC_ClockConfig+0x208>)
 80063aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80063ac:	4b0b      	ldr	r3, [pc, #44]	@ (80063dc <HAL_RCC_ClockConfig+0x20c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	0018      	movs	r0, r3
 80063b2:	f7fe fa31 	bl	8004818 <HAL_InitTick>
 80063b6:	0003      	movs	r3, r0
}
 80063b8:	0018      	movs	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b004      	add	sp, #16
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40022000 	.word	0x40022000
 80063c4:	00001388 	.word	0x00001388
 80063c8:	40021000 	.word	0x40021000
 80063cc:	fffff0ff 	.word	0xfffff0ff
 80063d0:	ffff8fff 	.word	0xffff8fff
 80063d4:	08008440 	.word	0x08008440
 80063d8:	20000004 	.word	0x20000004
 80063dc:	20000008 	.word	0x20000008

080063e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063e6:	4b3c      	ldr	r3, [pc, #240]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2238      	movs	r2, #56	@ 0x38
 80063ec:	4013      	ands	r3, r2
 80063ee:	d10f      	bne.n	8006410 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80063f0:	4b39      	ldr	r3, [pc, #228]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	0adb      	lsrs	r3, r3, #11
 80063f6:	2207      	movs	r2, #7
 80063f8:	4013      	ands	r3, r2
 80063fa:	2201      	movs	r2, #1
 80063fc:	409a      	lsls	r2, r3
 80063fe:	0013      	movs	r3, r2
 8006400:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	4835      	ldr	r0, [pc, #212]	@ (80064dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8006406:	f7f9 fe8f 	bl	8000128 <__udivsi3>
 800640a:	0003      	movs	r3, r0
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	e05d      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006410:	4b31      	ldr	r3, [pc, #196]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2238      	movs	r2, #56	@ 0x38
 8006416:	4013      	ands	r3, r2
 8006418:	2b08      	cmp	r3, #8
 800641a:	d102      	bne.n	8006422 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800641c:	4b30      	ldr	r3, [pc, #192]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	e054      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006422:	4b2d      	ldr	r3, [pc, #180]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2238      	movs	r2, #56	@ 0x38
 8006428:	4013      	ands	r3, r2
 800642a:	2b10      	cmp	r3, #16
 800642c:	d138      	bne.n	80064a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800642e:	4b2a      	ldr	r3, [pc, #168]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2203      	movs	r2, #3
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006438:	4b27      	ldr	r3, [pc, #156]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	2207      	movs	r2, #7
 8006440:	4013      	ands	r3, r2
 8006442:	3301      	adds	r3, #1
 8006444:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d10d      	bne.n	8006468 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	4824      	ldr	r0, [pc, #144]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8006450:	f7f9 fe6a 	bl	8000128 <__udivsi3>
 8006454:	0003      	movs	r3, r0
 8006456:	0019      	movs	r1, r3
 8006458:	4b1f      	ldr	r3, [pc, #124]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	0a1b      	lsrs	r3, r3, #8
 800645e:	227f      	movs	r2, #127	@ 0x7f
 8006460:	4013      	ands	r3, r2
 8006462:	434b      	muls	r3, r1
 8006464:	617b      	str	r3, [r7, #20]
        break;
 8006466:	e00d      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	481c      	ldr	r0, [pc, #112]	@ (80064dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800646c:	f7f9 fe5c 	bl	8000128 <__udivsi3>
 8006470:	0003      	movs	r3, r0
 8006472:	0019      	movs	r1, r3
 8006474:	4b18      	ldr	r3, [pc, #96]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	227f      	movs	r2, #127	@ 0x7f
 800647c:	4013      	ands	r3, r2
 800647e:	434b      	muls	r3, r1
 8006480:	617b      	str	r3, [r7, #20]
        break;
 8006482:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006484:	4b14      	ldr	r3, [pc, #80]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	0f5b      	lsrs	r3, r3, #29
 800648a:	2207      	movs	r2, #7
 800648c:	4013      	ands	r3, r2
 800648e:	3301      	adds	r3, #1
 8006490:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	6978      	ldr	r0, [r7, #20]
 8006496:	f7f9 fe47 	bl	8000128 <__udivsi3>
 800649a:	0003      	movs	r3, r0
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e015      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80064a0:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2238      	movs	r2, #56	@ 0x38
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d103      	bne.n	80064b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80064ac:	2380      	movs	r3, #128	@ 0x80
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	e00b      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80064b4:	4b08      	ldr	r3, [pc, #32]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2238      	movs	r2, #56	@ 0x38
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b18      	cmp	r3, #24
 80064be:	d103      	bne.n	80064c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80064c0:	23fa      	movs	r3, #250	@ 0xfa
 80064c2:	01db      	lsls	r3, r3, #7
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	e001      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80064cc:	693b      	ldr	r3, [r7, #16]
}
 80064ce:	0018      	movs	r0, r3
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b006      	add	sp, #24
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	40021000 	.word	0x40021000
 80064dc:	00f42400 	.word	0x00f42400
 80064e0:	007a1200 	.word	0x007a1200

080064e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064e8:	4b02      	ldr	r3, [pc, #8]	@ (80064f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80064ea:	681b      	ldr	r3, [r3, #0]
}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	20000004 	.word	0x20000004

080064f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80064fc:	f7ff fff2 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 8006500:	0004      	movs	r4, r0
 8006502:	f7ff fb3f 	bl	8005b84 <LL_RCC_GetAPB1Prescaler>
 8006506:	0003      	movs	r3, r0
 8006508:	0b1a      	lsrs	r2, r3, #12
 800650a:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800650c:	0092      	lsls	r2, r2, #2
 800650e:	58d3      	ldr	r3, [r2, r3]
 8006510:	221f      	movs	r2, #31
 8006512:	4013      	ands	r3, r2
 8006514:	40dc      	lsrs	r4, r3
 8006516:	0023      	movs	r3, r4
}
 8006518:	0018      	movs	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	bdb0      	pop	{r4, r5, r7, pc}
 800651e:	46c0      	nop			@ (mov r8, r8)
 8006520:	08008480 	.word	0x08008480

08006524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800652c:	2313      	movs	r3, #19
 800652e:	18fb      	adds	r3, r7, r3
 8006530:	2200      	movs	r2, #0
 8006532:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006534:	2312      	movs	r3, #18
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	2380      	movs	r3, #128	@ 0x80
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	4013      	ands	r3, r2
 8006546:	d100      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006548:	e0a3      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654a:	2011      	movs	r0, #17
 800654c:	183b      	adds	r3, r7, r0
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006552:	4bc3      	ldr	r3, [pc, #780]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006554:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006556:	2380      	movs	r3, #128	@ 0x80
 8006558:	055b      	lsls	r3, r3, #21
 800655a:	4013      	ands	r3, r2
 800655c:	d110      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655e:	4bc0      	ldr	r3, [pc, #768]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006562:	4bbf      	ldr	r3, [pc, #764]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006564:	2180      	movs	r1, #128	@ 0x80
 8006566:	0549      	lsls	r1, r1, #21
 8006568:	430a      	orrs	r2, r1
 800656a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800656c:	4bbc      	ldr	r3, [pc, #752]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800656e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006570:	2380      	movs	r3, #128	@ 0x80
 8006572:	055b      	lsls	r3, r3, #21
 8006574:	4013      	ands	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]
 8006578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800657a:	183b      	adds	r3, r7, r0
 800657c:	2201      	movs	r2, #1
 800657e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006580:	4bb8      	ldr	r3, [pc, #736]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4bb7      	ldr	r3, [pc, #732]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006586:	2180      	movs	r1, #128	@ 0x80
 8006588:	0049      	lsls	r1, r1, #1
 800658a:	430a      	orrs	r2, r1
 800658c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800658e:	f7fe f99f 	bl	80048d0 <HAL_GetTick>
 8006592:	0003      	movs	r3, r0
 8006594:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006596:	e00b      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006598:	f7fe f99a 	bl	80048d0 <HAL_GetTick>
 800659c:	0002      	movs	r2, r0
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d904      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80065a6:	2313      	movs	r3, #19
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	2203      	movs	r2, #3
 80065ac:	701a      	strb	r2, [r3, #0]
        break;
 80065ae:	e005      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065b0:	4bac      	ldr	r3, [pc, #688]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	2380      	movs	r3, #128	@ 0x80
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	4013      	ands	r3, r2
 80065ba:	d0ed      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80065bc:	2313      	movs	r3, #19
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d154      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065c6:	4ba6      	ldr	r3, [pc, #664]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065ca:	23c0      	movs	r3, #192	@ 0xc0
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4013      	ands	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d019      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d014      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065e2:	4b9f      	ldr	r3, [pc, #636]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e6:	4aa0      	ldr	r2, [pc, #640]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065ec:	4b9c      	ldr	r3, [pc, #624]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065f0:	4b9b      	ldr	r3, [pc, #620]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065f2:	2180      	movs	r1, #128	@ 0x80
 80065f4:	0249      	lsls	r1, r1, #9
 80065f6:	430a      	orrs	r2, r1
 80065f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065fa:	4b99      	ldr	r3, [pc, #612]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065fe:	4b98      	ldr	r3, [pc, #608]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006600:	499a      	ldr	r1, [pc, #616]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006602:	400a      	ands	r2, r1
 8006604:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006606:	4b96      	ldr	r3, [pc, #600]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2201      	movs	r2, #1
 8006610:	4013      	ands	r3, r2
 8006612:	d016      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fe f95c 	bl	80048d0 <HAL_GetTick>
 8006618:	0003      	movs	r3, r0
 800661a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800661c:	e00c      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800661e:	f7fe f957 	bl	80048d0 <HAL_GetTick>
 8006622:	0002      	movs	r2, r0
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	4a91      	ldr	r2, [pc, #580]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d904      	bls.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800662e:	2313      	movs	r3, #19
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	2203      	movs	r2, #3
 8006634:	701a      	strb	r2, [r3, #0]
            break;
 8006636:	e004      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006638:	4b89      	ldr	r3, [pc, #548]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800663a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800663c:	2202      	movs	r2, #2
 800663e:	4013      	ands	r3, r2
 8006640:	d0ed      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006642:	2313      	movs	r3, #19
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800664c:	4b84      	ldr	r3, [pc, #528]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800664e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006650:	4a85      	ldr	r2, [pc, #532]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006652:	4013      	ands	r3, r2
 8006654:	0019      	movs	r1, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800665a:	4b81      	ldr	r3, [pc, #516]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800665c:	430a      	orrs	r2, r1
 800665e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006660:	e00c      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006662:	2312      	movs	r3, #18
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	2213      	movs	r2, #19
 8006668:	18ba      	adds	r2, r7, r2
 800666a:	7812      	ldrb	r2, [r2, #0]
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e005      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	2312      	movs	r3, #18
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	2213      	movs	r2, #19
 8006676:	18ba      	adds	r2, r7, r2
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800667c:	2311      	movs	r3, #17
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d105      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006686:	4b76      	ldr	r3, [pc, #472]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800668a:	4b75      	ldr	r3, [pc, #468]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800668c:	4979      	ldr	r1, [pc, #484]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800668e:	400a      	ands	r2, r1
 8006690:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2201      	movs	r2, #1
 8006698:	4013      	ands	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800669c:	4b70      	ldr	r3, [pc, #448]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800669e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a0:	2203      	movs	r2, #3
 80066a2:	4393      	bics	r3, r2
 80066a4:	0019      	movs	r1, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066ac:	430a      	orrs	r2, r1
 80066ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2202      	movs	r2, #2
 80066b6:	4013      	ands	r3, r2
 80066b8:	d009      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066ba:	4b69      	ldr	r3, [pc, #420]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066be:	220c      	movs	r2, #12
 80066c0:	4393      	bics	r3, r2
 80066c2:	0019      	movs	r1, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	4b65      	ldr	r3, [pc, #404]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066ca:	430a      	orrs	r2, r1
 80066cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2210      	movs	r2, #16
 80066d4:	4013      	ands	r3, r2
 80066d6:	d009      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066d8:	4b61      	ldr	r3, [pc, #388]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066dc:	4a66      	ldr	r2, [pc, #408]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80066de:	4013      	ands	r3, r2
 80066e0:	0019      	movs	r1, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	4b5e      	ldr	r3, [pc, #376]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066e8:	430a      	orrs	r2, r1
 80066ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	2380      	movs	r3, #128	@ 0x80
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4013      	ands	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066f8:	4b59      	ldr	r3, [pc, #356]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fc:	4a5f      	ldr	r2, [pc, #380]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066fe:	4013      	ands	r3, r2
 8006700:	0019      	movs	r1, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	4b56      	ldr	r3, [pc, #344]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006708:	430a      	orrs	r2, r1
 800670a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	2380      	movs	r3, #128	@ 0x80
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4013      	ands	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006718:	4b51      	ldr	r3, [pc, #324]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800671a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671c:	4a58      	ldr	r2, [pc, #352]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800671e:	4013      	ands	r3, r2
 8006720:	0019      	movs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69da      	ldr	r2, [r3, #28]
 8006726:	4b4e      	ldr	r3, [pc, #312]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006728:	430a      	orrs	r2, r1
 800672a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2220      	movs	r2, #32
 8006732:	4013      	ands	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006736:	4b4a      	ldr	r3, [pc, #296]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673a:	4a52      	ldr	r2, [pc, #328]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800673c:	4013      	ands	r3, r2
 800673e:	0019      	movs	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	4b46      	ldr	r3, [pc, #280]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006746:	430a      	orrs	r2, r1
 8006748:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	2380      	movs	r3, #128	@ 0x80
 8006750:	01db      	lsls	r3, r3, #7
 8006752:	4013      	ands	r3, r2
 8006754:	d015      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006756:	4b42      	ldr	r3, [pc, #264]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	0899      	lsrs	r1, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1a      	ldr	r2, [r3, #32]
 8006762:	4b3f      	ldr	r3, [pc, #252]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006764:	430a      	orrs	r2, r1
 8006766:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1a      	ldr	r2, [r3, #32]
 800676c:	2380      	movs	r3, #128	@ 0x80
 800676e:	05db      	lsls	r3, r3, #23
 8006770:	429a      	cmp	r2, r3
 8006772:	d106      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006774:	4b3a      	ldr	r3, [pc, #232]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	4b39      	ldr	r3, [pc, #228]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800677a:	2180      	movs	r1, #128	@ 0x80
 800677c:	0249      	lsls	r1, r1, #9
 800677e:	430a      	orrs	r2, r1
 8006780:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	2380      	movs	r3, #128	@ 0x80
 8006788:	031b      	lsls	r3, r3, #12
 800678a:	4013      	ands	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800678e:	4b34      	ldr	r3, [pc, #208]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006792:	2240      	movs	r2, #64	@ 0x40
 8006794:	4393      	bics	r3, r2
 8006796:	0019      	movs	r1, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800679c:	4b30      	ldr	r3, [pc, #192]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800679e:	430a      	orrs	r2, r1
 80067a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	2380      	movs	r3, #128	@ 0x80
 80067a8:	039b      	lsls	r3, r3, #14
 80067aa:	4013      	ands	r3, r2
 80067ac:	d016      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80067ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b2:	4a35      	ldr	r2, [pc, #212]	@ (8006888 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	0019      	movs	r1, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067bc:	4b28      	ldr	r3, [pc, #160]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067be:	430a      	orrs	r2, r1
 80067c0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067c6:	2380      	movs	r3, #128	@ 0x80
 80067c8:	03db      	lsls	r3, r3, #15
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d106      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067ce:	4b24      	ldr	r3, [pc, #144]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	4b23      	ldr	r3, [pc, #140]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067d4:	2180      	movs	r1, #128	@ 0x80
 80067d6:	0449      	lsls	r1, r1, #17
 80067d8:	430a      	orrs	r2, r1
 80067da:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	2380      	movs	r3, #128	@ 0x80
 80067e2:	03db      	lsls	r3, r3, #15
 80067e4:	4013      	ands	r3, r2
 80067e6:	d016      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80067e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ec:	4a27      	ldr	r2, [pc, #156]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	0019      	movs	r1, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067f8:	430a      	orrs	r2, r1
 80067fa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006800:	2380      	movs	r3, #128	@ 0x80
 8006802:	045b      	lsls	r3, r3, #17
 8006804:	429a      	cmp	r2, r3
 8006806:	d106      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006808:	4b15      	ldr	r3, [pc, #84]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	4b14      	ldr	r3, [pc, #80]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800680e:	2180      	movs	r1, #128	@ 0x80
 8006810:	0449      	lsls	r1, r1, #17
 8006812:	430a      	orrs	r2, r1
 8006814:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	2380      	movs	r3, #128	@ 0x80
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	4013      	ands	r3, r2
 8006820:	d016      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006822:	4b0f      	ldr	r3, [pc, #60]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006826:	4a1a      	ldr	r2, [pc, #104]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006828:	4013      	ands	r3, r2
 800682a:	0019      	movs	r1, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006832:	430a      	orrs	r2, r1
 8006834:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	2380      	movs	r3, #128	@ 0x80
 800683c:	01db      	lsls	r3, r3, #7
 800683e:	429a      	cmp	r2, r3
 8006840:	d106      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006842:	4b07      	ldr	r3, [pc, #28]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006848:	2180      	movs	r1, #128	@ 0x80
 800684a:	0249      	lsls	r1, r1, #9
 800684c:	430a      	orrs	r2, r1
 800684e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006850:	2312      	movs	r3, #18
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	781b      	ldrb	r3, [r3, #0]
}
 8006856:	0018      	movs	r0, r3
 8006858:	46bd      	mov	sp, r7
 800685a:	b006      	add	sp, #24
 800685c:	bd80      	pop	{r7, pc}
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	40021000 	.word	0x40021000
 8006864:	40007000 	.word	0x40007000
 8006868:	fffffcff 	.word	0xfffffcff
 800686c:	fffeffff 	.word	0xfffeffff
 8006870:	00001388 	.word	0x00001388
 8006874:	efffffff 	.word	0xefffffff
 8006878:	fffff3ff 	.word	0xfffff3ff
 800687c:	fff3ffff 	.word	0xfff3ffff
 8006880:	ffcfffff 	.word	0xffcfffff
 8006884:	ffffcfff 	.word	0xffffcfff
 8006888:	ffbfffff 	.word	0xffbfffff
 800688c:	feffffff 	.word	0xfeffffff
 8006890:	ffff3fff 	.word	0xffff3fff

08006894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e0a8      	b.n	80069f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	2382      	movs	r3, #130	@ 0x82
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d009      	beq.n	80068ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	61da      	str	r2, [r3, #28]
 80068c0:	e005      	b.n	80068ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	225d      	movs	r2, #93	@ 0x5d
 80068d8:	5c9b      	ldrb	r3, [r3, r2]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d107      	bne.n	80068f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	225c      	movs	r2, #92	@ 0x5c
 80068e4:	2100      	movs	r1, #0
 80068e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	0018      	movs	r0, r3
 80068ec:	f7fd fe4a 	bl	8004584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	225d      	movs	r2, #93	@ 0x5d
 80068f4:	2102      	movs	r1, #2
 80068f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2140      	movs	r1, #64	@ 0x40
 8006904:	438a      	bics	r2, r1
 8006906:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	23e0      	movs	r3, #224	@ 0xe0
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	429a      	cmp	r2, r3
 8006912:	d902      	bls.n	800691a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e002      	b.n	8006920 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800691a:	2380      	movs	r3, #128	@ 0x80
 800691c:	015b      	lsls	r3, r3, #5
 800691e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	23f0      	movs	r3, #240	@ 0xf0
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	429a      	cmp	r2, r3
 800692a:	d008      	beq.n	800693e <HAL_SPI_Init+0xaa>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	23e0      	movs	r3, #224	@ 0xe0
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	429a      	cmp	r2, r3
 8006936:	d002      	beq.n	800693e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	2382      	movs	r3, #130	@ 0x82
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	401a      	ands	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6899      	ldr	r1, [r3, #8]
 800694c:	2384      	movs	r3, #132	@ 0x84
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	400b      	ands	r3, r1
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2102      	movs	r1, #2
 800695a:	400b      	ands	r3, r1
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	2101      	movs	r1, #1
 8006964:	400b      	ands	r3, r1
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6999      	ldr	r1, [r3, #24]
 800696c:	2380      	movs	r3, #128	@ 0x80
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	400b      	ands	r3, r1
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	2138      	movs	r1, #56	@ 0x38
 800697a:	400b      	ands	r3, r1
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	2180      	movs	r1, #128	@ 0x80
 8006984:	400b      	ands	r3, r1
 8006986:	431a      	orrs	r2, r3
 8006988:	0011      	movs	r1, r2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800698e:	2380      	movs	r3, #128	@ 0x80
 8006990:	019b      	lsls	r3, r3, #6
 8006992:	401a      	ands	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	0c1b      	lsrs	r3, r3, #16
 80069a2:	2204      	movs	r2, #4
 80069a4:	401a      	ands	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	2110      	movs	r1, #16
 80069ac:	400b      	ands	r3, r1
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b4:	2108      	movs	r1, #8
 80069b6:	400b      	ands	r3, r1
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68d9      	ldr	r1, [r3, #12]
 80069be:	23f0      	movs	r3, #240	@ 0xf0
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	400b      	ands	r3, r1
 80069c4:	431a      	orrs	r2, r3
 80069c6:	0011      	movs	r1, r2
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	2380      	movs	r3, #128	@ 0x80
 80069cc:	015b      	lsls	r3, r3, #5
 80069ce:	401a      	ands	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4907      	ldr	r1, [pc, #28]	@ (8006a00 <HAL_SPI_Init+0x16c>)
 80069e4:	400a      	ands	r2, r1
 80069e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	225d      	movs	r2, #93	@ 0x5d
 80069f2:	2101      	movs	r1, #1
 80069f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	0018      	movs	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b004      	add	sp, #16
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	fffff7ff 	.word	0xfffff7ff

08006a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e046      	b.n	8006aa4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2288      	movs	r2, #136	@ 0x88
 8006a1a:	589b      	ldr	r3, [r3, r2]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d107      	bne.n	8006a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2284      	movs	r2, #132	@ 0x84
 8006a24:	2100      	movs	r1, #0
 8006a26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f7fd fdf4 	bl	8004618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2288      	movs	r2, #136	@ 0x88
 8006a34:	2124      	movs	r1, #36	@ 0x24
 8006a36:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2101      	movs	r1, #1
 8006a44:	438a      	bics	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	0018      	movs	r0, r3
 8006a54:	f000 fb8e 	bl	8007174 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 f8cc 	bl	8006bf8 <UART_SetConfig>
 8006a60:	0003      	movs	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e01c      	b.n	8006aa4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	490d      	ldr	r1, [pc, #52]	@ (8006aac <HAL_UART_Init+0xa8>)
 8006a76:	400a      	ands	r2, r1
 8006a78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	212a      	movs	r1, #42	@ 0x2a
 8006a86:	438a      	bics	r2, r1
 8006a88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2101      	movs	r1, #1
 8006a96:	430a      	orrs	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f000 fc1d 	bl	80072dc <UART_CheckIdleState>
 8006aa2:	0003      	movs	r3, r0
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b002      	add	sp, #8
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	ffffb7ff 	.word	0xffffb7ff

08006ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	@ 0x28
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	1dbb      	adds	r3, r7, #6
 8006abe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2288      	movs	r2, #136	@ 0x88
 8006ac4:	589b      	ldr	r3, [r3, r2]
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d000      	beq.n	8006acc <HAL_UART_Transmit+0x1c>
 8006aca:	e090      	b.n	8006bee <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_UART_Transmit+0x2a>
 8006ad2:	1dbb      	adds	r3, r7, #6
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e088      	b.n	8006bf0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	2380      	movs	r3, #128	@ 0x80
 8006ae4:	015b      	lsls	r3, r3, #5
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d109      	bne.n	8006afe <HAL_UART_Transmit+0x4e>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d105      	bne.n	8006afe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2201      	movs	r2, #1
 8006af6:	4013      	ands	r3, r2
 8006af8:	d001      	beq.n	8006afe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e078      	b.n	8006bf0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2290      	movs	r2, #144	@ 0x90
 8006b02:	2100      	movs	r1, #0
 8006b04:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2288      	movs	r2, #136	@ 0x88
 8006b0a:	2121      	movs	r1, #33	@ 0x21
 8006b0c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b0e:	f7fd fedf 	bl	80048d0 <HAL_GetTick>
 8006b12:	0003      	movs	r3, r0
 8006b14:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1dba      	adds	r2, r7, #6
 8006b1a:	2154      	movs	r1, #84	@ 0x54
 8006b1c:	8812      	ldrh	r2, [r2, #0]
 8006b1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	1dba      	adds	r2, r7, #6
 8006b24:	2156      	movs	r1, #86	@ 0x56
 8006b26:	8812      	ldrh	r2, [r2, #0]
 8006b28:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	689a      	ldr	r2, [r3, #8]
 8006b2e:	2380      	movs	r3, #128	@ 0x80
 8006b30:	015b      	lsls	r3, r3, #5
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d108      	bne.n	8006b48 <HAL_UART_Transmit+0x98>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d104      	bne.n	8006b48 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	61bb      	str	r3, [r7, #24]
 8006b46:	e003      	b.n	8006b50 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b50:	e030      	b.n	8006bb4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	0013      	movs	r3, r2
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2180      	movs	r1, #128	@ 0x80
 8006b60:	f000 fc66 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 8006b64:	1e03      	subs	r3, r0, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2288      	movs	r2, #136	@ 0x88
 8006b6c:	2120      	movs	r1, #32
 8006b6e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e03d      	b.n	8006bf0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	001a      	movs	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	05d2      	lsls	r2, r2, #23
 8006b86:	0dd2      	lsrs	r2, r2, #23
 8006b88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	61bb      	str	r3, [r7, #24]
 8006b90:	e007      	b.n	8006ba2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	781a      	ldrb	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2256      	movs	r2, #86	@ 0x56
 8006ba6:	5a9b      	ldrh	r3, [r3, r2]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b299      	uxth	r1, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2256      	movs	r2, #86	@ 0x56
 8006bb2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2256      	movs	r2, #86	@ 0x56
 8006bb8:	5a9b      	ldrh	r3, [r3, r2]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1c8      	bne.n	8006b52 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	0013      	movs	r3, r2
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2140      	movs	r1, #64	@ 0x40
 8006bce:	f000 fc2f 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 8006bd2:	1e03      	subs	r3, r0, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2288      	movs	r2, #136	@ 0x88
 8006bda:	2120      	movs	r1, #32
 8006bdc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e006      	b.n	8006bf0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2288      	movs	r2, #136	@ 0x88
 8006be6:	2120      	movs	r1, #32
 8006be8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e000      	b.n	8006bf0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006bee:	2302      	movs	r3, #2
  }
}
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b008      	add	sp, #32
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf8:	b5b0      	push	{r4, r5, r7, lr}
 8006bfa:	b090      	sub	sp, #64	@ 0x40
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c00:	231a      	movs	r3, #26
 8006c02:	2220      	movs	r2, #32
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	19db      	adds	r3, r3, r7
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	431a      	orrs	r2, r3
 8006c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4aaf      	ldr	r2, [pc, #700]	@ (8006ee8 <UART_SetConfig+0x2f0>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	0019      	movs	r1, r3
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c36:	430b      	orrs	r3, r1
 8006c38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4aaa      	ldr	r2, [pc, #680]	@ (8006eec <UART_SetConfig+0x2f4>)
 8006c42:	4013      	ands	r3, r2
 8006c44:	0018      	movs	r0, r3
 8006c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c48:	68d9      	ldr	r1, [r3, #12]
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	0003      	movs	r3, r0
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4aa4      	ldr	r2, [pc, #656]	@ (8006ef0 <UART_SetConfig+0x2f8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d004      	beq.n	8006c6e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	4a9f      	ldr	r2, [pc, #636]	@ (8006ef4 <UART_SetConfig+0x2fc>)
 8006c76:	4013      	ands	r3, r2
 8006c78:	0019      	movs	r1, r3
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c80:	430b      	orrs	r3, r1
 8006c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8a:	220f      	movs	r2, #15
 8006c8c:	4393      	bics	r3, r2
 8006c8e:	0018      	movs	r0, r3
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	0003      	movs	r3, r0
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a95      	ldr	r2, [pc, #596]	@ (8006ef8 <UART_SetConfig+0x300>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d131      	bne.n	8006d0c <UART_SetConfig+0x114>
 8006ca8:	4b94      	ldr	r3, [pc, #592]	@ (8006efc <UART_SetConfig+0x304>)
 8006caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cac:	2203      	movs	r2, #3
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d01d      	beq.n	8006cf0 <UART_SetConfig+0xf8>
 8006cb4:	d823      	bhi.n	8006cfe <UART_SetConfig+0x106>
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d00c      	beq.n	8006cd4 <UART_SetConfig+0xdc>
 8006cba:	d820      	bhi.n	8006cfe <UART_SetConfig+0x106>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <UART_SetConfig+0xce>
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d00e      	beq.n	8006ce2 <UART_SetConfig+0xea>
 8006cc4:	e01b      	b.n	8006cfe <UART_SetConfig+0x106>
 8006cc6:	231b      	movs	r3, #27
 8006cc8:	2220      	movs	r2, #32
 8006cca:	189b      	adds	r3, r3, r2
 8006ccc:	19db      	adds	r3, r3, r7
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	e0b4      	b.n	8006e3e <UART_SetConfig+0x246>
 8006cd4:	231b      	movs	r3, #27
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	189b      	adds	r3, r3, r2
 8006cda:	19db      	adds	r3, r3, r7
 8006cdc:	2202      	movs	r2, #2
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	e0ad      	b.n	8006e3e <UART_SetConfig+0x246>
 8006ce2:	231b      	movs	r3, #27
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	189b      	adds	r3, r3, r2
 8006ce8:	19db      	adds	r3, r3, r7
 8006cea:	2204      	movs	r2, #4
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	e0a6      	b.n	8006e3e <UART_SetConfig+0x246>
 8006cf0:	231b      	movs	r3, #27
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	189b      	adds	r3, r3, r2
 8006cf6:	19db      	adds	r3, r3, r7
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	e09f      	b.n	8006e3e <UART_SetConfig+0x246>
 8006cfe:	231b      	movs	r3, #27
 8006d00:	2220      	movs	r2, #32
 8006d02:	189b      	adds	r3, r3, r2
 8006d04:	19db      	adds	r3, r3, r7
 8006d06:	2210      	movs	r2, #16
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	e098      	b.n	8006e3e <UART_SetConfig+0x246>
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a7b      	ldr	r2, [pc, #492]	@ (8006f00 <UART_SetConfig+0x308>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d131      	bne.n	8006d7a <UART_SetConfig+0x182>
 8006d16:	4b79      	ldr	r3, [pc, #484]	@ (8006efc <UART_SetConfig+0x304>)
 8006d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d1a:	220c      	movs	r2, #12
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b0c      	cmp	r3, #12
 8006d20:	d01d      	beq.n	8006d5e <UART_SetConfig+0x166>
 8006d22:	d823      	bhi.n	8006d6c <UART_SetConfig+0x174>
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d00c      	beq.n	8006d42 <UART_SetConfig+0x14a>
 8006d28:	d820      	bhi.n	8006d6c <UART_SetConfig+0x174>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <UART_SetConfig+0x13c>
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d00e      	beq.n	8006d50 <UART_SetConfig+0x158>
 8006d32:	e01b      	b.n	8006d6c <UART_SetConfig+0x174>
 8006d34:	231b      	movs	r3, #27
 8006d36:	2220      	movs	r2, #32
 8006d38:	189b      	adds	r3, r3, r2
 8006d3a:	19db      	adds	r3, r3, r7
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	e07d      	b.n	8006e3e <UART_SetConfig+0x246>
 8006d42:	231b      	movs	r3, #27
 8006d44:	2220      	movs	r2, #32
 8006d46:	189b      	adds	r3, r3, r2
 8006d48:	19db      	adds	r3, r3, r7
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e076      	b.n	8006e3e <UART_SetConfig+0x246>
 8006d50:	231b      	movs	r3, #27
 8006d52:	2220      	movs	r2, #32
 8006d54:	189b      	adds	r3, r3, r2
 8006d56:	19db      	adds	r3, r3, r7
 8006d58:	2204      	movs	r2, #4
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	e06f      	b.n	8006e3e <UART_SetConfig+0x246>
 8006d5e:	231b      	movs	r3, #27
 8006d60:	2220      	movs	r2, #32
 8006d62:	189b      	adds	r3, r3, r2
 8006d64:	19db      	adds	r3, r3, r7
 8006d66:	2208      	movs	r2, #8
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	e068      	b.n	8006e3e <UART_SetConfig+0x246>
 8006d6c:	231b      	movs	r3, #27
 8006d6e:	2220      	movs	r2, #32
 8006d70:	189b      	adds	r3, r3, r2
 8006d72:	19db      	adds	r3, r3, r7
 8006d74:	2210      	movs	r2, #16
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	e061      	b.n	8006e3e <UART_SetConfig+0x246>
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a61      	ldr	r2, [pc, #388]	@ (8006f04 <UART_SetConfig+0x30c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d106      	bne.n	8006d92 <UART_SetConfig+0x19a>
 8006d84:	231b      	movs	r3, #27
 8006d86:	2220      	movs	r2, #32
 8006d88:	189b      	adds	r3, r3, r2
 8006d8a:	19db      	adds	r3, r3, r7
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	e055      	b.n	8006e3e <UART_SetConfig+0x246>
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a5c      	ldr	r2, [pc, #368]	@ (8006f08 <UART_SetConfig+0x310>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d106      	bne.n	8006daa <UART_SetConfig+0x1b2>
 8006d9c:	231b      	movs	r3, #27
 8006d9e:	2220      	movs	r2, #32
 8006da0:	189b      	adds	r3, r3, r2
 8006da2:	19db      	adds	r3, r3, r7
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	e049      	b.n	8006e3e <UART_SetConfig+0x246>
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a50      	ldr	r2, [pc, #320]	@ (8006ef0 <UART_SetConfig+0x2f8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d13e      	bne.n	8006e32 <UART_SetConfig+0x23a>
 8006db4:	4b51      	ldr	r3, [pc, #324]	@ (8006efc <UART_SetConfig+0x304>)
 8006db6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006db8:	23c0      	movs	r3, #192	@ 0xc0
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	22c0      	movs	r2, #192	@ 0xc0
 8006dc0:	0112      	lsls	r2, r2, #4
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d027      	beq.n	8006e16 <UART_SetConfig+0x21e>
 8006dc6:	22c0      	movs	r2, #192	@ 0xc0
 8006dc8:	0112      	lsls	r2, r2, #4
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d82a      	bhi.n	8006e24 <UART_SetConfig+0x22c>
 8006dce:	2280      	movs	r2, #128	@ 0x80
 8006dd0:	0112      	lsls	r2, r2, #4
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d011      	beq.n	8006dfa <UART_SetConfig+0x202>
 8006dd6:	2280      	movs	r2, #128	@ 0x80
 8006dd8:	0112      	lsls	r2, r2, #4
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d822      	bhi.n	8006e24 <UART_SetConfig+0x22c>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <UART_SetConfig+0x1f4>
 8006de2:	2280      	movs	r2, #128	@ 0x80
 8006de4:	00d2      	lsls	r2, r2, #3
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00e      	beq.n	8006e08 <UART_SetConfig+0x210>
 8006dea:	e01b      	b.n	8006e24 <UART_SetConfig+0x22c>
 8006dec:	231b      	movs	r3, #27
 8006dee:	2220      	movs	r2, #32
 8006df0:	189b      	adds	r3, r3, r2
 8006df2:	19db      	adds	r3, r3, r7
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	e021      	b.n	8006e3e <UART_SetConfig+0x246>
 8006dfa:	231b      	movs	r3, #27
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	189b      	adds	r3, r3, r2
 8006e00:	19db      	adds	r3, r3, r7
 8006e02:	2202      	movs	r2, #2
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	e01a      	b.n	8006e3e <UART_SetConfig+0x246>
 8006e08:	231b      	movs	r3, #27
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	189b      	adds	r3, r3, r2
 8006e0e:	19db      	adds	r3, r3, r7
 8006e10:	2204      	movs	r2, #4
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	e013      	b.n	8006e3e <UART_SetConfig+0x246>
 8006e16:	231b      	movs	r3, #27
 8006e18:	2220      	movs	r2, #32
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	19db      	adds	r3, r3, r7
 8006e1e:	2208      	movs	r2, #8
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e00c      	b.n	8006e3e <UART_SetConfig+0x246>
 8006e24:	231b      	movs	r3, #27
 8006e26:	2220      	movs	r2, #32
 8006e28:	189b      	adds	r3, r3, r2
 8006e2a:	19db      	adds	r3, r3, r7
 8006e2c:	2210      	movs	r2, #16
 8006e2e:	701a      	strb	r2, [r3, #0]
 8006e30:	e005      	b.n	8006e3e <UART_SetConfig+0x246>
 8006e32:	231b      	movs	r3, #27
 8006e34:	2220      	movs	r2, #32
 8006e36:	189b      	adds	r3, r3, r2
 8006e38:	19db      	adds	r3, r3, r7
 8006e3a:	2210      	movs	r2, #16
 8006e3c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a2b      	ldr	r2, [pc, #172]	@ (8006ef0 <UART_SetConfig+0x2f8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d000      	beq.n	8006e4a <UART_SetConfig+0x252>
 8006e48:	e0a9      	b.n	8006f9e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e4a:	231b      	movs	r3, #27
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	189b      	adds	r3, r3, r2
 8006e50:	19db      	adds	r3, r3, r7
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d015      	beq.n	8006e84 <UART_SetConfig+0x28c>
 8006e58:	dc18      	bgt.n	8006e8c <UART_SetConfig+0x294>
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d00d      	beq.n	8006e7a <UART_SetConfig+0x282>
 8006e5e:	dc15      	bgt.n	8006e8c <UART_SetConfig+0x294>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <UART_SetConfig+0x272>
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d005      	beq.n	8006e74 <UART_SetConfig+0x27c>
 8006e68:	e010      	b.n	8006e8c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6a:	f7ff fb45 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8006e6e:	0003      	movs	r3, r0
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e72:	e014      	b.n	8006e9e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e74:	4b25      	ldr	r3, [pc, #148]	@ (8006f0c <UART_SetConfig+0x314>)
 8006e76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e78:	e011      	b.n	8006e9e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7ff fab1 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 8006e7e:	0003      	movs	r3, r0
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e82:	e00c      	b.n	8006e9e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e84:	2380      	movs	r3, #128	@ 0x80
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e8a:	e008      	b.n	8006e9e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006e90:	231a      	movs	r3, #26
 8006e92:	2220      	movs	r2, #32
 8006e94:	189b      	adds	r3, r3, r2
 8006e96:	19db      	adds	r3, r3, r7
 8006e98:	2201      	movs	r2, #1
 8006e9a:	701a      	strb	r2, [r3, #0]
        break;
 8006e9c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d100      	bne.n	8006ea6 <UART_SetConfig+0x2ae>
 8006ea4:	e14b      	b.n	800713e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eaa:	4b19      	ldr	r3, [pc, #100]	@ (8006f10 <UART_SetConfig+0x318>)
 8006eac:	0052      	lsls	r2, r2, #1
 8006eae:	5ad3      	ldrh	r3, [r2, r3]
 8006eb0:	0019      	movs	r1, r3
 8006eb2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006eb4:	f7f9 f938 	bl	8000128 <__udivsi3>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	0013      	movs	r3, r2
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	189b      	adds	r3, r3, r2
 8006ec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d305      	bcc.n	8006ed8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d91d      	bls.n	8006f14 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006ed8:	231a      	movs	r3, #26
 8006eda:	2220      	movs	r2, #32
 8006edc:	189b      	adds	r3, r3, r2
 8006ede:	19db      	adds	r3, r3, r7
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	e12b      	b.n	800713e <UART_SetConfig+0x546>
 8006ee6:	46c0      	nop			@ (mov r8, r8)
 8006ee8:	cfff69f3 	.word	0xcfff69f3
 8006eec:	ffffcfff 	.word	0xffffcfff
 8006ef0:	40008000 	.word	0x40008000
 8006ef4:	11fff4ff 	.word	0x11fff4ff
 8006ef8:	40013800 	.word	0x40013800
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40004400 	.word	0x40004400
 8006f04:	40004800 	.word	0x40004800
 8006f08:	40004c00 	.word	0x40004c00
 8006f0c:	00f42400 	.word	0x00f42400
 8006f10:	080084a0 	.word	0x080084a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f20:	4b92      	ldr	r3, [pc, #584]	@ (800716c <UART_SetConfig+0x574>)
 8006f22:	0052      	lsls	r2, r2, #1
 8006f24:	5ad3      	ldrh	r3, [r2, r3]
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	69b8      	ldr	r0, [r7, #24]
 8006f32:	69f9      	ldr	r1, [r7, #28]
 8006f34:	f7f9 faa8 	bl	8000488 <__aeabi_uldivmod>
 8006f38:	0002      	movs	r2, r0
 8006f3a:	000b      	movs	r3, r1
 8006f3c:	0e11      	lsrs	r1, r2, #24
 8006f3e:	021d      	lsls	r5, r3, #8
 8006f40:	430d      	orrs	r5, r1
 8006f42:	0214      	lsls	r4, r2, #8
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68b8      	ldr	r0, [r7, #8]
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	1900      	adds	r0, r0, r4
 8006f56:	4169      	adcs	r1, r5
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f7f9 fa8f 	bl	8000488 <__aeabi_uldivmod>
 8006f6a:	0002      	movs	r2, r0
 8006f6c:	000b      	movs	r3, r1
 8006f6e:	0013      	movs	r3, r2
 8006f70:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f74:	23c0      	movs	r3, #192	@ 0xc0
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d309      	bcc.n	8006f90 <UART_SetConfig+0x398>
 8006f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f7e:	2380      	movs	r3, #128	@ 0x80
 8006f80:	035b      	lsls	r3, r3, #13
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d204      	bcs.n	8006f90 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	e0d6      	b.n	800713e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006f90:	231a      	movs	r3, #26
 8006f92:	2220      	movs	r2, #32
 8006f94:	189b      	adds	r3, r3, r2
 8006f96:	19db      	adds	r3, r3, r7
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	e0cf      	b.n	800713e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	69da      	ldr	r2, [r3, #28]
 8006fa2:	2380      	movs	r3, #128	@ 0x80
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d000      	beq.n	8006fac <UART_SetConfig+0x3b4>
 8006faa:	e070      	b.n	800708e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006fac:	231b      	movs	r3, #27
 8006fae:	2220      	movs	r2, #32
 8006fb0:	189b      	adds	r3, r3, r2
 8006fb2:	19db      	adds	r3, r3, r7
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b08      	cmp	r3, #8
 8006fb8:	d015      	beq.n	8006fe6 <UART_SetConfig+0x3ee>
 8006fba:	dc18      	bgt.n	8006fee <UART_SetConfig+0x3f6>
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d00d      	beq.n	8006fdc <UART_SetConfig+0x3e4>
 8006fc0:	dc15      	bgt.n	8006fee <UART_SetConfig+0x3f6>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <UART_SetConfig+0x3d4>
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d005      	beq.n	8006fd6 <UART_SetConfig+0x3de>
 8006fca:	e010      	b.n	8006fee <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fcc:	f7ff fa94 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8006fd0:	0003      	movs	r3, r0
 8006fd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fd4:	e014      	b.n	8007000 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd6:	4b66      	ldr	r3, [pc, #408]	@ (8007170 <UART_SetConfig+0x578>)
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fda:	e011      	b.n	8007000 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fdc:	f7ff fa00 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fe4:	e00c      	b.n	8007000 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe6:	2380      	movs	r3, #128	@ 0x80
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fec:	e008      	b.n	8007000 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006ff2:	231a      	movs	r3, #26
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	189b      	adds	r3, r3, r2
 8006ff8:	19db      	adds	r3, r3, r7
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	701a      	strb	r2, [r3, #0]
        break;
 8006ffe:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007002:	2b00      	cmp	r3, #0
 8007004:	d100      	bne.n	8007008 <UART_SetConfig+0x410>
 8007006:	e09a      	b.n	800713e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800700c:	4b57      	ldr	r3, [pc, #348]	@ (800716c <UART_SetConfig+0x574>)
 800700e:	0052      	lsls	r2, r2, #1
 8007010:	5ad3      	ldrh	r3, [r2, r3]
 8007012:	0019      	movs	r1, r3
 8007014:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007016:	f7f9 f887 	bl	8000128 <__udivsi3>
 800701a:	0003      	movs	r3, r0
 800701c:	005a      	lsls	r2, r3, #1
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	18d2      	adds	r2, r2, r3
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	0019      	movs	r1, r3
 800702c:	0010      	movs	r0, r2
 800702e:	f7f9 f87b 	bl	8000128 <__udivsi3>
 8007032:	0003      	movs	r3, r0
 8007034:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d921      	bls.n	8007080 <UART_SetConfig+0x488>
 800703c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800703e:	2380      	movs	r3, #128	@ 0x80
 8007040:	025b      	lsls	r3, r3, #9
 8007042:	429a      	cmp	r2, r3
 8007044:	d21c      	bcs.n	8007080 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	b29a      	uxth	r2, r3
 800704a:	200e      	movs	r0, #14
 800704c:	2420      	movs	r4, #32
 800704e:	1903      	adds	r3, r0, r4
 8007050:	19db      	adds	r3, r3, r7
 8007052:	210f      	movs	r1, #15
 8007054:	438a      	bics	r2, r1
 8007056:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	b29b      	uxth	r3, r3
 800705e:	2207      	movs	r2, #7
 8007060:	4013      	ands	r3, r2
 8007062:	b299      	uxth	r1, r3
 8007064:	1903      	adds	r3, r0, r4
 8007066:	19db      	adds	r3, r3, r7
 8007068:	1902      	adds	r2, r0, r4
 800706a:	19d2      	adds	r2, r2, r7
 800706c:	8812      	ldrh	r2, [r2, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	1902      	adds	r2, r0, r4
 8007078:	19d2      	adds	r2, r2, r7
 800707a:	8812      	ldrh	r2, [r2, #0]
 800707c:	60da      	str	r2, [r3, #12]
 800707e:	e05e      	b.n	800713e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007080:	231a      	movs	r3, #26
 8007082:	2220      	movs	r2, #32
 8007084:	189b      	adds	r3, r3, r2
 8007086:	19db      	adds	r3, r3, r7
 8007088:	2201      	movs	r2, #1
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e057      	b.n	800713e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800708e:	231b      	movs	r3, #27
 8007090:	2220      	movs	r2, #32
 8007092:	189b      	adds	r3, r3, r2
 8007094:	19db      	adds	r3, r3, r7
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d015      	beq.n	80070c8 <UART_SetConfig+0x4d0>
 800709c:	dc18      	bgt.n	80070d0 <UART_SetConfig+0x4d8>
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d00d      	beq.n	80070be <UART_SetConfig+0x4c6>
 80070a2:	dc15      	bgt.n	80070d0 <UART_SetConfig+0x4d8>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <UART_SetConfig+0x4b6>
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d005      	beq.n	80070b8 <UART_SetConfig+0x4c0>
 80070ac:	e010      	b.n	80070d0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ae:	f7ff fa23 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 80070b2:	0003      	movs	r3, r0
 80070b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070b6:	e014      	b.n	80070e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007170 <UART_SetConfig+0x578>)
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070bc:	e011      	b.n	80070e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070be:	f7ff f98f 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 80070c2:	0003      	movs	r3, r0
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070c6:	e00c      	b.n	80070e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c8:	2380      	movs	r3, #128	@ 0x80
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070ce:	e008      	b.n	80070e2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80070d4:	231a      	movs	r3, #26
 80070d6:	2220      	movs	r2, #32
 80070d8:	189b      	adds	r3, r3, r2
 80070da:	19db      	adds	r3, r3, r7
 80070dc:	2201      	movs	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]
        break;
 80070e0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80070e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02a      	beq.n	800713e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070ec:	4b1f      	ldr	r3, [pc, #124]	@ (800716c <UART_SetConfig+0x574>)
 80070ee:	0052      	lsls	r2, r2, #1
 80070f0:	5ad3      	ldrh	r3, [r2, r3]
 80070f2:	0019      	movs	r1, r3
 80070f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80070f6:	f7f9 f817 	bl	8000128 <__udivsi3>
 80070fa:	0003      	movs	r3, r0
 80070fc:	001a      	movs	r2, r3
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	18d2      	adds	r2, r2, r3
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	0019      	movs	r1, r3
 800710c:	0010      	movs	r0, r2
 800710e:	f7f9 f80b 	bl	8000128 <__udivsi3>
 8007112:	0003      	movs	r3, r0
 8007114:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	2b0f      	cmp	r3, #15
 800711a:	d90a      	bls.n	8007132 <UART_SetConfig+0x53a>
 800711c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800711e:	2380      	movs	r3, #128	@ 0x80
 8007120:	025b      	lsls	r3, r3, #9
 8007122:	429a      	cmp	r2, r3
 8007124:	d205      	bcs.n	8007132 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	b29a      	uxth	r2, r3
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60da      	str	r2, [r3, #12]
 8007130:	e005      	b.n	800713e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007132:	231a      	movs	r3, #26
 8007134:	2220      	movs	r2, #32
 8007136:	189b      	adds	r3, r3, r2
 8007138:	19db      	adds	r3, r3, r7
 800713a:	2201      	movs	r2, #1
 800713c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	226a      	movs	r2, #106	@ 0x6a
 8007142:	2101      	movs	r1, #1
 8007144:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	2268      	movs	r2, #104	@ 0x68
 800714a:	2101      	movs	r1, #1
 800714c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	2200      	movs	r2, #0
 8007152:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	2200      	movs	r2, #0
 8007158:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800715a:	231a      	movs	r3, #26
 800715c:	2220      	movs	r2, #32
 800715e:	189b      	adds	r3, r3, r2
 8007160:	19db      	adds	r3, r3, r7
 8007162:	781b      	ldrb	r3, [r3, #0]
}
 8007164:	0018      	movs	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	b010      	add	sp, #64	@ 0x40
 800716a:	bdb0      	pop	{r4, r5, r7, pc}
 800716c:	080084a0 	.word	0x080084a0
 8007170:	00f42400 	.word	0x00f42400

08007174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007180:	2208      	movs	r2, #8
 8007182:	4013      	ands	r3, r2
 8007184:	d00b      	beq.n	800719e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	4a4a      	ldr	r2, [pc, #296]	@ (80072b8 <UART_AdvFeatureConfig+0x144>)
 800718e:	4013      	ands	r3, r2
 8007190:	0019      	movs	r1, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a2:	2201      	movs	r2, #1
 80071a4:	4013      	ands	r3, r2
 80071a6:	d00b      	beq.n	80071c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4a43      	ldr	r2, [pc, #268]	@ (80072bc <UART_AdvFeatureConfig+0x148>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	0019      	movs	r1, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c4:	2202      	movs	r2, #2
 80071c6:	4013      	ands	r3, r2
 80071c8:	d00b      	beq.n	80071e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	4a3b      	ldr	r2, [pc, #236]	@ (80072c0 <UART_AdvFeatureConfig+0x14c>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	0019      	movs	r1, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e6:	2204      	movs	r2, #4
 80071e8:	4013      	ands	r3, r2
 80071ea:	d00b      	beq.n	8007204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	4a34      	ldr	r2, [pc, #208]	@ (80072c4 <UART_AdvFeatureConfig+0x150>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	0019      	movs	r1, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007208:	2210      	movs	r2, #16
 800720a:	4013      	ands	r3, r2
 800720c:	d00b      	beq.n	8007226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	4a2c      	ldr	r2, [pc, #176]	@ (80072c8 <UART_AdvFeatureConfig+0x154>)
 8007216:	4013      	ands	r3, r2
 8007218:	0019      	movs	r1, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722a:	2220      	movs	r2, #32
 800722c:	4013      	ands	r3, r2
 800722e:	d00b      	beq.n	8007248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	4a25      	ldr	r2, [pc, #148]	@ (80072cc <UART_AdvFeatureConfig+0x158>)
 8007238:	4013      	ands	r3, r2
 800723a:	0019      	movs	r1, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724c:	2240      	movs	r2, #64	@ 0x40
 800724e:	4013      	ands	r3, r2
 8007250:	d01d      	beq.n	800728e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4a1d      	ldr	r2, [pc, #116]	@ (80072d0 <UART_AdvFeatureConfig+0x15c>)
 800725a:	4013      	ands	r3, r2
 800725c:	0019      	movs	r1, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800726e:	2380      	movs	r3, #128	@ 0x80
 8007270:	035b      	lsls	r3, r3, #13
 8007272:	429a      	cmp	r2, r3
 8007274:	d10b      	bne.n	800728e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4a15      	ldr	r2, [pc, #84]	@ (80072d4 <UART_AdvFeatureConfig+0x160>)
 800727e:	4013      	ands	r3, r2
 8007280:	0019      	movs	r1, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007292:	2280      	movs	r2, #128	@ 0x80
 8007294:	4013      	ands	r3, r2
 8007296:	d00b      	beq.n	80072b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	4a0e      	ldr	r2, [pc, #56]	@ (80072d8 <UART_AdvFeatureConfig+0x164>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	0019      	movs	r1, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	605a      	str	r2, [r3, #4]
  }
}
 80072b0:	46c0      	nop			@ (mov r8, r8)
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b002      	add	sp, #8
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	ffff7fff 	.word	0xffff7fff
 80072bc:	fffdffff 	.word	0xfffdffff
 80072c0:	fffeffff 	.word	0xfffeffff
 80072c4:	fffbffff 	.word	0xfffbffff
 80072c8:	ffffefff 	.word	0xffffefff
 80072cc:	ffffdfff 	.word	0xffffdfff
 80072d0:	ffefffff 	.word	0xffefffff
 80072d4:	ff9fffff 	.word	0xff9fffff
 80072d8:	fff7ffff 	.word	0xfff7ffff

080072dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b092      	sub	sp, #72	@ 0x48
 80072e0:	af02      	add	r7, sp, #8
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2290      	movs	r2, #144	@ 0x90
 80072e8:	2100      	movs	r1, #0
 80072ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072ec:	f7fd faf0 	bl	80048d0 <HAL_GetTick>
 80072f0:	0003      	movs	r3, r0
 80072f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2208      	movs	r2, #8
 80072fc:	4013      	ands	r3, r2
 80072fe:	2b08      	cmp	r3, #8
 8007300:	d12d      	bne.n	800735e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007304:	2280      	movs	r2, #128	@ 0x80
 8007306:	0391      	lsls	r1, r2, #14
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	4a47      	ldr	r2, [pc, #284]	@ (8007428 <UART_CheckIdleState+0x14c>)
 800730c:	9200      	str	r2, [sp, #0]
 800730e:	2200      	movs	r2, #0
 8007310:	f000 f88e 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 8007314:	1e03      	subs	r3, r0, #0
 8007316:	d022      	beq.n	800735e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007318:	f3ef 8310 	mrs	r3, PRIMASK
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007320:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007322:	2301      	movs	r3, #1
 8007324:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	f383 8810 	msr	PRIMASK, r3
}
 800732c:	46c0      	nop			@ (mov r8, r8)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2180      	movs	r1, #128	@ 0x80
 800733a:	438a      	bics	r2, r1
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007344:	f383 8810 	msr	PRIMASK, r3
}
 8007348:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2288      	movs	r2, #136	@ 0x88
 800734e:	2120      	movs	r1, #32
 8007350:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2284      	movs	r2, #132	@ 0x84
 8007356:	2100      	movs	r1, #0
 8007358:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e060      	b.n	8007420 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2204      	movs	r2, #4
 8007366:	4013      	ands	r3, r2
 8007368:	2b04      	cmp	r3, #4
 800736a:	d146      	bne.n	80073fa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800736c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800736e:	2280      	movs	r2, #128	@ 0x80
 8007370:	03d1      	lsls	r1, r2, #15
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4a2c      	ldr	r2, [pc, #176]	@ (8007428 <UART_CheckIdleState+0x14c>)
 8007376:	9200      	str	r2, [sp, #0]
 8007378:	2200      	movs	r2, #0
 800737a:	f000 f859 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 800737e:	1e03      	subs	r3, r0, #0
 8007380:	d03b      	beq.n	80073fa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007382:	f3ef 8310 	mrs	r3, PRIMASK
 8007386:	60fb      	str	r3, [r7, #12]
  return(result);
 8007388:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800738a:	637b      	str	r3, [r7, #52]	@ 0x34
 800738c:	2301      	movs	r3, #1
 800738e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f383 8810 	msr	PRIMASK, r3
}
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4922      	ldr	r1, [pc, #136]	@ (800742c <UART_CheckIdleState+0x150>)
 80073a4:	400a      	ands	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f383 8810 	msr	PRIMASK, r3
}
 80073b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b4:	f3ef 8310 	mrs	r3, PRIMASK
 80073b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80073ba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80073be:	2301      	movs	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f383 8810 	msr	PRIMASK, r3
}
 80073c8:	46c0      	nop			@ (mov r8, r8)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2101      	movs	r1, #1
 80073d6:	438a      	bics	r2, r1
 80073d8:	609a      	str	r2, [r3, #8]
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	228c      	movs	r2, #140	@ 0x8c
 80073ea:	2120      	movs	r1, #32
 80073ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2284      	movs	r2, #132	@ 0x84
 80073f2:	2100      	movs	r1, #0
 80073f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e012      	b.n	8007420 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2288      	movs	r2, #136	@ 0x88
 80073fe:	2120      	movs	r1, #32
 8007400:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	228c      	movs	r2, #140	@ 0x8c
 8007406:	2120      	movs	r1, #32
 8007408:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2284      	movs	r2, #132	@ 0x84
 800741a:	2100      	movs	r1, #0
 800741c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	0018      	movs	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	b010      	add	sp, #64	@ 0x40
 8007426:	bd80      	pop	{r7, pc}
 8007428:	01ffffff 	.word	0x01ffffff
 800742c:	fffffedf 	.word	0xfffffedf

08007430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	1dfb      	adds	r3, r7, #7
 800743e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007440:	e051      	b.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	3301      	adds	r3, #1
 8007446:	d04e      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007448:	f7fd fa42 	bl	80048d0 <HAL_GetTick>
 800744c:	0002      	movs	r2, r0
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	429a      	cmp	r2, r3
 8007456:	d302      	bcc.n	800745e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e051      	b.n	8007506 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2204      	movs	r2, #4
 800746a:	4013      	ands	r3, r2
 800746c:	d03b      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b80      	cmp	r3, #128	@ 0x80
 8007472:	d038      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b40      	cmp	r3, #64	@ 0x40
 8007478:	d035      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	2208      	movs	r2, #8
 8007482:	4013      	ands	r3, r2
 8007484:	2b08      	cmp	r3, #8
 8007486:	d111      	bne.n	80074ac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2208      	movs	r2, #8
 800748e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	0018      	movs	r0, r3
 8007494:	f000 f83c 	bl	8007510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2290      	movs	r2, #144	@ 0x90
 800749c:	2108      	movs	r1, #8
 800749e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2284      	movs	r2, #132	@ 0x84
 80074a4:	2100      	movs	r1, #0
 80074a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e02c      	b.n	8007506 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	69da      	ldr	r2, [r3, #28]
 80074b2:	2380      	movs	r3, #128	@ 0x80
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	401a      	ands	r2, r3
 80074b8:	2380      	movs	r3, #128	@ 0x80
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	429a      	cmp	r2, r3
 80074be:	d112      	bne.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2280      	movs	r2, #128	@ 0x80
 80074c6:	0112      	lsls	r2, r2, #4
 80074c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	0018      	movs	r0, r3
 80074ce:	f000 f81f 	bl	8007510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2290      	movs	r2, #144	@ 0x90
 80074d6:	2120      	movs	r1, #32
 80074d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2284      	movs	r2, #132	@ 0x84
 80074de:	2100      	movs	r1, #0
 80074e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e00f      	b.n	8007506 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	4013      	ands	r3, r2
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	425a      	negs	r2, r3
 80074f6:	4153      	adcs	r3, r2
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	001a      	movs	r2, r3
 80074fc:	1dfb      	adds	r3, r7, #7
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	429a      	cmp	r2, r3
 8007502:	d09e      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	0018      	movs	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	b004      	add	sp, #16
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08e      	sub	sp, #56	@ 0x38
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007518:	f3ef 8310 	mrs	r3, PRIMASK
 800751c:	617b      	str	r3, [r7, #20]
  return(result);
 800751e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
 8007522:	2301      	movs	r3, #1
 8007524:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f383 8810 	msr	PRIMASK, r3
}
 800752c:	46c0      	nop			@ (mov r8, r8)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4926      	ldr	r1, [pc, #152]	@ (80075d4 <UART_EndRxTransfer+0xc4>)
 800753a:	400a      	ands	r2, r1
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007540:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f383 8810 	msr	PRIMASK, r3
}
 8007548:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754a:	f3ef 8310 	mrs	r3, PRIMASK
 800754e:	623b      	str	r3, [r7, #32]
  return(result);
 8007550:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007552:	633b      	str	r3, [r7, #48]	@ 0x30
 8007554:	2301      	movs	r3, #1
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	f383 8810 	msr	PRIMASK, r3
}
 800755e:	46c0      	nop			@ (mov r8, r8)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	491b      	ldr	r1, [pc, #108]	@ (80075d8 <UART_EndRxTransfer+0xc8>)
 800756c:	400a      	ands	r2, r1
 800756e:	609a      	str	r2, [r3, #8]
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	f383 8810 	msr	PRIMASK, r3
}
 800757a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d118      	bne.n	80075b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007584:	f3ef 8310 	mrs	r3, PRIMASK
 8007588:	60bb      	str	r3, [r7, #8]
  return(result);
 800758a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800758e:	2301      	movs	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f383 8810 	msr	PRIMASK, r3
}
 8007598:	46c0      	nop			@ (mov r8, r8)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2110      	movs	r1, #16
 80075a6:	438a      	bics	r2, r1
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f383 8810 	msr	PRIMASK, r3
}
 80075b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	228c      	movs	r2, #140	@ 0x8c
 80075ba:	2120      	movs	r1, #32
 80075bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075ca:	46c0      	nop			@ (mov r8, r8)
 80075cc:	46bd      	mov	sp, r7
 80075ce:	b00e      	add	sp, #56	@ 0x38
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	46c0      	nop			@ (mov r8, r8)
 80075d4:	fffffedf 	.word	0xfffffedf
 80075d8:	effffffe 	.word	0xeffffffe

080075dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2284      	movs	r2, #132	@ 0x84
 80075e8:	5c9b      	ldrb	r3, [r3, r2]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e027      	b.n	8007642 <HAL_UARTEx_DisableFifoMode+0x66>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2284      	movs	r2, #132	@ 0x84
 80075f6:	2101      	movs	r1, #1
 80075f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2288      	movs	r2, #136	@ 0x88
 80075fe:	2124      	movs	r1, #36	@ 0x24
 8007600:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2101      	movs	r1, #1
 8007616:	438a      	bics	r2, r1
 8007618:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4a0b      	ldr	r2, [pc, #44]	@ (800764c <HAL_UARTEx_DisableFifoMode+0x70>)
 800761e:	4013      	ands	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2288      	movs	r2, #136	@ 0x88
 8007634:	2120      	movs	r1, #32
 8007636:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2284      	movs	r2, #132	@ 0x84
 800763c:	2100      	movs	r1, #0
 800763e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	0018      	movs	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	b004      	add	sp, #16
 8007648:	bd80      	pop	{r7, pc}
 800764a:	46c0      	nop			@ (mov r8, r8)
 800764c:	dfffffff 	.word	0xdfffffff

08007650 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2284      	movs	r2, #132	@ 0x84
 800765e:	5c9b      	ldrb	r3, [r3, r2]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d101      	bne.n	8007668 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007664:	2302      	movs	r3, #2
 8007666:	e02e      	b.n	80076c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2284      	movs	r2, #132	@ 0x84
 800766c:	2101      	movs	r1, #1
 800766e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2288      	movs	r2, #136	@ 0x88
 8007674:	2124      	movs	r1, #36	@ 0x24
 8007676:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2101      	movs	r1, #1
 800768c:	438a      	bics	r2, r1
 800768e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	08d9      	lsrs	r1, r3, #3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	0018      	movs	r0, r3
 80076a8:	f000 f854 	bl	8007754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2288      	movs	r2, #136	@ 0x88
 80076b8:	2120      	movs	r1, #32
 80076ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2284      	movs	r2, #132	@ 0x84
 80076c0:	2100      	movs	r1, #0
 80076c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	0018      	movs	r0, r3
 80076c8:	46bd      	mov	sp, r7
 80076ca:	b004      	add	sp, #16
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2284      	movs	r2, #132	@ 0x84
 80076de:	5c9b      	ldrb	r3, [r3, r2]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e02f      	b.n	8007748 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2284      	movs	r2, #132	@ 0x84
 80076ec:	2101      	movs	r1, #1
 80076ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2288      	movs	r2, #136	@ 0x88
 80076f4:	2124      	movs	r1, #36	@ 0x24
 80076f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2101      	movs	r1, #1
 800770c:	438a      	bics	r2, r1
 800770e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	4a0e      	ldr	r2, [pc, #56]	@ (8007750 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007718:	4013      	ands	r3, r2
 800771a:	0019      	movs	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0018      	movs	r0, r3
 800772a:	f000 f813 	bl	8007754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2288      	movs	r2, #136	@ 0x88
 800773a:	2120      	movs	r1, #32
 800773c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2284      	movs	r2, #132	@ 0x84
 8007742:	2100      	movs	r1, #0
 8007744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	0018      	movs	r0, r3
 800774a:	46bd      	mov	sp, r7
 800774c:	b004      	add	sp, #16
 800774e:	bd80      	pop	{r7, pc}
 8007750:	f1ffffff 	.word	0xf1ffffff

08007754 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	226a      	movs	r2, #106	@ 0x6a
 8007768:	2101      	movs	r1, #1
 800776a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2268      	movs	r2, #104	@ 0x68
 8007770:	2101      	movs	r1, #1
 8007772:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007774:	e043      	b.n	80077fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007776:	260f      	movs	r6, #15
 8007778:	19bb      	adds	r3, r7, r6
 800777a:	2208      	movs	r2, #8
 800777c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800777e:	200e      	movs	r0, #14
 8007780:	183b      	adds	r3, r7, r0
 8007782:	2208      	movs	r2, #8
 8007784:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	0e5b      	lsrs	r3, r3, #25
 800778e:	b2da      	uxtb	r2, r3
 8007790:	240d      	movs	r4, #13
 8007792:	193b      	adds	r3, r7, r4
 8007794:	2107      	movs	r1, #7
 8007796:	400a      	ands	r2, r1
 8007798:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	0f5b      	lsrs	r3, r3, #29
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	250c      	movs	r5, #12
 80077a6:	197b      	adds	r3, r7, r5
 80077a8:	2107      	movs	r1, #7
 80077aa:	400a      	ands	r2, r1
 80077ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ae:	183b      	adds	r3, r7, r0
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	197a      	adds	r2, r7, r5
 80077b4:	7812      	ldrb	r2, [r2, #0]
 80077b6:	4914      	ldr	r1, [pc, #80]	@ (8007808 <UARTEx_SetNbDataToProcess+0xb4>)
 80077b8:	5c8a      	ldrb	r2, [r1, r2]
 80077ba:	435a      	muls	r2, r3
 80077bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80077be:	197b      	adds	r3, r7, r5
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	4a12      	ldr	r2, [pc, #72]	@ (800780c <UARTEx_SetNbDataToProcess+0xb8>)
 80077c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077c6:	0019      	movs	r1, r3
 80077c8:	f7f8 fd38 	bl	800023c <__divsi3>
 80077cc:	0003      	movs	r3, r0
 80077ce:	b299      	uxth	r1, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	226a      	movs	r2, #106	@ 0x6a
 80077d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077d6:	19bb      	adds	r3, r7, r6
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	193a      	adds	r2, r7, r4
 80077dc:	7812      	ldrb	r2, [r2, #0]
 80077de:	490a      	ldr	r1, [pc, #40]	@ (8007808 <UARTEx_SetNbDataToProcess+0xb4>)
 80077e0:	5c8a      	ldrb	r2, [r1, r2]
 80077e2:	435a      	muls	r2, r3
 80077e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80077e6:	193b      	adds	r3, r7, r4
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	4a08      	ldr	r2, [pc, #32]	@ (800780c <UARTEx_SetNbDataToProcess+0xb8>)
 80077ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ee:	0019      	movs	r1, r3
 80077f0:	f7f8 fd24 	bl	800023c <__divsi3>
 80077f4:	0003      	movs	r3, r0
 80077f6:	b299      	uxth	r1, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2268      	movs	r2, #104	@ 0x68
 80077fc:	5299      	strh	r1, [r3, r2]
}
 80077fe:	46c0      	nop			@ (mov r8, r8)
 8007800:	46bd      	mov	sp, r7
 8007802:	b005      	add	sp, #20
 8007804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007806:	46c0      	nop			@ (mov r8, r8)
 8007808:	080084b8 	.word	0x080084b8
 800780c:	080084c0 	.word	0x080084c0

08007810 <sniprintf>:
 8007810:	b40c      	push	{r2, r3}
 8007812:	b530      	push	{r4, r5, lr}
 8007814:	4b18      	ldr	r3, [pc, #96]	@ (8007878 <sniprintf+0x68>)
 8007816:	000c      	movs	r4, r1
 8007818:	681d      	ldr	r5, [r3, #0]
 800781a:	b09d      	sub	sp, #116	@ 0x74
 800781c:	2900      	cmp	r1, #0
 800781e:	da08      	bge.n	8007832 <sniprintf+0x22>
 8007820:	238b      	movs	r3, #139	@ 0x8b
 8007822:	2001      	movs	r0, #1
 8007824:	602b      	str	r3, [r5, #0]
 8007826:	4240      	negs	r0, r0
 8007828:	b01d      	add	sp, #116	@ 0x74
 800782a:	bc30      	pop	{r4, r5}
 800782c:	bc08      	pop	{r3}
 800782e:	b002      	add	sp, #8
 8007830:	4718      	bx	r3
 8007832:	2382      	movs	r3, #130	@ 0x82
 8007834:	466a      	mov	r2, sp
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	8293      	strh	r3, [r2, #20]
 800783a:	2300      	movs	r3, #0
 800783c:	9002      	str	r0, [sp, #8]
 800783e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007840:	9006      	str	r0, [sp, #24]
 8007842:	4299      	cmp	r1, r3
 8007844:	d000      	beq.n	8007848 <sniprintf+0x38>
 8007846:	1e4b      	subs	r3, r1, #1
 8007848:	9304      	str	r3, [sp, #16]
 800784a:	9307      	str	r3, [sp, #28]
 800784c:	2301      	movs	r3, #1
 800784e:	466a      	mov	r2, sp
 8007850:	425b      	negs	r3, r3
 8007852:	82d3      	strh	r3, [r2, #22]
 8007854:	0028      	movs	r0, r5
 8007856:	ab21      	add	r3, sp, #132	@ 0x84
 8007858:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800785a:	a902      	add	r1, sp, #8
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	f000 f9a7 	bl	8007bb0 <_svfiprintf_r>
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	da01      	bge.n	800786a <sniprintf+0x5a>
 8007866:	238b      	movs	r3, #139	@ 0x8b
 8007868:	602b      	str	r3, [r5, #0]
 800786a:	2c00      	cmp	r4, #0
 800786c:	d0dc      	beq.n	8007828 <sniprintf+0x18>
 800786e:	2200      	movs	r2, #0
 8007870:	9b02      	ldr	r3, [sp, #8]
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	e7d8      	b.n	8007828 <sniprintf+0x18>
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	20000010 	.word	0x20000010

0800787c <memset>:
 800787c:	0003      	movs	r3, r0
 800787e:	1882      	adds	r2, r0, r2
 8007880:	4293      	cmp	r3, r2
 8007882:	d100      	bne.n	8007886 <memset+0xa>
 8007884:	4770      	bx	lr
 8007886:	7019      	strb	r1, [r3, #0]
 8007888:	3301      	adds	r3, #1
 800788a:	e7f9      	b.n	8007880 <memset+0x4>

0800788c <__errno>:
 800788c:	4b01      	ldr	r3, [pc, #4]	@ (8007894 <__errno+0x8>)
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	4770      	bx	lr
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	20000010 	.word	0x20000010

08007898 <__libc_init_array>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	2600      	movs	r6, #0
 800789c:	4c0c      	ldr	r4, [pc, #48]	@ (80078d0 <__libc_init_array+0x38>)
 800789e:	4d0d      	ldr	r5, [pc, #52]	@ (80078d4 <__libc_init_array+0x3c>)
 80078a0:	1b64      	subs	r4, r4, r5
 80078a2:	10a4      	asrs	r4, r4, #2
 80078a4:	42a6      	cmp	r6, r4
 80078a6:	d109      	bne.n	80078bc <__libc_init_array+0x24>
 80078a8:	2600      	movs	r6, #0
 80078aa:	f000 fc63 	bl	8008174 <_init>
 80078ae:	4c0a      	ldr	r4, [pc, #40]	@ (80078d8 <__libc_init_array+0x40>)
 80078b0:	4d0a      	ldr	r5, [pc, #40]	@ (80078dc <__libc_init_array+0x44>)
 80078b2:	1b64      	subs	r4, r4, r5
 80078b4:	10a4      	asrs	r4, r4, #2
 80078b6:	42a6      	cmp	r6, r4
 80078b8:	d105      	bne.n	80078c6 <__libc_init_array+0x2e>
 80078ba:	bd70      	pop	{r4, r5, r6, pc}
 80078bc:	00b3      	lsls	r3, r6, #2
 80078be:	58eb      	ldr	r3, [r5, r3]
 80078c0:	4798      	blx	r3
 80078c2:	3601      	adds	r6, #1
 80078c4:	e7ee      	b.n	80078a4 <__libc_init_array+0xc>
 80078c6:	00b3      	lsls	r3, r6, #2
 80078c8:	58eb      	ldr	r3, [r5, r3]
 80078ca:	4798      	blx	r3
 80078cc:	3601      	adds	r6, #1
 80078ce:	e7f2      	b.n	80078b6 <__libc_init_array+0x1e>
 80078d0:	08008504 	.word	0x08008504
 80078d4:	08008504 	.word	0x08008504
 80078d8:	08008508 	.word	0x08008508
 80078dc:	08008504 	.word	0x08008504

080078e0 <__retarget_lock_acquire_recursive>:
 80078e0:	4770      	bx	lr

080078e2 <__retarget_lock_release_recursive>:
 80078e2:	4770      	bx	lr

080078e4 <memcpy>:
 80078e4:	2300      	movs	r3, #0
 80078e6:	b510      	push	{r4, lr}
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d100      	bne.n	80078ee <memcpy+0xa>
 80078ec:	bd10      	pop	{r4, pc}
 80078ee:	5ccc      	ldrb	r4, [r1, r3]
 80078f0:	54c4      	strb	r4, [r0, r3]
 80078f2:	3301      	adds	r3, #1
 80078f4:	e7f8      	b.n	80078e8 <memcpy+0x4>
	...

080078f8 <_free_r>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	0005      	movs	r5, r0
 80078fc:	1e0c      	subs	r4, r1, #0
 80078fe:	d010      	beq.n	8007922 <_free_r+0x2a>
 8007900:	3c04      	subs	r4, #4
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	da00      	bge.n	800790a <_free_r+0x12>
 8007908:	18e4      	adds	r4, r4, r3
 800790a:	0028      	movs	r0, r5
 800790c:	f000 f8e0 	bl	8007ad0 <__malloc_lock>
 8007910:	4a1d      	ldr	r2, [pc, #116]	@ (8007988 <_free_r+0x90>)
 8007912:	6813      	ldr	r3, [r2, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d105      	bne.n	8007924 <_free_r+0x2c>
 8007918:	6063      	str	r3, [r4, #4]
 800791a:	6014      	str	r4, [r2, #0]
 800791c:	0028      	movs	r0, r5
 800791e:	f000 f8df 	bl	8007ae0 <__malloc_unlock>
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	42a3      	cmp	r3, r4
 8007926:	d908      	bls.n	800793a <_free_r+0x42>
 8007928:	6820      	ldr	r0, [r4, #0]
 800792a:	1821      	adds	r1, r4, r0
 800792c:	428b      	cmp	r3, r1
 800792e:	d1f3      	bne.n	8007918 <_free_r+0x20>
 8007930:	6819      	ldr	r1, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	1809      	adds	r1, r1, r0
 8007936:	6021      	str	r1, [r4, #0]
 8007938:	e7ee      	b.n	8007918 <_free_r+0x20>
 800793a:	001a      	movs	r2, r3
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <_free_r+0x4e>
 8007942:	42a3      	cmp	r3, r4
 8007944:	d9f9      	bls.n	800793a <_free_r+0x42>
 8007946:	6811      	ldr	r1, [r2, #0]
 8007948:	1850      	adds	r0, r2, r1
 800794a:	42a0      	cmp	r0, r4
 800794c:	d10b      	bne.n	8007966 <_free_r+0x6e>
 800794e:	6820      	ldr	r0, [r4, #0]
 8007950:	1809      	adds	r1, r1, r0
 8007952:	1850      	adds	r0, r2, r1
 8007954:	6011      	str	r1, [r2, #0]
 8007956:	4283      	cmp	r3, r0
 8007958:	d1e0      	bne.n	800791c <_free_r+0x24>
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	1841      	adds	r1, r0, r1
 8007960:	6011      	str	r1, [r2, #0]
 8007962:	6053      	str	r3, [r2, #4]
 8007964:	e7da      	b.n	800791c <_free_r+0x24>
 8007966:	42a0      	cmp	r0, r4
 8007968:	d902      	bls.n	8007970 <_free_r+0x78>
 800796a:	230c      	movs	r3, #12
 800796c:	602b      	str	r3, [r5, #0]
 800796e:	e7d5      	b.n	800791c <_free_r+0x24>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	1821      	adds	r1, r4, r0
 8007974:	428b      	cmp	r3, r1
 8007976:	d103      	bne.n	8007980 <_free_r+0x88>
 8007978:	6819      	ldr	r1, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	1809      	adds	r1, r1, r0
 800797e:	6021      	str	r1, [r4, #0]
 8007980:	6063      	str	r3, [r4, #4]
 8007982:	6054      	str	r4, [r2, #4]
 8007984:	e7ca      	b.n	800791c <_free_r+0x24>
 8007986:	46c0      	nop			@ (mov r8, r8)
 8007988:	2000037c 	.word	0x2000037c

0800798c <sbrk_aligned>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4e0f      	ldr	r6, [pc, #60]	@ (80079cc <sbrk_aligned+0x40>)
 8007990:	000d      	movs	r5, r1
 8007992:	6831      	ldr	r1, [r6, #0]
 8007994:	0004      	movs	r4, r0
 8007996:	2900      	cmp	r1, #0
 8007998:	d102      	bne.n	80079a0 <sbrk_aligned+0x14>
 800799a:	f000 fb95 	bl	80080c8 <_sbrk_r>
 800799e:	6030      	str	r0, [r6, #0]
 80079a0:	0029      	movs	r1, r5
 80079a2:	0020      	movs	r0, r4
 80079a4:	f000 fb90 	bl	80080c8 <_sbrk_r>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d103      	bne.n	80079b4 <sbrk_aligned+0x28>
 80079ac:	2501      	movs	r5, #1
 80079ae:	426d      	negs	r5, r5
 80079b0:	0028      	movs	r0, r5
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	2303      	movs	r3, #3
 80079b6:	1cc5      	adds	r5, r0, #3
 80079b8:	439d      	bics	r5, r3
 80079ba:	42a8      	cmp	r0, r5
 80079bc:	d0f8      	beq.n	80079b0 <sbrk_aligned+0x24>
 80079be:	1a29      	subs	r1, r5, r0
 80079c0:	0020      	movs	r0, r4
 80079c2:	f000 fb81 	bl	80080c8 <_sbrk_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	d1f2      	bne.n	80079b0 <sbrk_aligned+0x24>
 80079ca:	e7ef      	b.n	80079ac <sbrk_aligned+0x20>
 80079cc:	20000378 	.word	0x20000378

080079d0 <_malloc_r>:
 80079d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079d2:	2203      	movs	r2, #3
 80079d4:	1ccb      	adds	r3, r1, #3
 80079d6:	4393      	bics	r3, r2
 80079d8:	3308      	adds	r3, #8
 80079da:	0005      	movs	r5, r0
 80079dc:	001f      	movs	r7, r3
 80079de:	2b0c      	cmp	r3, #12
 80079e0:	d234      	bcs.n	8007a4c <_malloc_r+0x7c>
 80079e2:	270c      	movs	r7, #12
 80079e4:	42b9      	cmp	r1, r7
 80079e6:	d833      	bhi.n	8007a50 <_malloc_r+0x80>
 80079e8:	0028      	movs	r0, r5
 80079ea:	f000 f871 	bl	8007ad0 <__malloc_lock>
 80079ee:	4e37      	ldr	r6, [pc, #220]	@ (8007acc <_malloc_r+0xfc>)
 80079f0:	6833      	ldr	r3, [r6, #0]
 80079f2:	001c      	movs	r4, r3
 80079f4:	2c00      	cmp	r4, #0
 80079f6:	d12f      	bne.n	8007a58 <_malloc_r+0x88>
 80079f8:	0039      	movs	r1, r7
 80079fa:	0028      	movs	r0, r5
 80079fc:	f7ff ffc6 	bl	800798c <sbrk_aligned>
 8007a00:	0004      	movs	r4, r0
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d15f      	bne.n	8007ac6 <_malloc_r+0xf6>
 8007a06:	6834      	ldr	r4, [r6, #0]
 8007a08:	9400      	str	r4, [sp, #0]
 8007a0a:	9b00      	ldr	r3, [sp, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d14a      	bne.n	8007aa6 <_malloc_r+0xd6>
 8007a10:	2c00      	cmp	r4, #0
 8007a12:	d052      	beq.n	8007aba <_malloc_r+0xea>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	0028      	movs	r0, r5
 8007a18:	18e3      	adds	r3, r4, r3
 8007a1a:	9900      	ldr	r1, [sp, #0]
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	f000 fb53 	bl	80080c8 <_sbrk_r>
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	4283      	cmp	r3, r0
 8007a26:	d148      	bne.n	8007aba <_malloc_r+0xea>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	0028      	movs	r0, r5
 8007a2c:	1aff      	subs	r7, r7, r3
 8007a2e:	0039      	movs	r1, r7
 8007a30:	f7ff ffac 	bl	800798c <sbrk_aligned>
 8007a34:	3001      	adds	r0, #1
 8007a36:	d040      	beq.n	8007aba <_malloc_r+0xea>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	19db      	adds	r3, r3, r7
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	6833      	ldr	r3, [r6, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d133      	bne.n	8007aae <_malloc_r+0xde>
 8007a46:	9b00      	ldr	r3, [sp, #0]
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	e019      	b.n	8007a80 <_malloc_r+0xb0>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	dac9      	bge.n	80079e4 <_malloc_r+0x14>
 8007a50:	230c      	movs	r3, #12
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	2000      	movs	r0, #0
 8007a56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a58:	6821      	ldr	r1, [r4, #0]
 8007a5a:	1bc9      	subs	r1, r1, r7
 8007a5c:	d420      	bmi.n	8007aa0 <_malloc_r+0xd0>
 8007a5e:	290b      	cmp	r1, #11
 8007a60:	d90a      	bls.n	8007a78 <_malloc_r+0xa8>
 8007a62:	19e2      	adds	r2, r4, r7
 8007a64:	6027      	str	r7, [r4, #0]
 8007a66:	42a3      	cmp	r3, r4
 8007a68:	d104      	bne.n	8007a74 <_malloc_r+0xa4>
 8007a6a:	6032      	str	r2, [r6, #0]
 8007a6c:	6863      	ldr	r3, [r4, #4]
 8007a6e:	6011      	str	r1, [r2, #0]
 8007a70:	6053      	str	r3, [r2, #4]
 8007a72:	e005      	b.n	8007a80 <_malloc_r+0xb0>
 8007a74:	605a      	str	r2, [r3, #4]
 8007a76:	e7f9      	b.n	8007a6c <_malloc_r+0x9c>
 8007a78:	6862      	ldr	r2, [r4, #4]
 8007a7a:	42a3      	cmp	r3, r4
 8007a7c:	d10e      	bne.n	8007a9c <_malloc_r+0xcc>
 8007a7e:	6032      	str	r2, [r6, #0]
 8007a80:	0028      	movs	r0, r5
 8007a82:	f000 f82d 	bl	8007ae0 <__malloc_unlock>
 8007a86:	0020      	movs	r0, r4
 8007a88:	2207      	movs	r2, #7
 8007a8a:	300b      	adds	r0, #11
 8007a8c:	1d23      	adds	r3, r4, #4
 8007a8e:	4390      	bics	r0, r2
 8007a90:	1ac2      	subs	r2, r0, r3
 8007a92:	4298      	cmp	r0, r3
 8007a94:	d0df      	beq.n	8007a56 <_malloc_r+0x86>
 8007a96:	1a1b      	subs	r3, r3, r0
 8007a98:	50a3      	str	r3, [r4, r2]
 8007a9a:	e7dc      	b.n	8007a56 <_malloc_r+0x86>
 8007a9c:	605a      	str	r2, [r3, #4]
 8007a9e:	e7ef      	b.n	8007a80 <_malloc_r+0xb0>
 8007aa0:	0023      	movs	r3, r4
 8007aa2:	6864      	ldr	r4, [r4, #4]
 8007aa4:	e7a6      	b.n	80079f4 <_malloc_r+0x24>
 8007aa6:	9c00      	ldr	r4, [sp, #0]
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	e7ad      	b.n	8007a0a <_malloc_r+0x3a>
 8007aae:	001a      	movs	r2, r3
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	d1fb      	bne.n	8007aae <_malloc_r+0xde>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e7da      	b.n	8007a70 <_malloc_r+0xa0>
 8007aba:	230c      	movs	r3, #12
 8007abc:	0028      	movs	r0, r5
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f000 f80e 	bl	8007ae0 <__malloc_unlock>
 8007ac4:	e7c6      	b.n	8007a54 <_malloc_r+0x84>
 8007ac6:	6007      	str	r7, [r0, #0]
 8007ac8:	e7da      	b.n	8007a80 <_malloc_r+0xb0>
 8007aca:	46c0      	nop			@ (mov r8, r8)
 8007acc:	2000037c 	.word	0x2000037c

08007ad0 <__malloc_lock>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4802      	ldr	r0, [pc, #8]	@ (8007adc <__malloc_lock+0xc>)
 8007ad4:	f7ff ff04 	bl	80078e0 <__retarget_lock_acquire_recursive>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	46c0      	nop			@ (mov r8, r8)
 8007adc:	20000374 	.word	0x20000374

08007ae0 <__malloc_unlock>:
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	4802      	ldr	r0, [pc, #8]	@ (8007aec <__malloc_unlock+0xc>)
 8007ae4:	f7ff fefd 	bl	80078e2 <__retarget_lock_release_recursive>
 8007ae8:	bd10      	pop	{r4, pc}
 8007aea:	46c0      	nop			@ (mov r8, r8)
 8007aec:	20000374 	.word	0x20000374

08007af0 <__ssputs_r>:
 8007af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af2:	688e      	ldr	r6, [r1, #8]
 8007af4:	b085      	sub	sp, #20
 8007af6:	001f      	movs	r7, r3
 8007af8:	000c      	movs	r4, r1
 8007afa:	680b      	ldr	r3, [r1, #0]
 8007afc:	9002      	str	r0, [sp, #8]
 8007afe:	9203      	str	r2, [sp, #12]
 8007b00:	42be      	cmp	r6, r7
 8007b02:	d830      	bhi.n	8007b66 <__ssputs_r+0x76>
 8007b04:	210c      	movs	r1, #12
 8007b06:	5e62      	ldrsh	r2, [r4, r1]
 8007b08:	2190      	movs	r1, #144	@ 0x90
 8007b0a:	00c9      	lsls	r1, r1, #3
 8007b0c:	420a      	tst	r2, r1
 8007b0e:	d028      	beq.n	8007b62 <__ssputs_r+0x72>
 8007b10:	2003      	movs	r0, #3
 8007b12:	6921      	ldr	r1, [r4, #16]
 8007b14:	1a5b      	subs	r3, r3, r1
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	6963      	ldr	r3, [r4, #20]
 8007b1a:	4343      	muls	r3, r0
 8007b1c:	9801      	ldr	r0, [sp, #4]
 8007b1e:	0fdd      	lsrs	r5, r3, #31
 8007b20:	18ed      	adds	r5, r5, r3
 8007b22:	1c7b      	adds	r3, r7, #1
 8007b24:	181b      	adds	r3, r3, r0
 8007b26:	106d      	asrs	r5, r5, #1
 8007b28:	42ab      	cmp	r3, r5
 8007b2a:	d900      	bls.n	8007b2e <__ssputs_r+0x3e>
 8007b2c:	001d      	movs	r5, r3
 8007b2e:	0552      	lsls	r2, r2, #21
 8007b30:	d528      	bpl.n	8007b84 <__ssputs_r+0x94>
 8007b32:	0029      	movs	r1, r5
 8007b34:	9802      	ldr	r0, [sp, #8]
 8007b36:	f7ff ff4b 	bl	80079d0 <_malloc_r>
 8007b3a:	1e06      	subs	r6, r0, #0
 8007b3c:	d02c      	beq.n	8007b98 <__ssputs_r+0xa8>
 8007b3e:	9a01      	ldr	r2, [sp, #4]
 8007b40:	6921      	ldr	r1, [r4, #16]
 8007b42:	f7ff fecf 	bl	80078e4 <memcpy>
 8007b46:	89a2      	ldrh	r2, [r4, #12]
 8007b48:	4b18      	ldr	r3, [pc, #96]	@ (8007bac <__ssputs_r+0xbc>)
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	2380      	movs	r3, #128	@ 0x80
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	9b01      	ldr	r3, [sp, #4]
 8007b54:	6126      	str	r6, [r4, #16]
 8007b56:	18f6      	adds	r6, r6, r3
 8007b58:	6026      	str	r6, [r4, #0]
 8007b5a:	003e      	movs	r6, r7
 8007b5c:	6165      	str	r5, [r4, #20]
 8007b5e:	1aed      	subs	r5, r5, r3
 8007b60:	60a5      	str	r5, [r4, #8]
 8007b62:	42be      	cmp	r6, r7
 8007b64:	d900      	bls.n	8007b68 <__ssputs_r+0x78>
 8007b66:	003e      	movs	r6, r7
 8007b68:	0032      	movs	r2, r6
 8007b6a:	9903      	ldr	r1, [sp, #12]
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	f000 fa99 	bl	80080a4 <memmove>
 8007b72:	2000      	movs	r0, #0
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	1b9b      	subs	r3, r3, r6
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	199b      	adds	r3, r3, r6
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	b005      	add	sp, #20
 8007b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b84:	002a      	movs	r2, r5
 8007b86:	9802      	ldr	r0, [sp, #8]
 8007b88:	f000 fabb 	bl	8008102 <_realloc_r>
 8007b8c:	1e06      	subs	r6, r0, #0
 8007b8e:	d1e0      	bne.n	8007b52 <__ssputs_r+0x62>
 8007b90:	6921      	ldr	r1, [r4, #16]
 8007b92:	9802      	ldr	r0, [sp, #8]
 8007b94:	f7ff feb0 	bl	80078f8 <_free_r>
 8007b98:	230c      	movs	r3, #12
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	9a02      	ldr	r2, [sp, #8]
 8007b9e:	4240      	negs	r0, r0
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	89a2      	ldrh	r2, [r4, #12]
 8007ba4:	3334      	adds	r3, #52	@ 0x34
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	e7e9      	b.n	8007b80 <__ssputs_r+0x90>
 8007bac:	fffffb7f 	.word	0xfffffb7f

08007bb0 <_svfiprintf_r>:
 8007bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb2:	b0a1      	sub	sp, #132	@ 0x84
 8007bb4:	9003      	str	r0, [sp, #12]
 8007bb6:	001d      	movs	r5, r3
 8007bb8:	898b      	ldrh	r3, [r1, #12]
 8007bba:	000f      	movs	r7, r1
 8007bbc:	0016      	movs	r6, r2
 8007bbe:	061b      	lsls	r3, r3, #24
 8007bc0:	d511      	bpl.n	8007be6 <_svfiprintf_r+0x36>
 8007bc2:	690b      	ldr	r3, [r1, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10e      	bne.n	8007be6 <_svfiprintf_r+0x36>
 8007bc8:	2140      	movs	r1, #64	@ 0x40
 8007bca:	f7ff ff01 	bl	80079d0 <_malloc_r>
 8007bce:	6038      	str	r0, [r7, #0]
 8007bd0:	6138      	str	r0, [r7, #16]
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d105      	bne.n	8007be2 <_svfiprintf_r+0x32>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	9a03      	ldr	r2, [sp, #12]
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	2001      	movs	r0, #1
 8007bde:	4240      	negs	r0, r0
 8007be0:	e0cf      	b.n	8007d82 <_svfiprintf_r+0x1d2>
 8007be2:	2340      	movs	r3, #64	@ 0x40
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	2300      	movs	r3, #0
 8007be8:	ac08      	add	r4, sp, #32
 8007bea:	6163      	str	r3, [r4, #20]
 8007bec:	3320      	adds	r3, #32
 8007bee:	7663      	strb	r3, [r4, #25]
 8007bf0:	3310      	adds	r3, #16
 8007bf2:	76a3      	strb	r3, [r4, #26]
 8007bf4:	9507      	str	r5, [sp, #28]
 8007bf6:	0035      	movs	r5, r6
 8007bf8:	782b      	ldrb	r3, [r5, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <_svfiprintf_r+0x52>
 8007bfe:	2b25      	cmp	r3, #37	@ 0x25
 8007c00:	d148      	bne.n	8007c94 <_svfiprintf_r+0xe4>
 8007c02:	1bab      	subs	r3, r5, r6
 8007c04:	9305      	str	r3, [sp, #20]
 8007c06:	42b5      	cmp	r5, r6
 8007c08:	d00b      	beq.n	8007c22 <_svfiprintf_r+0x72>
 8007c0a:	0032      	movs	r2, r6
 8007c0c:	0039      	movs	r1, r7
 8007c0e:	9803      	ldr	r0, [sp, #12]
 8007c10:	f7ff ff6e 	bl	8007af0 <__ssputs_r>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d100      	bne.n	8007c1a <_svfiprintf_r+0x6a>
 8007c18:	e0ae      	b.n	8007d78 <_svfiprintf_r+0x1c8>
 8007c1a:	6963      	ldr	r3, [r4, #20]
 8007c1c:	9a05      	ldr	r2, [sp, #20]
 8007c1e:	189b      	adds	r3, r3, r2
 8007c20:	6163      	str	r3, [r4, #20]
 8007c22:	782b      	ldrb	r3, [r5, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d100      	bne.n	8007c2a <_svfiprintf_r+0x7a>
 8007c28:	e0a6      	b.n	8007d78 <_svfiprintf_r+0x1c8>
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4252      	negs	r2, r2
 8007c30:	6062      	str	r2, [r4, #4]
 8007c32:	a904      	add	r1, sp, #16
 8007c34:	3254      	adds	r2, #84	@ 0x54
 8007c36:	1852      	adds	r2, r2, r1
 8007c38:	1c6e      	adds	r6, r5, #1
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	60e3      	str	r3, [r4, #12]
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	7013      	strb	r3, [r2, #0]
 8007c42:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007c44:	4b54      	ldr	r3, [pc, #336]	@ (8007d98 <_svfiprintf_r+0x1e8>)
 8007c46:	2205      	movs	r2, #5
 8007c48:	0018      	movs	r0, r3
 8007c4a:	7831      	ldrb	r1, [r6, #0]
 8007c4c:	9305      	str	r3, [sp, #20]
 8007c4e:	f000 fa4d 	bl	80080ec <memchr>
 8007c52:	1c75      	adds	r5, r6, #1
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d11f      	bne.n	8007c98 <_svfiprintf_r+0xe8>
 8007c58:	6822      	ldr	r2, [r4, #0]
 8007c5a:	06d3      	lsls	r3, r2, #27
 8007c5c:	d504      	bpl.n	8007c68 <_svfiprintf_r+0xb8>
 8007c5e:	2353      	movs	r3, #83	@ 0x53
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	185b      	adds	r3, r3, r1
 8007c64:	2120      	movs	r1, #32
 8007c66:	7019      	strb	r1, [r3, #0]
 8007c68:	0713      	lsls	r3, r2, #28
 8007c6a:	d504      	bpl.n	8007c76 <_svfiprintf_r+0xc6>
 8007c6c:	2353      	movs	r3, #83	@ 0x53
 8007c6e:	a904      	add	r1, sp, #16
 8007c70:	185b      	adds	r3, r3, r1
 8007c72:	212b      	movs	r1, #43	@ 0x2b
 8007c74:	7019      	strb	r1, [r3, #0]
 8007c76:	7833      	ldrb	r3, [r6, #0]
 8007c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c7a:	d016      	beq.n	8007caa <_svfiprintf_r+0xfa>
 8007c7c:	0035      	movs	r5, r6
 8007c7e:	2100      	movs	r1, #0
 8007c80:	200a      	movs	r0, #10
 8007c82:	68e3      	ldr	r3, [r4, #12]
 8007c84:	782a      	ldrb	r2, [r5, #0]
 8007c86:	1c6e      	adds	r6, r5, #1
 8007c88:	3a30      	subs	r2, #48	@ 0x30
 8007c8a:	2a09      	cmp	r2, #9
 8007c8c:	d950      	bls.n	8007d30 <_svfiprintf_r+0x180>
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d111      	bne.n	8007cb6 <_svfiprintf_r+0x106>
 8007c92:	e017      	b.n	8007cc4 <_svfiprintf_r+0x114>
 8007c94:	3501      	adds	r5, #1
 8007c96:	e7af      	b.n	8007bf8 <_svfiprintf_r+0x48>
 8007c98:	9b05      	ldr	r3, [sp, #20]
 8007c9a:	6822      	ldr	r2, [r4, #0]
 8007c9c:	1ac0      	subs	r0, r0, r3
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4083      	lsls	r3, r0
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	002e      	movs	r6, r5
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	e7cc      	b.n	8007c44 <_svfiprintf_r+0x94>
 8007caa:	9b07      	ldr	r3, [sp, #28]
 8007cac:	1d19      	adds	r1, r3, #4
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	9107      	str	r1, [sp, #28]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	db01      	blt.n	8007cba <_svfiprintf_r+0x10a>
 8007cb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cb8:	e004      	b.n	8007cc4 <_svfiprintf_r+0x114>
 8007cba:	425b      	negs	r3, r3
 8007cbc:	60e3      	str	r3, [r4, #12]
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	6023      	str	r3, [r4, #0]
 8007cc4:	782b      	ldrb	r3, [r5, #0]
 8007cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cc8:	d10c      	bne.n	8007ce4 <_svfiprintf_r+0x134>
 8007cca:	786b      	ldrb	r3, [r5, #1]
 8007ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cce:	d134      	bne.n	8007d3a <_svfiprintf_r+0x18a>
 8007cd0:	9b07      	ldr	r3, [sp, #28]
 8007cd2:	3502      	adds	r5, #2
 8007cd4:	1d1a      	adds	r2, r3, #4
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	9207      	str	r2, [sp, #28]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	da01      	bge.n	8007ce2 <_svfiprintf_r+0x132>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	425b      	negs	r3, r3
 8007ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ce4:	4e2d      	ldr	r6, [pc, #180]	@ (8007d9c <_svfiprintf_r+0x1ec>)
 8007ce6:	2203      	movs	r2, #3
 8007ce8:	0030      	movs	r0, r6
 8007cea:	7829      	ldrb	r1, [r5, #0]
 8007cec:	f000 f9fe 	bl	80080ec <memchr>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d006      	beq.n	8007d02 <_svfiprintf_r+0x152>
 8007cf4:	2340      	movs	r3, #64	@ 0x40
 8007cf6:	1b80      	subs	r0, r0, r6
 8007cf8:	4083      	lsls	r3, r0
 8007cfa:	6822      	ldr	r2, [r4, #0]
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	7829      	ldrb	r1, [r5, #0]
 8007d04:	2206      	movs	r2, #6
 8007d06:	4826      	ldr	r0, [pc, #152]	@ (8007da0 <_svfiprintf_r+0x1f0>)
 8007d08:	1c6e      	adds	r6, r5, #1
 8007d0a:	7621      	strb	r1, [r4, #24]
 8007d0c:	f000 f9ee 	bl	80080ec <memchr>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d038      	beq.n	8007d86 <_svfiprintf_r+0x1d6>
 8007d14:	4b23      	ldr	r3, [pc, #140]	@ (8007da4 <_svfiprintf_r+0x1f4>)
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d122      	bne.n	8007d60 <_svfiprintf_r+0x1b0>
 8007d1a:	2207      	movs	r2, #7
 8007d1c:	9b07      	ldr	r3, [sp, #28]
 8007d1e:	3307      	adds	r3, #7
 8007d20:	4393      	bics	r3, r2
 8007d22:	3308      	adds	r3, #8
 8007d24:	9307      	str	r3, [sp, #28]
 8007d26:	6963      	ldr	r3, [r4, #20]
 8007d28:	9a04      	ldr	r2, [sp, #16]
 8007d2a:	189b      	adds	r3, r3, r2
 8007d2c:	6163      	str	r3, [r4, #20]
 8007d2e:	e762      	b.n	8007bf6 <_svfiprintf_r+0x46>
 8007d30:	4343      	muls	r3, r0
 8007d32:	0035      	movs	r5, r6
 8007d34:	2101      	movs	r1, #1
 8007d36:	189b      	adds	r3, r3, r2
 8007d38:	e7a4      	b.n	8007c84 <_svfiprintf_r+0xd4>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	200a      	movs	r0, #10
 8007d3e:	0019      	movs	r1, r3
 8007d40:	3501      	adds	r5, #1
 8007d42:	6063      	str	r3, [r4, #4]
 8007d44:	782a      	ldrb	r2, [r5, #0]
 8007d46:	1c6e      	adds	r6, r5, #1
 8007d48:	3a30      	subs	r2, #48	@ 0x30
 8007d4a:	2a09      	cmp	r2, #9
 8007d4c:	d903      	bls.n	8007d56 <_svfiprintf_r+0x1a6>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0c8      	beq.n	8007ce4 <_svfiprintf_r+0x134>
 8007d52:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d54:	e7c6      	b.n	8007ce4 <_svfiprintf_r+0x134>
 8007d56:	4341      	muls	r1, r0
 8007d58:	0035      	movs	r5, r6
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	1889      	adds	r1, r1, r2
 8007d5e:	e7f1      	b.n	8007d44 <_svfiprintf_r+0x194>
 8007d60:	aa07      	add	r2, sp, #28
 8007d62:	9200      	str	r2, [sp, #0]
 8007d64:	0021      	movs	r1, r4
 8007d66:	003a      	movs	r2, r7
 8007d68:	4b0f      	ldr	r3, [pc, #60]	@ (8007da8 <_svfiprintf_r+0x1f8>)
 8007d6a:	9803      	ldr	r0, [sp, #12]
 8007d6c:	e000      	b.n	8007d70 <_svfiprintf_r+0x1c0>
 8007d6e:	bf00      	nop
 8007d70:	9004      	str	r0, [sp, #16]
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	3301      	adds	r3, #1
 8007d76:	d1d6      	bne.n	8007d26 <_svfiprintf_r+0x176>
 8007d78:	89bb      	ldrh	r3, [r7, #12]
 8007d7a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007d7c:	065b      	lsls	r3, r3, #25
 8007d7e:	d500      	bpl.n	8007d82 <_svfiprintf_r+0x1d2>
 8007d80:	e72c      	b.n	8007bdc <_svfiprintf_r+0x2c>
 8007d82:	b021      	add	sp, #132	@ 0x84
 8007d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d86:	aa07      	add	r2, sp, #28
 8007d88:	9200      	str	r2, [sp, #0]
 8007d8a:	0021      	movs	r1, r4
 8007d8c:	003a      	movs	r2, r7
 8007d8e:	4b06      	ldr	r3, [pc, #24]	@ (8007da8 <_svfiprintf_r+0x1f8>)
 8007d90:	9803      	ldr	r0, [sp, #12]
 8007d92:	f000 f87b 	bl	8007e8c <_printf_i>
 8007d96:	e7eb      	b.n	8007d70 <_svfiprintf_r+0x1c0>
 8007d98:	080084c8 	.word	0x080084c8
 8007d9c:	080084ce 	.word	0x080084ce
 8007da0:	080084d2 	.word	0x080084d2
 8007da4:	00000000 	.word	0x00000000
 8007da8:	08007af1 	.word	0x08007af1

08007dac <_printf_common>:
 8007dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dae:	0016      	movs	r6, r2
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	688a      	ldr	r2, [r1, #8]
 8007db4:	690b      	ldr	r3, [r1, #16]
 8007db6:	000c      	movs	r4, r1
 8007db8:	9000      	str	r0, [sp, #0]
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	da00      	bge.n	8007dc0 <_printf_common+0x14>
 8007dbe:	0013      	movs	r3, r2
 8007dc0:	0022      	movs	r2, r4
 8007dc2:	6033      	str	r3, [r6, #0]
 8007dc4:	3243      	adds	r2, #67	@ 0x43
 8007dc6:	7812      	ldrb	r2, [r2, #0]
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	d001      	beq.n	8007dd0 <_printf_common+0x24>
 8007dcc:	3301      	adds	r3, #1
 8007dce:	6033      	str	r3, [r6, #0]
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	069b      	lsls	r3, r3, #26
 8007dd4:	d502      	bpl.n	8007ddc <_printf_common+0x30>
 8007dd6:	6833      	ldr	r3, [r6, #0]
 8007dd8:	3302      	adds	r3, #2
 8007dda:	6033      	str	r3, [r6, #0]
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	2306      	movs	r3, #6
 8007de0:	0015      	movs	r5, r2
 8007de2:	401d      	ands	r5, r3
 8007de4:	421a      	tst	r2, r3
 8007de6:	d027      	beq.n	8007e38 <_printf_common+0x8c>
 8007de8:	0023      	movs	r3, r4
 8007dea:	3343      	adds	r3, #67	@ 0x43
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	1e5a      	subs	r2, r3, #1
 8007df0:	4193      	sbcs	r3, r2
 8007df2:	6822      	ldr	r2, [r4, #0]
 8007df4:	0692      	lsls	r2, r2, #26
 8007df6:	d430      	bmi.n	8007e5a <_printf_common+0xae>
 8007df8:	0022      	movs	r2, r4
 8007dfa:	9901      	ldr	r1, [sp, #4]
 8007dfc:	9800      	ldr	r0, [sp, #0]
 8007dfe:	9d08      	ldr	r5, [sp, #32]
 8007e00:	3243      	adds	r2, #67	@ 0x43
 8007e02:	47a8      	blx	r5
 8007e04:	3001      	adds	r0, #1
 8007e06:	d025      	beq.n	8007e54 <_printf_common+0xa8>
 8007e08:	2206      	movs	r2, #6
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	2500      	movs	r5, #0
 8007e0e:	4013      	ands	r3, r2
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d105      	bne.n	8007e20 <_printf_common+0x74>
 8007e14:	6833      	ldr	r3, [r6, #0]
 8007e16:	68e5      	ldr	r5, [r4, #12]
 8007e18:	1aed      	subs	r5, r5, r3
 8007e1a:	43eb      	mvns	r3, r5
 8007e1c:	17db      	asrs	r3, r3, #31
 8007e1e:	401d      	ands	r5, r3
 8007e20:	68a3      	ldr	r3, [r4, #8]
 8007e22:	6922      	ldr	r2, [r4, #16]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	dd01      	ble.n	8007e2c <_printf_common+0x80>
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	18ed      	adds	r5, r5, r3
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	42b5      	cmp	r5, r6
 8007e30:	d120      	bne.n	8007e74 <_printf_common+0xc8>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e010      	b.n	8007e58 <_printf_common+0xac>
 8007e36:	3501      	adds	r5, #1
 8007e38:	68e3      	ldr	r3, [r4, #12]
 8007e3a:	6832      	ldr	r2, [r6, #0]
 8007e3c:	1a9b      	subs	r3, r3, r2
 8007e3e:	42ab      	cmp	r3, r5
 8007e40:	ddd2      	ble.n	8007de8 <_printf_common+0x3c>
 8007e42:	0022      	movs	r2, r4
 8007e44:	2301      	movs	r3, #1
 8007e46:	9901      	ldr	r1, [sp, #4]
 8007e48:	9800      	ldr	r0, [sp, #0]
 8007e4a:	9f08      	ldr	r7, [sp, #32]
 8007e4c:	3219      	adds	r2, #25
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	d1f0      	bne.n	8007e36 <_printf_common+0x8a>
 8007e54:	2001      	movs	r0, #1
 8007e56:	4240      	negs	r0, r0
 8007e58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e5a:	2030      	movs	r0, #48	@ 0x30
 8007e5c:	18e1      	adds	r1, r4, r3
 8007e5e:	3143      	adds	r1, #67	@ 0x43
 8007e60:	7008      	strb	r0, [r1, #0]
 8007e62:	0021      	movs	r1, r4
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	3145      	adds	r1, #69	@ 0x45
 8007e68:	7809      	ldrb	r1, [r1, #0]
 8007e6a:	18a2      	adds	r2, r4, r2
 8007e6c:	3243      	adds	r2, #67	@ 0x43
 8007e6e:	3302      	adds	r3, #2
 8007e70:	7011      	strb	r1, [r2, #0]
 8007e72:	e7c1      	b.n	8007df8 <_printf_common+0x4c>
 8007e74:	0022      	movs	r2, r4
 8007e76:	2301      	movs	r3, #1
 8007e78:	9901      	ldr	r1, [sp, #4]
 8007e7a:	9800      	ldr	r0, [sp, #0]
 8007e7c:	9f08      	ldr	r7, [sp, #32]
 8007e7e:	321a      	adds	r2, #26
 8007e80:	47b8      	blx	r7
 8007e82:	3001      	adds	r0, #1
 8007e84:	d0e6      	beq.n	8007e54 <_printf_common+0xa8>
 8007e86:	3601      	adds	r6, #1
 8007e88:	e7d1      	b.n	8007e2e <_printf_common+0x82>
	...

08007e8c <_printf_i>:
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	b08b      	sub	sp, #44	@ 0x2c
 8007e90:	9206      	str	r2, [sp, #24]
 8007e92:	000a      	movs	r2, r1
 8007e94:	3243      	adds	r2, #67	@ 0x43
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	9005      	str	r0, [sp, #20]
 8007e9a:	9203      	str	r2, [sp, #12]
 8007e9c:	7e0a      	ldrb	r2, [r1, #24]
 8007e9e:	000c      	movs	r4, r1
 8007ea0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ea2:	2a78      	cmp	r2, #120	@ 0x78
 8007ea4:	d809      	bhi.n	8007eba <_printf_i+0x2e>
 8007ea6:	2a62      	cmp	r2, #98	@ 0x62
 8007ea8:	d80b      	bhi.n	8007ec2 <_printf_i+0x36>
 8007eaa:	2a00      	cmp	r2, #0
 8007eac:	d100      	bne.n	8007eb0 <_printf_i+0x24>
 8007eae:	e0ba      	b.n	8008026 <_printf_i+0x19a>
 8007eb0:	497a      	ldr	r1, [pc, #488]	@ (800809c <_printf_i+0x210>)
 8007eb2:	9104      	str	r1, [sp, #16]
 8007eb4:	2a58      	cmp	r2, #88	@ 0x58
 8007eb6:	d100      	bne.n	8007eba <_printf_i+0x2e>
 8007eb8:	e08e      	b.n	8007fd8 <_printf_i+0x14c>
 8007eba:	0025      	movs	r5, r4
 8007ebc:	3542      	adds	r5, #66	@ 0x42
 8007ebe:	702a      	strb	r2, [r5, #0]
 8007ec0:	e022      	b.n	8007f08 <_printf_i+0x7c>
 8007ec2:	0010      	movs	r0, r2
 8007ec4:	3863      	subs	r0, #99	@ 0x63
 8007ec6:	2815      	cmp	r0, #21
 8007ec8:	d8f7      	bhi.n	8007eba <_printf_i+0x2e>
 8007eca:	f7f8 f923 	bl	8000114 <__gnu_thumb1_case_shi>
 8007ece:	0016      	.short	0x0016
 8007ed0:	fff6001f 	.word	0xfff6001f
 8007ed4:	fff6fff6 	.word	0xfff6fff6
 8007ed8:	001ffff6 	.word	0x001ffff6
 8007edc:	fff6fff6 	.word	0xfff6fff6
 8007ee0:	fff6fff6 	.word	0xfff6fff6
 8007ee4:	0036009f 	.word	0x0036009f
 8007ee8:	fff6007e 	.word	0xfff6007e
 8007eec:	00b0fff6 	.word	0x00b0fff6
 8007ef0:	0036fff6 	.word	0x0036fff6
 8007ef4:	fff6fff6 	.word	0xfff6fff6
 8007ef8:	0082      	.short	0x0082
 8007efa:	0025      	movs	r5, r4
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	3542      	adds	r5, #66	@ 0x42
 8007f00:	1d11      	adds	r1, r2, #4
 8007f02:	6019      	str	r1, [r3, #0]
 8007f04:	6813      	ldr	r3, [r2, #0]
 8007f06:	702b      	strb	r3, [r5, #0]
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e09e      	b.n	800804a <_printf_i+0x1be>
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	6809      	ldr	r1, [r1, #0]
 8007f10:	1d02      	adds	r2, r0, #4
 8007f12:	060d      	lsls	r5, r1, #24
 8007f14:	d50b      	bpl.n	8007f2e <_printf_i+0xa2>
 8007f16:	6806      	ldr	r6, [r0, #0]
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	2e00      	cmp	r6, #0
 8007f1c:	da03      	bge.n	8007f26 <_printf_i+0x9a>
 8007f1e:	232d      	movs	r3, #45	@ 0x2d
 8007f20:	9a03      	ldr	r2, [sp, #12]
 8007f22:	4276      	negs	r6, r6
 8007f24:	7013      	strb	r3, [r2, #0]
 8007f26:	4b5d      	ldr	r3, [pc, #372]	@ (800809c <_printf_i+0x210>)
 8007f28:	270a      	movs	r7, #10
 8007f2a:	9304      	str	r3, [sp, #16]
 8007f2c:	e018      	b.n	8007f60 <_printf_i+0xd4>
 8007f2e:	6806      	ldr	r6, [r0, #0]
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	0649      	lsls	r1, r1, #25
 8007f34:	d5f1      	bpl.n	8007f1a <_printf_i+0x8e>
 8007f36:	b236      	sxth	r6, r6
 8007f38:	e7ef      	b.n	8007f1a <_printf_i+0x8e>
 8007f3a:	6808      	ldr	r0, [r1, #0]
 8007f3c:	6819      	ldr	r1, [r3, #0]
 8007f3e:	c940      	ldmia	r1!, {r6}
 8007f40:	0605      	lsls	r5, r0, #24
 8007f42:	d402      	bmi.n	8007f4a <_printf_i+0xbe>
 8007f44:	0640      	lsls	r0, r0, #25
 8007f46:	d500      	bpl.n	8007f4a <_printf_i+0xbe>
 8007f48:	b2b6      	uxth	r6, r6
 8007f4a:	6019      	str	r1, [r3, #0]
 8007f4c:	4b53      	ldr	r3, [pc, #332]	@ (800809c <_printf_i+0x210>)
 8007f4e:	270a      	movs	r7, #10
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	2a6f      	cmp	r2, #111	@ 0x6f
 8007f54:	d100      	bne.n	8007f58 <_printf_i+0xcc>
 8007f56:	3f02      	subs	r7, #2
 8007f58:	0023      	movs	r3, r4
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	3343      	adds	r3, #67	@ 0x43
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	6863      	ldr	r3, [r4, #4]
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	db06      	blt.n	8007f76 <_printf_i+0xea>
 8007f68:	2104      	movs	r1, #4
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	9d03      	ldr	r5, [sp, #12]
 8007f6e:	438a      	bics	r2, r1
 8007f70:	6022      	str	r2, [r4, #0]
 8007f72:	4333      	orrs	r3, r6
 8007f74:	d00c      	beq.n	8007f90 <_printf_i+0x104>
 8007f76:	9d03      	ldr	r5, [sp, #12]
 8007f78:	0030      	movs	r0, r6
 8007f7a:	0039      	movs	r1, r7
 8007f7c:	f7f8 f95a 	bl	8000234 <__aeabi_uidivmod>
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	3d01      	subs	r5, #1
 8007f84:	5c5b      	ldrb	r3, [r3, r1]
 8007f86:	702b      	strb	r3, [r5, #0]
 8007f88:	0033      	movs	r3, r6
 8007f8a:	0006      	movs	r6, r0
 8007f8c:	429f      	cmp	r7, r3
 8007f8e:	d9f3      	bls.n	8007f78 <_printf_i+0xec>
 8007f90:	2f08      	cmp	r7, #8
 8007f92:	d109      	bne.n	8007fa8 <_printf_i+0x11c>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	07db      	lsls	r3, r3, #31
 8007f98:	d506      	bpl.n	8007fa8 <_printf_i+0x11c>
 8007f9a:	6862      	ldr	r2, [r4, #4]
 8007f9c:	6923      	ldr	r3, [r4, #16]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	dc02      	bgt.n	8007fa8 <_printf_i+0x11c>
 8007fa2:	2330      	movs	r3, #48	@ 0x30
 8007fa4:	3d01      	subs	r5, #1
 8007fa6:	702b      	strb	r3, [r5, #0]
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	1b5b      	subs	r3, r3, r5
 8007fac:	6123      	str	r3, [r4, #16]
 8007fae:	9b07      	ldr	r3, [sp, #28]
 8007fb0:	0021      	movs	r1, r4
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	9805      	ldr	r0, [sp, #20]
 8007fb6:	9b06      	ldr	r3, [sp, #24]
 8007fb8:	aa09      	add	r2, sp, #36	@ 0x24
 8007fba:	f7ff fef7 	bl	8007dac <_printf_common>
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	d148      	bne.n	8008054 <_printf_i+0x1c8>
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	4240      	negs	r0, r0
 8007fc6:	b00b      	add	sp, #44	@ 0x2c
 8007fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fca:	2220      	movs	r2, #32
 8007fcc:	6809      	ldr	r1, [r1, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	6022      	str	r2, [r4, #0]
 8007fd2:	2278      	movs	r2, #120	@ 0x78
 8007fd4:	4932      	ldr	r1, [pc, #200]	@ (80080a0 <_printf_i+0x214>)
 8007fd6:	9104      	str	r1, [sp, #16]
 8007fd8:	0021      	movs	r1, r4
 8007fda:	3145      	adds	r1, #69	@ 0x45
 8007fdc:	700a      	strb	r2, [r1, #0]
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	6822      	ldr	r2, [r4, #0]
 8007fe2:	c940      	ldmia	r1!, {r6}
 8007fe4:	0610      	lsls	r0, r2, #24
 8007fe6:	d402      	bmi.n	8007fee <_printf_i+0x162>
 8007fe8:	0650      	lsls	r0, r2, #25
 8007fea:	d500      	bpl.n	8007fee <_printf_i+0x162>
 8007fec:	b2b6      	uxth	r6, r6
 8007fee:	6019      	str	r1, [r3, #0]
 8007ff0:	07d3      	lsls	r3, r2, #31
 8007ff2:	d502      	bpl.n	8007ffa <_printf_i+0x16e>
 8007ff4:	2320      	movs	r3, #32
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	2e00      	cmp	r6, #0
 8007ffc:	d001      	beq.n	8008002 <_printf_i+0x176>
 8007ffe:	2710      	movs	r7, #16
 8008000:	e7aa      	b.n	8007f58 <_printf_i+0xcc>
 8008002:	2220      	movs	r2, #32
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	4393      	bics	r3, r2
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	e7f8      	b.n	8007ffe <_printf_i+0x172>
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	680d      	ldr	r5, [r1, #0]
 8008010:	1d10      	adds	r0, r2, #4
 8008012:	6949      	ldr	r1, [r1, #20]
 8008014:	6018      	str	r0, [r3, #0]
 8008016:	6813      	ldr	r3, [r2, #0]
 8008018:	062e      	lsls	r6, r5, #24
 800801a:	d501      	bpl.n	8008020 <_printf_i+0x194>
 800801c:	6019      	str	r1, [r3, #0]
 800801e:	e002      	b.n	8008026 <_printf_i+0x19a>
 8008020:	066d      	lsls	r5, r5, #25
 8008022:	d5fb      	bpl.n	800801c <_printf_i+0x190>
 8008024:	8019      	strh	r1, [r3, #0]
 8008026:	2300      	movs	r3, #0
 8008028:	9d03      	ldr	r5, [sp, #12]
 800802a:	6123      	str	r3, [r4, #16]
 800802c:	e7bf      	b.n	8007fae <_printf_i+0x122>
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	1d11      	adds	r1, r2, #4
 8008032:	6019      	str	r1, [r3, #0]
 8008034:	6815      	ldr	r5, [r2, #0]
 8008036:	2100      	movs	r1, #0
 8008038:	0028      	movs	r0, r5
 800803a:	6862      	ldr	r2, [r4, #4]
 800803c:	f000 f856 	bl	80080ec <memchr>
 8008040:	2800      	cmp	r0, #0
 8008042:	d001      	beq.n	8008048 <_printf_i+0x1bc>
 8008044:	1b40      	subs	r0, r0, r5
 8008046:	6060      	str	r0, [r4, #4]
 8008048:	6863      	ldr	r3, [r4, #4]
 800804a:	6123      	str	r3, [r4, #16]
 800804c:	2300      	movs	r3, #0
 800804e:	9a03      	ldr	r2, [sp, #12]
 8008050:	7013      	strb	r3, [r2, #0]
 8008052:	e7ac      	b.n	8007fae <_printf_i+0x122>
 8008054:	002a      	movs	r2, r5
 8008056:	6923      	ldr	r3, [r4, #16]
 8008058:	9906      	ldr	r1, [sp, #24]
 800805a:	9805      	ldr	r0, [sp, #20]
 800805c:	9d07      	ldr	r5, [sp, #28]
 800805e:	47a8      	blx	r5
 8008060:	3001      	adds	r0, #1
 8008062:	d0ae      	beq.n	8007fc2 <_printf_i+0x136>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	079b      	lsls	r3, r3, #30
 8008068:	d415      	bmi.n	8008096 <_printf_i+0x20a>
 800806a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800806c:	68e0      	ldr	r0, [r4, #12]
 800806e:	4298      	cmp	r0, r3
 8008070:	daa9      	bge.n	8007fc6 <_printf_i+0x13a>
 8008072:	0018      	movs	r0, r3
 8008074:	e7a7      	b.n	8007fc6 <_printf_i+0x13a>
 8008076:	0022      	movs	r2, r4
 8008078:	2301      	movs	r3, #1
 800807a:	9906      	ldr	r1, [sp, #24]
 800807c:	9805      	ldr	r0, [sp, #20]
 800807e:	9e07      	ldr	r6, [sp, #28]
 8008080:	3219      	adds	r2, #25
 8008082:	47b0      	blx	r6
 8008084:	3001      	adds	r0, #1
 8008086:	d09c      	beq.n	8007fc2 <_printf_i+0x136>
 8008088:	3501      	adds	r5, #1
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	42ab      	cmp	r3, r5
 8008092:	dcf0      	bgt.n	8008076 <_printf_i+0x1ea>
 8008094:	e7e9      	b.n	800806a <_printf_i+0x1de>
 8008096:	2500      	movs	r5, #0
 8008098:	e7f7      	b.n	800808a <_printf_i+0x1fe>
 800809a:	46c0      	nop			@ (mov r8, r8)
 800809c:	080084d9 	.word	0x080084d9
 80080a0:	080084ea 	.word	0x080084ea

080080a4 <memmove>:
 80080a4:	b510      	push	{r4, lr}
 80080a6:	4288      	cmp	r0, r1
 80080a8:	d902      	bls.n	80080b0 <memmove+0xc>
 80080aa:	188b      	adds	r3, r1, r2
 80080ac:	4298      	cmp	r0, r3
 80080ae:	d308      	bcc.n	80080c2 <memmove+0x1e>
 80080b0:	2300      	movs	r3, #0
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d007      	beq.n	80080c6 <memmove+0x22>
 80080b6:	5ccc      	ldrb	r4, [r1, r3]
 80080b8:	54c4      	strb	r4, [r0, r3]
 80080ba:	3301      	adds	r3, #1
 80080bc:	e7f9      	b.n	80080b2 <memmove+0xe>
 80080be:	5c8b      	ldrb	r3, [r1, r2]
 80080c0:	5483      	strb	r3, [r0, r2]
 80080c2:	3a01      	subs	r2, #1
 80080c4:	d2fb      	bcs.n	80080be <memmove+0x1a>
 80080c6:	bd10      	pop	{r4, pc}

080080c8 <_sbrk_r>:
 80080c8:	2300      	movs	r3, #0
 80080ca:	b570      	push	{r4, r5, r6, lr}
 80080cc:	4d06      	ldr	r5, [pc, #24]	@ (80080e8 <_sbrk_r+0x20>)
 80080ce:	0004      	movs	r4, r0
 80080d0:	0008      	movs	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7fc fb1a 	bl	800470c <_sbrk>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d103      	bne.n	80080e4 <_sbrk_r+0x1c>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d000      	beq.n	80080e4 <_sbrk_r+0x1c>
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	bd70      	pop	{r4, r5, r6, pc}
 80080e6:	46c0      	nop			@ (mov r8, r8)
 80080e8:	20000370 	.word	0x20000370

080080ec <memchr>:
 80080ec:	b2c9      	uxtb	r1, r1
 80080ee:	1882      	adds	r2, r0, r2
 80080f0:	4290      	cmp	r0, r2
 80080f2:	d101      	bne.n	80080f8 <memchr+0xc>
 80080f4:	2000      	movs	r0, #0
 80080f6:	4770      	bx	lr
 80080f8:	7803      	ldrb	r3, [r0, #0]
 80080fa:	428b      	cmp	r3, r1
 80080fc:	d0fb      	beq.n	80080f6 <memchr+0xa>
 80080fe:	3001      	adds	r0, #1
 8008100:	e7f6      	b.n	80080f0 <memchr+0x4>

08008102 <_realloc_r>:
 8008102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008104:	0006      	movs	r6, r0
 8008106:	000c      	movs	r4, r1
 8008108:	0015      	movs	r5, r2
 800810a:	2900      	cmp	r1, #0
 800810c:	d105      	bne.n	800811a <_realloc_r+0x18>
 800810e:	0011      	movs	r1, r2
 8008110:	f7ff fc5e 	bl	80079d0 <_malloc_r>
 8008114:	0004      	movs	r4, r0
 8008116:	0020      	movs	r0, r4
 8008118:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800811a:	2a00      	cmp	r2, #0
 800811c:	d103      	bne.n	8008126 <_realloc_r+0x24>
 800811e:	f7ff fbeb 	bl	80078f8 <_free_r>
 8008122:	002c      	movs	r4, r5
 8008124:	e7f7      	b.n	8008116 <_realloc_r+0x14>
 8008126:	f000 f81c 	bl	8008162 <_malloc_usable_size_r>
 800812a:	0007      	movs	r7, r0
 800812c:	4285      	cmp	r5, r0
 800812e:	d802      	bhi.n	8008136 <_realloc_r+0x34>
 8008130:	0843      	lsrs	r3, r0, #1
 8008132:	42ab      	cmp	r3, r5
 8008134:	d3ef      	bcc.n	8008116 <_realloc_r+0x14>
 8008136:	0029      	movs	r1, r5
 8008138:	0030      	movs	r0, r6
 800813a:	f7ff fc49 	bl	80079d0 <_malloc_r>
 800813e:	9001      	str	r0, [sp, #4]
 8008140:	2800      	cmp	r0, #0
 8008142:	d101      	bne.n	8008148 <_realloc_r+0x46>
 8008144:	9c01      	ldr	r4, [sp, #4]
 8008146:	e7e6      	b.n	8008116 <_realloc_r+0x14>
 8008148:	002a      	movs	r2, r5
 800814a:	42bd      	cmp	r5, r7
 800814c:	d900      	bls.n	8008150 <_realloc_r+0x4e>
 800814e:	003a      	movs	r2, r7
 8008150:	0021      	movs	r1, r4
 8008152:	9801      	ldr	r0, [sp, #4]
 8008154:	f7ff fbc6 	bl	80078e4 <memcpy>
 8008158:	0021      	movs	r1, r4
 800815a:	0030      	movs	r0, r6
 800815c:	f7ff fbcc 	bl	80078f8 <_free_r>
 8008160:	e7f0      	b.n	8008144 <_realloc_r+0x42>

08008162 <_malloc_usable_size_r>:
 8008162:	1f0b      	subs	r3, r1, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	1f18      	subs	r0, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	da01      	bge.n	8008170 <_malloc_usable_size_r+0xe>
 800816c:	580b      	ldr	r3, [r1, r0]
 800816e:	18c0      	adds	r0, r0, r3
 8008170:	4770      	bx	lr
	...

08008174 <_init>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	46c0      	nop			@ (mov r8, r8)
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr

08008180 <_fini>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr
